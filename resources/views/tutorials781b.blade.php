<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Social&page=7 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:45:46 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">68</span> tutorials for “<span class="css-npldjc ehwuahf2">Social</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsdf08.html?product=Channels&amp;tag=Social" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials19b3.html?product=Beams&amp;tag=Social" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Social"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/live-comments-kotlin.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build live comments using Kotlin</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Realtime comments are a natural feature of any social app. In this tutorial, you will learn to build it with Kotlin.</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-likes-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build realtime likes with Laravel</h3><p class="css-k12xad e5jrto45">Learn how to build live social interactions like realtime likes using Laravel, a popular PHP framework.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/counter-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime counter using Kotlin</h3><p class="css-k12xad e5jrto45">Counters are always useful for any app. In this tutorial, we will buld a live click counter using Kotlin.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/floating-hearts-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a floating hearts effect in Swift</h3><p class="css-k12xad e5jrto45">Create a realtime social interactions like floating hearts for your iOS app using Swift</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-feed-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo feed using Vue.js</h3><p class="css-k12xad e5jrto45">Build a photo feed with Vue.js, Node.js, Pusher, and Cloudinary.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-app-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime app with Vue.js</h3><p class="css-k12xad e5jrto45">Build a movie review application with Vue.js and add realtime functionality to it.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build live comments using Swift</h3><p class="css-k12xad e5jrto45">Build a live comments feature in your iOS app using Swift and PHP.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/counter-javascript.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Live Counter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime counter using JavaScript</h3><p class="css-k12xad e5jrto45">Create a realtime vote counter for your website with Pusher and plain JavaScript. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/social-network-javascript.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a simple social network with JavaScript</h3><p class="css-k12xad e5jrto45">Build an app similar to a group chat room where you can see who&#x27;s online and their latest status update in realtime. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsc017.html?tag=Social&amp;page=6" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialsd0f0.html?tag=Social&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialsd777.html?tag=Social&amp;page=5" class="css-za1ua3 edg0byb1">5</a><a href="tutorialsc017.html?tag=Social&amp;page=6" class="css-za1ua3 edg0byb1">6</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials781b.html?tag=Social&amp;page=7" class="css-2wakph edg0byb1">7</a><a href="tutorials725b.html?tag=Social&amp;page=8" class="css-5s6711 edg0byb1">8</a><a href="tutorials725b.html?tag=Social&amp;page=8" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":68,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1w2V25uaQoO0ugIg2QAWwi","type":"Entry","createdAt":"2018-02-28T12:58:47.883Z","updatedAt":"2018-02-28T16:13:29.564Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build live comments using Kotlin","url":"live-comments-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/kotlin-pusher-live-commenting-sample","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}}],"reviewDate":"2017-12-07","description":"Realtime comments are a natural feature of any social app. In this tutorial, you will learn to build it with Kotlin.","prerequisite":"A basic understanding of Kotlin is needed to follow this tutorial.","content":"When building out applications, it's not uncommon to have a commenting feature. With live commenting, comments added will update in realtime across all devices without the user refreshing the page. Applications like Facebook already have this feature.\n\nIn this post, we will build a basic commenting application. We will assume that the user is leaving a comment to a make-believe post. Here is a screen recording of what we will be building:\n\n![live-comments-kotlin-demo](//images.contentful.com/1es3ne0caaid/4p8lPc6uc8IG4A4uC4wA26/5cbb70d07c608431e78d79aa9780e9f0/live-comments-kotlin-demo.gif)\n\n## Requirements\n\nTo follow along in this tutorial you will need the following requirements:\n- Knowledge of the [Kotlin](http://kotlinlang.org/docs/tutorials/) programming language.\n- Android Studio 3.0 installed. [Download here](https://developer.android.com/studio/archive.html).\n- A Pusher application. [Create one here](https://pusher.com).\n- IntelliJ IDEA installed. [Download](https://www.jetbrains.com/idea/download/) here.\n\nWhen you have all the requirements let's start.\n\n\n## Create new application on Pusher\n\nLog into your Pusher dashboard, select apps on the left navigation bar and create a new app. Input your app name (test-app in my own case), select a cluster (eu - Ireland in my case).\n\n![live-comments-kotlin-create-app](//images.contentful.com/1es3ne0caaid/3GV8oGbqPeEQCMU60Q40gS/d131341f910f4ca42580e88f9eb0401d/live-comments-kotlin-create-app.png)\n\nWhen you have created the Pusher app, we will move on to creating our Kotlin application.\n\n## Creating our Android project with Kotlin support\n\nOpen android studio, create a new project. Insert the name of your app and Company domain name then select the “include kotlin support” checkbox to enable Kotlin in the project.\n\n![live-comments-kotlin-create-android-project](//images.contentful.com/1es3ne0caaid/klIIGGdOQEoo0eSWG02qM/56e04ff94e60c9b908a8bda40edc8fec/live-comments-kotlin-create-android-project.png)\n\nFor this article, we will set the minimum supported Android version at 4.03 (API 15). Next, choose an empty activity template and click on Finish.\n\n![live-comments-kotlin-activity-mobile](//images.contentful.com/1es3ne0caaid/7FOAQZ01P2qaU8i4KmY0ou/9accd0b9f696a88f20c3f583e7ef049a/live-comments-kotlin-activity-mobile.png)\n\n\n## Getting the client ready\n\nAdd the pusher dependency in your app `build.gradle` file:\n\n```\n    implementation 'com.pusher:pusher-java-client:1.5.0'\n```\n\nOur layout file will contain:\n\n- A recycler view (to display the comments).\n- An edit-text view (to input our message).\n- A button (to trigger an action to send a message).\n\nA default project is created with the recycler view dependencies, however, look out for this dependency:\n\n```\n    implementation 'com.android.support:design:26.1.0'\n```\n\nand if you don’t find it, add it. \n\nHere is our layout snippet:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n        \n        \u003candroid.support.v7.widget.RecyclerView\n            android:id=\"@+id/recycler_view\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\" /\u003e\n        \u003cFrameLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"?attr/actionBarSize\"\n            android:layout_alignParentBottom=\"true\"\u003e\n            \u003cLinearLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:orientation=\"horizontal\"\u003e\n                \u003cEditText\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_weight=\"1\" /\u003e\n                \u003cButton\n                    android:id=\"@+id/button_send\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                        android:text=\"Send\" /\u003e\n            \u003c/LinearLayout\u003e\n        \u003c/FrameLayout\u003e\n    \u003c/RelativeLayout\u003e\n```\n\nThis is what our app looks like at the moment. It is very bare with no comments yet:\n\n\n![live-comments-kotlin-app-ui](//images.contentful.com/1es3ne0caaid/2qXHi5YssY6Iqkk4SkOC2O/a1c1c4a17ef83d75fd2a1fb9cf75e191/live-comments-kotlin-app-ui.png)\n\n\nWe then create a recycler view adapter class named `RecyclerViewAdapter.kt` . This adapter is a class that handles the display of items in a list.\n\nPaste the code below into our new class:\n\n```\n    class RecyclerViewAdapter (private val mContext: Context) \n      :RecyclerView.Adapter\u003cRecyclerViewAdapter.MyViewHolder\u003e() {        \n       \n        // The initial empty list used by the adapter\n        private var arrayList: ArrayList\u003cString\u003e = ArrayList()\n        \n        // This updates the adapter list with list from MainActivity.kt which contains the messages.  \n        fun setList(arrayList: ArrayList\u003cString\u003e) {\n            this.arrayList = arrayList\n            notifyDataSetChanged()\n        }\n        \n        // The layout design used for each list item\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {\n            val view = LayoutInflater.from(mContext).inflate(android.R.layout.simple_list_item_1, parent, false)\n            return MyViewHolder(view)\n        }\n        \n        // This displays the text for each list item\n        override fun onBindViewHolder(holder: RecyclerViewAdapter.MyViewHolder, position: Int) { \n            holder.text.setText(arrayList.get(position))\n        }\n        \n        // This returns the size of the list.\n        override fun getItemCount(): Int {\n            return arrayList.size\n        }\n        \n        inner class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView), \n        \n        View.OnClickListener {\n            var text: TextView = itemView.findViewById\u003cView\u003e(android.R.id.text1) as \n            TextView\n            init {\n                itemView.setOnClickListener(this)\n            }\n            \n            override fun onClick(view: View) {\n            \n            }\n        }\n    }\n```\n\nWe will need the [Retrofit](https://github.com/square/retrofit) library (a “type-safe HTTP client”) to enable us send messages to our remote server which we will build later on. \n\nAfter adding the retrofit dependencies, your app `build.gradle` file should look like this:\n\n```\n    apply plugin: 'com.android.application'\n    apply plugin: 'kotlin-android'\n    apply plugin: 'kotlin-android-extensions'\n    \n    android {\n        compileSdkVersion 26\n        defaultConfig {\n            applicationId \"com.example.android.pushersample\"\n            minSdkVersion 15\n            targetSdkVersion 26\n            versionCode 1\n            versionName \"1.0\"\n            testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n        }\n        buildTypes {\n            release {\n                minifyEnabled false\n                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n            }\n        }\n    }\n    \n    dependencies {\n        implementation fileTree(dir: 'libs', include: ['*.jar'])\n        implementation \"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version\"\n        implementation 'com.android.support:appcompat-v7:26.1.0'\n        implementation 'com.android.support:design:26.1.0'\n    \n        // pusher depencency\n        implementation 'com.pusher:pusher-java-client:1.5.0'\n        \n        // retrofit dependencies\n        implementation 'com.squareup.retrofit2:retrofit:2.3.0'\n        implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'\n        implementation 'com.squareup.retrofit2:converter-gson:2.3.0'\n        \n        // testing dependencies\n        testImplementation 'junit:junit:4.12'\n        androidTestImplementation 'com.android.support.test:runner:1.0.1'\n        androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'\n    }\n```\n\nNext, create an API Interface file in the `src/main/kotlin` folder called `ApiService.kt`. This interface is used to define endpoints to be used during network calls. For this application, we will create just one endpoint:\n\n```\n    interface ApiService {\n        @GET(\"/{message}\")\n        fun sendMessage(@Path(\"message\") title: String):Call\u003cString\u003e\n    }\n```\n\nCreate a Retrofit Client class in the `src/main/kotlin` folder called `RetrofitClient.kt`. This class gives us an instance of Retrofit for our network calls:\n\n```\n    class RetrofitClient {\n        fun getClient(): ApiService {\n            val httpClient = OkHttpClient.Builder()\n            \n            val builder = Retrofit.Builder()\n                    .baseUrl(\"http://10.0.2.2:5000/\")\n                    .addConverterFactory(ScalarsConverterFactory.create())\n                    .addConverterFactory(GsonConverterFactory.create())\n    \n            val retrofit = builder\n                    .client(httpClient.build())\n                    .build()\n    \n            return retrofit.create(ApiService::class.java)\n        }\n    }\n```\n\n\u003e 💡 We are using the address `10.0.2.2` because this is how the Android default emulator recognises localhost. So the IP address refers to a local server running on your machine.\n\nWe now move to our `MainActivity.kt` file and update it with the methods below:\n\n```\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        setContentView(R.layout.activity_main)\n        \n        // list to hold our messages\n        var arrayList: ArrayList\u003cString\u003e = ArrayList()\n        \n        // Initialize our adapter\n        val adapter = RecyclerViewAdapter(this)\n    \n        // assign a layout manager to the recycler view\n        recycler_view.layoutManager = LinearLayoutManager(this)\n    \n        // assign adapter to the recycler view\n        recycler_view.adapter = adapter\n    \n        // Initialize Pusher\n        val options = PusherOptions()\n        options.setCluster(\"PUSHER_APP_CLUSTER\")\n        val pusher = Pusher(\"PUSHER_APP_KEY\", options)\n    \n        // Subscribe to a Pusher channel\n        val channel = pusher.subscribe(\"my-channel\")\n    \n        // this listener recieves any new message from the server\n        channel.bind(\"my-event\") { channelName, eventName, data -\u003e\n            val jsonObject = JSONObject(data)\n            arrayList.add(jsonObject.getString(\"message\"))\n            runOnUiThread { adapter.setList(arrayList) }\n        }\n        pusher.connect()\n    \n        // We check for button clicks and if any text was inputed, we send the message\n        button_send.setOnClickListener(View.OnClickListener {\n            if (edit_text.text.length\u003e0) {\n                sendMessage(edit_text.text.toString())\n            }\n        })\n    \n    } // end of onCreate method\n    \n    fun sendMessage(message:String) {\n        val call = RetrofitClient().getClient().sendMessage(message)\n        \n        call.enqueue(object : Callback\u003cString\u003e {\n            override fun onResponse(call: Call\u003cString\u003e, response: Response\u003cString\u003e) {\n                edit_text.setText(\"\")\n                hideKeyboard(this@MainActivity)\n            }\n            override fun onFailure(call: Call\u003cString\u003e, t: Throwable) {\n                \n            }\n        })\n    } // end of sendMessage method\n    \n    fun hideKeyboard(activity: Activity) {\n        val imm = activity.getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager\n        \n        // Find the currently focused view, so we can grab the correct window token from it.\n        var view = activity.currentFocus\n    \n        // If no view currently has focus, create a new one, just so we can grab a window token from it\n        if (view == null) {\n            view = View(activity)\n        }\n        \n        imm.hideSoftInputFromWindow(view.windowToken, 0)\n    } // end of hideKeybnoard method\n```\n\n\u003e ⚠️ You will need to replace the `PUSHER_APP_*`  keys with the credentials found in your Pusher application dashboard.\n\nIn the `onCreate` method, we initialised the list to hold the messages, the recycler view adapter to handle the display of items on the list, and assigned the recycler view accordingly.\n\nWe then initialised `PusherOptions` and `Pusher` objects with the necessary parameters. Remember to set the Pusher objects first parameter with your own app key. Your app keys can be found on the App Keys tab of the app you created. If you have forgotten the cluster you chose when creating the app, you can also find it there.\n\nNext, we create a listener for events on that channel. When a new message is received, it will be added to our list and the updated list will be assigned to our adapter so that it can be displayed immediately.\n\nFinally, we added a listener to the button in our layout to enable us send messages. After messages are successfully sent, we clear the text and hide the keyboard.\n\nNext up is to add the Internet permission in your `AndroidManifest.xml` file. Update the file with the code snippet below:\n\n```\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\nWith this change, we are done building our client application.\n\n\n## Building our Kotlin backend server\n\nOur server will be built with Kotlin and hosted locally. You can follow the steps below to quickly get your server running.\n\nCreate a new Gradle based Kotlin project in IntelliJ IDEA.\n\n![live-comments-kotlin-gradle](//images.contentful.com/1es3ne0caaid/6oRjIY2mU86aiI8aq2yIEs/51f15843b628725558ad1908eeecbed5/live-comments-kotlin-gradle.png)\n\nEnter a “groupId” for your app. A groupId can be a package name and it’s usually something like “com.example”.\n\nNext, enter an “artifactId”, it’s usually something like “pusher-server”\n\n![live-comments-kotlin-gradle-wrapper](//images.contentful.com/1es3ne0caaid/3O88Z1M9jiWu0CwGSWoomm/25eb6a298ea1e719d66cd27eee61142c/live-comments-kotlin-gradle-wrapper.png)\n\nIn our project `build.gradle` file, we will add Ktor and pusher server dependencies. Ktor is a framework for building servers and clients in connected systems using the Kotlin programming language.\n\nHere is our complete `build.gradle` file which includes all the dependencies we need:\n\n```\n    group 'com.example'\n    version '1.0-SNAPSHOT'\n    \n    buildscript {\n        // dependency version variables\n        ext.kotlin_version = '1.1.4-3'\n        ext.ktor_version = '0.2.4'\n        repositories {\n            mavenCentral()\n        }\n        dependencies {\n            classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n        }\n    }\n    \n    apply plugin: 'application'\n    apply plugin: 'kotlin'\n    \n    sourceCompatibility = 1.8\n    \n    repositories {\n        mavenCentral()\n        maven {\n            url 'http://dl.bintray.com/kotlin/kotlinx.support'\n        }\n        maven {\n            url 'http://dl.bintray.com/kotlin/ktor'\n        }\n    }\n    \n    mainClassName = 'org.jetbrains.ktor.jetty.DevelopmentHost'\n    \n    dependencies {\n        compile \"org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version\"\n        // ktor dependencies\n        compile \"org.jetbrains.ktor:ktor-core:$ktor_version\"\n        compile \"org.jetbrains.ktor:ktor-locations:$ktor_version\"\n        runtime \"org.jetbrains.ktor:ktor-jetty:$ktor_version\"\n        // pusher server dependency\n        compile \"com.pusher:pusher-http-java:1.0.0\"\n        testCompile group: 'junit', name: 'junit', version: '4.12'\n    }\n    \n    compileKotlin {\n        kotlinOptions.jvmTarget = \"1.8\"\n    }\n    \n    compileTestKotlin {\n        kotlinOptions.jvmTarget = \"1.8\"\n    }\n```\n\nIn your `src/main/kotlin` folder, create a `Main.kt` file and insert this snippet:\n\n```\n    fun Application.main() {\n    \n        val pusher = Pusher(\"PUSHER_APP_ID\", \"PUSHER_APP_KEY\", \"PUSHER_APP_SECRET\")\n        pusher.setCluster(\"PUSHER_APP_CLUSTER\")\n    \n        install(DefaultHeaders)\n        install(CallLogging)\n        install(Routing) {\n            get(\"/{message}\") {\n                val i = call.parameters[\"message\"]!!\n                pusher.trigger(\"my-channel\", \"my-event\", Collections.singletonMap(\"message\", i))\n                call.respond(\"response sent\")\n            }\n    \n        }\n    }\n```\n\n\u003e ⚠️ You will need to replace the `PUSHER_APP_*`  keys with the credentials found in your Pusher application dashboard.\n\nIn the above snippet, we have defined a route that handles new messages. When a message is received, it sends the message to the Pusher channel so it can be picked up by any event listeners on the same channel.\n\nNext, open the `src/main/resources/application.conf` file and set the port to `5000`. If the file does not exist, create it and insert this snippet:\n\n```\n    ktor {\n        deployment {\n            environment = development\n            port = 5000\n        }\n    \n        application {\n            modules = [com.example.MainKt.main]\n        }\n    }\n```\n\nThis file allows you configure the server parameters.\n\nAfter that, open the Terminal on the IDE, and type `./gradlew run` to run the server. To test your server, open `http://localhost:5000/message` and you should see a display saying “response sent”.\n\nNow we’re done with everything. We can make comments and receive updates with no stress, thanks to Pusher.\n\n![live-comments-kotlin-demo](//images.contentful.com/1es3ne0caaid/4p8lPc6uc8IG4A4uC4wA26/5cbb70d07c608431e78d79aa9780e9f0/live-comments-kotlin-demo.gif)\n\n## Conclusion\n\nIn this article, we have demonstrated how to work with Pusher and Kotlin while creating the commenting system. It is a very simple implementation and, of course, you can do more. I am curious to see what you will come up with.","metaTitle":"Build live comments using Kotlin","metaDescription":"Discover how you can build realtime comments with Kotlin for your Android app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"rfQj5WSTm0Ayc4UIaw8sg","type":"Entry","createdAt":"2018-02-28T11:50:49.045Z","updatedAt":"2018-02-28T11:50:49.045Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build realtime likes with Laravel","url":"realtime-likes-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/chirper","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-11-30","description":"Learn how to build live social interactions like realtime likes using Laravel, a popular PHP framework.","prerequisite":"A basic understanding of Laravel is needed to follow this tutorial.","content":"In June 2017, Twitter updated their web and Android apps with an interesting feature: realtime tweet statistics. In case you’re not familiar with Twitter, it simply means that you get to see the number of Likes or Retweets of a tweet increase (or decrease) as people around the world like or retweet it, without having to refresh the page. \n\nIn this article, I’ll be demonstrating how to build your very own realtime likes count on the web using Laravel and Pusher. Here’s how our app will work when we’re done:\n\n![realtime-likes-laravel-demo](//images.contentful.com/1es3ne0caaid/6NMF7Kjf1KkEi0OOkAssUC/7110ea0706b745cd9d78649fc6293002/realtime-likes-laravel-demo.gif)\n\nWe’ll build a very simple app (which I’ll unimaginatively call Chirper) and stuff it with some fake data so we can get moving fast. On the home page of our app, users will see all chirps with the most recent ones first, and they can click a button to Like or Unlike them. Whenever a user likes or unlikes a chirp, the likes count displayed next to the chirp should increment or decrement in every other browser where the page is open.\n\n## Setup the project\n\nI’ll be using Laravel 5.4 in this post, but the techniques here should work for any version of Laravel 5.3 or above:\n\n```\n    composer create-project laravel/laravel=5.4.* chirper\n```\n\nThen set your app details in your .env file:\n\n```\n    APP_NAME=Chirper\n    DB_DATABASE=chirper\n```\n\nRemember to set your `DB_USERNAME` and `DB_PASSWORD` as appropriate for your machine, and to  create a database named “Chirper”.\n\nNext, we'll set up our data structures. To keep things simple, our app will have just two main entities: **users** and **chirps**. Since Laravel already provides us with a User model and migration, we just need to set up the Chirp model and migration.\n\n```\n    php artisan make:model Chirp -m\n```\n\nFor chirps, we'll store:\n\n- the text\n- the date it was posted\n- the user who posted it, and \n- the number of likes it has received\n\nSo we edit the `up` method in the migration file generated by the above command to look like this:\n\n```\n    public function up()\n    {\n        Schema::create('chirps', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003estring('text');\n            $table-\u003eunsignedInteger('user_id');\n            $table-\u003einteger('likes_count')-\u003edefault(0);\n            $table-\u003etimestamp('posted_at');\n    \n            $table-\u003eforeign('user_id')-\u003ereferences('id')-\u003eon('users');\n        });\n    }\n```\n\nLet's open up our Chirp model and make some changes to it. First, we have to tell Laravel that this model doesn't use the regular timestamps (`created_at` and `updated_at`). Then we need to allow its attributes to all be assigned in one go. Lastly, we'll add an accessor so we can easily retrieve the details of the User who posted the chirp.\n\n```\n    \n    class Chirp extends Model\n    {\n        public $timestamps = false;\n    \n        protected $guarded = [];\n    \n        public function author()\n        {\n            return $this-\u003ebelongsTo(User::class, 'user_id', 'id');\n        }\n    }\n```\n\nNext, we’ll write a seed to generate some fake users and their chirps for our app. If you open up the file `database/factories/ModelFactory.php`, you'll notice that Laravel already provides us with a seeder for Users. Let's add one for Chirps:\n\n```\n    $factory-\u003edefine(App\\Chirp::class, function (Faker\\Generator $faker) {\n    \n        return [\n            'text' =\u003e $faker-\u003esentence(),\n            'likes_count' =\u003e $faker-\u003erandomDigitNotNull,\n            'posted_at' =\u003e $faker-\u003edateTimeThisYear(),\n            'user_id' =\u003e random_int(1, 10)\n        ];\n    });\n```  \n\nAnd then we call the factory functions in our `database/seeds/DatabaseSeeder.php`:\n\n```\n    \u003c?php\n    \n    use App\\Chirp;\n    use App\\User;\n    use Illuminate\\Database\\Seeder;\n    \n    class DatabaseSeeder extends Seeder\n    {\n        public function run()\n        {\n            factory(User::class, 10)-\u003ecreate();\n            factory(Chirp::class, 30)-\u003ecreate();\n        }\n    }\n```\n\nNow, if we run \n\n```\n    php artisan migrate --seed\n```\n\nWe should see our database tables have been created and filled with fake data.\n*Note: if you run into this error \"Specified key was too long; max key length is 767 bytes \" when you run migrations, follow* [*these instructions*](https://laravel-news.com/laravel-5-4-key-too-long-error) *to fix it.*\n\n\n## Setup the views\n\nNext, we'll run the command:\n\n```\n    php artisan make:auth\n```\n\nWe won't be using any auth features, but we'll run this because it also saves us time by setting up some frontend templates and JavaScript for us.\n\nLet's set up our home routes and view.\n\nFirst, replace the home route in your `routes/web.php` with our home route:\n\n```\n    Route::get('/', 'HomeController@index');\n```\n\nThen in `app/Controllers/HomeController.php`, we'll implement the `index` method. (Don't forget to remove the `auth` middleware in the constructor):\n\n```\n    public function index()\n    {\n        $chirps = Chirp::with('author')\n            -\u003eorderBy('posted_at', 'desc')\n            -\u003eget();\n        return view('home', ['chirps' =\u003e $chirps]);\n    }\n```\n\nIn this method we simply retrieve all chirps along with their author details and pass them to the view to render. \n\nLastly, we set up the view, a simple UI that displays a list of chirps, with the author name, time posted and a Like button below it next to the number of likes the chirp has.\n\nWe’ll add a few attributes to some elements, though:\n\n- an **`onclick`**handler for each `Like` button.\n- a **`data-chirp-id`** on each button so we can identify which chirp the button references.\n- an **`id`** on each `likes_count` which includes the chirp’s id so we can easily locate it via `document.querySelector`.\n\n```\n    @extends('layouts.app')\n    \n    @section('content')\n        \u003cdiv class=\"container-fluid text-center\"\u003e\n    \n            @foreach($chirps as $chirp)\n            \u003cdiv class=\"jumbotro\"\u003e\n                \u003cdiv\u003eby\n                    \u003cb\u003e{{ $chirp-\u003eauthor-\u003ename  }}\u003c/b\u003e\n                    on\n                    \u003csmall\u003e{{ $chirp-\u003eposted_at }}\u003c/small\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv\u003e\n                    \u003cp\u003e{{ $chirp-\u003etext }}\u003c/p\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv class=\"row\"\u003e\n                    \u003cbutton onclick=\"actOnChirp(event);\" data-chirp-id=\"{{ $chirp-\u003eid }}\"\u003eLike\u003c/button\u003e\n                    \u003cspan id=\"likes-count-{{ $chirp-\u003eid }}\"\u003e{{ $chirp-\u003elikes_count }}\u003c/span\u003e\n                \u003c/div\u003e\n    \n    \n            \u003c/div\u003e\n                @endforeach\n        \u003c/div\u003e\n    @endsection\n```\n\nLet’s start our app to be sure everything’s fine thus far:\n \n```\n    php artisan serve\n```\n\nNow visit your homepage at http://localhost:8000 and you should see all the chirps displayed neatly. \n\n![realtime-likes-laravel-homepage](//images.contentful.com/1es3ne0caaid/183bOD4yKIeWUIIwUEEC2m/86322dc4fdb82799c4e02d7b793b0529/realtime-likes-laravel-homepage.png)\n\n## Implement the like logic\n\nNow we'll implement the logic for liking and unliking a chirp.\n\nFirst of all, we'll take a look at our frontend. When a user clicks on 'Like', we want a couple of things to happen:\n\n\n1. The text on the button changes from `Like` to `Unlike`.\n2. The likes count displayed next to the chirp increases by 1.\n3. An AJAX request is made to the server to increment the likes_count in the database by 1.\n4. The likes count displayed next to the chirp increases by 1 in all other tabs/windows where the page is open. (This is where Pusher comes in.)\n\nSimilarly, for \"unliking\":\n\n\n1. The text on the button changes from `Unlike` to `Like`.\n2. The likes count displayed next to the chirp decreases by 1.\n3. An AJAX request is made to the server to decrement the likes_count in the database by 1.\n4. The likes count displayed next to the chirp decreases by 1 in all other tabs/windows where the page is open. (Again, the Pusher magic.)\n\nIn order for us to easily manage these two types of events, we'll introduce the concept of **chirp actions**. For our basic use case here, we'll just have two types of actions: Like and Unlike. Both actions will go to the same endpoint, where the server will do the database update and return a 200 OK response. Let's define a route for that:\n\n```\n    Route::post('/chirps/{id}/act', 'HomeController@actOnChirp');\n```\n\nThe Like button should make a request of this form:\n\n```\n    {\n      \"action\": \"Like\"\n    }\n```\n\nIn the case of unlikes, the action will be \"Unlike\". In our controller, we retrieve the action value and increment or decrement as needed. We'll use the same HomeController to keep things simple:\n\n```\n    public function actOnChirp(Request $request, $id)\n    {\n        $action = $request-\u003eget('action');\n        switch ($action) {\n            case 'Like':\n                Chirp::where('id', $id)-\u003eincrement('likes_count');\n                break;\n            case 'Unlike':\n                Chirp::where('id', $id)-\u003edecrement('likes_count');\n                break;\n        }\n        return '';\n    }\n```\n\nNow let's implement the JavaScript for liking/unliking. Because the code isn't much, we'll add it directly to the \"content\" section of our home.blade.php:\n\nIn your base layout (`layouts/app.blade.php`), add a section for scripts after the script tag that includes `app.js` (so it gets run after Echo and Axios have been initialized):\n\n```\n    \u003cscript src=\"{{ asset('js/app.js') }}\"\u003e\u003c/script\u003e\n    @yield('js')\n```\n\nWe'll inject our page's JavaScript into that section in our home.blade.php\n\n```\n    @section('js')\n    \u003cscript\u003e\n        var updateChirpStats = {\n            Like: function (chirpId) {\n                document.querySelector('#likes-count-' + chirpId).textContent++;\n            },\n    \n            Unlike: function(chirpId) {\n                document.querySelector('#likes-count-' + chirpId).textContent--;\n            }\n        };\n    \n    \n        var toggleButtonText = {\n            Like: function(button) {\n                button.textContent = \"Unlike\";\n            },\n    \n            Unlike: function(button) {\n                button.textContent = \"Like\";\n            }\n        };\n    \n        var actOnChirp = function (event) {\n            var chirpId = event.target.dataset.chirpId;\n            var action = event.target.textContent;\n            toggleButtonText[action](event.target);\n            updateChirpStats[action](chirpId);\n            axios.post('/chirps/' + chirpId + '/act',\n                { action: action });\n        };\n    \n    \u003c/script\u003e\n    @endsection\n```\n\nFirst, we have two objects containing two methods each, corresponding to the two possible actions. The names of the methods are capitalised so we can easily call them via the text on the button.\n\nThe first object contains methods to update the likes count displayed below the chirp, while the second contains methods to change the text on the button. We've separated these two functionalities because of our criteria no. 4 above: for a different user viewing this page at the same time, only the likes count should update; the text on the button shouldn't change.\n\nWe attach an `onclick` handler (`actOnChirp`) to each chirp like button as they are rendered. In this method, we perform the desired actions: change the button text, update the likes count and send the action to the server using [Axios](https://github.com/axios/axios), which comes bundled with Laravel.\n\nAt this point, visiting the home page and clicking the Like button for a chirp works as expected. All good so far.\n\n\n## Broadcast the event with Pusher\n\nWe need to do one more thing when a chirp is liked or unliked is to ensure the likes count shown in every browser on that page shows the newly updated value. We'll do this by broadcasting a new event whenever a chirp is acted on. Pusher gives us the means to do this with their messaging system, and Laravel provides an events and broadcasting system that supports Pusher out of the box.\n\nFirst, let's create the event class:\n\n```\n    php artisan make:event ChirpAction\n```\n\nFor the browser to update the likes count on the UI accordingly, it needs to know two things:\n\n- which chirp was acted on\n- what kind of action\n\nWe need to send this data along with this event when broadcasting it, so let's open up the generated `app/Events/ChirpAction.php` and add those two. Our class should look something like this:\n\n```\n    \u003c?php\n    \n    namespace App\\Events;\n    \n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    \n    class ChirpAction\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        public $chirpId;\n        public $action;\n    \n        public function __construct($chirpId, $action)\n        {\n            $this-\u003echirpId = $chirpId;\n            $this-\u003eaction = $action;\n        }\n    }\n``` \n\nAnd now we need to fire this event whenever a new chirp action occurs. So we edit our `HomeController`'s `actOnChirp` method to include this:\n\n```\n    public function actOnChirp(Request $request, $id)\n    {\n        $action = $request-\u003eget('action');\n        switch ($action) {\n            case 'Like':\n                Chirp::where('id', $id)-\u003eincrement('likes_count');\n                break;\n            case 'Unlike':\n                Chirp::where('id', $id)-\u003edecrement('likes_count');\n                break;\n        }\n        event(new ChirpAction($id, $action)); // fire the event\n        return '';\n    }\n```\n\nAt this point, whenever a chirp is liked or unliked, the event will be fired. But it's only local to the server, so let's fix that by implementing broadcasting to other clients.\n\n[Create a free Pusher account](https://pusher.com/signup) if you don’t have one already. Then visit [your dashboard](http://dashboard.pusher.com) and create a new app, taking note of your app’s credentials. We’ll need them in a bit.\n\nLet’s set things up on the frontend. We'll use Laravel Echo to listen for and respond to broadcasts via Pusher.\n\nFirst install the needed dependencies:\n\n```\n    npm install --save laravel-echo pusher-js\n```\n\nIn your `resources/assets/bootstrap.js`, uncomment/add these lines:\n\n```\n    import Echo from 'laravel-echo'\n    \n    window.Pusher = require('pusher-js');\n    \n    window.Echo = new Echo({\n        broadcaster: 'pusher',\n        key: 'your-pusher-key',\n        cluster: 'your-app-cluster'\n    });\n``` \n\nReplace `your-pusher-key` and `your-app-cluster` with your app's Pusher key and cluster as seen in your Pusher dashboard.\nIn the script section of our `home.blade.php`, we'll tell Echo to listen for chirp actions and update the chirp's likes counts accordingly:\n\n```\n    Echo.channel('chirp-events')\n        .listen('ChirpAction', function (event) {\n            console.log(event);\n            var action = event.action;\n            updateChirpStats[action](event.chirpId);\n        })\n```\n\nI've named my channel 'chirp-events', but you can use anything you like. The event variable passed to the function will contain the properties we defined earlier on our `ChirpAction` event (`action` and `chirpId`), so we can simply access them and update the UI for the corresponding chirp.\n\nWe're logging the event data to our console, just for debugging purposes, so we can see what's going on.\n\nThen we install all our dependencies and compile our frontend assets so our updates to `bootstrap.js` show up:\n\n```\n    npm install \u0026\u0026 npm run dev\n```\n\nNow, let's set up Echo and Pusher on the server. First, we'll install the Pusher library:\n\n```\n    composer require pusher/pusher-php-server\n```\n\nNext, we'll configure our server to use broadcasting via Pusher. Add this to the `aliases` array of your `config/app.php`:\n\n```\n    'Pusher' =\u003e Pusher\\Pusher::class\n```\n\nAlso uncomment this line from the `providers` array to enable broadcasting:\n\n```\n    App\\Providers\\BroadcastServiceProvider::class,\n```\n\nLet's configure our broadcasting and Pusher settings. Laravel already comes with a `config/broadcasting.php` for this which pulls values from the `.env` file, so open up the `.env` file and edit it:\n\n```\n    BROADCAST_DRIVER=pusher\n    \n    PUSHER_APP_ID=XXXXXXXXX\n    PUSHER_APP_KEY=YYYYYYYY\n    PUSHER_APP_SECRET=ZZZZZZZZ\n```\n\nReplace the stubs above with your app credentials from your Pusher dashboard.\n\nLastly, add your cluster in the `options` array of `config/broadcasting.``php`.\n\nAfter making these changes, you might need to run `php artisan config:cache` so your changes get persisted from the `.env` to the config files.\n\nTo enable broadcasting of our event, we'll make it implement the `ShouldBroadcastNow` interface. (Normally, we would use the `ShouldBroadcast` interface, but then we would need to setup and configure queues. Using `ShouldBroadcastNow` forces the event to be dispatched immediately.)\n\nWe'll also implement a `broadcastOn` method that returns the channel (or channels) we want our event to be broadcast on. We'll use the same channel name we used on the frontend.\n\nAt this point, our event class looks like this:\n\n```\n    namespace App\\Events;\n    \n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcastNow;\n    \n    class ChirpAction implements ShouldBroadcastNow\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        public $chirpId;\n        public $action;\n    \n        public function __construct($chirpId, $action)\n        {\n            $this-\u003echirpId = $chirpId;\n            $this-\u003eaction = $action;\n        }\n        \n        public function broadcastOn()\n        {\n            return new Channel('chirp-events');\n        }\n    }\n```\n\nOkay, we're all set! Open up the homepage of your app in two different tabs and try Liking and Unliking from the different windows. You should see the events get logged to your browser console like this:\n\n![realtime-likes-laravel-console](//images.contentful.com/1es3ne0caaid/6j6Fi0tQHumWq6UYci0iI/e696f4284bba95a306fdb819542551b3/realtime-likes-laravel-console.png)\n\n*Note: If you find an error logged to your console about the WebSocket connection being closed instead, try restarting your browser.*\n\n## Exclude the sender\n\nYou might have noticed that we have a small problem: when you click \"Like\" or \"Unlike\", the count increases or decreases by two, not one. This happens because the event is currently being broadcast to everyone, **including** the tab that sent it. So the first increase is due to the button click, and the second is due to the received message. We need to find a way of excluding the sender of the message from receiving it too. Luckily, we can do that easily with Laravel, by changing one line of code in our `HomeController`'s `actOnChirp` method:\n\n```\n    // replace this...\n    event(new ChirpAction($id, $action));\n    \n    // with this...\n    broadcast(new ChirpAction($id, $action))-\u003etoOthers();\n``` \n\nAnd now, if you Like or Unlike a chirp, you should see it shows up in the other window(s) and increments only by 1 on this window.\nHere's what actually goes on here:\n\n- Pusher provides each connected tab with an identifier called the socket ID. Whenever a Pusher message is sent containing this id, Pusher knows not to send the message to whichever tab owns that ID.\n- Laravel Echo automatically attaches this socket ID to the request sent by Axios as a header, `X-Socket-Id`. You can view it by running `Echo.socketId()` in your console.\n- By using the `broadcast...toOthers` combo, we're letting Laravel know that it should include the socket ID in its message data, so Pusher can exclude that tab. That's all there is to it.\n\n\n## Conclusion\n\nThis is just a proof-of-concept to demonstrate how this could be implemented with event broadcasting via Pusher. There are a lot more complex use cases available, so here's your chance to get started building more powerful things with Pusher and Laravel. Let us know what you build in the comments.","metaTitle":"Build realtime likes with Laravel","metaDescription":"In this tutorial, we will cover how to build important social network features namely realtime likes using Laravel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"18eJwYM8iSyw20owAk2K22","type":"Entry","createdAt":"2018-02-28T12:47:47.749Z","updatedAt":"2018-02-28T12:47:47.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime counter using Kotlin","url":"counter-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5HjouOQyOIwCcyuswYcIuc","type":"Entry","createdAt":"2018-02-16T18:20:46.412Z","updatedAt":"2018-04-23T13:19:32.814Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Perfect Makanju","url":"perfect-makanju","email":"damiperfect@gmail.com","twitter":"https://twitter.com/perfectmak","github":"https://github.com/perfectmak","guestWriter":true}}],"projectRepo":"https://github.com/perfectmak/kotlin-realtime-counter-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}}],"reviewDate":"2017-11-09","description":"Counters are always useful for any app. In this tutorial, we will buld a live click counter using Kotlin.","prerequisite":"A basic understanding of Kotlin is needed to follow this tutorial.","content":"It is important to show realtime updates of what is happening in an application, and one form of this is a realtime counter. A realtime counter can be used to show users of an app how other users are interacting with their content. For example, Instagram uses a realtime counter to show when viewers like a live video. This makes users of the application feel more engaged as they will be getting immediate feedback when things change.\n\nIn this tutorial, I’ll show you how to use Pusher to create a realtime counter in Kotlin. We will be creating a simple Android application with a counter showing how many users have clicked on a button. This click count also updates in realtime when other users click on it. Below is a GIF of how the application will work:\n\n![counter-kotlin-demo](//images.contentful.com/1es3ne0caaid/4RFWmypH1mE4guKcMYkw8M/329b583077cae82ad6cda5e12cb8b1d8/counter-kotlin-demo.gif)\n\nWe will be using Kotlin to develop both the realtime web server and the Android application, so a basic working knowledge of Kotlin and Android development will be required to follow this tutorial.\n\n\n## Overview\n\nWe will build a web server that keeps track of how many times a button has been clicked. The web server will also expose an endpoint which the Android application can call to send click events, the web server would then increment the click count and send a broadcast using Pusher to all clients currently subscribed to the click event. \n\nSo based on the above, this post is going to be in two sections:\n\n1. Building the realtime server using Kotlin\n2. Building the Android application using Kotlin\n\nSo lets get started.\n\n\n### Create a Pusher account\n\nBefore we get started, you would need to create a Pusher application. Go on to [Pusher](https://pusher.com) and create an account, but if you already have an account, just login. Then, create a new app from the dashboard and store the apps keys as we would be using them later in this post.\n\n### Building the realtime server\n\nKotlin is a very versatile language and one of its interesting features is its ability to be compiled to Javascript. We are going to use this feature to build a Kotlin server application that would be run with Node.js.\n\nIn order to compile Kotlin to Javascript and run on Node.js, you would need to have [Node.js](https://nodejs.org/en/download/) and [Gradle](https://gradle.org/install/) installed on your computer. The remaining part of this tutorial will assume you have both installed on your machine.\n\nFirst, run the command:\n\n```\n    npm init\n```\n\nAfter entering the appropriate setup information, you should have your `package.json` file created for you in your directory. \nNext, create a `build.gradle` file in the same directory and copy the following into the file:\n\n```\n    group 'kotlin-realtime-counter'\n    version '1.0'\n    buildscript {\n      ext.kotlin_version = '1.1.3'\n        repositories {\n          mavenCentral()\n          jcenter()\n        }\n      dependencies {\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n      }\n    }\n    apply plugin: 'kotlin2js'\n    repositories {\n      mavenCentral()\n      jcenter()\n    }\n    dependencies {\n      compile \"org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version\"\n    }\n    compileKotlin2Js.kotlinOptions {\n      moduleKind = \"commonjs\"\n      outputFile = \"build/app.js\"\n    }\n```\n\nThis `build.gradle` file would compile our Kotlin code into Javascript to run. Some things to note are:\n\n1. You can change the `group` and `version` to something that suits your project. In this case it is set to `kotlin-realtime-counter`.\n2. The `outputFile`  option at the bottom of the file is used to set where the location of the Javascript file that our Kotlin code will be compiled into. In this case it would be compiled into the `build` directory inside an `app.js` file.\n\nNow in order for this build to work, all the Kotlin code needs to be put in the directory `src/main/kotlin`. This can be created with the following command:\n\n```\n    mkdir -p src/main/kotlin\n```\n\nAfter executing the above command, your project directory structure should look like this:\n\n```\n    |- src\n      |- main\n        |- kotlin\n    |- build.gradle\n    |- package.json\n```\n\nSo, let’s get down to coding our server. We need to install the following Node.js libraries using npm:\n\n```\n    npm install --save kotlin express pusher\n```\n\nThis will install the Kotlin.js library needed for our compiled Javascript code to work. It will also be installing express for creating our server and the Pusher library for making realtime event broadcasts.\n\nNow, create a file named `ClickCount.kt` inside the `src/main/kotlin` folder, and write the following code in it:\n\n```\n    data class ClickCount(val count: Int)\n```\n\nThis `ClickCount` class will be used as a data object to encapsulate information about the number of times a click has be recorded. It’s importance will be seen later in the post.\n\nNext, create a file named `App.kt` inside the `src/main/kotlin` folder. In the `App.kt` file, we need to first define some external functions and classes that would exist normally in the Node.js environment. This way, Kotlin would know the signature of these functions and not throw an error when they are being used.\n\n```\n    external fun require(module: String): dynamic\n    \n    @JsModule(\"pusher\")\n    external class Pusher(config: Any) {\n        fun trigger(channel: String, event: String, data: Any)\n    }\n```\nHere we define the following functions:\n\n- require(): This is declaring the standard nodejs require function used to import modules. We will be using it later to import the express library. The `[dynamic](https://kotlinlang.org/docs/reference/dynamic-type.html)` type only exists for Kotlin codes targeting Javascript. The most peculiar feature of `dynamic` is that we are allowed to call any property or function with any parameters on it, hence giving us the dynamic typed feature of Javascript.\n- Pusher: Here we are declaring the Pusher class and the `Pusher.trigger()` function we will be using later on. The `[@JsModule](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-module/index.html)` indicates that this class should be imported from the `pusher` library we added as a dependency earlier.\n\n\n\u003e External functions and class declarations are generally used to declare functions or objects that exists on the Javascript global object. \n\u003e \n\u003e External class declarations having the `@JsModule` are typically used to declare classes of external modules that need to be instantiated using the `new` keyword, as Kotlin doesn’t support the `new` keyword.\n\nNext, we initialize our server and Pusher configuration values.\n\n```\n    val express = require(\"express\")\n    val pusherConfig  = object {\n        val appId = \"YOUR_PUSHER_APP_ID\"\n        val key = \"YOUR_PUSHER_KEY\"\n        val secret = \"YOUR_PUSHER_SECRET\"\n        val cluster = \"YOUR_PUSHER_APP_CLUSTER\"\n        val encrypted = true\n    }\n    val clickChannel = \"click-channel\"\n    val clickEvent = \"click-event\"\n    var currentClickCount = 0\n```\n\nYou would need to update your `pusherConfig` object values with the keys you got from creating a Pusher application earlier. The `currentClickCount` variable will be used to keep track of the number of times a click has been recorded.\n\nNext, we implement the main function that would be run when our code is executed.\n\n```\n    fun main(args: Array\u003cString\u003e) {\n        val app = express()\n        val pusher = Pusher(pusherConfig)\n        \n        app.get(\"/counts\", { _, res -\u003e\n            res.json(ClickCount(currentClickCount))\n        })\n        app.post(\"/clicks\", { _, res -\u003e\n            currentClickCount++\n            // broadcast new ClickCount\n            pusher.trigger(clickChannel, clickEvent, ClickCount(currentClickCount))\n            res.status(200).send()\n        })\n        \n        app.listen(9999, {\n            println(\"Listening on port 9999\")\n        })\n    }\n```\n\nHere we initialize the `express` server and create a pusher object using the `pusherConfig` declared earlier. We then expose two endpoints:\n\n1. `GET /counts`: HTTP GET requests will be sent to this endpoint to get the current click counts recorded so far. The `currentClickCount` is then returned as a JSON object of `ClickCount`.\n2. `POST /clicks`: POST requests will be made to this endpoint to indicate that the button has been clicked. This will record the click count by incrementing the `currentClickCount` and then send a broadcast of the updated `currentClickCount` using pusher to all listeners of the `clickEvent` on the `clickChannel`.\n\nAnd lastly in the `main()` function, we expose the `express` server to listen on port `9999`.\n\nNow the server code is ready and we just need to compile to Javascript so we can run with node. To build, run the following Gradle command in the same directory containing the `build.gradle` file created earlier:\n\n```\n    gradle build\n```\n\nOn completion, this would generate a Javascript file in `build/app.js`. We just need to run this file using node like this:\n\n```\n    node build/app.js\n```\n\nAnd voila 👏, you should have the realtime server now running on port `9999`.\nThe whole code for this server can be found in this [repository](https://github.com/perfectmak/kotlin-realtime-counter-server-pusher).\n\nNow, let’s go on to build the Android application that would be interacting with this server.\n\n### 2. Building the Android application\n\nTo make it easy to get started with Kotlin for Android development, we will be using [Android Studio 3.0](https://developer.android.com/studio/preview/index.html) as this version has the Kotlin plugin bundled with it. If you are using an Android Studio version less than than 3.0 refer [here](https://kotlinlang.org/docs/tutorials/kotlin-android.html) for detailed instructions to get started.\n\nSo launch your Android Studio 3.0 IDE and create a new project. You can give the project any name but for this tutorial we will name the project ‘Click Counter’. Also ensure that you check the `Include Kotlin Support` option as shown in the image below:\n\n\n![counter-kotlin-create-project](//images.contentful.com/1es3ne0caaid/5IRj10lAooKuQwYyIkUimo/26aac60bbc03e75fa57277ce3b07bf23/counter-kotlin-create-project.png)\n\n\nClick on `Next` several times and then `Finish` and the Android project will be created and setup.\n\nAfter the project has finished building, open up your app module’s `build.gradle` file and add the following to the `dependencies` section:\n\n```\n    apply plugin: 'com.android.application'\n    apply plugin: 'kotlin-android'\n    apply plugin: 'kotlin-android-extensions'\n    \n    android {\n      ...\n    }\n    \n    dependencies {\n      ... \n      implementation \"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version\"\n         \n      implementation 'com.pusher:pusher-java-client:1.5.0'\n      implementation 'com.squareup.okhttp3:okhttp:3.8.0'\n      implementation 'com.google.code.gson:gson:2.8.0'\n    }\n```\n\n\u003e If you are using an Android Studio version earlier than 3.0, you should replace `implementation` with `compile`. `implementation` was introduced with Gradle 3.0 and `compile` is now being deprecated. You can read more about these changes [here](https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_separation).\n\u003e \n\u003e Also ensure the applied ‘kotlin-android-extensions’ plugin is added to the `build.gradle` file if you are using an Android Studio version earlier than 3.0\n\nNext, open up your AndroidManifest.xml file and add the Internet permission like so:\n\n```\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        package=\"pusher.com.clickcounter\"\u003e\n        \n        \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n    \n        \u003capplication\n            ...\u003e\n            ...\n        \u003c/application\u003e\n    \n    \u003c/manifest\u003e\n```\n\nNext, let us design the interface of our application. The application would have a single activity which contains a single button and text view showing the current number of times the button has been clicked. So open your `activity_main.xml` layout file and update it with the following code:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.design.widget.CoordinatorLayout\n        android:id=\"@+id/rootLayout\"\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\"pusher.com.clickcounter.MainActivity\"\u003e\n        \u003candroid.support.constraint.ConstraintLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\u003e\n    \n            \u003cTextView\n                android:id=\"@+id/descriptionText\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginTop=\"55dp\"\n                android:text=\"Click to show some love\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n            \u003candroid.support.design.widget.FloatingActionButton\n                android:id=\"@+id/clickButton\"\n                android:layout_width=\"50dp\"\n                android:layout_height=\"50dp\"\n                android:layout_marginTop=\"15dp\"\n                android:src=\"@mipmap/heart\"\n                app:fabSize=\"auto\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toBottomOf=\"@+id/descriptionText\"/\u003e\n    \n            \u003cTextView\n                android:id=\"@+id/textView\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"27dp\"\n                android:layout_marginEnd=\"8dp\"\n                android:layout_marginStart=\"8dp\"\n                android:layout_marginTop=\"55dp\"\n                android:text=\"Number of clicks so far is:\"\n                android:textSize=\"21sp\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toBottomOf=\"@+id/clickButton\" /\u003e\n    \n            \u003cTextView\n                android:id=\"@+id/countTextView\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginEnd=\"8dp\"\n                android:layout_marginStart=\"8dp\"\n                android:layout_marginTop=\"8dp\"\n                android:text=\"loading...\"\n                android:textSize=\"30sp\"\n                android:textStyle=\"bold\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toBottomOf=\"@+id/textView\" /\u003e\n        \u003c/android.support.constraint.ConstraintLayout\u003e\n    \u003c/android.support.design.widget.CoordinatorLayout\u003e\n```\n\nThe layout is pretty straight forward, things to note are the `FloatingActionButton` with id `clickButton` and the `countTextView` to display the current click count.\n\nNow, create a new Kotlin class named `ClickCount` inside the `com.pusher.clickcounter` and copy the following into the file:\n\n```\n    package pusher.com.clickcounter\n    \n    data class ClickCount(val count: Int)\n```\n\nNext, open the `MainActivity.kt` class and lets write the code that ties all the functionality together. Inside this file, start by defining some configuration constants and initializing some required variables.\n\n```\n    package com.pusher.clickcounter\n    \n    ...\n    \n    class MainActivity : AppCompatActivity() {\n      companion object {\n          const val SERVER_URL = \"http://NODE_JS_SERVER_ENDPOINT\"\n          const val PUSHER_API_KEY = \"PUSHER_API_KEY\"\n          const val PUSHER_CLUSTER = \"PUSHER_APP_CLUSTER\"\n          const val CLICK_CHANNEL = \"click-channel\"\n          const val CLICK_EVENT = \"click-event\"\n      }\n    \n      val pusherOptions = PusherOptions().setCluster(PUSHER_CLUSTER)\n      val pusher = Pusher(PUSHER_API_KEY, pusherOptions)\n      val httpClient = OkHttpClient()\n      \n      ...  \n    }\n```\n\nNote that you would have to set the `SERVER_URL` to the actual url where your realtime server is running. Also, update the `PUSHER_API_KEY` and `PUSHER_CLUSTER` values to your Pusher applications credentials.\n\nNext, the `onCreate()` method should look like this:\n\n```\n    package com.pusher.clickcounter\n    \n    ...\n    import kotlinx.android.synthetic.main.activity_main.*\n    ...\n    \n    class MainActivity : AppCompatActivity() {\n      ...\n      \n      override fun onCreate(savedInstanceState: Bundle?) {\n          super.onCreate(savedInstanceState)\n          setContentView(R.layout.activity_main)\n      \n          fetchCurrentClickCount()\n          connectToRealtimeUpdates()\n          clickButton.setOnClickListener { postClick() }\n      }\n      \n      ...  \n    }\n```\n\nFirst, we fetch the current click count by invoking the `fetchCurrentClickCount()` method. Next, we connect to get realtime updates of when the click count changes. Finally we attach an `onClickListener` to the `clickButton` button.\n\n\u003e We are able to get a reference to the `clickButton` button directly without having to use `findViewById()` because of the [Kotlin Android Extensions](https://kotlinlang.org/docs/tutorials/android-plugin.html) plugin we applied to this project in the `build.gradle` file.\n\nNow let us explore the contents of the `fetchCurrentClickCount()`, `connectToRealtimeUpdates()` and `postClick()` functions respectively.\n\n#### The fetchCurrentClickCount() method\n\nThis method makes a GET request to the servers `/counts` endpoint and updates the `countTextView`'s text with the count gotten from the servers response. \n\n```\n    private fun fetchCurrentClickCount() {\n      val getClickCountRequest = Request.Builder().url(\"$SERVER_URL/counts\").build()\n    \n      httpClient.newCall(getClickCountRequest)\n        .enqueue(object: Callback {\n          override fun onResponse(call: Call?, response: Response?) {\n            response?.body()?.also { body -\u003e\n              val clickCount = Gson().fromJson(body.string(), ClickCount::class.java)\n              runOnUiThread { countTextView.text = clickCount.count.toString() }\n            }\n          }\n          \n          override fun onFailure(call: Call?, e: IOException?) {\n            runOnUiThread {\n              showError(\"Network error loading current count\", \"Retry\") {\n                fetchCurrentClickCount()\n                dismiss()\n              }\n            }\n          }\n        })\n    }\n```\n\nIf an error occurs while making the request, an error message will be displayed using the `showError()` function:\n\n```\n    private fun showError(msg: String, action: String, callback: Snackbar.(View) -\u003e Unit) {\n        val errorSnackbar = Snackbar.make(rootLayout, msg, Snackbar.LENGTH_INDEFINITE)\n        errorSnackbar.setAction(action) {\n            callback(errorSnackbar, it)\n        }\n        errorSnackbar.show()\n    }\n```\n\nThe `showError()` function displays a Snackbar containing the `msg` passed in and an `action` button. When the action button is clicked, the `callback` is invoked.\n\n\n\u003e Notice the type of the `callback` function is an [extension function](https://kotlinlang.org/docs/reference/extensions.html) on Snackbar ( i.e. `Snackbar.(View) → Unit` ). This makes it easy for the calling code to have access the Snackbar instance without explicitly passing a reference to the `callback`.\n\n\n#### The connectToRealtimeUpdates() method\n\nThe `connectToRealtimeUpdates()` method subscribes to the Pusher `CLICK_CHANNEL` and binds an event listener to  `CLICK_EVENT`' events on the channel.\n\n```\n    private fun connectToRealtimeUpdates() {\n      val pusherChannel = pusher.subscribe(CLICK_CHANNEL)\n      pusherChannel.bind(CLICK_EVENT) { _, _, data -\u003e\n        val clickCount = Gson().fromJson(data, ClickCount::class.java)\n        runOnUiThread { countTextView.text = clickCount.count.toString() }\n      }\n    }\n```\n\nThe event listener deserializes the `data` into a `ClickCount` object using `Gson` and then updates the `countTextView`'s text with the count provided.\n\n\n#### The postClick() method\n\nThe `postClick()` method is invoked when the `clickButton` is tapped. It sends a `POST` request to the servers `/clicks` endpoint.\n\n```\n    private fun postClick() {\n      val emptyBody = RequestBody.create(null, \"\")\n      val postClickRequest = Request.Builder().url(\"$SERVER_URL/clicks\").post(emptyBody)\n                              .build()\n    \n      httpClient.newCall(postClickRequest)\n        .enqueue(object: Callback {\n          override fun onResponse(call: Call?, response: Response?) { }\n          \n          override fun onFailure(call: Call?, e: IOException?) {\n            runOnUiThread {\n                showError(\"Network error sending click\",\"Retry\") {\n                    postClick()\n                    dismiss()\n                }\n            }\n          }\n        })\n    }\n```\n\nIf an error occurs while posting the click event, a error Snackbar is displayed via the `showError()` function.\n\nAnd finally, in the activity we connect and disconnect pusher in the `onResume()` and `onPause()` lifecycle methods respectively.\n\n```\n    class MainActivity : AppCompatActivity() {\n      ...\n      \n      override fun onResume() {\n        super.onResume()\n        pusher.connect()\n      }\n      \n      override fun onPause() {\n        pusher.disconnect()\n        super.onPause()\n      }\n    }\n```\n\nThere you have it. The realtime counter Android application is now ready. \nYou can find the complete code for the Android application [here](https://github.com/perfectmak/kotlin-realtime-counter-pusher).\n\n\n## Testing it out\n\nTo test it out, ensure that the realtime server we built earlier is running and the Android application’s `SERVER_URL` is updated accordingly.\n\nNow, run the application on multiple devices. You would notice that as you click on the button, the count increases in realtime across all the devices.\n\n\n## Conclusion\n\nIt has been a long post, but we were able to see how Pusher can be used to build a realtime counter. We have also seen how we can use Kotlin’s super powers to supercharge our application.\n\nSome additional things that can be done to improve this application include:\n\n- Sharing similar Kotlin code between the server and Android application. For example, the `ClickCount` class can be moved out to a separate module and shared between the server and Android applications. Link to a sample project that achieved this can be found below.\n- Changing the data type for the counter from `Int` to something like `BigInteger` to handle larger counts.\n- Persisting the `currentClickCount` to a database. Note that this may give rise to some other issues that need consideration such as atomically incrementing the click count to avoid race conditions.\n\nLet me know in the comments below if you have any questions or suggestions to improve this tutorial. I’ll love to hear your thoughts. Cheers!\n\n## Further Reading\n- [Getting Started with Kotlin and Javascript](https://kotlinlang.org/docs/tutorials/javascript/getting-started-gradle/getting-started-with-gradle.html)\n- [Getting Started with Android and Kotlin](https://kotlinlang.org/docs/tutorials/kotlin-android.html)\n- [Kotlin Android Extensions](https://kotlinlang.org/docs/tutorials/android-plugin.html)\n- [Sharing Kotlin Code across Platforms](https://github.com/wojta/hello-kotlin)","metaTitle":"Build a realtime counter using Kotlin","metaDescription":"In this tutorial, find out how you can build a realtime click counter leveraging from the power of Kotlin."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SkmKrcQxy0YGm8uqUYSE0","type":"Entry","createdAt":"2018-02-27T12:36:50.591Z","updatedAt":"2018-03-01T18:12:51.945Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a floating hearts effect in Swift","url":"floating-hearts-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/Realtime-Floating-Hearts-iOS-Pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2017-08-07","description":"Create a realtime social interactions like floating hearts for your iOS app using Swift","prerequisite":"A basic understanding of Swift and Node.js is needed to follow this tutorial.","content":"If you are a user of applications like Periscope, Instagram and Facebook, then you may have noticed they have a feature in their live streams where anytime someone likes the live content, the ‘likes’ float on your screen. This article will show you how you can implement the realtime floating hearts feature on your iOS application using Swift and Pusher. \n\nHere is a screen recording of what we will be achieving in this tutorial using Swift and Pusher.\n\n![floating-hearts-swift-demo](//images.contentful.com/1es3ne0caaid/7yuRqr4Fc4MWQ2oUeooS6Y/42c37cc1c3036e2faf1571a79d8b9fd9/floating-hearts-swift-demo.gif)\n\nFrom the recording, you can see that when the like button is tapped, the likes float to the top and they are also replicated on another device viewing the video being played. \n\nNow, let's begin the journey.\n\n## Requirements\nTo follow along in this tutorial you will need the following things:\n\n- Knowledge of Swift and Xcode storyboards.\n- Xcode installed on your machine.\n- A Pusher application - you can create a free Pusher account [here](https://pusher.com).\n- Node.js and NPM installed on your machine.\n- Cocoapods installed on your machine - install it using Ruby by running: `gem install cocoapods`.\n\nHopefully, you have all the requirements checked off. Let’s get started.\n\n\n## Creating the floating hearts application in Xcode\n\nLaunch Xcode and in there create a new project. We are going to call the app **streamlove** (yes, it’s lame we know). When you are done with the initial setup, close Xcode and launch terminal. `cd` to the root directory of your application and run `pod init`. This will create a `Podfile`  in the root directory. Open it in your text editor and replace the code there with the following:\n\n```\n    platform :ios, '9.0'\n    target 'streamlove' do\n      use_frameworks!\n      pod 'PusherSwift', '~\u003e 4.0'\n      pod 'Alamofire', '~\u003e 4.4'\n    end \n```\n\nAfter that save and close the file and run the command `pod install`. This should start installing all the dependencies required for the application we are creating. Now open the `streamlove.xcworkspace` file in Xcode.\n\nThe next thing we need to do is design our applications storyboard. Open the `Main.storyboard` file. We are going to add some mock views because we do not really want to implement anything on them and they are just there for the aesthetics. The main things we will focus on are the button and the background video. After designing our storyboard, this is what we hope to have:\n\n\n![floating-hearts-swift-storyboard](//images.contentful.com/1es3ne0caaid/11wmWB3OJgGcMyeYow6Gsc/516599ff54eea378db9739a6e0c70b0f/floating-hearts-swift-storyboard.png)\n\n\nIn this storyboard, we have a button to the bottom right of the screen, and that button has an `@IBAction`  in the `ViewController` so you will need to `ctrl+drag` to make the connection between the button and the `ViewController`.\n\nThis should add the `@IBAction` to the `ViewController` as shown below:\n\n```\n    @IBAction func hearted(_ sender: Any) {\n        // This function will be fired every time the button is tapped!\n    }\n```\n\n## Creating a background looping video in iOS using Swift\n\nNext, we will create the video background that will just simulate a live stream (since creating an actual live stream falls far out of the scope of this article). Open the `ViewController` file and paste the following in it:\n\n```\n    import UIKit\n    import PusherSwift\n    import Alamofire\n    \n    class ViewController: VideoSplashViewController {\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            loadVideoStreamSample()\n        }\n    \n        private func loadVideoStreamSample() {\n            let url = NSURL.fileURL(withPath: Bundle.main.path(forResource: \"video\", ofType: \"mp4\")!)\n            self.videoFrame = view.frame\n            self.fillMode = .resizeAspectFill\n            self.alwaysRepeat = true\n            self.sound = true\n            self.startTime = 0.0\n            self.duration = 10.0\n            self.alpha = 0.7\n            self.backgroundColor = UIColor.black\n            self.contentURL = url\n            self.restartForeground = true\n        }\n        \n        override var prefersStatusBarHidden: Bool {\n            return true\n        }  \n        \n        @IBAction func hearted(_ sender: Any) {\n            // This function will be called everytime the button is tapped!\n        }\n    }\n```\n\nIn the first line, we have imported the libraries we will need, but mostly later in the tutorial. Now, let us focus on the others. The `ViewController` extends a `VideoSplashViewController` that we have not yet created. In the `viewDidLoad` method we have called a method `loadVideoStreamSample` and in that method, we are basically loading a video and setting some parameters for the video. These parameters will be implemented in the `VideoSplashViewController`.\n\nNow for the `VideoSplashViewController`, we will be using a Swift library that is [available on Github](https://github.com/svtek/VideoSplashKit/). However, because the library does not support Swift 3, we will be picking out the files we need and converting them to support Swift 3. The first one is the [VideoSplashViewController](https://github.com/svtek/VideoSplashKit/blob/master/VideoSplashKit/Source/VideoSplashViewController.swift). Create a new file `VideoSplashViewController` that extends `UIViewController` and in there paste the following:\n\n```\n    import UIKit\n    import MediaPlayer\n    import AVKit\n    \n    public enum ScalingMode {\n        case resize\n        case resizeAspect\n        case resizeAspectFill\n    }\n    \n    public class VideoSplashViewController: UIViewController {\n        \n        private let moviePlayer = AVPlayerViewController()\n        private var moviePlayerSoundLevel: Float = 1.0\n        \n        public var videoFrame: CGRect = CGRect()\n        public var startTime: CGFloat = 0.0\n        public var duration: CGFloat = 0.0\n        public var backgroundColor = UIColor.black { didSet { view.backgroundColor = backgroundColor } }\n        public var contentURL: URL = URL(fileURLWithPath: \"\") { didSet { setMoviePlayer(url: contentURL) } }\n        public var sound: Bool = true { didSet { moviePlayerSoundLevel = sound ? 1 : 0 } }\n        public var alpha: CGFloat = 1 { didSet { moviePlayer.view.alpha = alpha } }\n        \n        public var alwaysRepeat: Bool = true {\n            \n            didSet {\n                \n                if alwaysRepeat {\n                    NotificationCenter.default.addObserver(forName:.AVPlayerItemDidPlayToEndTime, object:nil, queue:nil) { [weak self] (notification) in\n                        self?.playerItemDidReachEnd()\n                    }\n                    return\n                }\n                \n                if !alwaysRepeat {\n                    NotificationCenter.default.removeObserver(self, name:.AVPlayerItemDidPlayToEndTime, object: nil)\n                }\n            }\n        }\n        \n        public var fillMode: ScalingMode = .resizeAspectFill {\n            didSet {\n                switch fillMode {\n                case .resize:\n                    moviePlayer.videoGravity = AVLayerVideoGravityResize\n                case .resizeAspect:\n                    moviePlayer.videoGravity = AVLayerVideoGravityResizeAspect\n                case .resizeAspectFill:\n                    moviePlayer.videoGravity = AVLayerVideoGravityResizeAspectFill\n                }\n            }\n        }\n        \n        public var restartForeground: Bool = false {\n            didSet {\n                if restartForeground {\n                    NotificationCenter.default.addObserver(forName:.UIApplicationWillEnterForeground, object:nil, queue:nil) { [weak self] (notification) in\n                        self?.playerItemDidReachEnd()\n                    }\n                }\n            }\n        }\n        \n        override public func viewDidAppear(_ animated: Bool) {\n            super.viewDidAppear(animated)\n            moviePlayer.view.frame = videoFrame\n            moviePlayer.view.backgroundColor = self.backgroundColor;\n            moviePlayer.showsPlaybackControls = false\n            moviePlayer.view.isUserInteractionEnabled = false\n            view.addSubview(moviePlayer.view)\n            view.sendSubview(toBack: moviePlayer.view)\n        }\n        \n        private func setMoviePlayer(url: URL){\n            let videoCutter = VideoCutter()\n            videoCutter.cropVideoWithUrl(videoUrl: url, startTime: startTime, duration: duration) { [weak self] (videoPath, error) -\u003e Void in\n                guard let path = videoPath, let strongSelf = self else { return }\n                strongSelf.moviePlayer.player = AVPlayer(url: path)\n                strongSelf.moviePlayer.player?.addObserver(strongSelf, forKeyPath: \"status\", options: .new, context: nil)\n                strongSelf.moviePlayer.player?.play()\n                strongSelf.moviePlayer.player?.volume = strongSelf.moviePlayerSoundLevel\n            }\n        }\n        \n        public override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {\n            \n            guard let player = object as? AVPlayer else {\n                super.observeValue(forKeyPath: keyPath, of: object, change: change, context: context)\n                return\n            }\n            \n            if player.status == .readyToPlay {\n                movieReadyToPlay()\n            }\n        }\n        \n        deinit{\n            moviePlayer.player?.removeObserver(self, forKeyPath: \"status\")\n            NotificationCenter.default.removeObserver(self)\n        }\n        \n        // Override in subclass\n        public func movieReadyToPlay() { }\n        \n        func playerItemDidReachEnd() {\n            moviePlayer.player?.seek(to: kCMTimeZero)\n            moviePlayer.player?.play()\n        }\n        \n        func playVideo() {\n            moviePlayer.player?.play()\n        }\n        \n        func pauseVideo() {\n            moviePlayer.player?.pause()\n        }\n    }\n```\n\nNow create another file called `VideoCutter` that extends `NSObject` and paste in the following:\n\n```\n    import UIKit\n    import AVFoundation\n    \n    extension String {\n        var convert: NSString { return (self as NSString) }\n    }\n    \n    public class VideoCutter: NSObject {\n        \n        /**\n         Block based method for crop video url\n         \n         @param videoUrl Video url\n         @param startTime The starting point of the video segments\n         @param duration Total time, video length\n         \n         */\n        public func cropVideoWithUrl(videoUrl url: URL, startTime: CGFloat, duration: CGFloat, completion: ((_ videoPath:URL?, _ error: NSError?) -\u003e Void)?) {\n            \n            DispatchQueue.global().async {\n                \n                let asset = AVURLAsset(url: url, options: nil)\n                var outputPath = NSHomeDirectory()\n                let documentPaths = NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)\n                if (documentPaths.count \u003e 0) {\n                    outputPath = documentPaths.first!\n                }\n                let fileManager = FileManager.default\n                \n                guard let exportSession = AVAssetExportSession(asset: asset, presetName: \"AVAssetExportPresetHighestQuality\") else { return }\n                let outputFilePath = outputPath.convert.appendingPathComponent(\"output.mp4\")\n                \n                if fileManager.fileExists(atPath: outputFilePath) {\n                    do {\n                        try fileManager.removeItem(atPath: outputFilePath)\n                    } catch let error {\n                        print(error)\n                    }\n                }\n                \n                do {\n                    try fileManager.createDirectory(atPath:outputPath, withIntermediateDirectories: true, attributes: nil) }\n                catch let error {\n                    print(error)\n                }\n                \n                let start = CMTimeMakeWithSeconds(Float64(startTime), 600)\n                let duration = CMTimeMakeWithSeconds(Float64(duration), 600)\n                let range = CMTimeRangeMake(start, duration)\n                let outputURL = URL(fileURLWithPath: outputFilePath)\n                exportSession.outputURL = outputURL\n                exportSession.timeRange = range\n                exportSession.shouldOptimizeForNetworkUse = true\n                exportSession.outputFileType = AVFileTypeMPEG4\n                exportSession.exportAsynchronously(completionHandler: {\n                    switch exportSession.status {\n                    case .completed:\n                        DispatchQueue.main.async { completion?(exportSession.outputURL, nil) }\n                    default:\n                        DispatchQueue.main.async { completion?(nil, nil) }\n                    }\n                })\n            }\n        }\n    }\n```\n\nIn the files above we just created, it basically helps you manage the video background and sets a video of your choosing as the background video and loops it forever. This can also be useful for application landing pages. However, we are just using it for a make-believe video stream.\n\n\n\u003e 💡 **If you are using a Swift version below 3, then you can use the source code as is in the repository, however, if you use Swift 3 or above you may need these modifications to make it work.**\n\nNow the last thing we need to do is add an mp4 file to our workspace. You can use any mp4 file you wish to use. Drop the video file `video.mp4` into the workspace and **make sure it is copied** and added to the application target.\n\nIf you build and preview your application now you should see the video looping in the background. Great.\n\n\n## Adding floating hearts to your iOS application\n\nNow that we have the video looping in the background, the next thing we will do is add the floating heart functionality to the application. Basically, every time someone clicks the heart button, a heart icon should float to the top and slowly disappear. \n\nOpen the `Main.storyboard` file and in the bottom right above the heart button, add a View with no background. This will be the viewport where the floating hearts will travel. You can make it a rectangle of about 250x350.\n\nNext, we will be using another [library from Github](https://github.com/ravenshore/iOS-Floaters) to add the floating hearts functionality to the application. The file we actually need is the [Floater.swift](https://github.com/ravenshore/iOS-Floaters/blob/master/floaters/Floater.swift) file. The library does not yet have any package manager way to install it so we will be copying the contents of the file and adding it to a file in our workspace. \n\nWe are building with Swift 3 so we need to make some modifications to the class, so copy and paste the code below if you are using Swift 3, and use as is if you are not. Create a new file `Floater.swift` and extend the `UIView` object. Paste this into the class:\n\n```\n    import UIKit\n    \n    @IBDesignable public class Floater: UIView {\n        \n        var image1: UIImage?\n        var image2: UIImage?\n        var image3: UIImage?\n        var image4: UIImage?\n        \n        var isAnimating: Bool = false\n        var views: [UIView]!\n        var duration: TimeInterval = 1.0\n        var duration1: TimeInterval = 2.0\n        var duration2: TimeInterval = 2.0\n        var floatieSize = CGSize(width: 50, height: 50)\n        var floatieDelay: Double = 10\n        var delay: Double = 10.0\n        var startingAlpha: CGFloat = 1.0\n        var endingAlpha: CGFloat = 0.0\n        var upwards: Bool = true\n        var remove: Bool = true\n        \n        @IBInspectable var removeAtEnd: Bool = true {\n            didSet {\n                remove = removeAtEnd\n            }\n        }\n        @IBInspectable var FloatingUp: Bool = true {\n            didSet {\n                upwards = FloatingUp\n            }\n        }\n        @IBInspectable var alphaAtStart: CGFloat = 1.0 {\n            didSet {\n                startingAlpha = alphaAtStart\n            }\n        }\n        @IBInspectable var alphaAtEnd: CGFloat = 0.0 {\n            didSet {\n                endingAlpha = alphaAtEnd\n            }\n        }\n        @IBInspectable var rotationSpeed: Double = 10 {\n            didSet {\n                duration2 = 20 / rotationSpeed\n            }\n        }\n        @IBInspectable var density: Double = 10 {\n            didSet {\n                floatieDelay = 1 / density\n            }\n        }\n        @IBInspectable var delayedStart: Double = 10 {\n            didSet {\n                delay = delayedStart\n            }\n        }\n        @IBInspectable var speedY: CGFloat = 10 {\n            didSet {\n                duration = Double(10/speedY)\n            }\n        }\n        @IBInspectable var speedX: CGFloat = 5 {\n            didSet {\n                duration1 = Double(10/speedX)\n            }\n        }\n        @IBInspectable var floatieWidth: CGFloat = 50 {\n            didSet {\n                floatieSize.width = floatieWidth\n            }\n        }\n        @IBInspectable var floatieHeight: CGFloat = 50 {\n            didSet {\n                floatieSize.height = floatieHeight\n            }\n        }\n        @IBInspectable var borderColor: UIColor = UIColor.clear {\n            didSet {\n                layer.borderColor = borderColor.cgColor\n            }\n        }\n        \n        @IBInspectable var borderWidth: CGFloat = 0 {\n            didSet {\n                layer.borderWidth = borderWidth\n            }\n        }\n        \n        @IBInspectable var cornerRadius: CGFloat = 0 {\n            didSet {\n                layer.cornerRadius = cornerRadius\n            }\n        }\n        \n        @IBInspectable var floaterImage1: UIImage? {\n            didSet {\n                image1 = floaterImage1\n            }\n        }\n        @IBInspectable var floaterImage2: UIImage? {\n            didSet {\n                image2 = floaterImage2\n            }\n        }\n        @IBInspectable var floaterImage3: UIImage? {\n            didSet {\n                image3 = floaterImage3\n            }\n        }\n        @IBInspectable var floaterImage4: UIImage? {\n            didSet {\n                image4 = floaterImage4\n            }\n        }\n        \n        override public func awakeFromNib() {\n            super.awakeFromNib()\n        }\n        \n        func startAnimation() {\n            print(\"Start Animating\")\n            isAnimating = true\n            views = []\n            var imagesArray = [UIImage?]()\n            var actualImages = [UIImage]()\n            let frameW = self.frame.width\n            let frameH = self.frame.height\n            var startingPoint: CGFloat!\n            var endingPoint: CGFloat!\n            if upwards {\n                startingPoint = frameH\n                endingPoint = floatieHeight*2\n            } else {\n                startingPoint = 0\n                endingPoint = frameH - floatieHeight*2\n            }\n            imagesArray += [image1, image2, image3, image4]\n            if !imagesArray.isEmpty {\n                for i in imagesArray {\n                    if i != nil {\n                        actualImages.append(i!)\n                    }\n                }\n            }\n            \n            let deadlineTime = DispatchTime.now() + .seconds(Int(self.delay * Double(NSEC_PER_SEC)))\n            \n            DispatchQueue.global().asyncAfter(deadline: deadlineTime, execute: {\n                var goToNext = true\n                while self.isAnimating {\n                    if goToNext {\n                        goToNext = false\n                        \n                        DispatchQueue.main.asyncAfter(deadline: .now()+0.3, execute: {\n                            let randomNumber = self.randomIntBetweenNumbers(firstNum:1, secondNum: 2)\n                            var randomRotation: CGFloat!\n                            if randomNumber == 1 {\n                                randomRotation = -1\n                            } else {\n                                randomRotation = 1\n                            }\n                            let randomX = self.randomFloatBetweenNumbers(firstNum: 0 + self.floatieSize.width/2, secondNum: self.frame.width - self.floatieSize.width/2)\n                            let floatieView = UIView(frame: CGRect(x: randomX, y: startingPoint, width: 50, height: 50))\n                            self.addSubview(floatieView)\n                            \n                            let floatie = UIImageView(frame: CGRect(x: 0, y: 0, width: self.floatieSize.width, height: self.floatieSize.height))\n                            \n                            if !actualImages.isEmpty {\n                                \n                                let randomImageIndex = (self.randomIntBetweenNumbers(firstNum: 1, secondNum: actualImages.count) - 1 )\n                                floatie.image = actualImages[randomImageIndex]\n                                floatie.center = CGPoint(x: 0, y: 0)\n                                floatie.backgroundColor = UIColor.clear\n                                floatie.layer.zPosition = 10\n                                floatie.alpha = self.startingAlpha\n                                \n                                floatieView.addSubview(floatie)\n                                var xChange: CGFloat!\n                                if randomX \u003c self.frame.width/2 {\n                                    xChange = randomX + self.randomFloatBetweenNumbers(firstNum: randomX, secondNum: frameW-randomX)\n                                } else {\n                                    xChange = self.randomFloatBetweenNumbers(firstNum: self.floatieSize.width*2, secondNum: randomX)\n                                }\n                                \n                                \n                                self.views.append(floatieView)\n                                UIView.animate(withDuration: self.duration, delay: 0,\n                                               options: [], animations: {\n                                                floatieView.center.y = endingPoint\n                                                floatie.alpha = self.endingAlpha\n                                                goToNext = false\n                                }, completion: {(value: Bool) in\n                                    if self.remove {\n                                        floatieView.removeFromSuperview()\n                                    }\n                                })\n                                UIView.animate(withDuration: self.duration1, delay: 0,\n                                               options: [.repeat, .autoreverse], animations: {\n                                                floatieView.center.x = xChange\n                                }, completion: nil)\n                                UIView.animate(withDuration: self.duration2, delay: 0, options: [.repeat, .autoreverse], animations: {                 floatieView.transform = CGAffineTransform(rotationAngle: CGFloat(M_PI_2)*randomRotation)\n                                }, completion: nil)\n                            }\n                        })\n                    }\n                }\n            })\n        }\n        \n        func stopAnimation() {\n            print(\"Stop Animating\")\n            views = []\n            isAnimating = false\n            if !views.isEmpty {\n                for i in views {\n                    i.removeFromSuperview()\n                }\n            }\n        }\n        \n        func randomFloatBetweenNumbers(firstNum: CGFloat, secondNum: CGFloat) -\u003e CGFloat{\n            return CGFloat(arc4random()) / CGFloat(UINT32_MAX) * abs(firstNum - secondNum) + min(firstNum, secondNum)\n        }\n        \n        func randomIntBetweenNumbers(firstNum: Int, secondNum: Int) -\u003e Int{\n            return firstNum + Int(arc4random_uniform(UInt32(secondNum - firstNum + 1)))\n        }\n    }\n```\n\nThe library simply creates a floating heart when the `startAnimation` method is called and stops it when the `stopAnimation` method is called. Now that the file is created, open your `Main.storyboard` file and add the `Floater.swift`  View to the floater view we created earlier. This should add some new options in the side bar. These options are due to `@IBDesignable` and `@IBInspectable` that were added to the `Floater.swift` class.\n\n\n\u003e 💡  `**IBDesignable**` **and** `**IBInspectable**` **, a way to create custom elements and the attributes. This can be directly added to the iOS Interface Builder.** [**Read more about IBDesignable and IBInspectable**](https://medium.com/@Anantha1992/ibdesignable-and-ibinspectable-in-swift-3-702d7dd00ca)**.**\n\nNow in the new options fields, add the following values:\n\n\n![floating-hearts-swift-floater-view](//images.contentful.com/1es3ne0caaid/DK4nH4QJNI6WGgMowSYC8/d94465731cb3045d8e86d9b3d7f68e48/floating-hearts-swift-floater-view.png)\n\n\nFor the floater image, add a 30x30 heart image to your workspace and then select it in the floater image section.\n\nNow open the `ViewController` and add the following methods:\n\n```\n    @IBOutlet weak var floaterView: Floater!\n    \n    private func startEndAnimation() {\n        floaterView.startAnimation()\n        DispatchQueue.main.asyncAfter(deadline: .now() + 1, execute: {\n            self.floaterView.stopAnimation()\n        })\n    }\n```\n\nNow call the `startEndAnimation` from the `hearted` method so it is invoked when the button is pressed. Make sure the `@IBOutlet floaterView` is linked to the view port that we created earlier in the article. Now, when you build and preview, you should see the heart floating every time the button is clicked.\n\n\n## Adding realtime functionality to our floating hearts using Pusher\n\nNow that we have successfully added the floating hearts, the next thing to do is add realtime functionality using Pusher. If you have not already, [create a Pusher account](https://pusher.com), create a new application and copy the credentials as you will need them.\n\nOpen the `ViewController`  and in there add the following:\n\n```\n    static let API_ENDPOINT = \"http://localhost:4000\";\n    \n    var pusher : Pusher!\n    \n    let deviceUuid : String = UIDevice.current.identifierForVendor!.uuidString\n    \n    private func listenForNewLikes() {\n        pusher = Pusher(key: \"PUSHER_KEY\", options: PusherClientOptions(host: .cluster(\"PUSHER_CLUSTER\")))\n        \n        let channel = pusher.subscribe(\"likes\")\n        let _ = channel.bind(eventName: \"like\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String: AnyObject] {\n                let uuid = data[\"uuid\"] as! String\n                \n                if uuid != self.deviceUuid {\n                    self.startEndAnimation()\n                }\n            }\n        })\n        pusher.connect()\n    }\n    \n    private func postLike() {\n        let params: Parameters = [\"uuid\": deviceUuid]\n        \n        Alamofire.request(ViewController.API_ENDPOINT + \"/like\", method: .post, parameters: params).validate().responseJSON { response in\n            switch response.result {\n                \n            case .success:\n                print(\"Liked\")\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n```\n\nFirst, we define some class properties for storing the API endpoint base URL, the Pusher instance and the device UUID. The `listenForNewLikes` is where we define a listener that waits for events sent from Pusher and then fires a callback when it receives the event. We will be using that to trigger the floating hearts `startAndEndAnimation` method. The `postLike` method is where we use `AlamoFire` to hit an endpoint (we will create this next). The endpoint will be where we send “like” events to Pusher so they can be broadcast to other listeners on the channel.\n\nIf all is well, your `ViewController` should now look like this:\n\n```\n    import UIKit\n    import PusherSwift\n    import Alamofire\n    \n    class ViewController: VideoSplashViewController {\n        \n        @IBOutlet weak var floaterView: Floater!\n        \n        static let API_ENDPOINT = \"http://localhost:4000\";\n        \n        var pusher : Pusher!\n        \n        let deviceUuid : String = UIDevice.current.identifierForVendor!.uuidString\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            loadVideoStreamSample()\n            listenForNewLikes()\n        }\n        \n        @IBAction func hearted(_ sender: Any) {\n            postLike()\n            startEndAnimation()\n        }\n        \n        private func startEndAnimation() {\n            floaterView.startAnimation()\n            DispatchQueue.main.asyncAfter(deadline: .now() + 1, execute: {\n                self.floaterView.stopAnimation()\n            })\n        }\n        \n        private func listenForNewLikes() {\n            pusher = Pusher(key: \"PUSHER_KEY\", options: PusherClientOptions(host: .cluster(\"PUSHER_CLUSTER\")))\n            \n            let channel = pusher.subscribe(\"likes\")\n            let _ = channel.bind(eventName: \"like\", callback: { (data: Any?) -\u003e Void in\n                if let data = data as? [String: AnyObject] {\n                    let uuid = data[\"uuid\"] as! String\n                    \n                    if uuid != self.deviceUuid {\n                        self.startEndAnimation()\n                    }\n                }\n            })\n            pusher.connect()\n        }\n        \n        private func postLike() {\n            let params: Parameters = [\"uuid\": deviceUuid]\n            \n            Alamofire.request(ViewController.API_ENDPOINT + \"/like\", method: .post, parameters: params).validate().responseJSON { response in\n                switch response.result {\n                    \n                case .success:\n                    print(\"Liked\")\n                case .failure(let error):\n                    print(error)\n                }\n            }\n        }\n        \n        private func loadVideoStreamSample() {\n            let url = NSURL.fileURL(withPath: Bundle.main.path(forResource: \"video\", ofType: \"mp4\")!)\n            self.videoFrame = view.frame\n            self.fillMode = .resizeAspectFill\n            self.alwaysRepeat = true\n            self.sound = true\n            self.startTime = 0.0\n            self.duration = 10.0\n            self.alpha = 0.7\n            self.backgroundColor = UIColor.black\n            self.contentURL = url\n            self.restartForeground = true\n        }\n        \n        override var prefersStatusBarHidden: Bool {\n            return true\n        }  \n    }\n```\n\n\u003e ⚠️  **You should replace the “PUSHER_CLUSTER” and “PUSHER_KEY” with the actual values gotten from your Pusher application dashboard.**\n\nThat should do it for the Xcode side of things. Now we need to create a backend application for our application. This backend app will just receive the payload from the application and send it to Pusher.\n\n\n## Creating the Node.js backend for our realtime floating hearts app\n\nCreate a directory for the web application and then create two new files:\n\nThe **index.js** file…\n\n```\n    let Pusher     = require('pusher');\n    let express    = require('express');\n    let app        = express();\n    let bodyParser = require('body-parser')\n    let pusher     = new Pusher(require('./config.js')['config']);\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    app.post('/like', (req, res, next) =\u003e {\n      let payload = {uuid: req.body.uuid}\n      pusher.trigger('likes', 'like', payload)\n      res.json({success: 200})\n    })\n    \n    app.get('/', (req, res) =\u003e {\n      res.json(\"It works!\");\n    });\n    \n    app.use((req, res, next) =\u003e {\n        let err = new Error('Not Found');\n        err.status = 404;\n        next(err);\n    });\n    \n    app.listen(4000, function() {\n        console.log('App listening on port 4000!')\n    });\n```\n\nThe `index.js` file also has one route where it receives messages from the iOS application and triggers the Pusher event which is picked up by the application. \n\nThe next file is the **packages.json** where we define the NPM dependencies:\n\n```\n    {\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.16.0\",\n        \"express\": \"^4.14.1\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nFinally, we have the **config.js**  where we will put our Pusher configuration:\n\n```\n    module.exports = {\n        appId: 'PUSHER_ID',\n        key: 'PUSHER_KEY',\n        secret: 'PUSHER_SECRET',\n        cluster: 'PUSHER_CLUSTER',\n    };\n```\n\nNow run `npm install` on the directory and then `node index.js` once the npm installation is complete. You should see *App listening on port 4000!* message.\n\n\n## Testing our floating hearts application\n\nOnce you have your local node web server running, you will need to make some changes so your application can talk to the local web server. In the `info.plist` file, make the following changes:\n\n\n![floating-hearts-swift-allow-arbitrary-loads](//images.contentful.com/1es3ne0caaid/7K1HQwIDFm0kYOykE4OaYm/005559df4f1430b742d2b8530d86c151/floating-hearts-swift-allow-arbitrary-loads.png)\n\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n## Conclusion\n\nIn this article, we have been able to replicate the floating hearts feature that apps like Facebook, Instagram, Periscope etc have. You can use this as a base to expand the actual feature into a working application of your own.","metaTitle":"Build a floating hearts effect in Swift","metaDescription":" Build a realtime floating hearts feature on your iOS application using Swift and Pusher and create your own Periscope, Instagram and Facebook hearts feature."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4mADBlWvfacEiEm6ga8qQ6","type":"Entry","createdAt":"2018-02-28T10:53:22.724Z","updatedAt":"2018-02-28T10:53:22.724Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo feed using Vue.js","url":"photo-feed-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/pusher-realtime-upload","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2017-08-03","description":"Build a photo feed with Vue.js, Node.js, Pusher, and Cloudinary.","prerequisite":"A basic understanding of Vue.js and Node.js is needed to follow this tutorial.","content":"When your app offers social sharing features, realtime notifications could be vital.\n\nOne example is Instagram, a popular app for editing and sharing photos and videos with friends \u0026 family. Users get realtime updates as feeds on posts made by their friends and other people they follow on the the platform.\n\nIn this tutorial, we will implement a similar social sharing app using some common developer tools, such as:\n- [Vue](https://vuejs.org): Frontend framework to simplify our DOM interactions.\n- [Node](https://nodejs.org): JavaScript server for handling requests from clients, as well as sending responses\n- [Pusher](https://pusher.com): Free realtime pub/sub service. Pusher makes realtime as easy as using basic events.\n- [Cloudinary](https://cloudinary.com/users/register/free?utm_source=Pusher\u0026utm_medium=Post_1\u0026utm_content=Vue_Image_Upload): End-to-end image management solution that enables storage, manipulation, optimization and delivery.\n\n![photo-feed-vuejs-app-architecture](//images.contentful.com/1es3ne0caaid/1nxyJE7begcQgOuCiUWOMA/6b19851723644cd83ee57ba66fe5ada1/photo-feed-vuejs-app-architecture.png)\n\nOf course, there are other utility tools, like Bootstrap, Express and NeDB, that simplify some time-consuming tasks. We will learn about those while we walk through the demo.\n\nLet's first build a server for the app.\n\n## Setting Up a Node Server\n\nA simple Node server is enough for the task at hand. To create one, run the following init command in an empty directory:\n\n```\n    npm init -y\n```\n\nYou should see a package.json file right in the folder. You can start installing the dependencies needed in the project:\n\n```\n    npm install --save express nedb cors body-parser connect-multiparty pusher cloudinary\n```\n\nThe dependencies help with the following outlined tasks:\n\n\n- [express](http://expressjs.com/): Routing framework for Node\n- [nedb](https://github.com/louischatriot/nedb): Disk database. This is not recommended for a large project, but is good enough to persist data in our demo.\n- [cors](https://github.com/expressjs/cors): Express middleware to enable CORS.\n- [body-parser](https://github.com/expressjs/body-parser): Express middleware that parses the request body and attaches to the express request object.\n- [connect-multiparty](https://github.com/expressjs/connect-multiparty): Just like body-parser, but parses uploaded files\n- [pusher](https://pusher.com/): Pusher SDK\n- [cloudinary](http://cloudinary.com/): Cloudinary SDK\n\nNext step is to import these installed dependencies into the entry JavaScript file. Create a file named `index.js` at the root of the directory and start importing the dependencies:\n\n```\n    // Import dependecies\n    const express = require('express');\n    const multipart = require('connect-multiparty');\n    const bodyParser = require('body-parser')\n    const cloudinary = require('cloudinary');\n    const cors = require('cors');\n    const Datastore = require('nedb');\n    const Pusher = require('pusher');\n    \n    // Create an express app\n    const app = express();\n    // Create a database\n    const db = new Datastore()\n    \n    // Configure middlewares\n    app.use(cors());\n    app.use(bodyParser.urlencoded({ extended: false }))\n    app.use(bodyParser.json())\n    \n    // Setup multiparty\n    const multipartMiddleware = multipart();\n```\n\nNot only have we imported the dependencies, we also configured the Express middleware that was installed.\n\n### Configurations\nWe need to configure Pusher and Cloudinary before actually making use of them. Configuration involves telling the SDKs who or what server should it talk to. This is done by passing it a config object that contains the credentials you retrieve after creating an account. (To learn how to set up both accounts, refer to Appendix 1 and 2 at the end of the article.)\n\n``` language-javascript\n    // Pusher configuration\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APPID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      encrypted: true,\n      cluster: process.env.PUSHER_CLUSTER\n    });\n    \n    // Cloudinary configuration\n    cloudinary.config({\n        cloud_name: process.env.CL_CLOUD_NAME,\n        api_key: process.env.CL_KEY,\n        api_secret: process.env.CL_SECRET\n    });\n```\n\nIt’s bad practice to hard code credentials in your code, hence we have added them using environmental variables. \n\n### Routes\nTwo routes are needed for the application — one to serve all the gallery images and another to create new gallery images from a request. Here is one for listing images:\n\n```\n    app.get('/', (req, res) =\u003e {\n      db.find({}, function (err, docs) {\n        if(err) {\n          return res.status(500).send(err);\n        }\n        res.json(docs)\n      });\n    })\n```\n\nThis looks for all the items in our database, and if no error was encountered, sends them as a JSON response to the requesting client. If an error was encountered, the error will be sent as a server error (500).\n\nLet’s now see how the images are uploaded, how data is persisted, and how Pusher emits a real time event that a new image was added to the collection:\n\n```\n    app.post('/upload', multipartMiddleware, function(req, res) {\n      // Upload image\n      cloudinary.v2.uploader.upload(\n        req.files.image.path,\n        { /* Transformation if needed */ },\n        function(error, result) {\n          if(error) {\n            return res.status(500).send(error)\n          }\n          // Save record\n          db.insert(Object.assign({}, result, req.body), (err, newDoc) =\u003e {\n            if(err) {\n              return res.status(500).send(err);\n            }\n            // Emit realtime event\n            pusher.trigger('gallery', 'upload', newDoc);\n            res.status(200).json(newDoc)\n          })\n      })\n    });  \n```\n\nWhat’s going on will be better explained as points, so let’s do that:\n\n\n- The middleware, `multipartMiddleware`, was not included in all the routes with `use`. Rather, it was added to the only route that needs it, which is the above `POST /upload` route.\n- We use Cloudinary’s `upload()` method to send the image received to your server. It takes the path to the image being uploaded, a transformation object and the callback function.\n- If the upload was successful, we store the image upload response alongside the request body in our database.\n- After storing the new data, we emit a Pusher `upload` event on the gallery channel. This event has a payload of the newly created item. All subscriptions to this channel’s event will be notified when an image is successfully uploaded.\n\n### Listen and Run\nFinally, in the server, we can bind to a port:\n\n```\n    app.listen(process.env.PORT || 5000, () =\u003e console.log('Running...'))\n```\n\nThis uses the port provided in the environmental variable. If none, it sticks to port 5000.\n\nYou can start running the server with:\n\n```\n    node index.js\n```\n\n## Setting up Vue.js\n\nVue is the framework that powers our client app. With a  server running, we can now implement a client that communicates with this server via HTTP requests and Pusher events.\n\nStart with initializing a Vue project using the Vue CLI:\n\n\n```\n    ## Install Vue CLI\n    npm install -g vue-cli\n    \n    ## Scafold a project. Syntax: vue init \u003ctemplate\u003e \u003cname\u003e\n    vue init webpack-simple gallery-client\n```\n\nNext, install dependencies:\n\n```\n    npm install --save axios vodal pusher-js cloudinary-core\n```\n\n- [axios](https://github.com/mzabriskie/axios): This is a HTTP library that simplifies how we make Ajax requests by enabling us to use promises to handle async.\n- [vodal](https://github.com/chenjiahan/vodal): Vue widget for dialog boxes\n- [pusher-js](https://github.com/pusher/pusher-js): Pusher client SDK\n- [cloudinary-core](https://github.com/cloudinary/pkg-cloudinary-core): Cloudinary client SDK\n\n## Gallery items list\n\nWe need to display a list of existing images in the gallery at start up. Therefore, when the app is launched, the user should be presented with a list of all the images available. To achieve this, in the `App.vue` (the entry component) `created` lifecycle method, make a request for all the images using axios:\n\n```\n    \u003cscript\u003e\n    // ./App.vue\n    import axios from 'axios';\n    import cloudinary from 'cloudinary-core'\n    \n    export default {\n      name: 'app',\n      data () {\n        return {\n          images: [],\n          cl: null,\n          spin: false\n        }\n      },\n      created() {\n        this.spin = true\n        this.cl = new cloudinary.Cloudinary({cloud_name: '\u003cCLOUD_NAME\u003e', secure: true})\n        axios.get('http://localhost:5000')\n          .then(({data}) =\u003e {\n            this.spin = false\n            this.images = data.map(image =\u003e {\n              image.url = this.cl.url(image.public_id, {width: 500, height: 400, crop: \"fill\"})\n              return image;\n            });\n          })\n      },\n      methods: {\n        // Coming soon\n      }\n    }\n    \u003c/script\u003e\n```\n\nWhen the images are fetched, we transform them by manipulating the dimensions (width and height) to fit our design idea. The transformed data is then bound to the view by setting it as the value of the `images` property :\n\n```\n    \u003ctemplate\u003e\n     \u003c!-- ./App.vue --\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003ch3 class=\"text-center\"\u003eRealtime Gallery \u003cbutton class=\"btn btn-info\" @click=\"showModal\"\u003e\u003cspan class=\"glyphicon glyphicon-upload\"\u003e\u003c/span\u003e\u003c/button\u003e\u003c/h3\u003e\n          \u003cgallery-list :images=\"images\"\u003e\u003c/gallery-list\u003e\n        \u003c/div\u003e\n        \u003cspan v-show=\"spin\" class=\"glyphicon glyphicon-repeat fast-right-spinner\"\u003e\u003c/span\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nThere is also a `spin` boolean property that determines if a loading spinner should be shown or not. Soon, we will implement the `showModal` method that is called when the upload button is clicked.\n\nRather than having native elements all over in the `App`'s template, we have a created an abstraction. The `gallery-list` element is used and is passed the list of images. For it to work, you need to create, import and declare the `GalleryList` component in App.\n\nFirst, import and declare it:\n\n```\n    \u003cscript\u003e\n    // ./App.vue\n    import GalleryList from './GalleryList.vue'\n    //...\n    export default {\n      components: {\n        'gallery-list': GalleryList\n      }\n    }\n    \u003c/script\u003e\n```\n\nThen create the component:\n\n```\n    \u003c!-- ./GalleryList.vue --\u003e\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003cdiv class=\"row\" v-for=\"i in Math.ceil(images.length / 3)\" :key=\"i\"\u003e\n          \u003cdiv class=\"col-md-4\" v-for=\"image in images.slice((i - 1) * 3, i * 3)\" :key=\"image._id\"\u003e\n            \u003cgallery-item :image=\"image\"\u003e\n            \u003c/gallery-item\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    import GalleryItem from './GalleryItem.vue'\n    export default {\n      props: ['images'],\n      components: {\n        'gallery-item': GalleryItem\n      }\n    }\n    \u003c/script\u003e\n```   \n\nThe component receives `images` sent from the parent `App` component via `props`. We then iterate over the images and display each of them with another component called `gallery-item`:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv class=\"card\"\u003e\n        \u003ch4 class=\"card-title\"\u003e{{image.title}}\u003c/h4\u003e\n        \u003cdiv class=\"card-image\"\u003e\n          \u003cimg :src=\"image.url\" class=\"img-responsive\"/\u003e\n        \u003c/div\u003e \n        \u003cp class=\"card-description\"\u003e{{image.description}}\u003c/p\u003e \n      \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    export default {\n      props: ['image']\n    }\n    \u003c/script\u003e\n```\n\nWith existing images (which I assume you don’t have yet), you should see the following at `localhost:8080` when you run the app with `npm run dev`:\n\n![photo-feed-vuejs-web](//images.contentful.com/1es3ne0caaid/5C5mHW4NOggKye6A4KqGgW/5dbd22f40fca53639a2232aa4ae92f9d/photo-feed-vuejs-web.png)\n\n## Gallery image upload\n\nNow that we have a list of images to show, the next question is how they came to exist. We have to upload them to the server. Fortunately, the server already made provision for that so all we have left to do is implement the upload logic.\n\nLet’s start by creating an `Upload` component which contains a form for the upload:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv class=\"upload\"\u003e\n        \u003cform @submit.prevent=\"handleSubmit\" enctype=\"multipart/form-data\"\u003e\n          \u003cdiv class=\"form-group\"\u003e\n            \u003clabel\u003eTitle\u003c/label\u003e\n            \u003cinput type=\"text\" class=\"form-control\" v-model=\"model.title\" /\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"form-group\"\u003e\n            \u003clabel\u003eImage\u003c/label\u003e\n            \u003cinput type=\"file\" class=\"form-control\" @change=\"handleUpload($event.target.files)\" /\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"form-group\"\u003e\n            \u003clabel\u003eDescription\u003c/label\u003e\n            \u003ctextarea row=\"5\" class=\"form-control\" v-model=\"model.description\"\u003e\u003c/textarea\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"form-group\"\u003e\n            \u003cbutton class=\"btn btn-info\"\u003eSubmit\u003c/button\u003e\n          \u003c/div\u003e\n        \u003c/form\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    export default {\n      data() {\n        return {\n          model: {\n            title: '',\n            description: '',\n            imageFile: null\n          }\n        }\n      },\n      methods: {\n        handleSubmit() {\n          this.$emit('submit', this.model)\n        },\n        handleUpload(files) {\n          this.model.imageFile = files[0];\n        }\n      }\n    }\n    \u003c/script\u003e\n```\n\nThe form contains a title (text), description (text area) and file inputs. These controls are tracked by the `model` property, which is updated when the values change. `title` and `description` are automatic but `imageFile` is not because it’s read only. Therefore, we have to manually update the model by calling `handleUpload` every time the file control value changes.\n\nWhen the form is submitted, we need to call `handleSubmit`, which triggers an event that will be handled in the parent component (`App`). Let’s have a look how `App` handles this:\n\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003ch3 class=\"text-center\"\u003eRealtime Gallery \u003cbutton class=\"btn btn-info\" @click=\"showModal\"\u003e\u003cspan class=\"glyphicon glyphicon-upload\"\u003e\u003c/span\u003e\u003c/button\u003e\u003c/h3\u003e\n          \u003cvodal :show=\"show\" animation=\"zoom\" @hide=\"show = false\"\u003e\n            \u003cupload @submit=\"handleSubmit\"\u003e\u003c/upload\u003e\n          \u003c/vodal\u003e\n          \u003cgallery-list :images=\"images\"\u003e\u003c/gallery-list\u003e\n        \u003c/div\u003e\n        \u003cspan v-show=\"spin\" class=\"glyphicon glyphicon-repeat fast-right-spinner\"\u003e\u003c/span\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    import Upload from './Upload.vue'\n    import GalleryList from './GalleryList.vue'\n    import axios from 'axios';\n    import cloudinary from 'cloudinary-core'\n    var Pusher = require('pusher-js');\n    export default {\n      name: 'app',\n      data () {\n        return {\n          images: [],\n          show: false,\n          cl: null,\n          spin: false\n        }\n      },\n      created() {\n        // truncated\n      },\n      methods: {\n        showModal() {\n          this.show = true\n        },\n        handleSubmit(model) {\n          this.show = false;\n          this.spin = true\n          const formData = new FormData()\n          formData.append('image', model.imageFile);\n          formData.append('title', model.title);\n          formData.append('description', model.description);\n          \n          axios.post('http://localhost:5000/upload', formData)\n          .then(({data}) =\u003e {\n            this.spin = false\n          })\n        }\n      },\n      components: {\n        'gallery-list': GalleryList,\n        'upload': Upload\n      }\n    }\n    \u003c/script\u003e\n```\n\nBecause of the way we added `GalleryList`, the `Upload` container is imported and included in the list of components. The dialog plugin, `vodal` is used to only show the form as a dialog when the upload button beside the header is clicked. This is possible by toggling `show`.\n\nNotice how the upload component handles the emitted submit event:\n\n```\n    \u003cupload @submit=\"handleSubmit\"\u003e\u003c/upload\u003e\n```\n\nIt calls `handleSubmit` on the containing (parent) component, which uploads the image with axios, hides the model and uses a loading spinner to tell us the status of the upload.\n\nThe `vodal` plugin needs to be imported and configured for it to work. You can do this in the `./main.js` file:\n\n```\n    import Vodal from 'vodal';\n    Vue.component(Vodal.name, Vodal);\n```\n\nNow you can run the app again (if you stopped it), and try to upload an image:\n\nWhen you upload an image, you won’t see any UI updates unless you refresh the browser. Let’s implement realtime updates to make UI updates happen.\n\n## Realtime updates\n\nWe already have the upload feature fleshed out but we need to let the users know their upload was successful. The server is already triggering an event, all we need do is listen to this event and prepend incoming payload to the existing list of images:\n\n```\n    \u003cscript\u003e\n    import Upload from './Upload.vue'\n    import GalleryList from './GalleryList.vue'\n    import axios from 'axios';\n    import cloudinary from 'cloudinary-core'\n    var Pusher = require('pusher-js');\n    export default {\n      name: 'app',\n      data () {\n        return {\n          images: [],\n          show: false,\n          cl: null,\n          spin: false\n        }\n      },\n      created() {\n        this.spin = true;\n        var pusher = new Pusher('\u003cAPP_ID\u003e', {\n          encrypted: true,\n          cluster: 'CLUSTER'\n        });\n        var channel = pusher.subscribe('gallery');\n        channel.bind('upload', (data) =\u003e {\n          data.url = this.cl.url(data.public_id, {width: 500, height: 400, crop: \"fill\"})\n          this.images.unshift(data)\n        });\n        // Truncated...\n      },\n      methods: {\n        // Truncated...\n      },\n    }\n    \u003c/script\u003e\n```\n\nWe bind to the `upload` event, which we created on the `gallery` channel, then add the new image that comes into the existing array of images. You can now see image upload and UI updates happen in real time:\n\n\n![photo-feed-vuejs-demo](//images.contentful.com/1es3ne0caaid/49dCViSXss2kg8E4aosKaw/94b0ab167fd7e3a08e913a7cd9752384/photo-feed-vuejs-demo.gif)\n\n\n## Conclusion\n\nAt this point, if you have followed the article, you can stop wondering how realtime image sharing apps work and start building one for yourself.\n\n\n## Appendix 1: Pusher Setup\n\n- [Sign up](https://dashboard.pusher.com/accounts/sign_in) for a free Pusher account\n\n![photo-feed-vuejs-signup](//images.contentful.com/1es3ne0caaid/6Gi9ARqH3UUM8ICUCIcUOY/5a5946ac652e92bd44b7319530ce0a33/photo-feed-vuejs-signup.png)\n\n- Create a new app by selecting **Apps** on the sidebar and clicking **Create New** button on the bottom of the sidebar:\n\n![photo-feed-vuejs-dashboard](//images.contentful.com/1es3ne0caaid/4fY7jsiReweMeewMimsusk/93525dc8f20aee19f5d795535fac5dd7/photo-feed-vuejs-dashboard.png)\n\n- Configure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n\n![photo-feed-vuejs-create-app](//images.contentful.com/1es3ne0caaid/tK8YSwICMCMGaEEgOk4gy/5ee05bbd1bb97dfccad69e3aa9100123/photo-feed-vuejs-create-app.png)\n\n- You can retrieve your keys from the **App Keys** tab\n\n![photo-feed-vuejs-app-keys](//images.contentful.com/1es3ne0caaid/2jCymWqEewG0ccEO0gayc4/27a94a00c34fc4bfec9d0e1ce7684d9b/photo-feed-vuejs-app-keys.png)\n\n## Appendix 2: Cloudinary Setup\n\n- [Sign up](https://cloudinary.com/users/register/free?utm_source=Pusher\u0026utm_medium=Post_1\u0026utm_content=Vue_Image_Upload) on Cloudinary for a free account:\n\n![photo-feed-vuejs-cloudinary-signup](//images.contentful.com/1es3ne0caaid/4Y5EVO2XZY2eaUMAAkUmyU/612c6f3895fa8befe394841eee5a0476/photo-feed-vuejs-cloudinary-signup.png)\n\n- When you sign up successfully, you're presented with a dashboard that holds your cloud credentials. You can safely store them for future use:\n\n![photo-feed-vuejs-cloudinary-app-keys](//images.contentful.com/1es3ne0caaid/3uXTzrXraUc8sigywuW2mQ/cb75f306d85057906e37722367e77d1f/photo-feed-vuejs-cloudinary-app-keys.png)","metaTitle":"Build a photo feed using Vue.js","metaDescription":"In this tutorial you'll learn how to build an app for editing and sharing photos: you'll use Vue.js in the front-end and Node.js in the back-end, Pusher to add realtime features, and Cloudinary for end-to-end image management."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4lEHfz5V5SOmAaaACoeuCM","type":"Entry","createdAt":"2018-02-22T15:04:12.904Z","updatedAt":"2020-06-19T12:58:31.327Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime app with Vue.js","url":"realtime-app-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3sixk7zsAoQqqSsUWM8I8y","type":"Entry","createdAt":"2018-02-13T18:06:00.483Z","updatedAt":"2018-02-14T10:08:13.372Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Olayinka Omole","url":"olayinka-omole","email":"olayinka.omole@gmail.com","twitter":"https://twitter.com/olayinkaos","github":"https://github.com/olayinkaos","guestWriter":true}}],"projectRepo":"https://github.com/olayinkaos/revue","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}}],"reviewDate":"2017-06-28","description":"Build a movie review application with Vue.js and add realtime functionality to it.","prerequisite":"A basic understanding of Vue.js and Node.js are needed to follow this tutorial.","content":"In this tutorial, I will walk you through getting started with a Vue.js 2.0 app, and adding realtime functionality to it with Pusher. The sample app we will be building is a movie review app called “revue”.\n\nHere is what the final app will look like:\n\n![realtime-app-vuejs-demo](//images.contentful.com/1es3ne0caaid/32ygS1dEAgAaMAMmuCGEog/42629c86879ce9d90de71a8468e4f026/movie-review-app-vuejs-demo.gif)\n\nYou can find the complete code [hosted on Github](https://github.com/olayinkaos/revue).\n\n## Setting up with Vue-cli\n\n[Vue-cli](https://github.com/vuejs/vue-cli) is a great command line tool for scaffolding Vue.js projects, so we don’t have to spend too much time on configuration, and can jump right into writing code!\n\nIf you haven’t already, install vue-cli:\n\n```\nnpm install -g vue-cli\n```\n\nWe will create a project with the [webpack template](https://github.com/vuejs-templates/webpack), and install the dependencies with this set of commands:\n\n```\nvue init webpack revue\ncd revue\nnpm install\n```\n\n\u003e Webpack is a build tool that helps us do a bunch of things like parse Vue [single file components](https://vuejs.org/v2/guide/single-file-components.html), and convert our ES6 code to ES5 so we don’t have to worry about browser compatibility. You can check [here](https://github.com/vuejs-templates/webpack) for more details about the webpack template.\n\nTo run the app:\n\n```\nnpm run dev\n```\n\nWe can also optionally include [Foundation](http://foundation.zurb.com/) in the `index.html` file to take advantage of some preset styling:\n\n```\n\u003c!-- ./index.html --\u003e\n\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n  \u003chead\u003e\n    \u003cmeta charset=\"utf-8\"\u003e\n    \u003c!-- import foundation --\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/foundation/6.3.1/css/foundation.min.css\"\u003e \n    \u003ctitle\u003erevue\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody\u003e\n    \u003cdiv id=\"app\"\u003e\u003c/div\u003e\n    \u003c!-- built files will be auto injected --\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n```\n\n## Creating the movie review app\n\nWe will get started by creating the movie and review components of the app:\n\n```\ntouch ./src/components/Movie.vue\ntouch ./src/components/Reviews.vue\n```\n\nIt is helpful to know that one of the things that makes Vue so powerful is its components, much like other modern JavaScript frameworks. A typical app should be a series of components built on top of one another. This keeps our app modular, and helps make different parts of the app reusable.\n\n### Searching and retrieving a movie\nTo show the movie to be reviewed, we will create a simple form which we will use to fetch a movie from the [Netflix Roulette public database API](http://netflixroulette.net/api/):\n\n\n```\n\u003c!-- ./src/components/Movie.vue --\u003e\n\u003ctemplate\u003e\n  \u003cdiv class=\"container\"\u003e\n    \u003cdiv class=\"row\"\u003e\n      \u003cform @submit.prevent=\"fetchMovie()\"\u003e\n        \u003cdiv class=\"columns large-8\"\u003e\n          \u003cinput type=\"text\" v-model=\"title\"\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"columns large-4\"\u003e\n          \u003cbutton type=\"submit\" :disabled=\"!title\" class=\"button expanded\"\u003e\n            Search titles\n          \u003c/button\u003e\n        \u003c/div\u003e\n      \u003c/form\u003e\n    \u003c/div\u003e\n    \u003c!-- /search form row --\u003e\n  \u003c/div\u003e\n  \u003c!-- /container --\u003e\n\u003c/template\u003e\n```\n\nIn the above code, we created a form, and specified a custom `fetchMovie()` event handler on form submit. Don’t worry, we will define this handler in a bit. \n\nThe `@submit` directive is shorthand for `v-on:submit`. The `v-on` directive is used to listen to DOM events and run actions (or handlers) when they’re triggered. The `.prevent` modifier helps us abstract the need to write `event.preventDefault()` in the handler logic… which is pretty cool.\n\n\u003e You can read more on Vue.js event handlers [here](https://vuejs.org/v2/guide/events.html).\n\nWe also use the `v-model` directive to bind the value of the text input to `title`. And finally we bind the `disabled` attribute of the button such that it is set to true if `title` is absent, and vice versa. `:disabled` is shorthand for `v-bind:disabled`.\n\nNext we define the methods and data values for the component:\n\n```\n\u003c!-- ./src/components/Movie.vue --\u003e\n\u003cscript\u003e\n// define the external API URL\nconst API_URL = 'https://netflixroulette.net/api/api.php'\n// Helper function to help build urls to fetch movie details from title\nfunction buildUrl (title) {\n  return `${API_URL}?title=${title}`\n}\n\nexport default {\n  name: 'movie', // component name\n  data () {\n    return {\n      title: '',\n      error_message: '',\n      loading: false, // to track when app is retrieving data\n      movie: {}\n    }\n  },\n  methods: {\n    fetchMovie () {\n      let title = this.title\n      if (!title) {\n        alert('please enter a title to search for')\n        return\n      }\n      this.loading = true \n      fetch(buildUrl(title))\n      .then(response =\u003e response.json())\n      .then(data =\u003e {\n        this.loading = false\n        this.error_message = ''\n        if (data.errorcode) {\n          this.error_message = `Sorry, movie with title '${title}' not found. Try searching for \"Fairy tail\" or \"The boondocks\" instead.`\n          return\n        }\n        this.movie = data\n      }).catch((e) =\u003e {\n        console.log(e)\n      })\n    }\n  }\n}\n\u003c/script\u003e\n```\n\nIn the above code, after defining the external URL we want to query to get movies from, we specify the key Vue options we need for the component:\n\n- `data`: this specifies properties we’ll be needing in our component. Note that in a regular Vue construct it is an object, but it has to be [returned as a function in a component](https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function).\n- `methods`: this specifies the methods we are using in the component. For now, we only define one method — the `fetchMovie()` method to retrieve movies. Notice we also use the [Fetch API](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) for retrieving results, to keep things simple.\n\n\u003e Note: The JavaScript Fetch API is great for making AJAX requests, although it requires a polyfill for older browsers. A great alternative is [axios](https://github.com/mzabriskie/axios).\n\nNext, we can add the code to display the movie, and show a notice when the movie title isn’t found, inside the `\u003ctemplate\u003e`:\n\n```\n\u003c!-- ./src/components/Movie.vue --\u003e\n\u003ctemplate\u003e\n\u003c!-- // ... --\u003e\n\u003cdiv v-if=\"loading\" class=\"loader\"\u003e\n  \u003cimg src=\"https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/0.16.1/images/loader-large.gif\" alt=\"loader\"\u003e\n\u003c/div\u003e\n\n\u003cdiv v-else-if=\"error_message\"\u003e\n  \u003ch3\u003e{{ error_message }}\u003c/h3\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"row\" v-else-if=\"Object.keys(movie).length !== 0\" id=\"movie\"\u003e\n  \u003cdiv class=\"columns large-7\"\u003e\n    \u003ch4\u003e {{ movie.show_title }}\u003c/h4\u003e\n    \u003cimg :src=\"movie.poster\" :alt=\"movie.show_title\"\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"columns large-5\"\u003e\n    \u003cp\u003e{{ movie.summary }}\u003c/p\u003e\n    \u003csmall\u003e\u003cstrong\u003eCast:\u003c/strong\u003e {{ movie.show_cast }}\u003c/small\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\u003c/template\u003e\n```\n\nWe use double curly braces for text interpolation. We also introduced new `v-if`, `v-else-if` and `v-else` directives, which we use to [conditionally render](https://vuejs.org/v2/guide/conditional.html#v-if) elements.\n\nWe can add some optional styling at the bottom of the component:\n\n```\n\u003c!-- ./src/components/Movie.vue --\u003e\n\u003c!-- Add \"scoped\" attribute to limit CSS to this component only --\u003e\n\u003cstyle scoped\u003e\n#movie {\n  margin: 30px 0;\n}\n.loader {\n  text-align: center;\n}\n\u003c/style\u003e\n```\n\nThe final `Movie.vue` file will look like [this](https://github.com/olayinkaos/revue/blob/master/src/components/Movie.vue).\n\n### Retrieving and writing movie reviews\nNext, we will edit the review component, which will contain the logic and view for reviews, using the same Single File Component approach.\n\nFirst, we use a `v-for` directive to loop through the available reviews for a movie and display it in the template:\n\n```\n\u003c!-- ./src/components/Review.vue --\u003e\n\u003ctemplate\u003e\n  \u003cdiv class=\"container\"\u003e\n    \u003ch4 class=\"uppercase\"\u003ereviews\u003c/h4\u003e\n    \u003cdiv class=\"review\" v-for=\"review in reviews\"\u003e\n      \u003cp\u003e{{ review.content }}\u003c/p\u003e\n      \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"columns medium-7\"\u003e\n          \u003ch5\u003e{{ review.reviewer }}\u003c/h5\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"columns medium-5\"\u003e\n          \u003ch5 class=\"pull-right\"\u003e{{ review.time }}\u003c/h5\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\u003c/template\u003e\n\n\u003cscript\u003e\nconst MOCK_REVIEWS = [\n  {\n    movie_id: 7128,\n    content: 'Great show! I loved every single scene. Defintiely a must watch!',\n    reviewer: 'Jane Doe',\n    time: new Date().toLocaleDateString()\n  }\n]\nexport default {\n  name: 'reviews',\n  data () {\n    return {\n      mockReviews: MOCK_REVIEWS,\n      movie: null,\n      review: {\n        content: '',\n        reviewer: ''\n      }\n    }\n  },\n  computed: {\n    reviews () {\n      return this.mockReviews.filter(review =\u003e {\n        return review.movie_id === this.movie\n      })\n    }\n  }\n}\n\u003c/script\u003e\n```\n\nWe create `MOCK_REVIEWS` to mock the available reviews, gotten from a resource, for example, an API. Then, we use a [computed property](https://vuejs.org/v2/guide/computed.html) to filter out the reviews for a particular movie. This would typically be gotten from the API or resource.\n\nNext, we add a form and method for adding a new review:\n\n```\n\u003c!-- ./src/components/Review.vue --\u003e\n\u003ctemplate\u003e\n  \u003cdiv class=\"container\"\u003e\n    \u003c!-- //... --\u003e\n    \u003cdiv class=\"review-form\" v-if=\"movie\"\u003e\n      \u003ch5\u003eadd new review.\u003c/h5\u003e\n      \u003cform @submit.prevent=\"addReview\"\u003e\n        \u003clabel\u003e\n          Review\n          \u003ctextarea v-model=\"review.content\" cols=\"30\" rows=\"5\"\u003e\u003c/textarea\u003e\n        \u003c/label\u003e\n        \u003clabel\u003e\n          Name\n          \u003cinput v-model=\"review.reviewer\" type=\"text\"\u003e\n        \u003c/label\u003e\n        \u003cbutton :disabled=\"!review.reviewer || !review.content\" type=\"submit\" class=\"button expanded\"\u003eSubmit\u003c/button\u003e\n      \u003c/form\u003e\n    \u003c/div\u003e\n    \u003c!-- //... --\u003e   \n  \u003c/div\u003e \n\u003c/template\u003e\n\n\u003cscript\u003e\nexport default {\n  // ..\n  methods: {\n    addReview () {\n      if (!this.movie || !this.review.reviewer || !this.review.content) {\n        return\n      }\n      let review = {\n        movie_id: this.movie, \n        content: this.review.content, \n        reviewer: this.review.reviewer, \n        time: new Date().toLocaleDateString()\n      }\n      this.mockReviews.unshift(review)\n    }\n  },\n  //...\n}\n\u003c/script\u003e\n```\n\nWe can add some optional styling at the bottom of the component:\n\n```\n\u003c!-- ./src/components/Review.vue --\u003e\n\u003c!-- Add \"scoped\" attribute to limit CSS to this component only --\u003e\n\u003cstyle scoped\u003e\n  .container {\n    padding: 0 20px;\n  }\n  .review {\n    border:1px solid #ddd;\n    font-size: 0.95em;\n    padding: 10px;\n    margin: 15px 0 5px 0;\n  }\n  .review h5 {\n    text-transform: uppercase;\n    font-weight: bolder;\n    font-size: 0.7em\n  }\n  .pull-right {\n    float: right;\n  }\n  .review-form {\n    margin-top: 30px;\n    border-top: 1px solid #ddd;\n    padding: 15px 0 0 0;\n  }\n\u003c/style\u003e\n```\n\nTo fetch and post reviews, we need to use the `movie` identifier, which is gotten in the `Movie` component. Thankfully, component-to-component communication can be done really easily in Vue.\n\n### Component-to-component communication\n[As recommended in the official documentation](https://vuejs.org/v2/guide/components.html#Non-Parent-Child-Communicationhttps://vuejs.org/v2/guide/components.html#Non-Parent-Child-Communication), we can create a new Vue instance and use it as a message bus. The message bus is an object that components can emit and listen to events on. In a larger application, a more robust [state management](https://vuejs.org/v2/guide/state-management.html) solution like [Vuex](https://github.com/vuejs/vuex) is recommended.\n\nCreating the message bus:\n\n```\ntouch ./src/bus.js\n```\n\n\n\n```\n// ./src/bus.js\nimport Vue from 'vue'\nconst bus = new Vue()\n\nexport default bus\n```\n\nTo emit an event once a movie is found, we update the `fetchMovies()` method:\n\n```\n\u003c!-- ./src/components/Movie.vue --\u003e\nimport bus from '../bus'\n\nexport default {\n  // ...\n  methods: {\n    fetchMovie (title) {\n      this.loading = true\n      fetch(buildUrl(title))\n      .then(response =\u003e response.json())\n      .then(data =\u003e {\n        this.loading = false\n        this.error_message = ''\n        bus.$emit('new_movie', data.unit) // emit `new_movie` event\n        if (data.errorcode) {\n          this.error_message = `Sorry, movie with title '${title}' not found. Try searching for \"Fairy tail\" or \"The boondocks\" instead.`\n          return\n        }\n        this.movie = data\n      }).catch(e =\u003e { console.log(e) })\n    }\n  }\n}\n```\n\nListening for the event in the `Review` component, in the `created` hook:\n\n```\n\u003c!-- ./src/components/Review.vue --\u003e\n\u003cscript\u003e\nimport bus from '../bus'\nexport default {\n  // ...\n  created () {\n    bus.$on('new_movie', movieId =\u003e {\n      this.movie = movieId\n    })\n  },\n  // ...\n}\n\u003c/script\u003e\n```\n\nIn the above code, we specify that whenever the `new_movie` event is fired, we set the `movie` property to be the value of the `movieId` that is broadcast by the event.\n\n\u003e For a better understanding of the Vue lifecycle hooks, you can check out the [official documentation on the subject](https://vuejs.org/v2/guide/instance.html#Instance-Lifecycle-Hooks).\n\nFinally to complete our base app, we register our components in `App.vue`, and display the templates:\n\n```\n\u003c!-- ./src/App.vue --\u003e\n\u003ctemplate\u003e\n  \u003cdiv id=\"app\"\u003e\n    \u003cdiv class=\"container\"\u003e\n      \u003cdiv class=\"heading\"\u003e\n        \u003ch2\u003erevue.\u003c/h2\u003e\n        \u003ch6 class=\"subheader\"\u003erealtime movie reviews with Vue.js and Pusher.\u003c/h6\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"columns small-7\"\u003e\n          \u003cmovie\u003e\u003c/movie\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"columns small-5\"\u003e\n          \u003creviews\u003e\u003c/reviews\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\u003c/template\u003e\n\n\u003cscript\u003e\n  import Movie from './components/Movie'\n  import Reviews from './components/Reviews'\n\n  export default {\n    name: 'app',\n    components: {\n      Movie, Reviews\n    }\n  }\n\u003c/script\u003e\n\n\u003cstyle\u003e\n  #app .heading {\n    font-family: 'Avenir', Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-align: center;\n    color: #2c3e50;\n    margin: 60px 0 30px;\n    border-bottom: 1px solid #eee;\n  }\n\u003c/style\u003e\n```\n\nNow, we can run the app, and see the basic functionalities of retrieving movies and adding reviews!\n\n```\nnpm run dev\n```\n\n\n![realtime-app-vuejs-demo2](//images.contentful.com/1es3ne0caaid/4tI40eF4qQiSs4mUim2CYm/e0a9a66d0443153619f3844f3fec53fa/movie-review-app-vuejs-demo2.gif)\n\n\n\u003e **Note:** To retrieve movies from the public API, the movie titles have to be typed in full. Also, the available movies are limited, so don’t be too disappointed if you don’t find a title you search for. :) \n\n\n\n## Adding realtime updates to the app with Pusher\n\nWe can add realtime functionality to our app so that whenever a review is added, it is updated in real time to all users viewing that movie.\n\nWe will set up a simple backend where we can process post requests with new reviews, and broadcast an event via Pusher whenever a review is added.\n\n### Pusher setup\nHead over to Pusher and [register for a free account](https://pusher.com/signup?plan=sandbox), if you don’t already have one. Then create an app on the [dashboard](https://dashboard.pusher.com/), and copy out the app credentials (App ID, Key, Secret and Cluster). It is super straight-forward.\n\n### Backend setup and broadcasting an event\nWe will build a simple server with Node.js. Let us add some dependencies we will be needing to our `package.json` and pull them in:\n\n```\nnpm install -S express body-parser pusher\n```\n\nNext, we create a `server.js` file, where we will build an [Express](https://expressjs.com/) app:\n\n```\n// ./server.js\n/*\n * Initialise Express\n */\nconst express = require('express');\nconst path = require('path');\nconst app = express();\nconst bodyParser = require('body-parser');\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(express.static(path.join(__dirname)));\n\n/*\n * Initialise Pusher\n */\nconst Pusher = require('pusher');\nconst pusher = new Pusher({\n  appId:'YOUR_PUSHER_APP_ID',\n  key:'YOUR_PUSHER_APP_KEY',\n  secret:'YOUR_PUSHER_SECRET',\n  cluster:'YOUR_CLUSTER'\n});\n\n/*\n * Define post route for creating new reviews\n */\napp.post('/review', (req, res) =\u003e {\n  pusher.trigger('reviews', 'review_added', {review: req.body});\n  res.status(200).send();\n});\n\n/*\n * Run app\n */\nconst port = 5000;\napp.listen(port, () =\u003e { console.log(`App listening on port ${port}!`)});\n```\n\nFirst we initialise an `express` app, then we initialise Pusher with the required credentials. Remember to replace `YOUR_PUSHER_APP_ID`, `YOUR_PUSHER_APP_KEY`, `YOUR_PUSHER_SECRET` and `YOUR_CLUSTER` with your actual details from the Pusher dashboard.\n\nNext, we define a route for creating reviews: `/review` . Whenever this endpoint is hit, we utilise Pusher to trigger a `review_added` event on the `reviews` channel and broadcast the entire payload as the review.\n\nThe `trigger` method has this syntax: `pusher.trigger(channels, event, data, socketId, callback);`. You can read more on it [here](https://pusher.com/docs/server_api_guide/interact_rest_api#publishing_events).\n\nWe are broadcasting on a [public channel](https://pusher.com/docs/client_api_guide/client_public_channels) as we want the data to be accessible to everyone. Pusher also allows broadcasting on [private](https://pusher.com/docs/client_api_guide/client_private_channels) (prefixed by `private-`) and [presence](https://pusher.com/docs/client_api_guide/client_presence_channels) (prefixed by `private-`) channels, which require some form of authentication.\n\n### Creating an API proxy\nTo access our API server from the front-end server created by the Vue Webpack scaffolding, we can create a proxy in `config/index.js`, and run the dev server and the API backend side-by-side. All requests to `/api` will be proxied to the actual backend:\n\n```\n// config/index.js\nmodule.exports = {\n  // ...\n  dev: {\n    // ...\n    proxyTable: {\n        '/api': {\n        target: 'http://localhost:5000', // you should change this, depending on the port your server is running on\n        changeOrigin: true,\n        pathRewrite: {\n          '^/api': ''\n        }\n      }\n    },\n    // ...\n  }\n}\n```\n\nThen, we adjust our `addReview` method to post to the API in `./src/components/Reviews.vue`:\n\n```\n\u003c!-- ./src/components/Review.vue --\u003e\n\u003cscript\u003e\n// ...\nexport default {\n  // ...\n  methods: {\n    addReview () {\n      if (!this.movie || !this.review.reviewer || !this.review.content) {\n        alert('please make sure all fields are not empty')\n        return\n      }\n      let review = {\n        movie_id: this.movie, content: this.review.content, reviewer: this.review.reviewer, time: new Date().toLocaleDateString()\n      }\n      fetch('/api/review', {\n        method: 'post',\n        body: JSON.stringify(review)\n      }).then(() =\u003e {\n        this.review.content = this.review.reviewer = ''\n      })\n    }\n    // ...\n  },\n  // ...\n}\n\u003c/script\u003e\n```\n\n### Listening for events\nFinally, in our view, we can listen for events broadcast by Pusher, and update it with details, whenever a new review is published. First we add the `pusher-js` library:\n\n```\nnpm install -S pusher-js\n```\n\nUpdating `Review.vue`:\n\n```\n\u003c!-- ./src/components/Review.vue --\u003e\n\u003cscript\u003e\nimport Pusher from 'pusher-js' // import Pusher\n\nexport default {\n  // ...\n  created () {\n    // ...\n    this.subscribe()\n  },\n  methods: {\n    // ...\n    subscribe () {\n      let pusher = new Pusher('YOUR_PUSHER_APP_KEY', { cluster: 'YOUR_CLUSTER' })\n      pusher.subscribe('reviews')\n      pusher.bind('review_added', data =\u003e {\n        this.mockReviews.unshift(data.review)\n      })\n    }\n  },\n  // ...\n}\n\u003c/script\u003e\n```\n\nIn the above code, first we import the `Pusher` object from the `pusher-js` library, then we create a `subscribe` method that does the following:\n\n- Subscribes to the `reviews` channel with `pusher.subscribe('reviews')`\n- Listens for the `review_added` event, with `pusher.bind`, which receives a callback function as its second argument. Whenever it receives a broadcast, it triggers the callback function with the data broadcast as the function parameter. We update the view in this callback function by adding the new object to the `mockReviews`  array.\n\n## Bringing it all together\n\nWe can add `node server.js` to our app’s dev/start script so the API server starts along with the server provided by the webpack template:\n\n```\n{\n  // ...\n  \"scripts\": {\n    \"dev\": \"node server.js \u0026 node build/dev-server.js\",\n    \"start\": \"node server.js \u0026 node build/dev-server.js\",\n    // ...\n  }\n}\n```\n\nTo compile and run the complete app:\n\n```\nnpm run dev\n```\n\nVisit [localhost:8080](http://localhost:8080/) to view the app in action!\n\n## Conclusion\n\nIn this tutorial, we have learned how to build a Vue.js app with the webpack template. We also learned how to work with Single File Components and common Vue template directives. Finally, we learned how to make our Vue.js app realtime, utilising the simplicity and power of Pusher.\n\nIn my opinion, Vue.js is a really robust, and yet simple framework. It provides a great base for building robust realtime applications. There is also another great example [here](https://blog.pusher.com/exploring-real-time-apps-with-vuejs-es2016-and-webpack/) of using Vue.js and Pusher for realtime applications.","metaTitle":"Build a realtime app with Vue.js","metaDescription":"Build a movie review application with realtime features using Vue.js with the webpack template. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4LOO1pWwyQwAyWGSuYuGCW","type":"Entry","createdAt":"2018-02-22T15:02:44.363Z","updatedAt":"2018-02-28T17:17:28.514Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build live comments using Swift","url":"live-comments-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/live-commenting-pusher-ios","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}}],"reviewDate":"2017-04-21","description":"Build a live comments feature in your iOS app using Swift and PHP.","prerequisite":"A basic understanding of Swift and PHP are needed to follow this tutorial.","content":"Many applications come with a section where users can comment on the item they are previewing. When a comment is posted, while you are looking at this item, the best UX is to see the comment immediately as it is made by the user. In this tutorial we will demonstrate how we can achieve a live commenting feature using Pusher on an iOS application.\n\nWe will be building a gallery viewing application with comments. You can add your own comment to the item and it will be available instantly to other users looking at the item. For the sake of brevity, we will be building a very basic application and focusing more on the implementation than the design. When we are done, we should be able to achieve something like what's shown below:\n\n![live-comments-swift-demo](//images.contentful.com/1es3ne0caaid/55Ztr1wtsscGGk2EIGAi4Y/f361f121240e3c4ac256f27fe1594c5d/social-network-swift-demo.gif)\n\n### Setting up our XCode project\n\nCreate a new project on XCode and call it whatever you want. We will name ours \"**showcaze**\". You can simply follow the wizard XCode provides. Select the single page application as the base template. Once you are done with this, you will need to prepare the dependencies to be used by the application.\n\nThe easiest way install dependencies is by using CocoaPods. If you don’t have CocoaPods installed you can install them via RubyGems.\n\n```\ngem install cocoapods\n```\nThen configure CocoaPods in our application. First initialise the project by running this command in the top-level directory of your XCode project:\n\n```\npod init\n```\n\nThis will create a file called **Podfile**. Open it in your text editor, and make sure to add the following lines specifying your application's dependencies:\n\n``` \n# Uncomment the next line to define a global platform for your project\nplatform :ios, '8.0'\n\ntarget 'showcaze' do\n  # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\n  use_frameworks!\n\n  # Pods for showcaze\n  pod 'PusherSwift', '~\u003e 4.0'\n  pod 'Alamofire', '~\u003e 4.4'\nend\n```\n\nAnd then run `pod install` to download and install the dependencies. When cocoapods asks you to, close XCode. Now open the `project_name.xcworkspace` file in the root of your project, in my case, the `showcaze.xcworkspace` file. This should launch XCode.\n\n\u003e Note: Because we are using the latest version of XCode which contains Swift 3, we are using specific dependency versions that are compatible with it. You might need to use a lower dependency version tag depending on your XCode and Swift version.\n\n### Creating our status updates list view\n\nWe want to display the available comments and then allow people to add comments to this list. When we are done we want to have a simple view just like this.\n\n![live-comments-swift-ui](//images.contentful.com/1es3ne0caaid/2rEX7TPq9iYOWuGCIuEwSQ/e77c0a88ac4104f5a33cec80a31a2aea/social-network-swift-ui.png)\n\nOpen the Main storyboard and delete the current `View Controller` scene. Drag a new `UITableViewController` into the scene. Create a `CommentsTableViewController` and associate the newly created `View Controller` scene with it. Finally, while the view controller is selected in the storyboard, from XCode toolbar click **Editor \u003e Embed In \u003e Navigation Controller**.\n\nAfter this, you should add the labels as needed to the prototype cell, add a reuse identifier and create a `CommentTableViewCell` class and make it the custom class for the prototype table cell.\n\nThis is the source of the `CommentTableViewCell`:\n\n```\nimport UIKit\n\nclass CommentTableViewCell: UITableViewCell {\n    @IBOutlet weak var username: UILabel!\n    @IBOutlet weak var comment: UITextView!\n}\n```\n\n\u003e Note there are two `@IBOutlet`s in the class. You need to create the cell label and text view then `Control + Drag` them to the `CommentTableViewCell` class to create IBOutlets.\n\nThis is the source of the `CommentsTableViewController`:\n\n```\nimport UIKit\nimport Alamofire\nimport PusherSwift\n\nclass CommentsTableViewController: UITableViewController {\n\n    let MESSAGES_ENDPOINT = \"https://live-commenting-ios.herokuapp.com/\"\n\n    var pusher: Pusher!\n\n    var comments = [\n        [\"username\": \"John\", \"comment\": \"Amazing application nice!\"],\n        [\"username\": \"Samuel\", \"comment\": \"How can I add a photo to my profile? This is longer than the previous comment.\"]\n    ]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        tableView.rowHeight = 78;\n        navigationItem.title = \"View Comments\"\n\n        listenForNewComments()\n        addComposeButtonToNavigationBar()\n    }\n\n\n    private func listenForNewComments() -\u003e Void {\n        pusher = Pusher(key: \"PUSHER_API_KEY\")\n        let channel = pusher.subscribe(\"comments\")\n        let _ = channel.bind(eventName: \"new_comment\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String: AnyObject] {\n                let comment = [\"username\":\"Anonymous\", \"comment\": (data[\"text\"] as! String)]\n\n                self.comments.insert(comment, at: 0)\n\n                self.tableView.beginUpdates()\n                self.tableView.insertRows(at: [IndexPath(row: 0, section: 0)], with: .automatic)\n                self.tableView.endUpdates()\n            }\n        })\n        pusher.connect()\n    }\n\n    private func addComposeButtonToNavigationBar() -\u003e Void {\n        let button = UIBarButtonItem(barButtonSystemItem: .compose,\n                                     target: self,\n                                     action: #selector(buttonTapped))\n        navigationItem.setRightBarButton(button, animated: false)\n    }\n\n    func buttonTapped() -\u003e Void {\n        let alert = UIAlertController(title: \"Post\",\n                                      message: \"Enter a comment and see it inserted in real time using Pusher\",\n                                      preferredStyle: .alert)\n\n        alert.addTextField { (textField) in\n            textField.text = nil\n            textField.placeholder = \"Enter comment\"\n        }\n\n        alert.addAction(UIAlertAction(title: \"Add Comment\", style: .default, handler: { [weak alert] (_) in\n            let textField = alert?.textFields![0]\n\n            if (textField?.hasText)! {\n                self.postComment(comment: (textField?.text)!)\n            }\n        }))\n\n        alert.addAction(UIAlertAction(title: \"Cancel\", style: UIAlertActionStyle.cancel, handler: nil))\n\n        self.present(alert, animated: true, completion: nil)\n    }\n\n    private func postComment(comment: String) -\u003e Void {\n        Alamofire.request(MESSAGES_ENDPOINT, method: .post, parameters: [\"comment\": comment])\n            .validate()\n            .responseJSON { response in\n                switch response.result {\n                    case .success:\n                        print(\"Posted successfully\")\n                    case .failure(let error):\n                        print(error)\n            }\n        }\n   }\n\n\n    // MARK: - Table view data source\n\n    override func numberOfSections(in tableView: UITableView) -\u003e Int {\n        return 1\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n        return comments.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CommentCell\", for: indexPath) as! CommentTableViewCell\n\n        cell.username?.text = \"? \" + (comments[indexPath.row][\"username\"] ?? \"Anonymous\")\n        cell.comment?.text  = comments[indexPath.row][\"comment\"]\n\n        return cell\n    }\n}\n```\n\nTo highlight some important parts of the code, lets break a few down.\n\n```\n    private func listenForNewComments() -\u003e Void {\n        pusher = Pusher(key: \"PUSHER_API_KEY\")\n        let channel = pusher.subscribe(\"comments\")\n        let _ = channel.bind(eventName: \"new_comment\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String: AnyObject] {\n                let text = data[\"text\"] as! String\n                self.comments.insert(text, at: 0)\n                self.tableView.beginUpdates()\n                self.tableView.insertRows(at: [IndexPath(row: 0, section: 0)], with: .automatic)\n                self.tableView.endUpdates()\n            }\n        })\n        pusher.connect()\n    }\n```\n\nThis function basically initialises the Pusher Swift SDK, subscribes to a channel's `comments`, listens for an event `new_comment` and then fires a callback when that event is triggered from anywhere. In the callback, the text is appended to the top of the table data, then the `tableView` is updated with the new row.\n\n```\n    private func addComposeButtonToNavigationBar() -\u003e Void {\n        let button = UIBarButtonItem(barButtonSystemItem: .compose,\n                                     target: self,\n                                     action: #selector(buttonTapped))\n        navigationItem.setRightBarButton(button, animated: false)\n    }\n\n    func buttonTapped() -\u003e Void {\n        let alert = UIAlertController(title: \"Post\",\n                                      message: \"Enter a comment and see it inserted in real time using Pusher\",\n                                      preferredStyle: .alert)\n\n        alert.addTextField { (textField) in\n            textField.text = nil\n            textField.placeholder = \"Enter comment\"\n        }\n\n        alert.addAction(UIAlertAction(title: \"Add Comment\", style: .default, handler: { [weak alert] (_) in\n            let textField = alert?.textFields![0]\n\n            if (textField?.hasText)! {\n                self.postComment(comment: (textField?.text)!)\n            }\n        }))\n\n        alert.addAction(UIAlertAction(title: \"Cancel\", style: UIAlertActionStyle.cancel, handler: nil))\n\n        self.present(alert, animated: true, completion: nil)\n    }\n```\n\nThis block simply adds a compose button at the right of the navigation bar. It fires a `buttonTapped` callback when the button is well tapped. The `buttonTap` callback launches an alert view controller with a text field where the comment text is supposed to be entered in.\n\n![live-comments-swift-add-comment](//images.contentful.com/1es3ne0caaid/CKe0uWQqcKCEo2uyQGKcW/930346e23dd91dd38aeda9fb89eae007/social-network-swift-add-comment.png)\n\n#### Connecting to Pusher\n\nCreate a [new Pusher account](https://pusher.com) (it's free) if you do not already have one. Create a new application and retrieve your keys. This is the key you will use above. When you have your keys, you can plug it above and also below in the back-end service.\n\n### Building the backend\n\nNow that we have our application subscribed to the Pusher event and also posting comments, we will have to build a backend to support it. For the backend, I have made a simple PHP script. It will be uploaded as a part of the repository. You will need to host somewhere if you wish to use the demo, we have chosen [Heroku](http://heroku.com) for this.\n\nHere is our simple PHP script:\n\n```\n\u003c?php\n// \nrequire('vendor/autoload.php');\n\n$comment = $_POST['comment'] ?? false;\n\nif ($comment) {\n    $status = \"success\";\n\n    $options = ['encrypted' =\u003e true];\n\n    $pusher = new Pusher('PUSHER_API_KEY', 'PUSHER_API_SECRET', 'PUSHER_APP_ID', $options);\n\n    $pusher-\u003etrigger('comments', 'new_comment', ['text' =\u003e $comment]);\n} else {\n    $status = \"failure\";\n}\n\nheader('Content-Type: application/json');\necho json_encode([\"result\" =\u003e $status]);\n```\nHeres the `composer.json` file to install dependencies:\n\n```\n{\n    \"require\": {\n        \"pusher/pusher-php-server\": \"^2.6\"\n    },\n    \"require-dev\": {\n      \"heroku/heroku-buildpack-php\": \"*\"\n    }\n}\n```\n\nThe dev dependency is only useful if you are deploying the test script to Heroku, and here's the `Procfile` if you are:\n\n```\nweb: vendor/bin/heroku-php-apache2 ./\n```\n\nNow that we have the server running, whenever you make a comment on the application, it will be sent to Pusher and then the page will be updated with it.\n\n### Conclusion\n\nNow we have built a live commenting feature for your iOS app. Hopefully, you have learnt a thing or two on how to use the Pusher iOS Swift SDK to make realtime updates to your iOS application. If you have done something great on your own, leave a comment below and share it with us.","metaTitle":"Build live comments using Swift","metaDescription":"In this tutorial, create a live comments feature in your iOS app using Swift and PHP."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6FLLf45Q1USoaYMicaOQIm","type":"Entry","createdAt":"2018-02-27T10:43:19.163Z","updatedAt":"2020-06-19T10:40:53.888Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime counter using JavaScript","url":"counter-javascript","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3sixk7zsAoQqqSsUWM8I8y","type":"Entry","createdAt":"2018-02-13T18:06:00.483Z","updatedAt":"2018-02-14T10:08:13.372Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Olayinka Omole","url":"olayinka-omole","email":"olayinka.omole@gmail.com","twitter":"https://twitter.com/olayinkaos","github":"https://github.com/olayinkaos","guestWriter":true}}],"projectRepo":"https://github.com/olayinkaos/pusher-realtime-js-counter","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2017-04-20","description":"Create a realtime vote counter for your website with Pusher and plain JavaScript. ","prerequisite":"A basic understanding of JavaScript is needed to follow this tutorial.","content":"Dashboards are a common feature of modern day applications. Users like to see an overview of their performance, on a single page, and a really great way to improve that experience is to make the information shown to them be dynamic, or realtime!\n\nCounters are one of the prominent components of user dashboards, and in this tutorial, I will be showing you how to create a realtime counter, using the broadcasting prowess of [Pusher](https://pusher.com/) and the simplicity of plain JavaScript. We will build a simple vote counter to count the number of votes an item gets, in real time.\n\nFirst, we will set up Pusher, then create our [Node.js](https://nodejs.org/en/) Application, and finally we will create our view and listen for changes to the number of votes for an item.\n\n## Setting up Pusher\n\nPusher's APIs make it very easy to add realtime functionality to your applications. You should [signup](https://pusher.com/signup) to a free account (if you haven't already done so), create an app, and copy out the app credentials (App ID, Key and Secret) from the “App Keys” section, as we will be needing these for our app interaction with Pusher.\n\n## Creating Our App\n\nWe will be building our backend on [Node.js](https://nodejs.org/en/), make sure you have it installed, then you can initialise the new app with:\n\n``` \nnpm init -y\n```\n\n\u003e **Tip**: The `-y` or `--yes` flag helps to create a `package.json` file with default values.\n\nNext, we will install [Express](https://expressjs.com/) and [Pusher](https://github.com/pusher/pusher-http-node) and save as dependencies in our `package.json` file, via npm:\n\n``` \nnpm install -S express pusher\n```\nNow, we can create the files needed for our application:\n\n``` \n./server.js\n./index.html\n```\n\nThe `server.js` file will contain our server-side code, and `index.html` will contain our view and event listener script.\n\n### Building the Backend\n\nIn our `server.js` file, first we will initialise Express, require the `path` [module](https://nodejs.org/api/path.html) and require Pusher:\n\n```\nconst express = require('express');\nconst path = require('path');\nconst app = express();\napp.use(express.static(path.join(__dirname)));\nconst Pusher = require('pusher');\n```\n\nNext, we will Initialise Pusher with our app credentials, gotten from the Pusher dashboard:\n\n```\nconst pusher = new Pusher({\n  appId: 'YOUR_APP_ID',\n  key: 'YOUR_APP_KEY',\n  secret: 'YOUR_APP_SECRET',\n  cluster: 'eu',\n  encrypted: true\n});\n```\n\n\u003e **Note:** If you created your app in a different cluster to the default `us-east-1`, you must configure the cluster option. It is optional if you chose the default option. `encrypted` is also optional.\n\nNow we can start defining our app's routes and responses.\n\nWhen a user visits the homepage, we want to serve our `index.html` file, so we define a route for `/`:\n\n```\napp.get('/', (req,res) =\u003e {  \n  res.sendFile('index.html', {root: __dirname});\n});\n```\n\n\u003e **Tip**: [res.sendFile](https://expressjs.com/en/api.html#res.sendFile) is used to deliver files in Express applications.\n\nNext, we will define a route to handle votes. When a request with an `item_id` is sent to this route, we want to increase the number of votes on that item, and broadcast the change to all our users.\n\n```\napp.get('/vote', (req, res) =\u003e {\n  let item = req.query.item_id;\n  pusher.trigger('counter', 'vote', {item: item});\n  res.status(200).send();\n});\n```\n\nIn the code above, when a request is made to the `/vote` route, it gets the value of the item from the `item_id` key in the query string, then triggers a `vote` [event](https://pusher.com/docs/client_api_guide/client_events) on the `counter` channel, sending the `item` information as data to be broadcasted.\n\nThe `trigger` method has this syntax: `pusher.trigger( channels, event, data, socketId, callback );`. You can read more in it [here](https://pusher.com/docs/server_api_guide/interact_rest_api#publishing_events).\n\nWe are broadcasting on a [public channel](https://pusher.com/docs/client_api_guide/client_public_channels) as we want the data to be accessible to everyone. Pusher also allows broadcasting on [private](https://pusher.com/docs/client_api_guide/client_private_channels) and [presence](https://pusher.com/docs/client_api_guide/client_presence_channels) channels, which provide functionalities that require authentication. Their channel names are prefixed by `private-` and `presence-` respectively, unlike public channels that require no prefix.\n\nTypically, we should also save the new value of the number of votes to a database of some sort, so the data is persisted, but that is a bit out of the scope of this tutorial. You can implement this on your version!\n\nNow we can start the server and listen on port `5000` for connections:\n\n```\nconst port = 5000;\napp.listen(port, () =\u003e { console.log(`App listening on port ${port}!`)});\n```\n\nThe final `server.js` file will look like this:\n\n``` javascript\n/*\n * Initialise Express\n */\nconst express = require('express');\nconst path = require('path');\nconst Pusher = require('pusher');\nconst app = express();\napp.use(express.static(path.join(__dirname)));\n\n/*\n * Initialise Pusher\n */\nconst pusher = new Pusher({\n  appId: 'YOUR_APP_ID',\n  key: 'YOUR_APP_KEY',\n  secret: 'YOUR_APP_SECRET',\n  cluster: 'eu',\n  encrypted: true\n});\n\n/*\n * Define app routes and reponses\n */\napp.get('/', (req,res) =\u003e {  \n  res.sendFile('index.html', {root: __dirname});\n});\n\napp.get('/vote', (req, res) =\u003e {\n  let item = req.query.item_id;\n  pusher.trigger('counter', 'vote', {item: item});\n  res.status(200).send();\n});\n\n/*\n * Run app\n */\nconst port = 5000;\napp.listen(port, () =\u003e { console.log(`App listening on port ${port}!`)});\n```\n\n### Creating the App View\n\nNow, we can fill `index.html` with some markup. I also included [Foundation](http://foundation.zurb.com/) to take advantage of some preset styles:\n\n```\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n  \u003cmeta charset=\"utf-8\"\u003e\n  \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/foundation/6.3.1/css/foundation.min.css\"\u003e\n  \u003ctitle\u003eJavaScript Decides\u003c/title\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n  \u003cdiv class=\"container text-center\"\u003e\n    \u003ch3 class=\"title\"\u003e\n      Pusher Real-time Vote Counter.\n      \u003ch5 class=\"subheader\"\u003eJavaScript Decides\u003c/h5\u003e\n    \u003c/h3\u003e\n\n    \u003cdiv class=\"row\"\u003e\n      \u003cdiv class=\"columns medium-6\"\u003e\n        \u003cdiv class=\"stat\" id=\"vote-1\"\u003e0\u003c/div\u003e\n        \u003cp class=\"subheader\"\u003e\u003csmall\u003enumber of votes\u003c/small\u003e\u003c/p\u003e\n        \u003cbutton class=\"button vote-button\" data-vote=\"1\"\u003eVote for me\u003c/button\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"columns medium-6\"\u003e\n        \u003cdiv class=\"stat\" id=\"vote-2\"\u003e0\u003c/div\u003e\n        \u003cp class=\"subheader\"\u003e\u003csmall\u003enumber of votes\u003c/small\u003e\u003c/p\u003e\n        \u003cbutton class=\"button vote-button\" data-vote=\"2\"\u003eNah, Vote for me\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    \u003chr\u003e\n  \u003c/div\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n```\n\n### Listening for events from Pusher and updating the vote count\n\nTo work with Pusher on the client side, we need to include its JavaScript library. We'll do so at the bottom of `index.html`:\n\n```\n\u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n```\n\nThen, initialising Pusher with our app credentials:\n\n```\nconst pusher = new Pusher('YOUR_APP_KEY', {\n  cluster: 'eu',\n  encrypted: true\n});\n```\n\n\u003e **Note**: Don't forget to replace 'YOUR_APP_KEY' with its actual value\n\nNext, we will subscribe to the `counter` public channel, which is the same channel we publish to on our server-side, and listen for `vote` events:\n\n```\nconst channel = pusher.subscribe('counter');\n\nchannel.bind('vote', data =\u003e {\n  let elem = document.querySelector(`#vote-${data.item}`),\n      votes = parseInt(elem.innerText);\n  elem.innerText = votes + 1;\n});\n```\n\n\u003e **Tip**: You can also do `Pusher.logToConsole = true;` to debug locally\n\nIn the above code, we also defined a callback function, which accepts the data broadcast through Pusher as its parameter. We used this data to update the DOM with the new values of the vote counts.\n\nFinally, we define an event listener for `click` events on our `vote` buttons. We also define a `voteItem()` function which will be fired whenever the buttons are clicked.\n\n```\nconst voteButtons = document.getElementsByClassName(\"vote-button\");\n\nfunction voteItem() { \n  let vote_id = this.getAttribute(\"data-vote\");\n\n  // Make Ajax call with JavaScript Fetch API\n  fetch(`/vote?item_id=${vote_id}`)\n      .catch( e =\u003e { console.log(e); });\n}\n\n// IIFE - Executes on page load\n(function() {\n  for (var i = 0; i \u003c voteButtons.length; i++) {\n    voteButtons[i].addEventListener('click', voteItem);\n  }\n})();\n```\n\n\u003e **Note**: We make use of the JavaScript [Fetch API](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) for making an Ajax request. It is promise-based, and more powerful than the regular XMLHttpRequest, although a Polyfill might be needed for older browsers.\n\nThe final `index.html` file will look like this:\n\n```\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n  \u003cmeta charset=\"utf-8\"\u003e\n  \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/foundation/6.3.1/css/foundation.min.css\"\u003e\n  \u003ctitle\u003eJavaScript Decides\u003c/title\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n  \u003cdiv class=\"container text-center\"\u003e\n    \u003ch3 class=\"title\"\u003e\n      Pusher Real-time Vote Counter.\n      \u003ch5 class=\"subheader\"\u003eJavaScript Decides\u003c/h5\u003e\n    \u003c/h3\u003e\n\n    \u003cdiv class=\"row\"\u003e\n      \u003cdiv class=\"columns medium-6\"\u003e\n        \u003cdiv class=\"stat\" id=\"vote-1\"\u003e0\u003c/div\u003e\n        \u003cp class=\"subheader\"\u003e\u003csmall\u003enumber of votes\u003c/small\u003e\u003c/p\u003e\n        \u003cbutton class=\"button vote-button\" data-vote=\"1\"\u003eVote for me\u003c/button\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"columns medium-6\"\u003e\n        \u003cdiv class=\"stat\" id=\"vote-2\"\u003e0\u003c/div\u003e\n        \u003cp class=\"subheader\"\u003e\u003csmall\u003enumber of votes\u003c/small\u003e\u003c/p\u003e\n        \u003cbutton class=\"button vote-button\" data-vote=\"2\"\u003eNah, Vote for me\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    \u003chr\u003e\n  \u003c/div\u003e\n\n  \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n  \u003cscript\u003e\n    const pusher = new Pusher('YOUR_APP_KEY', {\n      cluster: 'eu',\n      encrypted: true\n    });\n\n    const channel = pusher.subscribe('counter');\n\n    channel.bind('vote', data =\u003e {\n      let elem = document.querySelector(`#vote-${data.item}`),\n          votes = parseInt(elem.innerText);\n      elem.innerText = votes + 1;\n    });\n\n    const voteButtons = document.getElementsByClassName(\"vote-button\");\n\n    function voteItem() { \n      let vote_id = this.getAttribute(\"data-vote\");\n\n      // Make Ajax call with JavaScript Fetch API\n      fetch(`/vote?item_id=${vote_id}`)\n          .catch( e =\u003e { console.log(e); });\n    }\n\n    // IIFE - Executes on page load\n    (function() {\n      for (var i = 0; i \u003c voteButtons.length; i++) {\n        voteButtons[i].addEventListener('click', voteItem);\n      }\n    })();\n  \u003c/script\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n```\n\nAnd that's it, we have a functional realtime vote counter!\n\nTo run the app:\n\n```\nnode server.js\n```\n\nYou can also get [nodemon](https://github.com/remy/nodemon), so you can have automatic reloads on changes to your file. So instead, you could do: `nodemon server.js`.\n\n## Demo\n\nHere is what the final app looks like:\n\n![counter-javascript-demo](//images.contentful.com/1es3ne0caaid/6X4UP3L99mWEAogys46OYG/72ad23b0bab190026ab3b6839db45ba1/counter-javascript-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have learned how to start a basic JavaScript project, and give it realtime functionality using Pusher. We have also learned about Public channels, and how we can trigger events on these channels on the server-side, and listen for them on the client-side.\n\nThere are a lot of possibilities, with Pusher providing realtime functionality for our applications, especially in the creation of dashboard components. In the same way as a counter was created, we can also create [tables](https://blog.pusher.com/build-a-realtime-table-using-laravel-and-pusher/), [charts](https://blog.pusher.com/build-realtime-chart-using-laravel-pusher/), and so on.\n\nPusher's presence channels can also be used to implement a view counter, whenever a user visits your app.","metaTitle":"Build a realtime counter using JavaScript","metaDescription":"Start a basic JavaScript project creating a website vore counter with realtime functionality using Pusher. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2aVpvhP8UwiCiEUK8WcuuI","type":"Entry","createdAt":"2018-02-22T15:02:46.282Z","updatedAt":"2018-02-28T14:17:36.772Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a simple social network with JavaScript","url":"social-network-javascript","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"wQhwNciAKWOW8SI2MSKww","type":"Entry","createdAt":"2018-02-13T10:47:12.980Z","updatedAt":"2018-02-14T10:09:05.816Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Rahat Khanna","url":"rahat-khanna","email":"rahat.khanna@yahoo.co.in","twitter":"https://twitter.com/mappmechanic","github":"https://github.com/mappmechanic","guestWriter":true}}],"projectRepo":"https://github.com/mappmechanic/whats-up-realtime-status-update","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2017-04-10","description":"Build an app similar to a group chat room where you can see who's online and their latest status update in realtime. ","prerequisite":"A basic understanding of JavaScript is needed to follow this tutorial.","content":"In this blog post, we will build a simple social network with realtime features and a list of all members who are online.\n\nWe will be using Node.js as the application server, Vanilla JavaScript in the front end and Pusher for realtime communication between our server and front end.\n\nWe will build an app which will be like your friends list or a common chat room where you can see who's online and their latest status update in realtime. In the blog post, we will learn about Pusher's presence channel and how to know about the online members to this channel.\n\n![social-network-javascript-demo](//images.contentful.com/1es3ne0caaid/4ZLuC0dzk44Cw8Q04a60Ya/bf8e90962701acda5f785ee00663cefd/social-network-javascript-demo.gif)\n\nWe will be building the following components during this blog post:\n\n- Node.js server using ExpressJS framework:\n    - `/register` API - In order to register/login a new user to our channel and server by creating their session and saving their info\n    - `/isLoggedIn` API - To check if a user is already logged in or not in case of refreshing the browser\n    - `/usersystem/auth` API - Auth validation done by Pusher after registering it with our app and on subscribing to a presence or private channel\n    - `/logout` API - To logout the user and remove the session\n \n- Frontend app using Vanilla JavaScript:\n    - Register/Login Form - To register/login a new user by filling in their username and initial status\n    - Members List - To see everyone who is online and their updated status\n    - Update Status - To click on the existing status and update it on blur of the status text edit control\n \n## Signing up with Pusher\n\nYou can create a free account in Pusher [here](http://pusher.com/signup). After you signup and login for the first time, you will be asked to create a new app as seen in the picture below. You will have to fill in some information about your project and also the front end library or backend language you will be building your app with.\n\n![social-network-javascript-create-app](//images.contentful.com/1es3ne0caaid/qtV3h9hXlmiwOccWKekOw/bf8e90962701acda5f785ee00663cefd/social-network-javascript-create-app.png)\n\nFor this particular blog post, we will be selecting Vanilla JavaScript for the frontend and Node.js for the backend as seen in the picture above. This will just show you a set of starter sample codes for these selections, but you can use any integration kit later on with this app.\n\n![social-network-javascript-dashboard](//images.contentful.com/1es3ne0caaid/3N1u1ermzSuOiGWcECeseq/bf8e90962701acda5f785ee00663cefd/social-network-javascript-dashboard.png)\n\n\n## Node.js Server\n\nNode.js should be installed in the system as a prerequisite to this. Now let us begin building the Node.js server and all the required APIs using Express. Initialise a new node project by the following command\n\n```\nnpm init\n```\n\n### Installing dependencies\n\nWe will be installing the required dependencies like Express, express-session, Pusher, body-parser, cookie-parser by the following command:\n\n```\nnpm install express express-session body-parser cookie-parser --save\n```\n\n### Foundation server\n\nWe will now create the basic foundation for Node Server and also enable sessions in that using express-session module.\n\n```\nvar express = require('express');\nvar path = require('path');\nvar bodyParser = require('body-parser');\nvar expressSession = require('express-session');\nvar cookieParser = require('cookie-parser');\n\nvar app = express();\n\n// must use cookieParser before expressSession\napp.use(cookieParser());\n\napp.use(expressSession({\n  secret:'\u003csome-secret-token-here\u003e',\n  resave: true, \n  saveUninitialized: true\n}));\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(express.static(path.join(__dirname, 'public')));\n\n// Error Handler for 404 Pages\napp.use(function(req, res, next) {\n    var error404 = new Error('Route Not Found');\n    error404.status = 404;\n    next(error404);\n});\n\nmodule.exports = app;\n\napp.listen(9000, function(){\n  console.log('Example app listening on port 9000!')\n});\n```\nIn the above code, we have created a basic Express server and using the method `.use` we have enabled cookie-parser, body-parser and a static file serving from `public` folder. We have also enabled sessions using `express-session` module. This will enable us to save user information in the appropriate request session for the user.\n\n### Adding Pusher\n\nPusher has an open source NPM module for Node.js integrations which we will be using. It provides a set of utility methods to integrate with Pusher APIs using a unique appId, key and a secret. We will first install the Pusher `npm` module using the following command:\n\n```\nnpm install pusher --save\n```\nNow, we can use 'require' to get the Pusher module and to create a new instance passing an options object with important keys to initialise our integration. For this blog post, I have put random keys; you will have to obtain it for your app from the Pusher dashboard.\n\n```\nvar Pusher = require('pusher');\n\nvar pusher = new Pusher({\n  appId: '30XXX64',\n  key: '82XXXXXXXXXXXXXXXXXb5',\n  secret: '7bXXXXXXXXXXXXXXXX9e',\n  encrypted: true\n});\n\nvar app = express();\n...\n```\n\nYou will have to replace the `appId`, `key` and a `secret` with values specific to your own app. After this, we will write code for a new API which will be used to create a new comment.\n\n### Register/Login API\n\nNow, we will develop the first API route of our application through which a new user can register/login itself and make itself available on our app.\n\n```\napp.post('/register', function(req, res){\n  console.log(req.body);\n  if(req.body.username \u0026\u0026 req.body.status){\n    var newMember = {\n      username: req.body.username,\n      status: req.body.status\n    }\n    req.session.user = newMember;\n    res.json({  \n      success: true,\n      error: false\n    });\n  }else{\n    res.json({  \n      success: false,\n      error: true,\n      message: 'Incomplete information: username and status are required'\n    });\n  }\n});\n```\n\nIn the above code, we have exposed a POST API call on the route `/register` which would expect username and status parameters to be passed in the request body. We will be saving this user info in the request session.\n\n### User system auth API\n\nIn order to enable any client subscribing to Pusher Private and Presence channels, we need to implement an auth API which would authenticate the user request by calling Pusher.authenticate method at the server side. Add the following code in the server in order to fulfil this condition:\n\n```\napp.post('/usersystem/auth', function(req, res) {\n  var socketId = req.body.socket_id;\n  var channel = req.body.channel_name;\n  var currentMember = req.session.user;\n  var presenceData = {\n    user_id: currentMember.username,\n    user_info: {\n      status: currentMember.status,\n    }\n  };\n  var auth = pusher.authenticate(socketId, channel, presenceData);\n  res.send(auth);\n});\n```\n\nWe need to provide the specific route in the initialisation of Pusher Client side library which we will see later in this blog post. The Pusher client library will automatically call this route and pass in the channel_name and socket_id properties. We will simultaneously get the user information from the user session object and pass it as presenceData to the Pusher.authenticate method call.\n\n### IsLoggedIn and Logout API\n\nIf the user refreshes the browser, the client side app should detect if the user is already registered or not. We will implement an **isLoggedIn** API route for this. Also, we need a **logout** route to enable any user to logout from the app.\n\n```\napp.get('/isLoggedIn', function(req,res){\n  if(req.session.user){\n    res.send({ \n      authenticated: true \n    });\n  }else{\n    res.send({ authenticated: false });\n  }\n});\n\napp.get('/logout', function(req,res){\n  if(req.session.user){\n    req.session.user = null;\n  }\n  res.redirect('/');\n});\n```\n## Frontend app using Vanilla JavaScript\n\nWe will be developing the front end app now to register a new user with an initial status, see the members who are online and their statuses. We will also build the feature for the logged in user to update their users and all other users will see the updated status in realtime.\n\n### Step 1: Create a folder named public and create an index.html\n\nWe have already written code in our `server.js` to serve static content from `public` folder, so we will write all our front end code in this folder.\n\nPlease create a new folder `public` and also create an empty `index.html` for now.\n\n### Step 2: Add boilerplate code to our index.html\n\nWe will be adding some basic boilerplate code to set up the base structure for our web app like Header, Sections where registration form and the members list can be placed.\n\n```\n\u003c!DOCTYPE\u003e\n\u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eWhats Up ! Know what other's are up to in Realtime !\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://unpkg.com/purecss@0.6.2/build/pure-min.css\" integrity=\"sha384-UQiGfs9ICog+LwheBSRCt1o5cbyKIHbwjWscjemyBMT9YCUMZffs6UqUTd0hObXD\" crossorigin=\"anonymous\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Raleway:200\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"./style.css\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cheader\u003e\n            \u003cdiv class=\"logo\"\u003e\n                \u003cimg src=\"./assets/pusher-logo.png\" /\u003e\n            \u003c/div\u003e\n            \u003cdiv id=\"logout\" class=\"logout\"\u003e\n               \u003ca href=\"/logout\"\u003eLogout\u003c/a\u003e\n            \u003c/div\u003e\n        \u003c/header\u003e\n        \u003csection class=\"subheader\"\u003e\n            \u003cimg class=\"whatsup-logo\" src=\"./assets/whatsup.png\" /\u003e\n            \u003ch2\u003eWhats Up ! Know what other's are up to in Realtime !\u003c/h2\u003e\n        \u003c/section\u003e\n        \u003csection\u003e\n           \u003cdiv id=\"loader\" class=\"loader\"\u003e\n           \u003c/div\u003e\n           \u003cscript id=\"member-template\" type=\"text/x-template\"\u003e\n            \u003c/script\u003e\n           \u003cdiv id=\"me\" class=\"me\"\u003e\n           \u003c/div\u003e\n           \u003cdiv id=\"membersList\" class=\"members-list\"\u003e\n           \u003c/div\u003e\n           \u003cdiv id=\"signup-form\" class=\"tab-content\"\u003e\n                \u003cdiv class=\"header\"\u003e\n                    \u003cdiv\u003e\u003cimg src=\"./assets/comments.png\"\u003e\u003c/div\u003e\n                    \u003cdiv class=\"text\"\u003eFirst Time Sign Up !\u003c/div\u003e\n                \u003c/div\u003e\n                \u003cform class=\"pure-form\" id=\"user-form\"\u003e\n                    \u003cdiv class=\"signup-form\"\u003e\n                        \u003cdiv class=\"left-side\"\u003e\n                            \u003cdiv class=\"row\"\u003e\n                                \u003cinput type=\"text\" required placeholder=\"enter a username or displayname\" id=\"display_name\"\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"row\"\u003e\n                                \u003ctextarea placeholder=\"enter initial status text\" required id=\"initial_status\" rows=\"3\"\u003e\u003c/textarea\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"right-side\"\u003e\n                            \u003cbutton \n                                type=\"submit\" \n                                class=\"button-secondary pure-button\"\u003eSignup/Login\u003c/button\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n        \u003c/section\u003e\n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"./app.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n\u003c/html\u003e\n```\nIn the above boilerplate code, we have referenced our main Javascript file `app.js` and the Pusher client side JS library. We also have a script tag where we will place the template for a member row in the member list. Also, we have two empty div tags with ids me and membersList to contain the logged in member name and info, as well as the list of all other members with their statuses.\n\n### Step 3: Style.css\n\nImportant to note that we will be showing the signup form for the first time and the MembersList and Logout button will be hidden by default initially. Please create a new file called `style.css` and add the following css to it:\n\n```\nbody{\n    margin:0;\n    padding:0;\n    overflow: hidden;\n    font-family: Raleway;\n}\n\nheader{\n    background: #2b303b;\n    height: 50px;\n    width:100%;\n    display: flex;\n    color:#fff;\n}\n\n\n.loader,\n.loader:after {\n  border-radius: 50%;\n  width: 10em;\n  height: 10em;\n}\n.loader {\n  margin: 60px auto;\n  font-size: 10px;\n  position: relative;\n  text-indent: -9999em;\n  border-top: 1.1em solid rgba(82,0,115, 0.2);\n  border-right: 1.1em solid rgba(82,0,115, 0.2);\n  border-bottom: 1.1em solid rgba(82,0,115, 0.2);\n  border-left: 1.1em solid #520073;\n  -webkit-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  transform: translateZ(0);\n  -webkit-animation: load8 1.1s infinite linear;\n  animation: load8 1.1s infinite linear;\n}\n@-webkit-keyframes load8 {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n@keyframes load8 {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n\n.subheader{\n    display: flex;\n    align-items: center;\n    margin: 0px;\n}\n\n.whatsup-logo{\n    height:60px;\n    border-radius: 8px;\n    flex:0 60px;\n    margin-right: 15px;\n}\n\n.logout{\n    flex:1;\n    justify-content: flex-end;\n    padding:15px;\n    display: none;\n}\n\n.logout a{\n    color:#fff;\n    text-decoration: none;\n}\n\n#signup-form{\n    display: none;\n}\n\ninput, textarea{\n  width:100%;\n}\n\n\nsection{\n    padding: 0px 15px;\n}\n\n.logo img{\n    height: 35px;\n    padding: 6px;\n    margin-left: 20px;\n}\n\n#updateStatus{\n    display: none;\n}\n\n.members-list{\n    display: none;\n    flex-direction: column;\n}\n\n.me {\n  display: none;\n}\n\n```\nPlease try to open the URL `http://localhost:9000` in your browser and the application will load with the basic register or login form with username and status. The output will look like the screenshot below:\n\n![social-network-javascript-signup](//images.contentful.com/1es3ne0caaid/59rMGXGhbWcYiKOUyoECk2/bf8e90962701acda5f785ee00663cefd/social-network-javascript-signup.png)\n\n### Step 4: Add app.js basic code\n\nNow we will add our Javascript code to have basic utility elements inside a self invoking function to create a private scope for our app variables. We do not want to pollute JS global scope.\n\n```\n// Using IIFE for Implementing Module Pattern to keep the Local Space for the JS Variables\n(function() {\n    // Enable pusher logging - don't include this in production\n    Pusher.logToConsole = true;\n\n    var serverUrl = \"/\",\n        members = [],\n        pusher = new Pusher('73xxxxxxxxxxxxxxxdb', {\n          authEndpoint: '/usersystem/auth',\n          encrypted: true\n        }),\n        channel,\n        userForm = document.getElementById(\"user-form\"),\n        memberTemplateStr = document.getElementById('member-template').innerHTML;\n\n    function showEle(elementId){\n      document.getElementById(elementId).style.display = 'flex';\n    }\n\n    function hideEle(elementId){\n      document.getElementById(elementId).style.display = 'none';\n    }\n\n    function ajax(url, method, payload, successCallback){\n      var xhr = new XMLHttpRequest();\n      xhr.open(method, url, true);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState != 4 || xhr.status != 200) return;\n        successCallback(xhr.responseText);\n      };\n      xhr.send(JSON.stringify(payload));\n    }\n\n    ajax(serverUrl+\"isLoggedIn\",\"GET\",{},isLoginChecked);\n\n    function isLoginChecked(response){\n      var responseObj = JSON.parse(response);\n      if(responseObj.authenticated){\n        channel = pusher.subscribe('presence-whatsup-members');\n        bindChannelEvents(channel);\n      }\n      updateUserViewState(responseObj.authenticated);\n    }\n\n    function updateUserViewState(isLoggedIn){\n      document.getElementById(\"loader\").style.display = \"none\";\n      if(isLoggedIn){\n        document.getElementById(\"logout\").style.display = \"flex\";\n        document.getElementById(\"signup-form\").style.display = \"none\";\n      }else{\n        document.getElementById(\"logout\").style.display = \"none\";\n        document.getElementById(\"signup-form\").style.display = \"block\";\n      }\n    }\n\n    function showLoader(){\n        document.getElementById(\"loader\").style.display = \"block\";\n        document.getElementById(\"logout\").style.display = \"none\";\n        document.getElementById(\"signup-form\").style.display = \"none\";\n    }\n\n    // Adding a new Member Form Submit Event\n    userForm.addEventListener(\"submit\", addNewMember);\n\n\n    function addNewMember(event){\n      event.preventDefault();\n      var newMember = {\n        \"username\": document.getElementById('display_name').value,\n        \"status\": document.getElementById('initial_status').value\n      }\n      showLoader();\n      ajax(serverUrl+\"register\",\"POST\",newMember, onMemberAddSuccess);\n    }\n\n    function onMemberAddSuccess(response){\n        // On Success of registering a new member\n        console.log(\"Success: \" + response);\n        userForm.reset();\n        updateUserViewState(true);\n        // Subscribing to the 'presence-members' Channel\n        channel = pusher.subscribe('presence-whatsup-members');\n        bindChannelEvents(channel);\n    }\n})();\n```\nIn the above code, we have referenced all the important variables we will be requiring. We will also initialise the Pusher library using new Pusher and passing the api key as the first argument. The second argument contains an optional config object in which we will add the key `authEndpoint` with the custom node api route `/usersystem/auth` and also add the key `encrypted` setting it to value true.\n\nWe will create a couple of generic functions to show or hide an element passing its unique id. We have also added a common method named ajax to make ajax requests using XMLHttp object in Vanilla JavaScript.\n\nAt the load of the page we make an ajax request to check if the user is logged in or not. If the user is logged in, we will directly use the Pusher instance to subscribe the user to a presence channel named `presence-whatsup-members` , you can have this as the unique chat room or app location where you want to report/track the online members.\n\nWe have also written a method above to `addNewMember` using an ajax request to the `register` api route we have built in Node.js. We will be passing the name and initial status entered into the form.\n\nWe also have a method to update the user view state based on the logged in status. This method does nothing but updates the visibility of members list, logout button and signup form. We have used a `bindChannelEvents` method when the user is logged in which we will be implementing later in the blog post.\n\nPlease add the following css in `style.css` file to display the `me` element appropriately with the username and the status of the logged in user.\n\n```\n\n.me {\n    border:1px solid #aeaeae;\n    padding:10px;\n    margin:10px;\n    border-radius: 10px;\n}\n\n.me img{\n    height: 40px;\n    width: 40px;\n}\n\n.me .status{\n    padding:5px;\n    flex:1;\n}\n\n.me .status .username{\n    font-size:13px;\n    color: #aeaeae;\n    margin-bottom:5px;\n}\n\n.me .status .text{\n    font-size: 15px;\n    width:100%;\n    -webkit-transition: all 1s ease-in 5ms;\n    -moz-transition: all 1s ease-in 5ms;\n    transition: all 1s ease-in 5ms;\n}\n```\n### Step 5: Add code to render the members list and bindChannelEvents\n\nNow, after subscribing to the channel, we need to bind certain events so that we can know whenever a new member is added to the channel or removed from it. We will also bind to a custom event to know whenever someone updates their status.\n\nAdd the following code to the `app.js` file:\n\n``` language-javascript\n// Binding to Pusher Events on our 'presence-whatsup-members' Channel\n\n  function bindChannelEvents(channel){\n      channel.bind('client-status-update',statusUpdated);\n      var reRenderMembers = function(member){\n        renderMembers(channel.members);\n      }\n      channel.bind('pusher:subscription_succeeded', reRenderMembers);\n      channel.bind('pusher:member_added', reRenderMembers);\n      channel.bind('pusher:member_removed', reRenderMembers);\n    }\n\n\n```\nIn the above `bindChannelEvents` method, we use the `channel.bind` method to bind event handlers for 3 internal events - `pusher:subscription_succeeded`, `pusher:member_added`, `pusher:member_removed` and 1 custom event - `client-status-update`.\n\nNow we will add the JavaScript code to render the list of members. It is important to know that the object which i returned from the `.subscribe` method has a property called `members` which can be used to know the information about the logged in user referred by the key `me` and other members by key `members`. Add the following code to `app.js` file\n\n```\n\n// Render the list of members with updated data and also render the logged in user component\n\n    function renderMembers(channelMembers){\n      var members = channelMembers.members;\n      var membersListNode = document.createElement('div');\n      showEle('membersList');\n\n      Object.keys(members).map(function(currentMember){\n        if(currentMember !== channelMembers.me.id){\n          var currentMemberHtml = memberTemplateStr;\n          currentMemberHtml = currentMemberHtml.replace('{{username}}',currentMember);\n          currentMemberHtml = currentMemberHtml.replace('{{status}}',members[currentMember].status);\n          currentMemberHtml = currentMemberHtml.replace('{{time}}','');\n          var newMemberNode = document.createElement('div');\n          newMemberNode.classList.add('member');\n          newMemberNode.setAttribute(\"id\",\"user-\"+currentMember);\n          newMemberNode.innerHTML = currentMemberHtml;\n          membersListNode.appendChild(newMemberNode);\n        }\n      });\n      renderMe(channelMembers.me);\n      document.getElementById(\"membersList\").innerHTML = membersListNode.innerHTML;\n    }\n\n\n    function renderMe(myObj){\n      document.getElementById('myusername').innerHTML = myObj.id;\n      document.getElementById('mystatus').innerHTML = myObj.info.status;\n    }\n```\nWe have added the event handler for new member add/remove event to re-render the members list so that it remains updated with the online members only. In order to show the members list we need to add the following style into our file `style.css`.\n\n```\n\n.member{\n    display: flex;\n    border-bottom: 1px solid #aeaeae;\n    margin-bottom: 10px;\n    padding: 10px;\n}\n\n.member .user-icon{\n    flex:0 40px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.member .user-icon img{\n    width:50px;\n    height:50px;\n}\n\n.member .user-info{\n    padding:5px;\n    margin-left:10px;\n}\n\n.member .user-info .name{\n    font-weight: bold;\n    font-size: 16px;\n    padding-bottom:5px;\n}\n\n.member .user-info .status{\n    font-weight: normal;\n    font-size:13px;\n}\n\n.member .user-info .time{\n    font-weight: normal;\n    font-size:10px;\n    color:#aeaeae;\n}\n```\nNow we will write the code, to trigger a client event on our channel to notify all users about the status change of the logged in user. Add the following code to your `app.js` file.\n\n```\n // On Blur of editting my status update the status by sending Pusher event\n    document.getElementById('mystatus').addEventListener('blur',sendStatusUpdateReq);\n\n    function sendStatusUpdateReq(event){\n      var newStatus = document.getElementById('mystatus').innerHTML;\n      var username = document.getElementById('myusername').innerText;\n      channel.trigger(\"client-status-update\", {\n        username: username,\n        status: newStatus\n      });\n    }\n\n    // New Update Event Handler\n    // We will take the Comment Template, replace placeholders and append to commentsList\n    function statusUpdated(data){\n      var updatedMemberHtml = memberTemplateStr;\n          updatedMemberHtml = updatedMemberHtml.replace('{{username}}',data.username);\n          updatedMemberHtml = updatedMemberHtml.replace('{{status}}',data.status);\n          updatedMemberHtml = updatedMemberHtml.replace('{{time}}','just now');\n      document.getElementById(\"user-\"+data.username).style.color = '#1B8D98';    \n      document.getElementById(\"user-\"+data.username).innerHTML=updatedMemberHtml;\n      setTimeout(function(){\n        document.getElementById(\"user-\"+data.username).style.color = '#000';\n      },500);\n    }\n```\n***IMPORTANT***: When we run this code in our browsers, update the status and blur out of the status control, we will get an error in the JavaScript console for the Pusher library. To fix this, go to the console at Pusher.com website, go to settings and enable sending events from clients directly.\n\nWe can only send events from client sdirectly for Presence or Private channels - more information [here](https://pusher.com/docs/client_api_guide/client_events#trigger-events).\n\n```\nPusher : Error : {\n  \"type\":\"WebSocketError\",\n  \"error\":{\n    \"type\":\"PusherError\",\n    \"data\":\n      {\n        \"code\":null,\n        \"message\":\"To send client events, you must enable this feature in the Settings page of your dashboard.\"\n      }\n   }\n}\n```\n\n## Conclusion\n\nWe have built an application which will display all the online members for a particular presence channel and their updates. If any of the online user updates their status, every user will be notified about the updated status.\n\nThis component or code can be used for developing a social networking section in most of the web apps these days. It is an important use case where the user needs to know about other available participants. For example: an online classroom app can see the other participants and the status can correspond to any question any participant wants to ask the presenter.\n\n![social-network-javascript-demo](//images.contentful.com/1es3ne0caaid/4ZLuC0dzk44Cw8Q04a60Ya/bf8e90962701acda5f785ee00663cefd/social-network-javascript-demo.gif)\n\nWe have just used Node.js and Vanilla JavaScript to implement the above functionality. You can use the JavaScript for frontend code with any popular framework like React or Angular.js and for the backend can also be Java or Ruby. Please refer to the Pusher docs for more information on this.","metaTitle":"Build a simple social network with JavaScript","metaDescription":"Build an app similar to a group chat room where you can see who's online and their latest status update in realtime using Vanilla JavaScript and Node.js"}}],"defaultValue":"Social","queryType":"tag","pages":8,"route":"/tutorials","query":{"tag":"Social","page":"7"}}},"page":"/tutorials","query":{"tag":"Social","page":"7"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Social&page=7 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:45:46 GMT -->
</html>