<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Chat&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:37:51 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">33</span> tutorials for “<span class="css-npldjc ehwuahf2">Chat</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials7244.html?product=Channels&amp;tag=Chat" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialsaa59.html?product=Beams&amp;tag=Chat" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Chat"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/comments-sentiment-analysis-nextjs.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a comments widget with sentiment analysis using Next.js</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Learn to build a comments widget with Next.js. Use sentiment analysis to gauge the mood of the comments and automaticall...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/read-receipts-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build read receipts using Kotlin</h3><p class="css-k12xad e5jrto45">Discover how to build read receipts and integrate it in your Kotlin chat app.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/react-websockets.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Making React realtime with websockets</h3><p class="css-k12xad e5jrto45">Build a chat application using React and Pusher. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/typing-indicator-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">C#<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a typing indicator in ASP.NET</h3><p class="css-k12xad e5jrto45">Learn how to implement a typing indicator feature in your chat application using Pusher, .NET, C# code and some jQuery. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/user-status-update-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a user status update in Swift</h3><p class="css-k12xad e5jrto45">Create an iOS application with realtime user status updates, similar to WhatsApp.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/read-receipts-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build read receipts using Swift</h3><p class="css-k12xad e5jrto45">Create an iOS chat application with a message delivery status using Swift, Node.js and Pusher for realtime functionality...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/typing-indicator-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a typing indicator in Swift</h3><p class="css-k12xad e5jrto45">Build a typing indicator for you iOS app using Swift, Node.js and Pusher for the realtime features.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/anonymous-chat-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an anonymous chat app using ASP.NET</h3><p class="css-k12xad e5jrto45">Create a realtime public anonymous group chat app using C#, ASP.NET and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/read-receipts-django.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Django<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build read receipts using Django</h3><p class="css-k12xad e5jrto45">Create read receipts for your chat application with Django and Vue.js</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials0693.html?tag=Chat&amp;page=2" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialsf312.html?tag=Chat&amp;page=1" class="css-5s6711 edg0byb1">1</a><a href="tutorials0693.html?tag=Chat&amp;page=2" class="css-5s6711 edg0byb1">2</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials94e2.html?tag=Chat&amp;page=3" class="css-2wakph edg0byb1">3</a><a href="tutorials5798.html?tag=Chat&amp;page=4" class="css-5s6711 edg0byb1">4</a><a href="tutorials5798.html?tag=Chat&amp;page=4" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":33,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SM3ghMF0QiIu0sSsKyOYa","type":"Entry","createdAt":"2018-05-06T17:30:32.559Z","updatedAt":"2018-05-06T17:32:28.856Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a comments widget with sentiment analysis using Next.js","url":"comments-sentiment-analysis-nextjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/realtime-comments-react-demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-05-05","description":"Learn to build a comments widget with Next.js. Use sentiment analysis to gauge the mood of the comments and automatically add emoticons.","prerequisite":"You will need Node and npm or Yarn installed on your machine. Some knowledge of JavaScript will be helpful when following this tutorial.","content":"With the advent of the social media and other platforms that aim at connecting people, commenting has become an integral part of online activity. As a result, it is very common to see comment sections in most of the services we tend to use daily. Virtually every service that supports commenting functionality builds it to handle comments in realtime.\n\nIn this tutorial, we’ll build a very simple realtime comments widget with sentiments. With sentiment analysis, we will be able to detect the mood of a person based on the words they use in their comments.\n\nHere is a screenshot of what we will end up building in this tutorial.\n\n![comments-next-sentiment-demo](//images.ctfassets.net/1es3ne0caaid/4c4pdXhsJqOuwiugkwioqs/993ea12fb2184d8aebf659e3e8691f41/comments-next-sentiment-demo.png)\n\n\n## Prerequisites\n\nBefore you begin, ensure that you have Node and npm or Yarn installed on your machine. Here is a run-down of the core technologies we will be using.\n\n\n1. [**Next.js**](https://learnnextjs.com/) - A framework for building server-side rendered(SSR) React applications with ease. It handles most of the challenges that come with building SSR React apps.\n\n\n2. [**Pusher**](https://pusher.com/) - Pusher is a technology for building apps with varying realtime needs like push notifications and pub/sub messaging. It is the engine behind the realtime ability of our comments widget.\n\n\n3. [**Sentiment**](https://github.com/thisandagain/sentiment) - Sentiment is a module that uses the [AFINN-165](http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010) wordlist and [Emoji Sentiment Ranking](http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0144296) to perform [sentiment analysis](http://en.wikipedia.org/wiki/Sentiment_analysis) on arbitrary blocks of input text.\n\n\n4. [**React**](https://reactjs.org/) - A very popular JavaScript DOM rendering framework for building scalable web applications using a component-based architecture.\n\nA few other libraries will be used as we will see in a moment. Also ensure that you have [Node](https://nodejs.org/) installed on your machine.\n\n\n### Installing dependencies\n\nCreate a new directory for the application and run the following command to install the required dependencies for the app.\n\n```\n    # Create a new directory\n    mkdir realtime-comments-app\n    \n    # cd into the new directory\n    cd realtime-comments-app\n    \n    # Initiate a new package and install app dependencies\n    npm init -y\n    \n    npm install react react-dom next pusher pusher-js sentiment\n    npm install express body-parser cors dotenv axios\n    npm install --save-dev cross-env npm-run-all\n```\n\n### Setting environment variables\n\nCreate a new application on your [Pusher Dashboard](https://dashboard.pusher.com/) to get your application credentials. Create a `.env` file in the root directory of your application and add your application credentials as follows. \n\n```\n    PUSHER_APP_ID=YOUR_APP_ID\n    PUSHER_APP_KEY=YOUR_APP_KEY\n    PUSHER_APP_SECRET=YOUR_APP_SECRET\n    PUSHER_APP_CLUSTER=YOUR_APP_CLUSTER\n```\n\nEnsure that you use the same variable names as specified in the above snippet. We will refer to them at several points in our code.\n\nNext create a `Next` configuration file named `next.config.js` in the root directory of your application with the following content:\n\n``` javascript\n    /* next.config.js */\n    \n    const webpack = require('webpack');\n    require('dotenv').config();\n    \n    module.exports = {\n      webpack: config =\u003e {\n        const env = Object.keys(process.env).reduce((acc, curr) =\u003e {\n          acc[`process.env.${curr}`] = JSON.stringify(process.env[curr]);\n          return acc;\n        }, {});\n        \n        config.plugins.push(new webpack.DefinePlugin(env));\n        \n        return config;\n      }\n    };\n```\n\nSince `Next.js` uses [Webpack](https://webpack.js.org/) in the background for module loading and bundling, we are simply configuring `Webpack` to be able to provide the environment variables we have defined and make them available to our React components by accessing the `process.env` object.\n\n\n## Getting started\n\n### Setting up the server\n\nWe will go ahead and setup a simple server using Next.js to wrap an [Express](https://expressjs.com/) application server. We will also load the necessary middlewares for the Express server and then we will configure Pusher using the credentials we added to our environment variables.\n\nCreate a `server.js` file in the root directory of your application and add the following code snippet to it to set up the server:\n\n``` javascript\n    /* server.js */\n    \n    const cors = require('cors');\n    const next = require('next');\n    const Pusher = require('pusher');\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const dotenv = require('dotenv').config();\n    const Sentiment = require('sentiment');\n    \n    const dev = process.env.NODE_ENV !== 'production';\n    const port = process.env.PORT || 3000;\n    \n    const app = next({ dev });\n    const handler = app.getRequestHandler();\n    const sentiment = new Sentiment();\n    \n    // Ensure that your pusher credentials are properly set in the .env file\n    // Using the specified variables\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true\n    });\n    \n    app.prepare()\n      .then(() =\u003e {\n      \n        const server = express();\n        \n        server.use(cors());\n        server.use(bodyParser.json());\n        server.use(bodyParser.urlencoded({ extended: true }));\n        \n        server.get('*', (req, res) =\u003e {\n          return handler(req, res);\n        });\n        \n        server.listen(port, err =\u003e {\n          if (err) throw err;\n          console.log(`\u003e Ready on http://localhost:${port}`);\n        });\n        \n      })\n      .catch(ex =\u003e {\n        console.error(ex.stack);\n        process.exit(1);\n      });\n\n```\n\n### Modify npm scripts\n\nFinally, we will modify the `\"scripts\"` section of the `package.json` file to look like the following snippet:\n\n``` json\n    /* package.json */\n    \n    \"scripts\": {\n      \"dev\": \"node server.js\",\n      \"build\": \"next build\",\n      \"prod:server\": \"cross-env NODE_ENV=production node server.js\",\n      \"start\": \"npm-run-all -s build prod:server\"\n    }\n```\n\nWe have gotten all we need to start building our app components. If you run the command `npm run dev` on your terminal now, it will start up the application server on port `3000` if it is available. However, nothing happens on the browser yet, because we have not built any index page component. Let's start building the app components.\n\n\n## Building the index page\n\nNext.js requires that you create the page components of your app in a `pages` directory. We will go ahead and create a `pages` directory in our app root directory and create a new `index.js` file inside it for the index page of our application.\n\nIt is considered a good practice to have a layout that can be reused across multiple pages. It gives you a form of boilerplate and saves you from unnecessary repetitions.\n\nBefore we add content to the index page, we will build a `Layout` component that can be used in our app pages as a boilerplate. Go ahead and create a `components` directory in your app root directory. Create a new `Layout.js` file inside the just created `components`  directory with the following content:\n\n``` javascript\n    /* components/Layout.js */\n    \n    import React, { Fragment } from 'react';\n    import Head from 'next/head';\n    \n    const Layout = props =\u003e (\n      \u003cFragment\u003e\n        \u003cHead\u003e\n          \u003cmeta charSet=\"utf-8\" /\u003e\n          \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" /\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossOrigin=\"anonymous\" /\u003e\n          \u003ctitle\u003e{props.pageTitle || 'Realtime Comments'}\u003c/title\u003e\n        \u003c/Head\u003e\n        {props.children}\n      \u003c/Fragment\u003e\n    );\n    \n    export default Layout;\n```\n\nHere, we try not to do so much. We are simply using the `next/head` component to add meta information to the `\u003chead\u003e` of our pages. We have also added a link to the Bootstrap CDN file to add some default styling to our app. We are also setting the page title dynamically from props and rendering the page contents using `{props.children}`.\n\nNow let's go ahead and add content to the `pages/index.js` file we created earlier:\n\n``` javascript\n    /* pages/index.js */\n    \n    import React, { Component } from 'react';\n    import axios from 'axios';\n    import Layout from '../components/Layout';\n    \n    class IndexPage extends Component {\n    \n      state = { post: null }\n      \n      componentDidMount() {\n        axios.get('https://baconipsum.com/api/?type=meat-and-filler\u0026paras=4\u0026format=text')\n          .then(response =\u003e this.setState({ post: response.data }));\n      }\n      \n      render() {\n        return (\n          \u003cLayout pageTitle=\"Realtime Comments\"\u003e\n            \u003cmain className=\"container-fluid position-absolute h-100 bg-white\"\u003e\n              \u003cdiv className=\"row position-absolute w-100 h-100\"\u003e\n              \n                \u003csection className=\"col-md-8 d-flex flex-row flex-wrap align-items-center align-content-center border-right border-gray px-0\"\u003e\n                \n                  { this.state.post \u0026\u0026 \u003cdiv className=\"position-relative h-100\"\u003e\n                  \n                    \u003cdiv className=\"px-5 mt-5 pt-5 mx-5\"\u003e\n                      \u003cspan className=\"d-block px-5 mx-5 pt-5 h5 text-uppercase text-primary font-weight-bold mb-3\"\u003eEditor's Pick\u003c/span\u003e\n                      \u003cspan className=\"d-block px-5 mx-5 pb-5 h1 text-dark border-bottom border-gray\"\u003eGetting Started with Lorem Ipsum\u003c/span\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv className=\"d-block h-50 px-5 mt-5 pt-3 mx-5 position-relative\" style={{ overflowY: 'auto' }}\u003e\n                      \u003cspan className=\"d-block px-5 mx-5 text-secondary text-justify\" style={{ fontSize: '1rem', whiteSpace: 'pre-line' }}\u003e{ this.state.post }\u003c/span\u003e\n                    \u003c/div\u003e\n                    \n                  \u003c/div\u003e }\n                  \n                \u003c/section\u003e\n                \n                \u003csection className=\"col-md-4 position-relative d-flex flex-wrap h-100 align-items-start align-content-between bg-light px-0\"\u003e\u003c/section\u003e\n                \n              \u003c/div\u003e\n            \u003c/main\u003e\n          \u003c/Layout\u003e\n        );\n      }\n    };\n    \n    export default () =\u003e (\n      \u003cIndexPage /\u003e\n    );\n```\n\nWe created a component `IndexPage` for the index page of our app. We initialized the state of the component with an empty `post` property. The `post` property will contain the post body that will be displayed.\n\nAs you can see in the `componentDidMount()` method, we are fetching a random `lorem-ipsum-style` text by calling the [**BaconIpsum JSON API**](https://baconipsum.com/json-api/) ****and setting the state `post` property to the returned text.\n\nFinally, we simply render the `post` text when it has been set on the state. If we test the app in our browser now, with `npm run dev`, we should see a screen that looks like the following screenshot.\n\n![comments-next-sentiment-part-1](//images.ctfassets.net/1es3ne0caaid/7D0GyGjEQ0SoegE02Sscoi/7e54bfa89f6d2e3e652b74cf56802b0c/comments-next-sentiment-part-1.png)\n\n## Building the CommentsWidget component\n\nWe will go ahead and build the comments widget component. Create a new `CommentsWidget.js` file inside the `components` directory and add the following content:\n\n``` javascript\n    /* components/CommentsWidget.js */\n    \n    import React, { Component, Fragment } from 'react';\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    \n    class CommentsWidget extends Component {\n    \n      state = { comments: [], person: null }\n      \n      componentDidMount() {\n      \n        this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n          cluster: process.env.PUSHER_APP_CLUSTER,\n          encrypted: true\n        });\n        \n        this.channel = this.pusher.subscribe('post-comments');\n        \n        this.channel.bind('new-comment', ({ comment = null }) =\u003e {\n          const { comments } = this.state;\n          comment \u0026\u0026 comments.push(comment);\n          this.setState({ comments });\n        });\n        \n        this.pusher.connection.bind('connected', () =\u003e {\n          axios.post('/comments')\n            .then(response =\u003e {\n              const comments = response.data.comments;\n              this.setState({ comments });\n            });\n        });\n        \n      }\n      \n      componentWillUnmount() {\n        this.pusher.disconnect();\n      }\n      \n      render() {\n        return \u003cFragment\u003e\n        \n          \u003cdiv className=\"border-bottom border-gray w-100 px-2 d-flex align-items-center bg-white justify-content-between\" style={{ height: 90 }}\u003e\n            \u003ch2 className=\"text-dark mb-0 mx-4\"\u003eComments\u003c/h2\u003e\n            \u003cspan class=\"badge badge-pill badge-primary mx-4\" style={{ fontSize: '1.2rem' }}\u003e{ this.state.comments.length }\u003c/span\u003e\n          \u003c/div\u003e\n          \n        \u003c/Fragment\u003e\n      }\n    };\n    \n    export default CommentsWidget;\n```\n\nHere is a simple break down of what we've done:\n\n\n1. We first initialized the state to contain an empty `comments` array property and a null `person` property. The `comments` property will be populated with people’s comments as they come in. The `person` property will store the name of the person about to make a comment. When the component mounts, we set up a Pusher connection and `channel` subscription inside the `componentDidMount()` lifecycle method.\n\n\n2. You can see that we are subscribing to a Pusher channel called `post-comments`. We are then binding to the `new-comment` event on the channel, which is triggered when a new comment comes in. Next, we simply populate the state `comments` property by appending the new comment.\n\n\n3. Also, on the `componentDidMount()` method, we are binding to the `connected` event on the Pusher client, when it is freshly connected, to fetch all the previous comments from history by making a `POST /comments` HTTP request using the `axios` library. Afterwards, we populate the state `comments` property with the comments received in the response.\n\nTo keep things simple, we will use a predefined list of names that a person can choose from before making a comment. Each time the `CommentsWidget` component is rendered, we will show four random personas that the user can choose from.\n\nGo ahead and make changes to the `render()` method as shown in the following snippet. Ensure that you declare the constants before the `return` statement.\n\n``` javascript\n    /* components/CommentsWidget.js */\n    \n    render() {\n    \n      const people = [ 'Stephanie', 'John', 'Steve', 'Anna', 'Margaret', 'Felix', 'Chris', 'Jamie', 'Rose', 'Bob', 'Vanessa', '9lad', 'Bridget', 'Sebastian', 'Richard' ];\n      \n      const nameBadgeStyles = {\n        fontSize: '0.8rem',\n        height: 40,\n        borderRadius: 20,\n        cursor: 'pointer'\n      };\n      \n      const choosePersona = person =\u003e evt =\u003e this.setState({ person });\n      \n      const randomPeople = count =\u003e {\n        const selected = [];\n        let i = 0;\n        \n        count = Math.max(0, Math.min(count, people.length));\n        \n        while (i \u003c count) {\n          const index = Math.floor(Math.random() * people.length);\n          if (selected.includes(index)) continue;\n          ++i \u0026\u0026 selected.push(index);\n        }\n        \n        return selected.map(index =\u003e {\n          const person = people[index];\n          const className = 'd-block d-flex align-items-center text-center text-white bg-secondary font-weight-bold py-2 px-4 mr-3';\n          \n          return \u003cspan key={index} className={className} style={nameBadgeStyles} title={person} onClick={choosePersona(person)}\u003e{person}\u003c/span\u003e\n        });\n      };\n      \n      // return statement is here ....\n    }\n```\n\n\nAs you can see, we created a list of 15 personas that we will be choosing from. The `randomPeople()` function takes a `count` as its only argument - which is the number of random personas to pick from the initial list. It then uses `.map()` to create an array of `\u003cspan\u003e` elements for each picked persona and returns the array.\n\nNotice the `onClick` event handler for each `\u003cspan\u003e`. The `choosePersona(person)` function is used as the handler. It simply sets the `person` property in the state to the name of the chosen persona.\n\nNext, we will go ahead and render the random personas. Make the following changes to the `render()` method. The `return` statement should look like the following code snippet:\n\n``` javascript\n    /* components/CommentsWidget.js*/\n    \n    return \u003cFragment\u003e\n    \n      \u003cdiv className=\"border-bottom border-gray w-100 px-2 d-flex align-items-center bg-white justify-content-between\" style={{ height: 90 }}\u003e\n        \u003ch2 className=\"text-dark mb-0 mx-4\"\u003eComments\u003c/h2\u003e\n        \u003cspan class=\"badge badge-pill badge-primary mx-4\" style={{ fontSize: '1.2rem' }}\u003e{ this.state.comments.length }\u003c/span\u003e\n      \u003c/div\u003e\n      \n      \u003cdiv className=\"border-top border-gray w-100 px-4 d-flex flex-wrap align-items-center align-content-center bg-light\" style={{ height: 160 }}\u003e\n      \n        {\n          !this.state.person \u0026\u0026\n          \u003cspan className=\"text-dark py-2\" style={{ fontSize: '1.5rem', fontWeight: 500 }}\u003eChoose your Persona\u003c/span\u003e\n        }\n        \n        \u003cdiv className=\"w-100 py-2 pb-3 d-flex justify-content-start\"\u003e\n          {\n            this.state.person\n              ? \u003cspan className=\"d-block d-flex align-items-center text-center text-white bg-primary font-weight-bold py-2 px-4 mr-3\" style={nameBadgeStyles} title={this.state.person}\u003e{this.state.person}\u003c/span\u003e\n              : randomPeople(4)\n          }\n        \u003c/div\u003e\n        \n        {\n          this.state.person \u0026\u0026\n          \u003ctextarea className=\"form-control px-3 py-2\" onKeyUp={this.handleKeyUp} placeholder=\"Make a comment\" style={{ resize: 'none' }}\u003e\u003c/textarea\u003e\n        }\n        \n      \u003c/div\u003e\n      \n    \u003c/Fragment\u003e\n```\n\nAs you can see, we are doing some conditional rendering here based on `this.state.person`. When `this.state.person` is null, we render four random personas for the user to choose from by calling `randomPeople(4)`.\n\nWhen the user chooses a persona, we render a `\u003ctextarea\u003e` element for the user to enter a comment. We added an `onKeyUp` event handler to the `\u003ctextarea\u003e` to add the comment when you press the `enter` or `return` button.\n\nLet’s add the `handleKeyUp()` event handler to the `CommentsWidget` component as shown in the following snippet:\n\n``` javascript\n    /* components/CommentsWidget.js*/\n    \n    class CommentsWidget extends Component {\n      \n      handleKeyUp = evt =\u003e {\n        const value = evt.target.value;\n        \n        if (evt.keyCode === 13 \u0026\u0026 !evt.shiftKey) {\n          const { person } = this.state;\n          const comment = { person, comment: value, timestamp: +new Date };\n          \n          evt.target.value = '';\n          this.setState({ person: null }, () =\u003e axios.post('/comment', comment));\n        }\n      }\n      \n    }\n```\n\nOn the `handleKeyUp()` event handler, we construct a `comment` object containing the `person` making the comment (the selected persona), the `comment` itself, and then the `timestamp` for when the comment was made. Finally, we clean up the `\u003ctextarea\u003e`, reset the `person` property to `null` and then make a `POST /comment` HTTP request, passing the `comment` object we created as payload.\n\nLet's add the `CommentsWidget` component to our index page. Modify the `pages/index.js` file with the following changes.\n\n``` javascript\n    /* pages/index.js */\n      \n      import React, { Component } from 'react';\n      import axios from 'axios';\n      import Layout from '../components/Layout';\n    + import CommentsWidget from '../components/CommentsWidget';\n\nNext, update the `pages/index.js` file to render the `CommentsWidget` inside the `render()` method of the `IndexPage` component. Locate the last `\u003csection\u003e` element inside the `render()` method and modify it to look like this:\n\n\n    /* pages/index.js */\n    \n    \u003csection className=\"col-md-4 position-relative d-flex flex-wrap h-100 align-items-start align-content-between bg-light px-0\"\u003e\n      { this.state.post \u0026\u0026 \u003cCommentsWidget /\u003e }\n    \u003c/section\u003e\n```\n\nYou can reload the app now in your browser to see the changes. The app should look like the following screenshot.\n\n![comments-next-sentiment-part-2](//images.ctfassets.net/1es3ne0caaid/1lWSvzQ3w84GCoI8OWYCE2/218d8862173e947a67463d1aa089db0c/comments-next-sentiment-part-2.png)\n\n![comments-next-sentiment-part-3](//images.ctfassets.net/1es3ne0caaid/6dvE2MbYAwGiEi4wwaccIO/840a75f7e7d6464e3e266d5c8fd610d9/comments-next-sentiment-part-3.png)\n\n\n\n## Defining the comment routes\n\nFor now, nothing really happens when you try to make a comment. You don't see any comment or previous comments. This is because we have not implemented the two comment routes we are making requests to.\n\nWe will go ahead and create the `/comment` and `/comments` routes. Modify the `server.js` file and add the following just before the call to `server.listen()` inside the `then()` callback function.\n\n``` javascript\n    /* server.js */\n    \n    // server.get('*') is here ...\n    \n    const commentsHistory = { comments: [] };\n    \n    server.post('/comment', (req, res, next) =\u003e {\n      const { person = null, comment = '', timestamp = (+new Date) } = req.body;\n      const sentimentScore = sentiment.analyze(comment).score;  \n      const commentObject = { person, comment, timestamp, sentiment: sentimentScore };\n      \n      commentsHistory.comments.push(commentObject);\n      pusher.trigger('post-comments', 'new-comment', { comment: commentObject });\n    });\n    \n    server.post('/comments', (req, res, next) =\u003e {\n      res.json({ ...commentsHistory, status: 'success' });\n    });\n    \n    // server.listen() is here ...\n```\n\nFirst, we created a kind of in-memory store for our comments history, to store comments in an array. This is useful for new Pusher clients to fetch previous comments. Whenever the Pusher client makes a `POST` request to the `/comments` endpoint on connection, it gets all the previous comments in the returned response.\n\nOn the `POST /comment` route, we are fetching the comment payload from `req.body` through the help of the `body-parser` middleware we added earlier. We then use the `sentiment` module to calculate the overall sentiment score of the comment. Next, we reconstruct the `commentObject`, adding the `sentiment` property containing the sentiment score.\n\nFinally, we add the comment to the `commentsHistory`, and then trigger a `new-comment` event on the `post-comments` Pusher channel, passing the `commentObject` in the event data. **This does the realtime magic**.\n\nWe are just a few steps away from completing our application. So far, we are not yet rendering the comments on the view. Let's head on to that and finish this up.\n\n\n## Displaying the comments\n\nCreate a new `Comment.js` file inside the `components` directory and add the following content to it.\n\n``` javascript\n    /* components/Comment.js */\n    \n    import React, { Component } from 'react';\n    \n    class Comment extends Component {\n      render() {\n        const { text } = this.props;\n        \n        const commentStyle = {\n          fontSize: '0.9rem',\n          fontWeight: 500,\n          lineHeight: 1.5,\n          whiteSpace: 'pre-wrap'\n        };\n        \n        return \u003cdiv className=\"w-100 mx-4 d-flex\"\u003e\n          \u003cdiv className=\"w-100 px-2\"\u003e\n            \u003cspan className=\"d-block text-secondary\" style={commentStyle}\u003e{text}\u003c/span\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      }\n    }\n    \n    export default Comment;\n```\n\nThe `Comment` component is a very simple component requiring a `text` prop for the comment text. We simply render the comment `text` in the `render()` method and that’s all.\n\nFinally, we will modify the `components/CommentsWidget.js` file to render the comments from the state. Make the following changes to the `CommentsWidget` component.\n\nFirst add the following constants before the class definition of the `CommentsWidget` component. Each constant is an array of the code points required for a particular sentiment emoji. Also ensure that you import the `Comment` component.\n\n``` javascript\n    /* components/CommentsWidget.js */\n    \n    // Module imports here ...\n    import Comment from './Comment';\n    \n    const SAD_EMOJI = [55357, 56864];\n    const HAPPY_EMOJI = [55357, 56832];\n    const NEUTRAL_EMOJI = [55357, 56848];\n    \n    // Chat component class here ...\n```\n\nThen, add the following snippet between the two child `\u003cdiv\u003e` tags of the `\u003cFragment\u003e` we created earlier in the `render()`  method of the component.\n\n``` javascript\n    /* components/CommentsWidget.js */\n    \n    {/** COMMENT HEADER \u003cDIV\u003e HERE **/}\n    \n    \u003cdiv className=\"px-4 pb-4 w-100 d-flex flex-row flex-wrap align-items-start align-content-start position-relative\" style={{ height: 'calc(100% - 250px)', overflowY: 'scroll' }}\u003e\n      {\n        this.state.comments.map((comment, index) =\u003e {\n        \n          const mood = comment.sentiment \u003e 0 ? HAPPY_EMOJI : (comment.sentiment === 0 ? NEUTRAL_EMOJI : SAD_EMOJI);\n          \n          return (\n            \u003cFragment key={index}\u003e\n            \n              \u003cdiv className={`d-flex justify-content-start align-items-center w-100 font-weight-bold text-dark mt-4 pb-1 px-1`} style={{ fontSize: '0.9rem' }}\u003e\n                \u003cspan className=\"d-inline-block pr-1\" style={{ fontSize: '1.25rem' }}\u003e{String.fromCodePoint(...mood)}\u003c/span\u003e\n                \u003cspan className=\"align-middle\" style={{ lineHeight: '1.25rem' }}\u003e{comment.person || 'Anonymous'}\u003c/span\u003e\n              \u003c/div\u003e\n              \n              \u003cComment text={comment.comment} /\u003e\n              \n            \u003c/Fragment\u003e\n          );\n          \n        })\n      }\n    \u003c/div\u003e\n    \n    {/** COMMENT BOX \u003cDIV\u003e HERE **/}\n```\n\nLet's try to understand what this code snippet is doing. First, we are going through each `comment` object in the state `comments` array property. We use the `sentiment` score of the comment object to set the mood of the person making the comment to either `happy`, `sad` or `neutral` using the earlier defined constants.\n\nAlso notice how we are using the `String.fromCodePoint()` method added in ES6 to get the emoji from the code points we defined in our constants earlier. Finally, we render the `Comment` component with the comment passed in the `text` prop.\n\n**Bravo**. If you made it to this point, then you have successfully built a realtime comments widget with sentiment using Next.js and Pusher. Test the app now in your browser to see that everything works.\n\n\n## Conclusion\n\nIn this tutorial, we have been able to build a very simple comments widget sentiment using [Next.js](https://learnnextjs.com/)([React](https://reactjs.org/)), [Pusher](https://pusher.com/) and [Sentiment Node](https://github.com/thisandagain/sentiment) module. You can check the demo source code of this tutorial on [GitHub](https://github.com/christiannwamba/realtime-comments-react-demo).\n\nDo check the documentation for each technology we used in this project to learn more about other ways of using them. I duly hope that this tutorial is of help to you.\n\n","metaTitle":"Comments widget with sentiment analysis using Next.js","metaDescription":"This tutorial takes you through building a comments widget using Next.js. It adds sentiment analysis as a fun feature to auto-assign emoticons to a comment."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Qx8I5EmhOGu4eIAyAK2ie","type":"Entry","createdAt":"2018-03-05T16:13:45.181Z","updatedAt":"2018-03-05T16:13:45.181Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build read receipts using Kotlin","url":"read-receipts-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/Message-Delivery-Status-Feature-Using-Kotlin","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}}],"reviewDate":"2018-03-05","description":"Discover how to build read receipts and integrate it in your Kotlin chat app.","prerequisite":"A basic understanding of Kotlin and Node.js is needed to follow this tutorial.","content":"If you have ever used messaging services like iMessage, WhatsApp or Messenger you’ll notice that when you send a message, you get a ‘Delivered’ notice when the message is delivered. This helps improve engagement because knowing when the message hits the users device is just good information to have.\n\nIn this article, we will consider how to build a read receipts using the Kotlin and Pusher. We will be building a simple messaging application to demonstrate this feature.\n\nHere is a screen recording of the application we will be building in action:\n![read-receipts-kotlin-demo](//images.contentful.com/1es3ne0caaid/1JJHhEZQ28oGaYwSS6Iogi/763b2c65f2a2a1f95ed77103512b0af7/read-receipts-kotlin-demo.gif)\n\n# Prerequisites\n- Knowledge of the Kotlin programming language. \n- [Android Studio](https://developer.android.com/studio/archive.html) installed locally (version 3.0.1 or newer is recommended).\n- [Node.js and NPM](https://docs.npmjs.com/getting-started/installing-node) installed on your machine.\n- Basic knowledge of JavaScript.\n- A Pusher application. Create one [here](https://pusher.com).\n\nWhen you have all the requirements you can proceed with the tutorial.\n\n# Setting up a Node.js Backend\n\nFor our application, we need a server to trigger the messages and delivery status to the Pusher channel and events we subscribe to. For the backend, we will use the Express Node.js framework.\n\nCreate a new folder for your project, we will name ours **message-delivery-backend**. Open the empty folder, create a `package.json` file and paste this:\n\n```\n    {\n      \"name\": \"realtime-status-update\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\"\n      },\n      \"keywords\": [],\n      \"author\": \"\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.2\",\n        \"express\": \"^4.16.2\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nThis file contains dependencies needed by our server and some other key details for the server. \n\nNext, let’s create the `index.js` file:\n\n```\n    // Load packages\n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const app = express()\n    const Pusher = require('pusher');\n    \n    // Middleware\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // Temp Variables\n    var userId = 0;\n    var messageId = 0;\n    \n    // Pusher instance\n    var pusher = new Pusher({\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    \n    // POST: /message\n    app.post('/message', (req, res) =\u003e {\n        messageId++;\n        \n        pusher.trigger('my-channel', 'new-message', {\n            \"id\": messageId,\n            \"message\": req.query.msg,\n            \"sender\": req.query.sender,\n        }); \n    \n        res.json({id: messageId, sender: req.query.sender, message: req.query.msg})\n    })\n    \n    // POST: /delivered\n    app.post('/delivered', (req, res) =\u003e {\n        pusher.trigger('my-channel', 'delivery-status', {\n            \"id\": req.query.messageId,\n            \"sender\": req.query.sender,\n        }); \n        \n        res.json({success: 200})\n    })\n    \n    // POST: /auth\n    app.post('/auth', (req, res) =\u003e {\n        userId++;\n        res.json({id: \"userId\" + userId})\n    })\n    \n    // GET: /\n    app.get('/', (req, res, next) =\u003e res.json(\"Working!!!\"))\n    \n    // Serve application\n    app.listen(9000, _ =\u003e console.log('Running application...'))\n```\n\nIn the code above, we have the `messageId` variable to giver every message a unique ID and the `userId` variable to give every user a unique id. This will help us clearly distinguish messages and users so as to know when and where to place the delivery status tags under each message.\n\nYou are expected to add the keys from your dashboard into the above code replacing the `PUSHER_APP_*` values. \n\nOpen your terminal, and `cd` to the root directory of your project. Run the commands below to install the NPM packages and start our Node.js server:\n\n```\n    $ npm install\n    $ node index.js\n```\n\nWith this, our server is up and running on port **9000**.\n\n# Setting up the Android client\n## Creating a Project\n\nOpen Android studio, create a new project and fill in your application name and package name. It is recommended that your minimum SDK should not be less than API 14. Then, select an ‘Empty Activity’, name it `LoginActivity` and click finish.\n\n## Setting up Retrofit\n\n[Retrofit](https://github.com/square/retrofit) is a type-safe HTTP client that will enable us make requests to our node server. The first step in making this happen is adding the Retrofit dependency. In your app module `build.gradle` file, add the following to the dependencies list:\n\n```\n    implementation 'com.squareup.retrofit2:retrofit:2.3.0'\n    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'\n```\n\nSync the gradle files after adding the dependencies. Thereafter, we create an interface that provides the endpoints we will access during this demo. Create a new Kotlin class, name it `ApiService.kt` and paste this:\n\n```\n    import retrofit2.Call\n    import retrofit2.http.POST\n    import retrofit2.http.Query\n    \n    interface ApiService {\n    \n        @POST(\"/message\")\n        fun sendMessage(@Query(\"sender\") sender:String, @Query(\"msg\") message:String): Call\u003cString\u003e\n        \n        @POST(\"/delivered\")\n        fun delivered(@Query(\"sender\") sender:String, @Query(\"messageId\") messageId:String): Call\u003cString\u003e\n    \n        @POST(\"/auth\")\n        fun login(): Call\u003cString\u003e\n    }\n```\n\nIn the code above, we have interfaced our three endpoints. The first, `/message`, is where we will send the message to, `/delivered` where we will tell the server that a message with a particular `id` has delivered, and finally, `/auth` for a make-believe user login.\n\nNext, create a class that that will provide a Retrofit object to enable us make requests. Create a new Kotlin class named `RetrofitClient.kt`:\n\n```\n    import retrofit2.Retrofit\n    import okhttp3.OkHttpClient\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    \n    class RetrofitClient {\n    \n        companion object {\n            fun getRetrofitClient(): ApiService {\n                val httpClient = OkHttpClient.Builder()\n                val builder = Retrofit.Builder()\n                        .baseUrl(\"http://10.0.2.2:9000/\")\n                        .addConverterFactory(ScalarsConverterFactory.create())\n    \n                val retrofit = builder\n                        .client(httpClient.build())\n                        .build()\n                return retrofit.create(ApiService::class.java)\n            }\n        }\n    }  \n```\n\n\u003e We are using the `10.0.2.2` instead of `127.0.0.1` used for localhost because this is how the Android emulator recognizes it. Using `127.0.0.1` will not work.\n\nThat’s all for setting up the Retrofit client. Let’s move on to setting up Pusher.\n\n## Setting up Pusher\n\nPusher provides the realtime functionalities we need to know when a message has been delivered to another user. To use Pusher, we need to add the dependency in our app-module `build.gradle` file:\n\n```\n    implementation 'com.pusher:pusher-java-client:1.5.0'\n```\n\nSync the gradle files to make the library available for use. That’s all.\n\n\n## Designing Our Layouts\n\nOur app will have two screens. We already have the `LoginActivity` created. We need to create the second activity and name it `ChatActivity`. Our `LoginActivity` will have just one button to log the user in and its layout file `activity_login.xml` will look have this:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_margin=\"16dp\"\n        tools:context=\"com.example.android.messagedeliverystatus.LoginActivity\"\u003e\n        \u003cButton\n            android:layout_gravity=\"center\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/login\"\n            android:text=\"Anonymous Login\" /\u003e\n    \u003c/LinearLayout\u003e\n```\n\nThe `activity_chat.xml` will contain a `RecyclerView` and a `FloatingActionButton`. For these views to be available, you have to add the design support library in the `build.gradle` file:\n\n```\n    implementation 'com.android.support:design:26.1.0'\n```\n\nSync your gradle file to keep the project up to date. Next, paste this code in the `activity_chat.xml` file:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_margin=\"16dp\"\u003e\n    \n        \u003candroid.support.v7.widget.RecyclerView\n            android:layout_width=\"match_parent\"\n            android:id=\"@+id/recyclerView\"\n            android:layout_height=\"match_parent\"/\u003e\n    \n        \u003candroid.support.design.widget.FloatingActionButton\n            android:id=\"@+id/fab\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_margin=\"16dp\"\n            android:layout_alignParentBottom=\"true\"\n            android:layout_alignParentRight=\"true\"\n            app:srcCompat=\"@android:drawable/ic_input_add\"\n            android:layout_alignParentEnd=\"true\" /\u003e\n    \u003c/RelativeLayout\u003e\n```\n\nThe recycler view will contain the chat messages while the `FloatingActionButton` will open a dialog to help us add a new message. There are other things that go with a recycler view: a custom layout of how a single row looks like, an adapter that handles items on the list and sometimes a custom model class. \n\nThe model class mimics the data that each item in the list will have. So, we have to create these three things. Create a new layout named `custom_chat_row.xml` and paste this:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:orientation=\"vertical\"\n        android:layout_margin=\"16dp\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\u003e\n        \u003cTextView\n            android:textAppearance=\"@style/Base.TextAppearance.AppCompat.Medium\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            tools:text=\"Neo Ighodaro\"\n            android:id=\"@+id/message\" /\u003e\n        \u003cTextView\n            android:layout_below=\"@+id/message\"\n            android:textAppearance=\"@style/Base.TextAppearance.AppCompat.Small\"\n            tools:text=\"sent\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/delivery_status\" /\u003e\n    \u003c/RelativeLayout\u003e\n```\n\nEach row will be styled according to our layout above. There are two `TextView`s, one to show the main message and the other to show the delivery status which can either be send or delivered. Next, create a new file named `MessageAdapter.kt` and paste this:\n\n```\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.RelativeLayout\n    import android.widget.TextView\n    import java.util.*\n    \n    class MessageAdapter : RecyclerView.Adapter\u003cMessageAdapter.ViewHolder\u003e() {\n    \n        private var messages = ArrayList\u003cMessageModel\u003e()\n        \n        fun addMessage(message: MessageModel){\n            messages.add(message)\n            notifyDataSetChanged()\n        }\n    \n        override fun getItemCount(): Int {\n            return messages.size\n        }\n    \n        override fun onCreateViewHolder(parent: ViewGroup?, viewType: Int): ViewHolder {\n            return ViewHolder(\n                LayoutInflater.from(parent!!.context)\n                              .inflate(R.layout.custom_chat_row,parent, false)\n            )\n        }\n    \n        override fun onBindViewHolder(holder: ViewHolder?, position: Int) {\n            val params = holder!!.message.layoutParams as RelativeLayout.LayoutParams\n            val params2 = holder!!.deliveryStatus.layoutParams as RelativeLayout.LayoutParams\n    \n            if (messages[position].sender == App.currentUser){\n                params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT)\n                params2.addRule(RelativeLayout.ALIGN_PARENT_RIGHT)\n            }\n    \n            holder.message.text = messages[position].message\n            holder.deliveryStatus.text = messages[position].status\n        }\n    \n        inner class ViewHolder(itemView: View?): RecyclerView.ViewHolder(itemView) {\n            var message: TextView = itemView!!.findViewById(R.id.message)\n            var deliveryStatus: TextView = itemView!!.findViewById(R.id.delivery_status)\n        }\n    \n        fun updateData(id: String) {\n            for(item in messages) {\n                if (item.messageId == id) {\n                    item.status = \"delivered\"\n                    notifyDataSetChanged()\n                }\n            }\n        }\n    }\n```\n\nThe adapter handles the display of items. We used the overridden functions to structure how many items will be on the list, how each row should be styled, and how o get data from each row. We also created our own functions to add a new message to the list and update an item on the list. \n\nNext, create a new class named `MessageModel.kt` and paste this:\n\n```\n    data class MessageModel(var sender:String,\n                            var messageId:String,\n                            var message:String,\n                            var status:String)\n```\n\nThis is known as a data class. A data class is used to hold data. This replaces the usual POJO (Plain Old Java Object) classes we would have created if we were using Java. We will be using a dialog to send messages in this demo, so we need to create a layout for it. \n\nCreate a new layout file named `dialog_message.xml` and past this:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n        android:padding=\"16dp\"\n        android:layout_height=\"match_parent\"\u003e\n        \u003cEditText\n            android:id=\"@+id/edit_message\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\" /\u003e\n        \u003cButton\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/send\"\n            android:text=\"Send message\"/\u003e\n    \u003c/LinearLayout\u003e\n```\n\nThe layout contains an `EditText` for text input and a `Button` to send the message and they are wrapped in a vertical `LinearLayout`.\n\n\n## Adding logic to our application\n\nWe will create a class that extends `Application`. Create a new class named `App.kt` and paste this:\n\n```\n    import android.app.Application\n    \n    class App: Application() {\n        companion object {\n            lateinit var currentUser:String\n        }\n    }\n```\n\nThis class will be used to store our unique user ID globally so that it can easily be accessed by all other classes.\n\nNext, open the `LoginActivity.kt` class and paste this:\n\n```\n    import android.app.Activity\n    import android.content.Intent\n    import android.os.Bundle\n    import kotlinx.android.synthetic.main.activity_login.*\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class LoginActivity : Activity() {\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            \n            setContentView(R.layout.activity_login)\n    \n            login.setOnClickListener {\n                RetrofitClient.getRetrofitClient().login().enqueue(object: Callback\u003cString\u003e {\n                    override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n                        // Do something on failure\n                    }\n                    \n                    override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                        val jsonObject = JSONObject(response!!.body().toString())\n                        val currentUserId = jsonObject[\"id\"].toString()\n                        App.currentUser = currentUserId\n                        startActivity(Intent(this@LoginActivity, ChatActivity::class.java))\n                    }\n                })\n            }\n        }\n    }\n```\n\nIn this activity, we assigned a click listener to our button so when the button is clicked, a request is then made to the `/auth` endpoint of the server to log the user in. A unique user ID is returned to the client. After the ID is received, we store it in our `App` class and open the next activity, `ChatActivity`.\n\nNext, create a file called `ChatActivity.kt` and paste the following into the file:\n\n```\n    import android.os.Bundle\n    import android.support.design.widget.FloatingActionButton\n    import android.support.v7.app.AlertDialog\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import android.widget.Button\n    import android.widget.EditText\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_chat.*\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class ChatActivity: AppCompatActivity() {\n    \n        private lateinit var myUserId: String\n        private lateinit var adapter: MessageAdapter\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_chat)\n            myUserId = App.currentUser\n            setupRecyclerView()\n            setupFabListener()\n            setupPusher()\n        }\n    }\n```\n\nThis class is minimized into various functions for proper clarity. Before getting to the functions, we have a class variable which takes in the value of our unique user ID from the `App` class, this is for easy accessibility.  \n\nThe first function `setupRecyclerView()` is used to initialize the recycler view and its adapter. Add the function below to the class:\n\n```\n    private fun setUpRecyclerView() {\n        recyclerView.layoutManager = LinearLayoutManager(this)\n        adapter = MessageAdapter()\n        recyclerView.adapter = adapter\n    }\n```\n\nNext, we created a vertical layout manager and assigned it to our recycler view, we also initialized `MessageAdapter` and assigned it to the recycler view as well.\n\nThe next function, `setupFabListener()` is used to add a listener to the `FloatingActionButton`. Paste the function below into the same class:\n\n```\n    private fun setupFabListener() {\n        val fab: FloatingActionButton = findViewById(R.id.fab)\n        fab.setOnClickListener({\n            createAndShowDialog()\n        })\n    }\n```\n\nThe next function is `createAndShowDialog()`. Paste the function below into the same class:\n\n```\n    private fun createAndShowDialog() {\n        val builder: AlertDialog = AlertDialog.Builder(this).create()\n    \n        // Get the layout inflater\n        val view = this.layoutInflater.inflate(R.layout.dialog_message, null)\n        builder.setMessage(\"Compose new message\")\n        builder.setView(view)\n    \n        val sendMessage: Button = view.findViewById(R.id.send)\n        val editTextMessage: EditText = view.findViewById(R.id.edit_message)\n        sendMessage.setOnClickListener({\n    \n            if (editTextMessage.text.isNotEmpty())\n                RetrofitClient.getRetrofitClient().sendMessage(myUserId, editTextMessage.text.toString()).enqueue(object : Callback\u003cString\u003e {\n                    override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                        // message has sent\n                        val jsonObject = JSONObject(response!!.body())\n                        val newMessage = MessageModel(\n                                jsonObject[\"sender\"].toString(),\n                                jsonObject[\"id\"].toString(),\n                                jsonObject[\"message\"].toString(),\n                                \"sent\"\n                        )\n                        adapter.addMessage(newMessage)\n                        builder.dismiss()\n                    }\n    \n                    override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n                        // Message could not send\n                    }\n                })\n        })\n    \n        builder.show()\n    }\n```\n\nThis function builds a dialog and displays it for the user to enter a new message. When the send button on the dialog is clicked, the message entered is sent to the server through the `/message` endpoint. \n\nAfter the message is received, the server assigns a unique ID to the message then `Pusher` triggers data which contains the message just received together with its ID and the sender’s ID to the `new-message` event. \n\nMeanwhile, as soon as a message is sent, we add it to our recycler view and update the adapter using the `adapter.addMessage()` function.\n\nThe final function to add to the class is `setupPusher()` , this will initialize `Pusher` and listen for events. Paste the function below into the class:\n\n```\n    private fun setupPusher() {\n        val options = PusherOptions()\n        options.setCluster(\"PUSHER_APP_CLUSTER\")\n    \n        val pusher = Pusher(\"PUSHER_APP_KEY\", options)\n        val channel = pusher.subscribe(\"my-channel\")\n    \n        channel.bind(\"new_message\") { channelName, eventName, data -\u003e\n            val jsonObject = JSONObject(data)\n            val sender = jsonObject[\"sender\"].toString()\n    \n            if (sender != myUserId) {\n                // this message is not from me, instead, it is from another user\n                val newMessage = MessageModel(\n                        sender,\n                        jsonObject[\"id\"].toString(),\n                        jsonObject[\"message\"].toString(),\n                        \"\"\n                )\n                \n                runOnUiThread {\n                    adapter.addMessage(newMessage)\n                }\n    \n                // tell the sender that his message has delivered\n                RetrofitClient.getRetrofitClient().delivered(sender, jsonObject[\"id\"].toString()).enqueue(object : Callback\u003cString\u003e {\n                \n                    override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                        // I have told the sender that his message delivered\n                    }\n    \n                    override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n                        // I could not tell the sender\n                    }\n                })\n            }\n        }\n    \n        channel.bind(\"delivery-status\") { channelName, eventName, data -\u003e\n            val jsonObject = JSONObject(data)\n            val sender = jsonObject[\"sender\"]\n            \n            if (sender == myUserId) {\n                runOnUiThread {\n                    adapter.updateData(jsonObject[\"id\"].toString())\n                }\n            }\n        }\n    \n        pusher.connect()\n    }\n```\n\nIn the above snippets, we initialized `Pusher`, subscribed to a channel - `my-channel` and listened to events. We have two events: the first is `new_message` which enables us receive new messages. Since messages sent by us are already added to the list, we won’t add them here again. Instead, we only look for messages from other users hence the need for a unique user ID.\n\nWhen we receive messages from other users, we send a network call to the `/delivered` endpoint passing the message ID and the current sender’s ID as a parameter. The endpoint then triggers a message to the `delivery-status` event to alert the the sender at the other end that the message has been delivered. Note that from our server setup, each message also has a unique ID.\n\nThe second event we listen to is the `delivery-status` event. When we receive data in this event, we check the data received to see if the sender matches the current user logged in user and if it does, we send the message ID to our `updateData()` function. This function checks the list to see which message has the unique ID in question and updates it with “delivered”.\n\n# Conclusion\n\nIn this article, we have been able to demonstrate how to implement a  read receipt feature in Kotlin. Hopefully, you have picked up a few things on how you can use Pusher and Kotlin.","metaTitle":"Build read receipts using Kotlin","metaDescription":"In this tutorial, you will discover how to build read receipts using Kotlin and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2txXtpE7lCciQUc4M4GmyS","type":"Entry","createdAt":"2018-02-22T15:04:12.993Z","updatedAt":"2018-02-28T16:55:30.946Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Making React realtime with websockets","url":"react-websockets","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/react-pusher-getting-started","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}}],"reviewDate":"2018-01-15","description":"Build a chat application using React and Pusher. ","prerequisite":"A basic understanding of React and Node.js are needed to follow this tutorial.","content":"Every chat application requires real time functionality. This amongst other benefits allows interaction between users in different location(s). A chat application like this can be built to function on diverse platforms, be it mobile or web applications. \n\nIn this tutorial, I will be showing you how to build a chat application using [React](https://reactjs.org/) and [Pusher](https://pusher.com). This is a very simple application and it comes with functionality which will be showing some of the rich features of Pusher and how you can easily combine it with a modern library like React. \n\nPusher is a platform that allows developers to easily build an application with realtime features as quickly as possible. Pusher specialises in building realtime and scalable infrastructures for developers and is packaged with powerful features like client events, queryable API, Pub/Sub messaging and others.\n\nWe will explore Pusher as we proceed in this tutorial and leverage on the DOM manipulation, event driven and data-binding ability of React.\n\nA basic knowledge of JavaScript and React will be of advantage so as to effectively participate in this tutorial.\n\nA sneak peek into what we will build in this tutorial:\n\n![reactjs-websockets-demo](//images.contentful.com/1es3ne0caaid/1O7NDl5Hv6Wia6AGEoS6mE/b842dd7761b6a525a9005e70daefd227/making-reactjs-realtime-with-websockets-demo.gif)\n\n## Getting Started\n\nFor a hitch-free flow of procedures in this tutorial, we will begin by setting up the required credentials with Pusher. If you don’t have an account, [kindly create one](https://pusher.com/) . Once you are done, go ahead and create a new app from your dashboard. Don’t forget to take note of your `app_id`, `key`, `secret` and `cluster` as you will be required to use them later in this tutorial.\n\n\n## Create React-app\n\nTo quickly scaffold a React app, we will make use of the `create``-react-app` tool. This gives us easy access to the CLI tool that will be used to start building our chat application. \n\nIt is important that you have Node and npm installed on your machine.  Quickly follow this [link](https://nodejs.org/en/) to complete that, if you don’t have it already. To verify if you have Node and npm installed, open up the terminal and run the command below:\n\n```\n    npm -v \n    node -v\n```\n\nThe version for each one will be displayed, if they are installed. The latest versions are fine.\n\n\n## Installation\n\nNow, install create-react-app and also scaffold a new React app with the following commands: \n\n```\n    npm install -g create-react-app\n    \n    create-react-app react-pusher\n```\n\nOnce all the necessary files are installed, change directory into `react-``pusher` and start the application with:\n\n```\n    npm start\n```\n\nBy now, you should have a new tab opened in your default browser:\n\n![reactjs-websockets-first-run](//images.contentful.com/1es3ne0caaid/4pHsFx37gASYMaAyqwcYES/602097101ff4bb5e2b96fc98b3b0945c/making-reactjs-realtime-with-websockets-first-run.png)\n\nWe have successfully set up the front-end of the application, we will return to this very soon. Let’s proceed to setup the server application.\n\n## Node Server\n\nNode.js using the Express web framework will be used as our server application.  The server application, amongst other functions, will provide endpoints to send messages for our chat app so as to ensure interaction between users. There are number of dependencies required for the application server, so let’s install them immediately:\n\n```\n    npm install --save axios body-parser cors express pusher pusher-js\n```\n\nTo configure the entry point of the application, create a file called `server.js` and paste the code below into it:\n\n```\n    const Pusher = require('pusher');\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    \n    const app = express();\n    \n    app.use(cors());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use(bodyParser.json());\n    const pusher = new Pusher({\n      appId: 'APP_ID',\n      key: 'APP_KEY',\n      secret: 'APP_SECRET',\n      cluster: 'APP_CLUSTER',\n      encrypted: true\n    });\n    app.set('PORT', process.env.PORT || 5000);\n    \n    app.post('/message', (req, res) =\u003e {\n      const payload = req.body;\n      pusher.trigger('chat', 'message', payload);\n      res.send(payload)\n    });\n    \n    app.listen(app.get('PORT'), () =\u003e \n      console.log('Listening at ' + app.get('PORT')))\n```\n\nHere we initialised Pusher with the required credentials and then created an endpoint to process messages from the frontend of our application.\n\n## Building Components\n\nTo define a good application structure and fully see our chat app in action, lets create some components. In React, components can either be stateful or stateless depending on the functionality that it was created for. The common patter is to have state for container components only and pass those states to UI components as props.\n\nCreate components from the terminal with:\n\n```\n    touch ChatList.js ChatBox.js\n```\n\nand lastly their respective stylesheet:\n\n```\n    touch ChatList.css ChatBox.css\n```\n\nEach of the components’ logic need to be created. Lets do that now\n\n\n## ChatBox.js\n\nThis component contains the input field for accepting the users message and also displays a welcome message showing the username passed in from the parent component. Furthermore, `handleTextChange` is also passed from the parent component. This component is exported and configured like:\n\n```\n    import React from \"react\";\n    import './ChatBox.css';\n    export default ({ text, username, handleTextChange }) =\u003e (\n      \u003cdiv\u003e\n        \u003cdiv className=\"row\"\u003e\n        \u003cdiv className=\"col-xs-12\"\u003e\n          \u003cdiv className=\"chat\"\u003e\n            \u003cdiv className=\"col-xs-5 col-xs-offset-3\"\u003e\n              \u003cinput\n                type=\"text\"\n                value={text}\n                placeholder=\"chat here...\"\n                className=\"form-control\"\n                onChange={handleTextChange}\n                onKeyDown={handleTextChange}\n              /\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"clearfix\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003ch4 className=\"greetings\"\u003eHello, {username}\u003c/h4\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    );\n```\n\nThis component above is styled with imported stylesheet `ChatBox.css` :\n\n```\n    .greetings {\n        margin-top: 90px;\n        text-align: center;\n    }\n```\n\n## ChatList.js\n\nThis is responsible for displaying the list of chats inputted by each user. Added to it is the username and messages. This is also implemented as shown below and exported:\n\n```\n    import React from \"react\";\n    import \"./ChatList.css\";\n    import avatar from \"./avatar.png\";\n    export default ({ chats }) =\u003e (\n      \u003cul\u003e\n        {chats.map(chat =\u003e {\n          return (\n            \u003cdiv\u003e\n              \u003cdiv className=\"row show-grid\"\u003e\n                \u003cdiv className=\"col-xs-12\"\u003e\n                  \n                  \u003cdiv className=\"chatMessage\"\u003e\n                    \u003cdiv key={chat.id} className=\"box\"\u003e\n                      \u003cp\u003e\n                        \u003cstrong\u003e{chat.username}\u003c/strong\u003e\n                      \u003c/p\u003e\n                      \u003cp\u003e{chat.message}\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv className=\"imageHolder\"\u003e\n                    \u003cimg src={avatar} className=\"img-responsive avatar\" alt=\"logo\" /\u003e\n                  \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          );\n        })}\n      \u003c/ul\u003e\n    );\n```\n\nAnd the stylesheet `ChatList.css`:\n\n```\n    ul {\n      list-style-type: none;\n    }\n    .chat {\n      margin-top: 50px;\n    }\n    .chatMessage {\n      position: relative;\n      border: 1px solid #ccc;\n      border-radius: 5px;\n      margin: 20px auto;\n      width: 700px;\n      display: table;\n    }\n    .box {\n      background-color: #ffffff;\n      padding: 20px;\n      border-bottom: 1px solid #cccccc;\n    }\n    .imageHolder {\n      width: 50px;\n      height: 50px;\n      position: absolute;\n      top: 20px;\n      right: 50px;\n    }\n```\n\nWe have successfully completed the `ChatBox` and `ChatList` component. As far as the application is concerned, these modules are not yet available to be rendered in the parent app component yet.  To correct this, the `A``pp.js` file needs to be configured.\n\n## Parent Container Component (App.js)\n\nThis is regarded as the parent component. It ensures effective parent-child communication by passing props down to each child component. In App.js, a class named App is used to extend the React Component class and a constructor is defined with its properties and methods. In App.js required node modules and CSS file are imported with:\n\n```\n    import React, { Component } from 'react';\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    import ChatList from './ChatList';\n    import ChatBox from './ChatBox';\n    import logo from './logo.svg';\n    import './App.css';\n    ...\n```    \n\nNext a class that extends the Component class imported from the React module is created. Also defined in this class is the state variables. The `super()` method is also called whenever a child class is extended from a parent class. In this case, props is also passed as a parameter. The state variables in the app are created and defined in the constructor like this:\n\n```\n    ...\n    class App extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          text: '',\n          username: '',\n          chats: []\n        };\n      }\n      componentDidMount() {\n        ...\n      }\n      handleTextChange(e) {\n       ...\n      }\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n           ...\n          \u003c/div\u003e\n        );\n      }\n    }\n    ...\n```\n\nAfter defining the required state of the app, you can start subscribing to the Pusher channel and binding to the events emitted by your server:\n\n```\n     componentDidMount() {\n        const username = window.prompt('Username: ', 'Anonymous');\n        this.setState({ username });\n        const pusher = new Pusher('APP_KEY', {\n          cluster: 'APP_CLUSTER',\n          encrypted: true\n        });\n        const channel = pusher.subscribe('chat');\n        channel.bind('message', data =\u003e {\n          this.setState({ chats: [...this.state.chats, data], test: '' });\n        });\n        this.handleTextChange = this.handleTextChange.bind(this);\n      }\n      \n      handleTextChange(e) {\n        if (e.keyCode === 13) {\n          const payload = {\n            username: this.state.username,\n            message: this.state.text\n          };\n          axios.post('http://localhost:5000/message', payload);\n        } else {\n          this.setState({ text: e.target.value });\n        }\n      }\n```\n\nBringing it all together:\n\n```\n    render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cheader className=\"App-header\"\u003e\n              \u003cimg src={logo} className=\"App-logo\" alt=\"logo\" /\u003e\n              \u003ch1 className=\"App-title\"\u003eWelcome to React-Pusher Chat\u003c/h1\u003e\n            \u003c/header\u003e\n            \u003csection\u003e\n              \u003cChatList chats={this.state.chats} /\u003e\n              \u003cChatBox\n                text={this.state.text}\n                username={this.state.username}\n                handleTextChange={this.handleTextChange}\n              /\u003e\n            \u003c/section\u003e\n          \u003c/div\u003e\n        );\n      }\n```\n\nIn case you missed anything, you can find the complete App.js file [right here](https://github.com/christiannwamba/react-pusher-getting-started/blob/master/src/App.js).\n\n![reactjs-websockets-demo](//images.contentful.com/1es3ne0caaid/1O7NDl5Hv6Wia6AGEoS6mE/b842dd7761b6a525a9005e70daefd227/making-reactjs-realtime-with-websockets-demo.gif)\n\n## Conclusion\n\nThis article has covered the basic steps necessary to create a realtime chat application using React and Pusher. Moving forward, the concept demonstrated here can be built upon and extended to cater for any other realtime features you wish to build in your application. I hope you have found this tutorial helpful and feel free to improve on the code available [here](https://github.com/christiannwamba/react-pusher-getting-started) and drop comment(s) below, if any.","metaTitle":"Making React realtime with websockets","metaDescription":"Follow the steps you need to build a chat application using React and Pusher. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1jeVDH5XtgiCsga6e2kk8o","type":"Entry","createdAt":"2018-02-28T11:59:47.112Z","updatedAt":"2018-02-28T11:59:47.112Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a typing indicator in ASP.NET","url":"typing-indicator-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/Whos-Typing-In-.NET","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6xamBfB840ckYKOkIMm6sM","type":"Entry","createdAt":"2018-02-12T14:51:11.677Z","updatedAt":"2018-02-26T12:31:15.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"C#","url":"c-sharp","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-12-27","description":"Learn how to implement a typing indicator feature in your chat application using Pusher, .NET, C# code and some jQuery. ","prerequisite":"A basic understanding of ASP.NET and jQuery is needed to follow this tutorial.","content":"When building chat apps, knowing when the person you are chatting with is typing a message can improve the user experience. It gives you some feedback that you’re not alone in the conversation and a message is coming your way. In this tutorial, we will go through some simple steps to achieve this feature using C# .NET and Pusher.\n\nAt the end of this tutorial we will have something like this:\n\n![typing-indicator-aspnet-demo](//images.contentful.com/1es3ne0caaid/2h9vYP6DgE6ogoCGWYo0iC/373ee99c9759d752c7f4ae8de3c30e95/typing-indicator-aspnet-demo.gif)\n\nThis tutorial assumes prior knowledge of:\n- C#\n- .NET MVC and\n- JavaScript (jQuery)\n\nWhen you’re ready, let’s begin.\n\n## Setting up Our Project\n\nWe’ll be using [Visual Studio](https://www.visualstudio.com/), which is an IDE popularly used for building .NET projects. Visual Studio 2017 is free and available for popularly used Operating Systems. You can view installation details [here](https://www.visualstudio.com/).\n\nAfter installing Visual Studio, launch it and create a new project by clicking **New Project** from the dashboard. Following the **New Project** wizard we:\n  - Set C# as our language to use,\n  - Select .NET MVC Project as the template,\n  - Fill in the Project name e.g. HeyChat (any name would do),\n  - Fill in the Solution name i.e. application name (HeyChat or any name would do).\n\n![typing-indicator-aspnet-project-setup](//images.contentful.com/1es3ne0caaid/1W1rwWoPRKuYackWIoaKcC/ee799f944c1645065642a9b0c5279972/typing-indicator-aspnet-project-setup.gif)\n\n## Writing the server-side (C#) Code\n\nTo achieve a typing indicator, our chat app needs to be able to recognize who is typing at any given time. For this, we will add some limited form of identification. We’re not doing any authentication at all because this tutorial does not require it.\n\n\n\u003e 💡 For the purpose of this tutorial, we will assume this chat is open to all users and all that is required is that our user specifies their name on first entry.\n\n\n### Route definition\n\nWe can define some of the routes that we need to make this feature, which are:\n\n\n  - A home route which renders the first page that takes the user’s name.\n  - A login route which accepts a `POST` request of the user’s name.\n  - A chat route which renders the chat view.\n  \n\u003e 💡 We may need some other routes as we go along but this is enough for starters.\n\nTo add these routes, we open the `RouteConfig.cs` file in the  `App_Start` directory of our application. And in it, we add the routes we have defined.\n\n```\n    routes.MapRoute(\n        name: \"Home\",\n        url: \"\",\n        defaults: new { controller = \"Home\", action = \"Index\" }\n    );\n    \n    routes.MapRoute(\n        name: \"Login\",\n        url: \"login\",\n        defaults: new { controller = \"Login\", action = \"Index\" }\n    );\n    \n    routes.MapRoute(\n        name: \"ChatRoom\",\n        url: \"chat\",\n        defaults: new {controller = \"Chat\", action=\"Index\"}\n    );\n```\n\nUsing the **Home** route as a sample, the route definition states that `/` requests will be handled by the `HomeController` which is found in the `Controllers/HomeController.cs` file and the `Index` method of that controller. Next, we create the controllers we need.\n\n### Creating controllers and action methods\n\nTo create a new controller, right-click the **Controller** directory and select `Add → Controller`. In the resulting form, we type in the name of our controller and select the empty template.\n\n\u003e 💡 When our application is created, it includes a HomeController with an Index action method by default, so we’ll perform the above steps to create our LoginController and ChatController.\n\nIn our LoginController class, we create the Index action method specifying `[HttpPost]` at the top of the action method to indicate that it handles `POST` requests.\n\n```\n    public class LoginController : Controller\n    {\n        [HttpPost]\n        public ActionResult Index()\n        {\n          \n        }\n    }\n```\n\nThe Index action of the LoginController will receive the request payload, read the username from the payload and assign it to the current user session, then redirect our user to the chat page. When we add this to our action method we’ll have\n\n```\n    public class LoginController : Controller\n    {\n        [HttpPost]\n        public ActionResult Index()\n        {\n            string user = Request.Form[\"username\"];\n            if (user.Trim() == \"\") {\n                return Redirect(\"/\");\n            }\n            Session[\"user\"] = user;\n            return Redirect(\"/chat\");\n        }\n    }\n```\n\n\u003e 💡 In a real-world chat app, we would add the user to a database and mark the user as logged in for other users to see available chat options, but that is beyond the scope of this tutorial so adding to a session will suffice.\n\nIn our ChatController class, we will add the Index action method. The Index action of the ChatController will render our chat view and pass along the current user to the view.\n\n```\n    public class ChatController : Controller\n    {\n        public ActionResult Index()\n        {\n            if (Session[\"user\"] == null) {\n                return Redirect(\"/\");\n            }\n    \n            ViewBag.currentUser = Session[\"user\"];\n    \n            return View ();\n        }\n    }\n```\n\n\u003e 💡 By default, action methods handle `GET` requests so we will not need to add `[HttpGet]` to the top of our method. We’ve also added a simple check to prevent access to the chat page if there is no logged in user.\n\nLet’s not forget about our Home route. In the HomeController we’ll add the code to render the front page.\n\n```\n    public class HomeController : Controller\n    {\n        public ActionResult Index()\n        {\n            if ( Session[\"user\"] != null ) {\n                return Redirect(\"/chat\");\n            }\n    \n            return View();\n        }\n    }\n```\n\n\u003e 💡 We’ve also added a small check to prevent multiple logins in the same user session.\n\nAt this point, we’ve created the Controllers and methods to serve our views (which we haven’t created yet) so trying to run this will give you some errors! Let’s fix that.\n\n## Implementing the application’s views\n\nBased on the routes we’ve defined so far, we will need two views:\n  - The front page view with the login form - served by the `Index`action method of the `HomeController` class\n  - The chat view where the typing indicator feature will be seen - served by `ChatController`  class’  `Index` action method\n\n\n### Front page/log in page\n\nFor our front page, we create a page with a form consisting of a field to type in your username and a button to submit for login. Referring to our controller code:\n\n```\n    public class HomeController : Controller\n    {\n        public ActionResult Index()\n        {\n            if ( Session[\"user\"] != null ) {\n                return Redirect(\"/chat\");\n            }\n            return View();\n        }\n    }\n```\n\n\u003e 💡 The **View** function creates a view response which we return. When **View()** is invoked, C# looks for the default view of the calling controller class. This default view is the `index.cshtml` file found in the **Views** directory, in a directory with the same name as the Controller. \n\u003e i.e. The default view of the HomeController class will be the `Views/Home/index.cshtml`  file.\n\nTo create our `HomeController` default view, we:\n- Right-click on the Views directory and select `Add New Folder`,\n- Fill in **Home** as the folder name,\n- Right click the newly created **Home** folder and select `Add New View`,\n- Fill in the view name (in our case **index**), select `Razor` as the view engine and click ok.\n\nNow that we’ve created our front page view file, we’ll add the markup for the login form.\n\n```\n    \u003cdiv class=\"container\"\u003e\n      \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-5 col-md-offset-4\"\u003e\n          \u003cdiv class=\"panel panel-default\"\u003e\n            \u003cdiv class=\"panel-body\"\u003e\n              \u003cform action=\"/login\" method=\"post\" style=\"margin:0\"\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                  \u003cinput type=\"text\" name=\"username\" id=\"username\" \n                      placeholder=\"Enter Username\" class=\"form-control\" \n                      required minlength=\"3\" maxlength=\"15\" /\u003e\n                \u003c/div\u003e\n                \u003cbutton type=\"submit\" class=\"btn btn-primary btn-block\"\u003e\n                  Enter Chat\n                \u003c/button\u003e\n              \u003c/form\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n### The chat page\n\nWe’ll create the view for the chat page following the same steps as above but using `Chat` as our folder name rather than `Home`.\n\nIn the chat view, we add markup up to give us a sidebar of available users and an area for chatting.\n\n```\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n      \u003ctitle\u003epChat \u0026mdash; Private Chatroom\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" href=\"@Url.Content(\"~/Content/app.css\")\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n            @{\n                var currentUser = ViewBag.currentUser;\n            }\n        \u003c!-- Navigation Bar --\u003e\n        \u003cnav class=\"navbar navbar-inverse\"\u003e\n          \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"navbar-header\"\u003e\n              \u003ca class=\"navbar-brand\" href=\"#\"\u003epChat\u003c/a\u003e\n            \u003c/div\u003e\n            \u003cul class=\"nav navbar-nav navbar-right\"\u003e\n              \u003cli\u003e\u003ca href=\"#\"\u003eLog Out\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/div\u003e\n        \u003c/nav\u003e\n        \u003c!-- / Navigation Bar --\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-xs-12 col-md-3\"\u003e\n              \u003caside class=\"main\"\u003e\n                \u003cdiv class=\"row\"\u003e\n                  \u003cdiv class=\"col-xs-12\"\u003e\n                    \u003cdiv class=\"panel panel-default users__bar\"\u003e\n                      \u003cdiv class=\"panel-heading users__heading\"\u003e\n                        Online Users (1)\n                      \u003c/div\u003e\n                      \u003cdiv class=\"panel-body users__body\"\u003e\n                        \u003cul class=\"list-group\"\u003e\n                        @if( @currentUser == \"Daenerys\" ) {\n                            \u003cli class=\"user__item\"\u003e\n                                \u003cdiv class=\"avatar\"\u003e\u003c/div\u003e \u003ca href=\"#\"\u003eJon\u003c/a\u003e\n                            \u003c/li\u003e\n                        } else if( @currentUser == \"Jon\") {\n                            \u003cli class=\"user__item\"\u003e\n                                \u003cdiv class=\"avatar\"\u003e\u003c/div\u003e \u003ca href=\"#\"\u003eDaenerys\u003c/a\u003e\n                            \u003c/li\u003e\n                        }\n                        \u003c/ul\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/aside\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-xs-12 col-md-9 chat__body\"\u003e\n              \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-xs-12\"\u003e\n                  \u003cul class=\"list-group chat__main\"\u003e\n                    \u003cdiv class=\"row __chat__par__\"\u003e\n                      \u003cdiv class=\"__chat__ from__chat\"\u003e\n                        \u003cp\u003eDid you see Avery's sword???\u003c/p\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"row __chat__par__\"\u003e\n                      \u003cdiv class=\"__chat__ receive__chat\"\u003e\n                        \u003cp\u003eErr Looked normal to me...\u003c/p\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"row __chat__par__\"\u003e\n                      \u003cdiv class=\"__chat__ receive__chat\"\u003e\n                        \u003cp\u003emaybe I'm a hater\u003c/p\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"row __chat__par__\"\u003e\n                      \u003cdiv class=\"__chat__ from__chat\"\u003e\n                        \u003cp\u003eLmaooo\u003c/p\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/ul\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"chat__type__body\"\u003e\n                  \u003cdiv class=\"chat__type\"\u003e\n                    \u003ctextarea id=\"msg_box\" placeholder=\"Type your message\"\u003e\u003c/textarea\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"chat__typing\"\u003e\n                  \u003cspan id=\"typerDisplay\"\u003e\u003c/span\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"@Url.Content(\"~/Content/app.js\")\"\u003e\u003c/script\u003e\n        \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe’re using the [razor template engine](https://en.wikipedia.org/wiki/ASP.NET_Razor), which gives us the ability to read data passed from the C# code and assign them to variables that can be used in our frontend. Using `@{ var currentUser = ViewBag.currentUser }` we have passed in the name of the current user which will come in handy shortly.\n\n\u003e 💡 To keep things quick and simple we have assumed there are only two possible users: **Daenerys** or **Jon**. So using the razor `@if{ }` condition we are showing who is available to chat with.\n\nNow that we have our views in place we can move on to our typing indicator feature!\n\n## Implementing the typing indicator\n### Listening for the typing event\n\nOn most chat applications, the feature becomes visible when someone is typing, so to implement we’ll start off by listening to the typing event in the chat text area using jQuery. We'll also pass the `currentUser` variable we defined earlier with razor to our script.\n\n```\n    var currentUser = @currentUser;\n          \n    $('#msg_box').on('keydown', function () {\n      //stub\n    });\n```\n\nWe added a listener to the  `keydown` event on our typing area to help us monitor when someone is typing.\n\nNow that we’ve created our listeners, we’ll make our listeners send a message that someone is typing to the other members of the chat. To do this, we’ll create an endpoint in our C# code to receive this request and broadcast it via Pusher. \n\nWe’ll implement all the client code (assuming that our C# endpoint exists, then we’ll actually create the endpoint later).\n\n\n\u003e 💡 To prevent excessive requests to our C# code i.e. sending a request as every key on the keypad is pressed or released, we’ll throttle the sending of the requests using a debounce function. This debounce function just ignores a function for a while if it keeps occurring.\n\n```\n    // Debounce function\n    // Credit: https://davidwalsh.name/javascript-debounce-function\n    \n    // Returns a function, that, as long as it continues to be invoked, will not\n    // be triggered. The function will be called after it stops being called for\n    // N milliseconds. If `immediate` is passed, trigger the function on the\n    // leading edge, instead of the trailing.\n    function debounce(func, wait, immediate) {\n        var timeout;\n        return function() {\n            var context = this, args = arguments;\n            var later = function() {\n                timeout = null;\n                if (!immediate) func.apply(context, args);\n            };\n            var callNow = immediate \u0026\u0026 !timeout;\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n            if (callNow) func.apply(context, args);\n        };\n    };\n```\n\nNow that we have a **debounce** function we’ll create the callback function for our `keydown` event:\n\n```\n    var isTypingCallback = debounce( function() {\n        $.post('/chat/typing', {\n            typer: currentUser,\n        });\n    }, 600, true);\n```\n \n and pass the callback to our event listeners.\n \n```\n    $('#msg_box').on('keydown',isTypingCallback);\n```\n\n### Creating the endpoint triggered by the typing event\n\nEarlier, we had our event listeners send a **POST** request to the `/chat/typing` Route on the client side. Now we’ll create this Route, which will transmit the typing event to other client users using [Pusher](http://pusher.com). \n\nFirst, we’ll create the route for the endpoint in our `RouteConfig.cs` file.\n\n```\n    ...\n    routes.MapRoute(\n        name: \"UserTyping\",\n        url: \"chat/typing\",\n        defaults: new { controller = \"Chat\", action = \"Typing\" }\n    );\n```\n\n\u003e 💡 We’ve created this endpoint to be handled by the **Typing** action method of the **ChatController**\n\nNext, we’ll create our Typing action method in the `ChatController`:\n\n```\n    [HttpPost]\n    public ActionResult Typing()\n    {\n        //stub\n    }\n```\n\n### Using Pusher to make our application update in realtime\n\nOur `/``chat``/``typing` endpoint will receive a post payload of the user who is doing the typing. We’re going to use [Pusher](http://pusher.com) to transmit this to everyone else.\n\nOn our Pusher [dashboard](https://dashboard.pusher.com/), we’ll create a new app filling out the information requested i.e. App name, frontend tech, etc. You can [register for free](https://pusher.com/) if you haven’t got an account. Next, we’ll install the **Pusher Server** package in our C# code using NuGet, a packer manager for .NET.\n\n![typing-indicator-aspnet-add-packages](//images.contentful.com/1es3ne0caaid/5ZUDKcS91uo602ok6iA2ea/a81d8764472938024ff247dd1c92f68e/typing-indicator-aspnet-add-packages.gif)\n\n\u003e 💡 To install the package we right-click the **Packages** directory; Select the **add Package option** and select the **Pusher Server** package.\n\nThen we’ll add the Pusher broadcasting to our **Typing** action event. To use Pusher we’ll have to import the **Pusher Server** namespace in our code.\n\n```\n    ...\n    using PusherServer;\n    \n    namespace HeyChat.Controllers\n    {\n        public class ChatController : Controller\n        {\n          ...\n    \n          [HttpPost]\n          public ActionResult Typing()\n          {\n              string typer        = Request.Form[\"typer\"];\n              string socket_id    = Request.Form[\"socket_id\"];\n          \n              var options = new PusherOptions();\n              options.Cluster = \"PUSHER_APP_CLUSTER\";\n          \n              var pusher = new Pusher(\n              \"PUSHER_APP_ID\",\n              \"PUSHER_APP_KEY\",\n              \"PUSHER_APP_SECRET\", options);\n          \n              pusher.TriggerAsync(\n              \"chat\",\n              \"typing\",\n              new { typer = typer },\n              new TriggerOptions() { SocketId = socket_id });\n          \n              return new HttpStatusCodeResult(200);\n          } \n        ...\n```\n\nWe initialized Pusher using our **PUSHER_APP_ID**, **PUSHER_APP_KEY**, **PUSHER_APP_SECRET**, and **PUSHER_APP_CLUSTER** (be sure to replace these with the actual values from your dashboard); and then broadcast an object containing the* **typer** - which is the person typing - on the* `typing` event via the `chat` channel.\n\n\u003e 💡 We’ve added  `new TriggerOptions() { SocketId = socket_id }` to our Pusher **triggerAsync** function. This is to prevent the sender of the broadcast from receiving the broadcast as well. To do this we’ve assumed we’re receiving `socket_id` in our payload along with `typer`, so on our client side, we’ll add it to the payload sent.\n\nNow, whenever there’s a typing event our C# code broadcasts it on Pusher, all that is left is to listen to that broadcast and display the ‘xxxx is typing…’ feature.\n\nFirst, we’ll initialize Pusher in the script section of our chat page using our **PUSHER_APP_KEY** and **PUSHER_APP_CLUSTER** (once again replace these with the values from your dashboard).\n\n```\n    var pusher = new Pusher('PUSHER_APP_KEY', {\n        cluster:'PUSHER_APP_CLUSTER'\n    });\n```\n\nTo implement the broadcaster exemption we mentioned earlier, we’ll get the socket id from our client `pusher` instance and amend our payload for the typing request to the server to include it.\n\n```\n    var socketId = null;\n    pusher.connection.bind('connected', function() {\n      socketId = pusher.connection.socket_id;\n    });\n    \n    var isTypingCallback = debounce( function() {\n        $.post('/chat/typing', {\n            typer: currentUser,\n            socket_id: socketId // pass socket_id parameter to be used by server\n        });\n    }, 600, true);\n```\n\nNow that Pusher is initialized on our client side, we’ll subscribe to the chat channel and implement our feature using the `typer` passed.\n\n```\n    var channel = pusher.subscribe('chat');\n    \n    channel.bind('typing', function(data) {\n        $('#typerDisplay').text( data.typer + ' is typing...');\n        \n        $('.chat__typing').fadeIn(100, function() {\n            $('.chat__type__body').addClass('typing_display__open');\n        }).delay(1000).fadeOut(300, function(){\n            $('.chat__type__body').removeClass('typing_display__open');\n        });\n    });\n```\n\n## Conclusion\n\nIn this tutorial, we’ve walked through implementing the popular a typing indicator feature using Pusher, .NET, C# code and some jQuery. We’ve also seen how to broadcast messages and avoid the sender responding to a message it sent. ","metaTitle":"Build a typing indicator in ASP.NET","metaDescription":"Learn how to implement a typing indicator feature  in your chat app using Pusher, .NET, C# code and jQuery. Broadcast messages and manage responses correctly."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1BUhApV5HiM4QEssCU2m8s","type":"Entry","createdAt":"2018-02-22T15:02:41.414Z","updatedAt":"2018-02-28T13:05:55.791Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a user status update in Swift","url":"user-status-update-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-ios-status-update","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2017-10-05","description":"Create an iOS application with realtime user status updates, similar to WhatsApp.","prerequisite":"A good knowledge of Swift and a basic understanding of JavaScript are needed to follow this tutorial.","content":"When building chat applications, it is not uncommon to see something like a friends’ list with the status of the friend. Applications like WhatsApp have this feature and it is very useful to check the status of your friend and know if it is wise to send them a message at that point.\n\nWe are going to be building a similar feature in a make-believe iOS chat application. We are going to be using [Pusher](https://pusher.com) to implement realtime features to the application so that when someone posts a new status update you can see it change in realtime.\n\nHere is a screen recording of how our application will look when we are done.\n\n![user-status-update-swift-demo](//images.contentful.com/1es3ne0caaid/45c2mCELhCY0MqasmiEcww/36df51c7c75bc3fa1d80fc98b78c548a/user-status-update-swift-demo.gif)\n\n## Getting our project ready\n\nTo get started, we need to create the iOS project and then install some dependencies that’ll be needed for the application to function correctly. Let us begin.\n\n### Setting up our project in Xcode\n\nLaunch Xcode on your machine and create a new project. Create a single application project and follow the wizard until you get to the main storyboard. Once you are there, exit Xcode.\n\nIn your terminal, `cd` to the Xcode project directory and then run the command below:\n\n```\n    $ pod init\n```\n\nThis will create a `Podfile` inside the root of your application. The Podfile is where we will define Cocoapods dependencies. Open in your text editor and replace with the following:\n\n```\n    platform :ios, '8.4'\n    \n    target 'project_name' do\n      use_frameworks!\n      pod 'PusherSwift', '~\u003e 4.0'\n      pod 'Alamofire', '~\u003e 4.4'\n    end\n```\n\nIn the above, we have just specified the dependencies we want CocoaPods to install into our application. Do not forget to substitute the *project_name*  for your actual project name.\n\nNow go to the terminal and run the command:\n\n```\n    $ pod install\n```\n\nThis should install all of the dependencies and libraries we have specified in our `Podfile`. Great! Finally, open the project directory and double-click the `.xcworkspace` file in the directory to launch your project workspace in Xcode.\n\n## Creating the User Interface of our realtime iOS application\n\nNow that we have created the project in Xcode and have successfully installed all the dependencies, the next thing we will want to do is create the user interface of our iOS application. Open the `main.storyboard` file in Xcode and let’s start designing the UI.\n\nThis is what we want to have at the end of this section:\n\n![user-status-update-swift-ui](//images.contentful.com/1es3ne0caaid/1MXWYD0FhusWmOum0MgASO/d8f41a237a06c6be7cbac1666fa15cc2/user-status-update-swift-ui.png)\n\nAdd a Navigation Controller in your canvas and make it the root view controller. When you have done this, you then need to update the `TableViewController` attached to the Navigation Controller. \n\nFirst, create a new class in Xcode using `ctrl+n`; the class name should be `FriendsViewController` and it should extend `UITableViewController`. Then, in the `main.storyboard` file, make sure you make the `TableViewController`  use the `FriendsViewController` as its custom class.\n\n![user-status-update-swift-customclass](//images.contentful.com/1es3ne0caaid/4FMHQURO52MAecQ0CIeSmG/40a1085f2b4d1fa5b8e202ef35a78f4e/user-status-update-swift-customclass.png)\n\n### Configuring the prototype cells\n\nNow that we have created the table view controller, we need to configure its cells to match what we are trying to achieve. \n\nClick on “Prototype Cells” on the main storyboard file and make the attributes inspector look something close to the image below. \n\n\u003e 💡 **For the image**  `**avatar.png**`**, you can add a 45x45 pixel image to your Xcode project and use that as the image for the cell.**\n\n![user-status-update-swift-table-view-cell](//images.contentful.com/1es3ne0caaid/YpC4JFoP8kKGyk8KigmKE/ea9c7a48bbc1c2a40663a4ed817f5c77/user-status-update-swift-table-view-cell.png)\n\nOne last thing we can do (which is completely optional) is changing the navigation bar color for our application. Let’s do that.\n\nOpen the `AppDelegate` class and in the `application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?)` method paste the following:\n\n```\n    UINavigationBar.appearance().barTintColor = UIColor(red: 18.0/255.0, green: 140.0/255.0, blue: 126.0/255.0, alpha: 1.0)\n    UINavigationBar.appearance().tintColor = UIColor.white\n    UINavigationBar.appearance().titleTextAttributes = [NSForegroundColorAttributeName: UIColor.white]\n```\n\nWith this, you have finished creating the UI for the application and all that is left is the functionality to support it. Let us do that now.\n\n\n## Creating the functionality of our realtime iOS application\n\nFor the functionality, we will divide it into two parts. The first part will focus on adding the functionality for updating the status, and the second part will focus on making the updates realtime.\n\n### Creating the initial functionality: Update status\nLets open `FriendsViewController` and make some modifications. The first modification will be adding an update “Status” button to the top right corner of the navigation bar. \n\nInside the `viewDidLoad` method of the controller, add the code below:\n\n```\n    navigationItem.title = \"Friends List\"\n    navigationItem.rightBarButtonItem = UIBarButtonItem(\n        title: \"Status\",\n        style: .plain,\n        target: self,\n        action: #selector(showPopup(_:))\n    )\n```\n\nThe code above simply sets the title of the controller in the navigation bar and adds a button to the right side of the navigation bar. \n\nIf you notice, in the `action` parameter it points to a method `showPopup` so let us create this method. Add this method to the controller:\n\n```\n    public func showPopup(_ sender: Any) {\n        let alertController = UIAlertController(\n            title: \"Update your status\",\n            message: \"What would you like your status to say?\",\n            preferredStyle: .alert\n        )\n        \n        alertController.addTextField(configurationHandler: {(_ textField: UITextField) -\u003e Void in\n            textField.placeholder = \"Status\"\n        })\n    \n        alertController.addAction(UIAlertAction(title: \"Update\", style: .default, handler: {(_ action: UIAlertAction) -\u003e Void in\n            let status = (alertController.textFields?[0].text)! as String\n            self.postStatusUpdate(message: status)\n        }))\n    \n        alertController.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n        \n        present(alertController, animated: true, completion: nil)\n    }\n```\n\nSo what we did here is, when the action is called and the `showPopup` method is invoked, the application will display a popup box that asks the user to input their status.\n\nRight now, the popup calls a method `postStatusUpdate` which does not exist in our application. Let us create this method now.\n\nIn the view controller, add the method below:\n\n```\n    public func postStatusUpdate(message: String) {\n        let params: Parameters = [\"username\": username, \"status\": message]\n        \n        Alamofire.request(FriendsViewController.API_ENDPOINT + \"/status\", method: .post, parameters: params).validate().responseJSON { response in\n            switch response.result {\n                \n            case .success:\n                _ = \"Updated\"\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n```\n\nIn this method, we are using the `Alamofire` library to make a request to an endpoint `FriendsViewController.API_ENDPOINT + \"/status``\"` (which does not yet exist). Right now, because we have not imported the Alamofire library nor defined `FriendsViewController.API_ENDPOINT` we will get errors.\n\nAt the top of the view controller, import the `Alamofire` library:\n\n```\n    import 'Alamofire'\n```\n\nAlso, inside the class, after the class definition, add the following to declare the `API_ENDPOINT` which will point to the remote HTTP server.\n\n```\n    static let API_ENDPOINT = \"http://localhost:4000\";\n```\n\n\u003e 💡  **The endpoint we are using now is a local server which will be created later on in the article. If you are using a remote server, you will need to replace this value with the URL of your server.**\n\nSo, right now, when you run the application and click the “Status” button it will bring a popup and you can enter your update. However, because we have not yet created a backend to respond to this call, it will fail and not do anything. We will get to that later in the article.\n\n### Updating the default table view controller methods\nThe table view controller comes with some methods by default, and we will quickly change them to fit our application.\n\nOpen the view controller and update the method `numberOfSections`. Make the return value 1. This will make sure that the first and only section is displayed.\n\nNext, update the `tableView(tableView: UITableView, numberOfRowsInSection: section)` method and make the return value `friends.count`. This will make sure that the right amount of rows are created for each entry on the `friends` list.\n\nTo make the cells display the details of each friend, update the contents of the `tableView(tableView:UITableView, cellForRowAt indexPath:IndexPath)` method with the code below:\n\n```\n    let cell = tableView.dequeueReusableCell(withIdentifier: \"friends\", for: indexPath)\n    \n    var status   = friends[indexPath.row][\"status\"]\n    \n    if status == \"\" {\n        status = \"User has not updated status!\"\n    }\n    \n    cell.detailTextLabel?.textColor = UIColor.gray\n    \n    cell.imageView?.image = UIImage(named: \"avatar.png\")\n    cell.textLabel?.text = friends[indexPath.row][\"username\"]\n    cell.detailTextLabel?.text = status\n    \n    return cell\n```\n\nThe code above simply gets the current cell and updates the required cell labels with the status, username and image (in case you want to add another image).\n\nFinally, add a new method to the view controller:\n\n```\n    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -\u003e CGFloat {\n        return 75.0\n    }\n```\n\nThis will just increase the row height of the table to be equal to **75.0**. This will make it easier to accommodate the contents of the cell.\n\n## Using Pusher to add a realtime update status to our iOS application\n\nNow, before we add the realtime online status updates using Pusher, we want to add some sort pseudo friends listing.\n\nWe will do the friends listing using Pusher. We will accomplish this by creating a class property that is not persistent, and in this variable, we will store details of anyone that comes online.\n\n### Adding a pseudo friends list\nIn the view controller, add some new properties:\n\n```\n    var friends : [[String:String]] = []\n    var username : String = \"\"\n    var pusher : Pusher!\n```\n\nThe `friends` property will store all the users who come online, the `username` property will store a random username for the current user, and the `pusher` property will store the Pusher library instance.\n\nNow, in the `viewDidLoad` method, add the following code:\n\n```\n    username = \"Anonymous\" + String(Int(arc4random_uniform(1000)))\n    \n    listenForRealtimeEvents()\n    \n    // --- Update online presence at intervals --- //\n    let date = Date().addingTimeInterval(0)\n    let timer = Timer(fireAt: date, interval: 1, target: self, selector: #selector(postOnlinePresence), userInfo: nil, repeats: true)\n    RunLoop.main.add(timer, forMode: RunLoopMode.commonModes)\n```\n\nOn line 1, we just assign the `username` property a random string as a username. \n\nOn line 3, we call a method `listenForRealtimeEvents` that does not yet exist (we will create this later). \n\nAnd on line 6 - 8, we just basically added a looping call to the `postOnlinePresence` (also doesn’t exist yet). This call will basically update your online presence every second.\n\nLet us create the `listenForRealtimeEvents` method now. Add the following code to the view controller:\n\n```\n    private func listenForRealtimeEvents() {\n        pusher = Pusher(key: \"PUSHER_KEY\", options: PusherClientOptions(host: .cluster(\"PUSHER_CLUSTER\")))\n        \n        let channel = pusher.subscribe(\"new_status\")\n        let _ = channel.bind(eventName: \"online\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String: AnyObject] {\n                let username = data[\"username\"] as! String\n                \n                let index = self.friends.index(where: { $0[\"username\"] == username })\n                \n                if username != self.username \u0026\u0026 index == nil {\n                    self.friends.append([\"username\": username, \"status\": \"No Status\"])\n                    self.tableView.reloadData()\n                }\n            }\n        })\n        \n        pusher.connect()\n    }\n```\n\nIn the method we just created, we just instantiated the Pusher library with our Pusher key and application cluster. Then we subscribed to a Pusher channel called **new_status** and, on that channel, we started listening for the event called **online.**\n\nIn the callback, when the event listener is triggered, we get the username from the event. We then check if there is username in the list of `friends` that matches. If there isn’t, we append it to the friends’ list and reload the table data.\n\nSo, in summary, every time someone comes online it appends the name to the friends’ list and reloads the table view.\n\nNext, we will create the method `postOnlinePresence` that will periodically post the current users online presence so others can pick it up. In the view controller add the code below:\n\n```\n    public func postOnlinePresence() {\n        let params: Parameters = [\"username\": username]\n        \n        Alamofire.request(FriendsViewController.API_ENDPOINT + \"/online\", method: .post, parameters: params).validate().responseJSON { response in\n            switch response.result {\n                \n            case .success:\n                _ = \"Online\"\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n```\n\nThe code above simply hits an endpoint and thus marks the user as online.\n\n### Adding status updates to the application with Pusher\nThe final part of our iOS application will be adding the listener for the updates so that every time someone updates their status, the update is added.\n\nTo do this, open the `listenForRealtimeEvents` method and add the following after instantiating the pusher variable:\n\n```\n    let channel = pusher.subscribe(\"new_status\")\n    let _ = channel.bind(eventName: \"update\", callback: { (data: Any?) -\u003e Void in\n        if let data = data as? [String: AnyObject] {\n            let username = data[\"username\"] as! String\n            \n            let status = data[\"status\"] as! String\n            \n            let index = self.friends.index(where: { $0[\"username\"] == username })\n            \n            if index != nil {\n                self.friends[index!][\"status\"] = status\n                self.tableView.reloadData()\n            }\n        }\n    })\n```\n\nThe above code creates a listener for the **update** event to the **new_status** channel. When the event is triggered, the callback checks if the username is part of the friends’ list. If it is, it updates the status of that entry and reloads the table view data.\n\nNow we have successfully added the realtime features to our application. The next thing we want to do is create a backend to help us actually trigger Pusher events that can be picked up by our iOS application.\n\n\n## Creating the NodeJS backend for our realtime iOS status updates app\n\nCreate a directory for the web application and then create some new files:\n\n```\n**index.js**\n\n    // ------------------------------------------------------\n    // Import all required packages and files\n    // ------------------------------------------------------\n    \n    let Pusher     = require('pusher');\n    let express    = require('express');\n    let app        = express();\n    let bodyParser = require('body-parser')\n    \n    let pusher     = new Pusher(require('./config.js'));\n    \n    // ------------------------------------------------------\n    // Set up Express middlewares\n    // ------------------------------------------------------\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // ------------------------------------------------------\n    // Define routes and logic\n    // ------------------------------------------------------\n    \n    app.post('/status', (req, res, next) =\u003e {\n      let payload = {username: req.body.username, status: req.body.status};\n      pusher.trigger('new_status', 'update', payload);\n      res.json({success: 200});\n    });\n    \n    app.post('/online', (req, res, next) =\u003e {\n      let payload = {username: req.body.username};\n      pusher.trigger('new_status', 'online', payload);\n      res.json({success: 200});\n    });\n    \n    app.get('/', (req, res) =\u003e {\n      res.json(\"It works!\");\n    });\n    \n    \n    // ------------------------------------------------------\n    // Catch errors\n    // ------------------------------------------------------\n    \n    app.use((req, res, next) =\u003e {\n        let err = new Error('Not Found: ');\n        err.status = 404;\n        next(err);\n    });\n    \n    \n    // ------------------------------------------------------\n    // Start application\n    // ------------------------------------------------------\n    \n    app.listen(4000, () =\u003e console.log('App listening on port 4000!'));\n```\n\nIn this file, we have created a basic Express application. The application has two important endpoints: `POST /online` and `POST /status`. They both trigger Pusher events with a payload which will be picked up by listeners in our iOS application.\n\nNext create the **config.js** file:\n\n```\n    module.exports = {\n        appId: 'PUSHER_ID',\n        key: 'PUSHER_KEY',\n        secret: 'PUSHER_SECRET',\n        cluster: 'PUSHER_CLUSTER',\n    };\n```\n\nThis is our Pusher configuration file. In here, replace the empty strings with the credentials provided in your Pusher dashboard.\n\nFinally, create a **package.json** file:\n\n```\n    {\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.16.0\",\n        \"express\": \"^4.14.1\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nThis file contains all the node packages required for the Node app to function properly.\n\nFinally, in the directory of your Node application, run the command below:\n\n```\n    $ npm install \u0026\u0026 node index.js\n```\n\nThe first command will install all the dependencies and the second one will start an Express server in node. When you see the message “***App listening on port 4000!”*** **then you know your backend application is ready.\n\n## Testing our realtime status update application\n\nOnce you have your local node web server running, you will need to make some changes so your application can talk to the local web server. In the `info.plist` file, make the following changes:\n\n![user-status-update-swift-arbitrary-loads](//images.contentful.com/1es3ne0caaid/5AjdqxJnck8Wa6MaE2gGIE/02a4de3f1e4ff702a6eb1c47f43a5076/user-status-update-swift-arbitrary-loads.png)\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n![user-status-update-swift-demo](//images.contentful.com/1es3ne0caaid/45c2mCELhCY0MqasmiEcww/36df51c7c75bc3fa1d80fc98b78c548a/user-status-update-swift-demo.gif)\n\n## Conclusion\n\nIn the article, we have been able to create an iOS application with realtime user status updates, similar to what an application like WhatsApp currently has.","metaTitle":"Build a user status update in Swift","metaDescription":"Create an iOS application with realtime user status updates, similar to WhatsApp using Swift and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"pyEmgfpl28CuK4gOGgC2i","type":"Entry","createdAt":"2018-02-22T15:02:43.190Z","updatedAt":"2018-03-01T17:51:09.195Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build read receipts using Swift","url":"read-receipts-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/message-delivery-status-ios","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}}],"reviewDate":"2017-09-26","description":"Create an iOS chat application with a message delivery status using Swift, Node.js and Pusher for realtime functionality.","prerequisite":"A basic understanding of Swift and Node.js is needed to follow this tutorial.","content":"When building mobile chat applications, it is not uncommon to see developers adding a delivery status feature that lets you know when the message you sent has been delivered to the recipient. Instant Messaging applications like WhatsApp, Messenger, BBM, Skype and the like all provide this feature.\n\nSome of the tools that we will need to build our application are:\n\n1. [**Xcode**](https://developer.apple.com/xcode/)- The application will be built using Apple’s Swift programming language.\n2. [**NodeJS**](https://nodejs.org/en/download/) **(Express)** - The backend application will be written in NodeJS.\n3. [**Pusher**](https://pusher.com/) - Pusher will provide realtime reporting when the sent messages are delivered. You will need a Pusher application ID, key and secret. Create your free account at [pusher.com](https://pusher.com), then grab your app ID, key and secret from the Pusher dashboard.\n\nBelow is a screen recording of what we’ll be building. As you can see, when a message is sent, it is marked as sent, and the moment it hits the recipient’s phone, it is marked as delivered.\n\n![read-receipts-swift-demo](//images.contentful.com/1es3ne0caaid/57yKLaGkBikEIesQg6gQUu/10ee2f0aedc39b174bfc377031a70666/message-delivery-status-swift-demo.gif)\n\n## Getting started with our iOS application\n\nLaunch Xcode and create a new project. We are calling ours **Anonchat**. Once it has loaded the workspace, close Xcode and then `cd` to the root of your project and run the command `pod init`. This should generate a `Podfile` for you. Change the contents of the `Podfile`:\n\n```\n    # Uncomment the next line to define a global platform for your project\n    platform :ios, '9.0'\n    \n    target 'anonchat' do\n      # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\n      use_frameworks!\n    \n      # Pods for anonchat\n      pod 'Alamofire'\n      pod 'PusherSwift'\n      pod 'JSQMessagesViewController'\n    end\n```\n\nNow run the command `pod install` so the Cocoapods package manager can pull in the necessary dependencies. When this is complete, close Xcode (if open) and then open the `.xcworkspace` file that is in the root of your project folder.\n\n\n## Creating the views for our iOS application\n\nWe are going to be creating a couple of views that we will need for the chat application to function properly. The views will look something like the screenshot below:\n\n![read-receipts-swift-app-flow](//images.contentful.com/1es3ne0caaid/4IWwX3XnlCoSwIGCsWuUIg/029a6d6a6d2a854904c4fba4b82ac4b7/message-delivery-status-swift-app-flow.png)\n\nWhat we have done above is create the first ViewController which will serve as our welcome ViewController, and we have added a button which triggers navigation to the next controller which is a `Navigation Controller`. This Navigation Controller in turn has a View Controller set as the root controller.\n\n\n## Coding the message delivery status for our iOS application\n\nNow that we have set up the views using the interface builder on the `MainStoryboard`, let's add some functionality. The first thing we will do is create a `WelcomeViewController` and associate it with the first view on the left. This will be the logic house for that view; we won't add much to it for now though:\n\n```\n    import UIKit\n    \n    class WelcomeViewController: UIViewController {\n        override func viewDidLoad() {\n            super.viewDidLoad()\n        }\n    }\n```\n\nNext, we create another controller called the `ChatViewController`, which will be the main power house and where everything will be happening. The controller will extend the `JSQMessagesViewController` so that we automatically get a nice chat interface to work with out of the box, then we have to work on customizing this chat interface to work for us.\n\n```\n    import UIKit\n    import Alamofire\n    import PusherSwift\n    import JSQMessagesViewController\n    \n    class ChatViewController: JSQMessagesViewController {\n        override func viewDidLoad() {\n            super.viewDidLoad()\n    \n            let n = Int(arc4random_uniform(1000))\n    \n            senderId = \"anonymous\" + String(n)\n            senderDisplayName = senderId\n        }\n    }\n```\n\nIf you notice on the `viewDidLoad` method, we are generating a random username and setting that to be the `senderId` and `senderDisplayName` on the controller. This extends the properties set in the parent controller and is required.\n\nBefore we continue working on the chat controller, we want to create a last class called the `AnonMessage` class. This will extend the `JSQMessage` class and we will be using this to extend the default functionality of the class.\n\n\n```\n    import UIKit\n    import JSQMessagesViewController\n    \n    enum AnonMessageStatus {\n        case sending\n        case sent\n        case delivered\n    }\n    \n    class AnonMessage: JSQMessage {\n        var status : AnonMessageStatus\n        var id : Int\n    \n        public init!(senderId: String, status: AnonMessageStatus, displayName: String, text: String, id: Int?) {\n            self.status = status\n            \n            if (id != nil) {\n                self.id = id!\n            } else {\n                self.id = 0\n            }\n            \n            \n    \n            super.init(senderId: senderId, senderDisplayName: displayName, date: Date.init(), text: text)\n        }\n    \n        public required init?(coder aDecoder: NSCoder) {\n            fatalError(\"init(coder:) has not been implemented\")\n        }\n    }\n```\n\nIn the class above we have extended the `JSQMessage` class and we have also added some new properties to track: the `id` and the `status`. We also added an initialisation method so we can specify the new properties before instantiating the `JSQMessage` class properly. We also added an `enum` that contains all the statuses the message could possibly have.\n\nReturning to the `ChatViewController`, let's add a few properties to the class that we will need:\n\n``` language-swift\n    static let API_ENDPOINT = \"http://localhost:4000\";\n    \n    var messages = [AnonMessage]()\n    var pusher: Pusher!\n    \n    var incomingBubble: JSQMessagesBubbleImage!\n    var outgoingBubble: JSQMessagesBubbleImage!\n```\n\nNow that's done, let’s start customizing the controller to suit our needs. First, we will add some logic to the `viewDidLoad` method:\n\n```\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    \n        let n = Int(arc4random_uniform(1000))\n    \n        senderId = \"anonymous\" + String(n)\n        senderDisplayName = senderId\n    \n        inputToolbar.contentView.leftBarButtonItem = nil\n    \n        incomingBubble = JSQMessagesBubbleImageFactory().incomingMessagesBubbleImage(with: UIColor.jsq_messageBubbleBlue())\n        outgoingBubble = JSQMessagesBubbleImageFactory().outgoingMessagesBubbleImage(with: UIColor.jsq_messageBubbleGreen())\n    \n        collectionView!.collectionViewLayout.incomingAvatarViewSize = CGSize.zero\n        collectionView!.collectionViewLayout.outgoingAvatarViewSize = CGSize.zero\n    \n        automaticallyScrollsToMostRecentMessage = true\n    \n        collectionView?.reloadData()\n        collectionView?.layoutIfNeeded()\n    }\n```\n\nIn the above code, we started customizing the way our chat interface will look, using the parent class that has these properties already set. For instance, we are setting the `incomingBubble` to blue, and the `outgoingBubble` to green. We have also eliminated the avatar display because we do not need it right now.\n\nThe next thing we are going to do is override some of the methods that come with the parent controller so that we can display messages, customize the feel and more:\n\n```\n    override func collectionView(_ collectionView: JSQMessagesCollectionView!, messageDataForItemAt indexPath: IndexPath!) -\u003e JSQMessageData! {\n        return messages[indexPath.item]\n    }\n    \n    override func collectionView(_ collectionView: JSQMessagesCollectionView!, attributedTextForCellBottomLabelAt indexPath: IndexPath!) -\u003e NSAttributedString! {\n        if !isAnOutgoingMessage(indexPath) {\n            return nil\n        }\n    \n        let message = messages[indexPath.row]\n    \n        switch (message.status) {\n        case .sending:\n            return NSAttributedString(string: \"Sending...\")\n        case .sent:\n            return NSAttributedString(string: \"Sent\")\n        case .delivered:\n            return NSAttributedString(string: \"Delivered\")\n        }\n    }\n    \n    override func collectionView(_ collectionView: JSQMessagesCollectionView!, layout collectionViewLayout: JSQMessagesCollectionViewFlowLayout!, heightForCellBottomLabelAt indexPath: IndexPath!) -\u003e CGFloat {\n        return CGFloat(15.0)\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -\u003e Int {\n        return messages.count\n    }\n    \n    override func collectionView(_ collectionView: JSQMessagesCollectionView!, messageBubbleImageDataForItemAt indexPath: IndexPath!) -\u003e JSQMessageBubbleImageDataSource! {\n        let message = messages[indexPath.item]\n        if message.senderId == senderId {\n            return outgoingBubble\n        } else {\n            return incomingBubble\n        }\n    }\n    \n    override func collectionView(_ collectionView: JSQMessagesCollectionView!, avatarImageDataForItemAt indexPath: IndexPath!) -\u003e JSQMessageAvatarImageDataSource! {\n        return nil\n    }\n    \n    override func didPressSend(_ button: UIButton, withMessageText text: String, senderId: String, senderDisplayName: String, date: Date) {\n        let message = addMessage(senderId: senderId, name: senderId, text: text, id: nil)\n    \n        if (message != nil) {\n            postMessage(message: message as! AnonMessage)\n        }\n        \n        finishSendingMessage(animated: true)\n    }\n    \n    private func isAnOutgoingMessage(_ indexPath: IndexPath!) -\u003e Bool {\n        return messages[indexPath.row].senderId == senderId\n    }\n```\n\nThe next thing we are going to do is create some new methods on the controller that will help us post a new message. After that, we create a method to hit the remote endpoint which sends the message. Finally, we create a method to append the new message sent (or received) to the messages array:\n\n```\n    private func postMessage(message: AnonMessage) {\n        let params: Parameters = [\"sender\": message.senderId, \"text\": message.text]\n        hitEndpoint(url: ChatViewController.API_ENDPOINT + \"/messages\", parameters: params, message: message)\n    }\n    \n    private func hitEndpoint(url: String, parameters: Parameters, message: AnonMessage? = nil) {\n        Alamofire.request(url, method: .post, parameters: parameters).validate().responseJSON { response in\n            switch response.result {\n            case .success(let JSON):\n                let response = JSON as! NSDictionary\n    \n                if message != nil {\n                    message?.id = (response.object(forKey: \"ID\") as! Int) as Int\n                    message?.status = .sent\n                    self.collectionView.reloadData()\n                }\n    \n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n    \n    private func addMessage(senderId: String, name: String, text: String, id: Int?) -\u003e Any? {\n        let status = AnonMessageStatus.sending\n        \n        let id = id == nil ? nil : id;\n    \n        let message = AnonMessage(senderId: senderId, status: status, displayName: name, text: text, id: id)\n    \n        if (message != nil) {\n            messages.append(message as AnonMessage!)\n        }\n    \n        return message\n    }\n```\n\nGreat. Now every time we send a new message, the `didPressSend` method will be triggered and all the other ones will fall into place nicely!\n\nFor the last piece of the puzzle, we want to create the method that listens for Pusher events and fires a callback when an event trigger is received:\n\n```\n    private func listenForNewMessages() {\n        let options = PusherClientOptions(\n            host: .cluster(\"PUSHER_CLUSTER\")\n        )\n    \n        pusher = Pusher(key: \"PUSHER_KEY\", options: options)\n    \n        let channel = pusher.subscribe(\"chatroom\")\n    \n        channel.bind(eventName: \"new_message\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String: AnyObject] {\n                let messageId = data[\"ID\"] as! Int\n                let author = data[\"sender\"] as! String\n                \n                if author != self.senderId {\n                    let text = data[\"text\"] as! String\n    \n                    let message = self.addMessage(senderId: author, name: author, text: text, id: messageId) as! AnonMessage?\n                    message?.status = .delivered\n                    \n                    let params: Parameters = [\"ID\":messageId]\n                    self.hitEndpoint(url: ChatViewController.API_ENDPOINT + \"/delivered\", parameters: params, message: nil)\n    \n                    self.finishReceivingMessage(animated: true)\n                }\n            }\n        })\n        \n        channel.bind(eventName: \"message_delivered\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String: AnyObject] {\n                let messageId = (data[\"ID\"] as! NSString).integerValue\n                let msg = self.messages.first(where: { $0.id == messageId })\n                \n                msg?.status = AnonMessageStatus.delivered\n                self.finishReceivingMessage(animated: true)\n            }\n        })\n    \n        pusher.connect()\n    }\n```\n\nIn this method, we have created a `Pusher` instance, we have set the cluster and the key. We attach the instance to a `chatroom` channel and then bind to the `new_message` event on the channel. We also bind a `message_delivered` event, this will be the event that is triggered when a message is marked as delivered. It will update the message status to `delivered` so the sender knows the message has indeed been delivered.\n\n\u003e 💡 **Remember to replace the key and cluster with the actual values** **you have gotten from your Pusher dashboard**.\n\nNow we should be done with the application and as it stands, it should work but no messages can be sent just yet as we need a backend application for it to work properly.\n\n### Building the backend Node application\n\nNow that we are done with the iOS and Xcode parts, we can create the NodeJS backend for the application. We are going to use Express so that we can quickly whip something up.\n\nCreate a directory for the web application and then create two new files:\n\nThe **index.js** file…\n\n```\n    // ------------------------------------------------------\n    // Import all required packages and files\n    // ------------------------------------------------------\n    \n    let Pusher     = require('pusher');\n    let express    = require('express');\n    let bodyParser = require('body-parser');\n    let Promise    = require('bluebird');\n    let db         = require('sqlite');\n    let app        = express();\n    let pusher     = new Pusher(require('./config.js')['config']);\n    \n    // ------------------------------------------------------\n    // Set up Express\n    // ------------------------------------------------------\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // ------------------------------------------------------\n    // Define routes and logic\n    // ------------------------------------------------------\n    \n    app.post('/delivered', (req, res, next) =\u003e {\n      let payload = {ID: \"\"+req.body.ID+\"\"}\n      pusher.trigger('chatroom', 'message_delivered', payload)\n      res.json({success: 200})\n    })\n    \n    app.post('/messages', (req, res, next) =\u003e {\n      try {\n        let payload = {\n          text: req.body.text,\n          sender: req.body.sender\n        };\n    \n        db.run(\"INSERT INTO Messages (Sender, Message) VALUES (?,?)\", payload.sender, payload.text)\n          .then(query =\u003e {\n            payload.ID = query.stmt.lastID\n            pusher.trigger('chatroom', 'new_message', payload);\n    \n            payload.success = 200;\n    \n            res.json(payload);\n          });\n    \n      } catch (err) {\n        next(err)\n      }\n    });\n    \n    app.get('/', (req, res) =\u003e {\n      res.json(\"It works!\");\n    });\n    \n    \n    // ------------------------------------------------------\n    // Catch errors\n    // ------------------------------------------------------\n    \n    app.use((req, res, next) =\u003e {\n        let err = new Error('Not Found');\n        err.status = 404;\n        next(err);\n    });\n    \n    \n    // ------------------------------------------------------\n    // Start application\n    // ------------------------------------------------------\n    \n    Promise.resolve()\n      .then(() =\u003e db.open('./database.sqlite', { Promise }))\n      .then(() =\u003e db.migrate({ force: 'last' }))\n      .catch(err =\u003e console.error(err.stack))\n      .finally(() =\u003e app.listen(4000, function(){\n        console.log('App listening on port 4000!')\n      }));\n```\n\nHere we define the entire logic of our backend application. We are also using SQLite to store the chat messages; this is useful to help identify messages. Of course, you can always change the way the application works to suite your needs.\n\nThe `index.js` file also has two routes where it receives messages from the iOS application and triggers the Pusher event which is picked up by the application.\n\nThe next file is the **packages.json** where we define the NPM dependencies:\n\n```\n    {\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"bluebird\": \"^3.5.0\",\n        \"body-parser\": \"^1.16.0\",\n        \"express\": \"^4.14.1\",\n        \"pusher\": \"^1.5.1\",\n        \"sqlite\": \"^2.8.0\"\n      }\n    }\n```\n\nYou’ll also need a config.js file in the root directory:\n\n```\n    module.exports = {\n        appId: '',\n        key: '',\n        secret: '',\n        cluster: '',\n    };\n```\n\nSubstitute with the actual values from your Pusher application. Now run `npm install` on the directory and then `node index.js` once the npm installation is complete. You should see an *App listening on port 4000!* message.\n\n![read-receipts-swift-nodejs](//images.contentful.com/1es3ne0caaid/3x1vWsQRtYKsG2OWGaeuEk/34449477511a92d054ba98fc5fcc13d9/message-delivery-status-swift-nodejs.png)\n\n## Testing the application\n\nOnce you have your local node web server running, you will need to make some changes so your application can talk to the local web server. In the `info.plist` file, make the following changes:\n\n![read-receipts-swift-allow-arbitrary-loads](//images.contentful.com/1es3ne0caaid/64eKCfeNxewSUya2K4qga6/30343ac917a5e28a59bf4b71d976ba41/message-delivery-status-swift-allow-arbitrary-loads.png)\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n\n## Conclusion\n\nIn this article, we have explored how to create an iOS chat application with a message delivery status message after the message is sent to other users. For practice, you can expand the statuses to support more instances.","metaTitle":"Build read receipts using Swift","metaDescription":"Create an iOS chat application with a message delivery status using Swift, Node.js and Pusher for realtime functionality."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2pB3EQAPBaqiSOuAk6m6WA","type":"Entry","createdAt":"2018-02-22T15:02:41.593Z","updatedAt":"2018-02-28T14:11:46.908Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a typing indicator in Swift","url":"typing-indicator-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/anonymous-ios-app-pusher/tree/v1.1.2","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2017-06-12","description":"Build a typing indicator for you iOS app using Swift, Node.js and Pusher for the realtime features.","prerequisite":"A basic understanding of Swift and Node.js is needed to follow this tutorial.","content":"In a previous tutorial we covered [How to create a public anonymous iOS chat application](https://blog.pusher.com/create-anonymous-public-ios-chat-app/). We were able to create the application using Swift and Pusher so the application won't save state.\n\nIn this article, we are going to expand that application and add a typing indicator to the application. If you have not read the previous article, I suggest you do so, but if you do not want to then you can grab the [source code to the article here](https://github.com/neoighodaro/anonymous-ios-app-pusher/tree/v1.0) and follow along.\n\n## What we will be building\n\nAs mentioned earlier, we will be adding a typing indicator to our application. This feature indicates that someone is typing a message on the other end - just like WhatsApp, WeChat or instant messaging clients do.\n\n![typing-indicator-swift-demo](//images.contentful.com/1es3ne0caaid/4Yz3GLLR8A6MwmeokuWusC/e9e8bcb3edb949803c463cdb88ab3551/typing-indicator-swift-demo.gif)\n\n## Setting up the application\n\nOpen the root directory of the source code you downloaded above, then open the `.xcworkspace` file included in the directory; this should launch XCode. Now we already have a storyboard. In the story board we have an entry controller, and this has a button to login anonymously. Clicking the button leads to the navigation controller which in turn loads the `ChatViewController`.\n\n![typing-indicator-swift-appflow](//images.contentful.com/1es3ne0caaid/LWiPdnYJqeWqmSkg4KoUk/608ba4bb44c7ba56fd86c86aa5dc407e/typing-indicator-swift-appflow.png)\n\n\u003e **Note**: To test the application you might need to customize the Pusher application credentials in the `ChatViewController` and the `index.js` file in the web app directory. You will also need to run `node index.js` in the webapp directory to start a local web server.\n\n## What we need to do\n\nTo make this application do what we need it to do we need to do some new things. First, we will add a new endpoint to the web server application that will trigger Pusher once someone starts typing. We will add a new listener in the application that listens in for when someone is typing and finally we will trigger the new endpoint when someone is entering text into the 'New message' field.\n\n## Adding the endpoint on the web server\n\nNow we want to add an endpoint on the web server that will trigger Pusher events every time someone is typing. Open the `index.js` in the `webapp` directory on your editor of choice. You can now add the `/typing` endpoint to the code as shown below:\n\n```\napp.post('/typing', function (req, res) {\n  var message = {\n    sender: req.body.sender,\n    text: req.body.sender + \" is typing...\"\n  };\n  pusher.trigger('chatroom', 'user_typing', message);\n  res.json({success: 200})\n})\n```\n\nSo now, every time we hit the `/typing` endpoint, it should trigger Pusher with the message `senderId is typing…`. Great.\n\n### Triggering Pusher from the application when typing\n\nThe next thing to do would be to trigger Pusher every time the current user is typing on the application. This would basically hit the `/typing` endpoint we just created with the `username` as the `sender` parameter.\n\nTo make sure we keep our code DRY, we have refactored the code a little. We have abstracted the part that hits our endpoint into one method called `hitEndpoint` and we use that now whenever we want to hit the endpoint.\n\n```\nvar isBusySendingEvent : Bool = false\n\nprivate func postMessage(name: String, message: String) {\n    let params: Parameters = [\"sender\": name, \"text\": message]\n    hitEndpoint(url: ChatViewController.API_ENDPOINT + \"/messages\", parameters: params)\n}\n\nprivate func sendIsTypingEvent(forUser: String) {\n    if isBusySendingEvent == false {\n        isBusySendingEvent = true\n        let params: Parameters = [\"sender\": forUser]\n        hitEndpoint(url: ChatViewController.API_ENDPOINT + \"/typing\", parameters: params)\n    } else {\n        print(\"Still sending something\")\n    }\n}\n\nprivate func hitEndpoint(url: String, parameters: Parameters) {\n    Alamofire.request(url, method: .post, parameters: parameters).validate().responseJSON { response in\n        switch response.result {\n        case .success:\n            self.isBusySendingEvent = false\n            // Succeeded, do something\n            print(\"Succeeded\")\n        case .failure(let error):\n            self.isBusySendingEvent = false\n            // Failed, do something\n            print(error)\n        }\n    }\n}\n\noverride func textViewDidChange(_ textView: UITextView) {\n    super.textViewDidChange(textView)\n    sendIsTypingEvent(forUser: senderId)\n}\n```\n\nIn the `sendIsTypingEvent` we have a quick flag that we use to stop the application from sending too many requests, especially if the last one has not been fulfilled. Because we trigger this method every time someone changes something on the text field this check is necessary.\n\n### Adding a listener to pick up when others are typing\n\nThe last piece of the puzzle is adding a listener that picks up when someone else is typing and changes the view controller's title bar to `someone is typing…`. To do this, we would use the `subscribe` method on the `PusherChannel` object.\n\n```\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    let n = Int(arc4random_uniform(1000))\n\n    senderId = \"anonymous\" + String(n)\n    senderDisplayName = senderId\n\n    inputToolbar.contentView.leftBarButtonItem = nil\n\n    incomingBubble = JSQMessagesBubbleImageFactory().incomingMessagesBubbleImage(with: UIColor.jsq_messageBubbleBlue())\n    outgoingBubble = JSQMessagesBubbleImageFactory().outgoingMessagesBubbleImage(with: UIColor.jsq_messageBubbleGreen())\n\n    collectionView!.collectionViewLayout.incomingAvatarViewSize = CGSize.zero\n    collectionView!.collectionViewLayout.outgoingAvatarViewSize = CGSize.zero\n\n    automaticallyScrollsToMostRecentMessage = true\n\n    collectionView?.reloadData()\n    collectionView?.layoutIfNeeded()\n\n    listenForNewMessages()\n\n    isTypingEventLifetime = Timer.scheduledTimer(timeInterval: 2.0,\n                                                 target: self,\n                                                 selector: #selector(isTypingEventExpireAction),\n                                                 userInfo: nil,\n                                                 repeats: true)\n\n}\n\nprivate func listenForNewMessages() {\n    let options = PusherClientOptions(\n        host: .cluster(\"PUSHER_CLUSTER\")\n    )\n\n    pusher = Pusher(key: \"PUSHER_ID\", options: options)\n\n    let channel = pusher.subscribe(\"chatroom\")\n\n    channel.bind(eventName: \"new_message\", callback: { (data: Any?) -\u003e Void in\n        if let data = data as? [String: AnyObject] {\n            let author = data[\"sender\"] as! String\n\n            if author != self.senderId {\n                let text = data[\"text\"] as! String\n                self.addMessage(senderId: author, name: author, text: text)\n                self.finishReceivingMessage(animated: true)\n            }\n        }\n    })\n\n    channel.bind(eventName: \"user_typing\", callback: { (data: Any?) -\u003e Void in\n        if let data = data as? [String: AnyObject] {\n            let author = data[\"sender\"] as! String\n            if author != self.senderId {\n                let text = data[\"text\"] as! String\n                self.navigationItem.title = text\n            }\n        }\n    })\n\n    pusher.connect()\n}\n\npublic func isTypingEventExpireAction() {\n    navigationItem.title = \"AnonChat\"\n}\n```\n\nAbove we made some changes. In the `listenForNewMessages` we added a new subscription to the `user_typing` event, and in the `viewDidLoad` method, we added a timer that just runs on intervals and resets the title of the application. So basically, the subscriber picks up the changes in the event from Pusher, updates the navigation title, then the timer resets the title every x seconds.\n\nWith this we have completed our task and we should have the typing indicator feature working.\n\n## Conclusion\n\nThere are many improvements you can obviously add to make the experience a little more seamless, but this demonstrates how the feature can be implemented easily into your iOS application.","metaTitle":"Build a typing indicator in Swift","metaDescription":"In this this tutorial you'll learn how to add a typing indicator to your iOS app: it indicates that someone is typing a message on the other end. You'll use Swift, Node.js and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4QtoulK6fSoaCy2C42c6Uw","type":"Entry","createdAt":"2018-02-22T15:03:35.159Z","updatedAt":"2020-06-19T14:07:01.594Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an anonymous chat app using ASP.NET","url":"anonymous-chat-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5K3KWA2xvqw4SW2sYI8eCG","type":"Entry","createdAt":"2018-02-12T15:34:14.169Z","updatedAt":"2018-02-14T10:09:19.038Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Chimezie Enyinnaya","url":"chimezie-enyinnaya","email":"meziemichael@gmail.com","twitter":"https://twitter.com/ammezie","github":"https://github.com/ammezie","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-06-05","description":"Create a realtime public anonymous group chat app using C#, ASP.NET and Pusher.","prerequisite":"A basic understanding of C# and JavaScript is needed to follow this tutorial.","content":"Anonymity gives the likelihood to wear a cover, to end up being anyone you need to be. Also, anonymous communication permits you to quit being bashful and act naturally. It is a chance to pull in individuals whom you won't have the confidence to get to know, all things considered.\n\nToday, we will create a realtime public anonymous group chat app using C# ASP.NET and Pusher. This tutorial assumes the reader has basic knowledge of C# ASP.NET.\n\n## Setting up Pusher\n\nWe need to sign up on [Pusher](https://pusher.com/signup) and create a new app, and also copy our secret, application key and application id.\n\n![anonymous-chat-aspnet-create-app](//images.contentful.com/1es3ne0caaid/2R4DjcnRv2WI6ueAUKQmQ0/8d940cd10efdf1972d5f0f8953136b54/anonymous-chat-aspnet-create-app.png)\n\n## Setting up the ASP.NET project in Visual Studio\n\nWe need to create a new Asp.Net MVC application, so we open up Visual Studio, select new project from the sidebar, under templates, select `Visual C#`, next, select web, and finally in the middle section, select `ASP.NET Web Application`.\n\n![anonymous-chat-aspnet-setup-visual-studio](//images.contentful.com/1es3ne0caaid/4Bf8W5wgogq0UmMMISSsuu/0b302b29153a5e2e6c1e61ec08d3383c/anonymous-chat-aspnet-setup-visual-studio.png)\n\nNow we are almost ready. The next step will be to install the official Pusher library for `.Net` using the NuGet Package. To do this, we go to tools on the top bar, click on `NuGet Package Manager`, on the dropdown we select `Package Manager Console`. After doing this, we will see the `Package Manager Console` at the bottom of our Visual Studio as shown below.\n\n![anonymous-chat-aspnet-nuget-command](//images.contentful.com/1es3ne0caaid/5b7bJ6n48o6qaqkQg2qW6I/273e8390b5304dee7161c131521157e4/anonymous-chat-aspnet-nuget-command.png)\n\nThe next step is to install the library, by running the following command in the console.\n\n```\n    Install-Package PusherServer\n```\n\nOnce this is done, our environment has now been set up.\n\n## Crafting the chat application\n\nNow that our environment is set up and ready, let us dive into writing some code.\nBy default, Visual Studio creates three controllers for us, however we will be using the `HomeController` for the logic of our chat application.\nThe first thing we want to do is to delete the default `index.cshtml` file under the `Views/Home` folder, and create a new view file named `index.cshtml` that does not have a master layout. In our new `index.cshtml` file, let us copy the following contents into it.\n\n```\n    @{\n        Layout = null;\n        Response.ContentType = \"text/HTML\";\n    }\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003e\n            Pusher Tutorial\n        \u003c/title\u003e\n    \u003c/head\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" /\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"//js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cstyle\u003e\n        .chat {\n            list-style: none;\n            margin: 0;\n            padding: 0;\n        }\n    \n            .chat li {\n                margin-bottom: 10px;\n                padding-bottom: 5px;\n                border-bottom: 1px dotted #B3A9A9;\n            }\n    \n                .chat li.left .chat-body {\n                    margin-left: 60px;\n                }\n    \n                .chat li.right .chat-body {\n                    margin-right: 60px;\n                }\n    \n    \n                .chat li .chat-body p {\n                    margin: 0;\n                    color: #777777;\n                }\n    \n            .panel .slidedown .glyphicon, .chat .glyphicon {\n                margin-right: 5px;\n            }\n    \n        .panel-body {\n            overflow-y: scroll;\n            height: 250px;\n        }\n    \n        ::-webkit-scrollbar-track {\n            -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\n            background-color: #F5F5F5;\n        }\n    \n        ::-webkit-scrollbar {\n            width: 12px;\n            background-color: #F5F5F5;\n        }\n    \n        ::-webkit-scrollbar-thumb {\n            -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);\n            background-color: #555;\n        }\n    \u003c/style\u003e\n    \u003cbody\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-12\"\u003e\n                    \u003cdiv class=\"panel panel-primary\"\u003e\n                        \u003cdiv class=\"panel-heading\"\u003e\n                            \u003cspan class=\"glyphicon glyphicon-comment\"\u003e\u003c/span\u003e Chat\n                        \u003c/div\u003e\n                        \u003cdiv class=\"panel-body\"\u003e\n                            \u003cul class=\"chat\" id=\"chat\"\u003e\u003c/ul\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"panel-footer\"\u003e\n                            \u003cdiv class=\"input-group\"\u003e\n                                \u003cinput id=\"btn-input\" class=\"form-control input-sm\" placeholder=\"Type your message here...\" type=\"text\"\u003e\n                                \u003cspan class=\"input-group-btn\"\u003e\n                                    \u003cbutton class=\"btn btn-warning btn-sm\" id=\"btn-chat\"\u003e\n                                        Send\n                                    \u003c/button\u003e\n                                \u003c/span\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e    \n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the above piece of code, we have defined the layout to be `null`, and we have defined the content type as `\"text/HTML\"` so Asp.Net does not attempt to parse the page as `XML`. We required Bootstrap CSS, jQuery library, as well as the Pusher JavaScript library, before defining the HTML structure. If we save our file and run our project, we should see this.\n\n![anonymous-chat-aspnet-app-view](//images.contentful.com/1es3ne0caaid/pOUxOZQMICS0eYEQa82SS/0a41ad2cd5d35e10c0a841301b7d6889/anonymous-chat-aspnet-app-view.png)\n\nNow we have to trigger an event when someone enters some text and clicks the send button. Let's open up our `index.cshtml` file again and add the following at the end of the page.\n\n```\n    \u003cscript\u003e\n        $(document).ready(function(){\n            $(\"#btn-chat\").click(function(){\n                var message = $('#btn-input').val();\n    \n                $.post({\n                    url: '@Url.Action(\"Pushermessage\", \"Home\")',\n                    dataType: 'text/HTML',\n                    contentType: \"application/json\",\n                    data: JSON.stringify({\n                        \"message\": message\n                    }),\n                    success: function (data) {\n                        $(\"#btn-input\").val('');\n                    }\n                });\n            })\n        })\n    \u003c/script\u003e\n```\n\nIn the above code, we have attached a click event listener to the element with the ID of `btn-chat` which happens to be our button. Once the button is clicked, the code will take the value of the element with the id of `btn-input` which happens to be our text box, and send an AJAX call to our `Pushermessage` function in our `HomeController`. However, we are yet to create the `Pushermessage` function that responds to the AJAX call.\n\nLet us move to our `HomeController`, and paste the following code after the `index` function.\n\n```\n     [HttpPost]\n            public async Task\u003cActionResult\u003e Pushermessage(String message)\n            {\n                var options = new PusherOptions();\n                options.Cluster = \"XXX_CLUSTER\";\n                var pusher = new Pusher(\"XXX_APP_ID\", \"XXX_APP_KEY\", \"XXX_APP_SECRET\", options);\n                ITriggerResult result = await pusher.TriggerAsync(\"asp_channel\", \"asp_event\", new { message = message, name = \"Anonymous\" });\n    \n                return new HttpStatusCodeResult((int)HttpStatusCode.OK);\n    \n            } \n```\n\nDon't forget to add the following references to the top of your file, before the class declaration\n\n```\n    using PusherServer;\n    using System.Net;\n    using System.Threading.Tasks;\n```\n\nIn the last two block of codes, we have defined our `Pushermessage` function and we also decorated it with the `[HttpPost]` decorator, so Asp.Net knows it’s a function for POST requests. In this function, we instantiate Pusher, using our appId, appKey and appSecret respectively. We then went ahead to trigger a channel called `asp_channel` and an event called `asp_event`, sending in two values with it.\n\nAt this point, if we reload our app, type in a message and send, we should see the following when we visit our debug console on our Pusher dashboard:\n\n![anonymous-chat-aspnet-debug-console](//images.contentful.com/1es3ne0caaid/1BFqiLRhniu66YYIw0SKOw/0694b566209322b44f3ffca76ddd6d4e/anonymous-chat-aspnet-debug-console.png)\n\nAt this point, we are done with emitting the message to data. Let us now move onto listening for the event on the client side and displaying the new message.\n\nLet us open up our `index.cshtml` file, and add the following lines of code after our `click` event.\n\n```\n    var pusher = new Pusher('PUSHER_APP_KEY', {cluster: 'XXX_CLUSTER'});\n    var my_channel = pusher.subscribe('asp_channel');\n    my_channel.bind(\"asp_event\", function (data) {\n        var new_message = '\u003cli class=\"left clearfix\"\u003e\u003cspan class=\"chat-img pull-left\"\u003e';\n        new_message +='\u003cimg src=\"http://placehold.it/50/55C1E7/fff\u0026text='+data.name+'\" alt=\"User Avatar\" class=\"img-circle\"\u003e';\n        new_message +=  '\u003c/span\u003e';\n        new_message +=      '\u003cdiv class=\"chat-body clearfix\"\u003e';\n        new_message +=          '\u003cdiv class=\"header\"\u003e';\n        new_message +=               '\u003cstrong class=\"primary-font\"\u003e'+data.name+'\u003c/strong\u003e \u003csmall class=\"pull-right text-muted\"\u003e';\n        new_message +=                  '\u003c/div\u003e';\n        new_message +=                      '\u003cp\u003e';\n        new_message +=  data.message;\n        new_message +=                      '\u003c/p\u003e';\n        new_message +=                   '\u003c/div\u003e';\n        new_message +=      '\u003c/li\u003e';\n    $(\"#chat\").append(new_message);\n    });\n```\n\nIn the above block of code, we declared a variable called `pusher` and we set it to an instance of a new Pusher object, passing in our `appKey`. Next, we declared a variable called `my_channel`, and we call the Pusher subscribe method to our channel, which in this case, is called `asp_channel`.\n\nNext, we bind to the event, receive the data passed from it, wrap the data in some `li` tags, and then we append it to the `ul` element in our HTML structure with the ID of `chat`. Below is our functionality:\n\n![anonymous-chat-aspnet-demo](//images.contentful.com/1es3ne0caaid/5VoMncGxA4sGIaEe0O2yiY/37d1dcdad89d6542ecb2c22b37396c52/anonymous-chat-aspnet-demo.gif)\n\nIn this article, we have demonstrated how to create a public anonymous chat application using C# ASP.NET and Pusher. We have gone over the process of setting up the environment, using the NuGet Package Console to install packages as well as implementing the chat application.\n\nMany other realtime applications can be built using Pusher and ASP.NET, it's left for you to decide which awesome realtime app you'll be building next.","metaTitle":"Build an anonymous chat app using ASP.NET","metaDescription":"Create a realtime public anonymous group chat app using C#, ASP.NET and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4CAYv9SfgA4Cy4MMeU8s2m","type":"Entry","createdAt":"2018-02-22T15:03:21.898Z","updatedAt":"2018-02-28T14:41:02.345Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build read receipts using Django","url":"read-receipts-django","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/pusher_django_message_delivery","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"48AytLnko0OKAqMQU2Si8W","type":"Entry","createdAt":"2018-02-12T14:45:47.821Z","updatedAt":"2018-02-12T14:45:47.821Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Django","url":"django","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}}],"reviewDate":"2017-05-30","description":"Create read receipts for your chat application with Django and Vue.js","prerequisite":"A basic understanding of Django and Vue.js is needed to follow this tutorial.","content":"Today, we will make a read receipt framework for your chat app with Django and Pusher.\n\n## Setting up Django\n\nFirst, we need to install the Python Django library if we don't already have it.\nTo install Django, we run:\n\n```\n    pip install django\n```\n\nAfter installing Django, it’s time to create our project. Open up a terminal, and create a new project using the following command:\n\n```\n    django-admin startproject pusher_message\n```\n\nIn the above command, we created a new project called `pusher_message`. The next step will be to create an app inside our new project. To do that, let’s run the following commands:\n\n```\n    //change directory into the pusher_message directory\n    cd pusher_message\n    //create a new app where all our logic would live\n    django-admin startapp message\n```\n\nOnce we are done setting up the new app, we need to tell Django about our new application, so we will go into our `pusher_message\\settings.py` and add the message app to our installed apps as seen below:\n\n```\n    INSTALLED_APPS = [\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.messages',\n        'django.contrib.staticfiles',\n        'message'\n    ]\n```\n\nAfter doing the above, it’s time for us to run the application and see if all went well.\nIn our terminal shell, we run:\n\n```\n    python manage.py runserver\n```\n\nIf we navigate our browser to `http://localhost:8000`, we should see the following:\n\n![read-receipts-django-first-page](//images.contentful.com/1es3ne0caaid/5NCxXTaq9qG4y2cGmUQKEQ/a320a2c97bef4c948cbf4e76be51b751/read-receipts-django-first-page.png)\n\n## Set up an app on Pusher\n\nAt this point, Django is ready and set up. We now need to set up Pusher, as well as grab our app credentials.\nWe need to sign up on [Pusher](https://pusher.com/signup) and create a new app, and also copy our secret, application key and application id.\n\n![read-receipts-django-create-app](//images.contentful.com/1es3ne0caaid/5DChe3XUIgmIYCSA2Qwym2/cfe9e029cad08826ebca29e432976443/read-receipts-django-create-app.png)\n\nThe next step is to install the required libraries:\n\n```\n    pip install pusher\n```\n\nIn the above bash command, we installed one package, `pusher`. This is the official Pusher library for Python, which we will be using to trigger and send our messages to Pusher.\n\n## Creating our application\n\nFirst, let us create a model class, which will generate our database structure.\nLet's open up `message\\models.py` and replace the content with the following:\n\n```\n    from django.db import models\n    \n    from django.contrib.auth.models import User\n    # Create your models here.\n    class Conversation(models.Model):\n        user = models.ForeignKey(User, on_delete=models.CASCADE)\n        message = models.CharField(blank=True, null=True, max_length=225)\n        status = models.CharField(blank=True, null=True, max_length=225)\n        created_at = models.DateTimeField(auto_now=True)\n```\n\nIn the above block of code, we defined a model called `Conversation`. The conversation table consists of the following fields:\n\n- A field to link the message to the user that created it\n- A field to store the message\n- A field to store the status of the message\n- A filed to store the date and time the message was created\n\n### Running migrations\nWe need to make migrations and also run them, so our database table can be created. To do that, let us run the following in our terminal:\n\n```\n    python manage.py makemigrations\n    \n    python manage.py migrate\n```\n\n### Creating our views\nIn Django, the views do not necessarily refer to the HTML structure of our application. In fact, we can see it as our `Controller` as referred to in some other frameworks.\nLet us open up our `views.py` in our `message` folder and replace the content with the following:\n\n```\n    from django.shortcuts import render\n    from django.contrib.auth.decorators import login_required\n    from django.views.decorators.csrf import csrf_exempt\n    from pusher import Pusher\n    from .models import *\n    from django.http import JsonResponse, HttpResponse\n    \n    # instantiate pusher\n    pusher = Pusher(app_id=u'XXX_APP_ID', key=u'XXX_APP_KEY', secret=u'XXX_APP_SECRET', cluster=u'XXX_APP_CLUSTER')\n    # Create your views here.\n    #add the login required decorator, so the method cannot be accessed withour login\n    @login_required(login_url='login/')\n    def index(request):\n        return render(request,\"chat.html\");\n    \n    #use the csrf_exempt decorator to exempt this function from csrf checks\n    @csrf_exempt\n    def broadcast(request):\n        # collect the message from the post parameters, and save to the database\n        message = Conversation(message=request.POST.get('message', ''), status='', user=request.user);\n        message.save();\n        # create an dictionary from the message instance so we can send only required details to pusher\n        message = {'name': message.user.username, 'status': message.status, 'message': message.message, 'id': message.id}\n        #trigger the message, channel and event to pusher\n        pusher.trigger(u'a_channel', u'an_event', message)\n        # return a json response of the broadcasted message\n        return JsonResponse(message, safe=False)\n    \n    #return all conversations in the database\n    def conversations(request):\n        data = Conversation.objects.all()\n        # loop through the data and create a new list from them. Alternatively, we can serialize the whole object and send the serialized response \n        data = [{'name': person.user.username, 'status': person.status, 'message': person.message, 'id': person.id} for person in data]\n        # return a json response of the broadcasted messgae\n        return JsonResponse(data, safe=False)\n    \n    #use the csrf_exempt decorator to exempt this function from csrf checks\n    @csrf_exempt\n    def delivered(request, id):\n    \n        message = Conversation.objects.get(pk=id);\n        # verify it is not the same user who sent the message that wants to trigger a delivered event\n        if request.user.id != message.user.id:\n            socket_id = request.POST.get('socket_id', '')\n            message.status = 'Delivered';\n            message.save();\n            message = {'name': message.user.username, 'status': message.status, 'message': message.message, 'id': message.id}\n            pusher.trigger(u'a_channel', u'delivered_message', message, socket_id)\n            return HttpResponse('ok');\n        else:\n            return HttpResponse('Awaiting Delivery');\n```\n\nIn the code above, we have defined four main functions which are:\n\n- `index`\n- `broadcast`\n- `conversation`\n- `delivered`\n\nIn the `index` function, we added the login required decorator, and we also passed the login URL argument which does not exist yet, as we will need to create it in the `urls.py` file. Also, we rendered a default template called `chat.html` which we will also create soon.\nIn the `broadcast` function, we retrieved the content of the message being sent, saved it into our database, we finally trigger a Pusher request passing in our message dictionary, as well as a channel and event name.\nIn the `conversations` function, we simply grab all conversations and return them as a JSON response\nFinally, we have the `delivered` function, which is the function which takes care of our read receipt feature.\nIn this function, we get the conversation by the ID supplied to us, we then verify that the user who wants to trigger the delivered event isn’t the user who sent the message in the first place. Also, we pass in the `socket_id` so that Pusher does not broadcast the event back to the person who triggered it. \nThe `socket_id` stands as an identifier for the socket connection that triggered the event.\n\n### Populating the urls.py\nLet us open up our `pusher_message\\urls.py` file and replace with the following:\n\n```\n    \"\"\"pusher_message URL Configuration\n    \n    The `urlpatterns` list routes URLs to views. For more information please see:\n        https://docs.djangoproject.com/en/1.11/topics/http/urls/\n    Examples:\n    Function views\n        1. Add an import:  from my_app import views\n        2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')\n    Class-based views\n        1. Add an import:  from other_app.views import Home\n        2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')\n    Including another URLconf\n        1. Import the include() function: from django.conf.urls import url, include\n        2. Add a URL to urlpatterns:  url(r'^blog/', include('blog.urls'))\n    \"\"\"\n    from django.conf.urls import url\n    from django.contrib import admin\n    from django.contrib.auth import views\n    from message.views import *\n    \n    urlpatterns = [\n        url(r'^$', index),\n        url(r'^admin/', admin.site.urls),\n        url(r'^login/$', views.login, {'template_name': 'login.html'}), \n        url(r'^logout/$', views.logout, {'next_page': '/login'}),\n        url(r'^conversation$', broadcast),\n        url(r'^conversations/$', conversations),\n        url(r'^conversations/(?P\u003cid\u003e[-\\w]+)/delivered$',delivered)\n    ]\n```\n\nWhat has changed in this file? We have added 6 new routes to the file. \nWe have defined the entry point, and have assigned it to our `index` function. Next, we defined the login URL, which the `login_required` decorator would try to access to authenticate users. We have used the default `auth` function to handle it but passed in our own custom template for login, which we will create soon.\nNext, we defined the routes for the `conversation` message trigger, all `conversations`, and finally the `delivered` conversation.\n\n### Creating the HTML files\nNow we will need to create two HTML pages, so our application can run smoothly. We have referenced two HTML pages in the course of building the application which are:\n\n- login.html\n- chat.html\n\nLet us create a new folder in our `messages` folder called `templates`.\nNext, we create a file called `login.html` in our `templates` folder and replace it with the following:\n\n```\n    \u003clink href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n      {% if form.errors %}\n    \n    \u003ccenter\u003e\u003cp\u003eYour username and password didn't match. Please try again.\u003c/p\u003e\u003c/center\u003e\n    {% endif %}\n    \n    {% if next %}\n        {% if user.is_authenticated %}\n    \n    \u003ccenter\u003e\u003cp\u003eYour account doesn't have access to this page. To proceed,\n        please login with an account that has access.\u003c/p\u003e\u003c/center\u003e\n        {% else %}\n    \n    \u003ccenter\u003e\u003cp\u003ePlease login to see this page.\u003c/p\u003e\u003c/center\u003e\n        {% endif %}\n    {% endif %}\n    \n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-4 col-md-offset-4\"\u003e\n                \u003cdiv class=\"login-panel panel panel-default\"\u003e\n                    \u003cdiv class=\"panel-heading\"\u003e\n                        \u003ch3 class=\"panel-title\"\u003ePlease Sign In\u003c/h3\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"panel-body\"\u003e\n                        \u003cform method=\"post\" action=\"\"\u003e\n    {% csrf_token %}\n    \n                            \u003cp class=\"bs-component\"\u003e\n                                \u003ctable\u003e\n                                    \u003ctr\u003e\n                                        \u003ctd\u003e{{ form.username.label_tag }}\u003c/td\u003e\n                                        \u003ctd\u003e{{ form.username }}\u003c/td\u003e\n                                    \u003c/tr\u003e\n                                    \u003ctr\u003e\n                                        \u003ctd\u003e{{ form.password.label_tag }}\u003c/td\u003e\n                                        \u003ctd\u003e{{ form.password }}\u003c/td\u003e\n                                    \u003c/tr\u003e\n                                \u003c/table\u003e\n                            \u003c/p\u003e\n                            \u003cp class=\"bs-component\"\u003e\n                                \u003ccenter\u003e\n                                    \u003cinput class=\"btn btn-success btn-sm\" type=\"submit\" value=\"login\" /\u003e\n                                \u003c/center\u003e\n                            \u003c/p\u003e\n                            \u003cinput type=\"hidden\" name=\"next\" value=\"{{ next }}\" /\u003e\n                        \u003c/form\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\nNext, let us create the `chat.html` file and replace it with the following:\n\n     \u003chtml\u003e\n        \u003chead\u003e\n            \u003ctitle\u003e\n            \u003c/title\u003e\n        \u003c/head\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"/\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.3.2/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.1/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"//js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cstyle\u003e\n            .chat\n    {\n        list-style: none;\n        margin: 0;\n        padding: 0;\n    }\n    \n    .chat li\n    {\n        margin-bottom: 10px;\n        padding-bottom: 5px;\n        border-bottom: 1px dotted #B3A9A9;\n    }\n    \n    .chat li.left .chat-body\n    {\n        margin-left: 60px;\n    }\n    \n    .chat li.right .chat-body\n    {\n        margin-right: 60px;\n    }\n    \n    \n    .chat li .chat-body p\n    {\n        margin: 0;\n        color: #777777;\n    }\n    \n    .panel .slidedown .glyphicon, .chat .glyphicon\n    {\n        margin-right: 5px;\n    }\n    \n    .panel-body\n    {\n        overflow-y: scroll;\n        height: 250px;\n    }\n    \n    ::-webkit-scrollbar-track\n    {\n        -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\n        background-color: #F5F5F5;\n    }\n    \n    ::-webkit-scrollbar\n    {\n        width: 12px;\n        background-color: #F5F5F5;\n    }\n    \n    ::-webkit-scrollbar-thumb\n    {\n        -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);\n        background-color: #555;\n    }\n    \n        \u003c/style\u003e\n        \u003cbody\u003e\n            \u003cdiv class=\"container\" id=\"app\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-12\"\u003e\n                \u003cdiv class=\"panel panel-primary\"\u003e\n                    \u003cdiv class=\"panel-heading\"\u003e\n                        \u003cspan class=\"glyphicon glyphicon-comment\"\u003e\u003c/span\u003e Chat\n    \n                    \u003c/div\u003e\n                    \u003cdiv class=\"panel-body\"\u003e\n                        \u003cul class=\"chat\" id=\"chat\" \u003e\n                           \u003cli class=\"left clearfix\" v-for=\"data in conversations\"\u003e\n                            \u003cspan class=\"chat-img pull-left\" \u003e\n                               \u003cimg :src=\"'http://placehold.it/50/55C1E7/fff\u0026amp;text='+data.name\" alt=\"User Avatar\" class=\"img-circle\"/\u003e \n                            \u003c/span\u003e\n                                \u003cdiv class=\"chat-body clearfix\"\u003e\n                                    \u003cdiv class=\"header\"\u003e\n                                        \u003cstrong class=\"primary-font\" v-html=\"data.name\"\u003e  \u003c/strong\u003e \u003csmall class=\"pull-right text-muted\" v-html=\"data.status\"\u003e\u003c/small\u003e\n                                    \u003c/div\u003e\n                                    \u003cp v-html=\"data.message\"\u003e\n    \n                                    \u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/li\u003e\n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"panel-footer\"\u003e\n                        \u003cdiv class=\"input-group\"\u003e\n                            \u003cinput id=\"btn-input\" v-model=\"message\" class=\"form-control input-sm\" placeholder=\"Type your message here...\" type=\"text\"\u003e\n                            \u003cspan class=\"input-group-btn\"\u003e\n                                \u003cbutton class=\"btn btn-warning btn-sm\" id=\"btn-chat\" @click=\"sendMessage()\"\u003e\n                                    Send\u003c/button\u003e\n                            \u003c/span\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n### Vue component and Pusher bindings\nThat’s it! Now, whenever a new message is delivered, it will be broadcast and we can listen using our channel to update the status in realtime.\nBelow is our Example component written using Vue.js\nPlease note: In the Vue component below, a new function called `**queryParams**` was defined to serialize our POST body so it can be sent as `x-www-form-urlencoded` to the server in place of as a `payload`. We did this because Django cannot handle requests coming in as** `payload`. \n\n```\n    \u003cscript\u003e\n        var pusher = new Pusher('XXX_APP_KEY',{\n          cluster: 'XXX_APP_CLUSTER'\n        });\n        var socketId = null;\n        pusher.connection.bind('connected', function() {\n            socketId = pusher.connection.socket_id;\n    \n        });\n    \n        var my_channel = pusher.subscribe('a_channel');\n        var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } };\n        new Vue({\n            el: \"#app\",\n            data: {\n                    'message': '',\n                    'conversations': []\n            },\n            mounted() {\n                this.getConversations();\n                this.listen();\n    \n            },\n            methods: {\n                sendMessage() {\n                    axios.post('/conversation', this.queryParams({message: this.message}), config)\n                        .then(response =\u003e {\n                            this.message = '';\n                        });\n                },\n                getConversations() {\n                    axios.get('/conversations').then((response) =\u003e {\n                        this.conversations = response.data;\n                        this.readall();\n                    });  \n                },\n                listen() {\n                    my_channel.bind(\"an_event\", (data)=\u003e {\n                        this.conversations.push(data);\n                        axios.post('/conversations/'+ data.id +'/delivered', this.queryParams({socket_id: socketId}));\n                    })\n    \n                     my_channel.bind(\"delivered_message\", (data)=\u003e {\n                        for(var i=0; i \u003c this.conversations.length; i++){\n                            if (this.conversations[i].id == data.id){\n                                this.conversations[i].status = data.status;\n                            }\n                        }\n    \n                    })\n                },\n                readall(){\n    \n                      for(var i=0; i \u003c this.conversations.length; i++){\n                            if(this.conversations[i].status=='Sent'){\n                                axios.post('/conversations/'+ this.conversations[i].id +'/delivered');\n                            }\n                        }\n    \n                },\n                queryParams(source) {\n                    var array = [];\n    \n                    for(var key in source) {\n                        array.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(source[key]));\n                    }\n    \n                    return array.join(\"\u0026\");\n                    }\n            }\n        });\n    \u003c/script\u003e\n```\n\nBelow is the image demonstrating what we have built:\n\n![read-receipts-django-demo](//images.contentful.com/1es3ne0caaid/5auL05NhAkEOWgKUQwgYe0/1f24f2b4fd2df127505cdc1556d2327b/read-receipts-django-demo.gif)\n\n## Conclusion\n\nIn this article, we have covered how to create a read receipt framework using Django and Pusher. We have gone through exempting certain functions from CSRF checks, as well as exempting the broadcaster from receiving an event they triggered.","metaTitle":"Build read receipts using Django","metaDescription":"Create read receipts for your chat application with Django, Vue.js, HTML and integrate realtime features."}}],"defaultValue":"Chat","queryType":"tag","pages":4,"route":"/tutorials","query":{"tag":"Chat","page":"3"}}},"page":"/tutorials","query":{"tag":"Chat","page":"3"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Chat&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:37:56 GMT -->
</html>