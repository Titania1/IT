<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=React%20Native&page=4 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:38:13 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">33</span> tutorials for “<span class="css-npldjc ehwuahf2">React Native</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials8811.html?product=Channels&amp;tag=React%20Native" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials7ab3.html?product=Beams&amp;tag=React%20Native" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="React Native"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/react-native-development-tools-part-3-testing-tools.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">React Native</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">React Native development tools - Part 3: Testing tools</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This is the third in a three part tutorial series on React Native development tools. In this part, look at testing with ...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/continuous-integration-react-native-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with continuous integration in React Native - Part 3: Custom CI setup with Bitrise</h3><p class="css-k12xad e5jrto45">This three-part series will guide you through setting up continuous integration for your React Native projects. In part ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/continuous-integration-react-native-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with continuous integration in React Native - Part 2: Starting CI with App Center</h3><p class="css-k12xad e5jrto45">This three-part series will guide you through setting up continuous integration for your React Native projects. In part ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/continuous-integration-react-native-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with continuous integration in React Native - Part 1: Introduction</h3><p class="css-k12xad e5jrto45">This three-part series will guide you through setting up continuous integration for your React Native projects. In part ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/accessible-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Making accessible React Native apps</h3><p class="css-k12xad e5jrto45">This tutorial looks at ways to improve the accessibility of React Native apps. You will take a (provided) starter app an...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/storybook-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Using Storybook with React Native</h3><p class="css-k12xad e5jrto45">Learn how to use Storybook for React Native development. The tutorial introduces Storybook and the concepts of component...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsd2ed.html?tag=React%20Native&amp;page=3" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials5b52.html?tag=React%20Native&amp;page=1" class="css-5s6711 edg0byb1">1</a><a href="tutorials716b.html?tag=React%20Native&amp;page=2" class="css-5s6711 edg0byb1">2</a><a href="tutorialsd2ed.html?tag=React%20Native&amp;page=3" class="css-5s6711 edg0byb1">3</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials51b9.html?tag=React%20Native&amp;page=4" class="css-2wakph edg0byb1">4</a><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":33,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5ZF5a9WdxuEWaIiQMuiaoC","type":"Entry","createdAt":"2018-10-29T22:18:19.906Z","updatedAt":"2018-10-29T22:18:19.906Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"React Native development tools - Part 3: Testing tools","url":"react-native-development-tools-part-3-testing-tools","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-09-25","description":"This is the third in a three part tutorial series on React Native development tools. In this part, look at testing with Jest and Detox. Configure Sublime Text Editor for debugging, and write tests for a sample app.","prerequisite":"Knowledge of developing React Native apps\nKnowledge of editing config files for Android\nDevelopment environment setup for React Native","content":"This is the final part of a three-part series on React Native development tools where we cover the following tools:\n\n- \u003ca href=\"http://blog.pusher.com/react-native-linting/\" rel=\"noopener\" target=\"_blank\"\u003ePart 1: Linting tools\u003c/a\u003e\n- \u003ca href=\"http://blog.pusher.com/react-native-debugging/\" rel=\"noopener\" target=\"_blank\"\u003ePart 2: Debugging tools\u003c/a\u003e\n- Part 3: Testing tools\n\nIn this part, we’ll cover the following testing tools:\n\n\n- [**Jest**](https://jestjs.io/) - for snapshot testing.\n- [**Detox**](https://github.com/wix/detox) - for end-to-end testing.\n\nThe goal of this tutorial is to get you up and running with these tools quickly. So expect a lot of setups. Aside from that, you’re also going to see these tools in action. We’ll be using a pre-created React Native app to implement the tools. \n\nWhat we’re not going to tackle is how you’re going to design your code so it is easy to test. We’re also not going to tackle every feature the tools have to offer. At the end of the tutorial, I’ll be pointing out to a few resources so you can learn more about them.\n\n\n## Prerequisites\n\nTo follow this tutorial, you need to have knowledge of developing React Native apps. Optionally, you should also be comfortable with editing config files for Android, as we will be doing a lot of that in this tutorial. We don’t have to do a lot of that in iOS since Detox is more matured on iOS.\n\nTo follow this tutorial, you’ll need a computer running Linux or MacOS. I’ve personally tested this tutorial on the following operating systems:\n\n\n- Ubuntu 16.04\n- MacOS High Sierra 10.13.5\n\nFor Windows, I can’t ensure it will work. But the official docs did mention that the tools should also work on Windows.\n\nLastly, this tutorial assumes that you have already setup your machine for React Native development. \n\n\n## Setting up the project\n\nNow that that’s out of the way, let’s go ahead and create a new React Native project for the purpose of using the testing tools:\n\n```\n    git clone https://github.com/anchetaWern/RNTesting.git\n    git checkout starter\n```\n\nTake note of the React Native version we have on the `package.json`  [file](https://github.com/anchetaWern/RNTesting/blob/starter/package.json). It’s at version 0.50 even though at the time of writing this tutorial, the latest version is already at 0.56. We’re doing this because Detox is only proven to work for these versions of React Native:\n\n\n- iOS: \u003c=0.55\n- Android: \u003c=0.51\n\nIn order to target both platforms, we have to downgrade to the lowest of the two. In this case, it should be 0.51. While I was testing it though, I had problems getting Detox to work for React Native version 0.51. That’s why we’re sticking with version 0.50 instead.\n\nIdeally, we want to use the latest version of React Native. But with the current state of Detox, it’s simply not possible. That doesn’t mean that you also have to downgrade the version of your existing project though. You can maintain another copy for testing purposes only. And then gradually upgrade it as support for later React Native versions becomes available.\n\nAll the changes introduced in this tutorial are available on the `testing` [branch](https://github.com/anchetaWern/RNTesting/tree/testing). You can check that out anytime you feel confused about which specific change you need to implement.\n\n\n### Upgrade to Gradle 3\n\nThe next step is to upgrade the Gradle version used by React Native. By default, it still uses version 2, and so do most of the native modules that you’ll find on GitHub (except for projects like [React Native Maps](https://github.com/react-community/react-native-maps)). If you’re worried that you’ll no longer be able to use the native modules that still use Gradle 2, then fret not because there’s a way to update those.\n\nSo why do we need to upgrade to Gradle 3? That’s because Detox also uses Gradle 3. There’s a way to [stick with Gradle 2](https://github.com/wix/detox/blob/97654071573053def90e8207be8eba011408f977/docs/Introduction.Android.md) but new features that will come to Detox won’t be implemented in there because it uses Detox version 6.\n\nLet’s go ahead and start updating the config files so we can upgrade to Gradle 3. First, update `android/build.gradle` with the following:\n\n``` language-gradle\n    buildscript {\n      repositories {\n        jcenter()\n        google() // add this\n      }\n      dependencies {\n        // classpath 'com.android.tools.build:gradle:2.2.3' \n        classpath 'com.android.tools.build:gradle:3.1.0' // replace the above with this\n      }\n      // the rest of the existing config here...\n    }\n    \n    allprojects {\n      repositories {\n        mavenLocal()\n        jcenter()\n        google() // add this\n        maven { ... }\n        // the rest of the existing config here...\n    } \n```\n\nSince this is a new project, your config file will pretty much look the same as mine. If you’re updating an existing project, it’s going to be a bit different, but the overall structure should still be the same.\n\nNext, update `android/gradle/wrapper/gradle-wrapper.properties` with the new `distributionUrl`:\n\n``` language-gradle\n    distributionUrl=https\\://services.gradle.org/distributions/gradle-4.4-all.zip\n```\n\nDon’t be confused by the URL when it says gradle-4.4 while we want to use version 3.1. Because we need to set this to a higher version than what we want to use. \n\nOnce that’s done, execute `react-native run-android` to install the new Gradle and verify that the app is working correctly. Don’t forget to launch an emulator instance (either the default Android emulator or Genymotion), or connect an Android device before doing so. Remember that we’re testing though, so practicality-wise, the devices we’ll be running the tests on are just virtual (Android emulator, iOS simulator).\n\nThat’s all there is to it when it comes to setting up the project. As you have seen, it’s only the Android config which took up most of the time. For iOS, you don’t really need to perform any additional steps in order to prepare the project for Detox and Jest. As long as you have the latest version of Xcode installed, you should be fine.\n\n\n## Setting up Jest\n\nJest is the tool that we’ll be using to implement snapshot testing. The main idea behind snapshot testing is that it allows you to test whether a component has changed. The workflow goes something like this:\n\n\n1. Implement the components.\n2. Write tests that will verify if your component is rendering correctly. \n3. Run the tests. This will create a `yourTestName.snap` file for each of your test files inside the `_tests_/_snapshots_` directory. These files contain what’s actually being rendered by the components you are testing. We’ll go through this in more detail on a later section.\n4. Commit the changes to your version control system.\n5. Every time you make a change, you run the tests again. The tests which already have `.snap`  files will have their output compared to that existing snapshot file. If they don’t match, then there might be an unexpected change with your code. Once you’ve verified that the change is correct, you can either update the existing snapshot or revert the changes you made to your component. This way, the tests will pass again.\n\nAs you can see, snapshot testing isn’t test-driven development. Mainly because you have to write the component first before taking a snapshot. Snapshot testing is mainly used for checking for unexpected changes in your code, and not for directing how you design your code.\n\n### Configuring Jest\n\nWhen you create a new React Native project, it already comes with Jest pre-installed and configured. Though you’ll still have to perform a few steps to ensure it will work nicely with the other tool that we’ll use (Detox).\n\nOn your `package.json` file, you can see the default configuration options for Jest:\n\n``` language-json\n    \"jest\": {\n      \"preset\": \"react-native\",\n    },\n```\n\nUpdate it to look like the following:\n\n``` language-json\n    \"jest\": {\n      \"preset\": \"react-native\",\n      \"testMatch\": [\n        \"\u003crootDir\u003e/__tests__/*\"\n      ]\n    },\n```\n\nThis tells Jest to only look for test files inside the `_tests_` directory. Because by default, it’s going to run every file that looks like a test file. This means, that when we configure Detox later, it will run Detox’s test files as well. We don’t really want that to happen because they are testing two different things.\n\n\n## Setting up Detox\n\nThis section will pretty much go over the same things as the official guides:\n\n\n- [Getting Started](https://github.com/wix/detox/blob/master/docs/Introduction.GettingStarted.md)\n- [Android Introduction](https://github.com/wix/detox/blob/master/docs/Introduction.Android.md) and [Android support status](https://github.com/wix/detox/blob/master/docs/More.AndroidSupportStatus.md)\n\nIn this tutorial though, I’m going to cover some details that aren’t covered in those guides. \n\nWith that out of the way, let’s begin.\n\nIf you only want to test on Android, you’ll only need to globally install the following:\n\n\n- Node 8.3.0 - higher version of Node may also work, but I haven’t personally tested it.\n- Detox CLI\n\nI assume that you have already installed Node by some means. I personally use [nvm](https://github.com/creationix/nvm) to manage Node versions. So I installed the required version using the following commands:\n\n```\n    nvm install 8.3.0\n    nvm alias default 8.3.0\n    nvm use default\n```\n\nOnce that’s done, verify if version 8.3.0 is being used:\n\n```\n    node --version\n```\n\nAfter that, you’ll need to install the **react-native-cli** if you’re using some other Node version before you installed 8.3.0:\n\n```\n    npm install -g react-native-cli\n```\n\nAlso install [Yarn](https://yarnpkg.com/en/), we’ll be using it to install the local dependencies for the React Native project:\n\n```\n    npm install -g yarn\n```\n\nLastly, install the Detox command line tool:\n\n```\n    npm install -g detox-cli\n```\n\n\n### iOS setup\n\nIn order to test in iOS, you still need to have a Mac. I assume you already have [brew](https://brew.sh/) installed so you can simply execute the following commands to install the [Apple simulator utilities](https://github.com/wix/AppleSimulatorUtils). Detox uses it to communicate with the iOS simulator:\n\n```\n    brew tap wix/brew\n    brew install applesimutils\n```\n\n### Setting up Detox in the project\n\nNow we’re ready to install Detox in the project:\n\n```\n    yarn add detox@8.0.0 --dev\n    yarn add mocha@4.0.1 --dev\n```\n\nWe’re installing specific versions because Detox is a relatively new technology. I can’t ensure that this guide will work for you if you installed another version. If you’re just getting started, I recommend you to stick with the versions that we have here to avoid unnecessary headaches. For production cases, you’ll want to use the latest stable version.\n\nNote that [Mocha](https://mochajs.org/) is the test-runner that we’ll be using. But you can also use [Jest](https://jestjs.io/) if you want. Yes, it’s the same thing that we’ll be using for snapshot testing because Jest is a testing framework, it includes everything you need for testing.\n\n### Android setup\n\nFollow this section if you want to test for Android, otherwise, proceed to the next one.\n\nThe first step is to update `android/settings.gradle` file to include Detox:\n\n```\n    rootProject.name = 'rntdd'\n    include ':app'\n    \n    # add the below config\n    include ':detox'\n    project(':detox').projectDir = new File(rootProject.projectDir, '../node_modules/detox/android/detox')\n```\n\nNext, under `android`, update the `compileSdkVersion`, `buildToolsVersion` to version `27`. Then under `android → defaultConfig`, set `minSdkVersion` to `18` and `targetSdkVersion` to `26`:\n\n``` language-gradle\n    // file: android/app/build.gradle\n    \n    android {\n        \n      compileSdkVersion 27 // make sure this is 27\n      buildToolsVersion '27.0.2' // make sure this is 27.0.2\n    \n      defaultConfig {\n        applicationId \"com.rntesting\" // make sure this is the same as the project name you used when you generated the project with react-native init\n        minSdkVersion 18 // make sure this is 18\n        targetSdkVersion 26 // make sure this is 26\n        \n        // next: add testBuildType, missingDimensionStrategy, and testInstrumentationRunner\n          \n        // rest of the config here...\n      }\n    }\n```\n\n\nNext, add the following under `android → defaultConfig`:\n\n```\n    testBuildType System.getProperty('testBuildType', 'debug')  \n    missingDimensionStrategy \"minReactNative\", \"minReactNative46\"\n    testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n```\n\nHere’s a breakdown of what we’ve just added:\n\n\n- `testBuildType` - the build type to be used for testing. This can either be `debug` or `release`. In this case, we’ll be using `debug` since we’re still developing the app.\n- `minReactNative46` - the minimum React Native version supported by Detox. In this case, the project uses version 0.50 so we need to use `minReactNative46` to specify Detox support for React Native version’s that are greater than or equal to version 0.46.\n- `testInstrumentationRunner` - the native module used for running the tests.\n\nNext, update the `dependencies` section and add the following. These are Gradle 3 specific configuration, so if your project uses Gradle 2 then you’ll get an error if you add these. These are used to compile the native Java classes that are needed to implement the tests:\n\n```\n    dependencies {\n      compile fileTree(dir: \"libs\", include: [\"*.jar\"])\n      compile \"com.android.support:appcompat-v7:23.0.1\"\n    \n      // add only the following. The above one's already exists\n      androidTestImplementation(project(path: \":detox\"))\n      androidTestImplementation 'junit:junit:4.12'\n      androidTestImplementation 'com.android.support.test:runner:1.0.1'\n      androidTestImplementation 'com.android.support.test:rules:1.0.1'\n      \n      compile \"com.facebook.react:react-native:+\" // existing\n    }\n```\n\nNext, update `android/build.gradle` to include the following under `allprojects → repositories` (right after the `maven` config):\n\n```\n    buildscript {\n      repositories { \n        google()\n      }\n    }\n```\n\nLastly, create an `android/app/src/androidTest/java/com/rntesting/DetoxTest.java` file and add the following. This is the test class that Detox will be using. Be sure to replace “rntesting” in both the file path and the package name below with the actual name of your project if you’re using another one:\n\n``` language-java\n    // file: android/app/src/androidTest/java/com/rntesting/DetoxTest.java (note: replace rntesting in this file path with the name of your project if it's different)\n    package com.rntesting; // replace with the actual package name\n    \n    import android.support.test.filters.LargeTest;\n    import android.support.test.rule.ActivityTestRule;\n    import android.support.test.runner.AndroidJUnit4;\n    \n    import com.wix.detox.Detox;\n    \n    import org.junit.Rule;\n    import org.junit.Test;\n    import org.junit.runner.RunWith;\n    \n    @RunWith(AndroidJUnit4.class)\n    @LargeTest\n    public class DetoxTest {\n    \n      @Rule\n      public ActivityTestRule\u003cMainActivity\u003e mActivityRule = new ActivityTestRule\u003c\u003e(MainActivity.class, false, false);\n    \n      @Test\n      public void runDetoxTests() throws InterruptedException {\n          Detox.runTests(mActivityRule);\n      }\n    }\n```\n\n### Adding the Detox config\n\nOnce installed, you can now update the `package.json` file to include the `detox` config:\n\n``` language-json\n    {  \n      \"name\": \"RNTesting\",\n      // the rest of package.json here...\n       \"detox\":{  \n          \"configurations\":{  \n             \"ios.sim.debug\":{  \n                \"binaryPath\":\"ios/build/Build/Products/Debug-iphonesimulator/rntdd.app\",\n                \"build\":\"xcodebuild -project ios/rntdd.xcodeproj -scheme rntdd -configuration Debug -sdk iphonesimulator -derivedDataPath ios/build\",\n                \"type\":\"ios.simulator\",\n                \"name\":\"iPhone 7\"\n             },\n             \"android.emu.debug\":{  \n                \"binaryPath\":\"./android/app/build/outputs/apk/debug/app-debug.apk\",\n                \"build\":\"cd android \u0026\u0026 ./gradlew assembleDebug assembleAndroidTest -DtestBuildType=debug \u0026\u0026 cd ..\",\n                \"type\":\"android.emulator\",\n                \"name\":\"Nexus_5X_API_25_x86\"\n             }\n          },\n          \"test-runner\":\"mocha\",\n          \"specs\":\"e2e\",\n          \"runner-config\":\"e2e/mocha.opts\"\n       }\n    }\n```\n\nBreaking down the above config, every setting that has to do with Detox should be inside the `detox` object. Under the `configurations` we have the settings to be used by Detox to run the app on the iOS simulator and Android emulator.\n\nBoth platforms (Android and iOS) have the following options:\n\n\n- `binaryPath` - the path to where the compiled React Native app is located. These paths are standard to both platforms so you don’t really have to change anything.\n- `build` - the command for building the app to be used for testing.\n- `type` - the device type. On iOS, the standard is `ios.simulator`. While on Android, it depends on what you use for testing. If it’s the Android emulator installed using [AVD](https://developer.android.com/studio/run/managing-avds), the value should be `android.emulator`. But if you’re using [Genymotion](https://www.genymotion.com/), the `type` should be `android.attached`. If this is the case, the value of the `name` should be the IP address and port number of the virtual device. The most common value for this is  `192.168.57.101:5555`, but you can use the `adb devices` command to find out. Don’t forget to boot up the virtual device first before doing so.\n- `name` - the name of the device. On iOS, you can find out the device names you can use by executing `xcrun simctl list`. While on Android, you can execute `avdmanager list avd` to get a list of Android emulators installed on your system. If that doesn’t work, you need to find out where Android SDK is installed. After that, go to the `sdk/tools/bin` directory and execute `./avdmanager list avd`. Here’s what the output for those two commands looks like:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/rn-dev-tools-testing-list-devices-ios-571x300.png\" alt=\"rn-dev-tools-testing-list-devices-ios\" width=\"571\" height=\"300\" class=\"aligncenter size-medium wp-image-4911\" /\u003e\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/rn-dev-tools-testing-list-devices-android.png\" alt=\"rn-dev-tools-testing-list-devices-android\" width=\"627\" height=\"154\" class=\"aligncenter size-full wp-image-4910\" /\u003e\n\n### Initialize testing code\n\nOnce you’ve added the config, the next step is to initialize the project for testing. For Mocha, you use the following command:\n\n```\n    detox init -r mocha\n```\n\nThis command creates an `e2e` directory at the root of the project. The directory contains the following files:\n\n\n- `init.js` - contains the initialization code that runs before any of your tests are executed.\n- `mocha.opts` - contains the options for running the tests.\n- `firstTest.spec.js` - the default Detox test file. Open it so you have an idea what a test file looks like. Because that’s what we’re going to work with later.\n\n### Compiling the app\n\nThe next step is to build the app so that the `binaryPath` that we added in the Detox config earlier will actually have a runnable app:\n\n```\n    detox build -c ios.sim.debug\n    detox build -c android.emu.debug\n```\n\nThe command above compiles the debug version of the app for the configuration (`-c` or `--configuration`) that you specified. \n\nThat should work, but in case it doesn’t, try running the project by normal means to see if there are any issues that arise:\n\n```\n    react-native run-android\n    react-native run-ios --simulator=\"iPhone 7\"\n```\n\nIf you get an issue which looks like this on Android: \n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/rn-dev-tools-testing-annotations-conflict.png\" alt=\"rn-dev-tools-testing-annotations-conflict\" width=\"645\" height=\"154\" class=\"aligncenter size-full wp-image-4903\" /\u003e\n\nThat’s because the main app uses a different version of the support-annotations library from the one used by the test app. You can solve it by updating the `android/app/build.gradle` file and set a configuration for a resolution strategy. This tells gradle to use version `23.0.1` of **support-annotations** in case there’s a conflict:\n\n``` \n    configurations.all {\n      resolutionStrategy.force 'com.android.support:support-annotations:23.0.1' \n    }\n    \n    // existing android config\n    android {\n      ...\n    }\n```\n\n### Running the default test\n\nThe final step is to actually run the test:\n\n```\n    detox test\n```\n\nNote that you can also add the `-c` flag here to only run the test on a specific device. This is especially useful if the machine you’re testing on is not so powerful:\n\n```\n    detox test -c android.emu.debug\n    detox test -c ios.sim.debug\n```\n\nIf that doesn’t work and you get an error which looks like this:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/rn-dev-tools-testing-shell-error.png\" alt=\"rn-dev-tools-testing-shell-error\" width=\"832\" height=\"286\" class=\"aligncenter size-full wp-image-4902\" /\u003e\n\nThat means that you need to update the `node_modules/detox/src/devices/android/ADB.js` file. This file contains all the commands that Detox is executing to manipulate the emulator. Look for the `pidof` method and replace the first command which looks like this:\n\n``` language-javascript\n    async pidof(deviceId, bundleId) {\n      const processes = await this.shell(deviceId, `ps -AMo NAME,PID`);\n      // rest of the method here...\n    }\n```\n\nWith this:\n\n``` language-javascript\n    async pidof(deviceId, bundleId) {\n      const processes = await this.shell(deviceId, `ps`);\n      // rest of the method here...\n    }\n```\n\nWe need to do this because certain Android versions. Those that have API version 25 and below doesn’t seem to recognize the `ps -AMo NAME,PID` command. That’s why putting just `ps` works.\n\nSave the file and run the test command again. That should solve the issue. This time though, you’ll get another issue:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/rn-dev-tools-testing-detox-fail-643x300.png\" alt=\"rn-dev-tools-testing-detox-fail\" width=\"643\" height=\"300\" class=\"aligncenter size-medium wp-image-4904\" /\u003e\n\nThis one is completely normal because Detox is running the test located at `e2e/firstTest.spec.js`. If you open it, it should contain three assertions for elements which don’t exist in the app. That’s why it’s failing. We’ll work on this on the **Detox in action** section. But first, let’s look at how we can work with Jest to implement snapshot testing for the app.\n\nFor Windows users who gets an error similar to the following:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/rn-dev-tools-testing-detox-windows-issue.png\" alt=\"rn-dev-tools-testing-detox-windows-issue\" width=\"563\" height=\"267\" class=\"aligncenter size-full wp-image-4905\" /\u003e\n\nThis error is due to Windows not being able to properly parse the transfer of commands from Detox. So the solution is to just manually execute the `build` command you have on the `package.json` file:\n\n```\n    cd android \u0026\u0026 ./gradlew assembleDebug assembleAndroidTest -DtestBuildType=debug \u0026\u0026 cd ..\n```\n\nIf this doesn’t work, try to execute the commands one by one. Also, I recommend you use Git Bash if you keep getting errors.\n\nIf you’re having problems getting the above setup to work, I recommend you to go through the following troubleshooting guides first:\n\n\n- [Troubleshooting installation](https://github.com/wix/detox/blob/master/docs/Troubleshooting.Installation.md)\n- [Troubleshooting running tests](https://github.com/wix/detox/blob/master/docs/Troubleshooting.RunningTests.md)\n- [Troubleshooting synchronization](https://github.com/wix/detox/blob/master/docs/Troubleshooting.Synchronization.md)\n- [Troubleshooting flakiness](https://github.com/wix/detox/blob/master/docs/Troubleshooting.Flakiness.md)\n\nOnce you’ve exhausted those, search for the specific issue you’re having on the [issues page](https://github.com/wix/detox/issues) or [Stack Overflow](https://stackoverflow.com/questions/tagged/detox).\n\n\n## Jest in action\n\nAs mentioned earlier, a React Native project already comes with a test which you can readily execute. Go ahead and try running it while on the root directory of the project:\n\n```\n    yarn test\n```\n\nThat should give you the following output:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/rn-dev-tools-testing-jest-first-run.png\" alt=\"rn-dev-tools-testing-jest-first-run\" width=\"343\" height=\"190\" class=\"aligncenter size-full wp-image-4907\" /\u003e\n\nThis means that the test has passed. By default, it will pass. But as you make changes to your codebase, there will be some unexpected changes. That’s what Jest is meant to test, unintentional changes which break the standard that you’ve initially set for the code. \n\n### Solving asset transform issue\n\nNote that if you have an issue which looks like the following. It means that the image is being treated as a JavaScript module instead of an asset:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/rn-dev-tools-testing-jest-transform-434x300.png\" alt=\"rn-dev-tools-testing-jest-transform\" width=\"434\" height=\"300\" class=\"aligncenter size-medium wp-image-4909\" /\u003e\n\nTo solve this, create a `fileTransformer.js` file at the root of the project directory and put the following. This returns the path of the asset, in this case, an image. Instead of its source:\n\n``` language-javascript\n    // fileTransfomer.js\n    const path = require('path');\n    \n    module.exports = {\n      process(src, filename, config, options) {\n        return 'module.exports = ' + JSON.stringify(path.basename(filename)) + ';';\n      },\n    };\n```\n\nThen in the `package.json` file, update the `jest` config to use the `fileTransformer.js` file for transforming the assets used in the project (I’ve gone ahead and included every image file extension, although we’re only using `.jpg` in this project):\n\n``` language-json\n    \"jest\": {\n      \"preset\": \"react-native\",\n      \"testMatch\": [\n        \"\u003crootDir\u003e/__tests__/*\"\n      ],\n      // add the following:\n      \"transform\": {\n        \"\\\\.(jpg|jpeg|png|gif)$\": \"\u003crootDir\u003e/fileTransformer.js\"\n      }\n    },\n    // the rest of package.json\n```\n\nOnce you’ve added that, the tests should now run.\n\nBefore we write some tests for the app, let’s first try out if Jest is really working as expected. Since we already ran the test, Jest should have stored a snapshot of that file inside the `_tests_/_snapshots_` directory. The filename should be the same as the name of the test, but with an additional `.snap` extension. So for the default test, there should be an `App.js.snap` file. If you open it, you should see the render tree of the `App` component.\n\nLet’s prove that the test will fail if we make a change to any child of the `App` component. Open the `src/components/PokemonLoader.js` and set the background color:\n\n``` language-javascript\n    const styles = {\n      textContainer: {\n        flex: 1,\n        alignItems: \"center\",\n        backgroundColor: \"#fff\", // add this\n      },\n      // the rest of the styles here...\n    }\n```\n\nThen on the `_tests_/App.js` file, replace the default test with the following:\n\n``` language-javascript\n    it(\"App is rendered correctly\", () =\u003e {\n      const tree = renderer.create(\u003cApp /\u003e).toJSON();\n      expect(tree).toMatchSnapshot();\n    });\n```\n\nThe code above checks if the render tree of the `App` component matches the one in the `App.js.snap` file. \n\nTo verify, run the test again with `yarn test` and you should see an output similar to the following:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/rn-dev-tools-testing-jest-failed-274x300.png\" alt=\"rn-dev-tools-testing-jest-failed\" width=\"274\" height=\"300\" class=\"aligncenter size-medium wp-image-4906\" /\u003e\n\nAs you can see from the above screenshot, the test is failing, and it shows exactly which specific line caused the failure.\n\nIf the change you’ve introduced is correct, you can update the snapshot by adding the `-u` flag to the command:\n\n```\n    yarn test -u\n```\n\nThis updates the `.snap` file to add the `backgroundColor: \"#fff``\"` style declaration. At this point, you can then commit both the component and snap file to version control.\n\n### Adding a test\n\nNow it’s time for us to add a test. But before we do that, it’s important to have an understanding of how the app works. So in case you haven’t tried it yet, now is the perfect time to run the app:\n\n```\n    react-native run-android\n    react-native run-ios\n```\n\nTry it out, and take note of how it works. Then think of how you can say the app is working correctly.\n\nSince this is just a tiny app, we’re going to add the test inside the `_tests_/App.js` file. For larger apps though, you might want to have a separate file for each page of the app, or group the tests based on related functionality. \n\nThe first and last thing that we’re going to test is whether the `Card` component renders correctly and consistently, given the same data:\n\n``` language-javascript\n    import Card from \"../src/components/Card\"; // the Card component from the app\n    import pokemonData from \"./data/pokemon.json\"; // the data to be used by the card\n    \n    it(\"card renders correctly\", () =\u003e {\n      const tree = renderer\n        .create(\u003cCard fetching={false} data={pokemonData} /\u003e)\n        .toJSON();\n      expect(tree).toMatchSnapshot();\n    });\n```\n\nAs you can see, this follows the same structure as the sample test from earlier. The only difference is that we’re testing a specific component that’s rendered inside the main one. Also, we’re hardcoding the props that are normally passed in through `mapStateToProps`.\n\nYou can find the contents for the `pokemon.json` file [here](https://github.com/anchetaWern/RNTesting/blob/master/__tests__/data/pokemon.json). Place it inside the `_tests_/data` folder.\n\nOther parts of the app which you might want to test are the reducers. To verify if the way they specify how the state will change is correct, given a specific action. \n\nYou can also interact with the components (for example: click a button, enter a text on a text field) and verify if their state is updated correctly. I’ll be leaving some links in the last section for further reading.\n\n\n## Detox in action\n\nDetox is used for automating the tests that real users would normally do. If you’re coming from a web development background, Detox’s counterpart is [Selenium](https://www.seleniumhq.org/). The workflow looks something like this:\n\n\n1. Write code that will automate user interactions. Things like clicking a button, or typing some text in a text field.\n2. Write code that will verify that the desired effect of that action is met. For example, when a user clicks a button, you want a specific text to show on the screen.\n3. Run the tests to verify the functionality. \n\n### Adding the tests\n\nNow we’re ready to write some tests. This time, we’re going to test the following:\n\n\n- Verify if the Pokeball image is rendered on the screen when the app is first loaded.\n- Verify if the relevant Pokemon data is rendered on the screen after the user clicks on the button for loading a new Pokemon.\n\nThe tests are inside the `e2e` directory. As mentioned earlier, there’s already a test file (`e2e/firstTest.spec.js`) created for you. Rename the file to `pokemonLoadingTest.spec.js`, open it and change the description:\n\n``` language-javascript\n    describe(\"Pokemon data is loading\", () =\u003e {\n      // rest of the code here...\n    });\n```\n\nThe name of the file and the description should match the specific functionality (or group of functionalities) that you want to test. In this case, we’ll simply include all the tests in a single file since the functionality we’re testing is all related.\n\nThe first bit of code you will see after that is telling Detox to reload the React Native app. Note that this does not have a similar effect to when you reload the app using the `⌘ + r`, `rr`, or `Ctrl + r` on the Android or iOS simulator. So if you made some changes to the code, it wouldn’t actually trigger the watcher to recompile and update the app for you. This method runs before running any of the tests that will be included in this file:\n  \n``` language-javascript\n    beforeEach(async () =\u003e {\n      await device.reloadReactNative();\n    });\n```\n\nNow, let’s add the first test. That is, to verify if the Pokeball image is being rendered. Because that’s the only visible element which the user can click when the app is first loaded. The easiest way to target it is by adding a `testID` prop. Use a unique ID that describes what the element is:\n\n``` language-javascript\n    // src/components/PokemonLoader.js\n    {!pokemon \u0026\u0026 (\n      \u003cImage\n        source={pokeball}\n        resizeMode={\"contain\"}\n        style={styles.pokeBall}\n        testID=\"pokeball_image\"\n      /\u003e\n    )}\n```\n\nThen in the test file, add the test for verifying if the component with that specific ID is being rendered and is visible on the screen. Note that if the component is under the non-visible area of the screen, the test will fail even if it’s rendered:\n\n``` language-javascript\n    // e2e/pokemonLoadingTest.spec.js\n    \n    beforeEach(...);\n    \n    // add this\n    it(\"should show Pokeball image on app load\", async () =\u003e {\n      await expect(element(by.id(\"pokeball_image\"))).toBeVisible(); // 75% of the tested component should be visible on the screen\n    });\n```\n\nAt this point, you can already run the test:\n\n```\n    react-native start # run the watcher\n    detox test -c android.emu.debug # or ios.sim.debug \n```\n\nNote that we have to run the watcher first before running the test. Since we’re in debug mode, the app wouldn’t actually work if the watcher isn’t running. Also, if you’re testing on iOS, running the test doesn’t automatically open the iOS simulators UI (although it’s already running in the background). So if you want to see the actions being performed, you have to execute `open -a Simulator` on your terminal.\n\nOnce that’s done, Detox should uninstall the app (if it already exists), re-install it, launch it, and then run the tests. The result should look something like this:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/rn-dev-tools-testing-jest-passed.png\" alt=\"rn-dev-tools-testing-jest-passed\" width=\"501\" height=\"133\" class=\"aligncenter size-full wp-image-4908\" /\u003e\n\nSince we’re in debug mode, and any changes you make to the code will get recompiled by the watcher, you can actually just reuse the installed app. This bypasses the uninstalling and re-installing of the app and immediately proceeds with launching it and running the tests:\n\n```\n    detox test -c android.emu.debug --reuse\n```\n\nThough if you make changes to the code, don’t forget to reload the app so the watcher recompiles the code.\n\nLet’s proceed with the final test. In this test, we want to verify whether all the relevant Pokemon data shows up in the screen when the user clicks the button for loading a new Pokemon. Update the `src/components/Card.js` and add a `testID` to the components which display all the relevant data. This includes the sprite, name, types, and description of the Pokemon:\n\n``` language-javascript\n    \u003cImage\n      style={styles.cardImage}\n      source={{ uri: image }}\n      resizeMode={\"cover\"}\n      testID=\"pokemon_sprite\"\n    /\u003e\n    ...\n    \u003cText style={styles.title} testID=\"pokemon_name\"\u003e\n      {name}\n    \u003c/Text\u003e\n    ...\n    \u003cView\n      style={styles.typesContainer}\n      testID=\"pokemon_types\"\n    \u003e\n      {this.renderTypes(types)}\n    \u003c/View\u003e\n    ...\n    \u003cText\n      style={styles.description}\n      testID=\"pokemon_description\"\n    \u003e\n      {description}\n    \u003c/Text\u003e\n```\n\nYou also need to update `src/components/PokemonLoader.js` to add a `testID` to the button for loading the Pokemon:\n\n``` language-javascript\n    \u003cTouchableOpacity\n      onPress={requestPokemon}\n      testID=\"action_button\"\n    \u003e\n```\n\nNext, add the test to the test file:\n\n``` language-javascript\n    // e2e/pokemonLoadingTest.spec.js\n    it(\"should show relevant Pokemon data after clicking the button and loading the data from the API\", async () =\u003e {\n      await element(by.id(\"action_button\")).tap(); // click the button\n      \n      // verify that the components showing the relevant data exists\n      await expect(element(by.id(\"pokemon_sprite\"))).toExist();\n      await expect(element(by.id(\"pokemon_name\"))).toExist();\n      await expect(element(by.id(\"pokemon_types\"))).toExist();\n      await expect(element(by.id(\"pokemon_description\"))).toExist();\n    });\n```\n\nFrom the code above, you can see how simply it performs actions on a specific element. After the action is performed, we can immediately verify if the expected components are rendered in the screen. Previously, we’ve used `toBeVisible()`, this time, we’re using `toExist()` instead. This is a more relaxed way of checking whether the component exists. As the name suggests, the component doesn’t have to be visible in the screen for the test to pass. All it verifies is whether it is rendered or not.\n\nDetox does all the magic required to keep the tests and the current state of the app in sync. What this means is that Detox knows when the app is busy making a network request, or any other non-trivial processing. Then once that process is done, that’s the only time that it runs the test.\n\nCheck out the following docs to learn more:\n\n\n- [Matchers](https://github.com/wix/detox/blob/master/docs/APIRef.Matchers.md) - ways for targetting a component.\n- [Expectations](https://github.com/wix/detox/blob/master/docs/APIRef.Expect.md) - assertions.\n- [Actions](https://github.com/wix/detox/blob/master/docs/APIRef.ActionsOnElement.md) - actions and user gestures that can be performed on a component.\n\n\n## Further reading\n\nHere are some resources for your continued journey on testing React Native apps:\n\n\n- [Snapshot testing](https://jestjs.io/docs/en/snapshot-testing)\n- [Testing React Native apps](https://jestjs.io/docs/en/tutorial-react-native)\n- [Snapshot Testing React Components with Jest](https://semaphoreci.com/community/tutorials/snapshot-testing-react-components-with-jest)\n- [Testing in React Native: Jest \u0026 Detox](https://pillow.codes/testing-in-react-native-jest-detox-d7b3b79a166a)\n- [Learning to test React Native with Jest](https://medium.com/react-native-training/learning-to-test-react-native-with-jest-part-1-f782c4e30101)\n- [Detox official docs](https://github.com/wix/detox/tree/master/docs)\n- [Detox: Gray Box End to End Testing Framework for Mobile apps](https://hackernoon.com/detox-gray-box-end-to-end-testing-framework-for-mobile-apps-196ccd9564ce)\n- [End-to-end testing on React Native with Detox](https://blog.home.ht/how-to-do-end-to-end-testing-on-react-native-with-detox-2b7f404e7713)\n\n\n## Conclusion\n\nThat’s it! In this tutorial, you’ve learned how to test your React Native apps. Specifically, you’ve learned how to use Jest and Detox to implement snapshot and end-to-end testing. \n\nAs you have seen, Jest is a developer-ready tool while Detox is still getting there, especially on Android. Though, that shouldn’t stop you from using the tool because it’s continually being developed.\n\nYou can view the full source code used in this tutorial on [its GitHub repo](https://github.com/anchetaWern/RNTesting).\n\nThat wraps up the series! In this series, you’ve learned how to lint, debug, and test your React Native project. I hope you’ve gained the necessary skills for improving your React Native code by means of tooling.","metaTitle":"React Native development tools - Part 3: Testing tools","metaDescription":"This is the third in a three part tutorial series on React Native development tools. In this part, look at testing with Jest and Detox. Configure Sublime Text Editor for debugging, and write tests for a sample app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1FEoCINxNKgAOQKe8aEAig","type":"Entry","createdAt":"2018-09-25T20:12:05.291Z","updatedAt":"2018-09-25T20:12:05.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with continuous integration in React Native - Part 3: Custom CI setup with Bitrise","url":"continuous-integration-react-native-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/ReactNativeCI","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-09-25","description":"This three-part series will guide you through setting up continuous integration for your React Native projects. In part three, switch from App Center to Bitrise, and explore testing with Jest and Detox.","prerequisite":"Knowledge of React and React Native is required. Your machine should be set up for React Native development.","content":"This is the third and final part of the series on getting started with continuous integration in React Native. In this part, we’re going to use Bitrise for a more customizable CI setup. Specifically, you’re going to learn the following:\n\n\n- How to set up a React Native project in Bitrise.\n- How to run Jest and Detox tests.\n- How to configure the build workflow.\n\n\n## Prerequisites\n\nTo follow this tutorial, you need to have basic knowledge of React and React Native. The project that we will be working on uses [Redux](https://redux.js.org/), [Redux Saga](https://github.com/redux-saga/redux-saga), and [Detox](https://github.com/wix/detox), so experience in using those will be helpful as well.\n\nThese are the package versions that we will be using:\n\n\n- Node 8.3.0\n- Yarn 1.7.0\n- React Native 0.50\n- Detox 8.1.6\n- Mocha 4.0.1\n\nFor other dependencies, check out the `package.json` file of the project.\n\nReading the [first](https://pusher.com/tutorials/continuous-integration-react-native-part-1) and [second](https://pusher.com/tutorials/continuous-integration-react-native-part-2) part of this series is optional if you already have previous knowledge of how continuous integration is done in React Native. \n\nIf you want to have a brief overview of the app that we’re working on, be sure to check out part one of this series.\n\n\n## Initial project setup\n\nTo make sure the new project will be as clean as possible, we will be initializing a new React Native project and push it on a repo separate to the one we used on part two. Go ahead and create a new repo named **ReactNativeCI_Bitrise** on GitHub. \n\nNext, clone the [project repo](https://github.com/anchetaWern/ReactNativeCI) (the GitHub repo for this series, not the one you just created) and switch to the `part2` branch:\n\n```\n    git clone https://github.com/anchetaWern/ReactNativeCI.git\n    cd ReactNativeCI\n    git checkout part2\n```\n\nWe’re switching to the `part2` branch so we can get the final output from the second part of this series.\n\nNext, initialize a new React Native project which uses the same version as the project repo. We’re naming it **ReactNativeCI** instead of **ReactNativeCI_Bitrise** so we won’t have any naming issues. You can also rename your GitHub repo to **ReactNativeCI** if you don’t have any further use for the source code we used on part two of this series:\n\n```\n    react-native init ReactNativeCI --version react-native@0.50\n    cd ReactNativeCI\n```\n\nAfter that, copy the `src` folder, `App.js`, and `package.json` file from the repo you cloned earlier to the project you just created.\n\nUpdate the `package.json` file so it looks like this. Note that this removes all the App Center packages from part two:\n\n``` json\n    {\n      \"name\": \"ReactNativeCI\",\n      \"version\": \"0.0.1\",\n      \"private\": true,\n      \"scripts\": {\n        \"start\": \"node node_modules/react-native/local-cli/cli.js start\",\n        \"test\": \"jest\"\n      },\n      \"dependencies\": {\n        \"react\": \"16.0.0\",\n        \"react-native\": \"0.50\",\n        \"react-native-vector-icons\": \"^5.0.0\",\n        \"react-redux\": \"^5.0.7\",\n        \"redux\": \"^4.0.0\",\n        \"prop-types\": \"^15.6.2\"\n      },\n      \"devDependencies\": {\n        \"babel-jest\": \"23.4.2\",\n        \"babel-preset-react-native\": \"4.0.0\",\n        \"jest\": \"23.5.0\",\n        \"mocha\": \"4.0.1\",\n        \"react-test-renderer\": \"16.0.0\"\n      },\n      \"jest\": {\n        \"preset\": \"react-native\"\n      }\n    }\n```\n\nNext, install all the packages, link the native modules, and run the app:\n\n```\n    yarn install\n    react-native link\n    react-native run-android\n    react-native run-ios\n```\n\nOnly proceed to the next section if you managed to run the app locally. Because if it wouldn’t work locally then it’s not going to work on the CI server either.\n\nOnce you got the app running, commit your changes and push it to your repo:\n\n```\n    git add .\n    git commit -m \"initialize project\"\n    git remote add origin git@github.com:YOUR_GITHUB_USERNAME/YOUR_REPOS_NAME.git\n    git push origin master\n```\n\n## Adding an app to Bitrise\n\n[Create a Bitrise account](https://app.bitrise.io/users/sign_up) if you haven’t done so already. Once you’re logged in, you’ll be greeted with the following screen:\n\n![rn-ci-bitrise-first-app](//images.ctfassets.net/1es3ne0caaid/5IUmZ9o6ruC6wasysGAa44/a3291cefcf5d84daeafac9e02cb2e7d5/rn-ci-bitrise-first-app.png)\n\nClick on the **Add first app** button to add your app. First, select your GitHub account and the **ReactNativeCI** repository you forked earlier.\n\nAfter that, you have to specify the repository access. This is the method used by Bitrise to get access to the repo you forked earlier. Since you’ve already connected your GitHub account to Bitrise, Bitrise is able to add the SSH key used for accessing your repo to your GitHub account. So click on the **No, auto-add SSH key** button. You will then see it added on your [GitHub’s account security page](https://github.com/settings/security).\n\n![rn-ci-bitrise-private-repo](//images.ctfassets.net/1es3ne0caaid/7EKjm8mYvuQgMMkSSYkMEO/2416a4cff2a30124108e13648aba2b82/rn-ci-bitrise-private-repo.png)\n\nNext, it will ask you to enter the name of the branch. Put **master** on the text field.\n\nAt this point, Bitrise will start validating the repository. This is where Bitrise determines what kind of project this is so that it can recommend a specific configuration that you can select. It might be a good idea to grab a drink while it’s validating as it will take a minute or two:\n\n![rn-ci-bitrise-validate-repo](//images.ctfassets.net/1es3ne0caaid/wr0xSrkOJ2QE6wio4y8OO/c7bfd5456d38b0bb05999a0a73853fd0/rn-ci-bitrise-validate-repo.png)\n\nIf it’s taking too long, you can click on the **Expand Logs** link to see what Bitrise is doing behind the scenes.\n\nOnce it’s done validating the repository, it should have pre-selected the `android` and `gradlew` path. It will then let you select a few more settings. Make sure you end up with the following once you’re done selecting the config:\n\n![rn-ci-bitrise-config](//images.ctfassets.net/1es3ne0caaid/2IVGE8BVIQMwA8882Mm8KO/daa7ef24d17013a96b0b67075b0a1b5a/rn-ci-bitrise-config.png)\n\nFrom the above configuration, you can see that Bitrise has configurations for both Android and iOS. Note that this doesn’t mean that we will only have to maintain a single Bitrise app instance. \n\nJust like in App Center, we’ll still be creating two app instances, one for each platform. This is to separate the code integration (and eventually the release and deployment) of changes made to the app. \n\nDue to how young React Native is as a platform, there will be times when there are unexpected bugs that only occurs only on Android or iOS. This causes a delay in the time in which new features will be tested, integrated, and delivered to users. This separation makes it easy to only release on Android or iOS, but not both.\n\nThe final step is to register a webhook. This allows Bitrise to automatically build the project every time a change is made to the branch you selected earlier. Again, you will see this webhook is registered in your GitHub account’s [security page](https://github.com/settings/security).\n\nOnce that’s done, Bitrise will build the app for the first time. We don’t really want to build the app yet because it will fail, so click on the **Builds** tab and abort the current build. We’ll proceed to manually initiating a build once we’re sure that it will succeed.\n\nNote that when you sign up for a Bitrise account, you’re automatically signed up to the **Developer** plan. This gives you an unlimited number of builds per month, and each build can take up to 45 minutes. So don’t worry about meeting the maximum builds per month until you come out of their 14-day trial. \n\n### Creating the other app instance\n\nBefore creating the other app instance for the other platform, first, rename the one you just created to **ReactNativeCI-Android**. You can do that by going to the **Settings** tab and updating the **Title** field. We need to do this so we won’t get confused because Bitrise uses the name of the GitHub repo by default. \n\nOnce that’s done, go through the same steps that you just followed to create a new app. Don’t forget to rename the new instance to **ReactNativeCI-iOS**.\n\n\n## Making changes to the project\n\nJust like in part two, we’ll be making a few changes in this part as well. This time, we will add the functionality for saving the favorited Pokemon to local storage. This way, they will still be marked as a favorite even after the user restarts the app.\n\nThe Git workflow we’ll be using is still the same as the one we used on part two. I explained the workflow in part one, so if you haven’t read that, you can do so by going to the [CI workflow in React Native](https://pusher.com/tutorials/continuous-integration-react-native-part-1) section in part one of this series.\n\nStart by creating a `develop`  branch and creating a new branch off of that:\n\n```\n    git checkout -b develop\n    git checkout -b local-storage\n```\n\nWe will be using a couple of new dependencies. One for handling local storage, and another for handling asynchronous operations while working with Redux:\n\n```\n    yarn add react-native-simple-store redux-saga\n```\n\nNext, update the `src/action/types.js` file to include the new action types for handling asynchronous activity:\n\n``` javascript\n    export const FAVORITED_CARD = \"favorited_card\";\n    \n    // add these\n    export const LOCAL_DATA_REQUEST = \"local_data_request\"; // when fetching the data from local storage\n    export const LOCAL_DATA_SUCCESS = \"local_data_success\"; // when the data is received\n    export const LOCAL_DATA_FAILURE = \"local_data_failure\"; // when there's an error receiving the data\n```\n\nNext, add the code that will dispatch the actions throughout the lifecycle of the local storage data request:\n\n``` javascript\n    // create new file: src/sagas/index.js\n    import { takeLatest, call, put } from \"redux-saga/effects\"; \n    import store from \"react-native-simple-store\"; // library for working with local storage\n    \n    // action types\n    import {\n      LOCAL_DATA_REQUEST,\n      LOCAL_DATA_SUCCESS,\n      LOCAL_DATA_FAILURE\n    } from \"../actions/types\";\n    \n    // watch for actions dispatched to the store\n    export function* watcherSaga() {\n      yield takeLatest(LOCAL_DATA_REQUEST, workerSaga);\n    }\n    \n    // function for getting the data from local storage\n    function getLocalData() {\n      return store.get(\"app_state\"); // fetch the data from local storage that is stored in the \"app_state\" key\n    }\n    \n    function* workerSaga() {\n      try {\n        const response = yield call(getLocalData); // trigger the fetching of data from local storage\n        const cards = response.cards;\n    \n        yield put({ type: LOCAL_DATA_SUCCESS, cards }); // dispatch the success action (data has been fetched)\n      } catch (error) {\n        yield put({ type: LOCAL_DATA_FAILURE, error }); // dispatch the fail action (data was not fetched)\n      }\n    }\n```\n\nIn the reducer file, make sure that all of the new action types are handled accordingly:\n\n``` javascript\n    // src/reducers/CardReducer.js\n    \n    import {\n      FAVORITED_CARD,\n      \n      // add these:\n      LOCAL_DATA_REQUEST,\n      LOCAL_DATA_SUCCESS,\n      LOCAL_DATA_FAILURE\n    } from \"../actions/types\";\n    \n    import store from \"react-native-simple-store\"; // add this\n    \n    switch (action.type) {\n      case FAVORITED_CARD:\n        let cards = state.cards.map(item =\u003e {\n          return item.id == action.payload\n            ? { ...item, is_favorite: !item.is_favorite }\n            : item;\n        });\n        \n        // update the local storage with the copy of the new data\n        store.update(\"app_state\", {\n          cards\n        });\n    \n        return { ...state, cards };\n      \n      // add these:\n      case LOCAL_DATA_REQUEST: // triggered when requesting data from local storage\n        return { ...state, fetching: true };\n      \n      case LOCAL_DATA_SUCCESS: // triggered when data is successfully returned from local storage\n        return { ...state, fetching: false, cards: action.cards };\n      \n      // only triggered the first time the app is opened because there's no data in the local storage yet\n      case LOCAL_DATA_FAILURE:\n          store.update(\"app_state\", INITIAL_STATE); // initialize the local storage\n          return {\n            ...state,\n            fetching: false,\n            cards: INITIAL_STATE.cards // return the initial state instead\n          };\n    \n      default:\n        return state;\n    }\n```\n\nNext, we need to hook up the watcher saga in the Provider component. This way, it will get triggered when the `LOCAL_DATA_REQUEST` action is dispatched:\n\n``` javascript\n    // src/components/Provider.js\n    import { createStore, applyMiddleware } from \"redux\";\n    \n    import createSagaMiddleware from \"redux-saga\";\n    const sagaMiddleware = createSagaMiddleware();\n    import { watcherSaga } from \"../sagas\";\n    const store = createStore(reducers, applyMiddleware(sagaMiddleware));\n    sagaMiddleware.run(watcherSaga);\n```\n\nLastly, update the `CardList` component to make use of the new `fetching` state, as well as trigger the action for fetching the data from local storage: \n\n``` javascript\n    // src/components/CardList.js\n    import { View, FlatList, ActivityIndicator } from \"react-native\";\n    \n    import { FAVORITED_CARD, LOCAL_DATA_REQUEST } from \"../actions/types\";\n    \n    class CardList extends Component {\n      componentDidMount() {\n        this.props.requestLocalData();\n      }\n      \n      render() {\n        const { fetching, cards } = this.props;\n        \n        // add activity indicator (show while fetching data from local storage)\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cActivityIndicator size=\"large\" color=\"#333\" animating={fetching} /\u003e\n            \u003cFlatList\n              contentContainerStyle={styles.flatlist}\n              data={cards}\n              renderItem={this.renderCard}\n              numColumns={2}\n              keyExtractor={(item, index) =\u003e item.id.toString()}\n            /\u003e\n          \u003c/View\u003e\n        );\n      }\n    }\n    \n    const mapStateToProps = ({ cards, fetching }) =\u003e {\n      return {\n        ...cards,\n        ...fetching\n      };\n    };\n    \n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        // dispatch action instead of returning the object containing the action data\n        favoritedCard: id =\u003e {\n          dispatch({ type: FAVORITED_CARD, payload: id });\n        },\n        // add function for dispatching action for initiating local storage data request\n        requestLocalData: () =\u003e {\n          dispatch({ type: LOCAL_DATA_REQUEST });\n        }\n      };\n    };\n    \n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps\n    )(CardList);\n```\n\nOnce that’s done, update the snapshot (this was added in the starter app so don’t worry about adding it) and commit the changes:\n\n```\n    yarn test -u \n    git add .\n    git commit -m \"add local storage functionality\"\n```\n\nAt this point, do some manual testing by marking a few Pokemon as a favorite then relaunch the app. If the ones you selected is still selected when the app is relaunched, it means that the new feature is working.\n\nOnce you’ve confirmed that the new feature is working, switch back to the `develop` branch and merge the new feature:\n\n```\n    git checkout develop\n    git merge local-storage\n    git branch -d local-storage\n```\n\nWe’re not going to push the changes yet because we still have to add some end-to-end testing code with Detox.\n\n\n## Adding Detox tests\n\nIn this section, we’ll be setting up end-to-end testing for the app using [Detox](https://github.com/wix/detox). \n\n### Setting up Detox\n\nStart by following the [**Install Dependencies**](https://github.com/wix/detox/blob/master/docs/Introduction.GettingStarted.md#step-1-install-dependencies) section on Detox’s **Getting Started** documentation.\n\nNext, create a new branch off of the `develop` branch:\n\n```\n    git checkout develop\n    git checkout -b add-detox-test\n```\n\n#### Setting up Detox on Android\nIf you’re working on an Android app, you need to upgrade to Gradle 3 first because that’s what Detox is using. You can check the following files as your guide for upgrading to Gradle 3. Each line that has to do with the Gradle 3 upgrade is started with a “Gradle3” comment. You can find the [commit](https://github.com/anchetaWern/ReactNativeCI/commit/0a5a6570154a1b8ae78881eaf48f99b76043de57) here, and these are the files to update:\n\n\n- `android/build.gradle`\n- `android/gradle/wrapper/gradle-wrapper.properties`\n\nIf you’re following this tutorial wanting to apply it on your own projects, and you are using packages which uses a lower version of Gradle, you can actually fork the GitHub repo of those packages and update them to use Gradle 3. \n\nOnce you’re done updating the files, execute `react-native run-android` on your terminal to check if everything is still running correctly. Don’t forget to launch a [Genymotion emulator](https://www.genymotion.com/fun-zone/) or Android emulator instance before doing so. \n\nOnce you’ve verified that the app is still running correctly, you can start installing Detox and Mocha:\n\n```\n    yarn add detox@8.1.6 mocha@4.0.1 --dev \n```\n\nNext, you need to link Detox to your Android project. For that, you need to update the following files. All changes that have to do with linking Detox to the project starts with the “Detox” comment. You can find the [commit](https://github.com/anchetaWern/ReactNativeCI/commit/2eabf21e8ec78c23657bf84baa2266e2e90b0768) here, and these are the files to update:\n\n\n- `android/settings.gradle`\n- `android/build.gradle`\n- `android/app/build.gradle`\n- `android/app/src/androidTest/java/com/reactnativeci/DetoxTest.java` - create this.\n\n#### Setting up Detox on iOS\nFor iOS, you don’t really need to do any additional configuration. Just make sure that you have the latest version of Xcode installed (or at least one of the more recent ones). This way, you can avoid having to deal with issues that only occurs when running older versions of Xcode.\n\n### Adding the tests\n\nUpdate your `package.json` file to include the `detox` config. This allows you to specify which specific emulator or simulator to be used by Detox when running the tests as well as the command to execute for building the app on both platforms:\n\n``` json\n    \"detox\": {\n      \"configurations\": {\n        \"ios.sim.debug\": {\n          \"binaryPath\": \"ios/build/Build/Products/Debug-iphonesimulator/reactnativeci.app\",\n          \"build\": \"xcodebuild -project ios/reactnativeci.xcodeproj -scheme reactnativeci -configuration Debug -sdk iphonesimulator -derivedDataPath ios/build\",\n          \"type\": \"ios.simulator\",\n          \"name\": \"iPhone 5s\"\n        },\n        \"android.emu.debug\": {\n          \"binaryPath\": \"./android/app/build/outputs/apk/debug/app-debug.apk\",\n          \"build\": \"cd android \u0026\u0026 ./gradlew assembleDebug assembleAndroidTest -DtestBuildType=debug \u0026\u0026 cd ..\",\n          \"type\": \"android.attached\",\n          \"name\": \"192.168.57.101:5555\" \n        }\n      },\n      \"test-runner\": \"mocha\",\n      \"specs\": \"e2e\",\n      \"runner-config\": \"e2e/mocha.opts\"\n    }\n```\n\nThe only things you need to change in the configuration above is the `type` and `name` under the `ios.sim.debug` and `android.emu.debug`. \n\nIf you’re using Genymotion like I am, you can keep the `android.emu.debug` config in there. Just be sure to replace `192.168.57.101:5555` with the actual IP address that’s listed when you execute `adb devices` while the Genymotion emulator is open.\n\nIf you’re using an Android emulator installed via Android Studio, go to the folder where Android SDK is installed. Once inside, go to the `sdk/tools/bin` directory and execute `./avdmanager list avd`. This will list all of the available Android emulators. Simply copy the displayed name and use it as the value for the `name` under `android.emu.debug`:\n\n![rn-ci-avdmanagerlist](//images.ctfassets.net/1es3ne0caaid/30nY5B9Cfey20s6oCGCKeS/7e623567ddcb4120d79d5fd293651455/rn-ci-avdmanagerlist.png)\n\nIf you’re using the iOS simulator, execute `xcrun simctl list` to list all of the installed iOS simulators on your machine. The value on the left side (for example: iPhone 5s) is the one you put as the value for the `name`:\n\n![rn-ci-xcrunlist](//images.ctfassets.net/1es3ne0caaid/2aDD7ZC4OMQuiwOUqqa6Uo/4835519eb4962b3437ff6ec46d80cd0c/rn-ci-xcrunlist.png)\n\nNext, initialize the test code:\n\n```\n    detox init -r mocha\n```\n\nThis will create an `e2e` folder in your project’s root directory. This folder contains the config and test files for running the tests. \n\nNext, remove the contents of your `e2e/firstTest.spec.js` file and add the following. This will test if all the functionality of the app is working:\n\n``` javascript\n    describe(\"App is functional\", () =\u003e {\n      beforeEach(async () =\u003e {\n        await device.reloadReactNative(); // reload the app before running each of the tests\n      });\n    \n      it(\"should show loader\", async () =\u003e {\n        await expect(element(by.id(\"loader\"))).toExist(); // we're using toExist() instead of isVisible() because the ActivityIndicator component becomes invisible when a testID prop is passed in\n      });\n    \n      it(\"should load cards\", async () =\u003e { // assumes that if one card exists, then all the other cards also exists\n        await expect(element(by.id(\"card-Blaziken\"))).toExist();\n      });\n    \n      it(\"card changes state when it is clicked\", async () =\u003e {\n        await element(by.id(\"card-Entei\")).tap(); // not favorited by default\n        await expect(element(by.id(\"card-Entei-heart\"))).toExist(); // should be marked as favorite\n        await element(by.id(\"card-Entei\")).tap(); // clicking for a second time un-favorites it\n        await expect(element(by.id(\"card-Entei-heart-o\"))).toExist(); // should not be marked as favorite\n      });\n    \n      it(\"card state is kept in local storage\", async () =\u003e {\n        await element(by.id(\"card-Entei\")).tap(); // not favorited by default\n        await device.reloadReactNative(); // has the same effect of re-launching the app\n        await expect(element(by.id(\"card-Entei-heart\"))).toExist(); // should still be favorited after app is reloaded\n      });\n    });\n```\n\nSince we don’t want Jest to be matching our newly created Detox tests, limit it to only look for tests inside the `__tests__` directory:\n\n``` json\n    // package.json\n    \"jest\": {\n      // current config here...\n      \"testMatch\": [\"\u003crootDir\u003e/__tests__/*\"]\n    },\n```\n\nOnce that’s done, we need to hook up the `testID` to each of the components that the tests above are targeting. First, add it to the `ActivityIndicator`:\n\n``` javascript\n    // src/components/CardList.js\n    class CardList extends Component {\n    \n      ...\n    \n      render() {\n        const { fetching, cards } = this.props;\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cActivityIndicator\n              size=\"large\"\n              color=\"#333\"\n              animating={fetching}\n              testID=\"loader\"\n            /\u003e\n            ...\n          \u003c/View\u003e\n        );\n      }\n    }\n```\n\nFor the `Card` component, we’re using the `testID` supplied in the `Icon` component to check whether the card is favorited or not. We’re simply appending the name of the Pokemon (`text`) and the `icon` used to determine this:\n\n``` javascript\n    // src/components/Card.js\n    const Card = ({ image, text, is_favorite, action }) =\u003e {\n      const icon = is_favorite ? \"heart\" : \"heart-o\";\n      return (\n        \u003cTouchableOpacity onPress={action} testID={\"card-\" + text}\u003e\n          \u003cView style={styles.card}\u003e\n            ...\n            \u003cIcon\n              name={icon}\n              size={30}\n              color={\"#333\"}\n              testID={\"card-\" + text + \"-\" + icon}\n            /\u003e\n          \u003c/View\u003e\n        \u003c/TouchableOpacity\u003e\n      );\n    }\n```\n\nDon’t forget to update the Jest snapshot as well:\n\n```\n    yarn test -u\n```\n\nCommit the changes once you’re done:\n\n```\n    git add .\n    git commit -m \"add detox tests\"\n```\n\n## Run the tests locally\n\nThe final step before we get to play around with Bitrise is to run the tests. First, run the Jest snapshot test. This should succeed since we’re always updating the snapshots with `yarn test -u` whenever we make changes to the components:\n\n```\n    yarn test\n```\n\nAs for Detox, start by running whichever platform you’re testing on:\n\n```\n    react-native run-android\n    react-native run-ios\n```\n\nNext, run the tests. Confirm that the metro builder is running (`react-native start`) and be sure to pass the `--reuse` flag so that it will reuse the already installed app:\n\n```\n    detox test -c ios.sim.debug --reuse\n    detox test -c android.emu.debug --reuse\n```\n\nNote that you can also try building the app with Detox and then test it directly:\n\n```\n    detox build -c ios.sim.debug\n    detox build -c android.emu.debug\n    \n    detox test -c ios.sim.debug\n    detox test -c android.emu.debug\n```\n\nThe above method works for iOS, but I never got it to work on Genymotion. So it’s better to opt for the `--reuse` option.\n\nOnce you’ve confirmed that all the tests pass and merge your changes to the `develop` branch:\n\n```\n    git checkout develop\n    git merge add-detox-test\n    git branch -d add-detox-test\n```\n\n## Configure the build workflow\n\nNow we’re ready to configure Bitrise to build the project and run the same tests that we’ve set up for the app.\n\n### Configure the build workflow for iOS\n\nFirst, go to your [app dashboard](https://app.bitrise.io/dashboard) and select **ReactNativeCI-iOS** then go to the **Settings** tab. From there, update the **Default branch** to `develop` and save the changes.\n\nNext, go to the **Workflows** tab and select **Stack**. Select **Xcode 9.4.x…** as the default stack. This should automatically select this stack as the value for **Workflow Specific Tasks** as well. But if not, be sure to pick the same stack and save the changes:\n\n![rn-ci-mac-default-stack](//images.ctfassets.net/1es3ne0caaid/10ILq6NYyu2cskocwCWMAg/0006331aee54cf0da470555dcb492306/rn-ci-mac-default-stack.png)\n\nThe Stack is the type of machine where each of your workflows will be executed. In this case, we’re selecting **Xcode 9.4** because it’s the latest stable version that’s currently available for iOS development. More importantly, it’s the same version of Xcode that I have on my local machine. \n\nTo ensure that your builds will be as smooth flowing as possible, always select a similar stack to your local machine. If that’s not possible, then select the one that’s only a version lower or higher than what you have.\n\nNext, go back to the **Workflows** tab so we can configure each individual step for building the app. Delete everything else except for these steps and save the changes:\n\n\n1. Activate SSH key (RSA private key)\n2. Git Clone Repository \n3. Run npm command - rename this to “Install Packages”\n\nAfter the **Git Clone Repository** step, create a new one called “Install detox dependencies”.\n\n![rn-ci-add-detox-step](//images.ctfassets.net/1es3ne0caaid/6wUX35YGJiCgSMQSEUo006/32b9a315f0545b8e4925b785b78714b1/rn-ci-add-detox-step.png)\n\nA modal window will pop-up asking you to select the step you want to add. Make sure that the **ALL** tab is selected, search for “script”, and click on the one which says “Script”:\n\n![rn-ci-bitrise-add-script](//images.ctfassets.net/1es3ne0caaid/59gJyf6YrmAewcOycUOQ4/98cd62f8a949c7ecc462c8911a36376a/rn-ci-bitrise-add-script.png)\n\nAs you can see, Bitrise has a bunch of pre-written steps. All you have to do is look for them and add it to your own workflow. But for things that don’t have a pre-written script, there are also steps that allow you to add them. One of those is the **Script** step which allows you to supply your own script.\n\nAdd the following script under the **Script content** field and save the changes:\n\n``` bash\n    #!/usr/bin/env bash\n    # fail if any commands fails\n    set -e\n    # debug log\n    set -x\n    \n    echo \"Installing Detox dependencies...\"\n    npm install -g detox-cli\n    brew tap wix/brew\n    brew install applesimutils --HEAD\n```\n\nFrom the script above, you can see that these are the same commands you can find on [Detox’s Getting Started guide](https://github.com/wix/detox/blob/master/docs/Introduction.GettingStarted.md) to install Detox, so be sure to update these with the ones you find on that page in case it changes in the future.\n\nIf you scroll down a little bit, you will see the configuration for this script. Most of the time, you don’t really need to make any change to this one because Bitrise’s default config is already okay:\n\n![rn-ci-bitrise-script-config](//images.ctfassets.net/1es3ne0caaid/6e8h4z7m9iksQsi0Y4IYme/92096f458a66f2666ff1ca5c4ae86684/rn-ci-bitrise-script-config.png)\n \n From the config above, the **Working directory** is `$BITRISE_SOURCE_DIR`. By default, this points out to the root directory of your React Native project. \n \n If you see something that starts with the dollar sign, it means that it’s an environment variable. In Bitrise, these can be set under the **Env Vars** tab. If you examine the values closely, you’ll see that it’s the same ones from when you have created this new app instance. This is where you can change them in case you messed up the selection earlier. If you notice any hard-coded values that you’re repeating over and over in each of your build steps, this is a good place to put them:\n \n![rn-ci-bitrise-environment-variables](//images.ctfassets.net/1es3ne0caaid/3PLcJVkA6kewu6CKEQ8Yko/348e0826498211a4056813148781519c/rn-ci-bitrise-environment-variables.png)\n \n Note that you can’t find `$BITRISE_SOURCE_DIR` anywhere in the **Env Vars** tab. This is because it’s one that’s set by Bitrise by default so it always points out to the same thing.\n\nRight after the **Install packages** step, add a new script step called “Jest Snapshot test”. Put the following and save it:\n\n``` bash\n    #!/usr/bin/env bash\n    # fail if any commands fails\n    set -e\n    # debug log\n    set -x\n    \n    # write your script here\n    echo \"Running snapshot tests...\"\n    yarn test\n```\n\nAfter the **Jest Snapshot test** step, add a new script step called “Build iOS app with Detox”:\n\n``` bash\n    #!/usr/bin/env bash\n    set -e\n    set -x\n    \n    echo \"Building iOS app...\"\n    detox build -c ios.sim.debug\n```\n\nLastly, add the script for running the end-to-end tests with Detox. Call the script “Test iOS app with Detox”:\n\n``` bash\n    #!/usr/bin/env bash\n    set -e\n    set -x\n    \n    echo \"Testing iOS app...\"\n    detox test -c ios.sim.debug\n```\n\nOnce that’s added, your workflow should now look something like this:\n\n\n1. Activate SSH key (RSA private key)\n2. Git Clone Repository\n3. Install Detox dependencies\n4. Install packages\n5. Jest Snapshot test\n6. Build iOS app with Detox\n7. Test iOS app with Detox\n\nIt’s a good practice to make each individual step only do one thing even though you can bring all the commands into a single script. Aside from keeping things lightweight and allowing you to easily debug your scripts, this also allows you to easily rearrange your steps (via drag and drop) and delete the ones you don’t need.\n\n### Configure build workflow for Android\n\nIf you’ve skipped to this section because you only want to build for Android, you should scan through the section above on configuring the build workflow for iOS because this section assumes you already know to configure the build workflow on Bitrise.\n\nIf you haven’t done so already, go to the settings tab of the **ReactNativeCI-Android** app and set its default branch to `develop`.\n\nNext, click on the **Workflow** tab and click on the **Stack** tab. This time, select **Android \u0026 Docker, on Ubuntu 16.04 - LTS Stack** as the default stack. This should give you the best environment for building an Android app with React Native. Don’t forget to save the changes once you’re done.\n\nTo make the configuration of the build workflow faster, instead of using the workflow editor, we’ll be using the `bitrise.yml` file to configure the build. Copy the contents of [the](https://github.com/anchetaWern/ReactNativeCI/blob/master/bitrise.yml-android) [file from the GitHub repo](https://github.com/anchetaWern/ReactNativeCI/blob/master/bitrise.yml-android) then copy it to the editor in the **bitrise.yml** tab. Save the changes once you’re done:\n\n![rn-ci-bitrise-yaml](//images.ctfassets.net/1es3ne0caaid/3t40MgsAgoag68cmWoK8aC/f4fe511f327fb25d887c0d7e58a60a51/rn-ci-bitrise-yaml.png)\n\nOnce the changes are saved, you can switch back to the **Workflows** tab to see the visual representation of the build workflow:\n\n![rn-ci-bitrise-android-workflow](//images.ctfassets.net/1es3ne0caaid/5ACDuVt3vqkesYmqESKKAo/6a945d704ddfbd5851ec6336f539dc09/rn-ci-bitrise-android-workflow.png)\n\nWhen you’re using the workflow editor, Bitrise actually updates the `bitrise.yml` to match what you have on your workflow. This makes it really easy for developers to transfer a workflow that they have on an older app over to a newer app.\n\nIf you scroll all the way down on your workflow steps, you can see that we’re not running any end-to-end testing with Detox. This is because I couldn’t get the Detox tests to run on Android. The build is working, but running the app isn’t. Booting up an Android emulator takes a really long time so it defeats the purpose of building the app on a CI server because the build takes a long time to complete\n\n### Run the build on Bitrise\n\nNow that you’ve fully configured your build workflow, you can now push all your changes to the repo. This will trigger a build on both the Android and iOS version of the app:\n\n```\n    git push origin --all\n```\n\nNote that you can actually have different workflows for different build processes. In this tutorial, we’ve only configured the “primary” workflow which is the default build process that what we want to do everytime some changes is pushed into the repo. But you can also have a “deploy” workflow or a “testing” workflow, and the steps for that can be different from the one you have in your primary workflow.\n\nOnce the build is done, here’s what it will look like for the Android app:\n\n![rn-ci-bitrise-android-build-summary](//images.ctfassets.net/1es3ne0caaid/4cH9CTiXLqkym2miwYOK2w/c91adbddbcbe3a16972e5dfe30829a04/rn-ci-bitrise-android-build-summary.png)\n\nAnd here’s what it will look like for iOS:\n\n![rn-ci-bitrise-ios-build-summary](//images.ctfassets.net/1es3ne0caaid/6NxnnXuG3KqQo6yS0S0U4W/2790bbcf6fc51c172efad42d5575d6be/rn-ci-bitrise-ios-build-summary.png)\n\n### Run the build with Bitrise CLI\n\nAnother good thing about Bitrise is that you can run your builds using the [Bitrise CLI](https://devcenter.bitrise.io/bitrise-cli/). This is Bitrise’s open-source task runner for running your builds locally. You can follow the instructions on that page to setup Bitrise CLI. \n\nOnce you’ve setup Bitrise CLI, you can simply download your project’s `bitrise.yml` file and copy it over to your React Native project’s root directory.\n\nTo run the build, use the `bitrise run` command and append the name of the workflow you want to run:\n\n```\n    bitrise run primary\n```\n\nIf you find that the Bitrise CLI doesn’t meet your requirements, or you get errors that you don’t get while running the build on Bitrise, you can also make use the [Bitrise Docker image](https://devcenter.bitrise.io/docker/run-your-build-locally-in-docker/). This allows you to run your builds locally using the same environment as the one used by Bitrise’s virtual machines. \n\n\n## Conclusion\n\nThat’s it! In this tutorial, you learned how to use Bitrise for a solid mobile continuous integration setup. Specifically, you learned how to set up a custom build workflow that runs Jest snapshot tests, Detox end-to-end test, and then build the app. \n\nThat also wraps up this series so I hope you’ve gained the necessary skills in setting up continuous integration for your React Native app.\n\nYou can find the code used in this series on its [GitHub repo](https://github.com/anchetaWern/ReactNativeCI). The `master` branch contains the final output for this entire series.","metaTitle":"Continuous integration in React Native - Part 3","metaDescription":"This three-part series will guide you through setting up continuous integration for your React Native projects. In part three, switch from App Center to Bitrise, and explore testing with Jest and Detox."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"PYAItVPfyMYgKU6siIMGu","type":"Entry","createdAt":"2018-09-24T18:51:51.690Z","updatedAt":"2018-09-24T18:51:51.690Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with continuous integration in React Native - Part 2: Starting CI with App Center","url":"continuous-integration-react-native-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/ReactNativeCI.git","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-09-24","description":"This three-part series will guide you through setting up continuous integration for your React Native projects. In part two, learn how to use App Center to manage your integration process, and how to run tests with Jest.","prerequisite":"Knowledge of React and React Native is required. Your machine should be set up for React Native development.","content":"This tutorial is the second part of the series on getting started with continuous integration in React Native. In this part, you’ll learn how to use [Visual Studio App Center](http://visualstudio.microsoft.com/app-center/) as a CI server for the React Native app. Specifically, you’re going to learn the following:\n\n\n- How to setup a React Native project in App Center.\n- How to configure the project build.\n- How to run Jest tests.\n- How to use custom build scripts.\n\n\n## Prerequisites\n\nTo follow this tutorial, you need to have basic knowledge of React and React Native. Knowledge of testing tools such as Jest will be helpful but not required.\n\nWe will be using [Genymotion](https://www.genymotion.com/fun-zone/) to test the builds, but you can use the Android emulator as well.\n\nReading [part one](https://pusher.com/tutorials/continuous-integration-react-native-part-1) of this series is optional if you already have some background with continuous integration.\n\nThese are the package versions that we will be using:\n\n\n- Node 8.3.0\n- React Native 0.50\n- Yarn 1.7.0\n\nFor other dependencies, check out the `package.json` file of the project.\n\n\n## Initial project setup\n\nLog in to your GitHub account and create a new repo named **ReactNativeCI**. This is where you will be pushing the project so that you can connect it to App Center. \n\nAfter that, clone the [project repo](https://github.com/anchetaWern/ReactNativeCI) (the GitHub repo containing the starter project, not the one you just created) and switch to the `starter` branch:\n\n```\n    git clone https://github.com/anchetaWern/ReactNativeCI.git\n    cd ReactNativeCI\n    git checkout starter\n```\n\nWe’re switching to the `starter` branch because the `master` branch contains the final output for the whole series. The `starter` branch contains the untouched version of the app that we will be working on. \n\nNext, initialize a new React Native project using the same version I used. Copy the `src` folder and `App.js` file from the repo you cloned earlier and paste it into the project you just created:\n\n```\n    react-native init ReactNativeCI --version react-native@0.50\n    cd ReactNativeCI\n```\n\nNext, install the dependencies and link the native modules:\n\n```\n    yarn install \n    react-native link\n```\n\nOnce that’s done, make sure that the app is still running. This is important because if it doesn’t run locally then it’s likely that it wouldn’t build properly on the CI server either:\n\n```\n    react-native run-android\n    react-native run-ios\n```\n\nIf you want to have a brief overview of the app that we will be working on, be sure to check out part one of this series.\n\n\n## Setting up a project on App Center\n\nIf you haven’t done so already, sign up for a new account on the [App Center website](https://appcenter.ms/signup). \n\nOnce your account is created, create a new app. \n\nThe number of apps you need to create depends on which platforms you need to support. Here are the names I used for the apps:\n\n\n- ReactNativeCI-android\n- ReactNativeCI-ios\n\nDon’t worry if you don’t have a Mac. App Center doesn’t need you to be on Mac in order for it to build an iOS app. The only problem is actually running the app that it’s going to build. Apple is very strict when it comes to these things. You need the app to be signed with a provisioning profile and distribution certificate from a paid Apple Developer account if you want to run it on your iOS device.\n\n![rn-ci-app-center-new-app](//images.ctfassets.net/1es3ne0caaid/2mnsEO5M9KEAYQYUm2uKyw/acae41a615a6117568250da739eb215d/rn-ci-app-center-new-app.png)\n\nOnce the app is created, it will show you the getting started guide:\n\n![rn-ci-app-center-getting-started](//images.ctfassets.net/1es3ne0caaid/2DCEwhveHCY4ksQGe2iy2Q/03438f91a8ed216369951332054ae009/rn-ci-app-center-getting-started.png)\n\nFollow the steps on that page. This will ensure that your project will work well with App Center. Be sure to replace the `npm` commands with `yarn` like so:\n\n```\n    yarn add appcenter\n```\n\nNote that if you’re working on iOS and you encounter any errors while following the steps mentioned on that page, scroll down to the **Cocoapods issue in iOS** section below.\n\nIf you’re planning to build for both Android and iOS, you should also create the other app on App Center if you haven’t done so already. \n\nNext, switch back to App Center and click on the **Build** menu on the sidebar. It will ask you to connect your code repo. In this case, we’ll use a GitHub account:\n\n![rn-ci-app-center-connect-repo](//images.ctfassets.net/1es3ne0caaid/33h5NmOgzeOAoKk6EOOmSO/756e84c005b6e6cfa5a37f2e60bf665a/rn-ci-app-center-connect-repo.png)\n\nOnce your GitHub account is connected, it will list all your GitHub repos. From there, search for the project you forked earlier and select it:\n\n![rn-ci-app-center-github-repos](//images.ctfassets.net/1es3ne0caaid/6GjjrWSfbGYiwqikMqqQCE/ac8aa9cbc35a8febaa2a308d2a55c146/rn-ci-app-center-github-repos.png)\n\nOnce selected, it will show the following screen. Click on the gear icon to configure the build for this specific branch:\n\n![rn-ci-app-center-project-branches](//images.ctfassets.net/1es3ne0caaid/2z4XxH6U56WQUcq6wsk0qI/f8f36d3e75f673402548c6ccf667201d/rn-ci-app-center-project-branches.png)\n\nFrom the **Build configuration** screen, select the following options:\n\n![rn-ci-app-center-build-config](//images.ctfassets.net/1es3ne0caaid/55RyXc6DS0YA2AaAYO6Wu2/1db009e6c7fd95af095a08e193091a88/rn-ci-app-center-build-config.png)\n\nWe’re setting the **Build Variant** to **debug** so we don’t have to supply a release keystore file. The **Build frequency** is set to **manual** because we don’t really want to trigger a new build everytime we push some changes to the repo as we’re just testing things out. All the toggle buttons should be set to **Off** for now.\n\nNote that we’re only selecting these option so we can easily get a successful build. We’ll change these options later once we make sure that there are no problems with the build.\n\nOnce you’re done with the configuration, click on **Save \u0026 Build**. This will save your build configuration and start the build process immediately.\n\nThis process might take a while. In my case, it took four minutes, so go grab a drink if you want.\n\n![rn-ci-app-center-build-running](//images.ctfassets.net/1es3ne0caaid/5FJJ0RODxmig0I8woAik8o/a0f3adc0594e257a233dcfb08909ae7d/rn-ci-app-center-build-running.png)\n\nOnce the build is complete, it should present you with a button to download the build (a `.zip` file containing the `.apk` file). But the app won’t really work because we haven’t signed it yet. All apps [need to be signed](https://developer.android.com/studio/publish/app-signing) with a distribution certificate, even if it’s not going to be released on any app store. \n\n![rn-ci-app-center-build-complete](//images.ctfassets.net/1es3ne0caaid/vdvoYtdxXa2GwEiAe20Ky/aa8b27da33675a9d57a728dee931853b/rn-ci-app-center-build-complete.png)\n\nThe only purpose of having you build is to make sure that the build succeeds and to get you acquainted with the App Center.\n\n### Cocoapods issue in iOS\n\nIf you’re trying to get this to work on iOS and you get the following error while trying to install the dependencies:\n\n![rn-ci-app-center-cocoapods-error](//images.ctfassets.net/1es3ne0caaid/4B7qIPJNtmiiO0oOMkeiS2/571240685264244b1071961b77511522/rn-ci-app-center-cocoapods-error.png)\n\nThe solution is to navigate to the `ios` directory and update the outdated source repositories as mentioned in the error message:\n\n```\n    cd ios\n    pod repo update\n```\n\nAfter that, go back to the project’s root directory and uninstall the App Center dependencies and add them again. This allows Cocoapods to install the dependencies properly:\n\n```\n    cd ..\n    yarn remove appcenter\n    yarn add appcenter\n```\n\n## Updating the app\n\nTo get you acquainted with the whole continuous integration process, we’ll be adding a minor update to the app. If you’re not familiar with Git workflows or branching models, be sure to [read up on them](https://buddy.works/blog/5-types-of-git-workflows). You can also check out the **CI workflow in React Native** section in the first part of this series, as we will be following the workflow mentioned there.\n\nStart by creating a new branch called `develop`. This is the branch where all the developers of this app will merge the new features they implement:\n\n```\n    git checkout -b develop\n```\n\nNext, create a new branch off of the `develop`  branch called `feature-improvements`:\n\n```\n    git checkout -b feature-improvements\n```\n\nAt this point, we can now begin implementing a couple of improvements to the app:\n\n\n1. Add a margin at the bottom of the card list.\n2. Make the target area of the favorite button bigger.\n\nFirst, let’s add the bottom margin:\n\n``` javascript\n    // src/components/CardList.js\n    class CardList extends Component {\n      render() {\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cFlatList\n              contentContainerStyle={styles.flatlist}\n              previous code here...\n            /\u003e\n          \u003c/View\u003e\n        );\n      }\n    }\n    \n    const styles = {\n      /* previous code here... */\n      flatlist: {\n        marginBottom: 50\n      }\n    };\n```\n\nNext, update the app’s snapshot. This ensures that the snapshot tests wouldn’t fail the next time it is run. [Jest](https://jestjs.io/) has already been set up in the starter app so you don’t have to worry about it:\n\n```\n    yarn test -u\n```\n\nOnce that’s done, save the file and commit the changes:\n\n```\n    git add .\n    git commit -m \"add bottom margin to CardList\"\n```\n\nNext, we can make the target area bigger by wrapping the whole card in a `TouchableOpacity` so we can pass the `action` directly to its `onPress` prop. The `IconButton` is then replaced by the `Icon` component from **react-native-vector-icons**:\n\n``` javascript\n    // src/components/Card.js\n    import { View, Image, Text, Dimensions, TouchableOpacity } from \"react-native\"; // add TouchableOpacity\n    \n    import Icon from \"react-native-vector-icons/FontAwesome\"; // add vector icon\n    \n    // wrap the Card in TouchableOpacity\n    const Card = ({ image, text, is_favorite, action }) =\u003e {\n      const icon = is_favorite ? \"heart\" : \"heart-o\";\n      return (\n        \u003cTouchableOpacity onPress={action}\u003e\n          \u003cView style={styles.card}\u003e\n            \u003cText style={styles.text}\u003e{text}\u003c/Text\u003e\n            \u003cImage source={image} resizeMode={\"contain\"} style={styles.image} /\u003e\n            \u003cIcon name={icon} size={30} color={\"#333\"} /\u003e\n          \u003c/View\u003e\n        \u003c/TouchableOpacity\u003e\n      );\n    };\n```\n\nAfter that, delete the `src/components/IconButton.js` file because it’s no longer needed.\n\nOnce again, don’t forget to update the app’s snapshot:\n\n```\n    yarn test -u\n```\n\nAt this point, you can now test the app to see if it’s still working.\n\nOnce you’re fairly sure you haven’t broken anything, commit the changes:\n\n```\n    git add .\n    git commit -m \"make favorite button's target area larger\"\n```\n\nSwitch to the `develop` branch and merge the changes from your `feature-improvements` branch:\n\n```\n    git checkout develop\n    git merge feature-improvements\n```\n\nOnce the merge is done, delete the `feature-improvements` branch:\n\n```\n    git branch -d feature-improvements\n```\n\nLastly, push the `develop` branch to the repo:\n\n```\n    git push origin develop\n```\n\nNote that when pushing changes to your repo, you have to commit both `android` and `ios` directories as well. This way, App Center is able to run the build commands for both Android and iOS.\n\n\n## Configure the build\n\nIf you go back to the **Build** page of the app you created earlier, a **develop** branch should be listed as one of the branches. Click on the gear icon for that to configure the build. This time, select the following options:\n\n\n- **Build variant:** release\n- **Build frequency:** Manually choose when to run builds\n- **Automatically increment version code:** On\n- **Build number format:** Build ID\n- **Run unit tests:** On\n- **Sign builds:** On\n\nThe rest of the toggle buttons should be set to **Off**. \n\n### Sign builds for Android\n\nIf you’re configuring the build settings for Android, for the build signing, you have to generate a keystore file so you can upload it to the field that’s asking for it:\n\n![rn-ci-app-center-sign-builds](//images.ctfassets.net/1es3ne0caaid/5Svf9aOf8kmMMsW6WmaoKe/79d2b00e878ffd78a273a97fbf5c01e4/rn-ci-app-center-sign-builds.png)\n\nTo generate a keystore file, execute the following from any directory:\n\n```\n    keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000\n```\n\nIf you’re on Windows, you might not have the `keytool` in your path. You can usually find it in the `C:\\Program Files\\Java\\jdkx.x.x_x\\bin` directory. You can either add that path to your environment path or just open a new command line window inside that directory and execute the command above.\n\nExecuting the command should ask you a few questions:\n\n![rn-ci-app-center-generate-keystore](//images.ctfassets.net/1es3ne0caaid/1E4sAwdNTWegmkGQ2GKea2/bebac2f1d2bbedc75555b35f016eff7d/rn-ci-app-center-generate-keystore.png)\n\nYou can find more information about this on the documentation for [Generating Signed APK](https://facebook.github.io/react-native/docs/signed-apk-android.html).\n\nOnce the keystore file is generated, upload it to App Center and enter the keystore password, key alias, and key password. If you used the exact same command to generate the keystore file, the key alias is `my-key-alias`. And if you used the same password as your keystore password for the key password, then enter the same value for both.\n\nOnce that’s done click on the **Save \u0026 Build** button to start the build. Once the build succeeds, you should be able to downlod, extract and drag it over to Genymotion. Since the `.apk` file is now signed, you should be able to run it without problems.\n\n\n### Sign builds for iOS\n\nIf you’re configuring the build settings for iOS, I hate to break the bad news but you won’t be able to install or run the resulting `.ipa` file if you’re not an [Apple Developer Program member](https://developer.apple.com/programs/enroll/) (the one which you have to pay 99 USD per year). \n\nYou can still have a free provisioning profile and certificate if you have a free developer account. But if you’re planning to distribute your app for beta testing with TestFlight or TestFairy, you’re still out of luck because only provisioning profiles and certificates from a paid Apple developer account will work. That means that apps signed with a certificate from a free developer account won’t work.\n\nAs I mentioned in the first part of this series, we won’t really be covering Continuous Deployment in this series so I’ll just leave you with two links that will help you configure the distribution setting in App Center:\n\n\n- [iOS - Creating an Ad Hoc Distribution Provisioning Profile](https://support.magplus.com/hc/en-us/articles/204270188-iOS-Creating-an-Ad-Hoc-Distribution-Provisioning-Profile)\n- [iOS - Creating a Distribution Certificate and .p12 File](https://support.magplus.com/hc/en-us/articles/203808748-iOS-Creating-a-Distribution-Certificate-and-p12-File)\n\nFor those of you who are not a member of the Apple Developer program, the only thing you’ll get out of using App Center is making sure that the iOS app builds successfully.\n\n\n## Custom build scripts\n\nOne important thing you need to enable to have full control over your builds is custom build scripts. These are Bash scripts which can be executed throughout the lifecycle of the entire build:\n\n\n- **post-clone** - executed right after your code repo has been cloned. \n- **pre-build** - executed right before App Center begins the build process for your app. This is usually right after the dependencies for your project are installed.\n- **post-build** - executed right after your app is built.\n\nTo have more idea on what I’m talking about above, you can actually scroll through the build output to inspect what App Center is doing behind the scenes. Generally, here’s how the process goes:\n\n\n1. Clone the repo.\n2. Install the dependencies.\n3. Link packages (`react-native link`).\n4. Execute post-clone scripts (if you have one).\n5. Execute pre-build scripts (if you have one).\n6. Install keystore.\n7. Build the app (`react-native run-android` or `react-native run-ios`).\n8. Execute post-build scripts (if you have one).\n9. Run tests (`npm test`).\n\nThere’s also [code linting](https://developer.android.com/studio/write/lint), but that’s mainly for native Android development, so I didn’t include it in the steps above.\n\n### Adding a custom build script\n\nAdding a custom build script is fairly straightforward. All you have to do is create any of these files inside the root of your project directory (same level as your `package.json` file):\n\n\n- `appcenter-post-clone.sh`\n- `appcenter-pre-build.sh`\n- `appcenter-post-build.sh`\n\nIn our case, all we want to do is update the app snapshot for valid changes that we make. But how can we tell App Center that we want to update the snapshots? Well, the simplest way of implementing these kinds of checks is through [environment variables](https://docs.microsoft.com/en-us/appcenter/build/custom/variables/). Each build can have their own environment variable so it’s the perfect place to put these kinds of custom config.\n\nTo add an environment variable, click on the gear icon of the branch you want to configure. In this case, we want to configure the **develop** branch. \n\nFrom the build configuration screen, click on the **Environment** tab and enable **Environment variables**. Once enabled, you should be able to put `UPDATE_JEST_SNAPSHOTS` for the `name`, and then  `true` for the value:\n\n![rn-ci-app-center-environment-variables](//images.ctfassets.net/1es3ne0caaid/5OgTxpaTFCIiycQ4Kgcak4/d6152ccef46f37b90984d0518c93e837/rn-ci-app-center-environment-variables.png)\n\nNote that you have to set this value to `false` (or any value that’s not `true`) if you didn’t make any change to the component tree (for example: updating the styles, removing or adding a prop, removing or adding a component). Otherwise, snapshot testing will be pointless. I realize that this can be inefficient and prone to mistakes, but I can’t really find any other solution to this one. \n\nGoing back to creating the custom build script, create an `appcenter-pre-build.sh` file if you haven’t done so already. Once created, add the following code to it:\n\n``` bash\n    #!/usr/bin/env bash\n    \n    echo \"MY CUSTOM PRE-BUILD SCRIPT...\"\n    if($UPDATE_JEST_SNAPSHOTS == \"true\")\n    then\n      echo \"Now updating the snapshots...\"\n      npm test -u\n      echo \"Done updating the snapshots\"\n    fi\n```\n\nWhat this does is check whether the value of `UPDATE_JEST_SNAPSHOTS` that we’ve set on App Center earlier is `true`. If it does, we execute the code for updating the snapshots. That way, by the time it gets to running the actual test (if you have enabled it in the build configuration), it won’t fail. Note that even if the build succeeded, and your tests didn’t, the build is still labeled as “failed”.\n\nOnce that’s done, save the file, commit the changes, and push it to the repo:\n\n```\n    git add .\n    git commit -m \"add pre-build script\"\n    git push origin develop\n```\n\nNext, refresh the **Build** page in App Center and click on the gear icon for the **develop** branch. At this point, you should see that it recognizes the pre-build script that you’ve added:\n\n![rn-ci-app-center-prebuild-script](//images.ctfassets.net/1es3ne0caaid/3EfpC8M8yQoeIIsuoy4sYW/6681be8d5e26201909b409b254e62e90/rn-ci-app-center-prebuild-script.png)\n\nOnce you see that, you should be fairly confident that the script will be executed on your next build.\n\nYou can find more information about build scripts here:\n\n\n- [Build Scripts](https://docs.microsoft.com/en-us/appcenter/build/custom/scripts/)\n- [App Center build script examples](https://github.com/Microsoft/appcenter-build-scripts-examples)\n\n\n## Conclusion\n\nThat’s it! In this tutorial, you learned how to use App Center to easily setup continuous integration for a React Native app. Specifically, you learned how to build and test the app using App Center. You also learned how to use a custom build script to update the Jest snapshots. \n\nApp Center is great if you’re just getting started with continuous integration. But as soon as your needs grow, you’ll need a more customizable and powerful solution. So stay tuned for part three where we will use Bitrise as the CI service for the app.\n\nYou can find the source code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/ReactNativeCI.git). Don’t forget to switch to the `part2` branch for the final output of this part.","metaTitle":"Continuous integration in React Native - Part 2","metaDescription":"This three-part series will guide you through setting up continuous integration for your React Native projects. In part two, learn how to use App Center to manage your integration process, and how to run tests with Jest."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"xDhRZpEsViceuYY0iyQuo","type":"Entry","createdAt":"2018-09-18T17:58:02.532Z","updatedAt":"2018-09-20T21:05:51.684Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with continuous integration in React Native - Part 1: Introduction","url":"continuous-integration-react-native-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/ReactNativeCI.git","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-09-17","description":"This three-part series will guide you through setting up continuous integration for your React Native projects. In part one, learn about the principles of continuous integration, and get an overview of the tools and app we will use in the series.","prerequisite":"Knowledge of React and React Native is required. Your machine should be set up for React Native development.","content":"As React Native continues to grow as a platform, so do the tools and development practices revolving around it. One such practice is continuous integration. It has been a staple for the web development community for quite some time, and for good reason. Manual processes tend to be brittle, and mistakes can’t really be avoided if things are done by hand. One can say that it’s only natural for the React Native community to embrace the continuous integration practice, after all, we use the same language (JavaScript) to develop React Native apps. \n\nIn this series, we’ll take a look at how we can implement continuous integration in React Native. Specifically, we’re going to tackle the following topics:\n\n- Part 1: Introduction to continuous integration\n- Part 2: Starting CI with App Center\n- Part 3: Advanced CI with Bitrise\n\nNote that we’ll only cover continuous integration in this series. Continuous deployment is a whole other topic.\n\nIn this part, I’ll introduce you to continuous integration. You’ll learn what CI is, its importance, and how CI is done in React Native. Next, I'll introduce you to the CI services that we will be using. Lastly, I'll introduce you to the app that we’re going to work on throughout the series.\n\nYou can find the code used in this series on its [GitHub repo](https://github.com/anchetaWern/ReactNativeCI.git). The `starter` branch contains the pre-coded app. While the final output for each part will have their own branch (`part2` and `part3`). There’s no `part1`  because we’re not really making any changes to the starter project in this part. The `master` branch contains the final output for the entire series.\n\n\n## Prerequisites\n\nTo follow this series, you need to have basic knowledge of React and React Native. Since continuous integration is more of like an advanced topic, I assume that you have already developed a few apps before. It doesn’t matter if it was released in the app stores or not.\n\nThe project that we will be working on uses Redux, so experience on using that will be helpful as well.\n\nKnowledge of testing tools such as Jest and Detox will be helpful but not required.\n\nYou also need to have experience in using version control software such as [Git](https://git-scm.com/). We’ll be specifically using Git in this series.\n\nYour machine should also be set up for React Native development. So either Android or Xcode needs to be installed. This series will provide instructions for both platforms. We’ll be using [Yarn](https://yarnpkg.com/) to install packages, so you should have that installed as well.\n\n\n## What is continuous integration?\n\nContinuous integration is the practice of frequently committing small changes to a shared repository. This can range from once per day to multiple times per day. \n\nAutomated tests (unit, functional, integration) are then run to check if the whole system is still working correctly. If it is, the changes can either be deployed to production or reviewed further. If it doesn’t work, then the developer can easily fix the problem because the change is only minimal.\n\nThe main benefit of using continuous integration is to be able to detect errors early so that they can be fixed immediately. That way, we can put more time into developing new features and making sure our apps are as user-friendly as possible.\n\n\n## CI workflow in React Native\n\nIf you’re coming from a web development background, the continuous integration workflow in React Native should be fairly familiar. \n\nOne huge part of the CI workflow is the server which will ensure that the app is running correctly. But unlike in a web project where the CI server usually only installs dependencies then performs some tests, in a mobile CI setup, the server also has the responsibility to build the app. That is, to come up with the `.apk` or `.ipa` file. This ensures that the app is building correctly each time new code is introduced.\n\nHere’s what the workflow looks like. This assumes that you already have an existing React Native project, and a code repository:\n\n\n1. You connect your code repo to the CI server.\n2. You set up your CI server to build the app every time new code is committed to the `develop` branch of your repo.\n3. You create a new branch called `awesome-feature-1` off of your `develop` branch.\n4. You add the code for the new feature and add some tests. \n5. You test the changes locally by running the tests, building the app, and manually testing the new feature.\n6. Once you’re fairly sure that the app is working, you merge the `awesome-feature-1` branch to the `develop` branch and push it to your repo.\n7. The CI server “sees” that a new code has been added to the `develop` branch so it installs the dependencies and builds the app. \n8. After the app is successfully built, it runs the unit and functional tests.\n9. Once the tests pass, the `.apk` or `.ipa` files become available for download.\n10. If at some point, an error occurred while the CI server is doing all of those, an email is automatically sent to inform you that the build broke.\n11. You create a new branch off of the `awesome-feature-1` branch and call it `awesome-feature-1-fix-1`. From there, you work on the fix and merge it back to the `awesome-feature-1` branch and then to the `develop` branch once you’re done with the local tests.\n12. You push the `develop` branch to your repo and the cycle continues.\n\nNote that the steps above are highly dependent on the [Git workflow](https://www.atlassian.com/git/tutorials/comparing-workflows) that you’ve adopted. Your branching model might look different from the one used above, and that’s ok. But no matter which model you’ve adopted or CI services you use, the general workflow will pretty much look the same: you implement a new feature → you push it to the code repo → CI server builds the app.\n\n\n## CI services for React Native\n\nIn this section, I’ll give you an overview of the services that we’re going to use throughout the series:\n\n\n- [Visual Studio App Center](https://visualstudio.microsoft.com/app-center/)\n- [Bitrise](https://www.bitrise.io/)\n\n### Visual Studio App Center\n\nApp Center is a platform that allows you to continuously build, test, release, and monitor apps. It supports [GitHub](https://github.com/), [Bitbucket](https://bitbucket.org/), and [Visual Studio Team Services](https://visualstudio.microsoft.com/team-services/). That means you can connect your code repo to any of these services. So every time you push some changes to a specific branch, it will automatically build your app.\n\nApp Center supports the following mobile app development platforms:\n\n\n- Swift \n- Objective-C\n- Java\n- Xamarin\n- React Native\n\nIf you’re doing any sort of development in any of these platforms, expect that there is some form of support that allows you to implement continuous integration in an easier way (compared to when you’re doing it by hand). \n\nFor example, App Center supports automated UI testing with frameworks such as Espresso, Appium, and XCUITest. Those frameworks are great if you’re developing a native Android or iOS app because you’re most likely using them already. But if you’re a React Native developer and you’re using something like [Detox](https://github.com/wix/detox), you have no choice but to implement it by hand. \n\nThe good thing about App Center is that it supports [custom build scripts](https://docs.microsoft.com/en-us/appcenter/build/custom/scripts/) which allows you to use tools which aren’t supported by default.\n\nLastly, App Center is also a continuous delivery platform so it provides the following services as well:\n\n\n- Beta app distribution via Test Flight and Google Play Store\n- Live code updates via CodePush\n- App monitoring\n- App analytics\n- Push notifications\n\nYou might say that’s all well and good but how much is it? Well, fret not, because they have a very generous [free tier](https://visualstudio.microsoft.com/app-center/pricing/) so we can test most (if not all) of its services without having to dish out a few dollars.\n\n### Bitrise\n\nBitrise is a continous integration and delivery platform. Its main focus is on mobile app development so the following platforms are supported:\n\n\n- Native iOS and Android\n- Cordova\n- Xamarin\n- React Native\n\nThe main power of Bitrise comes from its 180+ [integrations](https://www.bitrise.io/integrations/). Any tool or service that you’re already using for the continuous integration and delivery of your app is supported. Well, maybe not all, but in those 180+ integrations, there’s bound to be a handful of those that support what you need to accomplish.\n\nBitrise is also beginner-friendly. When it’s your first time using it, their built-in project scanner automatically detects the platform that you’re working with. From there, it creates a base workflow that builds, tests, and deploys your app.\n\nOnce you’re ready to explore, you can use their [workflow editor](https://www.bitrise.io/features/workflow-editor) to customize each step of the build process. There is already a [ton of scripts](https://github.com/bitrise-io/bitrise-steplib) you can choose from. For example, you want to deploy a specific release to App Center’s CodePush. Or upload the `.apk` or `.ipa` file to your Dropbox account.\n\nOnce you become confident in using the workflow editor, you can actually start editing the `bitrise.yml` directly in order to customize the build script. This is where the real power of Bitrise comes in. Because other developers who have dealt with a specific problem you’re having have already written a script which allows you to solve that. From there, you can just customize it to fit your own needs.\n\nIn case you’re wondering if Bitrise is free to try. [Yes, it is](https://www.bitrise.io/pricing). They even have a specific pricing tier for that. Though the maximum amount of time that each of your builds can take is limited to 10 minutes. Don’t worry though, their servers are pretty fast and they use a smart cache so it doesn’t need to install your project dependencies for every build. To give you an example of how fast it is, the project that we will be working on only took 1.5 minutes to build.\n\n\n## Introduction to the project\n\nThroughout the series, we will be working on a single project which we will use for testing the CI services. Here’s what the project looks like:\n\n![rn-ci-demo-app](//images.ctfassets.net/1es3ne0caaid/1ZxSeHdLpCKS26QoyWiWIG/26a2946b70f38c910fe4f27bb7aaa33a/rn-ci-demo-app.png)\n\nTo keep the focus on continuous integration, the project is fairly simple. The users can scroll through a list of Pokemon and mark their favorites. Those favorites will be kept in local storage so the next time the user opens the app, they will still be marked as favorite.\n\nIf you switched to the `starter` branch, all of the features aren’t implemented yet. We will be implementing those as we progress through this series.\n\n\n## Conclusion\n\nThat’s it! In this tutorial, you’ve learned what continuous integration is and why it’s important. You also learned how CI is done in React Native and a couple of tools you can use to make it easier to set up.\n\nStay tuned for the second part where we’ll actually start to get our hands dirty with continuous integration.\n\nYou can find the code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/ReactNativeCI.git).","metaTitle":"Continuous integration in React Native - Part 1","metaDescription":"This three-part series will guide you through setting up continuous integration for your React Native projects. In part one, learn about the principles of continuous integration, and get an overview of the tools and app we will use in the series."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1CtUK8rOmUWskec6qKQ04E","type":"Entry","createdAt":"2018-08-17T22:30:49.340Z","updatedAt":"2018-08-17T22:30:49.340Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Making accessible React Native apps","url":"accessible-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNa11y","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-08-13","description":"This tutorial looks at ways to improve the accessibility of React Native apps. You will take a (provided) starter app and enhance it with various accessibility features. You will also learn how to test and measure your app's accessibility.","prerequisite":"You will need React Native and Yarn installed on your machine. Some familiarity with React Native will be helpful.","content":"In this tutorial, you’re going to learn how to make React Native apps more accessible. Specifically, we’re going to cover the following:\n\n- What is accessibility?\n- Designing apps with accessibility in mind\n- Accessibility in React Native apps\n- Accessibility testing tools\n\nOf course, we cannot hope to cover everything about accessibility. It’s a pretty big subject and it’s a continuous journey. There’s always something that you can improve in order to make the experience just a little bit more pleasant for a certain user. Instead, what we hope to achieve in this tutorial, is to take that first step into making more accessible apps.\n\nYou can view the code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/RNa11y). The `starter` branch contains the not so accessible version of the app, while the `a11y` branch contains the more accessible version.\n\n\n## Prerequisites\n\nTo follow this tutorial, you need to know the basics of creating a React Native app. \nThe React Native development environment should also be set up on your machine.\n\nWe will be using React Native version 0.56 in this tutorial. We’ll also be using [Yarn](https://yarnpkg.com/en/) to install packages.\n\n\n## What is accessibility?\n\nBefore we proceed, it’s important that we all agree on what accessibility is, in the context of a mobile app. Accessibility or a11y, means making your apps usable to both normal users and users with disabilities. Any person can have one or more form of disability. That usually includes but not limited to the following:\n\n\n- **Visual impairments** - examples include low vision, color-blindness, and total blindness.\n- **Physical or motor disabilities** - cerebral palsy, bone and joint deformities.\n- **Mental disorders** - autism spectrum disorders such as Asperger’s syndrome, and autistic disorder.\n- **Hearing impairment** - deafness and partial hearing loss.\n- **Reading disabilities** - Dyslexia.\n\nAccessibility means designing your apps in such a way that it takes all of these disabilities into consideration in order to make the user experience pleasant for everyone. \n\n\n## What you’ll be building\n\nWe won’t actually be building anything from scratch. Instead, we’re going to make a pre-built app more accessible. Here’s what the starter app looks like:\n\n![accessible-rn-starter](//images.ctfassets.net/1es3ne0caaid/5o4PrPT43eGaCw8yGswg4A/1fe4265f13dd87224aae737a8c9f95b6/accessible-rn-starter.png)\n\nThis won’t be how the final output will look like because we’ll also be taking design into consideration (though, only a little because I’m not really a designer). \n\nIf you want to follow along, clone the repo, switch to the `starter` branch and install the dependencies:\n\n```\n    git clone https://github.com/anchetaWern/RNa11y.git\n    cd RNa11y\n    git checkout starter\n    yarn install\n    react-native upgrade\n    react-native link\n    react-native run-android\n    react-native run-ios\n```\n\n## Designing apps with accessibility in mind\n\nIn this section, we’ll redesign the app so that it becomes more accessible. We will be using the [dos and don'ts on designing for accessibility](https://accessibility.blog.gov.uk/2016/09/02/dos-and-donts-on-designing-for-accessibility/) from the [GOV.UK](https://accessibility.blog.gov.uk/2016/09/02/dos-and-donts-on-designing-for-accessibility/) website as a guide. Specifically, we’re going to adopt the following dos from their guide:\n\n\n- Use simple colors\n- Make buttons descriptive\n- Build simple and consistent layouts\n- Follow a linear, logical layout\n- Write descriptive links and heading\n- Use good contrasts and a readable font size\n- Use a combination of color, shapes, and text\n- Make large clickable actions\n\nRight off the bat, you can see that the starter app violates some of these rules. The app is already following a few, but we can still improve on it.\n\n### Use simple colors\n\nThe starter app violates this rule because it’s using a dark color for its background. It’s not really easy on the eyes, so we need to update the app and card background:\n\n``` javascript\n    // file: App.js\n    const styles = {\n      container: {\n        flex: 10,\n        backgroundColor: \"#FFF\" // update this\n      }\n    };\n```\n\n``` javascript\n    // src/components/Card.js\n    const styles = StyleSheet.create({\n      card: {\n        width: 120,\n        height: 140,\n        backgroundColor: \"#3e3e3e\", // update this\n      }\n    });\n```\n\nAlso, update the `Header` component to match. This is because the items in the status bar aren’t really very readable when using a dark background:\n\n``` javascript\n    // src/components/Header.js\n    const styles = StyleSheet.create({\n      header: {\n        paddingTop: 10,\n        backgroundColor: \"#ccc\" // update this\n      },\n      header_text: {\n        fontWeight: \"bold\",\n        color: \"#333\", // update this\n      }\n    });\n```\n\nOnce that’s done, the content should now be more readable.\n\n### Make large clickable actions\n\nNext, we need to make the buttons larger. This change is specifically useful for people with physical and motor disabilities, as they’re often the ones who have difficulty in pressing small buttons.\n\nIf you inspect the app right now, you’ll see that there’s not much space we can work with. So even if we make the buttons larger, it will still be difficult to target a specific one because there won’t be ample whitespace between them. Though we still have some free space between each card so we’ll make use of that instead.\n\nIn your `Card` component, include the `Dimensions` module so that we can get the device’s width. We’ll use it to determine how much width each card can use. In this case, we have two cards in each row so we’ll just divide it by two and add a padding. We’re also making the `height` bigger because we’re anticipating the buttons to become bigger:\n\n``` javascript\n    // src/components/Card.js\n    \n    import { View, Text, Image, StyleSheet, Dimensions } from \"react-native\"; // add Dimensions\n    \n    const { width } = Dimensions.get(\"window\");\n    \n    const cardPadding = 20;\n    const styles = StyleSheet.create({\n      card: {\n        width: (width / 2) - cardPadding, // update this\n        height: 150, // update this\n      }\n    });\n```\n\nNext, we can now proceed with updating the size and padding of the button:\n\n``` javascript\n    // src/components/IconButton.js:\n    \n    const icon_color = \"#586069\";\n    const icon_size = 25; // update this\n    \n    const styles = StyleSheet.create({\n      icon: {\n        // update these:\n        paddingLeft: 10, \n        paddingRight: 10\n      }\n    });\n```\n\nAt this point, each button should be huge and visible enough to click on.\n\n### Make buttons descriptive\n\nUnfortunately, this isn’t really something that can be implemented all the time because of design constraints. If you check the app now, you’ll see that there’s not really enough space to accommodate labels for each button. \n\nThere is a solution, but we will end up giving up the current layout (two cards per row) for a one card per row layout. So the only feasible solution is to have a walkthrough for new users. This way, you can teach what each button is used for. I won’t really be covering how to do that, but there’s a [good component](https://github.com/okgrow/react-native-copilot) which allows you to implement it easily.\n\n### Use good contrasts and a readable font size\n\nIn my opinion, the app already has pretty good contrast. But to be on the safe side, we’ll tweak it some more.\n\nFirst, we have to differentiate between each individual card and the app’s background. We can do that by applying a darker background color:\n\n``` javascript\n    // src/components/Card.js\n    const cardPadding = 20;\n    const styles = StyleSheet.create({\n      card: {\n        width: width / 2 - cardPadding,\n        height: 150,\n        backgroundColor: \"#e0e0e0\", // update this\n      }\n    });\n```\n\nNext, we need to differentiate between the card’s body and its contents:\n\n``` javascript\n    // src/components/Card.js\n    const styles = StyleSheet.create({\n      name: {\n        fontSize: 16,\n        color: \"#3a3f46\", // update this\n      }\n    });\n```\n\n``` javascript\n    // src/components/IconButton.js\n    \n    const icon_color = \"#3a3f46\"; // update this\n    const icon_size = 25;\n```\n\nLastly, we need to make the text larger. While there’s no general agreement as to what font size should we be using to optimize accessibility, a [few](https://ux.stackexchange.com/questions/102813/minimum-font-size-for-mobile-view) [people](https://accessibleweb.com/wcag_2_0_developers/minimum-font-size/) seem to swear by `16px` so we’re also going with that:\n\n``` javascript\n    const styles = StyleSheet.create({\n      name: {\n        fontSize: 16, // update this\n      }\n    });\n```\n\nWe’ve skipped the following because we’re already following them:\n\n\n- Write descriptive links and heading\n- Follow a linear, logical layout\n- Use a combination of color, shapes, and text\n- Build simple and consistent layouts\n\nOnce that’s done, the app’s design should be pretty accessible. \n\n\n## Accessibility in React Native apps\n\nThe previous section discussed mainly the visual component of accessibility. In this section, we’ll look at how to make the app more accessible for people who use screen readers.\n\nFor those unfamiliar, a screen reader reads to users what they’re currently touching on the screen. This technology is mainly used by blind or visually impaired people. If a screen reader is enabled, the user has to double tap in order to activate the intended action.\n\nIn order for a screen reader to be useful, we need to properly label all the relevant components that a user will most likely interact upon. In React Native, this can be done by adding accessibility props. Here’s an example of how we can add these props:\n \n``` javascript\n    // src/components/Header.js\n    const Header = ({ title }) =\u003e {\n      return (\n        \u003cView\n          style={styles.header}\n          accessible={true}\n          accessibilityLabel={\"Main app header\"}\n          accessibilityRole={\"header\"}\n        \u003e\n          \u003cText style={styles.header_text}\u003e{title}\u003c/Text\u003e\n        \u003c/View\u003e\n      );\n    };\n```\n\nLet’s go through each of the accessibility props we’ve added to the `Header` component:\n\n\n- `accessible` - accepts a boolean value that’s used to mark whether a specific component is an accessible element or not. This means that the screen reader will read whatever label you put on it. Be careful with using this though, as it makes all of its children inaccessible. In the `Header` component above, this makes the `Text` component inside the `View` inaccessible. So the screen reader won’t actually read the title indicated in the header. It will only read the `accessibilityLabel` you’ve passed to the `View` instead. It’s a good practice to only set the `accessible` prop to `true` if you know that the component doesn’t have any child that’s supposed to be treated as an accessible element.\n- `accessibilityLabel` - the text you want the screen reader to read when the user touches over it. A good practice when using this prop is to be as descriptive as possible. Remember that the user will only rely on what’s being read by the screen reader. They actually have no idea of the context a specific component is in, so it’s always useful to repeat it in your labels. For example, each of the buttons in each card should still mention the name of the Pokemon.\n- `accessibilityRole` - the general role of the component in this app. Examples include: `button`, `link`, `image`, `text`, and in this case `header`. Note that `header` doesn’t only indicate the app’s main header. It can also indicate a section header or a list header.\n\nThe next component we’ll update is the IconButton because it’s important that the user knows that those buttons we’ve added are actually buttons:\n\n````javascript\n    // src/components/IconButton.js\n    const IconButton = ({ icon, onPress, data, label }) =\u003e {\n      return (\n        \u003cTouchableOpacity\n          accessible={true}\n          accessibilityLabel={label}\n          accessibilityTraits={\"button\"}\n          accessibilityComponentType={\"button\"}\n          onPress={() =\u003e {\n            onPress(data.name);\n          }}\n        \u003e\n          \u003cIcon\n            name={icon}\n            style={styles.icon}\n            size={icon_size}\n            color={icon_color}\n          /\u003e\n        \u003c/TouchableOpacity\u003e\n      );\n    };\n```\n\nFrom the code above, you can see that we’re accepting a new `label` prop which we then use as the value for the `accessibilityLabel`. We’ve also set the component to be `accessible` which means that when the user’s finger goes over it, the screen reader will read out the `accessibilityLabel`. \n\nBut what about `accessibilityTraits` and `accessibilityComponentType`? Well, they are the old way of setting the `accessibilityRole`. `accessibilityTraits` is only for iOS and `accessibilityComponentType` is only for Android. As [mentioned in the docs](https://facebook.github.io/react-native/docs/accessibility#accessibilitytraits-ios), these props will be deprecated soon. We’re only using it because `TouchableOpacity` doesn’t seem to be accepting `accessibilityRole`. The trait (button) wouldn’t show up as I was testing with the accessibility inspector. We’ll go over this tool in the next section.\n\nLastly, we update the `Card` component so it passes the correct labels to each of the IconButton. We’re also making the Pokemon Image and Text accessible:\n\n``` javascript\n    // src/components/Card.js\n    const Card = ({ item, viewAction, bookmarkAction, shareAction }) =\u003e {\n      return (\n        \u003cView style={styles.card}\u003e\n          \u003cImage\n            source={item.pic}\n            style={styles.thumbnail}\n            accessible={true}\n            accessibilityRole={\"image\"}\n            accessibilityLabel={`${item.name} image`}\n          /\u003e\n          \u003cText style={styles.name} accessibilityRole={\"text\"}\u003e\n            {item.name}\n          \u003c/Text\u003e\n          \u003cView style={styles.icons}\u003e\n            \u003cIconButton\n              icon=\"search\"\n              onPress={viewAction}\n              data={item}\n              label={`View Pokemon ${item.name}`}\n            /\u003e\n            \u003cIconButton\n              icon=\"bookmark\"\n              onPress={bookmarkAction}\n              data={item}\n              label={`Bookmark Pokemon ${item.name}`}\n            /\u003e\n            \u003cIconButton\n              icon=\"share\"\n              onPress={shareAction}\n              data={item}\n              label={`Share Pokemon ${item.name}`}\n            /\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    };\n```\n\nIn case you’re wondering why we didn’t add the `accessible` and `accessibilityLabel` prop in the Pokemon label, it’s because the `Text` component is [accessible by default](https://facebook.github.io/react-native/docs/text#accessible). This also means that the screen reader automatically reads the text inside of this component.\n\n\n## Accessibility testing tools\n\nIn this section, we’ll take a look at four tools you can use to test the accessibility of your React Native app.\n\n### Testing accessibility while developing the app\n\nIn iOS, you can use the Accessibility Inspector tool in Xcode. Because it’s in Xcode, you have to run the app from Xcode. You can do that by opening the `RNa11y.xcodeproj` or `RNa11y.xcworkspace` file inside your project’s `ios` directory. Then run the app using the big play button located on the upper left side of the screen. \n\nOnce the app is running, you can open the Accessibility Inspector tool by going to **Xcode** → **Open Developer Tool** → **Accessibility Inspector**.\n\nFrom there, you can select the running iOS simulator instance:\n\n![ios-accessibility-inspector-1](//images.ctfassets.net/1es3ne0caaid/6qNgPqBzxY2gQCya28EQCe/18c5511aaa2c0c91d2627c6e4af89e05/ios-accessibility-inspector-1.png)\n\nOnce you’ve selected the simulator, click on the target icon right beside the drop-down. This activates the inspection mode. You can then hover over the components which we updated earlier and verify whether the inspector is reading the labels correctly:\n\n![ios-accessibility-inspector-2](//images.ctfassets.net/1es3ne0caaid/2SeBUm2GQM08QYMyu8acM2/bc43ab7293dfc5cdb317cd5b92585106/ios-accessibility-inspector-2.png)\n\nFor Android testing, you can use the [Accessibility Scanner](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor) app. Unlike the Accessibility Inspector in iOS, you have to install it on your emulator or device in order to use it. Once installed, go to **Settings** → **Accessibility** → **Accessibility Scanner** and enable it. \n\n![android-accessibility-scanner](//images.ctfassets.net/1es3ne0caaid/23c3rdh3BeOOQuGCQoKEUk/ccd4b3393e5c944ef0d4dd661864fcd6/android-accessibility-scanner.png)\n\nOnce it’s enabled, switch to the app that we’re working on and click the floating blue button. This will scan the app for any accessibility issues. Once it’s done scanning, you can click on any of the indicated areas to view the suggestion:\n\n![image-contrast-warning](//images.ctfassets.net/1es3ne0caaid/4RRVksnQ3YsSsuQuYGo8Cg/91e7e74829222b88ac984bd166517f72/image-contrast-warning.png)\n\nThe easiest way to solve this issue is by making the card’s background color lighter. You can also try increasing the contrast of the image as suggested.\n\nInterestingly, if you remove the accessibility props from the image and scan again, you’ll see that it will no longer complain about the contrast:\n\n``` javascript\n    // src/components/Card.js\n    const Card = ({ item, viewAction, bookmarkAction, shareAction }) =\u003e {\n      return (\n        \u003cView style={styles.card}\u003e\n          \u003cImage\n            source={item.pic}\n            style={styles.thumbnail}\n          /\u003e\n          ...\n        \u003c/View\u003e\n      );\n    };\n```\n\nThis can mean that the scanner only gets picky when you’ve marked a component as accessible. To test this assumption, try removing the accessibility props from the IconButton:\n\n``` javascript\n    // src/components/IconButton.js\n    const IconButton = ({ icon, onPress, data, label }) =\u003e {\n      return (\n        \u003cTouchableOpacity\n          onPress={() =\u003e {\n            onPress(data.name);\n          }}\n        \u003e\n        ...\n        \u003c/TouchableOpacity\u003e\n      );\n    };\n```\n\nIf you run the scanner again, you’ll see that it actually picks up on the issue:\n\n![item-description-warning](//images.ctfassets.net/1es3ne0caaid/5XT7FDpT32QQW640uuy664/b711061ff8d32bb41f09996a83c82cea/item-description-warning.png)\n\n### Manual accessibility testing\n\nAs with anything, it’s always important to test things manually so you know the actual experience your users are getting. After all, accessibility is all about improving the user experience that your users get when using the app. \n\n#### Testing in iOS\nTo test things manually in iOS, open Xcode and run the app on your iOS device. You can also do this from the simulator but that kinda beats the purpose of manual testing. You won’t really have an accurate “feel” of the experience if you’re just testing from a screen.\n\nOnce the app is running on your device, go to **Settings** → **Accessibility** → **VoiceOver**. From there, you can select the **Speech** menu to change the voice (I personally prefer Siri Female). You can also adjust the speaking rate. Adjust a little bit more from the mid-point should be fast enough for most people.\n\nOnce you’re done adjusting the settings, enable the **VoiceOver** setting then switch to the app. From there, you can tap on each of the accessibility areas that we’ve set to verify if it’s being read correctly.\n\n#### Testing in Android\nTo test in Android, run the app on your Android device. Once the app is running, go to **Settings** → **Language** and set it to your preferred language. \n\nNext, go to **Accessibility** → **Text-to-speech** options and make sure the **Default language status** is fully supported. If not, you have to go to the language settings again and select a supported language. \n\nThe equivalent of VoiceOver in Android is TalkBack, you can enable it by going to **Accessibility** → **TalkBack** then enable the setting**.** Once enabled, switch to the app and verify if the labels are read correctly as you tap.\n\n\n## Further reading\n\nHere are some resources to learn more about accessibility:\n\n\n- [Accessibility by Rob Dodson](https://www.youtube.com/watch?v=KPN31sB7v8c)\n- [React Native Accessibility: Creating Inclusive Apps in React Native](https://medium.com/@larenelg/creating-inclusive-apps-in-react-native-the-coding-bit-bd3832349009)\n- [React Native: Accessibility](https://facebook.github.io/react-native/docs/accessibility)\n- [Accessibility Testing on Android](https://robots.thoughtbot.com/accessibility-testing-on-android)\n- [iOS Accessibility Tutorial: Getting Started](https://www.raywenderlich.com/845-ios-accessibility-tutorial-getting-started)\n\n\n## Conclusion\n\nThat’s it! In this tutorial, you’ve learned how to make React Native apps more accessible to a person with disabilities. I hope that you’ll use the knowledge you’ve gained in order to make accessibility a part of your development workflow. Because all of your users deserve an equal or similar ease of use.\n\nYou can view the code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/RNa11y).","metaTitle":"Making accessible React Native apps","metaDescription":"Using a starter app, learn to implement improved accessibility in React Native apps. Work through practical examples, and discover accessibility tools."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3L3NK3r4VyQyemcMCqaeyo","type":"Entry","createdAt":"2018-08-09T20:55:38.106Z","updatedAt":"2018-08-09T21:45:00.036Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Using Storybook with React Native","url":"storybook-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNStorybook","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-08-07","description":"Learn how to use Storybook for React Native development. The tutorial introduces Storybook and the concepts of component driven design. It then walks through building a simple demo app.","prerequisite":"You will need a good working knowledge of React Native and Redux. The tutorial uses React Native 0.55.","content":"In this tutorial, we’re going to take a look at how you can use Storybook to speed up the development and testing of individual components for your React Native app.\n\nWe will be creating a React Native app which will show a list of Pokemon cards. Here’s what the final output will look like:\n\n![react-native-storybook-demo](//images.ctfassets.net/1es3ne0caaid/5GZ98aIgdUQwC22WkwqwYW/16e7007adb4af313a6dbf586580e06d8/react-native-storybook-demo.png)\n\nWe will be covering the following topics as we move along:\n\n\n- Setting up Storybook in a React Native app\n- Using Storybook to develop and visually test the UI components\n- Using StoryShots to automatically add snapshot tests to Storybook stories\n\nYou can find the source code for this tutorial [in its repo on GitHub](https://github.com/anchetaWern/RNStorybook). \n\n\n## Prerequisites\n\nTo follow this tutorial, you need to have good working knowledge of creating React Native apps. That usually means you already have developed a few apps without following a tutorial. We’ll also be using Redux so you should be familiar with basic Redux concepts as well.\n\nYour machine should also be set up with the React Native development environment. We will be using React Native version 0.55 in this tutorial and Yarn to install project dependencies.\n\n\n## What is Storybook?\n\nBefore we begin, it’s important to understand the following:\n\n\n- What is Storybook?\n- What does Storybook do? \n- How Storybook fits into the React Native app development workflow? \n\nStorybook is a development environment for rapid iteration and testing of UI components. By using Storybook, you can:\n\n\n- Visualize the different states of the individual components of your app.\n- Test the UI interactions.\n\nThis is all inside an isolated environment, so you can tweak your components as much as you want without having to worry about breaking something.\n\nStorybook fits in nicely to your existing component development and testing workflow. It integrates well with testing tools such as Jest and Enzyme. This means you can easily perform snapshot and interaction tests on your components. \n\nThe main idea of Storybook is for you to create “Stories”. These stories represent a specific state or behavior of an individual component. For example, there can be a story for the default state of a button, or a disabled button, or a button that’s currently active. \n\nA story can also be composed of tiny little components. For example, a Card component can be composed of a CardImage, CardText, and CardButton components. These stories can then be rendered within the same environment as a React Native app (either on a simulator or real device) so they can be tested. These stories also serve as a living and interactive style guide that documents how specific components should look and behave.\n\n\n## Setting up Storybook\n\nNow that you know what Storybook is, it’s time to set it up so we can use it within a React Native app.\n\nStart by installing [**Create React Native App (CRNA)**](https://github.com/react-community/create-react-native-app). We’ll be using it to generate a new React Native project that works with Storybook:\n\n```\n    npm install -g create-react-native-app\n```\n\nWe need to do this because projects created with `react-native init` [doesn’t work well](https://github.com/storybooks/storybook/issues/3897) with Storybook. At the time of writing this tutorial, the React Native version that was used is `0.55`. You can try installing that version with `react-native init`. But in this tutorial, we’ll use **CRNA** to generate a new project, and then use the “eject” feature to convert it to a standard React Native project. \n\nIf you’re coming here wanting to set up Storybook on an existing project, you’re welcome to follow along. But I can’t ensure that the setup we’ll be using here will work for you. You can skip right to the part where we install Storybook.\n\nNext, create a new project with **CRNA**:\n\n```\n    create-react-native-app RNStorybook\n```\n\nOnce created, navigate inside the project folder and eject the app:\n\n```\n    cd RNStorybook\n    npm run eject\n```\n\nHere are the responses you can use for the questions asked by the eject command:\n\n![react-native-storybook-eject-app](//images.ctfassets.net/1es3ne0caaid/14ek6Kezb6mMQEe0a6ygk2/440c584f0800b1331206204979d0e1be/react-native-storybook-eject-app.png)\n\nNext, install the Storybook command-line tool globally:\n\n```\n    npm install -g @storybook/cli\n```\n\nThis allows you to add Storybook to a React Native project.\n\n\n### Installing dependencies\n\nNext, install the dependencies of the app:\n\n```\n    yarn add prop-types redux react-redux react-native-vector-icons\n```\n\nAmong those dependencies, we have a native module (**react-native-vector-icons**), so we have to link it as well:\n\n```\n    react-native link\n```\n\nIf you’re having problems with the automatic linker, reset the changes made by the linker and follow the installation instructions [here](https://github.com/oblador/react-native-vector-icons#installation).\n\nNext, add Storybook to the project:\n\n```\n    getstorybook\n```\n\nThe command above should show an output similar to the following:\n\n![react-native-storybook-getstorybook](//images.ctfassets.net/1es3ne0caaid/6raNJnGknucsMm88SE0sKE/b2507af48d7c61c3bac18acb3f12caf5/react-native-storybook-getstorybook.png)\n\nOnce it’s done, it adds the following dependencies to the project. These are the [Storybook add-ons](https://storybook.js.org/addons/addon-gallery/). They provide additional features when working inside the Storybook environment:\n\n```\n    \"@storybook/react-native\": \"^3.4.8\", // for working with React Native\n    \"@storybook/addon-actions\": \"^3.4.8\", // for inspecting events triggered by your components\n    \"@storybook/addon-links\": \"^3.4.8\", // for linking stories together\n    \"@storybook/addons\": \"^3.4.8\", // for loading custom add-ons to Storybook\n```\n\nWe won’t really be using any of these in this tutorial, except for the React Native add-on. But they’re installed by default when using the `getstorybook` command, so just explore them on your own.\n\nAnother thing you’ll notice is the `storybook` folder:\n\n![react-native-storybook-file-structure](//images.ctfassets.net/1es3ne0caaid/60gxp33ZegUm2yeY0gyMOy/088e6cd840e3213ff14c77c01cf3ff94/react-native-storybook-file-structure.png)\n\nThis folder contains the template for how the Storybook can be structured. Inside are a few stories and files for initializing Storybook within your app. \n\nWe won’t really be using this structure because we want to be able to easily render the components in both Storybook and the app. \n\nThe next step is to delete all the contents of the `App.js` file at the root of your project directory and replace it with the following:\n\n```\n    export default from \"./storybook\";\n```\n\nThis renders the Storybook UI instead of the UI of the app. In this tutorial, we will only focus on developing the UI components using Storybook. We won’t actually be bringing everything together inside a standard React Native app, that’s why we’ve replaced it with the Storybook UI.\n\nIn reality though, at some point, you’ll want to bring everything together. That’s why it’s important to have a strategy on how you can switch between the app’s UI and the Storybook UI. The most common way to deal with this is to use [**react-native-config**](https://github.com/luggit/react-native-config). This allows you to create a `.env` file which contains the config on which UI to use:\n\n```\n    IS_STORYBOOK=true\n```\n\nThen in your `App.js` file, you can read the value of that variable to determine which UI to use. I won’t really be delving on that in this tutorial so feel free to explore it on your own.\n\nNext, run the app:\n\n```\n    react-native run-android\n    react-native run-ios\n```\n\nOnce the app is running on the simulator or device, you should get an error which looks like this:\n\n![react-native-storybook-connection-refused](//images.ctfassets.net/1es3ne0caaid/1zlTwLzGxWKsuWOUAyygEW/f3eb7d4bc95c77883db4b851fdf5844d/react-native-storybook-connection-refused.png)\n\nThe error is because the app is now expecting the Storybook bundler to be running instead of the default metro bundler. To solve this, you have to terminate the existing metro bundler and then run the Storybook bundler instead:\n\n```\n    yarn storybook\n```\n\nOnce it’s running, reload the app and you should see the following:\n\n![react-native-storybook-welcome](//images.ctfassets.net/1es3ne0caaid/2EtlAgOPIIsQq8Sw0Cia6I/6fd748920ffb3a61d3cdb1d40c82ce5a/react-native-storybook-welcome.png)\n\nIf you click on the burger menu, you should see the individual stories that are inside the `storybook` folder.\n\n\n### Automatically load stories\n\nAs mentioned earlier, we won’t really be using the default structure for the stories. Instead, the story files will live inside the `src/stories` folder. This way, the stories can easily access the components (`src/components`) they need to render. \n\nThese folders shouldn’t exist on your working copy yet. Create a `src` folder at the root of your project directory, then create the `stories` and `components` folder inside of it.\n\nTo make this easier, we can use React Native Storybook loader:\n\n```\n    yarn add react-native-storybook-loader -D\n```\n\nOnce installed, update `package.json` to include the `prestorybook` script and the config for the Storybook loader:\n\n``` json\n    {\n      // existing configs here...\n      \"scripts\": {\n        // existing scripts here...\n        \"storybook\": \"storybook start -p 7007\",\n        \"prestorybook\": \"rnstl\" // add this\n      },\n      // add these\n      \"config\": {\n        \"react-native-storybook-loader\": {\n          \"searchDir\": [\"./src/stories\"],\n          \"pattern\": \"**/*.story.js\", // the filename pattern of the stories within the indicated searchDir\n          \"outputFile\": \"./storybook/storyLoader.js\" // the loader file \n        }\n      }\n    }\n```\n\nThe `storyLoader.js` file is the one that’s going to automatically load the stories that are currently available inside the `searchDir` you defined. In this case, we have to put the components inside the `src/components` and their stories inside the `src/stories` folder.\n\nNext, open the `storybook/storybook.js` file and replace its contents with the following:\n\n``` javascript\n    import { AppRegistry } from \"react-native\";\n    import { getStorybookUI, configure } from \"@storybook/react-native\";\n    import { loadStories } from \"./storyLoader\";\n    \n    configure(() =\u003e {\n      loadStories();\n    }, module);\n    \n    const StorybookUI = getStorybookUI({\n      port: 7007,\n      host: \"localhost\",\n      onDeviceUI: true,\n      resetStorybook: true\n    });\n    \n    AppRegistry.registerComponent(\"RNStorybook\", () =\u003e StorybookUI);\n    \n    export { StorybookUI as default };\n```\n\nThis file calls the story loader so the stories will be included in the Storybook UI. \n\nNext, make sure that the `storybook/index.js` file contains the code below. This makes use of the `StorybookUI` you’ve exported in the `storybook/storybook.js` file:\n\n``` javascript\n    // storybook/index.js\n    \n    import StorybookUI from \"./storybook\";\n    \n    export default StorybookUI;\n```\n\nOnce that’s done, you should now be ready to develop the components of the app. Go ahead and run Storybook:\n\n```\n    yarn storybook\n```\n\nHere’s what the app will look like:\n\n![react-native-storybook-no-stories](//images.ctfassets.net/1es3ne0caaid/4IQwAvi9DGU6OmcWi846mg/2579aeaae4814c4f3cad84cb4a9473cd/react-native-storybook-no-stories.png)\n\nRemember to terminate the currently running process of Storybook and re-run `yarn` `storybook` every time you add a new story. This is because React Native Storyloader only re-generates the `storyLoader.js` file when you execute the `yarn storybook` command.\n\n\n## Developing the components\n\nTo develop the UI components of the app, we will be using [Component-Driven Development](https://blog.hichroma.com/component-driven-development-ce1109d56c8e). It’s a development methodology wherein the focus is on the individual components of the app. The main idea is to build the UI starting from the tiniest of components, then you incrementally build up to the screens by using those tiny components. In short, it’s a “bottom-up” approach in developing the UI of the app.\n\nSince you already have experience in developing React Native apps, I assume that you already have a clear idea on what components to build. But let’s try to follow the Component-Driven Development methodology and build the tinier components first before the bigger ones.\n\nBefore we proceed, please download the [Pokemon images from the repo](https://github.com/anchetaWern/RNStorybook/tree/master/src/images). If you’ve cloned the repo earlier, you can simply copy the `src/images` directory over to your `src` folder. While you’re at it, you can also create a `components` folder beside the `images` folder. This is where we will put the components.\n\n### IconButton component\n\nBased on the app’s screenshot from earlier, the smallest component which we can break down from the screen is the heart-shaped button. This button is used to favorite a specific Pokemon. Here’s what it looks like when rendered inside Storybook:\n\n![react-native-storybook-icon](//images.ctfassets.net/1es3ne0caaid/3MqChjGQfSeeiw6kQS8IUy/d3346a1a42457183ece820e6e37c0114/react-native-storybook-icon.png)\n\nGo ahead and create the component:\n\n``` javascript\n    // src/components/IconButton.js\n    \n    import React from \"react\";\n    import PropTypes from \"prop-types\";\n    import { TouchableOpacity } from \"react-native\";\n    import Icon from \"react-native-vector-icons/FontAwesome\";\n    \n    const IconButton = ({ icon, color, onPress }) =\u003e {\n      return (\n        \u003cTouchableOpacity onPress={onPress} style={styles.button}\u003e\n          \u003cIcon name={icon} size={30} color={color} /\u003e\n        \u003c/TouchableOpacity\u003e\n      );\n    };\n    \n    const styles = {\n      button: {\n        alignSelf: \"center\",\n        marginTop: 10\n      }\n    };\n    \n    IconButton.propTypes = {\n      icon: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n      onPress: PropTypes.func.isRequired\n    };\n    \n    export default IconButton;\n```\n\nThe next step is to create the stories for the component. This is where we render the different states of the component so it’s visible within Storybook:\n\n``` javascript\n    // src/stories/IconButton.story.js\n    \n    import React from \"react\";\n    import { View } from \"react-native\";\n    import IconButton from \"../components/IconButton\";\n    import { storiesOf } from \"@storybook/react-native\";\n    \n    storiesOf(\"IconButton\", module)\n      .add(\"on\", () =\u003e (\n        \u003cIconButton\n          icon={\"heart\"}\n          color={\"#333\"}\n          onPress={() =\u003e console.log(\"un-favorited!\")}\n        /\u003e\n      ))\n      .add(\"off\", () =\u003e (\n        \u003cIconButton\n          icon={\"heart-o\"}\n          color={\"#333\"}\n          onPress={() =\u003e console.log(\"favorited!\")}\n        /\u003e\n      ));\n```\n\nLet’s break down what’s happening in the code above. First, we load the modules that we need. This includes the `IconButton` and the `storiesOf` function from the React Native Storybook package:\n\n``` javascript\n    import React from \"react\";\n    import { View } from \"react-native\";\n    import IconButton from \"../components/IconButton\"; // the component whose story we're creating\n    import { storiesOf } from \"@storybook/react-native\";\n```\n\nNext, we specify the name of the component whose story we’re creating:\n\n``` javascript\n    storiesOf(\"IconButton\", module)\n```\n\nThe second argument in the `storiesOf` function above serves as Storybook’s reference to the file where the story code is. This enables the hot-module replacement feature. It’s only needed in a browser environment because React Native already reloads the entire app if you have live-reloading enabled. The only reason why we’re including it is that Jest needs this reference for the snapshot tests to work.\n\nNext, we add the stories for this component. In this case, we only have two: one for the default state, and another for the favorited state:\n\n``` javascript\n    .add(\"off\", () =\u003e (\n      \u003cIconButton\n        icon={\"heart-o\"}\n        color={\"#333\"}\n        onPress={() =\u003e console.log(\"action: favorited\")}\n      /\u003e\n    ))\n    .add(\"on\", () =\u003e (\n      \u003cIconButton\n        icon={\"heart\"}\n        color={\"#333\"}\n        onPress={() =\u003e console.log(\"action: un-favorited\")}\n      /\u003e\n    ));\n```\n\nWhen rendering the tiny components, we don’t really care yet about testing their functionality. That’s why we only log the action we’re expecting. If the button is in the default state (meaning, it hasn’t been favorited yet), we expect the action to be “favorited” while the other one is just the opposite.\n\nA couple of things to remember when creating stories is that there should be only one story file for each component. And each story file should only be rendering that component alone. The other thing is that you don’t have to add a story for every possible state of the component, only the ones that makes sense. For example, if you’re in the React Native environment, and you’re creating a story for a component that makes use of `TouchableOpacity`. In this case, you don’t really have to add a story for “clicked” or “tapped”, because it all looks the same anyway. The default opacity value used by React Native already makes sense, so most of the time you don’t really want to change it.\n\n\n### Card component\n\nThe next component we’re going to create is the Card component. Here’s what it looks like:\n\n![react-native-storybook-favorited](//images.ctfassets.net/1es3ne0caaid/4BLoZKSv4IqSIScocGiCuq/61ddbddd61dfac9deeb5ceae0ae90535/react-native-storybook-favorited.png)\n\nHere’s the code:\n\n``` javascript\n    // src/components/Card.js\n    \n    import React from \"react\";\n    import { View, Image, Text, Dimensions } from \"react-native\";\n    import PropTypes from \"prop-types\";\n    import IconButton from \"./IconButton\";\n    \n    const { width, height } = Dimensions.get(\"window\");\n    \n    const Card = ({ image, text, is_favorite, action }) =\u003e {\n      const icon = is_favorite ? \"heart\" : \"heart-o\";\n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cImage source={image} resizeMode={\"contain\"} style={styles.image} /\u003e\n          \u003cText style={styles.text}\u003e{text}\u003c/Text\u003e\n          \u003cIconButton icon={icon} color={\"#333\"} onPress={action} /\u003e\n        \u003c/View\u003e\n      );\n    };\n    \n    const styles = {\n      container: {\n        width: width - 40,\n        alignItems: \"center\",\n        borderWidth: 1,\n        borderColor: \"#ccc\",\n        padding: 10,\n        marginTop: 5,\n        marginBottom: 5\n      },\n      image: {\n        width: width - 100\n      },\n      text: {\n        fontSize: 20,\n        fontWeight: \"bold\"\n      }\n    };\n    \n    Card.propTypes = {\n      image: PropTypes.number.isRequired,\n      text: PropTypes.string.isRequired,\n      is_favorite: PropTypes.bool.isRequired,\n      action: PropTypes.func.isRequired\n    };\n    \n    export default Card;\n```\n\nFrom the code above, you can see that we’re bringing in a smaller component. This is what Component-Driven Development is all about. Create the smaller components first and then you assemble them to create a larger component.\n\nNext, create the story file:\n\n``` javascript\n    // src/stories/Card.story.js\n    \n    import React from \"react\";\n    import { View } from \"react-native\";\n    import Card from \"../components/Card\";\n    \n    import { storiesOf } from \"@storybook/react-native\";\n    \n    storiesOf(\"Card\", module)\n      .addDecorator(getStory =\u003e (\n        \u003cView style={{ flex: 1, alignItems: \"center\" }}\u003e{getStory()}\u003c/View\u003e\n      ))\n      .add(\"default\", () =\u003e (\n        \u003cCard\n          image={require(\"../images/charizard.jpg\")}\n          text={\"Charizard\"}\n          is_favorite={false}\n          action={() =\u003e {\n            console.log(\"clicked!\");\n          }}\n        /\u003e\n      ))\n      .add(\"favorited\", () =\u003e (\n        \u003cCard\n          image={require(\"../images/lugia.jpg\")}\n          text={\"Lugia\"}\n          is_favorite={true}\n          action={() =\u003e {\n            console.log(\"clicked!\");\n          }}\n        /\u003e\n      ));\n```\n\nFrom the code above, you can see that we’re pretty much doing the same thing we did in the story for the IconButton component. Only this time, we’re passing the prop which determines what the IconButton’s state will be to the Card component.\n\nAnother new thing is the `addDecorator` method:\n\n``` javascript\n    .addDecorator(getStory =\u003e (\n      \u003cView style={{ flex: 1, alignItems: \"center\" }}\u003e{getStory()}\u003c/View\u003e\n    ))\n```\n\nIn Storybook, we use a [decorator](https://storybook.js.org/basics/writing-stories/#using-decorators) to specify a common wrapper for all the stories that we create for a specific component. In this case, we simply want to wrap all the stories in a `View` that’s aligned at the center of the screen. The `getStory` method is used for rendering the story within the wrapper. \n\nIf you’re using Redux, decorator’s are a good place to put your providers.\n\n\n### CardList component\n\nThe last component is the CardList component, and it looks like this:\n\n![react-native-storybook-card-list](//images.ctfassets.net/1es3ne0caaid/1P5X2oOkVyywoS6UIU8aoS/2d5f0e93a7cd66beca478903306bdbf4/react-native-storybook-card-list.png)\n\nAs you can see, this component brings together all the components we’ve built so far. This also means that we already need to add real functionality to it. That is to favorite and un-favorite each card.\n\nIn this component, we will be using Redux to add a global state to the app. This allows us to favorite or un-favorite cards.\n\nFirst, create the file where we define the different types of actions within the app. In this case, we only have one. This is the action to favorite or un-favorite a card:\n\n``` javascript\n    // src/actions/types.js\n    \n    export const FAVORITED_CARD = \"favorited_card\";\n```\n\nNext, create the function which will be called whenever the user clicks on an IconButton to favorite a Card. This returns the object which will be used by the reducer as a basis for updating the app state:\n\n``` javascript\n    // src/actions/index.js\n    \n    import { FAVORITED_CARD } from \"./types\";\n    \n    export const favoritedCard = id =\u003e {\n      return {\n        type: FAVORITED_CARD,\n        payload: id\n      };\n    };\n```\n \nNext, create the reducer. This is where we put the initial app state, as well as the code for handling the actions that have to do with the cards:\n\n``` javascript\n    // src/reducers/CardsReducer.js\n    \n    import React, { Component } from \"react\";\n    import { FAVORITED_CARD } from \"../actions/types\";\n    \n    const INITIAL_STATE = {\n      cards: [\n        {\n          id: 1,\n          label: \"Charizard\",\n          image: require(\"../images/charizard.jpg\"),\n          is_favorite: false\n        },\n        {\n          id: 2,\n          label: \"Empoleon\",\n          image: require(\"../images/empoleon.jpg\"),\n          is_favorite: true\n        },\n        {\n          id: 3,\n          label: \"Entei\",\n          image: require(\"../images/entei.jpg\"),\n          is_favorite: false\n        },\n        {\n          id: 4,\n          label: \"Groudon\",\n          image: require(\"../images/groudon.jpg\"),\n          is_favorite: false\n        },\n        {\n          id: 5,\n          label: \"Lugia\",\n          image: require(\"../images/lugia.jpg\"),\n          is_favorite: true\n        },\n        {\n          id: 6,\n          label: \"Salamence\",\n          image: require(\"../images/salamence.jpg\"),\n          is_favorite: false\n        },\n        {\n          id: 7,\n          label: \"Torterra\",\n          image: require(\"../images/torterra.jpg\"),\n          is_favorite: true\n        }\n      ]\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      switch (action.type) {\n        case FAVORITED_CARD:\n          let cards = state.cards.map(item =\u003e {\n            return item.id == action.payload\n              ? { ...item, is_favorite: !item.is_favorite }\n              : item;\n          });\n    \n          return { ...state, cards };\n    \n        default:\n          return state;\n      }\n    };\n```\n\nNext, bring all the reducers together:\n\n``` javascript\n    // src/reducers/index.js\n    \n    import { combineReducers } from \"redux\";\n    import CardsReducer from \"./CardsReducer\";\n    \n    export default combineReducers({\n      cards: CardsReducer\n    });\n```\n\nAfter that, we can now proceed with the CardList component:\n\n``` javascript\n    // src/components/CardList.js\n    \n    import React, { Component } from \"react\";\n    import { View } from \"react-native\";\n    import PropTypes from \"prop-types\";\n    \n    import { connect } from \"react-redux\";\n    import { favoritedCard } from \"../actions\";\n    import Card from \"./Card\";\n    \n    class CardList extends Component {\n      render() {\n        return \u003cView style={styles.container}\u003e{this.renderCards()}\u003c/View\u003e;\n      }\n    \n      renderCards = () =\u003e {\n        return this.props.cards.map(item =\u003e {\n          return (\n            \u003cCard\n              key={item.id}\n              image={item.image}\n              text={item.label}\n              is_favorite={item.is_favorite}\n              action={this.props.favoritedCard.bind(this, item.id)}\n            /\u003e\n          );\n        });\n      };\n    }\n    \n    const styles = {\n      container: {\n        flex: 1\n      }\n    };\n    \n    CardList.propTypes = {\n      cards: PropTypes.array.isRequired,\n      favoritedCard: PropTypes.func.isRequired\n    };\n    \n    const mapStateToProps = ({ cards }) =\u003e {\n      return cards;\n    };\n    \n    export default connect(\n      mapStateToProps,\n      {\n        favoritedCard\n      }\n    )(CardList);\n```\n\nInside the story for the CardList component, we use a `Provider` component to provide the necessary data and functionality to it:\n\n``` javascript\n    // src/stories/CardList.story.js\n    \n    import React from \"react\";\n    import { ScrollView } from \"react-native\";\n    import { storiesOf } from \"@storybook/react-native\";\n    \n    import Provider from \"../components/Provider\";\n    import CardList from \"../components/CardList\";\n    \n    storiesOf(\"CardList\", module)\n      .addDecorator(getStory =\u003e \u003cProvider\u003e{getStory()}\u003c/Provider\u003e)\n      .add(\"with cards\", () =\u003e {\n        return \u003cCardList /\u003e;\n      });\n```\n\nHere’s the code for the `Provider` component:\n\n``` javascript\n    // src/components/Provider.js\n    \n    import React from \"react\";\n    import { ScrollView } from \"react-native\";\n    import { Provider as ReduxProvider } from \"react-redux\";\n    import { createStore } from \"redux\";\n    import reducers from \"../reducers\";\n    \n    import PropTypes from \"prop-types\";\n    \n    const store = createStore(reducers);\n    \n    const Provider = ({ children }) =\u003e {\n      return (\n        \u003cReduxProvider store={store}\u003e\n          \u003cScrollView contentContainerStyle={styles.content}\u003e{children}\u003c/ScrollView\u003e\n        \u003c/ReduxProvider\u003e\n      );\n    };\n    \n    const styles = {\n      content: {\n        alignItems: \"center\"\n      }\n    };\n    \n    Provider.propTypes = {\n      children: PropTypes.element.isRequired\n    };\n    \n    export default Provider;\n```\n\nAs you can see from the code above, all this file does is wrap the `CardList` within the Provider provided by `react-redux`.\n\nOnce that’s done, the components that you’ve created can now be used within the app. The stories you created should serve as a living document. Other developers can examine and test it whenever they’re unsure of how a specific component should behave and look like.\n\n\n## Snapshot testing\n\nOne of the benefits of using Storybook is that it gives us the ability to perform snapshot test on individual stories using [StoryShots](https://www.npmjs.com/package/@storybook/addon-storyshots). You can install it with the following command:\n\n```\n    yarn add --dev @storybook/addon-storyshots\n```\n\nNext, delete the `App.test.js` file at the root of the project directory. We won’t really test the whole app in this tutorial. If you don’t delete that file, you’ll be getting the error below if you run `yarn test`:\n\n![react-native-storybook-app-test](//images.ctfassets.net/1es3ne0caaid/29rexPzrPmAaQI8o0y4kAg/2105f45d09ce85d93fa9528d5675ca1c/react-native-storybook-app-test.png)\n\nNext, create the test file that Jest will use:\n\n``` javascript\n    // src/storybook.test.js\n    \n    import initStoryshots from \"@storybook/addon-storyshots\";\n    initStoryshots();\n```\n\nNext, install **jest-static-stubs**:\n\n```\n    yarn add jest-static-stubs\n```\n\nWe need this because the tests will break if you’re importing static assets inside your components. In this case, it’s not even the images that we’re rendering inside each card that is at fault. It’s one of the images from React Native itself:\n\n![react-native-storybook-static-assets-error](//images.ctfassets.net/1es3ne0caaid/dSs3ZlgBhYU04UaokeM4A/6da752ce3c700bc70181b1c29919e8f8/react-native-storybook-static-assets-error.png)\n\nThe **jest-static-stubs** package allows us to stub the static assets so that they work with Jest. If you don’t know what a stub is, it’s used in testing to simulate a specific functionality. In this case, **jest-static-stubs** simulates the functionality for requiring images.\n\nAdd the following Jest config in your `package.json` file to use **jest-static-stubs**:\n\n``` json\n    \"jest\": {\n      \"preset\": \"react-native\",\n      \"moduleNameMapper\": {\n        \".+\\\\.(png)$\": \"jest-static-stubs/png\"\n      }\n    },\n```\n\nOnce that’s done, if you run `yarn` `test`, you should get the following error:\n\n![react-native-storybook-type-error](//images.ctfassets.net/1es3ne0caaid/5kRDPcbKmWkwCC64ICOW84/ef44e3f38b8ee5604dcc62cd8b783bc7/react-native-storybook-type-error.png)\n\nThis is one caveat when using Jest. Because when we render the component inside the app, the type of variable we pass into the Card component is certainly a number.\n\nOn the other hand, when running the test with Jest, statements like `require(\"./src/images/something.jpg\")` return an object instead.\n\nYou can see for yourself by changing the prop type of `image` to `object`:\n\n``` javascript\n    // src/components/Card.js\n    \n    Card.propTypes = {\n      image: PropTypes.object.isRequired, // update this\n      text: PropTypes.string.isRequired,\n      // reset of the proptypes here...\n    };\n```\n\nAfter that, execute `yarn test` and then inspect the generated snapshot file, you can see that it’s indeed using an object:\n\n``` javascript\n    // src/__snapshots__/storybook.test.js.snap\n    \n    // Jest Snapshot v1, https://goo.gl/fbAQLP\n    \n    exports[`Storyshots Card default 1`] = `\n    \u003cView\n      style={\n        Object {\n          \"alignItems\": \"center\",\n          \"flex\": 1,\n        }\n      }\n    \u003e\n      \u003cView\n        style={\n          Object {\n            \"alignItems\": \"center\",\n            \"borderColor\": \"#ccc\",\n            \"borderWidth\": 1,\n            \"marginBottom\": 5,\n            \"marginTop\": 5,\n            \"padding\": 10,\n            \"width\": 710,\n          }\n        }\n      \u003e\n        \u003cImage\n          resizeMode=\"contain\"\n          source={\n            Object {\n              \"testUri\": \"../../../src/images/charizard.jpg\",\n            }\n          }\n          style={\n            Object {\n              \"width\": 650,\n            }\n          }\n        /\u003e\n```\n\nSo what’s the solution? Well, looks like the solution is to use the **RelativeImageStub** library which React Native already provides for mocking the `require` image statements so that Flow can use it. If you’re interested in looking at the code, it’s at `node_modules/react-native/Libraries/Image/RelativeImageStub.js`.\n\nIn your `package.json` file, you can use the **RelativeImageStub** library by simply specifying the string “RelativeImageStub”:\n\n``` json\n    \"jest\": {\n      \"preset\": \"react-native\",\n      \"moduleNameMapper\": {\n        \"^.+\\\\.(jpg|jpeg)$\": \"RelativeImageStub\", // add this\n        \".+\\\\.(png)$\": \"jest-static-stubs/png\"\n      }\n    },\n```\n\nAt this point, you can now run `yarn test` and all the tests should pass:\n\n![react-native-storybook-app-test-pass](//images.ctfassets.net/1es3ne0caaid/5dSr815rWw40EOOK0YIoAM/40109648cfff05080ad4a3849935f39c/react-native-storybook-app-test-pass.png)\n\nEvery time you update your components or stories, you should run `yarn test -u` instead. This will update the currently stored snapshot. Running `yarn test` will compare the old snapshot with the new one, and it will fail if there’s something different. After that, commit the changes to your repo to document the change.\n\n\n## Further reading\n\nIf you want to learn more, here are some links for further exploration:\n\n\n- [Component-Driven Development](https://blog.hichroma.com/component-driven-development-ce1109d56c8e)\n- [Learn Storybook](https://www.learnstorybook.com/)\n- [Testing a React-Redux app using Jest and Enzyme](https://medium.com/netscape/testing-a-react-redux-app-using-jest-and-enzyme-b349324803a9)\n\n\n## Conclusion\n\nThat’s it! In this tutorial, you’ve learned how to use Storybook for fast prototyping of components for your React Native app. You’ve also learned how to use Jest and StoryShots to implement snapshot testing for the individual stories created using Storybook.\n\nYou can find the source code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/RNStorybook).","metaTitle":"Using Storybook with React Native","metaDescription":"This tutorial will show you how to build a React Native app using Storybook, following the principles of component driven design and development."}}],"defaultValue":"React Native","queryType":"tag","pages":4,"route":"/tutorials","query":{"tag":"React Native","page":"4"}}},"page":"/tutorials","query":{"tag":"React Native","page":"4"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=React%20Native&page=4 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:38:19 GMT -->
</html>