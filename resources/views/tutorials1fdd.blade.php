<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Go by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:19:20 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">23</span> tutorials for “<span class="css-npldjc ehwuahf2">Go</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials19f4.html?product=Beams&amp;tag=Go" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials.html" class="css-a3lpv2 e137azhw1"><svg fill="#C223CE" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#C223CE"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Go"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/slack-push-notifications-webhooks-android.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Notify Slack users of push notification status with webhooks</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Webhooks make it extremely easy to send push notifications to all of your iOS and Android users with a single request. I...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/go-tweets-popularity-chart.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live popularity chart in Go using tweets as a data source</h3><p class="css-k12xad e5jrto45">Build a Go application with a simple web frontend, displaying a live graph comparing the popularity of three Twitter top...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/lambda-go-android-push-notifications.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Amazon Web Services</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">AWS Lambda running Go and Pusher Beams for Android push notifications</h3><p class="css-k12xad e5jrto45">Learn how to send push notifications from AWS Lambda to an Android app, using Pusher Beams. Build a simple demo app and ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-analytics-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live analytics dashboard using Go and MongoDB</h3><p class="css-k12xad e5jrto45">Use Go, MongoDB and Pusher Channels to monitor user interactions with your app. Build a simple demo app page and a monit...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/aws-lambda-go-ios-notifications.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">AWS Lambda running Go and Pusher Beams for iOS notifications</h3><p class="css-k12xad e5jrto45">Learn how to use AWS Lambda to send push notifications to an iOS. In this tutorial, the Lambda function will be written ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/terminal-web-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Share your terminal as a web application with Go</h3><p class="css-k12xad e5jrto45">Learn how to share your terminal output in a web interface using Go. The demo pipes data to the app, which renders it to...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/encryption-go-channels.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">End to end encryption in Go with Pusher Channels</h3><p class="css-k12xad e5jrto45">Pusher Channels allows for end-to-end encryption. In this tutorial, learn how to use it by building a simple realtime bl...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/messaging-queue-node-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Pusher Channels as an alternative messaging queue</h3><p class="css-k12xad e5jrto45">Use Node.js, Golang and Pusher Channels to create a message queue backend. The demo application features a login service...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/service-discovery-microservices.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Service discovery in a microservice architecture with Pusher Channels</h3><p class="css-k12xad e5jrto45">Learn how to use Pusher Channels to support service discovery when creating a microservices architecture. This tutorial ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Prev</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials4e78.html?tag=Go&amp;page=1" class="css-2wakph edg0byb1">1</a><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsca71.html?tag=Go&amp;page=2" class="css-5s6711 edg0byb1">2</a><a href="tutorialsf573.html?tag=Go&amp;page=3" class="css-5s6711 edg0byb1">3</a><a href="tutorialsca71.html?tag=Go&amp;page=2" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":23,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4HsHTlR8W61e8qFJnHqPRO","type":"Entry","createdAt":"2019-12-18T18:35:41.721Z","updatedAt":"2019-12-18T18:56:37.422Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Notify Slack users of push notification status with webhooks","url":"slack-push-notifications-webhooks-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Khmrnzj5moO4S6WOYOGAo","type":"Entry","createdAt":"2018-11-14T14:35:55.702Z","updatedAt":"2019-03-03T15:15:59.601Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lanre Adelowo","url":"lanre-adelowo","email":"adelowomailbox@gmail.com","twitter":"https://twitter.com/alanreadelowo","github":"https://github.com/adelowo","guestWriter":true}}],"projectRepo":"https://github.com/adelowo/beams-pushnotifications-go","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"18J5ku8AMG7DNqxzvTy4tW","type":"Entry","createdAt":"2019-06-04T15:37:38.967Z","updatedAt":"2019-06-04T15:37:38.967Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Webhooks","url":"webhooks","type":"use case","featured":false}}],"reviewDate":"2019-12-18","description":"Webhooks make it extremely easy to send push notifications to all of your iOS and Android users with a single request. In this tutorial, learn about webhooks and how you can take advantage of them to send a notification to Slack every time a user reads or opens the sent notification. ","prerequisite":"You will need to have Android Studio, Ngrok and  Go 1.12+ installed on your machine.","content":"Pusher Beams makes it extremely easy to send push notifications to all of your iOS and Android users with a single request. In this tutorial, I will be introducing Pusher Beams webhooks and how you can take advantage of them to send a notification to Slack every time a user reads/opens the sent notification. \n\n\n![android-webhooks-slack-push-notifications-img1](//images.ctfassets.net/1es3ne0caaid/6B2yQeTfXucDxGPSc19KzG/12c1feebb8b770c514a8dbe590d8397c/android-webhooks-slack-push-notifications-img1.png)\n\n\n## Prerequisites\n\nTo follow along in this tutorial you need the following things:\n\n\n- Android Studio.\n- A Pusher account. You can create one [here](https://dash.pusher.com).\n- Ngrok. We are going to build a server in this tutorial and we need to expose it to the internet so as to add it as a webhook for Pusher Beams. You can download Ngrok from [its official website](https://ngrok.com).\n- Go `\u003e=1.12`.\n\nTo get started, you will need to create a new directory for this tutorial called `beams-webhook-go`. This will house both the code for the server and iOS application. It can be done with the following command:\n\n\n```\n    $ mkdir beams-webhook-go\n``` \n\n\n## Creating the Slack app\n\nAs explained at the introduction of this tutorial, we need to create a new Slack app. To do that, you need to visit the [Slack apps’ page](https://api.slack.com/apps). You will then need to click on the **New App** button which will display the screenshot below. Once the fields have been filled correctly, push the **Create App** button to continue and create the app.\n\n\n![android-webhooks-slack-push-notifications-img2](//images.ctfassets.net/1es3ne0caaid/vxK5PPwHIyIKEQsvIJy0R/e76fdbfd6069b4ffdd9e3cac1bad6be6/android-webhooks-slack-push-notifications-img2.png)\n\nOnce the app has been created, you will need to create a new **Incoming webhook**. This will require you to select a channel where events the app handles will be posted to. In the screenshot below, I have selected the **random** channel. \n\n\n![android-webhooks-slack-push-notifications-img3](//images.ctfassets.net/1es3ne0caaid/1YgCv4cyq1cqPHZoxBEYAv/714acc33c7d3bf0e64b32b770ac6398c/android-webhooks-slack-push-notifications-img3.png)![android-webhooks-slack-push-notifications-img4](//images.ctfassets.net/1es3ne0caaid/0biaaFx05xjVYnKWfBDnP/9490067532f6cfdc338a2c4259d58127/android-webhooks-slack-push-notifications-img4.png)\n\n\n\u003e Please take note of the URL that was generated. It will be needed in the next section when creating the server.\n\n\n\n## Setting up Firebase\n\nLog in to or create a Firebase account [here](https://firebase.google.com/) and go to your console. If you do not already have a project created you will need to create one and name it anything you like, if you have a project select it. Within the **Project Overview** page select **Add App** and follow the instruction for creating a new Android application. \n\nOnce you have completed the setup for your Android app you will be returned to the dashboard. You will need to go to the project settings (found within the “settings cog” in the top left). Once in the project settings select the **Cloud Messaging** tab. Copy the **Server Key** you will need it for setting up your Pusher Beams instance.\n\n![android-webhooks-slack-push-notifications-img5](//images.ctfassets.net/1es3ne0caaid/7AtOK0IAUElyMj6D75OYBz/d27980af6b27cfc85682c28a11da5aaa/android-webhooks-slack-push-notifications-img5.png)\n\n\n## Creating the Pusher Beams app\n\nLog in or create an account to access your dashboard [here](https://dash.pusher.com/). Create a new beams instance using the dashboard.\n\n\n![android-webhooks-slack-push-notifications-img6](//images.ctfassets.net/1es3ne0caaid/3u2fld2uWalBmHedUarfUO/904abf836283e6ed705d38c231170600/android-webhooks-slack-push-notifications-img6.png)\n\nOnce the Pusher Beams instance have been created, you will be presented with a quickstart screen. You will need to complete step one of the Android setup guide, by providing the FCM server key you copied earlier and select **Continue**. \n\nYou will need to copy your Pusher Beams instance ID and secret key as they will be needed when building the server in the next section.\n\n\n## Creating the backend server\n\nWe need to keep track of users, authenticate them. This is needed so we can make use of the [authenticated users](https://pusher.com/docs/beams/concepts/authenticated-users) feature of Pusher Beams. To get started, you need to create another folder called `server` in the `beams-webhook-go` that was created earlier. To do that, you can make use of the following command:\n\n```    \n    $ mkdir beams-webhook-go\n    $ cd beams-webhook-go\n    $ mkdir server\n    $ cd server\n```    \n\nThe next thing to do is to create a `.env` file which will contain secrets and variables needed to connect to Pusher Beams. To create the file, you can run the following command:\n\n\n```    \n    $ touch .env\n```    \n\nIn this newly created file, you need to paste the following in it:\n\n\n```    \n    // beams-webhook-go/server/.env\n    PUSHER_BEAMS_INSTANCE_ID=YOUR_PUSHER_BEAMS_INSTANCE_ID\n    PUSHER_BEAMS_SECRET_KEY=YOUR_PUSHER_BEAMS_SECRET\n    PUSHER_BEAMS_WEBHOOK_SECRET=YOUR_PUSHER_WEBHOOK_SECRETS\n    SLACK_HOOKS_URL=SLACK_HOOKS_URL\n```    \n\n\n\u003e You need to substitute the correct values in the above file. You can get the PUSHER_BEAMS_* values from the dashboard. `PUSHER_BEAMS_WEBHOOK_SECRET` can be anything you want as we’d use it to verify the request is coming from Pusher alone.\n\n\n    The next thing is to create two files -  `main.go`  and a `slack.go` - which will contain the logic for our server. We need to create three routes:\n    \n- `/auth`: since we are building personalized notifications in this tutorial, we need to identify and differentiate a user from others so we can be certain only he/she receives the push notification. \n- `/push` : we need to be simulate an actual Push notification request. Whatever information is sent to the route will be published to an already authenticated user. \n- `/slack`: this will act as the webhook URL that is going to be added in the Pusher Beams dashboard.\n\nYou can create the aforementioned files with the following command:\n\n\n```   \n    $ touch main.go slack.go\n```    \n\nSince we are using Go modules, you will need to also create a `go.mod` file. It can be done automatically by running `go mod init`. The next thing is to actually build the server. In `main.go` paste the following content:\n\n```go\n    // beams-webhook-go/server/main.go\n    \n    package main\n    \n    import (\n            \"encoding/json\"\n            \"flag\"\n            \"fmt\"\n            \"log\"\n            \"net/http\"\n            \"os\"\n    \n            \"github.com/joho/godotenv\"\n            pushnotifications \"github.com/pusher/push-notifications-go\"\n    )\n    \n    func main() {\n            err := godotenv.Load()\n            if err != nil {\n                    log.Fatal(\"Error loading .env file\")\n            }\n    \n            port := flag.Int64(\"http.port\", 3000, \"Port to run HTTP server on\")\n    \n            flag.Parse()\n    \n            beamsClient, err := pushnotifications.New(os.Getenv(\"PUSHER_BEAMS_INSTANCE_ID\"), os.Getenv(\"PUSHER_BEAMS_SECRET_KEY\"))\n            if err != nil {\n                    log.Fatalf(\"Could not set up Push Notifications client... %v\", err)\n            }\n    \n            mux := http.NewServeMux()\n    \n            mux.HandleFunc(\"/push\", createPushNotificationHandler(beamsClient))\n            mux.HandleFunc(\"/auth\", authenticateUser(beamsClient))\n            mux.HandleFunc(\"/slack\", handleWebhook)\n    \n            if err := http.ListenAndServe(fmt.Sprintf(\":%d\", *port), mux); err != nil {\n                    log.Fatal(err)\n            }\n    }\n    \n    var currentUser = \"\"\n    \n    func authenticateUser(client pushnotifications.PushNotifications) http.HandlerFunc {\n            return func(w http.ResponseWriter, r *http.Request) {\n    \n                    userIDinQueryParam := r.URL.Query().Get(\"user_id\")\n    \n                    beamsToken, err := client.GenerateToken(userIDinQueryParam)\n                    if err != nil {\n                            w.WriteHeader(http.StatusInternalServerError)\n                            return\n                    }\n    \n                    currentUser = userIDinQueryParam\n    \n                    beamsTokenJson, err := json.Marshal(beamsToken)\n                    if err != nil {\n                            w.WriteHeader(http.StatusInternalServerError)\n                            return\n                    }\n    \n                    w.WriteHeader(http.StatusOK)\n                    w.Write(beamsTokenJson)\n            }\n    }\n    \n    func createPushNotificationHandler(client pushnotifications.PushNotifications) http.HandlerFunc {\n            return func(w http.ResponseWriter, r *http.Request) {\n    \n                    if r.Method != http.MethodPost {\n                            w.WriteHeader(http.StatusMethodNotAllowed)\n                            return\n                    }\n    \n                    var data map[string]interface{}\n    \n                    type response struct {\n                            Status  bool   `json:\"status\"`\n                            Message string `json:\"message\"`\n                    }\n    \n                    if err := json.NewDecoder(r.Body).Decode(\u0026data); err != nil {\n                            w.WriteHeader(http.StatusBadRequest)\n                            encode(w, response{\n                                    Status:  false,\n                                    Message: \"Invalid bad request\",\n                            })\n                            return\n                    }\n    \n                    publishRequest := map[string]interface{}{\n                            \"apns\": map[string]interface{}{\n                                    \"aps\": map[string]interface{}{\n                                            \"alert\": data,\n                                    },\n                            },\n                            \"fcm\": map[string]interface{}{\n                                    \"notification\": data,\n                            },\n                    }\n    \n                    _, err := client.PublishToUsers([]string{currentUser}, publishRequest)\n                    if err != nil {\n                            log.Println(err)\n                            w.WriteHeader(http.StatusInternalServerError)\n                            encode(w, response{\n                                    Status:  false,\n                                    Message: \"Could not send push notification\",\n                            })\n                            return\n                    }\n    \n                    w.WriteHeader(http.StatusOK)\n                    encode(w, response{\n                            Status:  true,\n                            Message: \"Push notification sent successfully\",\n                    })\n            }\n    }\n    \n    var encode = func(w http.ResponseWriter, v interface{}) {\n            _ = json.NewEncoder(w).Encode(v)\n    }\n```    \n\nIn the above, we load the values we saved in the `.env`, connect to Pusher Beams and also create an HTTP server. The needed routes have also been created. But a missing part is `handleWebhook` which doesn’t exist yet. We will be implementing that in the `slack.go` file. You will need to open the `slack.go` file and paste the following contents:\n\n\n```go    \n    // beams-webhook-go/server/slack.go\n    \n    package main\n    \n    import (\n            \"bytes\"\n            \"crypto/hmac\"\n            \"crypto/sha1\"\n            \"encoding/hex\"\n            \"encoding/json\"\n            \"io\"\n            \"net/http\"\n            \"os\"\n    )\n    \n    func handleWebhook(w http.ResponseWriter, r *http.Request) {\n    \n            hasher := hmac.New(sha1.New, []byte(os.Getenv(\"PUSHER_BEAMS_WEBHOOK_SECRET\")))\n    \n            type response struct {\n                    Message string `json:\"message\"`\n                    Status  bool   `json:\"status\"`\n            }\n    \n            if r.Header.Get(\"Webhook-Event-Type\") != \"v1.UserNotificationOpen\" {\n                    w.WriteHeader(http.StatusOK)\n                    encode(w, response{\n                            Message: \"Ok\",\n                            Status:  true,\n                    })\n                    return\n            }\n    \n            if _, err := io.Copy(hasher, r.Body); err != nil {\n                    w.WriteHeader(http.StatusBadRequest)\n                    encode(w, response{\n                            Message: \"Could not create crypto hash\",\n                            Status:  false,\n                    })\n                    return\n            }\n    \n            expectedHash := hex.EncodeToString(hasher.Sum(nil))\n    \n            if expectedHash != r.Header.Get(\"webhook-signature\") {\n                    w.WriteHeader(http.StatusBadRequest)\n                    encode(w, response{\n                            Message: \"Invalid webhook signature\",\n                            Status:  false,\n                    })\n                    return\n            }\n    \n            var request struct {\n                    Message string `json:\"text\"`\n            }\n    \n            request.Message = \"User opened a notification just now\"\n    \n            var buf = new(bytes.Buffer)\n    \n            _ = json.NewEncoder(buf).Encode(request)\n    \n            req, err := http.NewRequest(http.MethodPost, os.Getenv(\"SLACK_HOOKS_URL\"), buf)\n            if err != nil {\n                    w.WriteHeader(http.StatusInternalServerError)\n                    encode(w, response{\n                            Message: \"Could not send notification to Slack\",\n                            Status:  false,\n                    })\n                    return\n            }\n    \n            resp, err := http.DefaultClient.Do(req)\n            if err != nil {\n                    w.WriteHeader(http.StatusInternalServerError)\n                    encode(w, response{\n                            Message: \"Error while pinging Slack\",\n                            Status:  false,\n                    })\n                    return\n            }\n    \n            if resp.StatusCode \u003e http.StatusAccepted {\n                    w.WriteHeader(http.StatusInternalServerError)\n                    encode(w, response{\n                            Message: \"Unexpected response from Slack\",\n                            Status:  false,\n                    })\n                    return\n            }\n    \n            w.WriteHeader(http.StatusOK)\n            encode(w, response{\n                    Message: \"Message sent to Slack successfully\",\n                    Status:  true,\n            })\n    }\n```    \n\nIn the above, we only care about webhooks that are of the type, *v1.UserNotificationOpen.* There are also other types of webhook events but this is the one of utmost concern in the tutorial. After which we verify that Pusher actually made the request, that is done by generating a hash of the request body with the key we added to the `PUSHER_BEAMS_WEBHOOK_SECRET`  in the `.env`  file earlier, then match it with what was sent in the request headers. If they both match, we can be certain it is a valid request.\n\nThe next thing to do is to run the server. This can be done by running the following commands:\n\n\n```    \n    $ go build\n    $ go mod tidy ## This step can be skipped\n    $ ./server\n```    \n\nAt this point, the server will be running at port `3000`. You will then need to start `ngrok` as the server needs to be exposed to the internet so it can be added as a webhook in the  Pusher Beams dashboard. To do that, run the following command:\n\n\n```    \n    $ ngrok http 3000\n```    \n\nIf the above command succeeds, you will be presented with a URL, copy it as you will be needing it in a bit.\n\nThe next thing to do is to visit your Pusher Beams dashboard, select your app and visit the **Settings** tab.\n\n\n![android-webhooks-slack-push-notifications-img7](//images.ctfassets.net/1es3ne0caaid/twoWUPUtpSIUMp8z0r3KD/fc871ca6e7201b81d6291ad3969bd716/android-webhooks-slack-push-notifications-img7.png)\n\n\n\u003e Paste the URL the `ngrok` command outputted, then append `/slack` to it. Also, the secret that was defined in the `.env` file as `PUSHER_BEAMS_WEBHOOK_SECRET` will need to be added here.\n\n\n\n## Creating the Android app\n\nIn this section, we are going to create a very basic Android app that actually doesn’t show anything to the user except for the Push notification. To do this, you will need to create a new **Empty Activity** project using Android Studio. You can name it *PusherBeamsSlackWebhook.* Provide a **Package name,** you need to make sure the package name matches what was provided when setting up Firebase earlier in the tutorial.\n\n\n\u003e Please note that this project should be created in the `beams-webhook-go` folder so it lives side by side with the `server` directory\n\nThe next step is to add the dependencies needed, you need to update the `app/build.gradle` with:\n\n```\n    // beams-webhook-go/PusherBeamsSlackWebhook/app/build.gradle\n    \n    dependencies {\n       ...\n        implementation 'com.google.firebase:firebase-core:16.0.9'\n        implementation 'com.google.firebase:firebase-messaging:18.0.0'\n        implementation 'com.pusher:push-notifications-android:1.4.6'\n       ... \n    }\n    \n    apply plugin: 'com.google.gms.google-services'\n```    \n\nThe next step is to visit the Firebase dashboard to download the `google-services.json` file then add it to the project. After which you will need to synchronize Gradle by pressing the **Sync Now** button.\n\nOnce the above succeeds, you will then need to actually implement the Pusher Beams SDK. That can be done by opening the `MainActivity.kt` file and replacing its entire content with the following:\n\n```kotlin\n    // beams-webhook-go/PusherBeamsSlackWebhook/app/src/main/java/com/example/pusherbeamsslackwebhook/MainActivity.kt\n    \n    package com.example.pusherbeamsslackwebhook\n    \n    import android.content.SharedPreferences\n    import androidx.appcompat.app.AppCompatActivity\n    import android.os.Bundle\n    import android.util.Log\n    import com.pusher.pushnotifications.*\n    import com.pusher.pushnotifications.auth.AuthData\n    import com.pusher.pushnotifications.auth.AuthDataGetter\n    import com.pusher.pushnotifications.auth.BeamsTokenProvider\n    import java.util.*\n    \n    class MainActivity : AppCompatActivity() {\n    \n        private val PREF_NAME = \"uuid-generated\"\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n    \n    \n            PushNotifications.start(applicationContext, \"PUSHER_INSTANCE_ID\")\n            PushNotifications.addDeviceInterest(\"webhook-slack\")\n    \n            val sharedPref: SharedPreferences = getSharedPreferences(PREF_NAME, 0)\n    \n            if (!sharedPref.getBoolean(PREF_NAME, false)) {\n    \n                var uuid = UUID.randomUUID().toString()\n    \n                val serverUrl = \"https://NGROK.ngrok.io/auth?user_id=${uuid}\"\n                val tokenProvider = BeamsTokenProvider(serverUrl,\n                    object : AuthDataGetter {\n                        override fun getAuthData(): AuthData {\n                            return AuthData(\n                                headers = hashMapOf()\n                            )\n                        }\n                    })\n    \n    \n                PushNotifications.setUserId(\n                    uuid,\n                    tokenProvider,\n                    object : BeamsCallback\u003cVoid, PusherCallbackError\u003e {\n                        override fun onFailure(error: PusherCallbackError) {\n                            Log.e(\n                                \"BeamsAuth\",\n                                \"Could not login to Beams: ${error.message}\"\n                            )\n                        }\n    \n                        override fun onSuccess(vararg values: Void) {\n                            Log.i(\"BeamsAuth\", \"Beams login success\")\n                        }\n                    }\n                )\n                val editor = sharedPref.edit()\n                editor.putBoolean(PREF_NAME, true)\n                editor.apply()\n            }\n        }\n    }\n```    \n\n\n\u003e Please remember to replace `PUSHER_INSTANCE_ID` with the actual value gotten from the Pusher Beams dashboard.\n\nFinally, you can run the application now.\n\n\n## Testing the implementation\n\nRemember we created a `push` route in our server earlier, you will make use of it to create a push notification that will be sent to the application. That can be done with the following command:\n\n\n```    \n    $ curl localhost:3000/push -X POST -d '{\"title\" : \"Here is a new push notification\"}'\n```    \n\nOnce the above command succeeds, a push notification will be sent to the device. You will need to open it - the push notification. After which you can take a look at the Slack workspace and channel which you configured earlier. The channel should have messages similar to the below screenshot.\n\n\n![android-webhooks-slack-push-notifications-img8](//images.ctfassets.net/1es3ne0caaid/7cSIJLg2DmCUCLBIZ9V5Fd/b087d7ebbafb3c787dec126bea56a8b9/android-webhooks-slack-push-notifications-img8.png)\n\n## Conclusion\n\nIn this tutorial we have learnt how to integrate Pusher Beams webhooks and Slack. As always, the entire code can be found on [GitHub](https://github.com/adelowo/beams-pushnotifications-go).","metaTitle":"Notify Slack users of push notification status with webhooks","metaDescription":"Webhooks make it extremely easy to send push notifications to all of your iOS and Android users with a single request. In this tutorial, learn about webhooks and how you can take advantage of them to send a notification to Slack every time a user reads or opens the sent notification. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"369KH6O2yIk79cjItcMVND","type":"Entry","createdAt":"2019-06-07T18:31:18.861Z","updatedAt":"2019-06-07T18:31:18.861Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live popularity chart in Go using tweets as a data source","url":"go-tweets-popularity-chart","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Khmrnzj5moO4S6WOYOGAo","type":"Entry","createdAt":"2018-11-14T14:35:55.702Z","updatedAt":"2019-03-03T15:15:59.601Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lanre Adelowo","url":"lanre-adelowo","email":"adelowomailbox@gmail.com","twitter":"https://twitter.com/alanreadelowo","github":"https://github.com/adelowo","guestWriter":true}}],"projectRepo":"https://github.com/adelowo/pusher-twitter-streaming-api","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}}],"reviewDate":"2019-06-07","description":"Build a Go application with a simple web frontend, displaying a live graph comparing the popularity of three Twitter topics. You will create a Twitter developer account, code the app, and be able to customize the displayed topics.","prerequisite":"You will need Go 1.5+ installed on your machine.","content":"Polls exists almost everywhere on the internet - Twitter, Slack - and a major similarity between all of them is the results are updated in realtime. In this tutorial, I will be describing how to build a web app that shows the popularity of a keyword in realtime with the help of Pusher Channels. The data source for our application will be tweets from Twitter.\n\nBelow is a gif of the final state of the application:\n\n![go-twitter-graph-demo](//images.ctfassets.net/1es3ne0caaid/5emdjhJDG7JKgw8H0lyuFQ/3a849c917c7aa54cd03cd0ab295b87ac/go-twitter-graph-demo.gif)\n\n## Prerequisites\n\n- Golang `\u003e=1.5`\n- A [Pusher account](https://dashboard.pusher.com)\n- A Twitter application. \n\u003e To do this, you need to apply as a developer before you can create an application. You can find a comprehensive guide [here](https://medium.com/@divyeshardeshana/create-twitter-developer-account-app-4ac55e945bf4). \n\n## Building the application\n\nRemember that an important step to this is to make sure you have a Twitter developer account. Kindly follow [this tutorial](https://medium.com/@divyeshardeshana/create-twitter-developer-account-app-4ac55e945bf4) to do that.\n\nThe next step of action is to create a directory to house our application, you will need to create a directory called `streaming-api`. The location of this directory will depend on the version of the Go toolchain you have - If your Go toolchain is `\u003c=1.11`, you need to create the directory in your `$GOPATH` such as `$GOPATH/src/github.com/username/streaming-api`. If you are making use of `\u003e=1.12`, you can create the directory literally anywhere. \n\nOnce that is done, you will need to create a file called `.env`, this file will contain credentials to access both the Twitter streaming API and Pusher channels. Run the command below to create the file:\n\n```\n    $ touch .env\n```\n\nOnce done, you will also need to paste the following contents into the newly created `.env`  file:\n\n```\n    // .env\n    TWITTER_CONSUMER_KEY=TWITTER_CONSUMER_KEY\n    TWITTER_CONSUMER_SECRET=TWITTER_CONSUMER_SECRET\n    TWITTER_ACCESS_TOKEN=TWITTER_ACCESS_TOKEN\n    TWITTER_ACCESS_SECRET=TWITTER_ACCESS_SECRET\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_APP_KEY=PUSHER_APP_KEY\n    PUSHER_APP_SECRET=PUSHER_APP_SECRET\n    PUSHER_APP_CLUSTER=\"eu\"\n    PUSHER_APP_SECURE=\"1\"\n```\n\n\n\u003e Please remember to replace the placeholders with your actual credentials.\n\nThe next step of action is to actually create the server and the integration with Pusher Channels. To do that, you need to create a new file called `main.go`, that can be done by executing the command below:\n\n```\n    $ touch main.go\n```\n\nYou will also need to fetch some library that are needed to help build the application. Run the command below to install these libraries:\n\n```\n    $ go get -v github.com/dghubble/go-twitter/twitter \n    $ go get -v github.com/dghubble/oauth1 \n    $ go get -v github.com/joho/godotenv\n    $ go get -v github.com/pusher/pusher-http-go\n```\n\nIn the newly created file `main.go`, you will need to paste the following contents:\n\n```go\n    // streaming-api/main.go\n    \n    package main\n    \n    import (\n            \"encoding/json\"\n            \"flag\"\n            \"fmt\"\n            \"html/template\"\n            \"log\"\n            \"net/http\"\n            \"os\"\n            \"os/signal\"\n            \"strings\"\n            \"sync\"\n            \"syscall\"\n            \"time\"\n    \n            \"github.com/dghubble/go-twitter/twitter\"\n            \"github.com/dghubble/oauth1\"\n            \"github.com/joho/godotenv\"\n            \"github.com/pusher/pusher-http-go\"\n    )\n    \n    type cache struct {\n            counter map[string]int64\n            mu      sync.RWMutex\n    }\n    \n    func (c *cache) Init(options ...string) {\n            for _, v := range options {\n                    c.counter[strings.TrimSpace(v)] = 0\n            }\n    }\n    \n    func (c *cache) All() map[string]int64 {\n            c.mu.Lock()\n            defer c.mu.Unlock()\n    \n            return c.counter\n    }\n    \n    func (c *cache) Incr(option string) {\n            c.mu.Lock()\n            defer c.mu.Unlock()\n    \n            c.counter[strings.TrimSpace(option)]++\n    }\n    \n    func (c *cache) Count(option string) int64 {\n            c.mu.RLock()\n            defer c.mu.RUnlock()\n    \n            val, ok := c.counter[strings.TrimSpace(option)]\n            if !ok {\n                    return 0\n            }\n    \n            return val\n    }\n    \n    func main() {\n    \n            options := flag.String(\"options\", \"Messi,Suarez,Trump\", \"What items to search for on Twitter ?\")\n            httpPort := flag.Int(\"http.port\", 1500, \"What port to run HTTP on ?\")\n            channelsPublishInterval := flag.Duration(\"channels.duration\", 3*time.Second, \"How much duration before data is published to Pusher Channels\")\n    \n            flag.Parse()\n    \n            if err := godotenv.Load(); err != nil {\n                    log.Fatalf(\"could not load .env file.. %v\", err)\n            }\n    \n            appID := os.Getenv(\"PUSHER_APP_ID\")\n            appKey := os.Getenv(\"PUSHER_APP_KEY\")\n            appSecret := os.Getenv(\"PUSHER_APP_SECRET\")\n            appCluster := os.Getenv(\"PUSHER_APP_CLUSTER\")\n            appIsSecure := os.Getenv(\"PUSHER_APP_SECURE\")\n    \n            var isSecure bool\n            if appIsSecure == \"1\" {\n                    isSecure = true\n            }\n    \n            pusherClient := \u0026pusher.Client{\n                    AppId:   appID,\n                    Key:     appKey,\n                    Secret:  appSecret,\n                    Cluster: appCluster,\n                    Secure:  isSecure,\n            }\n    \n            config := oauth1.NewConfig(os.Getenv(\"TWITTER_CONSUMER_KEY\"), os.Getenv(\"TWITTER_CONSUMER_SECRET\"))\n            token := oauth1.NewToken(os.Getenv(\"TWITTER_ACCESS_TOKEN\"), os.Getenv(\"TWITTER_ACCESS_SECRET\"))\n    \n            httpClient := config.Client(oauth1.NoContext, token)\n    \n            client := twitter.NewClient(httpClient)\n    \n            optionsCache := \u0026cache{\n                    mu:      sync.RWMutex{},\n                    counter: make(map[string]int64),\n            }\n    \n            splittedOptions := strings.Split(*options, \",\")\n    \n            if n := len(splittedOptions); n \u003c 2 {\n                    log.Fatalf(\"There must be at least 2 options... %v \", splittedOptions)\n            } else if n \u003e 3 {\n                    log.Fatalf(\"There cannot be more than 3 options... %v\", splittedOptions)\n            }\n    \n            optionsCache.Init(splittedOptions...)\n    \n            go func() {\n    \n                    var t *template.Template\n                    var once sync.Once\n    \n                    http.Handle(\"/static/\", http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\".\"))))\n    \n                    http.Handle(\"/polls\", http.HandlerFunc(poll(optionsCache)))\n                    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n    \n                            once.Do(func() {\n                                    tem, err := template.ParseFiles(\"index.html\")\n                                    if err != nil {\n                                            log.Fatal(err)\n                                    }\n    \n                                    t = tem.Lookup(\"index.html\")\n                            })\n    \n                            t.Execute(w, nil)\n                    })\n    \n                    http.ListenAndServe(fmt.Sprintf(\":%d\", *httpPort), nil)\n            }()\n    \n            go func(c *cache, client *pusher.Client) {\n    \n                    t := time.NewTicker(*channelsPublishInterval)\n    \n                    for {\n                            select {\n                            case \u003c-t.C:\n                                    pusherClient.Trigger(\"twitter-votes\", \"options\", c.All())\n                            }\n                    }\n    \n            }(optionsCache, pusherClient)\n    \n            demux := twitter.NewSwitchDemux()\n            demux.Tweet = func(tweet *twitter.Tweet) {\n                    for _, v := range splittedOptions {\n                            if strings.Contains(tweet.Text, v) {\n                                    optionsCache.Incr(v)\n                            }\n                    }\n            }\n    \n            fmt.Println(\"Starting Stream...\")\n    \n            filterParams := \u0026twitter.StreamFilterParams{\n                    Track:         splittedOptions,\n                    StallWarnings: twitter.Bool(true),\n            }\n    \n            stream, err := client.Streams.Filter(filterParams)\n            if err != nil {\n                    log.Fatal(err)\n            }\n    \n            go demux.HandleChan(stream.Messages)\n    \n            ch := make(chan os.Signal)\n            signal.Notify(ch, syscall.SIGINT, syscall.SIGTERM)\n            \u003c-ch\n    \n            fmt.Println(\"Stopping Stream...\")\n            stream.Stop()\n    }\n    \n    func poll(cache *cache) func(w http.ResponseWriter, r *http.Request) {\n            return func(w http.ResponseWriter, r *http.Request) {\n                    json.NewEncoder(w).Encode(cache.All())\n            }\n    }\n```\n\nWhile a little lengthy, the above code does just three things:\n\n\n- Connect to the Twitter streaming API and listen for tweets that match our options search.\n- Start an `HTTP` server that serves an HTML page in order to display the realtime results.\n- Send an updated result to Pusher Channels.\n\nWhile you might be tempted to run the application, there are still a few things missing here. We need to create one more file - `index.html`. This file will house the frontend for our application. You will need to go ahead to create the file by running the command below:\n\n```\n    $ touch index.html\n```\n\nIn the newly created `index.html` file, you will need to paste the following contents in it:\n\n```html\n    // streaming-api/index.html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003ctitle\u003eRealtime voting app based on Tweets\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap-grid.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.css\" /\u003e\n    \u003c/head\u003e\n    \n    \u003cbody\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-1\"\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-10\"\u003e\n                    \u003ccanvas id=\"myChart\" width=\"400\" height=\"400\"\u003e\u003c/canvas\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-1\"\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://js.pusher.com/4.4/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"static/app.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe import a few Javascript libraries but perhaps the most interesting is Line 29 which reads `\u003cscript src=\"static/app.js\"\u003e\u003c/script\u003e` . Basically, what this means is we need to create yet another file called `app.js`. You can go ahead to do that in the root directory with the following command:\n\n```\n    $ touch app.js\n```\n\nIn the newly created `app.js` file, paste the following content:\n\n```js\n    // streaming-api/app.js\n    \n    const APP_KEY = 'PUSHER_APP_KEY';\n    const APP_CLUSTER = 'PUSHER_APP_CLUSTER';\n    \n    var ctx = document.getElementById('myChart').getContext('2d');\n    var myChart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '# of Tweets',\n            data: [],\n            backgroundColor: [\n              'rgba(255, 99, 132, 0.2)',\n              'rgba(54, 162, 235, 0.2)',\n              'rgba(255, 159, 64, 0.2)',\n            ],\n            borderWidth: 1,\n          },\n        ],\n      },\n      options: {\n        scales: {\n          yAxes: [\n            {\n              ticks: {\n                beginAtZero: true,\n              },\n            },\n          ],\n        },\n      },\n    });\n    \n    function updateChart(data) {\n      let iterationCount = 0;\n    \n      for (const key in data) {\n        if (!myChart.data.labels.includes(key)) {\n          myChart.data.labels.push(key);\n        }\n    \n        myChart.data.datasets.forEach(dataset =\u003e {\n          dataset.data[iterationCount] = data[key];\n        });\n    \n        iterationCount++;\n    \n        myChart.update();\n      }\n    }\n    \n    axios\n      .get('http://localhost:1500/polls', {})\n      .then(res =\u003e {\n        updateChart(res.data);\n      })\n      .catch(err =\u003e {\n        console.log('Could not retrieve information from the backend');\n        console.error(err);\n      });\n    \n    const pusher = new Pusher(APP_KEY, {\n      cluster: APP_CLUSTER,\n    });\n    \n    const channel = pusher.subscribe('twitter-votes');\n    \n    channel.bind('options', data =\u003e {\n      updateChart(data);\n    });\n```\n\n\n\u003e Please remember to make use of your actual key.\n\nWith the above done, it is time to test the application. To do this, you should run the following command in the root directory of `streaming-api` :\n\n```\n    $ go run main.go\n```\n\nYou will need to visit `http://localhost:1500` to see the chart.\n\nYou can also make use of the trending topics on your Twitter if you want to. To search Twitter for other polls, you can also make use of the following command:\n\n```\n    $ go run main.go -options=\"Apple,Javascript,Trump\"\n```\n\n\n## Conclusion\n\nIn this tutorial, I have described how to build a realtime popularity application that uses tweets as a data source. I also showed how to integrate with the Twitter streaming API and more importantly, Pusher Channels.\n\nAs always, the code for this tutorial can be found on [GitHub](https://github.com/adelowo/pusher-twitter-streaming-api).","metaTitle":"Build a popularity chart in Go using tweets as a data source","metaDescription":"Build a Go application with a simple web frontend, displaying a live graph comparing popularity of three Twitter topics. You will create a Twitter developer account, code the app, and be able to customize the displayed topics."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5qK7q8goV55NQ7dSxdmqor","type":"Entry","createdAt":"2019-05-22T08:24:37.644Z","updatedAt":"2019-05-22T08:24:37.644Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"AWS Lambda running Go and Pusher Beams for Android push notifications","url":"lambda-go-android-push-notifications","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"9VkyxkESQ0IQmyKy8wq6C","type":"Entry","createdAt":"2018-09-18T18:40:03.858Z","updatedAt":"2018-09-18T18:40:03.858Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christopher Batin","url":"christopher-batin","email":"chris@batin.me","twitter":"https://twitter.com/cjbatin","github":"https://github.com/cjbatin/","guestWriter":true}}],"projectRepo":"https://github.com/cjbatin/Go-Lambda-and-Pusher-Beams-for-Android-Notifications","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6x89hfueemQIu9tGMyKa0a","type":"Entry","createdAt":"2019-03-13T18:42:28.682Z","updatedAt":"2019-03-13T18:42:28.682Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Amazon Web Services","url":"amazon-web-services","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}}],"reviewDate":"2019-05-22","description":"Learn how to send push notifications from AWS Lambda to an Android app, using Pusher Beams. Build a simple demo app and create a Lambda function using Go. Upload and test the function.","prerequisite":"You will need Go 1.1+ and Android Studio 3.3.2+ installed on your machine.","content":"## Introduction\n\nPusher Beams allows you to customize push notifications you send to your devices via a server. However it can be expensive to run a server 24 hours a day 7 days a week and we may only need to send notifications every so often. This is where AWS Lambda can help. Lambda functions are serverless and work on a pay as you go model (with a generous free tier). This means that you only pay for when you use the function. We’re going to explore how we can setup Pusher Beams on an Android client using an AWS Lambda function running Go to trigger the notifications.\n\n\n## Prerequisites\n\n- A free AWS account. You can create one [here](https://aws.amazon.com).\n- A free Pusher account. You can create one [here](https://dash.pusher.com/authenticate).\n- A free Google Firebase account. You can create one [here](https://firebase.google.com).\n- Go 1.x installed on your machine. Install instructions [here](https://golang.org/doc/install).\n- Android Studio 3.3.2+\n- An understanding of Android development and Android Studio environment.\n\n\n## Create your Android application\n\nWe will need to have a user that has registered for notifications and signed up for an interest we will call “hello”, so we can test out our implementation. We’re going to create a very basic Android app that doesn’t actually show anything to the user except for the notification on the lock screen.\n\nCreate a new **Empty Activity** project using Android Studio and name it something like LambdaPush. Provide a **Package name** and remember this as you will need it for completing the Firebase set up. We will be using **Kotlin** as the language choice for this tutorial and supporting Android 16+ (Jelly Bean). \n\n### Firebase set up\n\nLog in to your Firebase account [here](https://firebase.google.com) and go to your console. If you do not already have a project created you will need to create one and name it anything you like, if you have a project select it. Within the **Project Overview** page select **Add App** and follow the instruction for creating a new Android application. \n\nOnce you have completed the setup for your Android app you will be returned to the dashboard. You will need to go to the project settings (found within the “settings cog” in the top left). Once in the project settings select the **Cloud Messaging** tab. Copy the **Server Key** you will need it for setting up your Pusher Beams instance.\n\n![lambda-android-firebase](//images.ctfassets.net/1es3ne0caaid/2cbkn38uhTDGt2L1MBWDfN/1ed0cf684bfe4951f2253207aec4fa1a/lambda-android-firebase.png)\n\n### Creating a Pusher Beams instance\nLogin or create an account to access your dashboard [here](https://dash.pusher.com). Create a new beams instance using the dashboard.\n\n![lambda-android-beams](//images.ctfassets.net/1es3ne0caaid/1hOmThI9eg88vgMj2BpI0f/0222f81070a933b7ad2a449159bbe05c/lambda-android-beams.png)\n\nComplete step one of the Android setup guide, by providing your FCM server key you copied earlier and **Continue**. We will pick up the remainder later on in this tutorial. Press the **X** to exit the setup guide and you will be returned to your dashboard for that instance. Scroll to the bottom of the page and you will find your Beams instance ID and secret key, make note of these you will need them later.\n\n\n### Adding the SDKs\n\nOpen your app level `build.gradle` file and add the following into your dependencies:\n\n```\n    // app/build.gradle\n    ...\n    dependencies {\n     ...\n     implementation 'com.google.firebase:firebase-messaging:17.1.0'\n     implementation 'com.pusher:push-notifications-android:1.4.0'\n     ...\n    }\n    ...\n```\n\nHere we are adding the Firebase messaging SDK and the Pusher Beams SDK. You should already have the Google Service SDK and `google-services.json` added to your project when setting up the Firebase app.\n\nSynchronize Gradle by pressing the **Sync Now** button.\n\n### Initialize Pusher Beams\n\nOpen your main activity and add the following import:\n\n```kotlin\n    import com.pusher.pushnotifications.PushNotifications\n```\n\nAdd the following to your `onCreate` function:\n\n```kotlin\n    PushNotifications.start(applicationContext, \"YOUR_INSTANCE_ID\")\n    PushNotifications.addDeviceInterest(\"hello\")\n```\n\nRemember to replace `YOUR_INSTANCE_ID` with the instance id from your Pusher Beams console and run your application.\n\n## Create your Lambda function\n\n### Writing our function\n\nWe will need to install our packages and write our function on our local machine before we can upload it to a Lambda function. Create a new working directory on your local machine and within that create a file named `index.go`.  Open your `index.go` file and add the following code:\n\n```go\n    // index.go\n    package main\n    import (\n            \"fmt\"\n            \"context\"\n            \"github.com/pusher/push-notifications-go\"\n            \"github.com/aws/aws-lambda-go/lambda\"\n    )\n    \n    type MyEvent struct {\n            Title string `json:\"title\"`\n            Message string `json:\"message\"`\n    }\n    \n    const (\n      instanceId = \"YOUR_INSTANCE_ID\"\n      secretKey  = \"YOUR_SECRET_KEY\"\n    )\n    \n    func HandleRequest(ctx context.Context, event MyEvent) (string, error) {\n            beamsClient, _ := pushnotifications.New(instanceId, secretKey)\n            publishRequest := map[string]interface{}{\n              \"fcm\": map[string]interface{}{\n                \"notification\": map[string]interface{}{\n                  \"title\": event.Title,\n                  \"body\":  event.Message,\n                },\n              },\n            }\n    \n            pubId, err := beamsClient.PublishToInterests([]string{\"hello\"}, publishRequest)\n            if err != nil {\n                    fmt.Println(err)\n            } else {\n                    fmt.Println(\"Publish Id:\", pubId)\n            }\n            return fmt.Sprintf(\"Completed\"), nil\n    }\n    \n    func main() {\n      lambda.Start(HandleRequest)\n    }\n```\n\nThis code will be used by our Lambda function later on to publish notifications to devices that our registered for the `hello` interest. Note how we import both the Pusher notifications Go package and the AWS Lambda package. We use the `event.title` and `event.message` to form part of the message. We’ll look at this in more detail when we come to test our integration. Remember to replace `YOUR_INSTANCE_ID` and `YOUR_SECRET_KEY` with the credentials from your Pusher Beams console.\n\nRun the following commands to fetch packages and build your code:\n\n```\n    $ go get github.com/aws/aws-lambda-go/lambda\n    $ go get github.com/pusher/push-notifications-go\n    $ GOOS=linux go build index.go\n```\n\n\u003e **Note:** If you are running on windows you should follow the instructions [here](https://docs.aws.amazon.com/lambda/latest/dg/lambda-go-how-to-create-deployment-package.html) for building your code.\n\nNext we need to compress the directory we have been working in and make a .zip such that we can upload our code and dependencies to our function later on. Name your zip file `GoLambda.zip`.\n\n### Creating a Lambda function\n\nLog in or create an account to access your AWS console [here](https://aws.amazon.com/console/). Once you are logged in use the search bar to find Lambda and select it from the list.\n\n![lambda-android-aws-console](//images.ctfassets.net/1es3ne0caaid/18OcS1oCS83T7s9vnxCCXi/ee834ddc5f300dd9c61fcbc9e69385e4/lambda-android-aws-console.png)\n\n\u003e **Note:** Set your AWS region to N. Virginia in the top right if it is not already.\n\nYou should be redirected to the Lambda service and see an option **Create Function**, select this. Choose the **Author from Scratch** option at the top of the next page. Complete the basic setup as shown in the image below.\n\n![lambda-android-aws-new-function-go](//images.ctfassets.net/1es3ne0caaid/2cRfMkJAkgQW2ClPfW6MxC/a44f2ae4ddb406ea0ad0518c877e5e71/lambda-android-aws-new-function-go.png)\n\n- **Function name** - Name this whatever you want for example “Pusher-Beams-Go”.\n- **Runtime** - We will be using Go 1.x so select this from the drop down list.\n- **Execution role** - Select **Create a new role from AWS policy templates**. If you already have a role you would rather use you can select **Use an existing role**.\n- **Role name** - You can name this anything you like for example “lambda_basic_execution”.\n- **Policy templates** - You can leave this blank.\n\nOnce complete select the **Create function** button at the bottom of the page. You should be redirected to your Lambda function console once it has been created. We can ignore the **Designer** section of the console. This area allows us to tie together different AWS services, you may wish to use this with a production function such that it can be accessed from the wider internet. However, we will just be using the test service for the purpose of this tutorial.\n\nNow we need to upload our code. In the **Function code** section select the **Upload a .zip file** from the **Code entry type** dropdown menu. Use the **Upload** button to search your local machine for the `GoLambda.zip`  we created earlier. Finally change the **Handler** to be `GoLambda/index`, this will allow AWS Lambda to find our function within our folder. If everything looks like the below image click **Save** in the top right. \n\n![lambda-android-aws-function-code-go](//images.ctfassets.net/1es3ne0caaid/MInhoA5xe2k2MZYigK83z/d3eda9a767094fa3e3b17fc6cf98f3e5/lambda-android-aws-function-code-go.png)\n\n\u003e **Note:** Depending on how you have zipped your directory you may be able to leave the handler as the default `index`. Likewise if you have named your Go file something other than index e.g “main” your handler should be this.\n\n## Testing our implementation\n\nIn the top right of your Lambda console select the **Test** button. We need to configure a test option. Create a new test event like the below image. Notice how our keys in the JSON object are title and message. These are the event keys we were using in our code to provide the title and body for the push notification. \n\n![lambda-android-aws-test-event](//images.ctfassets.net/1es3ne0caaid/5Ev5UQmYJrFxy6Di54U5aZ/aa89cf11953ed2d8d6af1f654f4070eb/lambda-android-aws-test-event.png)\n\nOnce you are done press the **Create** button at the bottom. The dialog box will close and the test **HelloTest** should be selected in the dropdown menu by the **Test** button, Press **Test.** If everything has worked as expected you should receive a push to your device and a similar log output from your Lambda console.\n\n![lambda-android-aws-test-success](//images.ctfassets.net/1es3ne0caaid/4RRkCakfjmlwFEUbZq7ewT/ae49546e38e89bf25fbfc9bb66dd3ee4/lambda-android-aws-test-success.png)\n![lambda-android-push-notification](//images.ctfassets.net/1es3ne0caaid/6UfD7jfn25P5RFo1lYtcGd/d2906f074e29b260b8dc900194ebb493/lambda-android-push-notification.png)\n\n## Conclusion\n\nWe’ve learnt how to create an AWS Lambda function using Go that can publish a push notification using Pusher Beams to an Android device. The source code for this tutorial can be found [here](https://github.com/cjbatin/Go-Lambda-and-Pusher-Beams-for-Android-Notifications).","metaTitle":"Lambda with Go and Pusher Beams for Android notifications","metaDescription":"Learn how to send push notifications from AWS Lambda to an Android app, using Pusher Beams. Build a simple demo app and create a Lambda function using Go. Upload and test the function."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7Mf0Yf8VG2Rp2GrRrgrQok","type":"Entry","createdAt":"2019-05-01T18:13:43.138Z","updatedAt":"2019-05-01T18:13:43.138Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live analytics dashboard using Go and MongoDB","url":"live-analytics-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Khmrnzj5moO4S6WOYOGAo","type":"Entry","createdAt":"2018-11-14T14:35:55.702Z","updatedAt":"2019-03-03T15:15:59.601Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lanre Adelowo","url":"lanre-adelowo","email":"adelowomailbox@gmail.com","twitter":"https://twitter.com/alanreadelowo","github":"https://github.com/adelowo","guestWriter":true}}],"projectRepo":"https://github.com/adelowo/pusher-realtime-analytics-dashboard","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}}],"reviewDate":"2019-05-01","description":"Use Go, MongoDB and Pusher Channels to monitor user interactions with your app. Build a simple demo app page and a monitoring dashboard. The dashboard updates in realtime as users interact with the app.","prerequisite":"You will need Go 1.7+ and MongoDB 3+ installed on your machine.","content":"One of the most important step to take while taking a website or app into production is analytics and usage statistics. This is important as it allows you to see how users are actually using your app, improve usability and inform future development decisions. \n\nIn this tutorial, I will describe how to monitor all requests an application is going to receive, we will use the data gotten from monitoring to track a few metrics such as:\n\n- Most visited links\n- Response time for each link\n- Total number of requests\n- Average response time\n\n![go-app-monitoring-demo](//images.ctfassets.net/1es3ne0caaid/3bGgZOLvnaGTWBhY3e68lL/4248aba65a28dd9aef46b4379b4afec7/go-app-monitoring-demo.gif)\n\n## Prerequisites\n\n- Golang \u003e=1.7. You can install the Golang toolchain [by following this guide](https://golang.org/dl/).\n- MongoDB \u003e=3. You can install this by [following this guide](https://docs.mongodb.com/manual/installation/).\n- A [Pusher account](http://pusher.com/signup).\n\n\n## Starting out\n\nWe will start out by setting up our project directory. You will need to create a directory called `analytics-dashboard`. The location of this directory will depend on the version of the Go toolchain you have:\n\n- If you are running `\u003c=1.11`, you should create the directory in `$GOPATH/src/github.com/pusher-tutorials/analytics-dashboard`\n- If you are running `1.12` or greater, you can create the directory anywhere.\n\nIn the newly created directory, create a `.env` in the root directory with the following command:\n\n\n```    \n    $ touch .env\n```    \n\nIn the `.env` file, you will need to add your credentials. Copy and paste the following contents into the file:\n\n```\n    // analytics-dashboard/.env\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_APP_KEY=PUSHER_APP_KEY\n    PUSHER_APP_SECRET=PUSHER_APP_SECRET\n    PUSHER_APP_CLUSTER=PUSHER_APP_CLUSTER\n    PUSHER_APP_SECURE=\"1\"\n```    \n\n\n\u003e Please make sure to replace the placeholders with your own credentials.\n\n\n\n## MongoDB\n\nMongoDB is going to be used as a persistent datastore and we are going to make use of it’s calculation abilities to build out the functionality I described above.\n\nSince we are building the application in Golang, we will need to fetch a client library that will assist us in connecting and querying the MongoDB database. To that, you should run the following command:\n\n\n```   \n    $ go get -u -v gopkg.in/mgo.v2/...\n```    \n\nOnce the above command succeeds, you will need to create a new file called `analytics.go`. In this file, paste the following code:\n\n```go\n    // analytics-dashboard/analytics.go\n    \n    package main\n    \n    import (\n            \"gopkg.in/mgo.v2\"\n            \"gopkg.in/mgo.v2/bson\"\n    )\n    \n    const (\n            collectionName = \"request_analytics\"\n    )\n    \n    type requestAnalytics struct {\n            URL         string `json:\"url\"`\n            Method      string `json:\"method\"`\n            RequestTime int64  `json:\"request_time\"`\n            Day         string `json:\"day\"`\n            Hour        int    `json:\"hour\"`\n    }\n    \n    type mongo struct {\n            sess *mgo.Session\n    }\n    \n    func (m mongo) Close() error {\n            m.sess.Close()\n            return nil\n    }\n    \n    func (m mongo) Write(r requestAnalytics) error {\n            return m.sess.DB(\"pusher_tutorial\").C(collectionName).Insert(r)\n    }\n    \n    func (m mongo) Count() (int, error) {\n            return m.sess.DB(\"pusher_tutorial\").C(collectionName).Count()\n    }\n    \n    type statsPerRoute struct {\n            ID struct {\n                    Method string `bson:\"method\" json:\"method\"`\n                    URL    string `bson:\"url\" json:\"url\"`\n            } `bson:\"_id\" json:\"id\"`\n            NumberOfRequests int `bson:\"numberOfRequests\" json:\"number_of_requests\"`\n    }\n    \n    func (m mongo) AverageResponseTime() (float64, error) {\n    \n            type res struct {\n                    AverageResponseTime float64 `bson:\"averageResponseTime\" json:\"average_response_time\"`\n            }\n    \n            var ret = []res{}\n    \n            var baseMatch = bson.M{\n                    \"$group\": bson.M{\n                            \"_id\":                 nil,\n                            \"averageResponseTime\": bson.M{\"$avg\": \"$requesttime\"},\n                    },\n            }\n    \n            err := m.sess.DB(\"pusher_tutorial\").C(collectionName).\n                    Pipe([]bson.M{baseMatch}).All(\u0026ret)\n    \n            if len(ret) \u003e 0 {\n                    return ret[0].AverageResponseTime, err\n            }\n    \n            return 0, nil\n    }\n    \n    func (m mongo) StatsPerRoute() ([]statsPerRoute, error) {\n    \n            var ret []statsPerRoute\n    \n            var baseMatch = bson.M{\n                    \"$group\": bson.M{\n                            \"_id\":              bson.M{\"url\": \"$url\", \"method\": \"$method\"},\n                            \"responseTime\":     bson.M{\"$avg\": \"$requesttime\"},\n                            \"numberOfRequests\": bson.M{\"$sum\": 1},\n                    },\n            }\n    \n            err := m.sess.DB(\"pusher_tutorial\").C(collectionName).\n                    Pipe([]bson.M{baseMatch}).All(\u0026ret)\n            return ret, err\n    }\n    \n    type requestsPerDay struct {\n            ID               string `bson:\"_id\" json:\"id\"`\n            NumberOfRequests int    `bson:\"numberOfRequests\" json:\"number_of_requests\"`\n    }\n    \n    func (m mongo) RequestsPerHour() ([]requestsPerDay, error) {\n    \n            var ret []requestsPerDay\n    \n            var baseMatch = bson.M{\n                    \"$group\": bson.M{\n                            \"_id\":              \"$hour\",\n                            \"numberOfRequests\": bson.M{\"$sum\": 1},\n                    },\n            }\n    \n            var sort = bson.M{\n                    \"$sort\": bson.M{\n                            \"numberOfRequests\": 1,\n                    },\n            }\n    \n            err := m.sess.DB(\"pusher_tutorial\").C(collectionName).\n                    Pipe([]bson.M{baseMatch, sort}).All(\u0026ret)\n            return ret, err\n    }\n    \n    func (m mongo) RequestsPerDay() ([]requestsPerDay, error) {\n    \n            var ret []requestsPerDay\n    \n            var baseMatch = bson.M{\n                    \"$group\": bson.M{\n                            \"_id\":              \"$day\",\n                            \"numberOfRequests\": bson.M{\"$sum\": 1},\n                    },\n            }\n    \n            var sort = bson.M{\n                    \"$sort\": bson.M{\n                            \"numberOfRequests\": 1,\n                    },\n            }\n    \n            err := m.sess.DB(\"pusher_tutorial\").C(collectionName).\n                    Pipe([]bson.M{baseMatch, sort}).All(\u0026ret)\n            return ret, err\n    }\n    \n    func newMongo(addr string) (mongo, error) {\n            sess, err := mgo.Dial(addr)\n            if err != nil {\n                    return mongo{}, err\n            }\n    \n            return mongo{\n                    sess: sess,\n            }, nil\n    }\n    \n    type Data struct {\n            AverageResponseTime float64          `json:\"average_response_time\"`\n            StatsPerRoute       []statsPerRoute  `json:\"stats_per_route\"`\n            RequestsPerDay      []requestsPerDay `json:\"requests_per_day\"`\n            RequestsPerHour     []requestsPerDay `json:\"requests_per_hour\"`\n            TotalRequests       int              `json:\"total_requests\"`\n    }\n    \n    func (m mongo) getAggregatedAnalytics() (Data, error) {\n    \n            var data Data\n    \n            totalRequests, err := m.Count()\n            if err != nil {\n                    return data, err\n            }\n    \n            stats, err := m.StatsPerRoute()\n            if err != nil {\n                    return data, err\n            }\n    \n            reqsPerDay, err := m.RequestsPerDay()\n            if err != nil {\n                    return data, err\n            }\n    \n            reqsPerHour, err := m.RequestsPerHour()\n            if err != nil {\n                    return data, err\n            }\n    \n            avgResponseTime, err := m.AverageResponseTime()\n            if err != nil {\n                    return data, err\n            }\n    \n            return Data{\n                    AverageResponseTime: avgResponseTime,\n                    StatsPerRoute:       stats,\n                    RequestsPerDay:      reqsPerDay,\n                    RequestsPerHour:     reqsPerHour,\n                    TotalRequests:       totalRequests,\n            }, nil\n    }\n```   \n\nIn the above, we have implemented a few queries on the MongoDB database:\n\n\n- `StatsPerRoute`: Analytics for each route visited\n- `RequestsPerDay`: Analytics per day\n- `RequestsPerHour`: Analytics per hour\n\nThe next step is to add some HTTP endpoints a user can visit. Without those, the code above for querying MongoDB for analytics is redundant. You will also need to create a logging middleware that writes analytics to MongoDB. And to make it realtime, Pusher Channels will also be used.\n\nTo get started with that, you will need to create a file named `main.go`. You can do that via the command below:\n\n\n```    \n    $ touch main.go\n```   \n\nYou will also need to fetch some libraries that will be used while building. You will need to run the command below to fetch them:\n\n\n```    \n    $ go get github.com/go-chi/chi\n    $ go get github.com/joho/godotenv\n    $ go get github.com/pusher/pusher-http-go\n```   \n\nIn the newly created `main.go` file, paste the following code:\n\n```go\n    // analytics-dashboard/main.go\n    \n    package main\n    \n    import (\n            \"encoding/json\"\n            \"flag\"\n            \"fmt\"\n            \"html/template\"\n            \"log\"\n            \"net/http\"\n            \"os\"\n            \"path/filepath\"\n            \"strconv\"\n            \"strings\"\n            \"sync\"\n            \"time\"\n    \n            \"github.com/go-chi/chi\"\n            \"github.com/joho/godotenv\"\n            \"github.com/pusher/pusher-http-go\"\n    )\n    \n    const defaultSleepTime = time.Second * 2\n    \n    func main() {\n            httpPort := flag.Int(\"http.port\", 4000, \"HTTP Port to run server on\")\n            mongoDSN := flag.String(\"mongo.dsn\", \"localhost:27017\", \"DSN for mongoDB server\")\n    \n            flag.Parse()\n    \n            if err := godotenv.Load(); err != nil {\n                    log.Fatal(\"Error loading .env file\")\n            }\n    \n            appID := os.Getenv(\"PUSHER_APP_ID\")\n            appKey := os.Getenv(\"PUSHER_APP_KEY\")\n            appSecret := os.Getenv(\"PUSHER_APP_SECRET\")\n            appCluster := os.Getenv(\"PUSHER_APP_CLUSTER\")\n            appIsSecure := os.Getenv(\"PUSHER_APP_SECURE\")\n    \n            var isSecure bool\n            if appIsSecure == \"1\" {\n                    isSecure = true\n            }\n    \n            client := \u0026pusher.Client{\n                    AppId:   appID,\n                    Key:     appKey,\n                    Secret:  appSecret,\n                    Cluster: appCluster,\n                    Secure:  isSecure,\n                    HttpClient: \u0026http.Client{\n                            Timeout: time.Second * 10,\n                    },\n            }\n    \n            mux := chi.NewRouter()\n    \n            log.Println(\"Connecting to MongoDB\")\n            m, err := newMongo(*mongoDSN)\n            if err != nil {\n                    log.Fatal(err)\n            }\n    \n            log.Println(\"Successfully connected to MongoDB\")\n    \n            mux.Use(analyticsMiddleware(m, client))\n    \n            var once sync.Once\n            var t *template.Template\n    \n            workDir, _ := os.Getwd()\n            filesDir := filepath.Join(workDir, \"static\")\n            fileServer(mux, \"/static\", http.Dir(filesDir))\n    \n            mux.Get(\"/\", func(w http.ResponseWriter, r *http.Request) {\n    \n                    once.Do(func() {\n                            tem, err := template.ParseFiles(\"static/index.html\")\n                            if err != nil {\n                                    log.Fatal(err)\n                            }\n    \n                            t = tem.Lookup(\"index.html\")\n                    })\n    \n                    t.Execute(w, nil)\n            })\n    \n            mux.Get(\"/api/analytics\", analyticsAPI(m))\n            mux.Get(\"/wait/{seconds}\", waitHandler)\n    \n            log.Fatal(http.ListenAndServe(fmt.Sprintf(\":%d\", *httpPort), mux))\n    }\n    \n    func fileServer(r chi.Router, path string, root http.FileSystem) {\n            if strings.ContainsAny(path, \"{}*\") {\n                    panic(\"FileServer does not permit URL parameters.\")\n            }\n    \n            fs := http.StripPrefix(path, http.FileServer(root))\n    \n            if path != \"/\" \u0026\u0026 path[len(path)-1] != '/' {\n                    r.Get(path, http.RedirectHandler(path+\"/\", 301).ServeHTTP)\n                    path += \"/\"\n            }\n    \n            path += \"*\"\n    \n            r.Get(path, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n                    fs.ServeHTTP(w, r)\n            }))\n    }\n    \n    func analyticsAPI(m mongo) http.HandlerFunc {\n            return func(w http.ResponseWriter, r *http.Request) {\n    \n                    data, err := m.getAggregatedAnalytics()\n                    if err != nil {\n                            log.Println(err)\n    \n                            json.NewEncoder(w).Encode(\u0026struct {\n                                    Message   string `json:\"message\"`\n                                    TimeStamp int64  `json:\"timestamp\"`\n                            }{\n                                    Message:   \"An error occurred while fetching analytics data\",\n                                    TimeStamp: time.Now().Unix(),\n                            })\n    \n                            return\n                    }\n    \n                    w.Header().Set(\"Content-Type\", \"application/json\")\n                    json.NewEncoder(w).Encode(data)\n            }\n    }\n    \n    func analyticsMiddleware(m mongo, client *pusher.Client) func(next http.Handler) http.Handler {\n            return func(next http.Handler) http.Handler {\n                    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    \n                            startTime := time.Now()\n    \n                            defer func() {\n    \n                                    if strings.HasPrefix(r.URL.String(), \"/wait\") {\n    \n                                            data := requestAnalytics{\n                                                    URL:         r.URL.String(),\n                                                    Method:      r.Method,\n                                                    RequestTime: time.Now().Unix() - startTime.Unix(),\n                                                    Day:         startTime.Weekday().String(),\n                                                    Hour:        startTime.Hour(),\n                                            }\n    \n                                            if err := m.Write(data); err != nil {\n                                                    log.Println(err)\n                                            }\n    \n                                            aggregatedData, err := m.getAggregatedAnalytics()\n                                            if err == nil {\n                                                    client.Trigger(\"analytics-dashboard\", \"data\", aggregatedData)\n                                            }\n                                    }\n                            }()\n    \n                            next.ServeHTTP(w, r)\n                    })\n            }\n    }\n    \n    func waitHandler(w http.ResponseWriter, r *http.Request) {\n            var sleepTime = defaultSleepTime\n    \n            secondsToSleep := chi.URLParam(r, \"seconds\")\n            n, err := strconv.Atoi(secondsToSleep)\n            if err == nil \u0026\u0026 n \u003e= 2 {\n                    sleepTime = time.Duration(n) * time.Second\n            } else {\n                    n = 2\n            }\n    \n            log.Printf(\"Sleeping for %d seconds\", n)\n            time.Sleep(sleepTime)\n            w.Write([]byte(`Done`))\n    }\n```    \n\nWhile the above might seem like a lot, basically what has been done is:\n\n\n- Line 31 - 33: Parse environment variables from the `.env` created earlier.\n\u003e Another reminder to update the `.env` file to contain your actual credentials\n- Line 36 - 56: A server side connection to Pusher Channels is established\n- Line 68 - 95: Build an HTTP server. \n- Line 139 - 171: A lot is happening here. `analyticsMiddleware` is used to capture all requests, and for requests that have the path `wait/{seconds}` , a log is written to MongoDB. It is also sent to Pusher Channels.\n\nBefore running the server, you need a frontend to visualize the analytics. The frontend is going to be as simple and usable as can be. You will need to create a new directory called `static` in your root directory - `analytics-dashboard` . That can be done with the following command:\n\n\n```    \n    $ mkdir analytics-dashboard/static\n```   \n\nIn the `static` directory, create two files - `index.html` and `app.js`. You can run the command below to do just that:\n\n\n```    \n    $ touch static/{index.html,app.js}\n```    \n\nOpen the `index.html` file and paste the following code:\n\n```html\n    // analytics-dashboard/static/index.html\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003ctitle\u003eRealtime analytics dashboard\u003c/title\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\n              integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \u003cdiv class=\"container\" id=\"app\"\u003e\u003c/div\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.1.2/handlebars.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://js.pusher.com/4.3/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"/static/app.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```    \n\nWhile that is an empty page, you will make use of JavaScript to fill it up with useful data. So you will also need to open up the `app.js` file. In the `app.js` file, paste the following code:\n\n```js\n    // analytics-dashboard/static/app.js\n    \n    const appDiv = document.getElementById('app');\n    \n    const tmpl = `\n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-5\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003eTotal requests\u003c/h5\u003e\n                    \u003cdiv class=\"card-text\"\u003e\n                        \u003ch3\u003e\\{{total_requests}}\u003c/h3\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"col-md-5\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003eAverage response time\u003c/h5\u003e\n                    \u003cdiv class=\"card-text\"\u003e\n                        \u003ch3\u003e\\{{ average_response_time }} seconds\u003c/h3\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-5\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003eBusiest days of the week\u003c/h5\u003e\n                    \u003cdiv class=\"card-text\" style=\"width: 18rem\"\u003e\n                        \u003cul class=\"list-group list-group-flush\"\u003e\n                            {{#each requests_per_day}}\n                            \u003cli class=\"list-group-item\"\u003e\n                                \\{{ this.id }} (\\{{ this.number_of_requests }} requests)\n                            \u003c/li\u003e\n                            {{/each }}\n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"col-md-5\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003eBusiest hours of day\u003c/h5\u003e\n                    \u003cdiv class=\"card-text\" style=\"width: 18rem;\"\u003e\n                        \u003cul class=\"list-group list-group-flush\"\u003e\n                            {{#each requests_per_hour}}\n                            \u003cli class=\"list-group-item\"\u003e\n                                \\{{ this.id }} (\\{{ this.number_of_requests }} requests)\n                            \u003c/li\u003e\n                            {{/each}}\n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-5\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003eMost visited routes\u003c/h5\u003e\n                    \u003cdiv class=\"card-text\" style=\"width: 18rem;\"\u003e\n                        \u003cul class=\"list-group list-group-flush\"\u003e\n                            {{#each stats_per_route}}\n                            \u003cli class=\"list-group-item\"\u003e\n                                \\{{ this.id.method }} \\{{ this.id.url }} (\\{{ this.number_of_requests }} requests)\n                            \u003c/li\u003e\n                            {{/each}}\n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    `;\n    \n    const template = Handlebars.compile(tmpl);\n    \n    writeData = data =\u003e {\n      appDiv.innerHTML = template(data);\n    };\n    \n    axios\n      .get('http://localhost:4000/api/analytics', {})\n      .then(res =\u003e {\n        console.log(res.data);\n        writeData(res.data);\n      })\n      .catch(err =\u003e {\n        console.error(err);\n      });\n    \n    const APP_KEY = 'PUSHER_APP_KEY';\n    const APP_CLUSTER = 'PUSHER_CLUSTER';\n    \n    const pusher = new Pusher(APP_KEY, {\n      cluster: APP_CLUSTER,\n    });\n    \n    const channel = pusher.subscribe('analytics-dashboard');\n    \n    channel.bind('data', data =\u003e {\n      writeData(data);\n    });\n```   \n\n\n\u003e Please replace `PUSHER_APP_KEY` and `PUSHER_CLUSTER` with your own credentials.\n\nIn the above code, we defined a constant called `tmpl`, it holds an HTML template which we will run through the [Handlebars](http://handlebarsjs.com/) template engine to fill it up with actual data.\n\nWith this done, you can go ahead to run the Golang server one. You will need to go to the root directory - `analytics-dashboard` and run the following command:\n\n\n```    \n    $ go build\n    $ ./analytics-dashboard\n```    \n\n\n\u003e Make sure you have a MongoDB instance running. If your MongoDB is running on a port other than the default 27017, make sure to add  `-mongo.dsn \"YOUR_DSN\"` to the above command\n\n\n\u003e Also make sure your credentials are in `.env` \n\nAt this stage, you will need to open two browser tabs. Visit `http://localhost:4000` in one and `http://localhost:4000/wait/2` in the other. Refresh the tab where you have `http://localhost:4000/wait/2` and go back to the other tab to see a breakdown of usage activity.\n\n\n\u003e Note you can change the value of 2 in the url to any other digit. \n\n\n## Conclusion\n\nIn this tutorial, we’ve built a middleware that tracks every request, and a Golang application that calculates analytics of the tracked requests. We also built a dashboard that displays the relevant data. With Pusher Channels, we’ve been able to update the dashboard in realtime. The full source code can be found [on GitHub](https://github.com/adelowo/pusher-realtime-analytics-dashboard).","metaTitle":"Build a live analytics dashboard using Go and MongoDB","metaDescription":"Use Go, MongoDB and Pusher Channels to monitor user interactions with your app. Build a simple demo app page and a monitoring dashboard. The dashboard updates in realtime as users interact with the app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5w7OQWAAAYYmR580p5oYyf","type":"Entry","createdAt":"2019-04-01T17:49:41.961Z","updatedAt":"2019-04-01T17:49:41.961Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"AWS Lambda running Go and Pusher Beams for iOS notifications","url":"aws-lambda-go-ios-notifications","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"9VkyxkESQ0IQmyKy8wq6C","type":"Entry","createdAt":"2018-09-18T18:40:03.858Z","updatedAt":"2018-09-18T18:40:03.858Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christopher Batin","url":"christopher-batin","email":"chris@batin.me","twitter":"https://twitter.com/cjbatin","github":"https://github.com/cjbatin/","guestWriter":true}}],"projectRepo":"https://github.com/cjbatin/Go-Lambda-and-Pusher-Beams-for-iOS-Notifications","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6x89hfueemQIu9tGMyKa0a","type":"Entry","createdAt":"2019-03-13T18:42:28.682Z","updatedAt":"2019-03-13T18:42:28.682Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Amazon Web Services","url":"amazon-web-services","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2019-04-01","description":"Learn how to use AWS Lambda to send push notifications to an iOS. In this tutorial, the Lambda function will be written in Go. This tutorial will guide you through setting up Lambda and building both parts of the application.","prerequisite":"You will need an AWS account, Go 1.x and Xcode 10+","content":"## Introduction\n\nIn this tutorials, we’re going to explore how we can setup [Pusher Beams](www.pusher.com/beams) on an iOS client using an AWS Lambda function running Go to trigger the notifications.\n\nPusher Beams allows you to customize push notifications you send to your devices via a server. However it can be expensive to run a server 24 hours a day 7 days a week and we may only need to send notifications every so often. This is where AWS Lambda can help. Lambda functions are serverless and work on a pay as you go model (with a generous free tier). This means that you only pay for when you use the function.\n\n\n## Prerequisites\n\n- A free AWS account. You can create one [here](https://aws.amazon.com).\n- A free Pusher account. You can create one [here](https://dash.pusher.com/authenticate).\n- Go 1.x installed on your machine. Install instructions [here](https://golang.org/doc/install).\n- Xcode 10+\n- MacOS\n- An iOS device for testing notifications.\n- An understanding of iOS development and Xcode environment.\n- Cocoapods - Install instructions [here](https://guides.cocoapods.org/using/getting-started.html).\n\n\n## Create your Lambda function\n\n### Creating a Pusher Beams instance\n\nLogin or create an account to access your dashboard [here](https://dash.pusher.com). Create a new beams instance using the dashboard.\n\n![lambda-go-ios-1](//images.ctfassets.net/1es3ne0caaid/3R0qCQ7Rmgd79svZX06Uch/c52402f081794e56be537653954af255/lambda-go-ios-1.png)\n\nComplete step one of the iOS setup guide, by providing your APNS key and team ID and clicking **Continue**. We will pick up the remainder later on in this tutorial. Press the **X** to exit the setup guide and you will be returned to your dashboard for that instance. Scroll to the bottom of the page and you will find your Beams instance ID and secret key, make note of these you will need them later.\n\n### Writing our function\n\nWe will need to install our packages and write our function on our local machine before we can upload it to a Lambda function. Create a new working directory on your local machine and within that create a file named `index.go`.  Open your `index.go` file and add the following code:\n\n```go\n    // index.go\n    package main\n    import (\n            \"fmt\"\n            \"context\"\n            \"github.com/pusher/push-notifications-go\"\n            \"github.com/aws/aws-lambda-go/lambda\"\n    )\n    \n    type MyEvent struct {\n            Title string `json:\"title\"`\n            Message string `json:\"message\"`\n    }\n    \n    const (\n      instanceId = \"YOUR_INSTANCE_ID\"\n      secretKey  = \"YOUR_SECRET_KEY\"\n    )\n    \n    func HandleRequest(ctx context.Context, event MyEvent) (string, error) {\n            beamsClient, _ := pushnotifications.New(instanceId, secretKey)\n            publishRequest := map[string]interface{}{\n                    \"apns\": map[string]interface{}{\n                            \"aps\": map[string]interface{}{\n                                    \"alert\": map[string]interface{}{\n                                            \"title\": event.Title,\n                                            \"body\":  event.Message,\n                                    },\n                            },\n                    },\n            }\n    \n            pubId, err := beamsClient.PublishToInterests([]string{\"hello\"}, publishRequest)\n            if err != nil {\n                    fmt.Println(err)\n            } else {\n                    fmt.Println(\"Publish Id:\", pubId)\n            }\n            return fmt.Sprintf(\"Completed\"), nil\n    }\n    \n    func main() {\n      lambda.Start(HandleRequest)\n    }\n```\n\nThis code will be used by our Lambda function later on to publish notifications to devices that our registered for the `hello` interest. Note how we import both the Pusher notifications Go package and the AWS Lambda package. We use the `event.title` and `event.message` to form part of the message. We’ll look at this in more detail when we come to test our integration. Remember to replace `YOUR_INSTANCE_ID` and `YOUR_SECRET_KEY` with the credentials from your Pusher Beams console.\n\nRun the following commands to fetch packages and  build your code:\n\n```\n    $ go get github.com/aws/aws-lambda-go/lambda\n    $ go get github.com/pusher/push-notifications-go\n    $ GOOS=linux go build index.go\n```\n\nNext we need to compress the directory we have been working in and make a .zip such that we can upload our code and dependencies to our function later on. Name your zip file `GoLambda.zip`.\n\n### Creating a Lambda function\n\nLog in or create an account to access your AWS console [here](https://aws.amazon.com/console/). Once you are logged in use the search bar to find Lambda and select it from the list.\n\n![lambda-go-ios-2](//images.ctfassets.net/1es3ne0caaid/21aLtBm0UQQvRbSxpdbGb3/f42d3c001d0086b2c4ed247f92ac6b68/lambda-go-ios-2.png)\n\n\u003e **Note:** Set your AWS region to N. Virginia in the top right if it is not already.\n\nYou should be redirected to the Lambda service and see an option **Create Function**, select this. Choose the **Author from Scratch** option at the top of the next page. Complete the basic setup as shown in the image below.\n\n![lambda-go-ios-3](//images.ctfassets.net/1es3ne0caaid/6QUWp7mMVLX9jqqSU64iPO/712d76e8fd8d042d3f30e041476a45ed/lambda-go-ios-3.png)\n\n- **Function name** - Name this whatever you want for example “Pusher-Beams-Go”.\n- **Runtime** - We will be using Go 1.x so select this from the drop down list.\n- **Execution role** - Select **Create a new role from AWS policy templates**. If you already have a role you would rather use you can select **Use an existing role**.\n- **Role name** - You can name this anything you like for example “lambda_basic_execution”.\n- **Policy templates** - You can leave this blank.\n\nOnce complete select the **Create function** button at the bottom of the page. You should be redirected to your Lambda function console once it has been created. We can ignore the **Designer** section of the console. This area allows us to tie together different AWS services, you may wish to use this with a production function such that it can be accessed from the wider internet. However, we will just be using the test service for the purpose of this tutorial.\n\nNow we need to upload our code. In the **Function code** section select the **Upload a .zip file** from the **Code entry type** dropdown menu. Use the **Upload** button to search your local machine for the `GoLambda.zip`  we created earlier. Finally change the **Handler** to be `GoLambda/index`, this will allow AWS Lambda to find our function within our folder. If everything looks like the below image click **Save** in the top right. \n\n![lambda-go-ios-4](//images.ctfassets.net/1es3ne0caaid/33bHjSmR2CXTU1WJBPMfxo/0c780b7b68d09c1822c32fd55dd7e036/lambda-go-ios-4.png)\n\n## Create your iOS application\n\nNow that we have created our Lambda function, we need to have a user that has actually registered for notifications and signed up for the hello interest so we can test out our implementation. We’re going to create a very basic app that doesn’t actually show anything to the user except for the notification on the lock screen.\n\n### Project setup\n\nCreate a new **Single View App** using Xcode and name it something like LambdaPush. Once the project is created we need to install the Beams SDK. Open the terminal and go to the working directory of the newly created project and run the following command.\n\n```\n    $ pod init\n```\n\nOpen the newly created `Podfile` and add the following pod:\n\n```\n    pod 'PushNotifications'\n```\n\nIn the terminal run:\n\n```\n    $ pod install\n```\n\nMake sure you close your Xcode project and reopen the newly created Xcode Workspace before continuing. Within your project capabilities make sure you have switched on the **Push Notifications** capability. Also turn on the **Background Modes** capability and tick the box for **Remote Notifications**.\n\nOpen your `AppDelegate.swift` file and replace its contents with the following. Remembering to replace the instance ID with your own.\n\n```swift\n    // AppDelegate.swift\n    import UIKit\n    import PushNotifications\n    \n    @UIApplicationMain\n    class AppDelegate: UIResponder, UIApplicationDelegate {\n        var window: UIWindow?\n        let pushNotifications = PushNotifications.shared\n    \n        func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -\u003e Bool {\n            self.pushNotifications.start(instanceId: \"YOUR_INSTANCE_ID\")\n            self.pushNotifications.registerForRemoteNotifications()\n            try? self.pushNotifications.subscribe(interest: \"hello\")\n    \n            return true\n        }\n    \n        func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n            self.pushNotifications.registerDeviceToken(deviceToken)\n        }\n    \n        func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable: Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -\u003e Void) {\n            self.pushNotifications.handleNotification(userInfo: userInfo)\n        }\n    }\n```\n\nYou can now run the application on your iOS device and accept to receive notifications. The SDK will then manage registering our interest in hello. Remember to replace `YOUR_INSTANCE_ID` with your instance ID credential from your Pusher Beams console.\n\n\n## Testing our implementation\n\nReturn to your Lambda function console. In the top right select the **Test** button. We need to configure a test option. Create a new test event like the below image. Notice how our keys in the JSON object are title and message. These are the event keys we were using in our code to provide the title and body for the push notification. \n\n![lambda-go-ios-5](//images.ctfassets.net/1es3ne0caaid/5lb6HcBbvLhC1XO7mKH1o1/df6c3558c02fa5bc0f7d90a15c8237ba/lambda-go-ios-5.png)\n\nOnce you are done press the **Create** button at the bottom. The dialog box will close and the test **HelloTest** should be selected in the dropdown menu by the **Test** button, Press **Test.** If everything has worked as expected you should receive a push to your device and a similar log output from your Lambda console.\n\n![lambda-go-ios-6](//images.ctfassets.net/1es3ne0caaid/44GXaHAsDEYE1ealKoB5OM/decbd556ee74b27f2e03299d07bf965c/lambda-go-ios-6.png)\n![lambda-go-ios-7](//images.ctfassets.net/1es3ne0caaid/6W8m9DWZQAn6zVoJFXmNb8/3af7a4f135787f26ba990201e89ac233/lambda-go-ios-7.jpeg)\n\n## Conclusion\n\nWe’ve learnt how to create an AWS Lambda function using Go that can publish a push notification using Pusher Beams to an iOS device. The source code for this tutorial can be found [here](https://github.com/cjbatin/Go-Lambda-and-Pusher-Beams-for-iOS-Notifications).","metaTitle":"AWS Lambda running Go and Pusher Beams for iOS notifications","metaDescription":"Learn how to use AWS Lambda to send push notifications to an iOS. In this tutorial, the Lambda function will be written in Go. This tutorial will guide you through setting up Lambda and building both parts of the application."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"41pOXjqkU3Al1u2d3g1vpa","type":"Entry","createdAt":"2019-03-26T18:18:20.669Z","updatedAt":"2019-03-26T18:18:20.669Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Share your terminal as a web application with Go","url":"terminal-web-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Khmrnzj5moO4S6WOYOGAo","type":"Entry","createdAt":"2018-11-14T14:35:55.702Z","updatedAt":"2019-03-03T15:15:59.601Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lanre Adelowo","url":"lanre-adelowo","email":"adelowomailbox@gmail.com","twitter":"https://twitter.com/alanreadelowo","github":"https://github.com/adelowo","guestWriter":true}}],"projectRepo":"https://github.com/adelowo/pusher-channel-terminal-web-sync","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}}],"reviewDate":"2019-03-26","description":"Learn how to share your terminal output in a web interface using Go. The demo pipes data to the app, which renders it to the browser rather than the standard output. This could form the basis of a collaborative work tool or monitoring tool.","prerequisite":"You will need Go 1.9+ set up on your machine. Git Bash or similar is required on Windows.","content":"In this tutorial, we will explore how Pusher Channels can be used to share your terminal as a web page. If you want to play around with the code as you read this tutorial, visit this [GitHub repository](https://github.com/adelowo/pusher-channel-terminal-web-sync), which contains the final version of the code for you to check out and run locally. \n\nA feature such as this is already available in CI servers, you already monitor in realtime the output of your build. It can also help in situations where you want a colleague to help troubleshoot an issue and don’t necessarily want to send log files back and forth, the colleague can take a look at your terminal directly instead.\n\n\n## Prerequisites\n\n\n- Golang (`\u003e=1.9`) .  A working knowledge of Go is required to follow this tutorial.\n- A Pusher Channels application. [Create one here.](https://pusher.com/channels)\n- Git Bash if you are on Windows.\n\n\n## Building the program\n\nAn important aspect to this is implementing a Golang program that can act as a [Pipe](https://en.wikipedia.org/wiki/Pipeline_(Unix)). So in short, we will be building a program that monitors the output of another program then displays it on the web UI we are going to build.\n\nAn example usage is:\n\n```\n    $ ./script | go run main.go\n``` \n\nHere is an example of what we will be building:\n\n![go-terminal-share-demo](//images.ctfassets.net/1es3ne0caaid/2Ntoh7NkwaEuwBpdXqRsHT/eea0c0367a7eab2fbea7c6b90e0443cd/go-terminal-share-demo.gif)\n\nThe next step of action is to build the Golang program that will be used as pipe. To get started, we need to create a Pusher Channels application, that can be done by visiting the [dashboard](https://dashboard.pusher.com). You will need to click on the **Create new app** button to get started:\n\n![go-terminal-share-pusher](//images.ctfassets.net/1es3ne0caaid/klMqgWDvYb4hYJwBCku03/3a4b0efbc79c39de1115e2a000750269/go-terminal-share-pusher.png)\n\nYou will then be redirected to a control panel for your app where you’d be able to view the information about the app and more importantly, the authorization keys you need to connect to the application.\n\nOnce the above has been done, we will then proceed to create the actual Golang program. To do a little recap again, this program will perform two tasks:\n\n\n- Act as a pipe for another program\n- Start an `HTTP` server that displays the output of another program (the one being piped) in realtime.\n\nThe first thing to do is to create a new directory in your `$GOPATH` called `pusher-channel-terminal-web-sync`. That can be done with the following command:\n\n\n```\n    $ mkdir $GOPATH/github.com/pusher-tutorials/pusher-channel-terminal-web-sync\n``` \n\nYou will need to create an `.env` file with the following contents:\n\n```\n    // pusher-channel-terminal-web-sync/.env\n    PUSHER_APP_ID=\"PUSHER_APP_ID\"\n    PUSHER_APP_KEY=\"PUSHER_APP_KEY\"\n    PUSHER_APP_SECRET=\"PUSHER_APP_SECRET\"\n    PUSHER_APP_CLUSTER=\"PUSHER_APP_CLUSTER\"\n    PUSHER_APP_SECURE=\"1\"\n``` \n\n\n\u003e Please remember to replace the placeholders with the original values. They can be gotten from the control panel.\n\n\nThe next step of action is to create a `main.go` file. This will house the actual code for connecting and publishing events to Pusher Channels so as to be able to show those in real time on the web.\n\nYou can create a `main.go` file with the following command:\n\n\n```   \n    $ touch main.go\n```   \n\nOnce the file has been created, the next step is to fetch some required dependency such as Pusher’s client SDK. To do that, you will need to run the command below:\n\n\n```   \n    $ go get github.com/joho/godotenv\n    $ go get github.com/pusher/pusher-http-go\n``` \n\n\nOnce the above commands succeed, you will need to paste the following content into it:\n\n```go\n    // pusher-channel-terminal-web-sync/main.go\n    package main\n    \n    import (\n            \"bufio\"\n            \"bytes\"\n            \"flag\"\n            \"fmt\"\n            \"io\"\n            \"log\"\n            \"net/http\"\n            \"os\"\n            \"sync\"\n            \"text/template\"\n            \"time\"\n    \n            \"github.com/joho/godotenv\"\n            pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    const (\n            channelName = \"realtime-terminal\"\n            eventName   = \"logs\"\n    )\n    \n    func main() {\n    \n            var httpPort = flag.Int(\"http.port\", 1500, \"Port to run HTTP server on ?\")\n    \n            flag.Parse()\n    \n            info, err := os.Stdin.Stat()\n            if err != nil {\n                    log.Fatal(err)\n            }\n    \n            if info.Mode()\u0026os.ModeCharDevice != 0 {\n                    log.Println(\"This command is intended to be used as a pipe such as yourprogram | thisprogram\")\n                    os.Exit(0)\n            }\n    \n            if err := godotenv.Load(); err != nil {\n                    log.Fatal(\"Error loading .env file\")\n            }\n    \n            appID := os.Getenv(\"PUSHER_APP_ID\")\n            appKey := os.Getenv(\"PUSHER_APP_KEY\")\n            appSecret := os.Getenv(\"PUSHER_APP_SECRET\")\n            appCluster := os.Getenv(\"PUSHER_APP_CLUSTER\")\n            appIsSecure := os.Getenv(\"PUSHER_APP_SECURE\")\n    \n            var isSecure bool\n            if appIsSecure == \"1\" {\n                    isSecure = true\n            }\n    \n            client := \u0026pusher.Client{\n                    AppId:   appID,\n                    Key:     appKey,\n                    Secret:  appSecret,\n                    Cluster: appCluster,\n                    Secure:  isSecure,\n                    HttpClient: \u0026http.Client{\n                            Timeout: time.Minute * 2,\n                    },\n            }\n    \n            go func() {\n                    var t *template.Template\n                    var once sync.Once\n    \n                    http.Handle(\"/static/\", http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\".\"))))\n    \n                    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n    \n                            once.Do(func() {\n                                    tem, err := template.ParseFiles(\"index.html\")\n                                    if err != nil {\n                                            log.Fatal(err)\n                                    }\n    \n                                    t = tem.Lookup(\"index.html\")\n                            })\n    \n                            t.Execute(w, nil)\n                    })\n                    log.Fatal(http.ListenAndServe(fmt.Sprintf(\":%d\", *httpPort), nil))\n            }()\n    \n            reader := bufio.NewReader(os.Stdin)\n    \n            var writer io.Writer\n            writer = pusherChannelWriter{client: client}\n    \n            for {\n                    in, _, err := reader.ReadLine()\n                    if err != nil \u0026\u0026 err == io.EOF {\n                            break\n                    }\n    \n                    in = append(in, []byte(\"\\n\")...)\n                    if _, err := writer.Write(in); err != nil {\n                            log.Fatalln(err)\n                    }\n            }\n    }\n    \n    type pusherChannelWriter struct {\n            client *pusher.Client\n    }\n    \n    func (pusher pusherChannelWriter) Write(p []byte) (int, error) {\n            s := string(p)\n            dd := bytes.Split(p, []byte(\"\\n\"))\n    \n            var data = make([]string, 0, len(dd))\n    \n            for _, v := range dd {\n                    data = append(data, string(v))\n            }\n    \n            _, err := pusher.client.Trigger(channelName, eventName, s)\n            return len(p), err\n    }\n```\n\nWhile the above code is a bit lengthy, I’d break it down. \n\n- Line 35 - 38 is probably the most interesting part. We make sure the program can only be run if it is acting as a pipe to another program. An example is   `someprogram | ourprogram`.\n- Line 66 - 88 is where we start the `HTTP` server. The server will load up an `index.html` file where the contents of the program we are acting as a pipe for will  be seen in realtime. Maybe another interesting thing is  `var once sync.Once`. What `sync.Once` offers us is the ability to perform a task just once throughout the lifetime of a program, with this we load the contents of `index.html` just once and don’t have to repeat it every time the web page is requested.\n- Line 109 - 125 is where we actually send output to Pusher Channels.\n\nGreat, something we have missed so far is the `index.html` file. You will need to go ahead to create that in the root directory with the following command:\n\n```    \n    $ touch index.html\n```    \n\nOpen the newly created file and paste in the following contents:\n\n```html\n    // pusher-channel-terminal-web-sync/index.html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003ePusher realtime terminal sync\u003c/title\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /\u003e\n        \u003clink rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\" /\u003e\n        \u003clink href=\"static/app.css\" rel=\"stylesheet\"\u003e\n      \u003cbody\u003e\n      \u003cdiv id=\"terminal\"\u003e\n              \u003cpre\u003e\n                \u003coutput id=\"logs\"\u003e\u003c/output\u003e\n              \u003c/pre\u003e\n      \u003c/div\u003e\n      \u003c/body\u003e\n      \u003cscript src=\"https://js.pusher.com/4.3/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"static/app.js\"\u003e\u003c/script\u003e\n    \u003c/html\u003e\n```    \n\nAs you may have noticed, we referenced `app.js`  and `app.css` file. We will get started with the `app.js` file , that can be done with the following command:\n\n\n```    \n    $ touch app.js\n```    \n\nOnce done, you will need to paste the following contents into it.:\n\n```javascript\n    // pusher-channel-terminal-web-sync/app.js\n    (function() {\n      const APP_KEY = 'PUSHER_APP_KEY';\n      const APP_CLUSTER = 'PUSHER_APP_CLUSTER';\n    \n      const logsDiv = document.getElementById('logs');\n    \n      const pusher = new Pusher(APP_KEY, {\n        cluster: APP_CLUSTER,\n      });\n    \n      const channel = pusher.subscribe('realtime-terminal');\n    \n      channel.bind('logs', data =\u003e {\n        const divElement = document.createElement('div');\n        divElement.innerHTML = data;\n    \n        logsDiv.appendChild(divElement);\n      });\n    })();\n```    \n\n\n\u003e Do make sure to replace `PUSHER_APP_KEY` and `PUSHER_APP_CLUSTER` with your original credentials\n\nYou also need to create the `app.css` file. That can be done with:\n\n```\n    $ touch app.css \n```\n\nOnce done, paste the following contents into it:\n\n```css\n    // pusher-channel-terminal-web-sync/app.css\n    #terminal {\n            font-family: courier, monospace;\n            color: #fff;\n            width:750px;\n            margin-left:auto;\n            margin-right:auto;\n            margin-top:100px;\n            font-size:14px;\n    }\n    \n    body {\n            background-color: #000\n    }\n```    \n\nNothing too fancy right? We just make the website’s background black and try to mimic a real terminal.\n\nAll is set and we can go ahead to test our program. A major key to testing this is an application that writes to standard output, such programs like `cat` or a running NodeJS program that writes log to standard output. \n\nTo make this as simple as can be, we will make use of another Go program that writes a UUID to standard output every second. This file can be created with:\n\n\n```\n    # This should be done within the pusher-channel-terminal-web-sync directory\n    $ mkdir uuid\n    $ touch uuid/uuid.go\n```    \n\nSince we will be generating UUIDs, we will require a dependency for that. You can install that by running:\n\n\n```    \n    $ go get github.com/google/uuid\n```    \n\nIn the newly created `uuid.go`, paste the following contents into it:\n\n```go\n    // pusher-channel-terminal-web-sync/uuid/uuid.go\n    package main\n    \n    import (\n            \"fmt\"\n            \"time\"\n    \n            \"github.com/google/uuid\"\n    )\n    \n    func main() {\n    \n            for {\n                    time.Sleep(time.Millisecond * 500)\n                    fmt.Printf(\"Generating a new UUID -- %s\", uuid.New())\n                    fmt.Println()\n            }\n    }\n```    \n\n\nAll is set right now for us to test. To do this, we will need to build both the UUID generator and our actual program.\n\n```\n    # Linux and Mac\n    $ go build -o uuidgenerator uuid/uuid.go\n    $ go build\n    \n    # Windows\n    $ go build -o uuidgenerator.exe uuid/uuid.go\n    $ go build\n```\n\nOnce the above has been done, we will then run both of them. That can be done by running the command below:\n\n\n```    \n    $ ./uuidgenerator | ./pusher-channel-terminal-web-sync\n```    \n\n\nThere should be no output in the terminal but you should visit http://localhost:1500 in other to view the output of the UUID generator in real time. You should be presented with something as depicted in the gif below:\n\n![go-terminal-share-demo](//images.ctfassets.net/1es3ne0caaid/2Ntoh7NkwaEuwBpdXqRsHT/eea0c0367a7eab2fbea7c6b90e0443cd/go-terminal-share-demo.gif)\n\n## Conclusion\n\nIn this tutorial, I have described how [Pusher Channels](https://pusher.com/channels) can be leveraged to build a realtime view of your terminal. This can be really useful if you want to share your terminal with someone else on the same network as you are or with a tool such as ngrok. You could do something like `ngrok http 1500` and share the link with someone else. \n\nAs always, you can find the code on [GitHub](https://github.com/adelowo/pusher-channel-terminal-web-sync).","metaTitle":"Share your terminal as a web application with Go","metaDescription":"Learn how to share your terminal output in a web interface using Go. The demo pipes data to the app, which renders it to the browser rather than the standard output. This could form the basis of a collaborative work tool or monitoring tool."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2LpicPeZ4voAsBOjRTmoa9","type":"Entry","createdAt":"2019-03-06T22:05:30.070Z","updatedAt":"2019-03-06T22:05:30.070Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"End to end encryption in Go with Pusher Channels","url":"encryption-go-channels","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Khmrnzj5moO4S6WOYOGAo","type":"Entry","createdAt":"2018-11-14T14:35:55.702Z","updatedAt":"2019-03-03T15:15:59.601Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lanre Adelowo","url":"lanre-adelowo","email":"adelowomailbox@gmail.com","twitter":"https://twitter.com/alanreadelowo","github":"https://github.com/adelowo","guestWriter":true}}],"projectRepo":"https://github.com/adelowo/pusher-encrypted-channels","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}}],"reviewDate":"2019-03-06","description":"Pusher Channels allows for end-to-end encryption. In this tutorial, learn how to use it by building a simple realtime blog feed, with a Golang backend. Users will be able to create blog posts and see them published instantly, but all data will be fully encrypted and not shared with Pusher.","prerequisite":"You will need Go 1.8+ set up on your machine.","content":"Privacy is a hot topic this days. Who has access to what and who can read my conversation with a friend. [Pusher Channels](https://pusher.com/channels) offers three kinds of channels:\n\n- Public\n- Private\n- Encrypted\n\nBasically, all three perform the same functions - flexible pub/sub messaging and tons of others. But there are few differences between them. Public channels do not require client-server authentication in order to subscribe to events. Private channels take it a step further by requiring client-server authentication. Encrypted channels build on top of private channels by introducing security in the form of encrypted data. \n\n![go-pusher-encryption-dashboard-1](//images.ctfassets.net/1es3ne0caaid/79OJvQvTGQQpJ78b9C7FeW/94bc78cd4744befc50a87fad4efd00b9/go-pusher-encryption-dashboard-1.png)\n\n![go-pusher-encryption-dashboard-2](//images.ctfassets.net/1es3ne0caaid/20bWhmdBXzQzv7OHnH4k47/ed0c7b1b125f4887d9dd14822ea81f16/go-pusher-encryption-dashboard-2.png)\n\nKindly take a look at the images above and spot the difference. Seen any yet ? In the first image which shows the **Debug console** for a public channel, you can see the data being sent to Pusher Channels contains some fields - `title`, `content` and `createdAt`. Now take a look at the second image, you will notice those fields are no longer present but instead you have a bunch of non-human readable content your application obviously didn’t create.  The field called `ciphertext` is what the data you sent to Pusher Channels was converted to. The word `ciphertext` outside this discourse refers to encrypted and/or garbled data.\n\n\n## Understanding encrypted channels\n\nAs depicted above, an advantage of an encrypted channel is the ability to send messages only the server SDK and any of your connected clients can read. No one else - including Pusher -  will be able to read the messages. \n\n\n\u003e Remember that a client has to go through the authentication process too.\n\nPusher Channels uses one of the current top encryption algorithms available and that is [Secretbox](https://nacl.cr.yp.to/box.html). On the server side, the application author is meant to provide an encryption key to be used for the data encryption. This encryption key never gets to Pusher servers, which is why you are the only one that can read messages in an encrypted channel.\n\nBut a question. If the encryption key never gets to Pusher servers, how is a connected client able to subscribe to an event in an encrypted channel and read/decrypt the message ? The answer resides in the authentication process. During authentication, a shared secret key is generated based off the master encryption key and the channel name. The generated shared secret key will be used to encrypt the data before being offloaded to Pusher Channels. The shared secret is also sent as part of a successful authentication response as the client SDK will need to store it as it will be used for decrypting encrypted messages it receives. Again notice that since the encryption key never leaves your server, there is no way Pusher or any other person can read the messages if they don’t go through the authentication process - which is going to be done by the client side SDK.\n\n\n\u003e Note that this shared secret is channel specific. For each channel subscribed to, a new shared secret is generated.\n\nHere is a sample response:\n\n\n```json    \n    {\n      \"auth\": \"3b65aa197f334949f0ef:ffd3094d43e1bb21d5eb849c3debcbba0f7dd32bddeb0bb7dd8441516029853d\",\n      \"channel_data\": {\n        \"user_id\": \"10\",\n        \"user_info\": {\n          \"random\": \"random\"\n        }\n      },\n      \"shared_secret\": \"oB4frIyBUiYVzbUSBFCBl7U5BxzW8ni6wIrO4UaYIeo=\"\n    }\n```     \n\nApart from privacy and security, another benefit encrypted channels provide is message authenticity and protection against forgery. So there is maximum guarantee that whatever message is being received was published by someone who has access to the encryption key.\n\n\n## Implementing encrypted channels\n\nTo show encrypted channels in practice, we will build a live feed application. The application will consist of a server and client. The server will be written in Go. \n\nBefore getting started, it will be nice to be aware of some limitations imposed by an encrypted channel. They are:\n\n\n- Channel name(s) must begin with `private-encrypted-`. Examples include `private-encrypted-dashboard` or `private-encrypted-grocery-list`.  If you provide an encryption key but fail to follow the naming scheme, your data will not be encrypted.\n- [Client events](https://pusher.com/docs/client_api_guide/client_events#trigger-events) cannot be triggered\n- Channel and event names are not encrypted. This is for good reasons as events need to be dispatched to right clients and making sure an event in the Pusher Channels namespace  - `pusher:` - cannot be used.\n\nBefore proceeding, you will need to create a new directory called `pusher-encrypted-feeds`. Make sure to create it within your `$GOPATH`. It can be done by issuing the following command in a terminal:\n\n```    \n    $ mkdir pusher-encrypted-feeds\n```    \n\n\n## Prerequisites\n\n\n- Golang `\u003e=1.8`\n- A [Pusher account](https://dashboard.pusher.com)\n- OpenSSL tool.\n\n\n\u003e If you are a Windows user, please note that you can make use of Git Bash since it comes with the OpenSSL toolkit.\n## Building the server\n\nThe first thing to do is to create a [Pusher Channels](https://pusher.com/channels) account if you don’t have one already. You will need to take note of your app keys and secret as we will be using them later on in the tutorial.\n\nIn the `pusher-encrypted-feeds` directory, you will need to create another directory called `server`.\n\nThe next step of action is to create a `.env` file to contain the secret and key gotten from the dashboard. You should paste in the following contents:\n\n```env\n    // pusher-encrypted-feeds/server/.env\n    \n    PUSHER_APP_ID=\"PUSHER_APP_ID\"\n    PUSHER_APP_KEY=\"PUSHER_APP_KEY\"\n    PUSHER_APP_SECRET=\"PUSHER_APP_SECRET\"\n    PUSHER_APP_CLUSTER=\"PUSHER_APP_CLUSTER\"\n    PUSHER_APP_SECURE=\"1\"\n    PUSHER_CHANNELS_ENCRYPTION_KEY=\"PUSHER_CHANNELS_ENCRYPTION_KEY\"\n```    \n\n`PUSHER_CHANNELS_ENCRYPTION_KEY`  will be the master encryption key used to generate the shared secret and it should be difficult to guess. It is also required to be a 32 byte encryption key. You can generate a suitable encryption key with the following command:\n\n```    \n    $ openssl rand -base64 24\n``` \n\nYou will also need to install some dependencies - the Pusher Go SDK and another for parsing the `.env` file you previously created. You can grab those dependencies by running:\n\n```    \n    $ go get github.com/joho/godotenv\n    $ go get github.com/pusher/pusher-http-go\n```    \n\nYou will need to create a `main.go` file and paste in the following content:\n\n```go\n    // pusher-encrypted-feeds/server/main.go\n    \n    package main\n    \n    import (\n            \"encoding/json\"\n            \"errors\"\n            \"flag\"\n            \"fmt\"\n            \"io/ioutil\"\n            \"log\"\n            \"net/http\"\n            \"os\"\n            \"strings\"\n            \"sync\"\n            \"time\"\n    \n            \"github.com/joho/godotenv\"\n            pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    func main() {\n    \n            port := flag.Int(\"http.port\", 1400, \"Port to run HTTP service on\")\n    \n            flag.Parse()\n    \n            err := godotenv.Load()\n            if err != nil {\n                    log.Fatal(\"Error loading .env file\")\n            }\n    \n            appID := os.Getenv(\"PUSHER_APP_ID\")\n            appKey := os.Getenv(\"PUSHER_APP_KEY\")\n            appSecret := os.Getenv(\"PUSHER_APP_SECRET\")\n            appCluster := os.Getenv(\"PUSHER_APP_CLUSTER\")\n            appIsSecure := os.Getenv(\"PUSHER_APP_SECURE\")\n    \n            var isSecure bool\n            if appIsSecure == \"1\" {\n                    isSecure = true\n            }\n    \n            client := \u0026pusher.Client{\n                    AppId:               appID,\n                    Key:                 appKey,\n                    Secret:              appSecret,\n                    Cluster:             appCluster,\n                    Secure:              isSecure,\n                    EncryptionMasterKey: os.Getenv(\"PUSHER_CHANNELS_ENCRYPTION_KEY\"),\n            }\n    \n            mux := http.NewServeMux()\n    \n            f := \u0026feed{\n                    mu:   \u0026sync.RWMutex{},\n                    data: make(map[string]string, 0),\n            }\n    \n            mux.Handle(\"/feed\", createFeedTitle(client, f))\n            mux.Handle(\"/pusher/auth\", authenticateUsers(client))\n            \n            log.Println(\"Starting HTTP server\")\n            log.Fatal(http.ListenAndServe(fmt.Sprintf(\":%d\", *port), mux))\n    }\n    \n    type feed struct {\n            data map[string]string\n    \n            mu *sync.RWMutex\n    }\n    \n    func (f *feed) exists(title string) bool {\n            f.mu.RLock()\n            defer f.mu.RUnlock()\n            _, ok := f.data[title]\n            return ok\n    }\n    \n    func (f *feed) Add(title, content string) error {\n            if f.exists(title) {\n                    return errors.New(\"title already exists\")\n            }\n    \n            f.mu.Lock()\n            defer f.mu.Unlock()\n            f.data[title] = content\n            return nil\n    }\n    \n    const (\n            successMsg = \"success\"\n            errorMsg   = \"error\"\n    )\n    \n    func createFeedTitle(client *pusher.Client, f *feed) http.HandlerFunc {\n            return func(w http.ResponseWriter, r *http.Request) {\n                    w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n                    w.Header().Set(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS, PUT, DELETE\")\n                    w.Header().Set(\"Access-Control-Allow-Headers\", \"Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization\")\n    \n                    if r.Method == http.MethodOptions {\n                            return\n                    }\n    \n                    writer := json.NewEncoder(w)\n    \n                    type respose struct {\n                            Message   string `json:\"message\"`\n                            Status    string `json:\"status\"`\n                            Timestamp int64  `json:\"timestamp\"`\n                    }\n    \n                    if r.Method != http.MethodPost {\n                            w.WriteHeader(http.StatusMethodNotAllowed)\n                            writer.Encode(\u0026respose{\n                                    Message:   http.StatusText(http.StatusMethodNotAllowed),\n                                    Status:    errorMsg,\n                                    Timestamp: time.Now().Unix(),\n                            })\n    \n                            return\n                    }\n    \n                    var request struct {\n                            Title   string `json:\"title\"`\n                            Content string `json:\"content\"`\n                    }\n    \n                    if err := json.NewDecoder(r.Body).Decode(\u0026request); err != nil {\n                            w.WriteHeader(http.StatusBadRequest)\n                            writer.Encode(\u0026respose{\n                                    Message:   \"Invalid request body\",\n                                    Status:    errorMsg,\n                                    Timestamp: time.Now().Unix(),\n                            })\n                            return\n                    }\n    \n                    if len(strings.TrimSpace(request.Title)) == 0 {\n                            w.WriteHeader(http.StatusBadRequest)\n                            writer.Encode(\u0026respose{\n                                    Message:   \"Title field is empty\",\n                                    Status:    errorMsg,\n                                    Timestamp: time.Now().Unix(),\n                            })\n                            return\n                    }\n    \n                    if len(strings.TrimSpace(request.Content)) == 0 {\n                            w.WriteHeader(http.StatusBadRequest)\n                            writer.Encode(\u0026respose{\n                                    Message:   \"Content field is empty\",\n                                    Status:    errorMsg,\n                                    Timestamp: time.Now().Unix(),\n                            })\n                            return\n                    }\n    \n                    if err := f.Add(request.Title, request.Content); err != nil {\n                            w.WriteHeader(http.StatusAlreadyReported)\n                            writer.Encode(\u0026respose{\n                                    Message:   err.Error(),\n                                    Status:    errorMsg,\n                                    Timestamp: time.Now().Unix(),\n                            })\n                            return\n                    }\n    \n                    go func() {\n    \n                            _, err := client.Trigger(\"private-encrypted-feeds\", \"items\", map[string]string{\n                                    \"title\":     request.Title,\n                                    \"content\":   request.Content,\n                                    \"createdAt\": time.Now().String(),\n                            })\n    \n                            if err != nil {\n                                    fmt.Println(err)\n                            }\n    \n                    }()\n    \n                    w.WriteHeader(http.StatusOK)\n                    writer.Encode(\u0026respose{\n                            Message:   \"Feed item was successfully added\",\n                            Status:    errorMsg,\n                            Timestamp: time.Now().Unix(),\n                    })\n            }\n    }\n    \n    func authenticateUsers(client *pusher.Client) http.HandlerFunc {\n            return func(w http.ResponseWriter, r *http.Request) {\n                    // Handle CORS\n                    w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n                    w.Header().Set(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS, PUT, DELETE\")\n                    w.Header().Set(\"Access-Control-Allow-Headers\", \"Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization\")\n    \n                    if r.Method == http.MethodOptions {\n                            return\n                    }\n    \n                    params, err := ioutil.ReadAll(r.Body)\n                    if err != nil {\n                            w.WriteHeader(http.StatusBadRequest)\n                            return\n                    }\n    \n                    presenceData := pusher.MemberData{\n                            UserId: \"10\",\n                            UserInfo: map[string]string{\n                                    \"random\": \"random\",\n                            },\n                    }\n    \n                    response, err := client.AuthenticatePresenceChannel(params, presenceData)\n                    if err != nil {\n                            w.WriteHeader(http.StatusBadRequest)\n                            return\n                    }\n    \n                    w.Write(response)\n            }\n    }\n```    \n\n\nIn the above, we create an HTTP server with two endpoints:\n\n\n- `/pusher/auth` for authentication of client SDKs.\n- `/feed` for the addition of a new feed item.\n\n\n\u003e Note that the feed items will not be stored in a persistent database but in memory instead\n\nYou should be able to run the server now. That can be done with:\n\n```    \n    $ go run main.go\n```    \n\n## Building the client\n\nThe client is going to contain three pages:\n\n- a dashboard page\n- a form page for adding new feed items \n- a feed page for displaying feed items in realtime as received from the encrypted channel.\n\nYou will need to create a directory called `client`. That can be done with:\n\n```   \n    $ mkdir client\n```    \n\nTo get started, we will need to build the form page to allow new items to be added. You will need to create a file called `new.html` with:\n\n```    \n    $ touch new.html\n```    \n\nIn the newly created `new.html` file, paste the following content:\n\n```html\n    \u003c!-- pusher-encrypted-feeds/client/new.html --\u003e\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003ePusher realtime feed\u003c/title\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /\u003e\n        \u003clink rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\" /\u003e\n        \u003cbase href=\"/\" /\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.2/css/bulma.min.css\"\u003e\n    \u003cstyle\u003e\n    .hidden { display: none }\n    \u003c/style\u003e\n      \u003cbody\u003e\n          \u003csection class=\"section\"\u003e\n              \u003cdiv class=\"container\"\u003e\n    \u003cdiv class=\"columns\"\u003e\n      \u003cdiv class=\"column is-5\"\u003e\n        \u003ch3 class=\"notification\"\u003eCreate a new post\u003c/h3\u003e\n        \u003cdiv class=\"notification is-success hidden\" id=\"success\"\u003e\u003c/div\u003e\n        \u003cdiv class=\"is-danger notification hidden\" id=\"error\"\u003e\u003c/div\u003e\n        \u003cform id=\"feed-form\"\u003e\n          \u003cdiv class=\"field\"\u003e\n            \u003clabel class=\"label\"\u003eTitle : \u003c/label\u003e\n            \u003cdiv class=\"control\"\u003e\n              \u003cinput\n                class=\"input\"\n                type=\"text\"\n                placeholder=\"Post title\"\n                name=\"title\"\n                id=\"title\"\n              /\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n    \n          \u003cdiv\u003e\u003clabel\u003eMessage: \u003c/label\u003e\u003c/div\u003e\n          \u003cdiv\u003e\n            \u003ctextarea\n              rows=\"10\"\n              cols=\"70\"\n              name=\"content\"\n                 id=\"content\"\n            \u003e\u003c/textarea\u003e\n          \u003c/div\u003e\n    \n    \n    \u003cbutton id=\"submit\" class=\"button is-info\"\u003e\n      Send\n    \u003c/button\u003e\n        \u003c/form\u003e\n              \u003c/div\u003e\n      \u003cdiv class=\"is-7\"\u003e\u003c/div\u003e\n           \u003c/section\u003e\n      \u003c/body\u003e\n      \u003cscript src=\"app.js\"\u003e\u003c/script\u003e\n    \u003c/html\u003e\n```    \n\nThis is as simple as can be. We reference the Bulma css library, we create a form with an input and text field. Finally we link to a non-existent file called `app.js` - we will create that in a bit.\n\nTo view what this file looks like, you should navigate to the `client` directory and run the following command:\n\n```    \n    $ python -m http.server 8000\n```    \n\n\n\u003e Here I used Python’s inbuilt server but you are free to use whatever. \n\nYou should visit `localhost:8000/new.html` . You should be presented with something similar to the image below:\n\n![go-pusher-encryption-demo-1](//images.ctfassets.net/1es3ne0caaid/6eeu4WgVojhVIKWB0BcJwH/03d22ca53507c6599403c7319654013f/go-pusher-encryption-demo-1.png)\n\nAs said earlier, we linked to a non-existent file `app.js`, we will need to create it and fill it with some code. Create the `app.js` file with:\n\n```    \n    $ touch app.js\n```    \n\nIn the newly created file, paste the following:\n\n```javascript\n    // pusher-encrypted-channels/client/app.js\n    \n    (function() {\n      const submitFeedBtn = document.getElementById('feed-form');\n      const isDangerDiv = document.getElementById('error');\n      const isSuccessDiv = document.getElementById('success');\n    \n      if (submitFeedBtn !== null) {\n        submitFeedBtn.addEventListener('submit', function(e) {\n          isDangerDiv.classList.add('hidden');\n          isSuccessDiv.classList.add('hidden');\n          e.preventDefault();\n          const title = document.getElementById('title');\n          const content = document.getElementById('content');\n    \n          if (title.value.length === 0) {\n            isDangerDiv.classList.remove('hidden');\n            isDangerDiv.innerHTML = 'Title field is required';\n            return;\n          }\n    \n          if (content.value.length === 0) {\n            isDangerDiv.classList.remove('hidden');\n            isDangerDiv.innerHTML = 'Content field is required';\n            return;\n          }\n    \n          fetch('http://localhost:1400/feed', {\n            method: 'POST',\n            body: JSON.stringify({ title: title.value, content: content.value }),\n            headers: {\n              'Content-Type': 'application/json',\n            },\n          }).then(\n            function(response) {\n              if (response.status === 200) {\n                isSuccessDiv.innerHTML = 'Feed item was successfully added';\n                isSuccessDiv.classList.remove('hidden');\n                setTimeout(function() {\n                  isSuccessDiv.classList.add('hidden');\n                }, 1000);\n                return;\n              }\n    \n              if (response.status === 208) {\n                message = 'Feed item already exists';\n              } else {\n                message = response.statusText;\n              }\n    \n              isDangerDiv.innerHTML = message;\n              isDangerDiv.classList.remove('hidden');\n            },\n            function(error) {\n              isDangerDiv.innerHTML = 'Could not create feed item';\n              isDangerDiv.classList.remove('hidden');\n            }\n          );\n        });\n      }\n    })();\n```    \n\nIn the above, we validate the form whenever the **Send** button is clicked. If the form contains valid data, it is sent to the Go server for processing. The server will store it and trigger a message to Pusher Channels. \n\nGo ahead and submit the form. If successful and you are on the **Debug Console**, you will notice something of the following sort:\n\n![go-pusher-encryption-dashboard-3](//images.ctfassets.net/1es3ne0caaid/4zefJqFCJnj1fjcu6Om434/2b31ae6871756544195d9b113af03b2e/go-pusher-encryption-dashboard-3.png)\n\nThe next point of action will be to create the feeds page so entries can be viewed in realtime. You will need to create a file called `feed.html`. That can be done with:\n\n```    \n    $ touch feed.html\n```    \n\nIn the new file, paste the following HTML code:\n\n```html\n    \u003c!-- pusher-encrypted-channels/client/feed.html --\u003e\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003ePusher realtime feed\u003c/title\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /\u003e\n        \u003clink rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\" /\u003e\n        \u003cbase href=\"/\" /\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.2/css/bulma.min.css\"\u003e\n      \u003cbody\u003e\n          \u003csection class=\"section\"\u003e\n              \u003cdiv class=\"container\"\u003e\n           \u003ch1 class=\"notification is-info\"\u003eYour feed\u003c/h1\u003e\n    \u003cdiv class=\"columns\"\u003e\n      \u003cdiv class=\"column is-7\"\u003e\n        \u003cdiv id=\"feed\"\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n              \u003c/div\u003e\n           \u003c/section\u003e\n      \u003c/body\u003e\n      \u003cscript src=\"https://js.pusher.com/4.3/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.1.0/handlebars.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"app.js\"\u003e\u003c/script\u003e\n    \u003c/html\u003e\n```    \n\nThis page is basically empty. It will be updated by the Channels client SDK as it receives data. \nWe are linking to the Pusher Channels client SDK and Handlebars. Handlebars is used to compile templates we will inject into the page. \n\nTo be able to receive and update the feeds page with data the `app.js` file has to be updated to make use of Pusher Channels. In `app.js` , append the following code:\n\n\n```javascript    \n    // pusher-encrypted-feed/client/app.js\n    \n    // Sample template to be injected\n    const tmpl = `\n          \u003cdiv class=\"box\"\u003e\n            \u003carticle class=\"media\"\u003e\n              \u003cdiv class=\"media-left\"\u003e\n                \u003cfigure class=\"image is-64x64\"\u003e\n                  \u003cimg src=\"https://bulma.io/images/placeholders/128x128.png\" alt=\"Image\" /\u003e\n                \u003c/figure\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"media-content\"\u003e\n                \u003cdiv class=\"content\"\u003e\n                  \u003cp\u003e\n                    \u003cstrong\u003e{{title}}\u003c/strong\u003e\n                    \u003csmall\u003e{{createdAt}}\u003c/small\u003e \u003cbr /\u003e\n                    {{content}}\n                  \u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/article\u003e\n          \u003c/div\u003e\n    `;\n    \n      const APP_KEY = 'PUSHER_APP_KEY';\n      const APP_CLUSTER = 'PUSHER_CLUSTER';\n    \n      Pusher.logToConsole = true;\n    \n      const pusher = new Pusher(APP_KEY, {\n        cluster: APP_CLUSTER,\n        authEndpoint: 'http://localhost:1400/pusher/auth',\n      });\n    \n      const channel = pusher.subscribe('private-encrypted-feeds');\n      // Use Handlebars to compile the template\n      const template = Handlebars.compile(tmpl);\n      const feedDiv = document.getElementById('feed');\n    \n      channel.bind('items', function(data) {\n        // replace some fields in the template with data from the event.\n        const html = template(data);\n    \n        const divElement = document.createElement('div');\n        divElement.innerHTML = html;\n    \n        // Update the page\n        feedDiv.appendChild(divElement);\n      });\n```      \n\n\n\u003e Remember to replace both `PUSHER_CLUSTER` and `PUSHER_KEY` with your credentials\n\nWith the addition above, the entire `app.js` should look like:\n\n```javascript\n    // pusher-encrypted-feed/client/app.js\n    \n    (function() {\n      const submitFeedBtn = document.getElementById('feed-form');\n      const isDangerDiv = document.getElementById('error');\n      const isSuccessDiv = document.getElementById('success');\n    \n      if (submitFeedBtn !== null) {\n        submitFeedBtn.addEventListener('submit', function(e) {\n          isDangerDiv.classList.add('hidden');\n          isSuccessDiv.classList.add('hidden');\n          e.preventDefault();\n          const title = document.getElementById('title');\n          const content = document.getElementById('content');\n    \n          if (title.value.length === 0) {\n            isDangerDiv.classList.remove('hidden');\n            isDangerDiv.innerHTML = 'Title field is required';\n            return;\n          }\n    \n          if (content.value.length === 0) {\n            isDangerDiv.classList.remove('hidden');\n            isDangerDiv.innerHTML = 'Content field is required';\n            return;\n          }\n    \n          fetch('http://localhost:1400/feed', {\n            method: 'POST',\n            body: JSON.stringify({ title: title.value, content: content.value }),\n            headers: {\n              'Content-Type': 'application/json',\n            },\n          }).then(\n            function(response) {\n              if (response.status === 200) {\n                isSuccessDiv.innerHTML = 'Feed item was successfully added';\n                isSuccessDiv.classList.remove('hidden');\n                setTimeout(function() {\n                  isSuccessDiv.classList.add('hidden');\n                }, 1000);\n                return;\n              }\n    \n              if (response.status === 208) {\n                message = 'Feed item already exists';\n              } else {\n                message = response.statusText;\n              }\n    \n              isDangerDiv.innerHTML = message;\n              isDangerDiv.classList.remove('hidden');\n            },\n            function(error) {\n              isDangerDiv.innerHTML = 'Could not create feed item';\n              isDangerDiv.classList.remove('hidden');\n            }\n          );\n        });\n      }\n    \n      const tmpl = `\n          \u003cdiv class=\"box\"\u003e\n            \u003carticle class=\"media\"\u003e\n              \u003cdiv class=\"media-left\"\u003e\n                \u003cfigure class=\"image is-64x64\"\u003e\n                  \u003cimg src=\"https://bulma.io/images/placeholders/128x128.png\" alt=\"Image\" /\u003e\n                \u003c/figure\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"media-content\"\u003e\n                \u003cdiv class=\"content\"\u003e\n                  \u003cp\u003e\n                    \u003cstrong\u003e{{title}}\u003c/strong\u003e\n                    \u003csmall\u003e{{createdAt}}\u003c/small\u003e \u003cbr /\u003e\n                    {{content}}\n                  \u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/article\u003e\n          \u003c/div\u003e\n    `;\n    \n      const APP_KEY = 'PUSHER_APP_KEY';\n      const APP_CLUSTER = 'PUSHER_CLUSTER';\n    \n      Pusher.logToConsole = true;\n    \n      const pusher = new Pusher(APP_KEY, {\n        cluster: APP_CLUSTER,\n        authEndpoint: 'http://localhost:1400/pusher/auth',\n      });\n    \n      const channel = pusher.subscribe('private-encrypted-feeds');\n      const template = Handlebars.compile(tmpl);\n      const feedDiv = document.getElementById('feed');\n    \n      channel.bind('items', function(data) {\n        const html = template(data);\n    \n        const divElement = document.createElement('div');\n        divElement.innerHTML = html;\n    \n        feedDiv.appendChild(divElement);\n      });\n    })();\n```    \n\nYou can go ahead to open the `feed.html` page on a tab and `new.html` in another. Watch closely as whatever data you submit in `new.html` appears in `feed.html`. You can also keep an eye on the **Debug Console** to make sure all data is encrypted.\n\nTo make this app a little more polished, add an `index.html` page. You can find the source code at the  accompanying [GitHub repository](https://github.com/adelowo/pusher-encrypted-channels/blob/master/client/index.html) of this tutorial.\n\n\n## Conclusion\n\nIn this tutorial, I introduced you to a lesser known feature of Pusher Channels - end to end encryption with encrypted channels. We also built an application that uses encrypted channels instead of the regular public channels you might be used to. \n\nAs always, the entire code for this article can be found on [GitHub](https://github.com/adelowo/pusher-encrypted-channels).","metaTitle":"End to end encryption in Go with Pusher Channels","metaDescription":"Pusher Channels allows for end-to-end encryption. In this article, learn how to use it by building a simple realtime blog feed, with a Golang backend. Users will be able to create blog posts and see them published instantly, but all data will be fully encrypted and not shared with Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3k4CPmwr72Uw8mQAKEm08g","type":"Entry","createdAt":"2019-02-04T17:09:44.804Z","updatedAt":"2019-02-04T17:09:44.804Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Pusher Channels as an alternative messaging queue","url":"messaging-queue-node-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Khmrnzj5moO4S6WOYOGAo","type":"Entry","createdAt":"2018-11-14T14:35:55.702Z","updatedAt":"2019-03-03T15:15:59.601Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lanre Adelowo","url":"lanre-adelowo","email":"adelowomailbox@gmail.com","twitter":"https://twitter.com/alanreadelowo","github":"https://github.com/adelowo","guestWriter":true}}],"projectRepo":"https://github.com/adelowo/pusher-channels-queue","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2019-02-04","description":"Use Node.js, Golang and Pusher Channels to create a message queue backend. The demo application features a login service that sends an email upon successful authentication. You will use Golang for the login component and Node.js for the email service.","prerequisite":"You will need Go 1.9+ and Node 7+ installed on your machine.","content":"## Introduction\n\nIn this tutorial, we will be building a message queue backed up by [Pusher Channels](https://pusher.com/channels). The application we will build will be a typical login service which upon a successful authentication, an email is sent to the authenticated user informing him of the authentication process and where it originated from. This is quite common with web applications - Twitter, GitHub and Slack do this all the time. We will build the login service in Golang while the email service will be written in NodeJS. The Golang application will publish the data to Pusher channels while the Node.js service will be subscribe to the particular channel and send the email to the user.\n\nMessaging queues are an interesting technique used to improve scalability and a bit of abstraction between the producer and the receiver/consumer as they don’t have to be connected in whatever form. A message queue is nothing much more than a list of messages being sent between two or more applications. A message is basically data produced by an application usually called the producer. That data is then sent into the queue to be picked up by another totally different application - known as the consumer.\n\n## Prerequisites\n\n- Golang ( `\u003e= 1.9`)\n- Node.js ( `\u003e= 7` )\n- A Pusher Channels application. [Create one here.](https://pusher.com/channels)\n\n\n## Building the login service\n\nLet’s set up a simple login Golang service. Due to simplicity reasons  this application will only handle authentication and will use a memory-mapped list of users.\n\nTo get started, we will need to set up our project root directory. We need to create the directory `pusher-channels-queue` somewhere in `$GOPATH`. Ideally, this should resolve to `$GOPATH/src/github.com/pusher-tutorials/pusher-channels-queue`. \n\nAfter doing the above, we will need to create a `go` directory since that is where our Golang application will live. \n\n```\n    $ mkdir go\n``` \n\nThe only external library we will need here are the Channel’s Golang SDK and a library to help us load our Pusher Channels keys. You can fetch that by running the command below:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n    $ go get github.com/joho/godotenv\n```\n\nTo get started, you will need to create an `.env` file with the following contents:\n\n```\n    // github.com/pusher-tutorials/pusher-channels-queue/go/.env\n    \n    PUSHER_APP_ID=\"YOUR_APP_ID\"\n    PUSHER_APP_KEY=\"YOUR_APP_KEY\"\n    PUSHER_APP_SECRET=\"YOUR_APP_SECRET\"\n    PUSHER_APP_CLUSTER=\"YOUR_APP_CLUSTER\"\n    PUSHER_APP_SECURE=\"1\"\n```    \n\nOnce this has been done, we will need to create a `main.go` file.\n\n\n``` go\n    // github.com/pusher-tutorials/pusher-channels-queue/go/main.go\n    package main\n    \n    func main() {\n    \n            port := flag.Int(\"http.port\", 1400, \"Port to run HTTP service on\")\n    \n            flag.Parse()\n            \n            err := godotenv.Load()\n            if err != nil {\n                    log.Fatal(\"Error loading .env file\")\n            }\n    \n            appID := os.Getenv(\"PUSHER_APP_ID\")\n            appKey := os.Getenv(\"PUSHER_APP_KEY\")\n            appSecret := os.Getenv(\"PUSHER_APP_SECRET\")\n            appCluster := os.Getenv(\"PUSHER_APP_CLUSTER\")\n            appIsSecure := os.Getenv(\"PUSHER_APP_SECURE\")\n    \n            var isSecure bool\n            if appIsSecure == \"1\" {\n                    isSecure = true\n            }\n    \n            client := \u0026pusher.Client{\n                    AppId:   appID,\n                    Key:     appKey,\n                    Secret:  appSecret,\n                    Cluster: appCluster,\n                    Secure:  isSecure,\n            }\n            \n            mux := http.NewServeMux()\n            \n            mux.Handle(\"/login\", http.HandlerFunc(login(client)))\n            \n            log.Fatal(http.ListenAndServe(fmt.Sprintf(\":%d\", *port), mux))\n    }\n```\n\nIn the above, we created an `HTTP` server that responds to the `login` route. We will go on to implement the `login` function subsequently.\n\nSince we will be using a memory mapped list of users to prevent complications that might drive us away from the main focus of the tutorial. We will need to go ahead to create those. Paste the following code in the `main.go` file. \n\n``` go\n    // github.com/pusher-tutorials/pusher-channels-queue/go/main.go\n    \n    type User struct {\n            Email    string\n            Password string\n    }\n    \n    var (\n            validUsers = map[string]User{\n                    \"admin\": User{\n                            Email:    \"youremail@gmail.com\",\n                            Password: \"admin\",\n                    },\n                    \"lanre\": User{\n                            Email:    \"youremail@gmail.com\",\n                            Password: \"lanre\",\n                    },\n            }\n    )\n```   \n\n\n\u003e You should replace `youremail@gmail.com` with your real email address so as to get the email when we get to the end of the tutorial.\n\nNow back to the `login` function, you can go ahead to paste the following code in `main.go`\n\n\n``` go\n    // github.com/pusher-tutorials/pusher-channels-queue/go/main.go\n    \n    func encode(w io.Writer, v interface{}) {\n            json.NewEncoder(w).Encode(v)\n    }\n    \n    func login(client *pusher.Client) http.HandlerFunc {\n            return func(w http.ResponseWriter, r *http.Request) {\n                    defer r.Body.Close()\n    \n                    var request struct {\n                            UserName string `json:\"userName\"`\n                            Password string `json:\"password\"`\n                    }\n    \n                    type response struct {\n                            Message string `json:\"message\"`\n                            Success bool   `json:\"success\"`\n                    }\n                    \n                    // Make sure to only respond to the \"/login\" route\n                    // due to limitations in the standard HTTP router\n                    if r.URL.Path != \"/login\" {\n                            w.WriteHeader(http.StatusNotFound)\n                            return\n                    }\n    \n                    // Only HTTP posts are accepted\n                    if r.Method != http.MethodPost {\n                            w.WriteHeader(http.StatusMethodNotAllowed)\n                            return\n                    }\n    \n                    if err := json.NewDecoder(r.Body).Decode(\u0026request); err != nil {\n                            w.WriteHeader(http.StatusBadRequest)\n                            encode(w, response{\"Invalid request body\", false})\n                            return\n                    }\n                    \n                    // Check if the user exists in our memory mapped list.\n                    user, ok := validUsers[request.UserName]\n                    if !ok {\n                            w.WriteHeader(http.StatusBadRequest)\n                            encode(w, response{\"User not found\", false})\n                            return\n                    }\n                    \n                    \n                    // Do the passwords match ?\n                    if user.Password != request.Password {\n                            w.WriteHeader(http.StatusBadRequest)\n                            encode(w, response{\"Password does not match\", false})\n                            return\n                    }\n    \n                    w.WriteHeader(http.StatusOK)\n                    encode(w, response{\"Login successful\", true})\n    \n                    host, _, err := net.SplitHostPort(r.RemoteAddr)\n                    if err != nil {\n                            fmt.Fprintf(w, \"userip: %q is not IP:port\", r.RemoteAddr)\n                            return\n                    }\n    \n                    var ip = host\n                    \n                    if host == \"::1\" {\n                            ip = \"127.0.0.1\"\n                    }\n                    \n                    client.Trigger(\"auth\", \"login\", \u0026struct {\n                            IP    string `json:\"ip\"`\n                            User  string `json:\"user\"`\n                            Email string `json:\"email\"`\n                    }{\n                            User:  request.UserName,\n                            IP:    ip,\n                            Email: user.Email,\n                    })\n            }\n    }\n```   \n\nWhile it is pretty easy to grok through the code above due to the inline comments, I will still like to go through the last few lines. Especially from Line 59.\n\n\n- We get the IP of the user from `r.RemoteAddr`. \n\u003e Please note that if you end up running something that does this kind of IP fetching in production, this might not be the right approach if your Go application is behind a proxy.\n\n\n- We also check to make sure we have a valid IP address by making use of the `net.SplitHostPort` utility function.\n- Then we finally publish the data to the `auth` channel.\n\nAt this point, the entire `main.go` should look like the following: \n\n``` go\n    // github.com/pusher-tutorials/pusher-channels-queue/go/main.go\n    \n    package main\n    \n    import (\n            \"encoding/json\"\n            \"flag\"\n            \"fmt\"\n            \"io\"\n            \"log\"\n            \"net\"\n            \"net/http\"\n            \"os\"\n    \n            \"github.com/joho/godotenv\"\n            pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    type User struct {\n            Email    string\n            Password string\n    }\n    \n    var (\n            validUsers = map[string]User{\n                    \"admin\": User{\n                            Email:    \"youremail@gmail.com\",\n                            Password: \"admin\",\n                    },\n                    \"lanre\": User{\n    \n                            Email:    \"youremail@gmail.com\",\n                            Password: \"lanre\",\n                    },\n            }\n    )\n    \n    func main() {\n    \n            port := flag.Int(\"http.port\", 1400, \"Port to run HTTP service on\")\n    \n            flag.Parse()\n            \n            err := godotenv.Load()\n            if err != nil {\n                    log.Fatal(\"Error loading .env file\")\n            }\n    \n            appID := os.Getenv(\"PUSHER_APP_ID\")\n            appKey := os.Getenv(\"PUSHER_APP_KEY\")\n            appSecret := os.Getenv(\"PUSHER_APP_SECRET\")\n            appCluster := os.Getenv(\"PUSHER_APP_CLUSTER\")\n            appIsSecure := os.Getenv(\"PUSHER_APP_SECURE\")\n    \n            var isSecure bool\n            if appIsSecure == \"1\" {\n                    isSecure = true\n            }\n    \n            client := \u0026pusher.Client{\n                    AppId:   appID,\n                    Key:     appKey,\n                    Secret:  appSecret,\n                    Cluster: appCluster,\n                    Secure:  isSecure,\n            }\n    \n            mux := http.NewServeMux()\n    \n            mux.Handle(\"/login\", http.HandlerFunc(login(client)))\n    \n            log.Fatal(http.ListenAndServe(fmt.Sprintf(\":%d\", *port), mux))\n    }\n    \n    func encode(w io.Writer, v interface{}) {\n            json.NewEncoder(w).Encode(v)\n    }\n    \n    func login(client *pusher.Client) http.HandlerFunc {\n            return func(w http.ResponseWriter, r *http.Request) {\n                    defer r.Body.Close()\n    \n                    var request struct {\n                            UserName string `json:\"userName\"`\n                            Password string `json:\"password\"`\n                    }\n    \n                    type response struct {\n                            Message string `json:\"message\"`\n                            Success bool   `json:\"success\"`\n                    }\n    \n                    if r.URL.Path != \"/login\" {\n                            w.WriteHeader(http.StatusNotFound)\n                            return\n                    }\n    \n                    if r.Method != http.MethodPost {\n                            w.WriteHeader(http.StatusMethodNotAllowed)\n                            return\n                    }\n    \n                    if err := json.NewDecoder(r.Body).Decode(\u0026request); err != nil {\n                            w.WriteHeader(http.StatusBadRequest)\n                            encode(w, response{\"Invalid request body\", false})\n                            return\n                    }\n    \n                    user, ok := validUsers[request.UserName]\n                    if !ok {\n                            w.WriteHeader(http.StatusBadRequest)\n                            encode(w, response{\"User not found\", false})\n                            return\n                    }\n    \n                    if user.Password != request.Password {\n                            w.WriteHeader(http.StatusBadRequest)\n                            encode(w, response{\"Password does not match\", false})\n                            return\n                    }\n    \n                    w.WriteHeader(http.StatusOK)\n                    encode(w, response{\"Login successful\", true})\n    \n                    host, _, err := net.SplitHostPort(r.RemoteAddr)\n                    if err != nil {\n                            fmt.Fprintf(w, \"userip: %q is not IP:port\", r.RemoteAddr)\n                            return\n                    }\n    \n                    var ip = host\n    \n                    if host == \"::1\" {\n                            ip = \"127.0.0.1\"\n                    }\n    \n                    client.Trigger(\"auth\", \"login\", \u0026struct {\n                            IP    string `json:\"ip\"`\n                            User  string `json:\"user\"`\n                            Email string `json:\"email\"`\n                    }{\n                            User:  request.UserName,\n                            IP:    ip,\n                            Email: user.Email,\n                    })\n            }\n    }\n```    \n\nRun the Go program:\n\n```\n    $ cd $GOPATH/src/github.com/pusher-tutorials/pusher-channels-queue/go\n    $ go run main.go\n```   \n\nYou can try to send requests to the service with `cURL` by:\n\n\n```  \n    $ curl  -X POST localhost:1400/login -d '{\"username\" : \"admin\", \"password\"  :\"admin\"}'\n```    \n\nThis will produce a response such as:\n\n```   \n    {\"message\":\"Login successful\",\"success\":true}\n    \n```\n\n## Building the Node.js email service\n\nWe have made progress by publishing the events to Pusher Channels. You can verify that the events are published by looking at the Debug Console of the dashboard.\n\n![channels-message-queue-pusher-dashboard](//images.ctfassets.net/1es3ne0caaid/4zMf4266icqKWSaqeOWEU/6d0c818ffca2e928ae156d90b01fc055/channels-message-queue-pusher-dashboard.png)\n\nTo build our Node.js email service, we will need to go back to the root directory, `pusher-channels-queue`. After which we will create the `node` directory as it will house our Node.js application. \n\n```   \n    $ mkdir node\n```    \n\nWe will need a couple libraries for the application; \n\n- `pusher-js` - the NodeJS SDK for Pusher Channels.\n- `nodemailer` - We need this to send emails.\n- `dotenv` - We need this to load environment variables from a file.\n- `handlebars` - We need to dynamically replace contents of the email before sending it. Things like username and IP address come to mind here.\n- `fs` - We need to be able to read the content of the email template from the filesystem. You can have a look at the [email template here.](https://raw.githubusercontent.com/adelowo/pusher-channels-queue/master/node/index.html)\n\nTo install the above, you will need to create a `package.json` file that contains the following:\n\n``` json\n    // github.com/pusher-tutorials/pusher-channels-queue/node/package.json\n    {\n      \"dependencies\": {\n        \"dotenv\": \"^6.2.0\",\n        \"fs\": \"^0.0.1-security\",\n        \"handlebars\": \"^4.0.12\",\n        \"nodemailer\": \"^4.7.0\",\n        \"pusher-js\": \"^4.3.1\"\n      }\n    }\n```    \n\nYou will need to run `npm install` to get install those dependencies.\n\nSince we need to subscribe to Pusher Channels, we need to first include the required values in `.env`. \n\n```\n    // github.com/pusher-tutorials/pusher-channels-queue/node/.env\n    PUSHER_APP_CLUSTER=\"YOUR_APP_CLUSTER\"\n    PUSHER_APP_SECURE=\"1\"\n    PUSHER_APP_KEY=\"YOUR_APP_KEY\"\n    MAILER_EMAIL=\"you@gmail.com\"\n    MAILER_PASSWORD=\"Password\"\n```\n\nThen create an `index.js` file\n\n``` javascript\n    // github.com/pusher-tutorials/pusher-channels-queue/node/index.js\n    \n    require('dotenv').config();\n    const Pusher = require('pusher-js');\n    const nodemailer = require('nodemailer');\n    const handlebars = require('handlebars');\n    const fs = require('fs');\n    \n    const pusherSocket = new Pusher(process.env.PUSHER_APP_KEY, {\n      forceTLS: process.env.PUSHER_APP_SECURE === '1' ? true : false,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n    });\n    \n    const transporter = nodemailer.createTransport({\n      service: 'gmail',\n      auth: {\n        user: process.env.MAILER_EMAIL,\n        pass: process.env.MAILER_PASSWORD,\n      },\n    });\n    \n    const channel = pusherSocket.subscribe('auth');\n    \n    channel.bind('login', data =\u003e {\n       \n      fs.readFile('./index.html', { encoding: 'utf-8' }, function(err, html) {\n        if (err) {\n          throw err;\n        }\n        \n        const template = handlebars.compile(html);\n        const replacements = {\n          username: data.user,\n          ip: data.ip,\n        };\n    \n        let mailOptions = {\n          from: '\"Pusher Tutorial demo\" \u003cfoo@example.com\u003e',\n          to: data.email,\n          subject: 'New login into Pusher tutorials demo app',\n          html: template(replacements),\n        };\n        \n        transporter.sendMail(mailOptions, function(error, response) {\n          if (error) {\n            console.log(error);\n            callback(error);\n          }\n        });\n      });\n      \n      console.log(data);\n    });\n```    \n\nIn the above code, we read the contents of `index.html` and process it like a handlebars template with `handlebars.compile(html)`. This is because we are dynamically replacing `{{ username }}`  and `{{ ip }}`.\n\nSo far, we have not created the `index.html` . You will need to create the aforementioned file and paste the following contents:\n\n``` html\n    // github.com/pusher-tutorials/pusher-channels-queue/node/index.html\n    \n    \u003c!doctype html\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width\" /\u003e\n        \u003cmeta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /\u003e\n        \u003ctitle\u003eSimple Transactional Email\u003c/title\u003e\n        \u003cstyle\u003e\n          /* -------------------------------------\n              GLOBAL RESETS\n          ------------------------------------- */\n    \n          /*All the styling goes here*/\n    \n          img {\n            border: none;\n            -ms-interpolation-mode: bicubic;\n            max-width: 100%;\n          }\n    \n          body {\n            background-color: #f6f6f6;\n            font-family: sans-serif;\n            -webkit-font-smoothing: antialiased;\n            font-size: 14px;\n            line-height: 1.4;\n            margin: 0;\n            padding: 0;\n            -ms-text-size-adjust: 100%;\n            -webkit-text-size-adjust: 100%;\n          }\n    \n          table {\n            border-collapse: separate;\n            mso-table-lspace: 0pt;\n            mso-table-rspace: 0pt;\n            width: 100%; }\n            table td {\n              font-family: sans-serif;\n              font-size: 14px;\n              vertical-align: top;\n          }\n    \n          /* -------------------------------------\n              BODY \u0026 CONTAINER\n          ------------------------------------- */\n    \n          .body {\n            background-color: #f6f6f6;\n            width: 100%;\n          }\n    \n          /* Set a max-width, and make it display as block so it will automatically stretch to that width, but will also shrink down on a phone or something */\n          .container {\n            display: block;\n            Margin: 0 auto !important;\n            /* makes it centered */\n            max-width: 580px;\n            padding: 10px;\n            width: 580px;\n          }\n    \n          /* This should also be a block element, so that it will fill 100% of the .container */\n          .content {\n            box-sizing: border-box;\n            display: block;\n            Margin: 0 auto;\n            max-width: 580px;\n            padding: 10px;\n          }\n    \n          /* -------------------------------------\n              HEADER, FOOTER, MAIN\n          ------------------------------------- */\n          .main {\n            background: #ffffff;\n            border-radius: 3px;\n            width: 100%;\n          }\n    \n          .wrapper {\n            box-sizing: border-box;\n            padding: 20px;\n          }\n    \n          .content-block {\n            padding-bottom: 10px;\n            padding-top: 10px;\n          }\n    \n          .footer {\n            clear: both;\n            Margin-top: 10px;\n            text-align: center;\n            width: 100%;\n          }\n            .footer td,\n            .footer p,\n            .footer span,\n            .footer a {\n              color: #999999;\n              font-size: 12px;\n              text-align: center;\n          }\n    \n          /* -------------------------------------\n              TYPOGRAPHY\n          ------------------------------------- */\n          h1,\n          h2,\n          h3,\n          h4 {\n            color: #000000;\n            font-family: sans-serif;\n            font-weight: 400;\n            line-height: 1.4;\n            margin: 0;\n            margin-bottom: 30px;\n          }\n    \n          h1 {\n            font-size: 35px;\n            font-weight: 300;\n            text-align: center;\n            text-transform: capitalize;\n          }\n    \n          p,\n          ul,\n          ol {\n            font-family: sans-serif;\n            font-size: 14px;\n            font-weight: normal;\n            margin: 0;\n            margin-bottom: 15px;\n          }\n            p li,\n            ul li,\n            ol li {\n              list-style-position: inside;\n              margin-left: 5px;\n          }\n    \n          a {\n            color: #3498db;\n            text-decoration: underline;\n          }\n    \n          /* -------------------------------------\n              BUTTONS\n          ------------------------------------- */\n          .btn {\n            box-sizing: border-box;\n            width: 100%; }\n            .btn \u003e tbody \u003e tr \u003e td {\n              padding-bottom: 15px; }\n            .btn table {\n              width: auto;\n          }\n            .btn table td {\n              background-color: #ffffff;\n              border-radius: 5px;\n              text-align: center;\n          }\n            .btn a {\n              background-color: #ffffff;\n              border: solid 1px #3498db;\n              border-radius: 5px;\n              box-sizing: border-box;\n              color: #3498db;\n              cursor: pointer;\n              display: inline-block;\n              font-size: 14px;\n              font-weight: bold;\n              margin: 0;\n              padding: 12px 25px;\n              text-decoration: none;\n              text-transform: capitalize;\n          }\n    \n          .btn-primary table td {\n            background-color: #3498db;\n          }\n    \n          .btn-primary a {\n            background-color: #3498db;\n            border-color: #3498db;\n            color: #ffffff;\n          }\n    \n          /* -------------------------------------\n              OTHER STYLES THAT MIGHT BE USEFUL\n          ------------------------------------- */\n          .last {\n            margin-bottom: 0;\n          }\n    \n          .first {\n            margin-top: 0;\n          }\n    \n          .align-center {\n            text-align: center;\n          }\n    \n          .align-right {\n            text-align: right;\n          }\n    \n          .align-left {\n            text-align: left;\n          }\n    \n          .clear {\n            clear: both;\n          }\n    \n          .mt0 {\n            margin-top: 0;\n          }\n    \n          .mb0 {\n            margin-bottom: 0;\n          }\n    \n          .preheader {\n            color: transparent;\n            display: none;\n            height: 0;\n            max-height: 0;\n            max-width: 0;\n            opacity: 0;\n            overflow: hidden;\n            mso-hide: all;\n            visibility: hidden;\n            width: 0;\n          }\n    \n          .powered-by a {\n            text-decoration: none;\n          }\n    \n          hr {\n            border: 0;\n            border-bottom: 1px solid #f6f6f6;\n            Margin: 20px 0;\n          }\n    \n          /* -------------------------------------\n              RESPONSIVE AND MOBILE FRIENDLY STYLES\n          ------------------------------------- */\n          @media only screen and (max-width: 620px) {\n            table[class=body] h1 {\n              font-size: 28px !important;\n              margin-bottom: 10px !important;\n            }\n            table[class=body] p,\n            table[class=body] ul,\n            table[class=body] ol,\n            table[class=body] td,\n            table[class=body] span,\n            table[class=body] a {\n              font-size: 16px !important;\n            }\n            table[class=body] .wrapper,\n            table[class=body] .article {\n              padding: 10px !important;\n            }\n            table[class=body] .content {\n              padding: 0 !important;\n            }\n            table[class=body] .container {\n              padding: 0 !important;\n              width: 100% !important;\n            }\n            table[class=body] .main {\n              border-left-width: 0 !important;\n              border-radius: 0 !important;\n              border-right-width: 0 !important;\n            }\n            table[class=body] .btn table {\n              width: 100% !important;\n            }\n            table[class=body] .btn a {\n              width: 100% !important;\n            }\n            table[class=body] .img-responsive {\n              height: auto !important;\n              max-width: 100% !important;\n              width: auto !important;\n            }\n          }\n    \n          /* -------------------------------------\n              PRESERVE THESE STYLES IN THE HEAD\n          ------------------------------------- */\n          @media all {\n            .ExternalClass {\n              width: 100%;\n            }\n            .ExternalClass,\n            .ExternalClass p,\n            .ExternalClass span,\n            .ExternalClass font,\n            .ExternalClass td,\n            .ExternalClass div {\n              line-height: 100%;\n            }\n            .apple-link a {\n              color: inherit !important;\n              font-family: inherit !important;\n              font-size: inherit !important;\n              font-weight: inherit !important;\n              line-height: inherit !important;\n              text-decoration: none !important;\n            }\n            .btn-primary table td:hover {\n              background-color: #34495e !important;\n            }\n            .btn-primary a:hover {\n              background-color: #34495e !important;\n              border-color: #34495e !important;\n            }\n          }\n    \n        \u003c/style\u003e\n      \u003c/head\u003e\n      \u003cbody class=\"\"\u003e\n        \u003ctable role=\"presentation\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"body\"\u003e\n          \u003ctr\u003e\n            \u003ctd\u003e\u0026nbsp;\u003c/td\u003e\n            \u003ctd class=\"container\"\u003e\n              \u003cdiv class=\"content\"\u003e\n    \n                \u003c!-- START CENTERED WHITE CONTAINER --\u003e\n                \u003ctable role=\"presentation\" class=\"main\"\u003e\n    \n                  \u003c!-- START MAIN CONTENT AREA --\u003e\n                  \u003ctr\u003e\n                    \u003ctd class=\"wrapper\"\u003e\n                      \u003ctable role=\"presentation\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\"\u003e\n                        \u003ctr\u003e\n                          \u003ctd\u003e\n                            \u003cp\u003eHi {{ username }},\u003c/p\u003e\n                            \u003cp\u003eYou’ve successfully signed into the demo app.\u003c/p\u003e\n                            \u003cp\u003eYou signed in from the IP address, {{ ip }}\u003c/p\u003e\n                            \u003ctable role=\"presentation\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"btn btn-primary\"\u003e\n                              \u003ctbody\u003e\n                                \u003ctr\u003e\n                                  \u003ctd align=\"left\"\u003e\n                                    \u003ctable role=\"presentation\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\"\u003e\n                                      \u003ctbody\u003e\n                                        \u003ctr\u003e\n                                          \u003ctd\u003e \u003ca href=\"https://pusher.com\"\n                                                          target=\"_blank\"\u003eVisit\n                                                          Pusher\u003c/a\u003e \u003c/td\u003e\n                                        \u003c/tr\u003e\n                                      \u003c/tbody\u003e\n                                    \u003c/table\u003e\n                                  \u003c/td\u003e\n                                \u003c/tr\u003e\n                              \u003c/tbody\u003e\n                            \u003c/table\u003e\n                          \u003c/td\u003e\n                        \u003c/tr\u003e\n                      \u003c/table\u003e\n                    \u003c/td\u003e\n                  \u003c/tr\u003e\n    \n                \u003c!-- END MAIN CONTENT AREA --\u003e\n                \u003c/table\u003e\n    \n    \n              \u003c!-- END CENTERED WHITE CONTAINER --\u003e\n              \u003c/div\u003e\n            \u003c/td\u003e\n            \u003ctd\u003e\u0026nbsp;\u003c/td\u003e\n          \u003c/tr\u003e\n        \u003c/table\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe listen for the `login` event and pick out the important data from there. In this case, the user’s name and IP address from which they logged in. After which we send the email to the user.\n\nYou will need to start the Node.js service by running `node index.js`. After doing that, you can send login requests to the Golang service again.\n\nYou should check your email:\n\n![channels-message-queue-demo](//images.ctfassets.net/1es3ne0caaid/4LEEEGx2Y8yIUC24Ycg8qc/a98f5dd779dbc815db4e5f3f4753d934/channels-message-queue-demo.png)\n\n\u003e Please note that you might need to allow “Insecure apps”. Please visit https://support.google.com/accounts/answer/6010255?hl=en \n\n\n## Conclusion\n\nIn this tutorial, we have leveraged [Pusher Channels](https://pusher.com/channels) as a messaging queue between two different applications. While we used this to send email notifications, we can use this for much more interesting patterns depending on your application’s needs.\n\nThe entire source code of this tutorial can be found on [GitHub](https://github.com/adelowo/pusher-channels-queue).","metaTitle":"Pusher Channels as an alternative messaging queue","metaDescription":"Use Node.js, Golang and Pusher Channels to create a message queue backend. The demo application features a login service that sends an email upon successful authentication. You will use Golang for the login component and Node.js for the email service."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1ojP4dOvryiCAYqaC0isEq","type":"Entry","createdAt":"2018-12-11T23:26:44.674Z","updatedAt":"2018-12-11T23:26:44.674Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Service discovery in a microservice architecture with Pusher Channels","url":"service-discovery-microservices","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Khmrnzj5moO4S6WOYOGAo","type":"Entry","createdAt":"2018-11-14T14:35:55.702Z","updatedAt":"2019-03-03T15:15:59.601Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lanre Adelowo","url":"lanre-adelowo","email":"adelowomailbox@gmail.com","twitter":"https://twitter.com/alanreadelowo","github":"https://github.com/adelowo","guestWriter":true}}],"projectRepo":"https://github.com/adelowo/pusher-channel-discovery","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-12-11","description":"Learn how to use Pusher Channels to support service discovery when creating a microservices architecture. This tutorial works through a practical example using two Docker services, one using Node and one in Golang. ","prerequisite":"You will need Node, Golang 1.10+ and Docker set up on your machine.","content":"In this tutorial, we will be implementing a service discovery using Pusher Channels. To demonstrate this, we will be building two services - both of them a unique ID generator. They will be implemented in both NodeJS and Golang. This is done so as to depict a real-life microservices scenario where services are built in multiple languages. In our use-case here, the NodeJS application will be version 1 while the second iteration will be in Golang. As said earlier, both of them are unique ID generators and basically all they do is generate a `UUID`. The Node service generates a UUID V5 while the Golang service will generate a UUID v4.\n\nMicroservices are an interesting pattern but they usually present a new class of problems. An interesting problem this pattern presents is communication between the bulk of services that make up the entire mesh. These services are run in multiple replicas - depending on scalability needs - and dynamic environments. Take Kubernetes as an example, deploying a container might run in server A, stopping and running it again might deploy it to server. For both of them, you’d obviously get an IP address but then again, you cannot guarantee it won’t change. At this rate, it is clear maintaining a hardcoded list of all service targets wouldn’t make any sense.\n\nEven if we assume Kubernetes is not used and the application is being deployed pre Docker style - a single host, multiple instances. It is still hard to keep an updated list of all running instances. Just try to think of having to keep track of all ports you have assigned to an instance and the pain of having to update them manually.\n\nTo solve the communication problem within microservices, a pattern called service discovery emerged. With service discovery, each service when started would inform a central registry of its reachable IP address (`8.8.8.8`) and port (`53`). Also whenever it is being shut down, maybe as a result of `CTRL+C`, it deregisters itself from the registry. Popular implementations of service discovery include [Consul](https://consul.io) and [etcd](https://coreos.com/etcd/).\n\nWe will also build another service - the API gateway - which will listen to connections from our unique ID generator services. This API gateway will be the public facing program as it will proxy request to an available instance of services registered with Pusher Channels.\n\n\n## Prerequisites\n- Node\n- Golang `\u003e= 1.10`. \n- Docker. We will be using this to run multiple copies of the services.\n- A Pusher Channels application. [Create one here.](https://pusher.com/channels)\n\n\n## Pusher Channels registry\n\nStandards rule literally everything and we need to define the data structure our registry requires. Below is an example of what needs to be sent to the channel in order to successfully process its inclusion as a service backend.\n\n```\n    {\n      \"prefix\": \"/v1\", // App prefix to use for routing to this service\n      \"port\": 3000, // The port this service is running on\n      \"address\": \"172.17.0.4\", // The IP address where this service is reachable at.\n    }\n```\n\n## Directory structure\n\nHere is the directory structure you will need to create to follow this tutorial:\n\n── `$GOPATH/src/github.com/pusher-tutorial/pusher-channel-discovery`\n  ├── golang\n  ├── nodejs\n  ├── nodejs-api-gateway\n\n\n\n## Building the NodeJS service\n\nThis backend will make use of the Channels server SDK for Node. We will use it to send a `register` event to the central registry, in our case a channel.\n\nTo get started, create a folder called `nodejs`. This should match the directory structure above.  In that project directory, you need to create another file called `package.json`. The `package.json` file should have the following contents:\n\n``` json\n    // pusher-channel-discovery/nodejs/package.json\n    {\n      \"name\": \"nodejs-channel-discovery\",\n      \"version\": \"1.0.0\",\n      \"description\": \"Using pusher channel as a service registry\",\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.3\",\n        \"express\": \"^4.16.4\",\n        \"internal-ip\": \"^3.0.1\",\n        \"pusher\": \"^2.1.3\",\n        \"uuid\": \"^3.3.2\"\n      },\n      \"devDependencies\": {\n        \"nodemon\": \"^1.18.6\"\n      }\n    }\n```\n\nSwitch to your terminal app and navigate to the directory you created above - `cd path/to/nodejs-channel-discovery`. You then need to run the following command to install the dependencies needed to build this service.\n\n```\n    $ npm install\n```\n\nNext, create an `index.js` file in the root of the folder you created earlier and paste the contents below into it.\n\n``` javascript\n    // pusher-channel-discovery/nodejs/index.js\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const os = require('os');\n    const uuidv5 = require('uuid/v5');\n    const uuidv4 = require('uuid/v4');\n    const Pusher = require('pusher');\n    const internalIp = require('internal-ip');\n    \n    const app = express();\n    const hostName = os.hostname();\n    const port = process.env.PORT || 3000;\n    \n    let pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      encrypted: process.env.PUSHER_APP_SECURE,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n    });\n    \n    let svc = {};\n    \n    internalIp\n      .v4()\n      .then(ip =\u003e {\n        svc = {\n          prefix: '/v1',\n          port: port,\n          address: ip,\n        };\n    \n        console.log('Registering service');\n    \n        pusher.trigger('mapped-discovery', 'register', svc);\n      })\n      .catch(err =\u003e {\n        console.log(err);\n        process.exit();\n      });\n    \n    process.stdin.resume();\n    \n    process.on('SIGINT', () =\u003e {\n    \n      console.log('Deregistering service... ');\n    \n      // Send an exit signal on shutdown\n      pusher.trigger('mapped-discovery', 'exit', svc);\n    \n      // Timeout to make sure the signal sent to\n      // Pusher was successful before shutting down\n      setTimeout(() =\u003e {\n        process.exit();\n      }, 1000);\n    });\n    \n    app.use(bodyParser.json());\n    \n    app.use(function(req, res, next) {\n      // Uniquely identify the server that processed the request\n      res.header('X-Server', hostName);\n      next();\n    });\n    \n    app.get('/', function(req, res) {\n      res.status(200).send({ service: 'ID generator' });  \n    });\n    \n    app.get('/health', function(req, res) {\n      res.status(200).send({ status: 'ok' });\n    });\n    \n    app.post('/generate', function(req, res) {\n    \n      const identifier = req.body.id;\n      if (identifier === undefined) {\n        res.status(400).send({\n          message: 'Please provide an ID to use to generate your UUID V5',\n        });\n        return;\n      }\n    \n      if (identifier.length === 0) {\n        res.status(400).send({\n          message: 'Please provide an ID to use to generate your UUID V5',\n        });\n        return;\n      }\n    \n      res.status(200).send({\n        id: uuidv5(identifier, uuidv5.URL),\n        timestamp: new Date().getTime(),\n        message: 'UUID was successfully generated',\n      });\n    });\n    \n    app.listen(port, function() {\n      console.log(`Service is running at ${port} at ${hostName}`);\n    });\n```\n\nIn the above code, three endpoints were created:\n\n- `/` - This is the root handler of the application. This endpoint returns basic information of the service.\n- `/health` - This endpoint allows the application to notify others about its internal state.\n- `/generate` - This endpoint is meant for the generation of a UUID. It generates a version 5 UUID. This endpoint expects an `ID` from the caller which it then uses to compute the UUID.\n\nSince we will be needing to run multiple copies of this service, let's set it up to run as a container. To do that, we create a `Dockerfile`. Create the file and paste the content below into the file.\n\n```\n    # pusher-channel-discovery/nodejs/Dockerfile\n    FROM node:10\n    COPY . ./\n    RUN npm install\n    CMD [\"node\", \".\"]\n```\n\nYou need to save the file and build the image for this service. To do that, you should run the following command. Please note that this has to be done in the root of the `nodejs` directory.\n\n```\n    $ docker build -t pusher-channel-node .\n```\n\nYou can then run the service. But to do that, you need to use the credentials from the Pusher Channels application you created at the start of the tutorial.\n\n```\n    $ docker run -p 127.0.0.1:3000:3000 -e PUSHER_APP_ID=\"XXXX\" -e PUSHER_APP_KEY=\"XXXXXXX\" -e PUSHER_APP_SECRET=\"XXXXXX\" -e PUSHER_APP_CLUSTER=\"eu\" -e PUSHER_APP_SECURE=\"1\" pusher-channel-node\n```\n\nThe above specifies that we want the service to be available on our machine at localhost:3000. You can test the service works as expected by trying to access `http://localhost:3000/generate` with a POST request that has the following as it's body {\"id\": \"some random string\"}. An example with curl is shown below:\n\n```\n    $ curl -d '{\"id\" : \"3jhbj333\"}' -H \"Content-Type: application/json\" -X POST http://localhost:3000/generate\n```\n\n## Building the Golang service\n\nWe have decided to build another iteration of our Unique ID generator since the first version written in Node used UUID version 5 and we would prefer to use something much more random. UUID 5 is basically a way of hashing some value into 128 bits. So if you try generating multiple UUIDs with the same `id` value in your request, you keep on getting the same UUID. While that behavior is easy to change, let's assume we have tons of users and production code relying on that service already, we don’t want to change behavior but wouldn’t mind doing it right again. Hence the version two rewrite that uses UUID 4, which ensures complete randomness.\n\nTo start with, you need to create a directory that houses this service. You can go ahead to create one called `golang`. This directory needs to be created in a directory in accordance to the structure laid out at the beginning of the article .\n\nYou will also need to run `go mod init` in the newly created directory. This will make the project a [Golang module](https://github.com/golang/go/wiki/Modules#modules).\n\nThe first set of actions we need to perform is connecting to Pusher Channels API, so we need a Go SDK. That can be done by the following command:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\nWe need to create a file called `registry.go`. Since we also have to properly structure the code into packages, it should be in a directory called `registry`. After which you should paste the following code into the `registry.go` file.\n\n\n``` go\n    // pusher-channel-discovery/golang/registry/registry.go\n    \n    package registry\n    \n    import (\n            \"errors\"\n            \"net\"\n    \n            pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    type Event string\n    \n    const (\n            Register Event = \"register\"\n            Exit           = \"exit\"\n    )\n    \n    func (e Event) String() string {\n            switch e {\n            case Register:\n                    return string(Register)\n            case Exit:\n                    return string(Exit)\n            default:\n                    return \"\"\n            }\n    }\n    \n    const (\n            Channel = \"mapped-discovery\"\n    )\n    \n    type Registrar struct {\n            pusher *pusher.Client\n    }\n    \n    type Service struct {\n            // The path that is links to this service\n            Prefix string `json:\"prefix\"`\n    \n            // Public IP of the host running this service\n            Address net.IP `json:\"address\"`\n    \n            Port uint `json:\"port\"`\n    }\n    \n    func (s Service) Validate() error {\n            if s.Address == nil {\n                    return errors.New(\"addr is nil\")\n            }\n    \n            if s.Port \u003c= 0 {\n                    return errors.New(\"invalid HTTP port\")\n            }\n    \n            return nil\n    }\n    \n    func New(client *pusher.Client) *Registrar {\n            return \u0026Registrar{client}\n    }\n    \n    func (r *Registrar) do(svc Service, event Event) error {\n            if err := svc.Validate(); err != nil {\n                    return err\n            }\n    \n            _, err := r.pusher.Trigger(Channel, event.String(), svc)\n            return err\n    \n    }\n    \n    func (r *Registrar) Register(svc Service) error {\n            return r.do(svc, Register)\n    }\n    \n    func (r *Registrar) DeRegister(svc Service) error {\n            return r.do(svc, Exit)\n    }\n    \n    func (r *Registrar) IP() (net.IP, error) {\n            addrs, err := net.InterfaceAddrs()\n            if err != nil {\n                    return nil, err\n            }\n    \n            for _, addr := range addrs {\n                    if ipnet, ok := addr.(*net.IPNet); ok \u0026\u0026 ipnet.IP.IsGlobalUnicast() {\n                            if ipnet.IP.To4() != nil || ipnet.IP.To16() != nil {\n                                    return ipnet.IP, nil\n                            }\n                    }\n            }\n    \n            return nil, nil\n    }\n```\n\nThat seems to be a lot, so here is a breakdown of what we have done above:\n\n- Defined multiple data types to conform to the channel registry structure defined above.\n- Implemented a `Registrar` type that triggers event to a channel. You can find those in the `Register` and `DeRegister` methods.\n\nOur main goal is to generate unique IDs, we need to build an `HTTP` API that will allow for that. \n\nWe would be needing an `HTTP` router to help build our endpoints. For this, we would need a library called `chi`. To install it, run `go get github.com/go-chi/chi`. Since we would also be needing to generate unique IDs, it is safe to also install a UUID library. You will need to run `go get github.com/google/uuid`.\n\nCreate a folder called `transport/web`, and create an `http.go` file inside the newly created folder. Paste the code below in the `http.go` file:\n\n``` go\n    // pusher-channel-discovery/golang/transport/web/http.go\n    package web\n    \n    import (\n            \"encoding/json\"\n            \"fmt\"\n            \"net/http\"\n    \n            \"github.com/go-chi/chi\"\n            \"github.com/google/uuid\"\n    )\n    \n    type Server struct {\n            HostName string\n            Port     uint\n    }\n    \n    func Start(srv *Server) error {\n    \n            mux := chi.NewMux()\n    \n            mux.Use(func(next http.Handler) http.Handler {\n                    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n                            w.Header().Set(\"Content-Type\", \"application/json\")\n                            w.Header().Set(\"X-Server\", srv.HostName)\n    \n                            next.ServeHTTP(w, r)\n                    })\n            })\n    \n            mux.Get(\"/health\", func(w http.ResponseWriter, r *http.Request) {\n                    defer r.Body.Close()\n    \n                    w.WriteHeader(http.StatusOK)\n                    w.Write([]byte(`{ 'status' : 'OK' }`))\n            })\n    \n            mux.Post(\"/generate\", func(w http.ResponseWriter, r *http.Request) {\n    \n                    defer r.Body.Close()\n    \n                    var response struct {\n                            Status int64     `json:\"status\"`\n                            ID     uuid.UUID `json:\"id\"`\n                    }\n    \n                    response.Status = 1\n                    response.ID = uuid.New()\n    \n                    w.WriteHeader(http.StatusOK)\n                    json.NewEncoder(w).Encode(\u0026response)\n            })\n    \n            return http.ListenAndServe(fmt.Sprintf(\":%d\", srv.Port), mux)\n    }\n```\n\nIn the code above, we have created two endpoints:\n\n\n- `/health` - This endpoint allows the application to notify others about its internal state.\n- `/generate` - This endpoint is responsible for creating the UUID. Unlike the first iteration written in NodeJS, it doesn't require any ID of any sort as it generates purely random UUIDs.\n\nTo tie up the registry and the `HTTP` API, we need to make our application able to run as a command line app. To do that, create a file called `main.go` in the `cmd` folder of the root application. You need to paste the following code in the `main.go` file:\n\n``` go\n    // pusher-channel-discovery/golang/cmd/main.go\n    package main\n    \n    import (\n            \"errors\"\n            \"flag\"\n            \"fmt\"\n            \"log\"\n            \"os\"\n            \"os/signal\"\n            \"syscall\"\n    \n            \"github.com/adelowo/pusher-channel-discovery-go/registry\"\n            \"github.com/adelowo/pusher-channel-discovery-go/transport/web\"\n            pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    func main() {\n    \n            shutDownChan := make(chan os.Signal)\n            signal.Notify(shutDownChan, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT)\n    \n            port := flag.Uint(\"http.port\", 3000, \"Port to run HTTP server at\")\n    \n            flag.Parse()\n    \n            appID := os.Getenv(\"PUSHER_APP_ID\")\n            appKey := os.Getenv(\"PUSHER_APP_KEY\")\n            appSecret := os.Getenv(\"PUSHER_APP_SECRET\")\n            appCluster := os.Getenv(\"PUSHER_APP_CLUSTER\")\n            appIsSecure := os.Getenv(\"PUSHER_APP_SECURE\")\n    \n            var isSecure bool\n            if appIsSecure == \"1\" {\n                    isSecure = true\n            }\n    \n            client := \u0026pusher.Client{\n                    AppId:   appID,\n                    Key:     appKey,\n                    Secret:  appSecret,\n                    Cluster: appCluster,\n                    Secure:  isSecure,\n            }\n    \n            reg := registry.New(client)\n    \n            ip, err := reg.IP()\n            if err != nil {\n                    log.Fatalf(\"could not fetch public IP address... %v\", err)\n            }\n    \n            hostName, err := os.Hostname()\n            if err != nil {\n                    log.Fatalf(\"could not fetch host name... %v\", err)\n            }\n    \n            svc := registry.Service{\n                    Prefix:  \"/v2\",\n                    Address: ip,\n                    Port:    *port,\n            }\n    \n            if err := reg.Register(svc); err != nil {\n                    log.Fatalf(\"Could not register service... %v\", err)\n            }\n    \n            var errs = make(chan error, 3)\n            \n            go func() {\n                    srv := \u0026web.Server{\n                            HostName: hostName,\n                            Port:     *port,\n                    }\n    \n                    errs \u003c- web.Start(srv)\n            }()\n    \n            go func() {\n                    \u003c-shutDownChan\n                    errs \u003c- errors.New(\"Application is shutting down\")\n            }()\n            \n            fmt.Println(\u003c-errs)\n            reg.DeRegister(svc)\n    }\n```\n\nSince we need to run multiple copies of this service too, it would make total sense to run it in a container. To build a container image for this service, create a `Dockerfile` in the root of the project and paste the following code in it:\n\n```\n    ## pusher-channel-discovery/golang/Dockerfile\n    FROM golang:1.11 as build-env\n    \n    WORKDIR /go/src/github.com/pusher-tutorial/pusher-channel-discovery-go\n    ADD . /go/src/github.com/pusher-tutorial/pusher-channel-discovery-go\n    \n    ENV GO111MODULE=on\n    \n    RUN go mod download\n    RUN go mod verify\n    RUN go install ./cmd\n    \n    ## A better scratch image\n    ## See https://github.com/GoogleContainerTools/distroless\n    FROM gcr.io/distroless/base\n    COPY --from=build-env /go/bin/cmd /\n    CMD [\"/cmd\"]\n```\n\nWe need to build this image, so you need to run the following command in your terminal:\n\n```\n    $ export GO111MODULE=on\n    $ go mod tidy\n    $ docker build -t pusher-channel-go .\n```\n\nThis will build the image and make it available to be run later on when we choose. Let's run it now:\n\n```\n    $ docker run -p 127.0.0.1:2000:3000 -e PUSHER_APP_ID=\"XXXX\" -e PUSHER_APP_KEY=\"XXXXX\" -e PUSHER_APP_SECRET=\"XXXX\" -e PUSHER_APP_CLUSTER=\"eu\" -e PUSHER_APP_SECURE=\"1\" pusher-channel-go\n```\n\nYou can verify the service is up and running by making a `POST` request to `http://localhost:2000/generate`. An example with `curl` is given below:\n\n```\n    $ curl -X POST localhost:2000/generate\n```\n\n## API gateway\n\nAn API gateway is an application that provides a single entry point for a selected group of microservices. This plays hand in hand with service registration as it needs to be able to pull up information about those microservices so as to proxy requests to them. This part is called service discovery. You can read more about this pattern [here](https://microservices.io/patterns/apigateway.html).\n\nWe will implement this in NodeJS as we assume it already existed when we had only the first ID generator service. What we are building here is basically a reverse proxy. We subscribe to events published by the services we have built above and include the service in the routing table. Whenever we receive a request, we interpret the URL to determine what service is being requested. We use the `prefix` property defined above - in Pusher Channels registry - to achieve this.\n\nStill in accordance with the directory structure laid out at the beginning of this tutorial, we need to create a new folder called `nodejs-api-gateway`. Inside that folder, we need a `package.json` file to define our dependencies. The following contents should be pasted inside the `package.json` file:\n\n``` json\n    // pusher-channels-discovery/nodejs-api-gateway/package.json\n    {\n      \"name\": \"pusher-channels-api-gateway\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"pusher-js\": \"^4.3.1\",\n        \"redbird\": \"^0.8.0\"\n      }\n    }\n```\n\nTo install the dependencies declared above, you need to run:\n\n```\n    $ npm install\n```\n\nWe then proceed to implement the proxy. We will use a node package called Redbird which is an awesome reverse proxy. You need to create an `index.js` file and it should have the following code as its contents:\n\n``` javascript\n    // pusher-channels-discovery/nodejs-api-gateway/index.js\n    \n    const port = process.env.PORT || 1500;\n    const domain = process.env.DOMAIN || `localhost:${port}`;\n    \n    const proxy = require('redbird')({ port: port });\n    const Pusher = require('pusher-js');\n    \n    const pusherSocket = new Pusher(process.env.PUSHER_APP_KEY, {\n      forceTLS: process.env.PUSHER_APP_SECURE === '1' ? true : false,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n    });\n    \n    const channel = pusherSocket.subscribe('mapped-discovery');\n    \n    channel.bind('register', data =\u003e {\n      proxy.register(\n        `${domain}${data.prefix}`,\n        `http://${data.address}:${data.port}`\n      );\n    });\n    \n    channel.bind('exit', data =\u003e {\n      proxy.unregister(\n        `${domain}${data.prefix}`,\n        `http://${data.address}:${data.port}`\n      );\n    });\n```\n\nHere is a breakdown of what we have implemented above:\n\n\n- We define a domain constant. This defaults to `localhost: PORT` if the `DOMAIN` environmental value is not available.\n- We create a connection to Pusher channels and subscribe to the `mapped-discovery` channel.\n- We then bind a callback the `register` event. The callback picks out some critical data from the data it has received and uses that to update its routing table.\n- We also do the above for the `exit` channel. But in the instance, we remove the service from the routing table.\n\n\n\u003e The reverse proxy supports load-balancing to multiple instances of our services as we will see shortly\n\nAs with other services we have built, this will also have Docker support. Create a `Dockerfile` and paste the following contents inside it:\n\n```\n    // pusher-channels-discovery/nodejs-api-gateway/Dockerfile\n    FROM node:10\n    COPY . ./\n    RUN npm install\n    CMD [\"node\", \".\"]\n```\n\nYou also need to build the container image by running the following command in a terminal:\n\n```\n    $ docker build -t pusher-channel-api-gateway .\n```\n\n## Putting it all together\n\nYou need to run the API gateway first before starting up every other service. State is not persisted and it will only listen to connections from microservices that are started after its last run.  To start the API gateway container, run:\n\n```\n    $ docker run -p 127.0.0.1:1500:1500 -e PUSHER_APP_KEY=\"XXXXX\" -e PUSHER_APP_SECURE=\"1\" -e PUSHER_APP_CLUSTER=\"eu\" pusher-channel-api-gateway\n```\n\nYou then need to run the container for the service written in NodeJS by running the following command in your terminal:\n\n```\n    $ docker run -e PUSHER_APP_ID=\"XXXX\" -e PUSHER_APP_KEY=\"XXXXXXX\" -e PUSHER_APP_SECRET=\"XXXXXX\" -e PUSHER_APP_CLUSTER=\"eu\" -e PUSHER_APP_SECURE=\"1\" pusher-channel-node\n```\n\nKeep an eye on the terminal window where you are running the API gateway, once the NodeJS service comes up, there should be information in the terminal. It should be in the following form:\n\n```\n    {\"name\":\"redbird\",\"hostname\":\"88c1cea2c10c\",\"pid\":1,\"level\":30,\"from\":{\"protocol\":\"http:\",\"slashes\":true,\"auth\":null,\"host\":\"localhost:1500\",\"port\":\"1500\",\"hostname\":\"localhost\",\"hash\":null,\"search\":null,\"query\":null,\"pathname\":\"/v1\",\"path\":\"/v1\",\"href\":\"http://localhost:1500/v1\"},\"to\":{\"protocol\":\"http:\",\"slashes\":true,\"auth\":null,\"host\":\"172.17.0.3:3000\",\"port\":\"3000\",\"hostname\":\"172.17.0.3\",\"hash\":null,\"search\":null,\"query\":null,\"pathname\":\"/\",\"path\":\"/\",\"href\":\"http://172.17.0.3:3000/\",\"useTargetHostHeader\":false},\"msg\":\"Registered a new route\",\"time\":\"2018-11-11T20:08:02.632Z\",\"v\":0}\n```\n\n\u003e Shutting down the NodeJS service should produce something similar but with an **Unregistered a route** message.\n\nYou can access the Node service by sending a request to the API gateway, `http://localhost:1500/v1/generate` as previously shown. Why the `v1`? If you look at the part of the code that sends information to Pusher Channels, you will notice it has `/v1` in its prefix property. If you take a look at the Golang implementation, you will find its prefix property with `/v2`, not `/v1`. What this means is all requests sent to the API gateway that starts from `v1` would be proxied to the NodeJS service while those with `v2` would be proxied to the Golang service.\nTo run the Golang service, we need to run the following command:\n\n```\n    $ docker run -p 2000:3000 -e PUSHER_APP_ID=\"XXXX\" -e PUSHER_APP_KEY=\"XXXXX\" -e PUSHER_APP_SECRET=\"XXXX\" -e PUSHER_APP_CLUSTER=\"eu\" -e PUSHER_APP_SECURE=\"1\" pusher-channel-go\n```\n\nAll that is left for us to do now is to test that our requests are being proxied to the right services. I will be showing examples with `curl`.\n\n```\n    $ # for v1 \n    $ curl -i -d '{\"id\" : \"3jhbj333\"}' -H \"Content-Type: application/json\" -X POST http://localhost:1500/v1/generate\n    $ # for v2\n    $ curl -i -X POST localhost:1500/v2/generate\n```\n\nI have included the `-i` option as it will be useful for us to inspect the `X-Server` headers to also validate the request is being served by the right service. It will also be useful when we need to validate that requests are being proxied among multiple instances of a service. You need to run multiple instances of the NodeJS service, just open two or three terminal windows where you run the above docker command in each of them.\n\nOnce done, you should make requests to the API gateway and watch the value of `X-Server` change as requests are proxied in a round robin manner to all available instances.\n\n```\n    $ curl -i -d '{\"id\" : \"3jhbj333\"}' -H \"Content-Type: application/json\" -X POST http://localhost:1500/v1/generate\n```\n\nYou can also try shutting down one or more instances of the available services and see what happens. Spoiler, requests are no longer proxied to them.\n\n\n## Conclusion\n\nIn this tutorial, we have leveraged Pusher Channels to implement service discovery and registration when dealing with microservices.\n\nYou can find the source code to this tutorial on [GitHub](https://github.com/adelowo/pusher-channel-discovery).","metaTitle":"Service discovery in a microservice architecture","metaDescription":"Learn how to use Pusher Channels to support service discovery when creating a microservices architecture. This tutorial works through a practical example using two Docker services, one using Node and one in Golang. "}}],"defaultValue":"Go","queryType":"tag","pages":3,"route":"/tutorials","query":{"tag":"Go"}}},"page":"/tutorials","query":{"tag":"Go"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Go by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:19:42 GMT -->
</html>