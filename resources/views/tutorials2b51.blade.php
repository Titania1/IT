<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=JavaScript&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:30:30 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">224</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; JavaScript</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials512c.html?product=Beams&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials0e67.html?product=Channels" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#C223CE"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; JavaScript"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/instagram-clone-ionic-part-1.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">CSS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">TypeScript</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an Instagram clone with Ionic: Part 1 - Creating the interface</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functional...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/transactional-emails-react-sendgrid.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">CSS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Set up realtime monitoring for transactional emails with React and SendGrid</h3><p class="css-k12xad e5jrto45">Transactional emails are automated, realtime messages that are sent to users through email after a specific action has b...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/todo-app-react-native-web.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Expo<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a todo app for iOS, Android and web with react-native-web</h3><p class="css-k12xad e5jrto45">Build a basic todo list app for Android, iOS and web using React Native. Users can add to-dos and see the app update acr...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-analytics-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live analytics dashboard using Go and MongoDB</h3><p class="css-k12xad e5jrto45">Use Go, MongoDB and Pusher Channels to monitor user interactions with your app. Build a simple demo app page and a monit...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/end-to-end-encryption-node.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">End to end encryption in Node.js with Pusher Channels</h3><p class="css-k12xad e5jrto45">Learn how Pusher Channels support varying encryption levels, from public to fully encrypted. Build a simple demo using N...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-countdown-angular.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live subscription count down with Angular</h3><p class="css-k12xad e5jrto45">Use Angular 7, Node and Channels to build a live subscription countdown. The app features two interfaces: a signup dashb...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-multiplayer-quiz-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Gaming<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a live multiplayer quiz app in React Native</h3><p class="css-k12xad e5jrto45">Use React Native and Node to build a live cross-platform quiz app. Admins are able to add questions and start the game. ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/whiteboard-electron-react-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a whiteboard Electron app with React - Part 1: Adding the whiteboard</h3><p class="css-k12xad e5jrto45">In this two-part series, build a whiteboard app using Node, Electron and React. Users will be able to collaborate in rea...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/maze-game-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Gaming<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a two-player maze game with React Native</h3><p class="css-k12xad e5jrto45">Build a two-player maze game for mobile using React Native and Node.js. Users can log in, be matched with an opponent, a...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials013b.html?product=Channels&amp;tag=JavaScript&amp;page=1" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials013b.html?product=Channels&amp;tag=JavaScript&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials2b51.html?product=Channels&amp;tag=JavaScript&amp;page=2" class="css-2wakph edg0byb1">2</a><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialscae0.html?product=Channels&amp;tag=JavaScript&amp;page=3" class="css-za1ua3 edg0byb1">3</a><a href="tutorials4076.html?product=Channels&amp;tag=JavaScript&amp;page=4" class="css-za1ua3 edg0byb1">4</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials959a.html?product=Channels&amp;tag=JavaScript&amp;page=25" class="css-5s6711 edg0byb1">25</a><a href="tutorialscae0.html?product=Channels&amp;tag=JavaScript&amp;page=3" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":224,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5qLnzIl2Fok5bGlUdXlWp0","type":"Entry","createdAt":"2019-06-25T17:51:57.349Z","updatedAt":"2019-06-25T17:51:57.349Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an Instagram clone with Ionic: Part 1 - Creating the interface","url":"instagram-clone-ionic-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/ionic-insta-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}}],"reviewDate":"2019-06-25","description":"This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functionalities. In part one, create a simple interface for your Instagram clone and a running demo with Ionic.","prerequisite":"You will need Node 10+, Node Package Manager 6+ and Cordova 8+ installed on your machine.","content":"In this tutorial series, we are going to do a deep dive into how to make a simple Instagram clone with Ionic and add realtime functionalities with Pusher.\n\nYou are likely a part of the billion monthly active users that use Instagram! If you are as curious as I am, you will have given some thought about how it was built. Well, you don’t have to ponder anymore.\n\n## What we’ll build\n\nBy the end of this chapter, you will have created a simple interface for your Instagram clone and have a running demo with Ionic. What you have should look like this:\n\n![instagram-clone-ionic-interface-img1](//images.ctfassets.net/1es3ne0caaid/3x7yO4q3IP6ZCJ1IFDLlnU/bc7a29b062de14f68c1b7a575e3fc1ef/instagram-clone-ionic-interface-img1.gif)\n\n## Prerequisites\n\nTo follow through this series adequately, you’ll need the following:\n\n- Basic knowledge of JavaScript\n- [Node](http://www.nodejs.org) installed on your machine (v10.13.0)\n- [Node Package Manager](https://www.npmjs.com/) installed on your machine (v 6.4.1)\n- [Cordova](https://cordova.apache.org/) installed on your machine (v 8.1.2)\n\n\n## Getting started\n\nIonic is a framework that allows you to build native and progressive web applications using web technologies you’re already familiar with. The best part is that you have one code base for your native applications and the applications are written in Angular a framework that has a very low learning curve. So, you no longer need to know how to write Swift and Kotlin before you can build native applications anymore. To get started, you first need to install the Ionic CLI on your machine.\n\n```\n    npm install -g ionic@3.9.2\n```\n\n\u003e Ensure you have the specified version installed\n\nAfter your installation is complete, go ahead and create a new starter project using the command:\n\n```\n    ionic start instagram-ionic tabs\n```\n\n\u003e When asked to integrate the application with Cordova select `yes`.\n\nThis creates a starter project with a simple tabbed interface. Now, run your application, using the command:\n\n```\n    ionic serve\n```\n\nNavigate to `localhost:8100` on your browser and you get the following view: \n\n![instagram-clone-ionic-interface-img2](//images.ctfassets.net/1es3ne0caaid/yEfoiZ5bsj6CvcJpuC394/b30ba11f8fc7460b9b3fafd196db6f9f/instagram-clone-ionic-interface-img2.png)\n\nThis means that Ionic generates the sample tabs when creating the starter application. Modify your `tabs.html` and `tabs.ts` to look as follows: \n\n```typescript\n    \u003c!-- src/pages/tabs/tabs.html --\u003e\n    \n    \u003cion-tabs\u003e\n      \u003cion-tab [root]=\"tab1Root\" tabTitle=\"Home\" tabIcon=\"home\"\u003e\u003c/ion-tab\u003e\n    \u003c/ion-tabs\u003e\n\n\n\n    // src/pages/tabs/tab.ts\n    \n    import { Component } from '@angular/core';\n    import { HomePage } from '../home/home';\n    @Component({\n      templateUrl: 'tabs.html'\n    })\n    export class TabsPage {\n      tab1Root = HomePage;\n      constructor() {\n      }\n    }\n```\n\nThis makes sure there is only one tab in our application which is the homepage and that will be the first page.\n\n\n\u003e We will look at how to create the homepage later on in this tutorial\n\n\n## Splitting the application into pages\n\nWith Ionic, your application is split into pages. You can create as many pages as you like and these are the views your user interacts with. You can display different pages to users when they interact with your application.\n\nFor this demo, we will have the following pages:\n\n- Home page - displays recent posts for the user to view.\n- Profile page - displays more details about a particular user.\n- Comment page - displays comments made by different users on a particular page.\n\nTo create a new page in Ionic, you run the command:\n\n\n    ionic generate page \u003cname-of-page\u003e\n\n### Home page\nThe homepage will be responsible for displaying users posts when the application launches. Ionic automatically creates a home page by default so you can skip this command:\n\n```\n    ionic generate page Home\n```\n\nThis command stores the new page in the `src/pages` directory. Ideally, after you create a page, you declare the page and add it as an entry component in the `app.module.ts`. Since the homepage is created by default by Ionic, you don’t need to do it for the homepage.\n\n```typescript\n    // src/app/app.module.ts\n    // other imports\n    import { HomePage } from '../pages/home/home';\n    @NgModule({\n      declarations: [\n        MyApp,\n        HomePage,\n        TabsPage,\n      ],\n      imports: [...],\n      bootstrap: [IonicApp],\n      entryComponents: [\n        MyApp,\n        HomePage,\n        TabsPage,\n      ],\n      providers: [\n        ...  \n      ]\n    })\n    export class AppModule {}\n```\n\n\u003e You will realize that the `HomePage` has already been added because Ionic created the page by default when generating the starter application.\n\nNow, we want the homepage to display posts. Ionic comes built in with some wonderful UI components with some preset styling and to display posts, let’s use `Ionic Cards`. Update your `home.html` to look like this:\n\n```html\n    \u003c!-- src/pages/home.html --\u003e\n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003eInstagram Clone\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \u003cion-content\u003e\n      \u003c!-- this is where the posts will be --\u003e\n      \u003cion-card class=\"single-post-home\"\u003e\n        \u003cion-item\u003e\n          \u003cion-avatar item-start\u003e\n            \u003cimg src=\"https://res.cloudinary.com/og-tech/image/upload/s--Ivs1sp-J--/c_scale,w_100/v1529311900/og_icon.jpg\"\u003e\n          \u003c/ion-avatar\u003e\n          \u003ch2\u003ecapt.og\u003c/h2\u003e\n        \u003c/ion-item\u003e\n        \u003cimg src=\"https://res.cloudinary.com/og-tech/image/upload/q_40/v1506850322/blog_g3mexb.jpg\"\u003e\n        \u003cion-card-content\u003e\n          \u003cp\u003eZoned Out 💥\u003c/p\u003e\n        \u003c/ion-card-content\u003e\n        \u003cion-row\u003e\n          \u003cion-col\u003e\n            \u003cbutton ion-button icon-start clear small\u003e\n              \u003cion-icon name=\"heart\"\u003e\u003c/ion-icon\u003e\n              \u003cdiv\u003e12 Likes\u003c/div\u003e\n            \u003c/button\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col\u003e\n            \u003cbutton ion-button icon-start clear small\u003e\n              \u003cion-icon name=\"text\"\u003e\u003c/ion-icon\u003e\n              \u003cdiv\u003e4 Comments\u003c/div\u003e\n            \u003c/button\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n      \u003c/ion-card\u003e\n      \n      \u003cion-fab bottom right\u003e\n        \u003cbutton ion-fab mini\u003e\u003cion-icon name=\"add\"\u003e\u003c/ion-icon\u003e\u003c/button\u003e\n      \u003c/ion-fab\u003e\n    \u003c/ion-content\u003e\n```\n\nThe page also has the following styling:\n\n```css\n    # src/pages/home.scss\n    \n    .single-post-home{\n        margin-left: 0px;\n        margin-right: 0px;\n        margin-bottom: 10px;\n        padding-top: 10px;\n        width:100%;\n        box-shadow: 1px 1px rgba(160, 160, 160, 0.453);\n    }\n```\n\nNow, when you test your application, using `ionic serve`, you have the following:\n\n\n\u003e Right now, none of the action buttons in the application are functional, but as we go through the series, we will see how to bring it all together.\n\n![instagram-clone-ionic-interface-img3](//images.ctfassets.net/1es3ne0caaid/3lUlr7hCnOYAUxTjQ0XBbB/71a5bf287839f39dba7c52caa6be7217/instagram-clone-ionic-interface-img3.png)\n\nIf this was a very bare bones demo application, this could pass for your complete application but, we need to add some extra pages to the demo before we call it a day. To do this, we will add the upcoming pages.\n\n### Profile page\n\n\n![instagram-clone-ionic-interface-img4](//images.ctfassets.net/1es3ne0caaid/6gnDKhOp1vD7ScFAKs4mVs/03828969352533b288193c278eed7382/instagram-clone-ionic-interface-img4.png)\n\nWhen interacting with the application and a user’s name or avatar is clicked, the application redirects to the profile page of the user. The profile page will show a short bio of the user, users follower count, and posts made by the user. To create the profile page, run the command:\n\n```\n    ionic generate page Profile\n```\n\n![instagram-clone-ionic-interface-img5](//images.ctfassets.net/1es3ne0caaid/6TSE7QZe9gNigPz8Z82iOh/7fa408015fcd5bb5c15a12f50939972d/instagram-clone-ionic-interface-img5.png)\n\nThen, register the profile page:\n\n```typescript\n    // src/app/app.module.ts\n    // other imports\n    import { ProfilePage } from '../pages/profile/profile';\n    @NgModule({\n      declarations: [\n        MyApp,\n        HomePage,\n        TabsPage,\n        ProfilePage\n      ],\n      imports: [...],\n      bootstrap: [IonicApp],\n      entryComponents: [\n        MyApp,\n        HomePage,\n        TabsPage,\n        ProfilePage\n      ],\n      providers: [\n        ...  \n      ]\n    })\n    export class AppModule {}\n```\n\nAfter this is done, update the HTML for the profile page to look like this:\n\n```html\n    \u003c!-- src/pages/profile/profile.html --\u003e\n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003ecapt.og\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \n    \u003cion-content\u003e\n      \u003cion-grid class=\"profile-intro\"\u003e\n        \u003cion-row\u003e\n          \u003cion-col col-4\u003e\n            \u003cimg class=\"profile-photo\" src=\"https://res.cloudinary.com/og-tech/image/upload/s--Ivs1sp-J--/c_scale,w_100/v1529311900/og_icon.jpg\"\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col col-8\u003e\n            \u003cdiv class=\"profile-info\"\u003e\n              \u003cdiv class=\"post-count info-square\"\u003e\n                \u003cp\u003e\n                  \u003cstrong\u003e1\u003c/strong\u003e\u003cbr\u003e\n                  \u003cem\u003epost\u003c/em\u003e\n                \u003c/p\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"follower-count info-square\"\u003e\n                \u003cp\u003e\n                  \u003cstrong\u003e1532\u003c/strong\u003e\u003cbr\u003e\n                  \u003cem\u003efollowers\u003c/em\u003e\n                \u003c/p\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"following-count info-square\"\u003e\n                \u003cp\u003e\n                  \u003cstrong\u003e200\u003c/strong\u003e\u003cbr\u003e\n                  \u003cem\u003efollowing\u003c/em\u003e\n                \u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv\u003e\n              \u003cbutton ion-button class=\"follow-button\"\u003eFollow\u003c/button\u003e\n            \u003c/div\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n      \u003c/ion-grid\u003e\n    \n      \u003cdiv class=\"more-details\"\u003e\n        \u003cp class=\"user-name\"\u003e\u003cstrong\u003eOreoluwa Ogundipe\u003c/strong\u003e\u003c/p\u003e\n        \u003cp class=\"user-bio\"\u003eSoftwèrè Engineer\u003c/p\u003e\n      \u003c/div\u003e\n    \n      \u003cion-segment color=\"primary\"\u003e\n        \u003cion-segment-button value=\"posts\" selected\u003e\n          \u003cion-icon name=\"grid\"\u003e\u003c/ion-icon\u003e    \n        \u003c/ion-segment-button\u003e\n        \u003cion-segment-button value=\"tagged\"\u003e\n            \u003cion-icon name=\"contacts\"\u003e\u003c/ion-icon\u003e\n          \u003c/ion-segment-button\u003e\n        \u003cion-segment-button value=\"bookmark\"\u003e\n          \u003cion-icon name=\"bookmark\"\u003e\u003c/ion-icon\u003e\n        \u003c/ion-segment-button\u003e\n      \u003c/ion-segment\u003e\n    \n      \u003cion-grid class=\"image-grid\"\u003e\n        \u003cion-row class=\"single-row\"\u003e\n          \u003cion-col col-4 class=\"single-image\"\u003e\n            \u003cimg height=\"100%\" width=\"100%\" src=\"https://res.cloudinary.com/og-tech/image/upload/q_40/v1506850322/blog_g3mexb.jpg\"\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n      \u003c/ion-grid\u003e\n    \u003c/ion-content\u003e\n```\n\nAlso edit the styling for the page as follows:\n\n```css\n    # src/pages/profile/profile.scss\n    .profile-photo{\n        border-radius:50%;\n        margin-top: 10px;\n        width: 8em !important;\n        height: 8em !important;\n    }\n    \n    .profile-info{\n        display: flex;\n        flex-direction: row;\n        justify-content: space-around;\n        align-items: center;\n        text-align: center;\n    }\n    \n    .info-square{\n        text-align: center;\n    }\n    \n    .follow-button{\n        width:90%;\n        margin: 0px 10px;\n        background-color: #3E99ED;\n    }\n    \n    .more-details{\n        padding-left: 10px;\n    }\n    \n    $segment-button-ios-border-radius: 0px;\n    $segment-button-ios-toolbar-icon-size: 3rem;\n    $segment-button-ios-toolbar-icon-width: 3rem;\n    \n    ion-segment{\n        height: 5rem;\n        border: 1px solid rgba(160, 160, 160, 0.453);\n    }\n    \n    ion-segment-button{\n        border: 0px !important;\n    }\n    \n    .image-grid{\n        padding: 0px;\n        margin: 0px;\n    }\n    \n    .single-row{\n        height: 18rem;\n    }\n    \n    .single-image{\n        padding:0px;\n    }\n```\n\nNow, you may be wondering “wait we haven’t implemented the logic to move from the home page to the profile page”. To do this, we need to trigger the navigation to the next page when the user’s name/avatar is clicked. To do this, update your `home.html` as follows:\n\n```html\n    \u003c!-- src/pages/home/home.html --\u003e\n    \n    \u003cion-content\u003e\n      \u003c!-- this is where the posts will be --\u003e\n      \u003cion-card class=\"single-post-home\"\u003e\n        \u003cion-item (click)=\"toProfilePage()\"\u003e\n          \u003cion-avatar item-start\u003e\n            \u003cimg src=\"https://res.cloudinary.com/og-tech/image/upload/s--Ivs1sp-J--/c_scale,w_100/v1529311900/og_icon.jpg\"\u003e\n          \u003c/ion-avatar\u003e\n          \u003ch2\u003ecapt.og\u003c/h2\u003e\n        \u003c/ion-item\u003e\n        \n        \u003c!-- other card information --\u003e\n      \u003c/ion-card\u003e\n      [...]\n    \u003c/ion-content\u003e\n```\n\nA new `toProfilePage()` function is set to execute when the item is clicked. Let’s take a look at the implementation of the function. Update your `home.ts` file to look like this:\n\n```typescript\n    # src/pages/home/home.ts\n    \n    import { Component } from '@angular/core';\n    import { NavController } from 'ionic-angular';\n    import { ProfilePage } from '../profile/profile';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html'\n    })\n    export class HomePage {\n      constructor(public navCtrl: NavController) {\n      }\n    \n      public toProfilePage(){\n        this.navCtrl.push(ProfilePage);\n      }  \n    }\n```\n\n### Comment page\n\n\n![instagram-clone-ionic-interface-img6](//images.ctfassets.net/1es3ne0caaid/7DLZkzVczkIjW6JjgaplML/7b82f5dafef5751f14b8f9c8e145fd54/instagram-clone-ionic-interface-img6.png)\n\nFinally, to allow for some interactivity among users within our application, let’s create a comment page to allow users to comment on existing posts when the comment button is clicked. To do this, create a new comment page using the command:\n\n```\n    ionic generate page Comment\n```\n\nAfter this is created, you’ll want to add the comment page as an entry module in your `app.module.ts` like this:\n\n```typescript\n    // src/app/app.module.ts\n    // other imports\n    import { CommentPage } from '../pages/comment/comment';\n    @NgModule({\n      declarations: [\n        MyApp,\n        HomePage,\n        TabsPage,\n        ProfilePage,\n        CommentPage,\n      ],\n      imports: [...],\n      bootstrap: [IonicApp],\n      entryComponents: [\n        MyApp,\n        HomePage,\n        TabsPage,\n        ProfilePage,\n        CommentPage\n      ],\n      providers: [\n        ...  \n      ]\n    })\n    export class AppModule {}\n```\n\nAfterwards, we update the HTML markup of the comment page as follows:\n\n```html\n    \u003c!-- src/pages/comment/comment.html --\u003e\n    \u003cion-header\u003e\n    \n      \u003cion-navbar\u003e\n        \u003cion-title\u003eComments\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \n    \u003c/ion-header\u003e\n    \n    \n    \u003cion-content\u003e\n      \u003cion-grid\u003e\n        \u003c!-- first comment grid --\u003e\n        \u003cion-row class=\"post-content\"\u003e\n          \u003cion-col col-2\u003e\n            \u003cion-avatar item-start\u003e\n              \u003cimg class=\"icon-photo\" src=\"https://res.cloudinary.com/og-tech/image/upload/s--Ivs1sp-J--/c_scale,w_100/v1529311900/og_icon.jpg\"\u003e\n            \u003c/ion-avatar\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col col-10\u003e\n            \u003cdiv\u003e\n              \u003c!-- this will contain the main post content --\u003e\n              \u003cp\u003e\u003cstrong\u003ecapt.og\u003c/strong\u003e Zoned Out 💥\u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n    \n        \u003c!-- this rows will represent sample comments --\u003e\n        \u003cion-row class=\"user-comments\"\u003e\n          \u003cion-col col-2\u003e\n            \u003cion-avatar item-start\u003e\n              \u003cimg class=\"icon-photo\" src=\"https://api.adorable.io/avatars/100/big_dawg@adorable.png\"\u003e\n            \u003c/ion-avatar\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col col-10\u003e\n            \u003cdiv\u003e\n              \u003c!-- this will contain the main post content --\u003e\n              \u003cp\u003e\u003cstrong\u003ebig_dawg\u003c/strong\u003e Haha! I feel you bruva! Stay grinding 💯\u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e \n    \n        \u003cion-row class=\"user-comments\"\u003e\n            \u003cion-col col-2\u003e\n              \u003cion-avatar item-start\u003e\n                \u003cimg class=\"icon-photo\" src=\"https://api.adorable.io/avatars/100/broda_shagi@adorable.png\"\u003e\n              \u003c/ion-avatar\u003e\n            \u003c/ion-col\u003e\n            \u003cion-col col-10\u003e\n              \u003cdiv\u003e\n                \u003c!-- this will contain the main post content --\u003e\n                \u003cp\u003e\u003cstrong\u003ebroda_shagi\u003c/strong\u003e Better make sure you write tests 😏\u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/ion-col\u003e\n        \u003c/ion-row\u003e \n      \u003c/ion-grid\u003e\n    \u003c/ion-content\u003e\n    \n    \u003cion-footer\u003e\n      \u003c!-- add the input field fixed to the bottom of the screen --\u003e\n      \u003cion-grid\u003e\n          \u003cion-row class=\"comment-area\"\u003e\n            \u003cion-col col-9\u003e\n              \u003cion-textarea placeholder=\"Enter your comment...\"\u003e\u003c/ion-textarea\u003e\n            \u003c/ion-col\u003e\n            \u003cion-col col-3 \u003e\n              \u003cbutton ion-button class=\"comment-button\"\u003e\n                \u003cion-icon name=\"paper-plane\"\u003e\u003c/ion-icon\u003e\n              \u003c/button\u003e\n            \u003c/ion-col\u003e\n          \u003c/ion-row\u003e\n        \u003c/ion-grid\u003e\n    \u003c/ion-footer\u003e\n```\n\nThe view also has the following styling:\n\n```css\n    # src/pages/commment/comment.scss\n    \n    .icon-photo{\n        border-radius:50% !important;\n        margin-top: 10px;\n        height: 3em !important;\n        width: 3em !important;\n    }\n    \n    .post-content{\n        border-bottom: 1px solid rgba(160, 160, 160, 0.453);\n        padding-bottom: 10px;\n    }\n    \n    .user-comments{\n        padding-bottom: 10px;\n    }\n    \n    .comment-area{\n        border: 1px solid  rgba(160, 160, 160, 0.453);\n        margin: 0px;\n        padding: 0px;\n        border-radius: 5px;\n        width: 100%;\n    }\n    \n    .comment-button{\n        width: 100%;\n        margin: 0px;\n        padding: 0px;\n        height:100%;\n    }\n```    \n\nAfter this, you will need to link the comment page from the home page and you can do this by updating the comment button on the home page like this:\n\n```html\n    \u003c!-- src/pages/home/home.html --\u003e\n    \n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003eInstagram Clone\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \n    \u003cion-content\u003e\n      \u003cion-card class=\"single-post-home\"\u003e\n        [...]\n    \n        \u003cion-row\u003e\n          \u003cion-col\u003e\n            \u003cbutton ion-button icon-start clear small \u003e\n              \u003cion-icon name=\"thumbs-up\"\u003e\u003c/ion-icon\u003e\n              \u003cdiv\u003e12 likes\u003c/div\u003e\n            \u003c/button\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col\u003e\n            \u003cbutton ion-button icon-start clear small (click)=\"toCommentSection()\"\u003e\n              \u003cion-icon name=\"text\"\u003e\u003c/ion-icon\u003e\n              \u003cdiv\u003e2 Comments\u003c/div\u003e\n            \u003c/button\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n    \n      \u003c/ion-card\u003e\n      \n      [...]\n    \u003c/ion-content\u003e\n```    \n\nThe `toCommentSection` function is called when the comment button is clicked. Update your `home.ts` file to look like this:\n\n```typescript\n    # src/pages/home/home.ts\n    \n    import { Component } from '@angular/core';\n    import { NavController } from 'ionic-angular';\n    import { ProfilePage } from '../profile/profile';\n    import { CommentPage } from '../comment/comment';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html'\n    })\n    export class HomePage {\n      post_num_likes = 12;\n      constructor(public navCtrl: NavController) {\n    \n      }\n    \n      public toProfilePage(){\n        this.navCtrl.push(ProfilePage);\n      }\n      \n      public toCommentSection(){\n        this.navCtrl.push(CommentPage);\n      }\n      \n    }\n```\n\n## Conclusion\n\nIn this first part of the series, we have created a simple interface for our Instagram clone which we will build upon in future parts of this series. When you run `ionic serve` and navigate to `localhost:8100` on your browser, you will have an application that looks like this:\n\n\n![Application Interface](https://d2mxuefqeaa7sj.cloudfront.net/s_0B96B0BF1E8CEFF17338A5BE72D0028B64EF4B219F273FA1CA9A3758167F1818_1533069377573_ezgif.com-video-to-gif.gif)\n![instagram-clone-ionic-interface-img1](//images.ctfassets.net/1es3ne0caaid/NIHeHMU0iDf0MlKkzh7GN/44c86d0544e7f169ca73a7e2a299676f/instagram-clone-ionic-interface-img1.gif)\n\nNotice that all the data rendered in this chapter was hard-coded into the application. In the next part, we will take a look at how to serve dynamic content by connecting our application to GraphQL servers using Apollo, and Prisma. Here’s a link to the full [GitHub](https://github.com/oreHGA/ionic-insta-clone) repository.","metaTitle":"Build an Instagram clone with Ionic - Part 1","metaDescription":"This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functionalities. In part one, create a simple interface for your Instagram clone and a running demo with Ionic."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5ygrpt3tD2nQvlcVNg9XDa","type":"Entry","createdAt":"2019-06-20T18:03:01.736Z","updatedAt":"2019-06-20T18:03:01.736Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Set up realtime monitoring for transactional emails with React and SendGrid","url":"transactional-emails-react-sendgrid","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/transactional-email","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2019-06-20","description":"Transactional emails are automated, realtime messages that are sent to users through email after a specific action has been performed on a website or application. In this tutorial you will set up realtime monitoring of transactional emails with SendGrid, using the scenario of a password reset email.","prerequisite":"You also need to have Node 8+ and npm installed on your machine.","content":"Transactional emails are automated, realtime messages that are sent to users through email after a specific action has been performed on a website or application. These emails are often used for a wide range of alerts such as account creation, password resets, order confirmations, invoices, shipping notifications and more.\n\nIt is necessary for every business to have some sort of monitoring service for transactional emails so that you can easily detect when there’s a problem, such as when your emails keep ending up in the spam folder or when critical emails are not being delivered as expected.\n\nIn this tutorial, I’ll show you how to set up realtime monitoring of transactional emails with Pusher Channels and SendGrid. We’ll be using the scenario of a password reset email in this example, but you can easily extend it to fit other use cases.\n\n## Prerequisites\n\nPrevious experience with React and Node is required to be able to follow through with this tutorial. You also need to have [Node](https://nodejs.org/en/download/) (v8 or later) and npm installed on your computer. You can view the instructions for how to install or upgrade your Node install [here](https://www.npmjs.com/get-npm).\n\n## Sign up for Channels\n\nBefore we write any code, let’s sign up for [Pusher Channels](https://pusher.com/channels) and grab the necessary credentials. Once you have signed up, select **Create Channels app** on the sidebar to create a new app. Give your app a name and hit **Create my app**. Once your app is created,  navigate to the **API Keys** tab and take note of the credentials. We’ll make use of it soon.\n\n## Sign up for SendGrid\n\nCreate a free account at [Sendgrid.com](http://sendgrid.com).  Once you're in, select **Settings \u003e API Keys** on the sidebar and then create a new API key. Give your API key a name, and select **Full Access** under **API Key Permissions**.  Once your key is created, keep it in view until after we’ve added it to an `.env` file in the next section.\n\n## Getting started\n\nCreate a new directory for this project and `cd` into it. Next, run `npm init -y` to initialize the project with a `package.json` file. Following that, run the command below to install the dependencies which we’ll be needing to build the server part of the application.\n\n```\n    npm install express cors pusher @sendgrid/mail dotenv --save\n```\n\nOnce the dependencies have been installed, create a new `variables.env` file and populate it with the following contents:\n\n```\n    // variables.env\n    PORT=5000\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n    SENDGRID_API_KEY=\u003cyour sendgrid api key\u003e\n```\n\nNext, create a new `server.js` file and populate it with the following contents:\n\n```javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    const Pusher = require('pusher');\n    const sgMail = require('@sendgrid/mail')\n    \n    sgMail.setApiKey(process.env.SENDGRID_API_KEY)\n    \n    const app = express();\n    \n    app.use(cors())\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      useTLS: true,\n    });\n    \n    app.post(\"/reset-password\", (req, res) =\u003e {\n      const { email } = req.body;\n      const msg = {\n        to: email,\n        from: 'noreply@fictionalservice.com',\n        subject: 'Reset your password',\n        html: `\n          \u003cp\u003eWe recently received a request to reset the password for your account.\n    Simply click the button below to reset your password.\u003c/p\u003e\n          \u003cbutton\u003eReset Password\u003c/button\u003e\n        `,\n      };\n    \n      sgMail.send(msg)\n        .then(() =\u003e {\n          res.send(\"Success!\");\n        })\n        .catch((err) =\u003e {\n          console.error(err);\n          res.status(500).send(\"An error occured\");\n        });\n    });\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nOur server currently has a single route which expects an email address and sends a password reset email message to it via SendGrid’s API.\n\nYou can then start the server by running `node server.js` in the terminal. It should become available on port 5000.\n\n## Set up the application frontend\n\nWe’ll be making use of the [create-react-app](https://github.com/facebook/create-react-app) tool to bootstrap our React app, so make sure you have it installed on your machine. If not, you can install it globally using `npm install -g create-react-app`.\n\nBy now, the `create-react-app` command should be available on your machine. Run the following command in the terminal to create a new React app.\n\n```\n    create-react-app client\n```\n\nAs soon has the command has finished running, `cd` into the `client` directory and run the command below to install the following additional dependencies which we’ll be using to build our application frontend.\n\n```\n    npm install react-router-dom react-toastify axios pusher-js react-spinkit skeleton-css --save\n```\n\nOnce all the dependencies have been installed, run `npm start` to start the development server. The application should be viewable at http://localhost:3000.\n\n## Create the password reset form\n\nOpen up `client/src/index.js` in your editor and change it to look like this:\n\n```javascript\n    // client/src/index.js\n    \n    import React from 'react';\n    import ReactDOM from 'react-dom';\n    import { HashRouter, Route } from 'react-router-dom';\n    import './index.css';\n    import App from './App';\n    import * as serviceWorker from './serviceWorker';\n    \n    ReactDOM.render(\n      \u003cHashRouter\u003e\n        \u003cRoute exact path=\"/\" component={App} /\u003e\n      \u003c/HashRouter\u003e\n    , document.getElementById('root'));\n    \n    serviceWorker.unregister();\n```\n\nNext, modify the contents of `client/src/App.js` as follows:\n\n```javascript\n    // client/src/App.js\n    \n    import React from 'react';\n    import axios from 'axios';\n    import logo from './logo.svg';\n    import Spinner from 'react-spinkit';\n    import { ToastContainer, toast } from 'react-toastify';\n    \n    import 'react-toastify/dist/ReactToastify.min.css';\n    import 'skeleton-css/css/normalize.css';\n    import 'skeleton-css/css/skeleton.css';\n    import './App.css';\n    \n    class App extends React.Component {\n      state = {\n        emailAddress: '',\n        loading: false,\n      }\n    \n      handleChange = (event) =\u003e {\n        const { value } = event.target;\n        this.setState({\n          emailAddress: value,\n        });\n      }\n    \n      handleSubmit = (event) =\u003e {\n        event.preventDefault();\n    \n        const { emailAddress } = this.state;\n    \n        this.setState({\n          loading: true,\n        });\n    \n        axios.post(\"http://localhost:5000/reset-password\", {\n          email: emailAddress,\n        }).then(() =\u003e {\n          toast.success(\"Check your email address for the recovery link\")\n        })\n          .catch(() =\u003e {\n            toast.error(\"An problem occured, please try again later\")\n          })\n          .finally(() =\u003e {\n            this.setState({\n              loading: false,\n            })\n          });\n      }\n    \n      render() {\n        const { emailAddress, loading } = this.state;\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cheader className=\"App-header\"\u003e\n              \u003cimg src={logo} className=\"App-logo\" alt=\"logo\" /\u003e\n            \u003c/header\u003e\n            \u003csection\u003e\n              \u003cform onSubmit={this.handleSubmit} className=\"password-reset\" action=\"\"\u003e\n                \u003ch5\u003eForgot your password? Reset it below\u003c/h5\u003e\n                \u003clabel htmlFor=\"email-input\"\u003eEmail address:\u003c/label\u003e\n                \u003cinput type=\"email\" onChange={this.handleChange} value={emailAddress} className=\"email-input\" placeholder=\"name@example.com\" id=\"email-input\" name=\"email\" /\u003e\n                \u003cbutton type=\"submit\"\u003eEmail me a recovery link\u003c/button\u003e\n                { loading ? \u003cSpinner name='line-scale-pulse-out' /\u003e : null }\n              \u003c/form\u003e\n              \u003cToastContainer /\u003e\n            \u003c/section\u003e\n          \u003c/div\u003e\n    \n        );\n      }\n    }\n    \n    export default App;\n```\n\nFinally, update `client/src/App.css` as shown below:\n\n```css\n    // client/src/App.css\n    \n    .App {\n      text-align: center;\n    }\n    \n    .App-logo {\n      animation: App-logo-spin infinite 20s linear;\n      height: 40vmin;\n      pointer-events: none;\n    }\n    \n    .App-header {\n      background-color: #282c34;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      font-size: calc(10px + 2vmin);\n      color: white;\n      margin-bottom: 20px;\n    }\n    \n    .App-link {\n      color: #61dafb;\n    }\n    \n    @keyframes App-logo-spin {\n      from {\n        transform: rotate(0deg);\n      }\n      to {\n        transform: rotate(360deg);\n      }\n    }\n    \n    form {\n      width: 100%;\n      max-width: 400px;\n      margin: 0 auto;\n      text-align: left;\n    }\n    \n    input, label {\n      display: block;\n      margin-bottom: 10px;\n    }\n    \n    .email-input {\n      margin-bottom: 20px;\n    }\n```\n\nThis part of the application is pretty simple. We have a single input where the user will enter their email address. Once the submit button is clicked, a POST request is made to the  `/reset-password` endpoint which we set up earlier on the server.\n\nNow, if we get a successful response (meaning an email was sent successfully), the app displays a toast notification informing the user to go check their email. Otherwise, an error message is displayed on the page.\n\n## Set up the monitoring dashboard\n\nThe next step is to set up a realtime monitoring dashboard that enables you to have a constant supervision on your transactional feeds. \n\nCreate a new `Dashboard.js` file in `client/src` and paste the following code into it:\n\n```javascript\n    // client/src/Dashboard.js\n    \n    import React, { Component } from 'react';\n    import Pusher from 'pusher-js';\n    \n    import './Dashboard.css';\n    \n    class Dashboard extends Component {\n      state = {\n        processed: 0,\n        dropped: 0,\n        delivered: 0,\n        deferred: 0,\n        bounce: 0,\n      }\n    \n      componentDidMount() {\n        const pusher = new Pusher('\u003cyour app key\u003e', {\n          cluster: '\u003cyour app cluster\u003e',\n          forceTLS: true\n        });\n    \n        var channel = pusher.subscribe('email-events');\n        channel.bind('new-event', data =\u003e {\n          const { event } = data;\n          this.setState(prevState =\u003e {\n            return {\n              [event]: prevState[event] + 1\n            }\n          });\n        });\n      }\n    \n      render() {\n        const { processed, dropped, delivered, deferred, bounce } = this.state;\n        return (\n          \u003cdiv className=\"Dashboard\"\u003e\n            \u003ch1\u003eRealtime Transactional Email Monitoring\u003c/h1\u003e\n            \u003cdiv className=\"metrics\"\u003e\n    \n            \u003cdiv className=\"metric\"\u003e\n              \u003cspan className=\"metric-name\"\u003eEmails Processed\u003c/span\u003e\n              \u003cspan className=\"metric-value\"\u003e{processed}\u003c/span\u003e\n            \u003c/div\u003e\n          \u003cdiv className=\"metric\"\u003e\n          \u003cspan className=\"metric-name\"\u003eEmails Delivered\u003c/span\u003e\n          \u003cspan className=\"metric-value\"\u003e{delivered}\u003c/span\u003e\n          \u003c/div\u003e\n          \u003cdiv className=\"metric\"\u003e\n              \u003cspan className=\"metric-name\"\u003eEmails Dropped\u003c/span\u003e\n              \u003cspan className=\"metric-value\"\u003e{dropped}\u003c/span\u003e\n          \u003c/div\u003e\n          \u003cdiv className=\"metric\"\u003e\n              \u003cspan className=\"metric-name\"\u003eEmails Deferred\u003c/span\u003e\n              \u003cspan className=\"metric-value\"\u003e{deferred}\u003c/span\u003e\n           \u003c/div\u003e\n          \u003cdiv className=\"metric\"\u003e\n              \u003cspan className=\"metric-name\"\u003eBounced Emails\u003c/span\u003e\n              \u003cspan className=\"metric-value\"\u003e{bounce}\u003c/span\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default Dashboard;\n```\n\nIf you look at the  `componentDidMount()` hook, you can see that we’re making use of the  `subscribe()` method from Pusher to subscribe to a new channel called `email-events`. Finally, we’re listening for the `new-event`  event on the `email-events` channel using the `bind` method and update the application state once we receive a new event on the channel. \n\nDon’t forget to replace `\u003cyour app id\u003e` and `\u003cyour app cluster\u003e` with the appropriate values from your Channels dashboard.\n\nNext, create the CSS file for the Dashboard component as shown below:\n\n```css\n    // client/src/Dashboard.css\n    \n    .Dashboard {\n      padding-top: 30px;\n      text-align: center;\n    }\n    \n    h1 {\n      margin-bottom: 50px;\n    }\n    \n    .metrics {\n      width: 1000px;\n      margin: 0 auto;\n      display: flex;\n      justify-content: space-between;\n      flex-wrap: wrap;\n    }\n    \n    .metric {\n      width: 130px;\n      border-radius: 4px;\n      border: 1px solid #ddd;\n      display: flex;\n      flex-direction: column;\n    }\n    \n    .metric span {\n      display: block;\n    }\n    \n    .metric-value {\n      font-size: 50px;\n    }\n```\n\nFinally, update your `client/src/index.js` file as shown below:\n\n```javascript\n    // client/src/index.js\n    \n    import React from 'react';\n    import ReactDOM from 'react-dom';\n    import { HashRouter, Route } from 'react-router-dom';\n    import './index.css';\n    import App from './App';\n    import Dashboard from './Dashboard';\n    import * as serviceWorker from './serviceWorker';\n    \n    ReactDOM.render(\n      \u003cHashRouter\u003e\n        \u003cRoute exact path=\"/\" component={App} /\u003e\n        \u003cRoute exact path=\"/dash\" component={Dashboard} /\u003e\n      \u003c/HashRouter\u003e// If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: https://bit.ly/CRA-PWA\n    , document.getElementById('root'));\n    \n    serviceWorker.unregister();\n```\n\n## Trigger updates from the server\n\nThe SendGrid [Event Webhook](http://sendgrid.com/docs/API_Reference/Webhooks/event.html) provides realtime feedback on every email you send across [nine event types](https://sendgrid.com/blog/the-nine-events-of-email/). Once an email is sent, SendGrid triggers a bunch of events on a provided HTTP POST URL. We can then use the information contained in the events to update our monitoring dashboard with Channels.\n\nFirst let’s set up the route on the server. Add this below the `/reset-password` route:\n\n```javascript\n    // server.js\n    \n    app.post(\"/events\", (req, res) =\u003e {\n      const events = req.body;\n      events.forEach(function (event) {\n        pusher.trigger('email-events', 'new-event', {\n          ...event\n        });\n      });\n    });\n```\n\nSave the file and restart the server in the terminal.\n\nNext, we need to expose our localhost server publicly using ngrok.  Visit [the ngrok website](https://ngrok.com/download) to find out how to set it up on your computer. Once you have it installed, start an HTTP tunnel on port 5000 by running the command below in a separate terminal window.  You will be provided with a couple of URLs but you only need the last one which is HTTPS enabled.\n\n```\n    ./ngrok http 5000\n```\n\nFinally, let’s activate SendGrid’s event notification service. On the SendGrid dashboard, go to **Settings \u003e Mail Settings**, and scroll to the **Event Notification** setting. Toggle the setting on, and click the **edit** link, then update the **HTTP POST URL** input with `\u003cyour ngrok url\u003e/events`. \n\nFollowing that, select the following actions: **Processed, Dropped, Deferred, Delivered** and **Bounced**, then click the blue checkmark on the right to save.\n\n\n![transactional-email-react-sendgrid-img1](//images.ctfassets.net/1es3ne0caaid/51PSH1WTe0yyW7naneM5Zg/e1ef0c68fe458bde28bdcbf322e1f1f1/transactional-email-react-sendgrid-img1.png)\n\nNot only will you be able to set up monitoring for your business critical emails, but you’ll be the first to know if anything goes wrong, allowing you to save time and money, and improve customer experience.\n\n## Test the application\n\nOpen the password reset form on http://localhost:3000 and the dashboard at http://localhost:3000/#/dash in a separate tab. Enter your email address and submit the form. After a short while, you should see the metrics update on the dashboard.\n\n![transactional-email-react-sendgrid-img2](//images.ctfassets.net/1es3ne0caaid/1FIzj3nn8nzvD3CoRxPUbC/7ef93e21d59898ca9c6aa23fcd159750/transactional-email-react-sendgrid-img2.gif)\n\n## Wrap up\n\nYou have now learned how to create a realtime monitoring dashboard for transactional emails. It was easy wasn’t it? We covered a simple use case but you can take it further and set up monitoring for all your business's critical emails.\n\nThanks for reading! Remember that you can find the source code of this app in this [GitHub repository](https://github.com/ayoisaiah/transactional-email).","metaTitle":"Monitoring for transactional emails with React and SendGrid","metaDescription":"Transactional emails are automated, realtime messages that are sent to users through email after a specific action has been performed on a website or application. In this tutorial you will set up realtime monitoring of transactional emails with SendGrid, using the scenario of a password reset email."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"78kIBZwKq8SQaiKeRMiBug","type":"Entry","createdAt":"2019-05-23T09:37:18.050Z","updatedAt":"2019-05-23T09:37:18.050Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a todo app for iOS, Android and web with react-native-web","url":"todo-app-react-native-web","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Khmrnzj5moO4S6WOYOGAo","type":"Entry","createdAt":"2018-11-14T14:35:55.702Z","updatedAt":"2019-03-03T15:15:59.601Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lanre Adelowo","url":"lanre-adelowo","email":"adelowomailbox@gmail.com","twitter":"https://twitter.com/alanreadelowo","github":"https://github.com/adelowo","guestWriter":true}}],"projectRepo":"https://github.com/adelowo/react-native-web-realtime-todo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"NnKmQxhMC4UySeaEaK4K6","type":"Entry","createdAt":"2018-10-18T18:00:28.031Z","updatedAt":"2018-10-18T18:00:28.031Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Expo","url":"expo","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2019-05-23","description":"Build a basic todo list app for Android, iOS and web using React Native. Users can add to-dos and see the app update across all platforms in realtime, thanks to Pusher Channels.","prerequisite":"You will need Node and Yarn installed on your machine.","content":"In this tutorial, I will be describing how to build a realtime application that runs on the web, Android and iOS. The application will be a Todo app but will also make use of Pusher Channels for realtime functionality. You can find a demo of the application below:\n\n![react-native-web-todo-demo](//images.ctfassets.net/1es3ne0caaid/6lovw2UswWLN9sTRAFg3LD/b5baa4e4ee95a44375870ad10ce4a66b/react-native-web-todo-demo.gif)\n\nIn the results of Stack Overflow’s 2019 developer survey, JavaScript happens to be [the most popular technology](https://insights.stackoverflow.com/survey/2019#technology). This is not by mere luck as it has proven we can write applications that can run almost anywhere - from web apps, desktop apps, android apps and iOS apps.\n\n## Prerequisites\n\n- NodeJS \u003e= 6\n- Yarn package manager. [Installation information can be found here](https://yarnpkg.com/en/docs/install).\n\n\n## Directory setup\n\nYou will need to create a new directory called `realtime-todo`. In this directory, you will also need to create another one called `server`. You can make use of the command below to achieve the above:\n\n\n```\n    $ mkdir realtime-todo\n    $ mkdir realtime-todo/server\n``` \n\n\n## Building the server\n\nAs you already know, we created a `server` directory, you will need to `cd` into that directory as that is where the bulk of the work for this section is going to be in. The first thing you need to do is to create a `package.json` file, you can make use of the following command:\n\n```\n    $ touch package.json\n```    \n\nIn the newly created file, paste the following content:\n\n```json\n    // realtime-todo/server/package.json\n    {\n      \"name\": \"server\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.3\",\n        \"cors\": \"^2.8.5\",\n        \"dotenv\": \"^7.0.0\",\n        \"express\": \"^4.16.4\",\n        \"pusher\": \"^2.2.0\"\n      },\n      \"devDependencies\": {},\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\"\n      }\n    }\n```   \n\nAfter which you will need to actually install the dependencies, that can be done with:\n\n```   \n    $ yarn \n```    \n\nOnce the above command succeeds, you will need to create an `index.js` file that will house the actual todo API. You can create the file by running the command below:\n\n```   \n    $ touch index.js\n```     \n\nIn the `index.js`, paste the following contents:\n\n```javascript\n    // realtime-todo/server/index.js\n    \n    require('dotenv').config({ path: 'variable.env' });\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      useTLS: true,\n    });\n    \n    const app = express();\n    \n    app.use(cors());\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    app.post('/pusher/auth', function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n    \n    const todos = [];\n    \n    app.get('/items', (req, res) =\u003e {\n      res.status(200).send({ tasks: todos });\n    });\n    \n    app.post('/items', (req, res) =\u003e {\n      const title = req.body.title;\n    \n      if (title === undefined) {\n        res\n          .status(400)\n          .send({ message: 'Please provide your todo item', status: false });\n        return;\n      }\n    \n      if (title.length \u003c= 5) {\n        res.status(400).send({\n          message: 'Todo item should be more than 5 characters',\n          status: false,\n        });\n        return;\n      }\n    \n      const index = todos.findIndex(element =\u003e {\n        return element.text === title.trim();\n      });\n    \n      if (index \u003e= 0) {\n        res\n          .status(400)\n          .send({ message: 'TODO item already exists', status: false });\n        return;\n      }\n    \n      const item = {\n        text: title.trim(),\n        completed: false,\n      };\n    \n      todos.push(item);\n    \n      pusher.trigger('todo', 'items', item);\n    \n      res\n        .status(200)\n        .send({ message: 'TODO item was successfully created', status: true });\n    });\n    \n    app.post('/items/complete', (req, res) =\u003e {\n      const idx = req.body.index;\n    \n      todos[idx].completed = true;\n    \n      pusher.trigger('todo', 'complete', { index: idx });\n    \n      res.status(200).send({\n        status: true,\n      });\n    });\n    \n    app.set('port', process.env.PORT || 5200);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running on port ${server.address().port}`);\n    });\n```    \n\nIn the above, we create an API server that has three endpoints:\n\n-  `/items` : an `HTTP` GET request to list all available todo items.\n- `/items` : an `HTTP` POST request to create a new todo item.\n- `/items/complete`: used to mark a todo item as done.\n\nAnother thing you might have noticed in on Line 3 where we make mention of a file called `variable.env`. That file does not exists yet, so now is the time to create it. You can do that with the following command:\n\n```    \n    $ touch variable.env\n```    \n\nIn the newly created file, paste the following content:\n\n```\n    // realtime-todo/server/variable.env\n    \n    PUSHER_APP_ID=\"PUSHER_APP_ID\"\n    PUSHER_APP_KEY=\"PUSHER_APP_KEY\"\n    PUSHER_APP_SECRET=\"PUSHER_APP_SECRET\"\n    PUSHER_APP_CLUSTER=\"PUSHER_APP_CLUSTER\"\n    PUSHER_APP_SECURE=\"1\"\n```    \n\n\u003e Please make sure to replace the placeholders with your original credentials\n\nYou can go ahead to run the server to make sure everything is fine. You can do that by running the command:\n\n```    \n    $ node index.js\n```\n\n## Building the client\n\nThe client we will build in this section will run on the web. With the help of Expo and React Native, it will also run on Android and iOS. This is made possible via a library called `[react-native-web](https://github.com/necolas/react-native-web)`. \n\nTo get up to speed, we will make use of a [starter pack available on GitHub](https://github.com/joefazz/react-native-web-starter). You will need to navigate to the project root i.e `realtime-todo` and clone the starter pack project. That can be done with the following command:\n\n```    \n    # Clone into the `client` directory\n    $ git clone git@github.com:joefazz/react-native-web-starter.git client\n```    \n\nYou will need to `cd` into the `client` directory as all changes to be made will be done there. You will also need to install the dependencies, that can be done by running `yarn`. As we will be making use of Pusher Channels and at the same time communicate with the server, you will need to run the following command:\n\n```    \n    $ yarn add axios pusher-js\n```    \n\nThe next step is to open the file located at `src/App.js`. You will need to delete all the existing content and replace with the following:\n\n```javascript\n    // realtime-todo/client/src/App.js\n    \n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      Text,\n      View,\n      FlatList,\n      Button,\n      TextInput,\n      SafeAreaView,\n    } from 'react-native';\n    import axios from 'axios';\n    import Alert from './Alert';\n    import Pusher from 'pusher-js/react-native';\n    \n    const APP_KEY = 'PUSHER_APP_KEY';\n    const APP_CLUSTER = 'PUSHER_APP_CLUSTER';\n    \n    export default class App extends Component {\n      state = {\n        tasks: [],\n        text: '',\n        initiator: false,\n      };\n    \n      changeTextHandler = text =\u003e {\n        this.setState({ text: text });\n      };\n    \n      addTask = () =\u003e {\n        if (this.state.text.length \u003c= 5) {\n          Alert('Todo item cannot be less than 5 characters');\n          return;\n        }\n    \n        // The server is the actual source of truth. Notify it of a new entry so it can\n        // add it to a database and publish to other available channels.\n        axios\n          .post('http://localhost:5200/items', { title: this.state.text })\n          .then(res =\u003e {\n            if (res.data.status) {\n              this.setState(prevState =\u003e {\n                const item = {\n                  text: prevState.text,\n                  completed: false,\n                };\n    \n                return {\n                  tasks: [...prevState.tasks, item],\n                  text: '',\n                  initiator: true,\n                };\n              });\n    \n              return;\n            }\n    \n            Alert('Could not add TODO item');\n          })\n          .catch(err =\u003e {\n            let msg = err;\n    \n            if (err.response) {\n              msg = err.response.data.message;\n            }\n    \n            Alert(msg);\n          });\n      };\n    \n      markComplete = i =\u003e {\n        // As other devices need to know once an item is marked as done.\n        // The server needs to be informed so other available devices can be kept in sync\n        axios\n          .post('http://localhost:5200/items/complete', { index: i })\n          .then(res =\u003e {\n            if (res.data.status) {\n              this.setState(prevState =\u003e {\n                prevState.tasks[i].completed = true;\n                return { tasks: [...prevState.tasks] };\n              });\n            }\n          });\n      };\n    \n      componentDidMount() {\n        // Fetch a list of todo items once the app starts up.\n        axios.get('http://localhost:5200/items', {}).then(res =\u003e {\n          this.setState({\n            tasks: res.data.tasks || [],\n            text: '',\n          });\n        });\n    \n        const socket = new Pusher(APP_KEY, {\n          cluster: APP_CLUSTER,\n        });\n    \n        const channel = socket.subscribe('todo');\n    \n        // Listen to the items channel for new todo entries.\n        // The server publishes to this channel whenever a new entry is created.\n        channel.bind('items', data =\u003e {\n          // Since the app is going to be realtime, we don't want the same item to\n          // be shown twice. Device A publishes an entry, all other devices including itself\n          // receives the entry, so act like a basic filter\n          if (!this.state.initiator) {\n            this.setState(prevState =\u003e {\n              return { tasks: [...prevState.tasks, data] };\n            });\n          } else {\n            this.setState({\n              initiator: false,\n            });\n          }\n        });\n    \n        // This \"complete\" channel here is for items that were recently marked as done.\n        channel.bind('complete', data =\u003e {\n          if (!this.state.initiator) {\n            this.setState(prevState =\u003e {\n              prevState.tasks[data.index].completed = true;\n              return { tasks: [...prevState.tasks] };\n            });\n          } else {\n            this.setState({\n              initiator: false,\n            });\n          }\n        });\n      }\n    \n      render() {\n        return (\n          // SafeAreaView is meant for the X family of iPhones.\n          \u003cSafeAreaView style={{ flex: 1, backgroundColor: '#F5FCFF' }}\u003e\n            \u003cView style={[styles.container]}\u003e\n              \u003cFlatList\n                style={styles.list}\n                data={this.state.tasks}\n                keyExtractor={(item, index) =\u003e index.toString()}\n                renderItem={({ item, index }) =\u003e (\n                  \u003cView\u003e\n                    \u003cView style={styles.listItemCont}\u003e\n                      \u003cText\n                        style={[\n                          styles.listItem,\n                          item.completed \u0026\u0026 { textDecorationLine: 'line-through' },\n                        ]}\n                      \u003e\n                        {item.text}\n                      \u003c/Text\u003e\n                      {!item.completed \u0026\u0026 (\n                        \u003cButton\n                          title=\"✔\"\n                          onPress={() =\u003e this.markComplete(index)}\n                        /\u003e\n                      )}\n                    \u003c/View\u003e\n                    \u003cView style={styles.hr} /\u003e\n                  \u003c/View\u003e\n                )}\n              /\u003e\n    \n              \u003cTextInput\n                style={styles.textInput}\n                onChangeText={this.changeTextHandler}\n                onSubmitEditing={this.addTask}\n                value={this.state.text}\n                placeholder=\"Add Tasks\"\n                returnKeyType=\"done\"\n                returnKeyLabel=\"done\"\n              /\u003e\n            \u003c/View\u003e\n          \u003c/SafeAreaView\u003e\n        );\n      }\n    }\n    \n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#F5FCFF',\n        paddingTop: 20,\n        height: '100%',\n      },\n      list: {\n        width: '100%',\n      },\n      listItem: {\n        paddingTop: 2,\n        paddingBottom: 2,\n        fontSize: 18,\n      },\n      hr: {\n        height: 1,\n        backgroundColor: 'gray',\n      },\n      listItemCont: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n      },\n      textInput: {\n        height: 40,\n        paddingRight: 10,\n        borderColor: 'gray',\n        width: '100%',\n      },\n    });\n```    \n\n\u003e Please update Line 17 and 18 to contain your actual credentials.\n\nWhile the above is pretty straight forward, perhaps the most interesting is the line that reads `Alert('Could not add TODO item');`. It is easy to think `Alert.alert()` should be used, while that is true, `react-native-web`  doesn’t include support for the `Alert` component so we will have to roll out our own. Here is a list of all [components react-native-web supports](https://github.com/necolas/react-native-web#compatibility-with-react-native). Building functionality for making alerts on the web isn’t a herculean task. You will need to create a new file called `Alert.js` in the `src` directory.\n\n\n```   \n    $ touch src/Alert.js\n```\n\nIn the newly created file `Alert.js`, paste the following contents:\n\n```javascript\n    // realtime-todo/client/src/Alert.js\n    \n    import { Platform, Alert as NativeAlert } from 'react-native';\n    \n    const Alert = msg =\u003e {\n      if (Platform.OS === 'web') {\n        alert(msg);\n        return;\n      }\n    \n      NativeAlert.alert(msg);\n    };\n    \n    export default Alert;\n```    \n\nSimple right ? We just check what platform the code is being executed on and take relevant action.\n\nWith that done, you will need to go back to the `client` directory. This is where you get to run the client. Depending on the platform you want to run the app in, the command to run will be different:\n\n\n- Web : `yarn web`. You will need to visit `http://localhost:3000`.\n- Android/iOS : `yarn start-expo`\n\nIf you go with the second option, you will be shown a web page that looks like the following:\n\n![react-native-web-todo-expo](//images.ctfassets.net/1es3ne0caaid/1nXptPaMHG6buNPWDql80Z/2d6f5e51fc6052df93c25df173477049/react-native-web-todo-expo.png)\n\nYou can then click on the links on the left based on your choice.\n\n\u003e Remember to leave the server running\n\nIf you open the project on the web and on iOS/Android,  you will be able to reproduce the demo below:\n\n![react-native-web-todo-demo](//images.ctfassets.net/1es3ne0caaid/6lovw2UswWLN9sTRAFg3LD/b5baa4e4ee95a44375870ad10ce4a66b/react-native-web-todo-demo.gif)\n\n## Conclusion\n\nIn this tutorial, I have described how to build an application that runs on Android, iOS and the web with just one codebase. We also integrated Pusher Channels so as to make communication realtime.\n\nAs always, you can find the code on [GitHub](https://github.com/adelowo/react-native-web-realtime-todo).","metaTitle":"Build a todo app with react-native-web","metaDescription":"Build a basic todo list app for Android, iOS and web using React Native. Users can add to-dos and see the app update across all platforms in realtime, thanks to Pusher Channels."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7Mf0Yf8VG2Rp2GrRrgrQok","type":"Entry","createdAt":"2019-05-01T18:13:43.138Z","updatedAt":"2019-05-01T18:13:43.138Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live analytics dashboard using Go and MongoDB","url":"live-analytics-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Khmrnzj5moO4S6WOYOGAo","type":"Entry","createdAt":"2018-11-14T14:35:55.702Z","updatedAt":"2019-03-03T15:15:59.601Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lanre Adelowo","url":"lanre-adelowo","email":"adelowomailbox@gmail.com","twitter":"https://twitter.com/alanreadelowo","github":"https://github.com/adelowo","guestWriter":true}}],"projectRepo":"https://github.com/adelowo/pusher-realtime-analytics-dashboard","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}}],"reviewDate":"2019-05-01","description":"Use Go, MongoDB and Pusher Channels to monitor user interactions with your app. Build a simple demo app page and a monitoring dashboard. The dashboard updates in realtime as users interact with the app.","prerequisite":"You will need Go 1.7+ and MongoDB 3+ installed on your machine.","content":"One of the most important step to take while taking a website or app into production is analytics and usage statistics. This is important as it allows you to see how users are actually using your app, improve usability and inform future development decisions. \n\nIn this tutorial, I will describe how to monitor all requests an application is going to receive, we will use the data gotten from monitoring to track a few metrics such as:\n\n- Most visited links\n- Response time for each link\n- Total number of requests\n- Average response time\n\n![go-app-monitoring-demo](//images.ctfassets.net/1es3ne0caaid/3bGgZOLvnaGTWBhY3e68lL/4248aba65a28dd9aef46b4379b4afec7/go-app-monitoring-demo.gif)\n\n## Prerequisites\n\n- Golang \u003e=1.7. You can install the Golang toolchain [by following this guide](https://golang.org/dl/).\n- MongoDB \u003e=3. You can install this by [following this guide](https://docs.mongodb.com/manual/installation/).\n- A [Pusher account](http://pusher.com/signup).\n\n\n## Starting out\n\nWe will start out by setting up our project directory. You will need to create a directory called `analytics-dashboard`. The location of this directory will depend on the version of the Go toolchain you have:\n\n- If you are running `\u003c=1.11`, you should create the directory in `$GOPATH/src/github.com/pusher-tutorials/analytics-dashboard`\n- If you are running `1.12` or greater, you can create the directory anywhere.\n\nIn the newly created directory, create a `.env` in the root directory with the following command:\n\n\n```    \n    $ touch .env\n```    \n\nIn the `.env` file, you will need to add your credentials. Copy and paste the following contents into the file:\n\n```\n    // analytics-dashboard/.env\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_APP_KEY=PUSHER_APP_KEY\n    PUSHER_APP_SECRET=PUSHER_APP_SECRET\n    PUSHER_APP_CLUSTER=PUSHER_APP_CLUSTER\n    PUSHER_APP_SECURE=\"1\"\n```    \n\n\n\u003e Please make sure to replace the placeholders with your own credentials.\n\n\n\n## MongoDB\n\nMongoDB is going to be used as a persistent datastore and we are going to make use of it’s calculation abilities to build out the functionality I described above.\n\nSince we are building the application in Golang, we will need to fetch a client library that will assist us in connecting and querying the MongoDB database. To that, you should run the following command:\n\n\n```   \n    $ go get -u -v gopkg.in/mgo.v2/...\n```    \n\nOnce the above command succeeds, you will need to create a new file called `analytics.go`. In this file, paste the following code:\n\n```go\n    // analytics-dashboard/analytics.go\n    \n    package main\n    \n    import (\n            \"gopkg.in/mgo.v2\"\n            \"gopkg.in/mgo.v2/bson\"\n    )\n    \n    const (\n            collectionName = \"request_analytics\"\n    )\n    \n    type requestAnalytics struct {\n            URL         string `json:\"url\"`\n            Method      string `json:\"method\"`\n            RequestTime int64  `json:\"request_time\"`\n            Day         string `json:\"day\"`\n            Hour        int    `json:\"hour\"`\n    }\n    \n    type mongo struct {\n            sess *mgo.Session\n    }\n    \n    func (m mongo) Close() error {\n            m.sess.Close()\n            return nil\n    }\n    \n    func (m mongo) Write(r requestAnalytics) error {\n            return m.sess.DB(\"pusher_tutorial\").C(collectionName).Insert(r)\n    }\n    \n    func (m mongo) Count() (int, error) {\n            return m.sess.DB(\"pusher_tutorial\").C(collectionName).Count()\n    }\n    \n    type statsPerRoute struct {\n            ID struct {\n                    Method string `bson:\"method\" json:\"method\"`\n                    URL    string `bson:\"url\" json:\"url\"`\n            } `bson:\"_id\" json:\"id\"`\n            NumberOfRequests int `bson:\"numberOfRequests\" json:\"number_of_requests\"`\n    }\n    \n    func (m mongo) AverageResponseTime() (float64, error) {\n    \n            type res struct {\n                    AverageResponseTime float64 `bson:\"averageResponseTime\" json:\"average_response_time\"`\n            }\n    \n            var ret = []res{}\n    \n            var baseMatch = bson.M{\n                    \"$group\": bson.M{\n                            \"_id\":                 nil,\n                            \"averageResponseTime\": bson.M{\"$avg\": \"$requesttime\"},\n                    },\n            }\n    \n            err := m.sess.DB(\"pusher_tutorial\").C(collectionName).\n                    Pipe([]bson.M{baseMatch}).All(\u0026ret)\n    \n            if len(ret) \u003e 0 {\n                    return ret[0].AverageResponseTime, err\n            }\n    \n            return 0, nil\n    }\n    \n    func (m mongo) StatsPerRoute() ([]statsPerRoute, error) {\n    \n            var ret []statsPerRoute\n    \n            var baseMatch = bson.M{\n                    \"$group\": bson.M{\n                            \"_id\":              bson.M{\"url\": \"$url\", \"method\": \"$method\"},\n                            \"responseTime\":     bson.M{\"$avg\": \"$requesttime\"},\n                            \"numberOfRequests\": bson.M{\"$sum\": 1},\n                    },\n            }\n    \n            err := m.sess.DB(\"pusher_tutorial\").C(collectionName).\n                    Pipe([]bson.M{baseMatch}).All(\u0026ret)\n            return ret, err\n    }\n    \n    type requestsPerDay struct {\n            ID               string `bson:\"_id\" json:\"id\"`\n            NumberOfRequests int    `bson:\"numberOfRequests\" json:\"number_of_requests\"`\n    }\n    \n    func (m mongo) RequestsPerHour() ([]requestsPerDay, error) {\n    \n            var ret []requestsPerDay\n    \n            var baseMatch = bson.M{\n                    \"$group\": bson.M{\n                            \"_id\":              \"$hour\",\n                            \"numberOfRequests\": bson.M{\"$sum\": 1},\n                    },\n            }\n    \n            var sort = bson.M{\n                    \"$sort\": bson.M{\n                            \"numberOfRequests\": 1,\n                    },\n            }\n    \n            err := m.sess.DB(\"pusher_tutorial\").C(collectionName).\n                    Pipe([]bson.M{baseMatch, sort}).All(\u0026ret)\n            return ret, err\n    }\n    \n    func (m mongo) RequestsPerDay() ([]requestsPerDay, error) {\n    \n            var ret []requestsPerDay\n    \n            var baseMatch = bson.M{\n                    \"$group\": bson.M{\n                            \"_id\":              \"$day\",\n                            \"numberOfRequests\": bson.M{\"$sum\": 1},\n                    },\n            }\n    \n            var sort = bson.M{\n                    \"$sort\": bson.M{\n                            \"numberOfRequests\": 1,\n                    },\n            }\n    \n            err := m.sess.DB(\"pusher_tutorial\").C(collectionName).\n                    Pipe([]bson.M{baseMatch, sort}).All(\u0026ret)\n            return ret, err\n    }\n    \n    func newMongo(addr string) (mongo, error) {\n            sess, err := mgo.Dial(addr)\n            if err != nil {\n                    return mongo{}, err\n            }\n    \n            return mongo{\n                    sess: sess,\n            }, nil\n    }\n    \n    type Data struct {\n            AverageResponseTime float64          `json:\"average_response_time\"`\n            StatsPerRoute       []statsPerRoute  `json:\"stats_per_route\"`\n            RequestsPerDay      []requestsPerDay `json:\"requests_per_day\"`\n            RequestsPerHour     []requestsPerDay `json:\"requests_per_hour\"`\n            TotalRequests       int              `json:\"total_requests\"`\n    }\n    \n    func (m mongo) getAggregatedAnalytics() (Data, error) {\n    \n            var data Data\n    \n            totalRequests, err := m.Count()\n            if err != nil {\n                    return data, err\n            }\n    \n            stats, err := m.StatsPerRoute()\n            if err != nil {\n                    return data, err\n            }\n    \n            reqsPerDay, err := m.RequestsPerDay()\n            if err != nil {\n                    return data, err\n            }\n    \n            reqsPerHour, err := m.RequestsPerHour()\n            if err != nil {\n                    return data, err\n            }\n    \n            avgResponseTime, err := m.AverageResponseTime()\n            if err != nil {\n                    return data, err\n            }\n    \n            return Data{\n                    AverageResponseTime: avgResponseTime,\n                    StatsPerRoute:       stats,\n                    RequestsPerDay:      reqsPerDay,\n                    RequestsPerHour:     reqsPerHour,\n                    TotalRequests:       totalRequests,\n            }, nil\n    }\n```   \n\nIn the above, we have implemented a few queries on the MongoDB database:\n\n\n- `StatsPerRoute`: Analytics for each route visited\n- `RequestsPerDay`: Analytics per day\n- `RequestsPerHour`: Analytics per hour\n\nThe next step is to add some HTTP endpoints a user can visit. Without those, the code above for querying MongoDB for analytics is redundant. You will also need to create a logging middleware that writes analytics to MongoDB. And to make it realtime, Pusher Channels will also be used.\n\nTo get started with that, you will need to create a file named `main.go`. You can do that via the command below:\n\n\n```    \n    $ touch main.go\n```   \n\nYou will also need to fetch some libraries that will be used while building. You will need to run the command below to fetch them:\n\n\n```    \n    $ go get github.com/go-chi/chi\n    $ go get github.com/joho/godotenv\n    $ go get github.com/pusher/pusher-http-go\n```   \n\nIn the newly created `main.go` file, paste the following code:\n\n```go\n    // analytics-dashboard/main.go\n    \n    package main\n    \n    import (\n            \"encoding/json\"\n            \"flag\"\n            \"fmt\"\n            \"html/template\"\n            \"log\"\n            \"net/http\"\n            \"os\"\n            \"path/filepath\"\n            \"strconv\"\n            \"strings\"\n            \"sync\"\n            \"time\"\n    \n            \"github.com/go-chi/chi\"\n            \"github.com/joho/godotenv\"\n            \"github.com/pusher/pusher-http-go\"\n    )\n    \n    const defaultSleepTime = time.Second * 2\n    \n    func main() {\n            httpPort := flag.Int(\"http.port\", 4000, \"HTTP Port to run server on\")\n            mongoDSN := flag.String(\"mongo.dsn\", \"localhost:27017\", \"DSN for mongoDB server\")\n    \n            flag.Parse()\n    \n            if err := godotenv.Load(); err != nil {\n                    log.Fatal(\"Error loading .env file\")\n            }\n    \n            appID := os.Getenv(\"PUSHER_APP_ID\")\n            appKey := os.Getenv(\"PUSHER_APP_KEY\")\n            appSecret := os.Getenv(\"PUSHER_APP_SECRET\")\n            appCluster := os.Getenv(\"PUSHER_APP_CLUSTER\")\n            appIsSecure := os.Getenv(\"PUSHER_APP_SECURE\")\n    \n            var isSecure bool\n            if appIsSecure == \"1\" {\n                    isSecure = true\n            }\n    \n            client := \u0026pusher.Client{\n                    AppId:   appID,\n                    Key:     appKey,\n                    Secret:  appSecret,\n                    Cluster: appCluster,\n                    Secure:  isSecure,\n                    HttpClient: \u0026http.Client{\n                            Timeout: time.Second * 10,\n                    },\n            }\n    \n            mux := chi.NewRouter()\n    \n            log.Println(\"Connecting to MongoDB\")\n            m, err := newMongo(*mongoDSN)\n            if err != nil {\n                    log.Fatal(err)\n            }\n    \n            log.Println(\"Successfully connected to MongoDB\")\n    \n            mux.Use(analyticsMiddleware(m, client))\n    \n            var once sync.Once\n            var t *template.Template\n    \n            workDir, _ := os.Getwd()\n            filesDir := filepath.Join(workDir, \"static\")\n            fileServer(mux, \"/static\", http.Dir(filesDir))\n    \n            mux.Get(\"/\", func(w http.ResponseWriter, r *http.Request) {\n    \n                    once.Do(func() {\n                            tem, err := template.ParseFiles(\"static/index.html\")\n                            if err != nil {\n                                    log.Fatal(err)\n                            }\n    \n                            t = tem.Lookup(\"index.html\")\n                    })\n    \n                    t.Execute(w, nil)\n            })\n    \n            mux.Get(\"/api/analytics\", analyticsAPI(m))\n            mux.Get(\"/wait/{seconds}\", waitHandler)\n    \n            log.Fatal(http.ListenAndServe(fmt.Sprintf(\":%d\", *httpPort), mux))\n    }\n    \n    func fileServer(r chi.Router, path string, root http.FileSystem) {\n            if strings.ContainsAny(path, \"{}*\") {\n                    panic(\"FileServer does not permit URL parameters.\")\n            }\n    \n            fs := http.StripPrefix(path, http.FileServer(root))\n    \n            if path != \"/\" \u0026\u0026 path[len(path)-1] != '/' {\n                    r.Get(path, http.RedirectHandler(path+\"/\", 301).ServeHTTP)\n                    path += \"/\"\n            }\n    \n            path += \"*\"\n    \n            r.Get(path, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n                    fs.ServeHTTP(w, r)\n            }))\n    }\n    \n    func analyticsAPI(m mongo) http.HandlerFunc {\n            return func(w http.ResponseWriter, r *http.Request) {\n    \n                    data, err := m.getAggregatedAnalytics()\n                    if err != nil {\n                            log.Println(err)\n    \n                            json.NewEncoder(w).Encode(\u0026struct {\n                                    Message   string `json:\"message\"`\n                                    TimeStamp int64  `json:\"timestamp\"`\n                            }{\n                                    Message:   \"An error occurred while fetching analytics data\",\n                                    TimeStamp: time.Now().Unix(),\n                            })\n    \n                            return\n                    }\n    \n                    w.Header().Set(\"Content-Type\", \"application/json\")\n                    json.NewEncoder(w).Encode(data)\n            }\n    }\n    \n    func analyticsMiddleware(m mongo, client *pusher.Client) func(next http.Handler) http.Handler {\n            return func(next http.Handler) http.Handler {\n                    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    \n                            startTime := time.Now()\n    \n                            defer func() {\n    \n                                    if strings.HasPrefix(r.URL.String(), \"/wait\") {\n    \n                                            data := requestAnalytics{\n                                                    URL:         r.URL.String(),\n                                                    Method:      r.Method,\n                                                    RequestTime: time.Now().Unix() - startTime.Unix(),\n                                                    Day:         startTime.Weekday().String(),\n                                                    Hour:        startTime.Hour(),\n                                            }\n    \n                                            if err := m.Write(data); err != nil {\n                                                    log.Println(err)\n                                            }\n    \n                                            aggregatedData, err := m.getAggregatedAnalytics()\n                                            if err == nil {\n                                                    client.Trigger(\"analytics-dashboard\", \"data\", aggregatedData)\n                                            }\n                                    }\n                            }()\n    \n                            next.ServeHTTP(w, r)\n                    })\n            }\n    }\n    \n    func waitHandler(w http.ResponseWriter, r *http.Request) {\n            var sleepTime = defaultSleepTime\n    \n            secondsToSleep := chi.URLParam(r, \"seconds\")\n            n, err := strconv.Atoi(secondsToSleep)\n            if err == nil \u0026\u0026 n \u003e= 2 {\n                    sleepTime = time.Duration(n) * time.Second\n            } else {\n                    n = 2\n            }\n    \n            log.Printf(\"Sleeping for %d seconds\", n)\n            time.Sleep(sleepTime)\n            w.Write([]byte(`Done`))\n    }\n```    \n\nWhile the above might seem like a lot, basically what has been done is:\n\n\n- Line 31 - 33: Parse environment variables from the `.env` created earlier.\n\u003e Another reminder to update the `.env` file to contain your actual credentials\n- Line 36 - 56: A server side connection to Pusher Channels is established\n- Line 68 - 95: Build an HTTP server. \n- Line 139 - 171: A lot is happening here. `analyticsMiddleware` is used to capture all requests, and for requests that have the path `wait/{seconds}` , a log is written to MongoDB. It is also sent to Pusher Channels.\n\nBefore running the server, you need a frontend to visualize the analytics. The frontend is going to be as simple and usable as can be. You will need to create a new directory called `static` in your root directory - `analytics-dashboard` . That can be done with the following command:\n\n\n```    \n    $ mkdir analytics-dashboard/static\n```   \n\nIn the `static` directory, create two files - `index.html` and `app.js`. You can run the command below to do just that:\n\n\n```    \n    $ touch static/{index.html,app.js}\n```    \n\nOpen the `index.html` file and paste the following code:\n\n```html\n    // analytics-dashboard/static/index.html\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003ctitle\u003eRealtime analytics dashboard\u003c/title\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\n              integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \u003cdiv class=\"container\" id=\"app\"\u003e\u003c/div\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.1.2/handlebars.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://js.pusher.com/4.3/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"/static/app.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```    \n\nWhile that is an empty page, you will make use of JavaScript to fill it up with useful data. So you will also need to open up the `app.js` file. In the `app.js` file, paste the following code:\n\n```js\n    // analytics-dashboard/static/app.js\n    \n    const appDiv = document.getElementById('app');\n    \n    const tmpl = `\n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-5\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003eTotal requests\u003c/h5\u003e\n                    \u003cdiv class=\"card-text\"\u003e\n                        \u003ch3\u003e\\{{total_requests}}\u003c/h3\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"col-md-5\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003eAverage response time\u003c/h5\u003e\n                    \u003cdiv class=\"card-text\"\u003e\n                        \u003ch3\u003e\\{{ average_response_time }} seconds\u003c/h3\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-5\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003eBusiest days of the week\u003c/h5\u003e\n                    \u003cdiv class=\"card-text\" style=\"width: 18rem\"\u003e\n                        \u003cul class=\"list-group list-group-flush\"\u003e\n                            {{#each requests_per_day}}\n                            \u003cli class=\"list-group-item\"\u003e\n                                \\{{ this.id }} (\\{{ this.number_of_requests }} requests)\n                            \u003c/li\u003e\n                            {{/each }}\n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"col-md-5\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003eBusiest hours of day\u003c/h5\u003e\n                    \u003cdiv class=\"card-text\" style=\"width: 18rem;\"\u003e\n                        \u003cul class=\"list-group list-group-flush\"\u003e\n                            {{#each requests_per_hour}}\n                            \u003cli class=\"list-group-item\"\u003e\n                                \\{{ this.id }} (\\{{ this.number_of_requests }} requests)\n                            \u003c/li\u003e\n                            {{/each}}\n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-5\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003eMost visited routes\u003c/h5\u003e\n                    \u003cdiv class=\"card-text\" style=\"width: 18rem;\"\u003e\n                        \u003cul class=\"list-group list-group-flush\"\u003e\n                            {{#each stats_per_route}}\n                            \u003cli class=\"list-group-item\"\u003e\n                                \\{{ this.id.method }} \\{{ this.id.url }} (\\{{ this.number_of_requests }} requests)\n                            \u003c/li\u003e\n                            {{/each}}\n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    `;\n    \n    const template = Handlebars.compile(tmpl);\n    \n    writeData = data =\u003e {\n      appDiv.innerHTML = template(data);\n    };\n    \n    axios\n      .get('http://localhost:4000/api/analytics', {})\n      .then(res =\u003e {\n        console.log(res.data);\n        writeData(res.data);\n      })\n      .catch(err =\u003e {\n        console.error(err);\n      });\n    \n    const APP_KEY = 'PUSHER_APP_KEY';\n    const APP_CLUSTER = 'PUSHER_CLUSTER';\n    \n    const pusher = new Pusher(APP_KEY, {\n      cluster: APP_CLUSTER,\n    });\n    \n    const channel = pusher.subscribe('analytics-dashboard');\n    \n    channel.bind('data', data =\u003e {\n      writeData(data);\n    });\n```   \n\n\n\u003e Please replace `PUSHER_APP_KEY` and `PUSHER_CLUSTER` with your own credentials.\n\nIn the above code, we defined a constant called `tmpl`, it holds an HTML template which we will run through the [Handlebars](http://handlebarsjs.com/) template engine to fill it up with actual data.\n\nWith this done, you can go ahead to run the Golang server one. You will need to go to the root directory - `analytics-dashboard` and run the following command:\n\n\n```    \n    $ go build\n    $ ./analytics-dashboard\n```    \n\n\n\u003e Make sure you have a MongoDB instance running. If your MongoDB is running on a port other than the default 27017, make sure to add  `-mongo.dsn \"YOUR_DSN\"` to the above command\n\n\n\u003e Also make sure your credentials are in `.env` \n\nAt this stage, you will need to open two browser tabs. Visit `http://localhost:4000` in one and `http://localhost:4000/wait/2` in the other. Refresh the tab where you have `http://localhost:4000/wait/2` and go back to the other tab to see a breakdown of usage activity.\n\n\n\u003e Note you can change the value of 2 in the url to any other digit. \n\n\n## Conclusion\n\nIn this tutorial, we’ve built a middleware that tracks every request, and a Golang application that calculates analytics of the tracked requests. We also built a dashboard that displays the relevant data. With Pusher Channels, we’ve been able to update the dashboard in realtime. The full source code can be found [on GitHub](https://github.com/adelowo/pusher-realtime-analytics-dashboard).","metaTitle":"Build a live analytics dashboard using Go and MongoDB","metaDescription":"Use Go, MongoDB and Pusher Channels to monitor user interactions with your app. Build a simple demo app page and a monitoring dashboard. The dashboard updates in realtime as users interact with the app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2OMB4z5byaHkTcNA6V3AEV","type":"Entry","createdAt":"2019-04-03T18:02:47.712Z","updatedAt":"2019-04-03T18:02:47.712Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"End to end encryption in Node.js with Pusher Channels","url":"end-to-end-encryption-node","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Khmrnzj5moO4S6WOYOGAo","type":"Entry","createdAt":"2018-11-14T14:35:55.702Z","updatedAt":"2019-03-03T15:15:59.601Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lanre Adelowo","url":"lanre-adelowo","email":"adelowomailbox@gmail.com","twitter":"https://twitter.com/alanreadelowo","github":"https://github.com/adelowo","guestWriter":true}}],"projectRepo":"https://github.com/adelowo/pusher-encrypted-channels-node","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2019-04-03","description":"Learn how Pusher Channels support varying encryption levels, from public to fully encrypted. Build a simple demo using Node, sending fully encrypted messages to a message feed.","prerequisite":"You will need Node 8+ and an OpenSSL tool installed on your machine.","content":"Privacy is a hot topic this days. Who has access to what and who can read my conversation with a friend. [Pusher Channels](https://pusher.com/channels) offers three kinds of channels:\n\n- Public\n- Private\n- Encrypted\n\nBasically, all three perform the same functions - flexible pub/sub messaging and tons of other cool features. But there are few differences between them. Public channels do not require client-server authentication in order to subscribe to events. Private channels take it a step further by requiring client-server authentication. Encrypted channels build on top of private channels by introducing security in the form of encrypted data. \n\nBelow is a screenshot of the **Debug Console** showing an event published on a public channel.\n\n![node-e2e-encryption-1](//images.ctfassets.net/1es3ne0caaid/5zoI0MfCCjmhDYo7ITM50v/d136bc1f798e483623791e8a0f4e4a63/node-e2e-encryption-1.png)\n\nBelow is a screenshot of the **Debug Console** showing an event published on an encrypted channel.\n\n![node-e2e-encryption-2](//images.ctfassets.net/1es3ne0caaid/4SZabcpm2h4lXIZNFpr2xr/4efcec0a8a9904e516ba47fc7878a029/node-e2e-encryption-2.png)\n\n\nKindly take a look at the images above and spot the difference. Seen any yet? In the first image which shows the **Debug Console** for a public channel, you can see the data being sent to Pusher Channels contains some fields - `title`, `content` and `createdAt`. Now take a look at the second image, you will notice those fields are no longer present but instead you have a bunch of non-human readable content your application obviously didn’t create.  The field called `ciphertext` is what the data you sent to Pusher Channels was converted to. The word `ciphertext` outside this discourse refers to encrypted and/or garbled data.\n\n\n## Understanding encrypted channels\n\nAs depicted above, an advantage of an encrypted channel is the ability to send messages only the server SDK and any of your connected clients can read. No one else - including Pusher -  will be able to read the messages.\n\n\u003e Remember that a client has to go through the authentication process too.\n\nPusher Channels uses one of the current top encryption algorithms available and that is [Secretbox](https://nacl.cr.yp.to/secretbox.html). On the server side, the application author is meant to provide an encryption key to be used for the data encryption. This encryption key never gets to Pusher servers, which is why you are the only one that can read messages in an encrypted channel.\n\nBut a question. If the encryption key never gets to Pusher servers, how is a connected client able to subscribe to an event in an encrypted channel and read/decrypt the message? The answer resides in the authentication process. During authentication, a shared secret key is generated based off the master encryption key and the channel name. The generated shared secret key will be used to encrypt the data before being offloaded to Pusher Channels. \n\nThe shared secret is also sent as part of a successful authentication response as the client SDK will need to store it as it will be used for decrypting encrypted messages it receives. Again notice that since the encryption key never leaves your server, there is no way Pusher or any other person can read the messages if they don’t go through the authentication process - which is going to be done by the client side SDK.\n\n\n\u003e Note that this shared secret is channel specific. For each channel subscribed to, a new shared secret is generated.\n\nHere is a sample response:\n\n\n```json    \n    {\n      \"auth\": \"3b65aa197f334949f0ef:ffd3094d43e1bb21d5eb849c3debcbba0f7dd32bddeb0bb7dd8441516029853d\",\n      \"channel_data\": {\n        \"user_id\": \"10\",\n        \"user_info\": {\n          \"random\": \"random\"\n        }\n      },\n      \"shared_secret\": \"oB4frIyBUiYVzbUSBFCBl7U5BxzW8ni6wIrO4UaYIeo=\"\n    }\n```     \n\nApart from privacy and security, another benefit encrypted channels provide is message authenticity and protection against forgery. So there is maximum guarantee that whatever message is being received was published by someone who has access to the encryption key.\n\n\n## Implementing encrypted channels\n\nTo show encrypted channels in practice, we will build a live feed application. The application will consist of a server and client. The server will be written in Node. \n\nBefore getting started, it will be nice to be aware of some limitations imposed by an encrypted channel. They are:\n\n- Channel name(s) must begin with `private-encrypted-`. Examples include `private-encrypted-dashboard` or `private-encrypted-grocery-list`.  If you provide an encryption key but fail to follow the naming scheme, your data will not be encrypted.\n- [Client events](https://pusher.com/docs/client_api_guide/client_events#trigger-events) cannot be triggered\n- Channel and event names are not encrypted. This is for good reasons as events need to be dispatched to right clients and making sure an event in the Pusher Channels namespace  - `pusher:` - cannot be used.\n\nBefore proceeding, you will need to create a new directory called `pusher-encrypted-channels-node` . It can be done by issuing the following command in a terminal:\n\n\n```    \n    $ mkdir pusher-encrypted-channels-node\n```    \n\n\n## Prerequisites\n\n\n- Node `\u003e=8.0`\n- A [Pusher account](https://dashboard.pusher.com)\n- OpenSSL tool.\n\n\n\u003e If you are a Windows user, please note that you can make use of Git Bash since it comes with the OpenSSL toolkit.\n\n\n## Building the server\n\nThe first thing to do is to create a [Pusher Channels](https://pusher.com/channels) account if you don’t have one already. You will need to take note of your app keys and secret as we will be using them later on in the tutorial.\n\nIn the `pusher-encrypted-channels-node` directory, you will need to create another directory called `server`.\n\nThe next step of action is to create a `.env` file to contain the secret and key gotten from the dashboard. You should paste in the following contents:\n\n```\n    // pusher-encrypted-channels-node/server/variable.env\n    PUSHER_APP_ID=\"PUSHER_APP_ID\"\n    PUSHER_APP_KEY=\"PUSHER_APP_KEY\"\n    PUSHER_APP_SECRET=\"PUSHER_APP_SECRET\"\n    PUSHER_APP_CLUSTER=\"PUSHER_APP_CLUSTER\"\n    PUSHER_APP_SECURE=\"1\"\n    PUSHER_CHANNELS_ENCRYPTION_KEY=\"PUSHER_CHANNELS_ENCRYPTION_KEY\"\n```    \n\n`PUSHER_CHANNELS_ENCRYPTION_KEY`  will be the master encryption key used to generate the shared secret and it should be difficult to guess. It is also required to be a 32 byte encryption key. You can generate a suitable encryption key with the following command:\n\n\n```    \n    $ openssl rand -base64 24\n```    \n\nYou will also need to install some dependencies - the Pusher NodeJS SDK , Express and another for parsing the `variable.env` file you previously created. You can grab those dependencies by running:\n\n\n```    \n    $ npm init -y\n    $ npm install express body-parser cors dotenv pusher -S\n```    \n\nYou will need to create an `index.js` file and paste in the following content:\n\n```javascript\n    // pusher-encrypted-channels-node/server/index.js\n    \n    require('dotenv').config({ path: 'variable.env' });\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      useTLS: true,\n      encryptionMasterKey: process.env.PUSHER_CHANNELS_ENCRYPTION_KEY,\n    });\n    \n    const app = express();\n    \n    app.use(cors());\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    const titles = [];\n    \n    app.post('/pusher/auth', function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n    \n    app.post('/feed', (req, res) =\u003e {\n      const title = req.body.title;\n      const body = req.body.content;\n    \n      if (title === undefined) {\n        res\n          .status(400)\n          .send({ message: 'Please provide your post title', status: false });\n        return;\n      }\n    \n      if (body === undefined) {\n        res\n          .status(400)\n          .send({ message: 'Please provide your post body', status: false });\n        return;\n      }\n    \n      if (title.length \u003c= 5) {\n        res.status(400).send({\n          message: 'Post title should be more than 5 characters',\n          status: false,\n        });\n        return;\n      }\n    \n      if (body.length \u003c= 6) {\n        res.status(400).send({\n          message: 'Post body should be more than 6 characters',\n          status: false,\n        });\n        return;\n      }\n    \n      const index = titles.findIndex(element =\u003e {\n        return element === title;\n      });\n    \n      if (index \u003e= 0) {\n        res\n          .status(400)\n          .send({ message: 'Post title already exists', status: false });\n        return;\n      }\n    \n      titles.push(title.trim());\n      pusher.trigger('private-encrypted-feeds', 'items', {\n        title: title.trim(),\n        body: body.trim(),\n        time: new Date(),\n      });\n    \n      res\n        .status(200)\n        .send({ message: 'Post was successfully created', status: true });\n    });\n    \n    app.set('port', process.env.PORT || 5200);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running on port ${server.address().port}`);\n    });\n```    \n\nIn the above, we create an HTTP server with two endpoints:\n\n\n- `/pusher/auth` for authentication of client SDKs.\n- `/feed` for the addition of a new feed item.\n\n\n\u003e Note that the feed items will not be stored in a persistent database but in memory instead\n\nYou should be able to run the server now. That can be done with:\n\n\n```    \n    $ node index.js\n```    \n\n\n## Building the client\n\nThe client is going to contain three pages:\n\n\n- A dashboard page.\n- A form page for adding new feed items.\n- A feed page for displaying feed items in realtime as received from the encrypted channel.\n\nYou will need to create a directory called `client`. That can be done with:\n\n\n```    \n    $ mkdir client\n```    \n\nTo get started, we will need to build the form page to allow new items to be added. You will need to create a file called `new.html` with:\n\n\n```    \n    $ touch new.html\n```    \n\nIn the newly created `new.html` file, paste the following content:\n\n```html\n    // pusher-encrypted-channels-node/client/new.html\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003ePusher realtime feed\u003c/title\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /\u003e\n        \u003clink rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\" /\u003e\n        \u003cbase href=\"/\" /\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.2/css/bulma.min.css\"\u003e\n    \u003cstyle\u003e\n    .hidden { display: none }\n    \u003c/style\u003e\n      \u003cbody\u003e\n          \u003csection class=\"section\"\u003e\n              \u003cdiv class=\"container\"\u003e\n    \u003cdiv class=\"columns\"\u003e\n      \u003cdiv class=\"column is-5\"\u003e\n        \u003ch3 class=\"notification\"\u003eCreate a new post\u003c/h3\u003e\n        \u003cdiv class=\"notification is-success hidden\" id=\"success\"\u003e\u003c/div\u003e\n        \u003cdiv class=\"is-danger notification hidden\" id=\"error\"\u003e\u003c/div\u003e\n        \u003cform id=\"feed-form\"\u003e\n          \u003cdiv class=\"field\"\u003e\n            \u003clabel class=\"label\"\u003eTitle : \u003c/label\u003e\n            \u003cdiv class=\"control\"\u003e\n              \u003cinput\n                class=\"input\"\n                type=\"text\"\n                placeholder=\"Post title\"\n                name=\"title\"\n                id=\"title\"\n              /\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n    \n          \u003cdiv\u003e\u003clabel\u003eMessage: \u003c/label\u003e\u003c/div\u003e\n          \u003cdiv\u003e\n            \u003ctextarea\n              rows=\"10\"\n              cols=\"70\"\n              name=\"content\"\n                 id=\"content\"\n            \u003e\u003c/textarea\u003e\n          \u003c/div\u003e\n    \n    \n    \u003cbutton id=\"submit\" class=\"button is-info\"\u003e\n      Send\n    \u003c/button\u003e\n        \u003c/form\u003e\n              \u003c/div\u003e\n      \u003cdiv class=\"is-7\"\u003e\u003c/div\u003e\n           \u003c/section\u003e\n      \u003c/body\u003e\n      \u003cscript src=\"app.js\"\u003e\u003c/script\u003e\n    \u003c/html\u003e\n```    \n\nThis is as simple as can be. We reference the Bulma CSS library, we create a form with an input and text field. Finally we link to a non-existent file called `app.js` - we will create that in a bit.\n\nTo view what this file looks like, you should navigate to the `client` directory and run the following command:\n\n\n```    \n    $ python -m http.server 8000\n```    \n\n\n\u003e Here I used Python’s inbuilt server but you are free to use whatever.  For example you can also make use of `http-server` which can be installed via `npm i http-server` after which you should run `http-server`.\n\nYou should visit `localhost:8000/new.html` . You should be presented with something similar to the image below:\n\n![node-e2e-encryption-3](//images.ctfassets.net/1es3ne0caaid/7rU2SpAF4G2TQeXMaAT7Ac/57b8b26c5e916d3b4126aca0d5159a9f/node-e2e-encryption-3.png)\n\nAs said earlier, we linked to a non-existent file `app.js`, we will need to create it and fill it with some code. Create the `app.js` file with:\n\n\n```    \n    $ touch app.js\n```    \n\nIn the newly created file, paste the following:\n\n```javascript\n    // pusher-encrypted-channels-node/client/app.js\n    \n    (function() {\n      const submitFeedBtn = document.getElementById('feed-form');\n      const isDangerDiv = document.getElementById('error');\n      const isSuccessDiv = document.getElementById('success');\n    \n      if (submitFeedBtn !== null) {\n        submitFeedBtn.addEventListener('submit', function(e) {\n          isDangerDiv.classList.add('hidden');\n          isSuccessDiv.classList.add('hidden');\n          e.preventDefault();\n          const title = document.getElementById('title');\n          const content = document.getElementById('content');\n    \n          if (title.value.length === 0) {\n            isDangerDiv.classList.remove('hidden');\n            isDangerDiv.innerHTML = 'Title field is required';\n            return;\n          }\n    \n          if (content.value.length === 0) {\n            isDangerDiv.classList.remove('hidden');\n            isDangerDiv.innerHTML = 'Content field is required';\n            return;\n          }\n    \n          fetch('http://localhost:5200/feed', {\n            method: 'POST',\n            body: JSON.stringify({ title: title.value, content: content.value }),\n            headers: {\n              'Content-Type': 'application/json',\n            },\n          }).then(\n            function(response) {\n              if (response.status === 200) {\n                isSuccessDiv.innerHTML = 'Feed item was successfully added';\n                isSuccessDiv.classList.remove('hidden');\n                setTimeout(function() {\n                  isSuccessDiv.classList.add('hidden');\n                }, 1000);\n                return;\n              }\n    \n              response.json().then(data =\u003e {\n                isDangerDiv.innerHTML = data.message;\n                isDangerDiv.classList.remove('hidden');\n              });\n            },\n            function(error) {\n              isDangerDiv.innerHTML = 'Could not create feed item';\n              isDangerDiv.classList.remove('hidden');\n            }\n          );\n        });\n      }\n    })();\n```    \n\nIn the above, we validate the form whenever the **Send** button is clicked. If the form contains valid data, it is sent to the Node server for processing. The server will store it and trigger a message to Pusher Channels. \n\nGo ahead and submit the form. If successful and you are on the **Debug Console**, you will notice a JSON that contains a nonce and cipher text - the encrypted information. A visual reprensentation is presented below: \n\n![node-e2e-encryption-4](//images.ctfassets.net/1es3ne0caaid/5LhTkqFzdCXBbWSc5f7PzX/495e7653384fd80ad448944881e62b29/node-e2e-encryption-4.png)\n\nThe next point of action will be to create the feeds page so entries can be viewed in realtime. You will need to create a file called `feed.html`. That can be done with:\n\n\n```    \n    $ touch feed.html\n```    \n\nIn the new file, paste the following HTML code:\n\n```html\n    // pusher-encrypted-channels-node/client/feed.html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003ePusher realtime feed\u003c/title\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /\u003e\n        \u003clink rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\" /\u003e\n        \u003cbase href=\"/\" /\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.2/css/bulma.min.css\"\u003e\n      \u003cbody\u003e\n          \u003csection class=\"section\"\u003e\n              \u003cdiv class=\"container\"\u003e\n           \u003ch1 class=\"notification is-info\"\u003eYour feed\u003c/h1\u003e\n    \u003cdiv class=\"columns\"\u003e\n      \u003cdiv class=\"column is-7\"\u003e\n        \u003cdiv id=\"feed\"\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n              \u003c/div\u003e\n           \u003c/section\u003e\n      \u003c/body\u003e\n      \u003cscript src=\"https://js.pusher.com/4.3/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.1.0/handlebars.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"app.js\"\u003e\u003c/script\u003e\n    \u003c/html\u003e\n```    \n\nThis page is basically empty. It will be updated by the Channels client SDK as it receives data. We are linking to the Pusher Channels client SDK and Handlebars. Handlebars is used to compile templates we will inject into the page. \n\nTo be able to receive and update the feeds page with data the `app.js` file has to be updated to make use of Pusher Channels. In `app.js` , append the following code:\n\n```javascript\n    // pusher-encrypted-channels-node/client/app.js\n    \n    // Sample template to be injected\n    // below the code we already have in this file\n      const tmpl = `\n          \u003cdiv class=\"box\"\u003e\n            \u003carticle class=\"media\"\u003e\n              \u003cdiv class=\"media-left\"\u003e\n                \u003cfigure class=\"image is-64x64\"\u003e\n                  \u003cimg src=\"https://bulma.io/images/placeholders/128x128.png\" alt=\"Image\" /\u003e\n                \u003c/figure\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"media-content\"\u003e\n                \u003cdiv class=\"content\"\u003e\n                  \u003cp\u003e\n                    \u003cstrong\u003e{{title}}\u003c/strong\u003e\n                    \u003csmall\u003e{{time}}\u003c/small\u003e \u003cbr /\u003e\n                    {{body}}\n                  \u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/article\u003e\n          \u003c/div\u003e\n    `;\n    \n      const APP_KEY = 'PUSHER_APP_KEY';\n      const APP_CLUSTER = 'PUSHER_APP_CLUSTER';\n    \n      const pusher = new Pusher(APP_KEY, {\n        cluster: APP_CLUSTER,\n        authEndpoint: 'http://localhost:5200/pusher/auth',\n      });\n    \n      const channel = pusher.subscribe('private-encrypted-feeds');\n      const template = Handlebars.compile(tmpl);\n      const feedDiv = document.getElementById('feed');\n    \n      channel.bind('items', function(data) {\n        console.log(data);\n        const html = template(data);\n    \n        const divElement = document.createElement('div');\n        divElement.innerHTML = html;\n    \n        feedDiv.appendChild(divElement);\n      });\n```    \n\n\n\u003e Remember to replace both `PUSHER_CLUSTER` and `PUSHER_KEY` with your credentials\n\nWith the addition above, the entire `app.js` should look like:\n\n```javascript\n    // pusher-encrypted-channels-node/client/app.js\n    \n    (function() {\n      const submitFeedBtn = document.getElementById('feed-form');\n      const isDangerDiv = document.getElementById('error');\n      const isSuccessDiv = document.getElementById('success');\n    \n      if (submitFeedBtn !== null) {\n        submitFeedBtn.addEventListener('submit', function(e) {\n          isDangerDiv.classList.add('hidden');\n          isSuccessDiv.classList.add('hidden');\n          e.preventDefault();\n          const title = document.getElementById('title');\n          const content = document.getElementById('content');\n    \n          if (title.value.length === 0) {\n            isDangerDiv.classList.remove('hidden');\n            isDangerDiv.innerHTML = 'Title field is required';\n            return;\n          }\n    \n          if (content.value.length === 0) {\n            isDangerDiv.classList.remove('hidden');\n            isDangerDiv.innerHTML = 'Content field is required';\n            return;\n          }\n    \n          fetch('http://localhost:5200/feed', {\n            method: 'POST',\n            body: JSON.stringify({ title: title.value, content: content.value }),\n            headers: {\n              'Content-Type': 'application/json',\n            },\n          }).then(\n            function(response) {\n              if (response.status === 200) {\n                isSuccessDiv.innerHTML = 'Feed item was successfully added';\n                isSuccessDiv.classList.remove('hidden');\n                setTimeout(function() {\n                  isSuccessDiv.classList.add('hidden');\n                }, 1000);\n                return;\n              }\n    \n              response.json().then(data =\u003e {\n                isDangerDiv.innerHTML = data.message;\n                isDangerDiv.classList.remove('hidden');\n              });\n            },\n            function(error) {\n              isDangerDiv.innerHTML = 'Could not create feed item';\n              isDangerDiv.classList.remove('hidden');\n            }\n          );\n        });\n      }\n    \n      const tmpl = `\n          \u003cdiv class=\"box\"\u003e\n            \u003carticle class=\"media\"\u003e\n              \u003cdiv class=\"media-left\"\u003e\n                \u003cfigure class=\"image is-64x64\"\u003e\n                  \u003cimg src=\"https://bulma.io/images/placeholders/128x128.png\" alt=\"Image\" /\u003e\n                \u003c/figure\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"media-content\"\u003e\n                \u003cdiv class=\"content\"\u003e\n                  \u003cp\u003e\n                    \u003cstrong\u003e{{title}}\u003c/strong\u003e\n                    \u003csmall\u003e{{time}}\u003c/small\u003e \u003cbr /\u003e\n                    {{body}}\n                  \u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/article\u003e\n          \u003c/div\u003e\n    `;\n    \n      const APP_KEY = 'PUSHER_APP_KEY';\n      const APP_CLUSTER = 'PUSHER_APP_CLUSTER';\n    \n      const pusher = new Pusher(APP_KEY, {\n        cluster: APP_CLUSTER,\n        authEndpoint: 'http://localhost:5200/pusher/auth',\n      });\n    \n      const channel = pusher.subscribe('private-encrypted-feeds');\n      const template = Handlebars.compile(tmpl);\n      const feedDiv = document.getElementById('feed');\n    \n      channel.bind('items', function(data) {\n        console.log(data);\n        const html = template(data);\n    \n        const divElement = document.createElement('div');\n        divElement.innerHTML = html;\n    \n        feedDiv.appendChild(divElement);\n      });\n    })();\n```    \n\nYou can go ahead to open the `feed.html` page on a tab and `new.html` in another. Watch closely as whatever data you submit in `new.html` appears in `feed.html`. You can also keep an eye on the **Debug Console** to make sure all data is encrypted.\n\nTo make this app a little more polished, add an `index.html` page. You can find the source code at the accompanying [GitHub repository](https://github.com/adelowo/pusher-encrypted-channels-node) of this tutorial.\n\n\n## Conclusion\n\nIn this tutorial, I introduced you to a lesser known feature of Pusher Channels - end to end encryption with encrypted channels. We also built an application that uses encrypted channels instead of the regular public channels you might be used to. To learn more about encrypted channels, kindly visit its [documentation](https://pusher.com/docs/client_api_guide/client_encrypted_channels).\n\nAs always, the entire code for this tutorial can be found on [GitHub](https://github.com/adelowo/pusher-encrypted-channels-node).","metaTitle":"End to end encryption in Node.js with Pusher Channels","metaDescription":"Learn how Pusher Channels support varying encryption levels, from public to fully encrypted. Build a simple demo using Node, sending fully encrypted messages to a message feed."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3gf9alVghihS36meGPMwy5","type":"Entry","createdAt":"2019-04-02T18:15:31.049Z","updatedAt":"2019-04-02T18:15:31.049Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live subscription count down with Angular","url":"live-countdown-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"projectRepo":"https://github.com/dongido001/subscription-count-down","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2019-04-02","description":"Use Angular 7, Node and Channels to build a live subscription countdown. The app features two interfaces: a signup dashboard, and a countdown view, showing how many places are left. The count decreases by one with every signup.","prerequisite":"You will need Node 8+ and the Angular CLI installed on your machine.","content":"\nIn this tutorial, I will walk you through how you can add a realtime subscription count down functionality to your Angular application. In the app, we’ll have a page that displays the subscribers status, that is, the number of slots left. Then we will have another page for users to register themselves. Once the number of users that are registered is equal to the target of users that we want, then we close the registration in realtime.\n\nAt times, we need to present things to our users in a realtime manner so they know beforehand when things tend to happen. Consider that we are building an app where there are limited resources and we need maybe a limited amount of user. In such cases, It’s a better idea to let the user know what is happening in realtime. That is showing the user the slots that are remaining.  \n\nHere is a preview of what we are going to build:\n\n![angular-sub-count-demo-1](//images.ctfassets.net/1es3ne0caaid/39TIM9HVCx9anxoFhZBQbA/f5f85e0c34a157fb563a2adfca5ade6a/angular-sub-count-demo-1.gif)\n\n## Prerequisite\n\nYou are required to have a basic knowledge of the following technologies to be able to follow along with this tutorial comfortably:\n\n- JavaScript\n- [Angular](https://angular.io/)\n- [Node.js](https://nodejs.org/) version 8.** or greater\n- [Channels](https://pusher.com/channels) for realtime functionality\n- [Express](https://expressjs.com/) for the Node server\n- [TypeScript](https://www.typescriptlang.org/)\n\n\n## Setting up\n\nLet’s get your system ready. First check that you have Node installed by typing the below command in a terminal on your system:\n\n```\n    $ node --version\n```\n\nThe above command should print out the version of Node you have installed. If otherwise, you don’t have Node, visit the [Node.js](https://nodejs.org/)’s website and install the latest version of Node to your system.\n\nNext, let’s install the Angular [CLI](https://cli.angular.io/). Angular provides a CLI that makes scaffolding of new Angular project and also working with Angular easier.\n\nInstall the Angular CLI globally to your system if you don’t have it installed already by executing the below command to a terminal on your system.\n\n```\n    $ npm install -g @angular/cli\n```\n\nIf that was successful, you should now have the Angular command available globally on your system as `ng`.\n\nNow use the Angular CLI command to create a new Angular project:\n\n```\n    $ ng new subscription-count-down\n```\n\nChoose **yes** for the prompt that asks if you **Would like to add Angular routing** and choose **CSS** for the stylesheet format. Then give it some minute to finalize the process.\n\n![angular-sub-count-options](//images.ctfassets.net/1es3ne0caaid/75Q9lcSssR1qGcTv8U4PY3/dc2d200c9fb3dddb61fef9f35ef839b1/angular-sub-count-options.png)\n\nFinally, cd into the newly created project and start up the app:\n\n```\n    $ cd subscription-count-down\n    $ ng serve --open\n```\n\nThe app should now be available at [http://localhost:4200](http://localhost:42000) displaying a default Angular page like below:\n\n![angular-sub-count-landing-page](//images.ctfassets.net/1es3ne0caaid/5FFTqx0gD0F7lgNwWduSm1/ec42abd797b1ebf19a60ca0f8ec48a77/angular-sub-count-landing-page.png)\n\nThe  `src/app/app.component.ts` file is the default component file that renders the page above.\n\n## Getting your Pusher keys\n\nWe’ll be using [Channels](https://pusher.com/channels)’s pub/sub messaging feature to add realtime functionality to our app. The next thing we’ll do is to get our Channels API keys.\n\nHead over to [Channels](https://pusher.com/channels) website and create a free account if you don’t have one already. Once you are logged into your [Dashboard](https://dashboard.pusher.com/), create a new app and get the API keys of the app. \n\nThe keys are in this format:\n\n```\n    appId=\u003cappId\u003e\n    key=\u003ckey\u003e\n    secret=\u003csecret\u003e\n    cluster=\u003ccluster\u003e\n```\n\nTake note of these keys because we’ll be making use of them soon.\n\nNext, add the API key to the environment file so we can reference it from other files when we need it by replacing the content with below:\n\n```typescript\n    // src/environments/environment.ts\n    \n    export const environment = {\n      production: false,\n      apiUrl: 'http://localhost:3000',\n      PUSHER_API_KEY: '\u003cPUSHER_API_KEY\u003e',\n      PUSHER_API_CLUSTER: '\u003cPUSHER_APP_CLUSTER\u003e'\n    };\n```\n\nMake sure to replace `\u003cPUSHER_API_KEY\u003e` and `\u003cPUSHER_APP_CLUSTER\u003e` placeholders with your correct API details.\n\nIn the object file above, the `apiUrl` property is the URL where our Node server will be running on which we’ll be creating later on.\n\nFinally, add the pusher client SDK to the Angular app:\n\n```\n    $ npm install pusher-js\n```\n\n\u003e You should run the command while in the root folder of the project from a command line.\n\n\n## Creating the Node server\n\nWe need a server to be able to trigger events to Channels and also for creating and storing users. For the sake of brevity, we’ll use SQLite for our database. And we’ll be using Node for our server.\n\nTo set up a Node server, open up a new terminal, then run the following command in your terminal:\n\n```\n    # Create a new folder\n    $ mkdir subscription-count-down-server\n    \n    # Navigate to the folder\n    $ cd subscription-count-down-server\n    \n    # Create the Node entry file\n    $ touch app.js\n    \n    # Create a package.js file\n    $ touch package.json\n    \n    # Create the database file\n    $ touch app.db\n    \n    # Create the environment file for holding sensitive data\n    $ touch .env\n```\n\nThese are the basic files we will need for the Node server. \n\nNow add to the `package.json` file the necessary dependencies for the app:\n\n```json\n    {\n      \"name\": \"count-down-server\",\n      \"version\": \"1.0.0\",\n      \"description\": \"Count Down Server\",\n      \"main\": \"app.js\",\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\",\n        \"serve\": \"node app.js\"\n      },\n      \"keywords\": [\n        \"Node\",\n        \"Count-Down\",\n        \"Pusher\"\n      ],\n      \"author\": \"Onwuka Gideon\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.3\",\n        \"cors\": \"^2.8.5\",\n        \"dotenv\": \"^6.2.0\",\n        \"express\": \"^4.16.4\",\n        \"pusher\": \"^2.2.0\",\n        \"sqlite3\": \"^4.0.6\"\n      }\n    }\n```\n\nNext, add your Channels key to the `.env` file:\n\n```\n    PUSHER_APP_ID=\u003cappId\u003e\n    PUSHER_APP_KEY=\u003ckey\u003e\n    PUSHER_APP_SECRET=\u003csecret\u003e\n    PUSHER_APP_CLUSTER=\u003ccluster\u003e\n```\n\nMake sure to replace `\u003cappId\u003e`, `\u003ckey\u003e`, `\u003csecret\u003e`, and `\u003ccluster\u003e` placeholders with your correct API details.\n\nNow import the dependencies we added earlier to the `app.js` file:\n\n```javascript\n    // app.js\n    \n    require('dotenv').config()\n    \n    const express = require('express')\n    const cors = require('cors')\n    const bodyParser = require('body-parser')\n    const sqlite3 = require('sqlite3').verbose();\n    const Pusher = require('pusher');\n```\n\nThen, set up [express](https://expressjs.com/), which is a Node.js web application framework for building web apps. \n\n```javascript\n    // app.js\n    \n    // [...]\n    \n    const app = express()\n    const port = 3000\n    \n    app.use(cors())\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    app.get('/', (req, res) =\u003e res.status(200).send({msg: \"Count down server!\"}))\n    \n    app.listen(port, () =\u003e console.log(`Example app listening on port ${port}!`))\n    \n    // [...]\n```\n\nIn the above code, we created a new route - `/` - which will render a JSON content once visited. We are only using it to test if express is working.\n\nNow install the dependencies and start up the app:\n\n```\n    # Instal dependencies\n    $ npm install\n    \n    # Start up the app\n    $ npm run serve\n```\n\nIf everything went well, the app should be accessible from http://localhost:3000/. If you visit the URL, you should get an output as below which shows that it works!\n\n```\n    {\n      \"msg\": \"Count down server!\"\n    }\n```\n\nNext, initialize the database:\n\n```javascript\n    // app.js\n    // [...]\n    \n    const db = new sqlite3.Database('./app.db', sqlite3.OPEN_READWRITE);\n    \n    db.run(\"CREATE TABLE IF NOT EXISTS subscriptions (email VARCHAR(90), name VARCHAR(90))\")\n    \n    // [...]\n```\n\nThe first line above opens a new SQLite connection. While the second line checks if the subscriptions table exists, if it does not exists, it will create it.\n\nNext, initialize Pusher server SDK:\n\n```javascript\n    // app.js\n    \n    // [...]\n    \n    const pusher = new Pusher({\n        appId: process.env.PUSHER_APP_ID,\n        key: process.env.PUSHER_APP_KEY,\n        secret: process.env.PUSHER_APP_SECRET,\n        cluster: process.env.PUSHER_APP_CLUSTER,\n        encrypted: true\n    });\n    \n    // [...]\n```\n\nNow create a new route that we can use to get the total number of users that have subscribed and the number of targets we want. The target is the maximum number of users that we want to be able to subscribe:\n\n```javascript\n    // app.js\n    \n    // [...]\n    \n    app.get('/userCount', (req, res) =\u003e {\n        db.each(`SELECT count(*) AS userCount FROM subscriptions`, (err, row) =\u003e {\n            res.status(201).send({userCount: row.userCount, targetCount: 5}) \n        });\n    })\n    \n    // [...]\n```\n\nHere, we hard-coded the `targetCount` to five. If the total number of registered user reaches five, no other user should be able to register again.\n\nNext, create a new endpoint named `addUser` for adding new users:\n\n```javascript\n    // app.js\n    \n    // [...]\n    \n    app.post('/addUser',  (req, res) =\u003e {\n        const email = req.body.email;\n        const name = req.body.name;\n    \n        db.run(`INSERT INTO subscriptions (name, email) values ('${name}', '${email}')`)\n        \n        db.serialize(function() {\n            db.each(`SELECT count(*) AS userCount FROM subscriptions`, (err, row) =\u003e {\n                res.status(201).send({userCount: row.userCount}) \n            });\n        });\n    })\n    \n    // [...]\n```\n\nFinally, create a new endpoint named `/pusher/trigger` for triggering events to Channels.\n\n```javascript\n    // app.js\n    \n    // [...]\n    \n    app.post('/pusher/trigger', (req, res) =\u003e {\n        const channel_name = req.body.channel_name;\n        const event_name = req.body.event_name;\n        const data = req.body.data;\n     \n        pusher.trigger(channel_name, event_name, data);\n        \n        res.status(200).send(data)\n    })\n    \n    // [...]\n```\n\nTo trigger events to Channels, we call the trigger method from the Pusher SDK passing along the name of the channel where we want to trigger the event to, the name of the event, and some data to pass along with the event.  \n\nRestart the server so the new changes will be picked up.\n\n## Creating the app client \n\nBefore we start building the app components, let’s create the service for our app. We’ll create two services - count-down service and pusher service. The count-down service will contain services for the entire component while the pusher service will contain services that are related to Channels, say we want to trigger event or listen to an event.\n\n### Creating our app service\n\nIn Angular, [services](https://angular.io/tutorial/toh-pt4) are great ways of sharing information among classes that don't know each other. \n\nNow, create the count-down service using the Angular CLI command:\n\n```\n    # Make sure you are in the root folder of the project\n    $ ng generate service count-down\n```\n\nYou should now see a new file that is created named `src/app/count-down.service.ts`.\n\nInside the file, replace its content with the below code:\n\n```typescript\n    // src/app/count-down.service.ts\n    \n    import { Injectable } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    import { Observable } from 'rxjs';\n    \n    import { environment } from '../environments/environment';\n    \n    interface userCount {\n      userCount: number,\n      targetCount: number\n    }\n    \n    export interface userData {\n      name: String;\n      email: String;\n    }\n    \n    @Injectable({\n      providedIn: 'root'\n    })\n    export class CountDownService {\n    \n      constructor(private http: HttpClient) { }\n    \n      getUserCount (): Observable\u003cuserCount\u003e {\n        return this.http.get\u003cuserCount\u003e(`${environment.apiUrl}/userCount`)\n      }\n    \n      addNewUser (userData: userData): Observable\u003cuserData\u003e {\n        return this.http.post\u003cuserData\u003e(`${environment.apiUrl}/addUser`, userData)\n      }\n    }\n```    \n\nIn the preceding code:\n\n\n- We imported the following modules:\n  - HttpClient - the [HttpClient](https://angular.io/guide/http) is an Angular module that helps users to communicate with backend services over the HTTP protocol.\n  - Observable - we’ll use the [Observable](https://angular.io/guide/observables) module to handle asynchronous requests.\n  - environment - this is the environment key that we add to the `src/app/environments/environment.ts` file earlier.\n  \n- Next, we created two interfaces, namely `userCount` and `userData`, which defines the type of datatype they accept. \n  - Recall from our Node server, we created an endpoint named `/userCount` which returns the `userCount` and `targetCount` as an object. This is the format that we have defined in the `userCount` interface.\n  - The `userData` defines the data for a new user.\n  \n- Next, we injected the HttpClient class into the class using `constructor(private http: HttpClient) { }` so that we can access it using `*this*.http` in any part in the class.\n\n\n- Finally, we created two methods: \n  - `getUserCount` - this method will make a request to the `/userCount` endpoint to get the number of registered users and the target count.\n  - `addNewUser` - when we want to add a new user, we will call the function, passing along the user’s name and email as an object.\n\n### Pusher service\n\nNext, create the Pusher service\n\n```\n    $ ng generate service pusher\n```\n\nNow update the content of the service file:\n\n```typescript\n    // src/app/pusher.service.ts\n    \n    import { Injectable } from '@angular/core';\n    import Pusher from 'pusher-js';\n    import { HttpClient } from '@angular/common/http';\n    import { Observable } from 'rxjs';\n    \n    import { environment } from '../environments/environment';\n    \n    @Injectable({\n      providedIn: 'root'\n    })\n    export class PusherService {\n    \n      pusher: any\n    \n      constructor(private http: HttpClient) { \n        this.pusher = new Pusher(environment.PUSHER_API_KEY, {\n          cluster: environment.PUSHER_API_CLUSTER,\n          forceTLS: true\n        });\n      }\n    \n      subScribeToChannel(channelName: String, events: String[], cb: Function) {\n        var channel = this.pusher.subscribe(channelName);\n        \n        events.forEach( event =\u003e {\n          channel.bind(event, function(data) {\n            cb(data)\n          });\n        })\n      }\n    \n      triggerEvent(channelName: String, event: String, data: Object): Observable\u003cObject\u003e {\n        return this.http.post(`${environment.apiUrl}/pusher/trigger`, {\n          channel_name: channelName,\n          event_name: event,\n          data: data\n        })\n      }\n    }\n```\n\nIn the preceding code:\n\n- We injected the HttpClient module just as we did in the previous service file.\n- Next, we initialize the Pusher client JavaScript SDK in the constructor of the class.\n- Next, we created two functions:\n  -  `subScribeToChannel()` - using this function we can subscribe to a channel and start to listen for events on that channel. The function accepts three parameters. The first one which is the channel name you want to subscribe to. The second parameter is an array of events you want to listen for. The last parameter is a callback function that is called when an event is triggered.\n  - `triggerEvent()` - if we want to trigger an event, we only need to call this function passing along the channel name, the event name, and the data we want to send along. The function makes an HTTP request to our Node server to trigger the event.\n\nNow let’s build the client-facing part of the app which we are doing with Angular. We’ll divide the app into two components:\n\n- CountDown component. This component will hold the count number and is the first page that will be shown to users.\n- Register component. This component will contain the form and logic for adding new users.\n\nBefore you can use the [HttpClient](https://angular.io/api/common/http/HttpClient), we need to import the Angular [HttpClientModule](https://angular.io/api/common/http/HttpClientModule). Import the HttpClientModule to the `app.module.ts` file:\n\n```typescript\n    // src/app/app.module.ts\n    \n    [...]\n    import { HttpClientModule } from '@angular/common/http';\n    \n      [...]\n      imports: [\n        [...]\n        HttpClientModule,\n        [...]\n      ],\n    \n    [...]\n```\n\n### CountDown component\n\nCreate the CountDown component using the Angular CLI command:\n\n```\n    $ ng generate component count-down\n```\n\nThe above command will create a new folder, `src/app/count-down/`, and generates the four files for the `CountDownComponent`.\n\nThe `count-down.component.ts` is the main component class, which includes the other three files to itself. This is the file that will contain the logic for the component.\n\nAll our markup definitions go inside the `count-down.component.html` file. CSS styles for the component will reside in the `count-down.component.css` file. If we need to write a test for the component, we can do that in the `count-down.component.spec.ts` file.\n\nUpdate the route to render this component:\n\n```typescript\n    // src/app/app-routing.module.ts\n    \n    // [...]\n    \n    import { CountDownComponent } from './count-down/count-down.component';\n    \n    const routes: Routes = [\n      { path: '', component: CountDownComponent }\n    ];\n    \n    // [...]\n```\n\nNext, remove the default rendered page and replace it with the below mark-up:\n\n```html\n    \u003c!-- src/app/app.component.html --\u003e\n    \n    \u003cdiv class=\"container\"\u003e\n      \u003cdiv class=\"content\"\u003e \n        \u003crouter-outlet\u003e\u003c/router-outlet\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nIf you now reload the page, you see it renders the html file for the CountDown component:\n\n![angular-sub-count-countdown-works](//images.ctfassets.net/1es3ne0caaid/2uCl9Qbi6LFnXkwMzvGxsn/c1e94e08f8c00129380b8031e6896626/angular-sub-count-countdown-works.png)\n\nNext, update the markup for the CountDown component:\n\n```html\n    \u003c!-- src/app/count-down/count-down.component.html --\u003e\n    \n    \u003cdiv\u003e\n        \u003cdiv *ngIf=\"!countDown\"\u003e Registration closed! \u003c/div\u003e\n        \u003cnav *ngIf=\"countDown\"\u003e\n          \u003ca routerLink=\"/register\"\u003eRegister\u003c/a\u003e\n        \u003c/nav\u003e\n      \u003ch1\u003eSubscription count down:\u003c/h1\u003e\n      \u003cdiv class=\"count-down\"\u003e {{ countDown }} \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nNow add some styling to the app:\n\n```css\n    /* src/style.css */\n    \n    h1 {\n        color: #369;\n        font-family: Arial, Helvetica, sans-serif;\n        font-size: 200%;\n    }\n    h2, h3 {\n        color: #369;\n        font-family: Arial, Helvetica, sans-serif;\n        font-weight: lighter;\n    }\n    body {\n        overflow: hidden;\n    }\n    body, input[type=\"text\"], button {\n        color: #888;\n        font-family: Cambria, Georgia;\n    }\n    /* everywhere else */\n    * {\n        font-family: Arial, Helvetica, sans-serif;\n    }\n    .container {\n        display: grid;\n        height: 100vh;\n        width: 100vw;\n    }\n    .content {\n        align-self: center;\n        justify-self: center;\n    }\n    .count-down {\n        text-align: center;\n        font-size: 300%;\n    }\n    .from-input {\n        display: block;\n        width: 300px;\n        margin: 8px;\n        padding: 15px;\n        font-size: 100%;\n    }\n    .from-submit {\n        background: #369;\n        color: white;\n        font-family: Arial, Helvetica, sans-serif;\n        font-size: 140%;\n        border-radius: 3px;\n        width: 100%;\n        padding: 10px;\n    }\n    .success-message {\n        background: green; \n        color: antiquewhite; \n        padding: 10px;\n        border-radius: 3px;\n        margin: 4px;\n    }\n```\n\nReload the page to see how it looks now.\n\nWe have been able to render the CountDown component, but it does not show real data yet. And also it is showing “registration is closed!”. It should show that when the users registered is equal to the target users and otherwise show a registration form.\n\nNow, let’s work on this component. \n\nImport the two services we created earlier to the component file:\n\n```typescript\n    // src/app/count-down/count-down.component.ts\n    \n    // [...]\n    \n    import { CountDownService } from '../count-down.service';\n    import { PusherService } from '../pusher.service';\n    \n    // [...]\n```\n\nNotice that we are rendering the `{{ countDown }}` variable to the markup file, which does not have any effect because we have not defined the variable. This variable will hold the number of slots remaining.\n\nDefine the variable:\n\n```typescript\n    // src/app/count-down/count-down.component.ts\n    \n    // [...]\n    \n    export class CountDownComponent implements OnInit {\n      countDown: number;\n    \n    // [...]\n```\n\nNext, inject the services we imported to the component class so we can access them easily:\n\n```typescript\n    // src/app/count-down.component.ts\n    \n    // [....]\n      constructor(\n        private countDownService: CountDownService,\n        private pusherService: PusherService\n      ) { }\n    // [....]\n```\n\nNow we want to get the countDown value from the Node server when the page loads and also listen to new events when a new user subscribes.\n\n```typescript\n    // src/app/count-down.component.ts\n    \n    // [....] \n     ngOnInit() {\n        this.countDownService.getUserCount()\n          .subscribe(data =\u003e {\n            this.countDown = data.targetCount - data.userCount\n          });\n        \n        this.pusherService.subScribeToChannel('count-down', ['newSub'], (data) =\u003e {\n          // console.log(data)\n          this.countDown -= 1;\n        });\n      }\n    // [....]\n```\n\nNow when the component is mounted, we call the `getUserCount()` function from the countDownService service to get the targetCount and userCount, which we then use to calculate the number of the slots that are remaining. \n\nThen, we call the `pusherService.subScribeToChannel()` function to the count-down  and start listening for a newSub event. Once there is a newSub event, we reduce the `countDown` value by one. And all this happens in realtime. Note that the channel name ('count-down') and event name ('newSub') can be anything you like. You only need to make sure that you trigger the same value on the Node server if you change it.\n\nIf you reload the page, you should see now that it shows the remaining slots and also a link where a user can register form.\n\n![angular-sub-count-sub-count](//images.ctfassets.net/1es3ne0caaid/1whfRj5Uapdv19B9D4MFwI/2f71a3c572ed91496887c97b17fcba2a/angular-sub-count-sub-count.png)\n\n\n### Register component\n\nWe also need another component that renders the form for a user to subscribe.\n\nCreate the Register component using the Angular CLI command:\n\n```\n    $ ng generate component register\n```\n\nAdd a route that renders the Register component:\n\n```typescript\n    // src/app/app-routing.module.ts\n    [...]\n    \n    import { RegisterComponent } from './register/register.component';\n    \n    [...]\n      const routes: Routes = [\n        { path: 'register', component: RegisterComponent },\n        { path: '', component: CountDownComponent}\n      ];\n    [...]\n```\n\nNow, if we visit http://localhost:4200/register, it should show the register page.\n\nNext, import the two services we created earlier to the component file:\n\n```typescript\n    // src/app/register/register.component.ts\n    \n    // [...]\n    \n    import { CountDownService, userData } from '../count-down.service';\n    import { PusherService } from '../pusher.service';\n    \n    // [...]\n```\n\nDefine the input form detail for two-way binding:\n\n```typescript\n    // [...]\n    \n    export class RegisterComponent implements OnInit {\n      userData: userData = {\n        name: '',\n        email: ''\n      };\n    \n      userAdded: Boolean = false\n    \n    // [...]\n```\n \n The `userData` is the input we are expecting from the user as they fill the registration form. We’ll use `userAdded` Boolean to toggle between when to show the user a success message as the submit the form.\n \n Next, inject the service we imported to the class:\n \n```typescript\n    // src/app/register/register.component.ts\n    \n    // [....]\n      constructor(\n        private countDownService: CountDownService,\n        private pusherService: PusherService\n      ) { }\n    // [....]\n```\n \n Next, add a function that will be called when a user clicks to submit the form:\n \n```typescript\n    // [...] \n      ngOnInit() {}\n    \n      addUser(): void {\n        this.countDownService.addNewUser(this.userData)\n          .subscribe( data =\u003e {\n            this.userAdded = true \n            this.userData = {name:'', email:''}\n          })\n        \n        this.pusherService.triggerEvent('count-down', 'newSub', this.userData)\n            .subscribe( data =\u003e {\n              console.log(data)\n            })\n      }\n    \n    // [...]\n```\n\nIn the function we created above, we call the `addNewUser` function from the countDownService to register the user. Then finally, we trigger an event to Channels so it notifies all connected user that a new user has just registered so that the count down number is updated.\n \nNext, update the HTML mark up for the form:\n \n```html\n    \u003c!-- src/app/register/register.component.html --\u003e\n    \u003cdiv\u003e\n      \u003cnav\u003e\n        \u003ca routerLink=\"/\"\u003eGot to count-down\u003c/a\u003e\n      \u003c/nav\u003e\n      \u003cdiv\u003e\n        \u003cdiv class=\"success-message\" *ngIf=\"userAdded\"\u003e User Created Successfully! \u003c/div\u003e\n        \u003cform\u003e \n          \u003cinput \n            type=\"text\" \n            class=\"from-input\" \n            placeholder=\"Email\" \n            [(ngModel)]=\"userData.email\" \n            name=\"email\"\n          /\u003e\n          \u003cinput \n            type=\"text\" \n            class=\"from-input\" \n            placeholder=\"Name\" \n            [(ngModel)]=\"userData.name\" \n            name=\"name\"\n          /\u003e\n          \u003cbutton class=\"from-submit\" (click)=\"addUser()\"\u003e Submit \u003c/button\u003e\n        \u003c/form\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nFinally, add the FormsModule, which is required when working with forms:\n\n```typescript\n    // src/app/app.module.ts\n    \n    [...]\n    import { FormsModule } from '@angular/forms';\n    \n      [...]\n      imports: [\n        [...]\n        FormsModule,\n        [...]\n      ],\n    \n    [...]\n```\n\nAnd that is it! Let’s test what we have built:\n\n- Start up the Node server if it is not running already - `npm run serve`\n- Start the frontend app if it’s not running, then open the app in two or more different tabs in your browser.\n- In one of the tabs, navigate to the register page and then fill the form and submit. The number of slots remaining should reduce in realtime.\n\n\n## Conclusion\n\nIn this tutorial, we have learned how to add realtime functionality to our Angular apps by building a subscription count down app. There are other use-cases where this same approach can be applied to. Feel free to them explore with the knowledge that you have gained.\n\nYou can get the complete code of the app on [GitHub](https://github.com/dongido001/subscription-count-down).","metaTitle":"Build a live subscription count down with Angular","metaDescription":"Use Angular 7, Node and Channels to build a live subscription countdown. The app features two interfaces: a signup dashboard, and a countdown view, showing how many places are left. The count decreases by one with every signup."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4CCoqI4zE8NbARFYXDrNx9","type":"Entry","createdAt":"2019-03-28T16:22:45.686Z","updatedAt":"2019-03-28T16:22:45.686Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a live multiplayer quiz app in React Native","url":"live-multiplayer-quiz-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNQuiz","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6nDfV1cd5C6464wgCoOQii","type":"Entry","createdAt":"2018-02-12T15:08:13.901Z","updatedAt":"2018-02-26T12:31:12.764Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Gaming","url":"gaming","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2019-03-28","description":"Use React Native and Node to build a live cross-platform quiz app. Admins are able to add questions and start the game. Users have a short amount of time to respond. At the end, a scoreboard is displayed, showing the top player.","prerequisite":"You will need Node 11+, Yarn and React Native installed on your machine.","content":"In this tutorial, we’ll create a quiz app which can cater to multiple users in realtime. \n\n\n## Prerequisites\n\nKnowledge of Node.js and React Native is required to follow this tutorial. This also means your machine needs to have the React Native development environment.\n\nWe’ll be using [Yarn](https://yarnpkg.com/en/) to install dependencies. \n\nYou’ll also need a [Pusher app instance](https://pusher.com/channels) and an [ngrok account](https://ngrok.com/). Enable client events on your Pusher app so we can trigger events from the app itself.\n\nThe following package versions are used in this tutorial:\n\n\n- Node 11.2.0\n- Yarn 1.13.0\n- React Native 0.58.5\n\n\n## App overview\n\nWe will create a multi-player quiz app. Users will be given 10 multiple choice questions and they have to select the correct answer to each one as they are displayed on the screen.\n\nWhen the user opens the app, they have to log in. This serves as their identification in the game:\n\n![react-native-quiz-1](//images.ctfassets.net/1es3ne0caaid/4HEVLB5VTnFk0gE4NN6VpV/cbd2200a7b4b8e983980d6ed5569d9c0/react-native-quiz-1.png)\n\nOnce they’re logged in, a loading animation will be displayed while waiting for the admin to trigger the questions. \n\nThe game starts when the first question is displayed on the screen. As soon as the user picks an option, either correct or wrong mark will be displayed next to the option they selected. Once the user selects an option, they can no longer select another one. Users have 10 seconds to answer each question. If they answer after the countdown (displayed in the upper right corner), their answer won’t be considered.\n\n![react-native-quiz-2](//images.ctfassets.net/1es3ne0caaid/2ls9Qhi5bWTtaevyI9dPWk/57929ac14013c77e5af01e1e35365e1d/react-native-quiz-2.gif)\n\nAfter all 10 questions have been displayed, the top users are displayed and that ends the game:\n\n![react-native-quiz-3](//images.ctfassets.net/1es3ne0caaid/6XIrr1HxmjNhP4NkwktMcr/6548adc564125f35044e81edc009c398/react-native-quiz-3.png)\n\n\n## Setting up \n\nClone the repo and switch to the starter  branch to save time in setting up the app and adding boilerplate code:\n\n```\n    git clone https://github.com/anchetaWern/RNQuiz\n    cd RNQuiz\n    git checkout starter\n```\n\nNext, install the dependencies and link them up:\n\n```\n    yarn\n    react-native eject\n    react-native link react-native-config\n    react-native link react-native-gesture-handler\n    react-native link react-native-vector-icons\n```\n\nThe starter branch already has the two pages set up. All the styles that the app will use are also included. So all we have to do is add the structure and logic.\n\nNext, update your `android/app/src/main/AndroidManifest.xml` and add the permission for accessing the network state. This is required by Pusher:\n\n```xml\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"com.rnquiz\"\u003e\n        \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n        \u003cuses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\"/\u003e\n        \u003cuses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/\u003e \u003c!-- add this --\u003e\n    \u003c/manifest\u003e\n```\n\nNext, update `android/app/build.gradle` to include the `.gradle` file for the [React Native Config](https://github.com/luggit/react-native-config) package. We’ll be using it to use `.env` configuration files inside the project:\n\n```gradle\n    apply from: \"../../node_modules/react-native/react.gradle\"\n    apply from: project(':react-native-config').projectDir.getPath() + \"/dotenv.gradle\"\n```\n\nNext, create a `.env` file at the root of the React Native project and add your Pusher app credentials:\n\n```\n    PUSHER_APP_KEY=\"YOUR PUSHER APP KEY\"\n    PUSHER_APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\nOnce you’re done with setting up the app, do the same for the server as well:\n\n```\n    cd server\n    yarn\n```\n\nThe server doesn’t have boilerplate code already set up so we’ll write everything from scratch.\n\nLastly, create a `server/.env` file and add your Pusher app credentials:\n\n```\n    APP_ID=\"YOUR PUSHER APP ID\"\n    APP_KEY=\"YOUR PUSHER APP KEY\"\n    APP_SECRET=\"YOUR PUSHER APP SECRET\"\n    APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\n## Quiz server\n\nBefore we add the code for the actual app, we have to create the server first. This is where we add the code for creating the database and displaying the UI for creating quiz items.\n\nNavigate inside the `server` directory if you haven’t already. Inside, create an `index.js` file and add the following:\n\n```javascript\n    const express = require(\"express\"); // server framework\n    const bodyParser = require(\"body-parser\"); // for parsing the form data\n    const Pusher = require(\"pusher\"); // for sending realtime messages\n    const cors = require(\"cors\"); // for accepting requests from any host\n    const mustacheExpress = require('mustache-express'); // for using Mustache for templating\n    \n    const { check } = require('express-validator/check'); // for validating user input for the quiz items\n    \n    const sqlite3 = require('sqlite3').verbose(); // database engine\n    const db = new sqlite3.Database('db.sqlite'); // database file in the root of the server directory\n```\n\nNext, add the code for using the server packages we’ve imported above:\n\n```javascript\n    const app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(cors());\n    app.engine('mustache', mustacheExpress());\n    app.set('view engine', 'mustache');\n    app.set('views', __dirname + '/views'); // set the location of mustache files\n```\n\nSet up Pusher:\n\n```javascript\n    const pusher = new Pusher({\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret: process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER\n    });\n```\n\nNext, add the code for authenticating users with Pusher and logging them into the server:\n\n```javascript\n    var users = []; // this will store the username and scores for each user\n    \n    app.post(\"/pusher/auth\", (req, res) =\u003e {\n      const socketId = req.body.socket_id;\n      const channel = req.body.channel_name;\n    \n      const auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n    \n    app.post(\"/login\", (req, res) =\u003e {\n      const username = req.body.username;\n      console.log(username + \" logged in\");\n    \n      if (users.indexOf(username) === -1) { // check if user doesn't already exist\n        console.log('users: ', users.length);\n        users.push({\n          username,\n          score: 0 // initial score\n        });\n      }\n    \n      res.send('ok');\n    });\n```\n\nNext, add the code for creating the database. Note that this step is optional as I have already added the `db.sqlite` file at the root of the `server` directory. That’s the database file which contains a few questions that I used for testing. If you want to start anew, simply create an empty `db.sqlite` file through the command line (or your text editor) and access the below route on your browser:\n\n```javascript\n    app.get(\"/create-db\", (req, res) =\u003e {\n      db.serialize(() =\u003e {\n        db.run('CREATE TABLE [quiz_items] ([question] VARCHAR(255), [optionA] VARCHAR(255), [optionB] VARCHAR(255), [optionC] VARCHAR(255), [optionD] VARCHAR(255), [answer] CHARACTER(1))');\n      });\n    \n      db.close();\n      res.send('ok');\n    });\n```\n\nNext, add the route for displaying the UI for adding quiz items. This uses the Mustache Express library to render the `quiz_creator` template inside the `views` folder:\n\n```javascript\n    app.get(\"/create-quiz\", (req, res) =\u003e {\n      res.render('quiz_creator');\n    });\n```\n\nHere’s the code for the quiz creator template. Create a `views/quiz_creator.mustache` file and add the following:\n\n```html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"/\u003e\n      \u003ctitle\u003eQuiz Creator\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"\u003e\n      \u003cstyle\u003e\n      .hidden {\n        display: none;\n      }\n      \u003c/style\u003e\n    \u003c/head\u003e\n    \n    \u003cbody\u003e\n    \n      \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row align-items-center\"\u003e\n          \u003cdiv class=\"col col-lg-12\"\u003e\n            \u003ch1\u003eCreate Quiz\u003c/h1\u003e\n    \n            \u003cdiv class=\"alert alert-success hidden\"\u003e\n            Item created!\n            \u003c/div\u003e\n    \n            \u003cform method=\"POST\" action=\"/save-item\"\u003e\n              \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"question\"\u003eQuestion\u003c/label\u003e\n                \u003cinput type=\"text\" id=\"question\" name=\"question\" class=\"form-control\" required\u003e\n              \u003c/div\u003e\n    \n              \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"option_a\"\u003eOption A\u003c/label\u003e\n                \u003cinput type=\"text\" id=\"option_a\" name=\"option_a\" class=\"form-control\" required\u003e\n              \u003c/div\u003e\n    \n              \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"option_b\"\u003eOption B\u003c/label\u003e\n                \u003cinput type=\"text\" id=\"option_b\" name=\"option_b\" class=\"form-control\" required\u003e\n              \u003c/div\u003e\n    \n              \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"option_c\"\u003eOption C\u003c/label\u003e\n                \u003cinput type=\"text\" id=\"option_c\" name=\"option_c\" class=\"form-control\" required\u003e\n              \u003c/div\u003e\n    \n              \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"option_d\"\u003eOption D\u003c/label\u003e\n                \u003cinput type=\"text\" id=\"option_d\" name=\"option_d\" class=\"form-control\" required\u003e\n              \u003c/div\u003e\n    \n              Correct Answer\n    \n              \u003cdiv class=\"form-group\"\u003e\n                \u003cdiv class=\"form-check\"\u003e\n                  \u003cinput class=\"form-check-input\" type=\"radio\" name=\"answer\" id=\"correct_a\" value=\"A\"\u003e\n                  \u003clabel class=\"form-check-label\" for=\"correct_a\"\u003e\n                    A\n                  \u003c/label\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv class=\"form-check\"\u003e\n                  \u003cinput class=\"form-check-input\" type=\"radio\" name=\"answer\" id=\"correct_b\" value=\"B\"\u003e\n                  \u003clabel class=\"form-check-label\" for=\"correct_b\"\u003e\n                    B\n                  \u003c/label\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv class=\"form-check\"\u003e\n                  \u003cinput class=\"form-check-input\" type=\"radio\" name=\"answer\" id=\"correct_c\" value=\"C\"\u003e\n                  \u003clabel class=\"form-check-label\" for=\"correct_c\"\u003e\n                    C\n                  \u003c/label\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv class=\"form-check\"\u003e\n                  \u003cinput class=\"form-check-input\" type=\"radio\" name=\"answer\" id=\"correct_d\" value=\"D\"\u003e\n                  \u003clabel class=\"form-check-label\" for=\"correct_d\"\u003e\n                    D\n                  \u003c/label\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n    \n              \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003eSave Item\u003c/button\u003e\n            \u003c/form\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \n      \u003cscript\u003e\n        if (window.location.hash) {\n          document.querySelector('.alert').classList.remove('hidden');\n        }\n      \u003c/script\u003e\n    \n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNote that we haven’t really used the templating engine in the above template. But it’s a good practice to use it if you’re expecting to display dynamic data.\n\nNext, add the route where the form data will be submitted. This has a simple validation where the length of each text field should not be less than one. Once the data is validated, we insert a new quiz item to the table:\n\n```javascript\n    // server/index.js\n    const required = { min: 1 }; // minimum number of characters required for each field\n    \n    app.post(\"/save-item\", [\n      check('question').isLength(required),\n      check('option_a').isLength(required),\n      check('option_b').isLength(required),\n      check('option_c').isLength(required),\n      check('option_d').isLength(required),\n      check('answer').isLength(required) // the letter of the answer (e.g. A, B, C, D)\n    ], (req, res) =\u003e {\n    \n      const { question, option_a, option_b, option_c, option_d, answer } = req.body;\n      db.serialize(() =\u003e {\n        var stmt = db.prepare('INSERT INTO quiz_items VALUES (?, ?, ?, ?, ?, ?)');\n        stmt.run([question, option_a, option_b, option_c, option_d, answer]);\n      });\n    \n      res.redirect('/create-quiz#ok'); // redirect back to the page for creating a quiz item\n    });\n```\n\nNext, add the code for sending the questions. This selects ten random rows from the table and sends them at an interval (every 13 seconds). The users will only have ten seconds to answer each question, but we included an additional three seconds to cater for the latency (delay) in the network and in the app:\n\n```javascript\n    const channel_name = 'quiz-channel';\n    const question_timing = 13000; // 10 secs to show + 3 secs latency\n    const question_count = 10;\n    const top_users_delay = 10000; // additional delay between displaying the last question and the top users\n    \n    app.get(\"/questions\", (req, res) =\u003e {\n      var index = 1;\n      db.each('SELECT question, answer, optionA, optionB, optionC, optionD, answer FROM quiz_items ORDER BY random() LIMIT ' + question_count, (err, row) =\u003e {\n        timedQuestion(row, index);\n        index += 1;\n      });\n    \n      // next: add code for sending top users\n    \n      res.send('ok');\n    });\n    \n    // next: add code for timedQuestion function\n```\n\nAfter all the questions have been sent, we send the top three users to all users who are currently subscribed to the quiz channel:\n\n```javascript\n    setTimeout(() =\u003e {\n      console.log('now triggering score...');\n      const sorted_users_by_score = users.sort((a, b) =\u003e b.score - a.score)\n      const top_3_users = sorted_users_by_score.slice(0, 1); // replace 1 with 3\n    \n      pusher.trigger(channel_name, 'top-users', {\n        users: top_3_users\n      });\n    }, (question_timing * (question_count + 2)) + top_users_delay);\n```\n\nHere’s the code for the `timedQuestion` function we used earlier. All it does is send each individual row from the table:\n\n```javascript\n    const timedQuestion = (row, index) =\u003e {\n      setTimeout(() =\u003e {\n        Object.assign(row, { index });\n    \n        pusher.trigger(\n          channel_name,\n          'question-given',\n          row\n        );\n    \n      }, index * question_timing);\n    }\n```\n\nNext, add the route for incrementing user scores. This finds the user with the specified username in the array of users and then increments their score:\n\n```javascript\n    app.post(\"/increment-score\", (req, res) =\u003e {\n      const { username } = req.body;\n      console.log(`incremented score of ${username}`);\n    \n      const user_index = users.findIndex(user =\u003e user.username == username);\n      users[user_index].score += 1;\n    \n      res.send('ok');\n    });\n```\n\nNote that all users make a request to the above route every time they answer correctly so it’s a potential bottleneck. This is especially true if there are thousands of users using the app at the same time. If you’re planning to create a multi-player quiz app of your own, you might want to use Pusher on the server side to listen for messages sent by users. From there, you can increment their scores as usual.\n\nLastly, run the server on a specific port:\n\n```javascript\n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\n## Quiz app\n\nNow that we’ve added the server code, we’re ready to work on the actual app. As mentioned earlier, the boilerplate code has already been set up so all we have to do is add the UI structure and the logic.\n\n### Login screen\n\nOpen the login screen file and add the following:\n\n```javascript\n    // src/screens/Login.js\n    import React, { Component } from \"react\";\n    import { View, Text, TextInput, TouchableOpacity, Alert } from \"react-native\";\n    \n    import Pusher from \"pusher-js/react-native\"; // for using Pusher\n    import Config from \"react-native-config\"; // for using .env config file\n    \n    import axios from 'axios'; // for making http requests\n    \n    const pusher_app_key = Config.PUSHER_APP_KEY;\n    const pusher_app_cluster = Config.PUSHER_APP_CLUSTER;\n    const base_url = \"YOUR NGROK HTTPS URL\";\n    \n    class LoginScreen extends Component {\n      static navigationOptions = {\n        header: null\n      };\n    \n      state = {\n        username: \"\",\n        enteredQuiz: false\n      };\n    \n      constructor(props) {\n        super(props);\n        this.pusher = null;\n      }\n    \n      // next: add render()\n    }\n    \n    export default LoginScreen;\n```\n\nNext, render the login UI:\n\n```javascript\n    render() {\n      return (\n        \u003cView style={styles.wrapper}\u003e\n          \u003cView style={styles.container}\u003e\n            \u003cView style={styles.main}\u003e\n              \u003cView\u003e\n                \u003cText style={styles.label}\u003eEnter your username\u003c/Text\u003e\n                \u003cTextInput\n                  style={styles.textInput}\n                  onChangeText={username =\u003e this.setState({ username })}\n                  value={this.state.username}\n                /\u003e\n              \u003c/View\u003e\n    \n              {!this.state.enteredQuiz \u0026\u0026 (\n                \u003cTouchableOpacity onPress={this.enterQuiz}\u003e\n                  \u003cView style={styles.button}\u003e\n                    \u003cText style={styles.buttonText}\u003eLogin\u003c/Text\u003e\n                  \u003c/View\u003e\n                \u003c/TouchableOpacity\u003e\n              )}\n    \n              {this.state.enteredQuiz \u0026\u0026 (\n                \u003cText style={styles.loadingText}\u003eLoading...\u003c/Text\u003e\n              )}\n            \u003c/View\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nWhen the user clicks on the login button, we authenticate them via Pusher and log them into the server. As you’ve seen in the server code earlier, this allows us to add the user to the `users` array which is then used later to filter for the top users:\n\n```javascript\n    enterQuiz = async () =\u003e {\n      const myUsername = this.state.username;\n    \n      if (myUsername) {\n        this.setState({\n          enteredQuiz: true // show loading animation\n        });\n    \n        this.pusher = new Pusher(pusher_app_key, {\n          authEndpoint: `${base_url}/pusher/auth`,\n          cluster: pusher_app_cluster,\n          encrypted: true\n        });\n        \n        try {\n          await axios.post(\n            `${base_url}/login`, \n            {\n              username: myUsername\n            }\n          );\n          console.log('logged in!');\n        } catch (err) {\n          console.log(`error logging in ${err}`);\n        }\n        \n        // next: add code for subscribing to quiz channel\n    \n      }\n    };\n```\n\nNext, listen for Pusher’s channel subscription success event and navigate the user to the Quiz screen. We pass the Pusher reference, username and quiz channel as navigation params so we can also use it in the Quiz screen:\n\n```javascript\n    this.quizChannel = this.pusher.subscribe('quiz-channel');\n    this.quizChannel.bind(\"pusher:subscription_error\", (status) =\u003e {\n      Alert.alert(\n        \"Error\",\n        \"Subscription error occurred. Please restart the app\"\n      );\n    });\n    \n    this.quizChannel.bind(\"pusher:subscription_succeeded\", () =\u003e {     \n      this.props.navigation.navigate(\"Quiz\", {\n        pusher: this.pusher,\n        myUsername: myUsername,\n        quizChannel: this.quizChannel\n      });\n    \n      this.setState({\n        username: \"\",\n        enteredQuiz: false // hide loading animation\n      });\n    });\n```\n\n### Quiz screen\n\nThe Quiz screen is the main meat of the app. This is where the questions are displayed for the user to answer. Start by importing all the packages we need:\n\n```javascript\n    // src/screens/Quiz.js\n    import React, { Component } from \"react\";\n    import { View, Text, ActivityIndicator, TouchableOpacity } from \"react-native\";\n    import axios from 'axios';\n    import Icon from 'react-native-vector-icons/FontAwesome';\n    \n    const option_letters = ['A', 'B', 'C', 'D'];\n    const base_url = \"YOUR NGROK HTTPS URL\";\n```\n\nNext, initialize the state:\n\n```javascript\n    class Quiz extends Component {\n      \n      static navigationOptions = {\n        header: null\n      };\n    \n      state = {\n        display_question: false, // whether to display the questions or not\n        countdown: 10, // seconds countdown for answering the question\n        show_result: false, // whether to show whether the user's answer is correct or incorrect\n        selected_option: null, // the last option (A, B, C, D) selected by the user\n        disable_options: true, // whether to disable the options from being interacted on or not\n        total_score: 0, // the user's total score\n       \n        index: 1, // the index of the question being displayed\n        display_top_users: false // whether to display the top users or not\n      }\n    \n      // next: add constructor\n    }\n    \n    export default Quiz;\n```\n\nInside the constructor, we get the navigation params that were passed from the login screen earlier. Then we listen for the `question-given` event to be triggered by the server. As you’ve seen earlier, this contains the question data (question, four options, and answer). We just set those into the state so they’re displayed. After that, we immediately start the countdown so that the number displayed on the upper right corner counts down every second:\n\n```javascript\n    constructor(props) {\n      super(props);\n      const { navigation } = this.props;\n      \n      this.pusher = navigation.getParam('pusher');\n      this.myUsername = navigation.getParam('myUsername');\n      this.quizChannel = navigation.getParam('quizChannel');\n    \n      this.quizChannel.bind('question-given', ({ index, question, optionA, optionB, optionC, optionD, answer }) =\u003e {\n        \n        this.setState({\n          display_question: true, // display the question in the UI\n          countdown: 10, // start countdown\n          selected_option: null,\n          show_result: false, \n          disable_options: false,\n          \n          // question to display\n          index, \n          question, \n          optionA, \n          optionB, \n          optionC, \n          optionD, \n          answer\n        });\n        \n        // start the countdown\n        const interval = setInterval(() =\u003e {\n          this.setState((prevState) =\u003e {\n            const cnt = (prevState.countdown \u003e 0) ? prevState.countdown - 1 : 0\n            if (cnt == 0) {\n              clearInterval(interval);\n            }\n    \n            return {\n              countdown: cnt\n            }\n          });\n        }, 1000);\n    \n      });\n      \n      // next: add listener for top users\n    }\n```\n\nNext, listen for the `top-users` event. This will display the names and scores of the top users:\n\n```javascript\n    this.quizChannel.bind('top-users', ({ users }) =\u003e {\n      console.log('received top users: ', JSON.stringify(users));\n      this.setState({\n        top_users: users,\n        display_top_users: true\n      });\n    });\n```\n\nNext, render the UI. When the user is first redirected from the login screen, only the total score, default countdown value, and the activity indicator are displayed. When the server starts sending questions, the activity indicator is hidden in place of the question and its options. Lastly, when the server sends the top users, the question and its options are hidden in place of the list of top users:\n\n```javascript\n    render() {\n      const { \n        total_score,\n        countdown, \n        index, \n        question, \n        optionA, \n        optionB, \n        optionC, \n        optionD, \n        answer, \n    \n        display_question,\n        top_users,\n        display_top_users\n      } = this.state;\n      \n      const options = [optionA, optionB, optionC, optionD];\n    \n      return (\n        \u003cView style={styles.container}\u003e\n          \n          \u003cView\u003e\n            \u003cText\u003eTotal Score: {total_score}\u003c/Text\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.countdown}\u003e\n            \u003cText style={styles.countdown_text}\u003e{countdown}\u003c/Text\u003e\n          \u003c/View\u003e\n    \n          {\n            !display_question \u0026\u0026\n            \u003cView style={styles.centered}\u003e\n              \u003cActivityIndicator size=\"large\" color=\"#0000ff\" /\u003e\n            \u003c/View\u003e\n          }\n    \n          {\n            display_question \u0026\u0026 !display_top_users \u0026\u0026 \n            \u003cView style={styles.quiz}\u003e\n              {\n                !showAnswer \u0026\u0026\n                \u003cView\u003e\n                  \u003cView\u003e\n                    \u003cText style={styles.big_text}\u003e{question}\u003c/Text\u003e\n                  \u003c/View\u003e\n    \n                  \u003cView style={styles.list_container}\u003e\n                    { this.renderOptions(options, answer) }\n                  \u003c/View\u003e\n                \u003c/View\u003e\n              }\n            \u003c/View\u003e\n          }\n    \n          {\n            display_top_users \u0026\u0026\n            \u003cView style={styles.top_users}\u003e\n              \u003cText style={styles.big_text}\u003eTop Users\u003c/Text\u003e\n              \u003cView style={styles.list_container}\u003e\n              { this.renderTopUsers() }\n              \u003c/View\u003e\n            \u003c/View\u003e\n          }\n              \n        \u003c/View\u003e\n      );\n    }\n```\n\nHere’s the code for rendering the options. Each one executes the `placeAnswer` function when the user clicks on it. As soon as an option is selected, the icon which represents whether they’re correct or not is immediately displayed next to it: \n\n```javascript\n    renderOptions = (options, answer) =\u003e {\n      const { show_result, selected_option, disable_options } = this.state;\n    \n      return options.map((opt, index) =\u003e {\n        const letter = option_letters[index];\n        const is_selected = selected_option == letter;\n        const is_answer = (letter == answer) ? true : false; \n    \n        return (\n          \u003cTouchableOpacity disabled={disable_options} onPress={() =\u003e this.placeAnswer(index, answer)} key={index}\u003e\n            \u003cView style={styles.option}\u003e\n              \u003cText style={styles.option_text}\u003e{opt}\u003c/Text\u003e\n    \n              {\n                is_answer \u0026\u0026 show_result \u0026\u0026 is_selected \u0026\u0026 \u003cIcon name=\"check\" size={25} color=\"#28a745\" /\u003e\n              }\n              \n              {\n                !is_answer \u0026\u0026 show_result \u0026\u0026 is_selected \u0026\u0026 \u003cIcon name=\"times\" size={25} color=\"#d73a49\" /\u003e\n              }\n            \u003c/View\u003e\n          \u003c/TouchableOpacity\u003e\n        );\n      });\n    }\n```\n\nHere’s the `placeAnswer` function. This accepts the index of the selected option (0, 1, 2, or 3) and the letter of the answer. Those are used to determine if the user answered correctly or not. The answer isn’t even considered if the user missed the countdown. If they answered correctly, their total score is incremented by one and the app makes a request to the server to increment the user’s score:\n\n```javascript\n    placeAnswer = (index, answer) =\u003e {\n      \n      const selected_option = option_letters[index]; // the letter of the selected option\n      const { countdown, total_score } = this.state;\n    \n      if (countdown \u003e 0) { // \n        if (selected_option == answer) { \n          this.setState((prevState) =\u003e {\n            return {\n              total_score: prevState.total_score + 1\n            }\n          });\n      \n          axios.post(base_url + '/increment-score', {\n            username: this.myUsername\n          }).then(() =\u003e {\n            console.log('incremented score');\n          }).catch((err) =\u003e {\n            console.log('error occurred: ', e);\n          });\n        } \n      }\n    \n      this.setState({\n        show_result: true, // show whether the user answered correctly or not\n        disable_options: true, // disallow the user from selecting any of the options again\n        selected_option // the selected option (letter)\n      });\n    }\n```\n\nHere’s the code for rendering the top users:\n\n```javascript\n    renderTopUsers = () =\u003e {\n      const { top_users } = this.state;\n      return top_users.map(({ username, score }) =\u003e {\n        return (\n          \u003cView key={username}\u003e\n            \u003cText style={styles.sub_text}\u003e{username}: {score} out of 10\u003c/Text\u003e\n          \u003c/View\u003e\n        );\n      });\n    }\n```\n\n## Running the app\n\nTo run the app, you have to run the server first and expose it to the internet by using ngrok:\n\n```\n    cd server\n    yarn start\n    ~/.ngrok http 5000\n```\n\nIf you haven’t used the `db.sqlite` file I provided in the repo, you have to access `http://localhost:5000/create-db` to create the database (Note: you first have to create an empty `db.sqlite` at the root of the `server` directory). After that, access `http://localhost:5000/create-quiz` and add some quiz items. Add at least 10 items.\n\nNext, update your `src/screens/Login.js` and `src/screens/Quiz.js` file with your ngrok HTTPS URL and run the app:\n\n```\n    react-native run-android\n    react-native run-ios\n```\n\nLastly, access `http://localhost:5000/questions` to start sending the quiz items.\n\n\n## Conclusion\n\nIn this tutorial, we’ve created a multi-player quiz app using Node.js and React Native. Along the way, you learned how to use mustache templates and SQLite database within an Express app. Lastly, you learned how to use Node.js, React Native, and Pusher to easily implement a multi-player quiz app.\n\nYou can view the code on this [GitHub repo](https://github.com/anchetaWern/RNQuiz).","metaTitle":"Creating a live multiplayer quiz app in React Native","metaDescription":"Use React Native and Node to build a live cross-platform quiz app. Admins are able to add questions and start the game. Users have a short amount of time to respond. At the end, a scoreboard is displayed, showing the top player."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"vvcxCOBUSHPTCIhFirmU5","type":"Entry","createdAt":"2019-03-25T17:17:58.561Z","updatedAt":"2020-06-19T13:31:54.155Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a whiteboard Electron app with React - Part 1: Adding the whiteboard","url":"whiteboard-electron-react-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/ElectronWhiteboard","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Od9rZziIoMG4yaQ4EAeok","type":"Entry","createdAt":"2018-02-13T11:31:10.435Z","updatedAt":"2018-02-26T12:31:10.730Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":16,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live UX","url":"live-ux","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2019-03-25","description":"In this two-part series, build a whiteboard app using Node, Electron and React. Users will be able to collaborate in realtime, drawing on a simple canvas. The app also features chat functionality. In part one, create the whiteboard.","prerequisite":"You will need Node and Yarn installed on your machine.","content":"In this tutorial, we’ll take a look at how we can build a whiteboard app using React.\n\n## Prerequisites\n\nBasic knowledge of React is required. We’ll also be using Electron, but you don’t even need to know it since we’re only using it as a container.\n\nYou need [Node](https://nodejs.org/en/) and [Yarn](https://yarnpkg.com/en/) to install packages.\n\nYou’ll also need a [Pusher app instance](https://pusher.com/channels). Enable client events on its settings because we will be triggering events directly from the client side.\n\nOptionally, you need an Ngrok account if you want to test the app with someone outside your network.\n\n\n## App overview\n\nThe whiteboard app will allow the users to communicate their ideas via a canvas similar to a physical whiteboard. Thus, it will have the following tools:\n\n- **Select** - for selecting objects in the canvas so they can be modified or removed.\n- **Pen** - for free-hand drawing.\n- **Rectangle** - for drawing rectangle shapes.\n- **Circle** - for drawing circle shapes.\n- **Text** - for adding text.\n\nHere’s what the final output for this part will look like:\n\n![electron-whiteboard-1-1](//images.ctfassets.net/1es3ne0caaid/5Im2J04E3NEn3FCzt0BXuj/38a72bd337ed43a6f761f797bcf6d98e/electron-whiteboard-1-1.gif)\n\nYou can find the code for this tutorial on its [GitHub repo](https://github.com/anchetaWern/ElectronWhiteboard).\n\nNote that I’ll be using the terms “canvas” and “whiteboard” interchangeably throughout the article, but they will mean the same thing. \n\n\n## Choosing the tool\n\nThe main challenge with building a whiteboard is the implementation of canvas. With plain JavaScript, we have a bunch of options, but only [FabricJS](http://fabricjs.com/) and [Konva](https://konvajs.github.io/) seem to fit the bill. \n\nThe next step is to find out if any of these libraries have decent React integration. Of the two, only Konva meets the requirement with its [React Konva](https://github.com/konvajs/react-konva) library. \n\nThe only problem is I don’t have prior Konva experience and the various elements (for example, rectangle and circle) are actually rendered using components. There’s also no free-drawing tool which is often the most important. \n\nFinally, I found this [React Sketch](https://github.com/tbolis/react-sketch) package from [Thomas](https://github.com/tbolis). It’s exactly what we need to quickly create a whiteboard app. And it uses FabricJS behind the scenes so I know that it’s going to be good since I previously used FabricJS on another project.\n\n\n## Bootstrapping the app\n\nNow that you know why we ended up using React Sketch, it’s time to start building the app. I’ve already created a starter project which has navigation and all the styles already set up. This will serve as the starting point for this tutorial. Go ahead and clone it on your working directory:\n\n```\n    git clone https://github.com/anchetaWern/ElectronWhiteboard\n```\n\nSwitch to the `starter` branch and install the dependencies:\n\n```\n    git checkout starter\n    yarn\n```\n\n## Extending the React Sketch package\n\nIn this section, we’ll extend the React Sketch package in order for it to be able to trigger client events when a whiteboard object is created, updated, or removed. \n\nThis is an optional section since I’ve already included the compiled version of the updated package in the `node_modules/react-sketch/dist` folder of the [part1 branch](https://github.com/anchetaWern/ElectronWhiteboard/blob/part1/node_modules/react-sketch/dist). \n\nIf you’re planning to make use of the same package in the future or you want to learn how the package works, I encourage you to follow along. Otherwise, simply skip to the next section.\n\nIf you decide to skip this section, you need to copy [this file](https://github.com/anchetaWern/ElectronWhiteboard/blob/part1/node_modules/react-sketch/dist/index.js) over to the `node_modules/react-sketch/dist` directory of the project. \n\n### Installing the dependencies\n\nIf you’re still here, the next step is to clone the React Sketch package so we can update it accordingly:\n\n```\n    git clone https://github.com/tbolis/react-sketch.git\n```\n\nIf you’re on Mac, you need to install [Macports](https://guide.macports.org/chunked/installing.macports.html). This software allows you to install various open source software that’s required to compile FabricJS. Go ahead and download the [installer file from this page](https://guide.macports.org/chunked/installing.macports.html) and install it on your machine. Once it’s installed, you need to install the following packages via Macports:\n\n```\n    sudo port install pkgconfig cairo pango libpng jpeg giflib libsrvg\n```\n\nThese are all required to compile FabricJS.\n\nIf you’re on Ubuntu or any other Linux distribution, you won’t have any problem because these open-source tools are native to Linux. But if you don’t have it, you can simply install it via your default way of installing software.\n\nFor Windows, you need to install Node 8.11 because it’s required by [windows-build-tools](https://www.npmjs.com/package/windows-build-tools). This will install Python 2.7 and Visual Studio build tools on your machine:\n\n```\n    npm install -g windows-build-tools\n```\n\nYou also need [node-gyp](https://github.com/nodejs/node-gyp):\n\n```\n    npm install -g node-gyp\n```\n\n### Updating the code\n\nWe’re now ready to update the code. Start by declaring the additional props that we will be supplying to this component:\n\n```javascript\n    // react-sketch/src/SketchField.jsx\n    static propTypes = {\n      // \u003cexisting code\u003e\n      style: PropTypes.object,\n      \n      // add these:\n      onUpdate: PropTypes.func, // function to execute when an object is modified\n      username: PropTypes.string, // username of the current user\n      shortid: PropTypes.func // helper for generating random unique IDs for objects\n    }\n```\n\nNext, update the `_onObjectAdded` function to add a unique ID for an object that was created. Then execute the `onUpdate` function that we will pass as props later on:\n\n```javascript\n    _onObjectAdded = (e) =\u003e {\n      // \u003cexisting code\u003e\n      this._history.keep([obj, state, state])\n      \n      // add these:\n      if (!obj.sender) { \n        const id = this.props.shortid.generate(); \n        Object.assign(obj, { id });\n        this.props.onUpdate(JSON.stringify(obj), 'add', this.props.username, id); \n      }\n    }\n```\n\nThe above function is automatically triggered whenever a new object is added to the canvas. That’s why it’s the perfect place to execute the function that will update the UI of all the other users in the channel. \n\nNote that we’re checking for the non-existence of the `sender` property (username of the user who added the object) in the object before we trigger the function for updating the UI of the other users because it will be a catastrophe if we don’t. \n\nWe already know that the `_onObjectAdded` function is automatically executed every time a new object is added. So if we’re not checking for the existence of the `sender` property, `this.props.onUpdate` will basically ping-pong between the users in the channel. \n\nAs you’ll see in the `src/screens/Whiteboard.js` file later, the `sender` property is being added to the object when the event for updating the canvas (`client-whiteboard-updated`) is received. This effectively prevents the receiver from triggering the same event to all the other users. \n\nDo the same for the `_onObjectModified` function. This function is automatically executed every time an object is updated:\n\n```javascript\n    _onObjectModified = (e) =\u003e {\n      // \u003cexisting code\u003e  \n      this._history.keep([obj, prevState, currState]);\n      // add these:\n      if (!obj.sender) {\n        let strObj = JSON.stringify(obj);\n        this.props.onUpdate(strObj, 'update', this.props.username, obj.id);\n      }\n    }\n```\n\nNext, add a function for getting the currently selected object. This will get called from the `src/screens/Whiteboard.js` file later to get the `id` of the currently selected object for removal. \n\nAs you’ve seen in the `_onObjectAdded` function earlier, this is a unique ID assigned to the object. By using it, all the other users can find the object so they can also remove it from their canvas:\n\n```javascript\n    getSelected = () =\u003e {\n      let canvas = this._fc;\n      let activeObj = canvas.getActiveObject();\n      return activeObj;\n    }\n```\n\nThe `setSelected` function is used for programmatically setting an active (currently selected) object in the canvas. We will call it when the other users in the channel receive the event for updating the whiteboard. \n\nIf the event has a type of `remove`, this function sets the object with the `id` passed in the event as active. From there, we simply use the existing `removeSelected` function to remove the object from the canvas:\n\n```javascript\n    setSelected = (id) =\u003e {\n      let canvas = this._fc;\n      var objToSelect = canvas.getObjects().find((o) =\u003e {\n        return id == o.id;\n      });\n      canvas.setActiveObject(objToSelect);\n      canvas.requestRenderAll();\n    }\n```\n\nNext, add a function for programmatically adding an object to the canvas. This gets fired on all the other users in the channel every time a user adds a new object. Note that each object type has a different way of initialization:\n\n```javascript\n    addObject = (obj) =\u003e {\n    \n      let canvas = this._fc;\n      let shapeData = JSON.parse(obj);\n      \n      let shape = null;\n      const type = this._capsFirstLetter(shapeData.type);\n      if (type == 'Path') {\n        let string_path = '';\n        shapeData.path.forEach((x) =\u003e {\n          string_path += x.join(' ');\n        });\n      \n        shape = new fabric.Path(string_path);\n        delete shapeData.path;\n        shape.set(shapeData);\n      } else if (type == 'I-text') {\n        shape = new fabric.Text(shapeData.text); \n        delete shapeData.text;\n        shape.set(shapeData);\n      } else {\n        // for Rectangle and Circle objects\n        shape = new fabric\\[type\\](shapeData);\n      }\n       \n      canvas.add(shape);\n    }\n```\n\nHere’s the `_capsFirstLetter` function. It’s used to convert the first letter of a string to uppercase so it matches an actual [FabricJS object type](http://fabricjs.com/fabric-intro-part-1#objects):\n\n```javascript\n    _capsFirstLetter = (str) =\u003e {\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n```\n\nNext, add the function for modifying existing objects. This gets called every time an existing object is updated by another user in the channel:\n\n```javascript\n    modifyObject = (obj) =\u003e {\n      \n      let objData = JSON.parse(obj);\n      let canvas = this._fc;\n    \n      var objToModify = canvas.getObjects().find((o) =\u003e {\n        return objData.id == o.id;\n      });\n      objToModify.set(objData); // update the object\n      objToModify.setCoords(); // useful if the object's coordinates in the canvas also changed (usually by moving)\n      canvas.requestRenderAll(); // refresh the canvas so changes will appear\n    }\n```\n\nNext, update the `addText` function to include the `id` to the object. This `id` will be passed from the `src/screens/Whiteboard.js` file later:\n\n```javascript\n    addText = (text, options = {}) =\u003e {\n      // \u003cexisting code\u003e\n      Object.assign(options, opts);\n      iText.set({\n        'id': options.id, // add this\n        // \u003cexisting code\u003e\n      });\n    }\n```\n\n### Building the package\n\nNow we’re ready to install all the dependencies and build the package:\n\n```\n    yarn\n    yarn prebuild\n    yarn build\n```\n\nThis generates a `dist/index.js` file. Copy that file and replace the `node_modules/react-sketch/dist/index.js` file inside the `ElectronWhiteboard` folder with it to update React Sketch in your project. \n\nRemember to do this before you compile the ElectronWhiteboard project using `yarn start` or `yarn build` so it uses the updated version of the package instead of the original one. You can also add a build script to automatically do that if you want.\n\n\n## Login screen\n\nCreate a  `src/screens/Login.js` file and add the following: \n\n```javascript\n    import React, { Component } from \"react\";\n    import { Container, Row, Col, Button, Input } from 'reactstrap';\n    import Pusher from \"pusher-js\";\n    \n    import uniquename from \"../helpers/uniquename\";\n    \n    const channel_name = uniquename();\n    \n    const PUSHER_APP_KEY = process.env.REACT_APP_PUSHER_APP_KEY;\n    const PUSHER_APP_CLUSTER = process.env.REACT_APP_PUSHER_APP_CLUSTER;\n    const BASE_URL = \"http://localhost:5000\";\n    \n    class LoginScreen extends Component {\n    \n      state = {\n        myUsername: \"\",\n        channelName: channel_name,\n        isLoading: false\n      }\n    \n      constructor(props) {\n        super(props);\n        this.pusher = null;\n        this.group_channel = null; // channel for communicating changes to the canvas\n      }\n    \n      // next: add render function\n    \n    }\n```\n\nNext, render the login UI. This will ask for the user’s username and channel they want to enter. Note that when logging in, the channel doesn’t already need to exist:\n\n```javascript\n    render() {\n      return (\n        \u003cContainer\u003e\n          \u003cRow\u003e\n            \u003cCol lg={12}\u003e\n              \u003cdiv className=\"centered\"\u003e\n                \u003cdiv className=\"textInputContainer\"\u003e\n                  \u003cInput \n                    type=\"text\"\n                    placeholder=\"myUsername\"\n                    onChange={this.onUpdateText}\n                    value={this.state.myUsername} /\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv className=\"textInputContainer\"\u003e\n                  \u003cInput \n                    type=\"text\"\n                    placeholder=\"channelName\"\n                    onChange={this.onUpdateText}\n                    value={this.state.channelName} /\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv className=\"buttonContainer\"\u003e\n                  \u003cButton \n                    type=\"button\" \n                    color=\"primary\" \n                    onClick={this.login} \n                    disabled={this.state.isLoading} \n                    block\u003e\n                      {this.state.isLoading ? \"Logging in…\" : \"Login\"}\n                  \u003c/Button\u003e\n                \u003c/div\u003e\n    \n              \u003c/div\u003e\n            \u003c/Col\u003e\n          \u003c/Row\u003e\n        \u003c/Container\u003e\n      );\n    }\n```\n\nHere’s the function for updating the value of the text fields:\n\n```javascript\n    onUpdateText = (evt) =\u003e {\n      const field = evt.target.getAttribute(\"placeholder\");\n      this.setState({\n        [field]: evt.target.value\n      });\n    };\n```\n\nWhen the user logs in, we authenticate them with Pusher so they can trigger events from the client side. Once authenticated, we subscribe them to a common channel where all the changes in the whiteboard will be communicated:\n\n```javascript\n    login = () =\u003e {\n    \n      const { myUsername, channelName } = this.state;\n    \n      this.setState({\n        isLoading: true\n      });\n    \n      this.pusher = new Pusher(PUSHER_APP_KEY, {\n        authEndpoint: `${BASE_URL}/pusher/auth`,\n        cluster: PUSHER_APP_CLUSTER,\n        encrypted: true\n      });\n    \n      this.group_channel = this.pusher.subscribe(`private-group-${channelName}`);\n      this.group_channel.bind(\"pusher:subscription_error\", (status) =\u003e {\n        console.log(\"error subscribing to group channel: \", status);\n      });\n    \n      this.group_channel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n        console.log(\"subscription to group succeeded\");\n        \n        // navigate to the whiteboard screen\n        this.props.navigation.navigate(\"Whiteboard\", {\n          myUsername,\n          pusher: this.pusher,\n          group_channel: this.group_channel\n        });\n    \n      });\n    \n    }\n```\n\nDon’t forget to add a `.env` file at the project root. This contains your Pusher app credentials:\n\n```\n    REACT_APP_PUSHER_APP_KEY=\"YOUR PUSHER APP KEY\"\n    REACT_APP_PUSHER_APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\n### Unique name helper\n\nHere’s the code for the unique name helper:\n\n```javascript\n    // src/helpers/uniquename.js\n    var generateName = require(\"sillyname\");\n    \n    const generateUsername = () =\u003e {\n      const min = 10;\n      const max = 99;\n      const number = Math.floor(Math.random() * (max - min + 1)) + min;\n      const username = generateName().replace(\" \", \"_\") + number;\n      return username;\n    };\n    \n    export default generateUsername;\n```\n\n## Whiteboard screen\n\nNow we’re ready to add the code for the Whiteboard screen. Create a `src/screens/Whiteboard.js` file and add the following:\n\n```javascript\n    import React, { Component } from \"react\";\n    import { Container, Row, Col, Button, Input } from 'reactstrap';\n    import { SketchField, Tools } from 'react-sketch';\n    \n    import { FaMousePointer, FaPen, FaCircle, FaSquare, FaTrash } from 'react-icons/fa';\n    \n    import shortid from 'shortid'; // for generating unique IDs\n```\n\nNext, initialize the state and the instance variables. `this.tools` contains the tools that the users can use to draw objects in the whiteboard. This corresponds to the [object types](http://fabricjs.com/fabric-intro-part-1#objects) available in FabricJS:\n\n```javascript\n    class WhiteboardScreen extends Component {\n    \n      state = {\n        text: '',\n        myUsername: '',\n        tool: Tools.Pencil\n      }\n      \n      constructor(props) {\n        super(props);\n      \n        this.tools = [\n          {\n            name: 'select',\n            icon: \u003cFaMousePointer /\u003e,\n            tool: Tools.Select\n          },\n          {\n            name: 'pencil', \n            icon: \u003cFaPen /\u003e,\n            tool: Tools.Pencil\n          },\n          {\n            name: 'rect',\n            icon: \u003cFaSquare /\u003e,\n            tool: Tools.Rectangle\n          },\n          {\n            name: 'circle',\n            icon: \u003cFaCircle /\u003e,\n            tool: Tools.Circle\n          }\n        ];\n      \n        this.auto_create_tools = ['circle', 'rect']; // tools that will automatically create their corresponding object when selected\n      \n        // next: add settings for auto-created objects\n      }\n    \n      // next: add componentDidMount\n    }\n```\n\nNext, add the default settings for the objects that will be automatically created upon selection. Note that the user can always modify the object afterward so it’s safe to create them with some default settings:\n\n```javascript\n    this.initial_objects = {\n      'circle': { \n        radius: 75, \n        fill: 'transparent', \n        stroke: '#000', \n        strokeWidth: 3, \n        top: 60, \n        left: 500 \n      },\n      \n      'rect': { \n        width: 100, \n        height: 50, \n        fill: 'transparent', \n        stroke: '#000', \n        strokeWidth: 3, \n        top: 100, \n        left: 330 \n      }\n    }\n```\n\nOnce the component is mounted, we get the navigation params that were passed from the login screen earlier:\n\n```javascript\n    componentDidMount() {\n    \n      const { navigation } = this.props;\n      this.myUsername = navigation.getParam(\"myUsername\");\n      this.pusher = navigation.getParam(\"pusher\");\n      this.group_channel = navigation.getParam(\"group_channel\");\n    \n      this.setState({\n        myUsername: this.myUsername\n      });\n    \n      // next: add code for listening for canvas updates\n    }\n```\n\nNext, we listen for the event triggered by the user who updates the canvas. Every time this gets fired, we call the `textGatherer` function. This is a [JavaScript closure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) that allows us to create an internal scope for storing payload data. \n\nWe’re doing this because not all messages contain all the data we need in order to update the canvas. A single object update or creation may require the use of five or more messages in order to send its full data. This is necessary because of Pusher’s 10KB per message limit which we’ll talk about later. \n\nGoing back to the code below, we check for the `is_final` property in the `payload` before we can start processing the message. Having this property in the message means that this is the last part of the message. Only then can we get the contents accumulated by the closure and convert it to an object. \n\nThat way, we can assign additional properties to it before we convert it back to a JSON string so we can pass it to the `addObject` and `modifyObject` functions:\n\n```javascript\n    let textGatherer = this._gatherText();\n    \n    this.group_channel.bind('client-whiteboard-updated', (payload) =\u003e {\n      textGatherer(payload.data);\n    \n      if (payload.is_final) {\n        const full_payload = textGatherer(); // get the gathered text\n        let obj = '';\n        if (full_payload) {\n          obj = JSON.parse(full_payload);\n    \n          if (payload.id) {\n            Object.assign(obj, { id: payload.id, sender: payload.sender });\n          } else {\n            Object.assign(obj, { sender: payload.sender });\n          }\n        }\n        \n        if (payload.action === 'add') {\n          this._sketch.addObject(JSON.stringify(obj));\n        } else if(payload.action === 'update') {\n          this._sketch.modifyObject(JSON.stringify(obj));\n        } else if(payload.action === 'remove') {\n          this._sketch.setSelected(payload.id);\n          this._sketch.removeSelected();\n        }\n    \n        textGatherer = this._gatherText(); // reset to an empty string\n      }\n    \n    });\n```\n\nHere’s the code for the `_gatherText` function:\n\n```javascript\n    _gatherText = () =\u003e {\n      let sentence = '';\n      return (txt = '') =\u003e {\n       return sentence += txt;\n      }\n    }\n```\n\nNext, render the UI. This is where we make use of the `SketchField` component that we updated earlier (if you followed along). `this._sketch` contains the reference to the component itself, it allows us to use methods from within the component class. `tool` is the tool that’s used to draw something on the canvas. `onUpdate`, `username`, and `shortid` are the custom ones (they’re not from the original library) we added earlier. Additionally, we have a tool for removing objects and adding text:\n\n```javascript\n    render() {\n      return (\n        \u003cContainer fluid\u003e\n          \u003cRow\u003e\n            \u003cCol lg={9}\u003e\n              {\n                this.state.myUsername \u0026\u0026\n                \u003cSketchField\n                  className=\"canvas\"\n                  ref={c =\u003e (this._sketch = c)}\n                  width='1024px'\n                  height='768px'\n                  tool={this.state.tool}\n                  lineColor='black'\n                  lineWidth={3}\n                  onUpdate={this.sketchUpdated}\n                  username={this.state.myUsername}\n                  shortid={shortid} /\u003e\n              }\n            \u003c/Col\u003e\n    \n            \u003cCol lg={3} className=\"Sidebar\"\u003e\n              \u003cdiv className=\"tools\"\u003e\n    \n                {this.renderTools()}\n    \n                \u003cdiv className=\"tool\"\u003e\n                  \u003cButton \n                    color=\"danger\" \n                    size=\"lg\" \n                    onClick={this.removeSelected} \n                  \u003e\n                    \u003cFaTrash /\u003e\n                  \u003c/Button\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \n              \u003cdiv\u003e\n                \u003cdiv className=\"textInputContainer\"\u003e\n                  \u003cInput \n                    type=\"textarea\" \n                    name=\"text_to_add\" \n                    id=\"text_to_add\" \n                    placeholder=\"Enter text here\" \n                    value={this.state.text}\n                    onChange={this.onUpdateText} /\u003e\n                  \u003cdiv className=\"buttonContainer\"\u003e\n                    \u003cButton type=\"button\" color=\"primary\" onClick={this.addText} block\u003eAdd Text\u003c/Button\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n    \n            \u003c/Col\u003e  \n          \u003c/Row\u003e\n        \u003c/Container\u003e\n      );\n    }\n```\n\nHere’s the function for rendering the buttons for picking the tools:\n\n```javascript\n    renderTools = () =\u003e {\n      return this.tools.map((tool) =\u003e {\n        return (\n          \u003cdiv className=\"tool\" key={tool.name}\u003e\n            \u003cButton \n              color=\"secondary\" \n              size=\"lg\" \n              onClick={this.pickTool} \n              data-name={tool.name}\n              data-tool={tool.tool}\n            \u003e\n              {tool.icon}\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        );\n      });\n    }\n```\n\nThe `pickTool` function is executed when any of the buttons is clicked. This will simply update the value of `tool` in the state. But if the selected tool is one of those “auto-create” ones, we generate a unique ID and add it as a property to the default object settings (`this.initial_objects`) before we add it to the canvas. \n\nWe also change the tool back to the select tool so the user can select the object and start modifying it to their liking:\n\n```javascript\n    pickTool = (event) =\u003e {\n      const button = event.target.closest('button');\n      const tool = button.getAttribute('data-tool');\n      const tool_name = button.getAttribute('data-name');\n    \n      this.setState({\n        tool\n      }, () =\u003e {\n        if (this.auto_create_tools.indexOf(tool_name) !== -1) {\n         \n          const obj = this.initial_objects[tool_name]; // get the initial object settings\n          const id = shortid.generate(); // generate a random unique ID\n          Object.assign(obj, { id: id, type: tool_name }); // add the ID to the object\n          \n          this._sketch.addObject(JSON.stringify(obj)); // add the object to the canvas\n        \n          // change the tool back to select\n          setTimeout(() =\u003e {\n            this.setState({\n              tool: Tools.Select \n            });\n          }, 500);\n    \n        }\n    \n      });\n    }\n    \n    // next: add onUpdateText\n```\n\nNext, add the function for updating the value of the text field for entering the text to be added to the canvas:\n\n```javascript\n    onUpdateText = (event) =\u003e {\n      this.setState({\n        text: event.target.value\n      });\n    }\n    \n    // next: add addText\n```\n\nWhen the button for adding a text is clicked, we call the `addText` method from inside the `SketchField` component. This accepts the text value to be added, and an optional object containing additional options for the text. In this case, we’re simply using it to pass the unique object ID:\n\n```javascript\n    addText = () =\u003e {\n      if (this.state.text) {\n        const id = shortid.generate();\n        this._sketch.addText(this.state.text, { id }); // add a text object to the canvas\n      \n        this.setState({\n          text: ''\n        });\n      }\n    }\n    \n    // next: add sketchUpdated function\n```\n\nNext is the `sketchUpdated` function. This function is called every time an object is added, modified, or removed from the canvas. It uses the `updateOtherUsers` function to publish the changes to all the other users on the channel. But before doing so, it first splits up the object based on a specific length. \n\nAs mentioned earlier, Pusher has a [10KB limit for publishing messages](https://support.pusher.com/hc/en-us/articles/202046553-What-is-the-message-size-limit-when-publishing-a-message-). This is plenty for the Circle, Rectangle, and Text objects but not for the path (free-drawing) object. \n\nIt’s considered a complex shape so it takes a lot more data to describe it. Which means that the 10KB limit is not enough. So the solution is to split up the `obj` into multiple parts. \n\nEach part contains a specific number of characters. In this case, we’re using 8,000 because 10KB is roughly 10,000 characters. The extra 2,000 is for all the other data that we’re publishing. For the final part, we simply add an `is_final` property to the `payload` to signal the receiver that the message is ready to be assembled:\n\n```javascript\n    sketchUpdated = (obj, action, sender, id = null) =\u003e {\n      if (this.state.myUsername) {\n        \n        let length_per_part = 8000; // maximum number of characters that can be alloted to a FabricJS object\n        let loop_count = Math.ceil(obj.length / length_per_part);\n    \n        let from_str_index = 0;\n        for (let x = 0; x \u003c loop_count; x++) {\n          const str_part = obj.substr(from_str_index, length_per_part);\n    \n          const payload = {\n            action: action,\n            id: id,\n            data: str_part,\n            sender: this.state.myUsername\n          };\n    \n          if (x + 1 === loop_count) { // if this is the final part\n            Object.assign(payload, { is_final: true });\n          }\n          \n          this.updateOtherUsers(payload);\n          from_str_index += length_per_part;\n        }\n      }\n    }\n```\n\nHere’s the `updateOtherUsers` function:\n\n```javascript\n    updateOtherUsers = (payload) =\u003e {\n      this.group_channel.trigger('client-whiteboard-updated', payload);\n    }\n```\n\nLastly, we have the `removeSelected` function. This is where we get the currently selected object and publish its `id` to all the other users in the channel:\n\n```javascript\n    removeSelected = () =\u003e {\n      const activeObj = this._sketch.getSelected();\n      \n      const payload = {\n        action: 'remove',\n        is_final: true,\n        id: activeObj.id,\n        sender: this.state.myUsername\n      };\n    \n      this.updateOtherUsers(payload);\n      this._sketch.removeSelected(); // remove the object from the user's canvas\n    }\n```\n\n## Server code\n\nHere’s the server code. Right now, we’re simply using it to authenticate the user with Pusher so they can send client events:\n\n```javascript\n    // server/server.js\n    var express = require(\"express\");\n    var bodyParser = require(\"body-parser\");\n    var Pusher = require(\"pusher\");\n    const cors = require(\"cors\");\n    \n    require(\"dotenv\").config();\n    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(cors());\n    \n    var pusher = new Pusher({\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret: process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER\n    });\n    \n    // for checking if the server works\n    app.get(\"/\", (req, res) =\u003e {\n      res.send(\"all good...\");\n    });\n    \n    app.post(\"/pusher/auth\", (req, res) =\u003e {\n      const socketId = req.body.socket_id;\n      const channel = req.body.channel_name;\n      console.log(\"authing...\");\n      var auth = pusher.authenticate(socketId, channel);\n      return res.send(auth);\n    });\n    \n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\nDon’t forget to update the `server/.env` file to include your Pusher app credentials:\n\n```\n    APP_ID=\"YOUR PUSHER APP ID\"\n    APP_KEY=\"YOUR PUSHER APP KEY\"\n    APP_SECRET=\"YOUR PUSHER APP SECRET\"\n    APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\n## Running the app\n\nAt this point, you can now run the app. Start by running the server:\n\n```\n    cd server\n    node server.js\n```\n\nOptionally, you can use ngrok so you can test the app with someone outside your network. Don’t forget to update the base URL in the login screen if you do so:\n\n```javascript\n    // src/screens/Login.js\n    const BASE_URL = \"http://localhost:5000\";\n```\n\nFinally, run the app itself:\n\n```\n    yarn start\n    yarn electron-dev\n```\n\n## Conclusion\n\nIn this tutorial, we learned how to use FabricJS and React Sketch library to create a whiteboard app in React. Stay tuned for [part two](https://pusher.com/tutorials/whiteboard-electron-react-part-2) where we add a group chat to the whiteboard so the users can talk about what they’re trying to sketch. \n\nYou can find the code for this tutorial on its [GitHub repo](https://github.com/anchetaWern/ElectronWhiteboard).","metaTitle":"Create a whiteboard Electron app with React - Part 1","metaDescription":"In this two-part series, build a whiteboard app using Node, Electron and React. Users will be able to collaborate in realtime, drawing on a simple canvas. The app also features chat functionality. In part one, create the whiteboard."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"xPKfiMCBGHTrOuv4SQwiA","type":"Entry","createdAt":"2019-03-15T19:33:27.186Z","updatedAt":"2020-06-19T14:29:21.236Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a two-player maze game with React Native","url":"maze-game-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNMaze","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6nDfV1cd5C6464wgCoOQii","type":"Entry","createdAt":"2018-02-12T15:08:13.901Z","updatedAt":"2018-02-26T12:31:12.764Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Gaming","url":"gaming","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2019-03-15","description":"Build a two-player maze game for mobile using React Native and Node.js. Users can log in, be matched with an opponent, and race each other through a maze to a target. The tutorial takes advantage of MatterJS to handle game physics.","prerequisite":"You will need React Native, Node and Yarn installed on your machine.","content":"In this tutorial, we will create a two-player maze game with React Native and Pusher. \n\n\n## Prerequisites\n\nBasic knowledge of React Native is required. \n\nWe’ll be using the following package versions. If you encounter any issues getting the app to work, try using the following:\n\n- Yarn 1.13.0\n- React Native 0.58.4\n\nWe’ll also be using [ngrok](https://ngrok.com/) to expose the Pusher auth server to the internet.\nLastly, you’ll need a [Pusher app instance](https://pusher.com/channels).\n\n\n## App overview\n\nAs mentioned earlier, we will create a maze game in which two players have to navigate. When the app starts, they will be greeted with a login screen. This is where they enter a unique username and wait for an opponent:\n\n![react-native-maze-game-demo-1](//images.ctfassets.net/1es3ne0caaid/3B8d2Uj2EXtab9H9cbPNcu/38c2b17124b1c4b1e37b0cdfb2b59476/react-native-maze-game-demo-1.png)\n\nOnce there are two players, a Pusher event is manually triggered by accessing a specific route of the app’s server component. This event informs both users that an opponent is found. This serves as the cue for the app to automatically navigate to the game screen where the maze will be generated.\n\nAfter that, the event for starting the game is also manually triggered. Once the app receives that, it will inform the players that they can start navigating the maze. The first player to reach the goal wins the game.\n\nHere’s what the app looks like. The black square is the goal, the pink circle is the current player, and the blue circle is their opponent:\n\n![react-native-maze-game-demo-2](//images.ctfassets.net/1es3ne0caaid/29l2LDSXI8L06uAPTcSVDE/e6e19904103e513e8aad4c8aa59cef6d/react-native-maze-game-demo-2.gif)\n\nYou can view the code on this [GitHub repo](https://github.com/anchetaWern/RNMaze). \n\n\n## Building the app\n\nStart by cloning the repo:\n\n```\n    git clone https://github.com/anchetaWern/RNMaze.git\n    cd RNMaze\n```\n\nNext, switch to the `starter` branch and install the dependencies:\n\n```\n    git checkout starter\n    yarn\n```\n\nThis branch has the styling and navigation already set up so we don’t have to go through them in this tutorial.\n\nNext, update the `.env` file with your Pusher app credentials:\n\n```\n    PUSHER_APP_KEY=\"YOUR PUSHER APP KEY\"\n    PUSHER_APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\n### Login screen\n\nLet’s start by adding the code for the login screen:\n\n```javascript\n    // src/screens/Login.js\n    import React, { Component } from \"react\";\n    import { View, Text, TextInput, TouchableOpacity, Alert } from \"react-native\";\n    \n    import Pusher from \"pusher-js/react-native\";\n    import Config from \"react-native-config\"; // for reading the .env file\n    \n    const pusher_app_key = Config.PUSHER_APP_KEY;\n    const pusher_app_cluster = Config.PUSHER_APP_CLUSTER;\n    const base_url = \"YOUR HTTPS NGROK URL\";\n    \n    class LoginScreen extends Component {\n      static navigationOptions = {\n        title: \"Login\"\n      };\n    \n      state = {\n        username: \"\",\n        enteredGame: false\n      };\n    \n      constructor(props) {\n        super(props);\n        this.pusher = null;\n        this.myChannel = null; // the current user's Pusher channel\n        this.opponentChannel = null; // the opponent's Pusher channel\n      }\n      \n      // next: add render()\n    }\n```\n\nNext, render the UI for the login screen. This asks for the user’s username so they can log in:\n\n```javascript\n    render() {\n      return (\n        \u003cView style={styles.wrapper}\u003e\n          \u003cView style={styles.container}\u003e\n            \u003cView style={styles.main}\u003e\n              \u003cView\u003e\n                \u003cText style={styles.label}\u003eEnter your username\u003c/Text\u003e\n                \u003cTextInput\n                  style={styles.textInput}\n                  onChangeText={username =\u003e this.setState({ username })}\n                  value={this.state.username}\n                /\u003e\n              \u003c/View\u003e\n    \n              {!this.state.enteredGame \u0026\u0026 (\n                \u003cTouchableOpacity onPress={this.enterGame}\u003e\n                  \u003cView style={styles.button}\u003e\n                    \u003cText style={styles.buttonText}\u003eLogin\u003c/Text\u003e\n                  \u003c/View\u003e\n                \u003c/TouchableOpacity\u003e\n              )}\n    \n              {this.state.enteredGame \u0026\u0026 (\n                \u003cText style={styles.loadingText}\u003eLoading...\u003c/Text\u003e\n              )}\n            \u003c/View\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nOnce the **Login** button is clicked, the `enterGame` function is executed. This authenticates the user with Pusher via an auth endpoint in the app’s server component (we’ll create this later). From the prerequisites section, one of the requirements is that your Pusher app instance needs to have client events enabled. This authentication step is a required step for using the client events feature. This allows us to trigger events directly from the app itself:\n\n```javascript\n    enterGame = async () =\u003e {\n      const myUsername = this.state.username;\n    \n      if (myUsername) {\n        this.setState({\n          enteredGame: true // show login activity indicator\n        });\n    \n        this.pusher = new Pusher(pusher_app_key, {\n          authEndpoint: `${base_url}/pusher/auth`,\n          cluster: pusher_app_cluster,\n          auth: {\n            params: { username: myUsername }\n          },\n          encrypted: true\n        });\n    \n        // next: add code for subscribing the user to their own channel\n    \n      }\n    };\n```\n\nNext, subscribe the user to their own channel. The username they entered is used for this. This channel is what’s used by their opponent to pass messages to them in realtime:\n\n```javascript\n    this.myChannel = this.pusher.subscribe(`private-user-${myUsername}`);\n    this.myChannel.bind(\"pusher:subscription_error\", status =\u003e {\n      Alert.alert(\n        \"Error\",\n        \"Subscription error occurred. Please restart the app\"\n      );\n    });\n    \n    // next: add code for when subscription succeeds\n```\n\nWhen the subscription succeeds, we wait for the `opponent-found` event to get triggered by the server. When this happens, we determine who among the players is the first player (Player One) and assign the ball color based on that. From here, we also subscribe to the opponent’s channel. Once it succeeds, we navigate to the game screen with a few data we’re going to need:\n\n```javascript\n    this.myChannel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n     \n      this.myChannel.bind(\"opponent-found\", data =\u003e {\n        const opponentUsername =\n          myUsername == data.player_one ? data.player_two : data.player_one;\n    \n        const isPlayerOne = myUsername == data.player_one ? true : false;\n        \n        const ballColor = (isPlayerOne) ? 'pink' : 'blue'; // pink ball always goes to the first player\n    \n        Alert.alert(\"Opponent found!\", `Use the ${ballColor} ball`);\n    \n        this.opponentChannel = this.pusher.subscribe(\n          `private-user-${opponentUsername}`\n        );\n        this.opponentChannel.bind(\"pusher:subscription_error\", data =\u003e {\n          console.log(\"Error subscribing to opponent's channel: \", data);\n        });\n    \n        this.opponentChannel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n          this.props.navigation.navigate(\"Game\", {\n            pusher: this.pusher,\n            isPlayerOne: isPlayerOne,\n            myUsername: myUsername,\n            myChannel: this.myChannel,\n            opponentUsername: opponentUsername,\n            opponentChannel: this.opponentChannel\n          });\n        });\n    \n        this.setState({\n          username: \"\",\n          enteredGame: false // hides the login activity indicator\n        });\n      });\n    });\n```\n\n### Game screen\n\nNow we’re ready to add the code for the Game screen. Start by importing the packages, components, and helpers we need:\n\n```javascript\n    // src/screens/Game.js\n    import React, { PureComponent } from \"react\";\n    import { View, Text, Alert, ActivityIndicator } from \"react-native\";\n    \n    import Matter from \"matter-js\"; // physics engine, collision detection\n    import { GameEngine } from \"react-native-game-engine\"; // rendering game objects\n    \n    import Circle from '../components/Circle'; // renderer for the balls\n    import Rectangle from '../components/Rectangle'; // renderer for the maze walls\n    \n    import CreateMaze from '../helpers/CreateMaze'; // for generating the maze\n    import GetRandomPoint from '../helpers/GetRandomPoint'; // for getting a random point in the grid\n    \n    // the hardcoded width and height contraints of the app\n    import dimensions from '../data/constants';\n    const { width, height } = dimensions;\n```\n\nNext, create the constants file (`src/data/constants.js`) we used above:\n\n```javascript\n    const constants = {\n      width: 360,\n      height: 686.67\n    }\n    \n    export default constants;\n```\n\nNext, go back to the game screen (`src/screens/Game.js`) and initialize the physics settings for the ball as well as the goal size:\n\n```javascript\n    const BALL_SIZE = Math.floor(width * .02);\n    const ballSettings = {\n      inertia: 0,\n      friction: 0,\n      frictionStatic: 0,\n      frictionAir: 0,\n      restitution: 0,\n      density: 1\n    };\n    \n    const GOAL_SIZE = Math.floor(width * .04); \n```\n\nYou can find what each of the ball settings does [here](http://brm.io/matter-js/docs/classes/Body.html).\n\nNext, create the maze. As you’ll see later, this generates a composite body which makes up the walls of the maze:\n\n```javascript\n    const GRID_X = 15; // the number of cells in the X axis\n    const GRID_Y = 18; // the number of cells in the Y axis\n    \n    const maze = CreateMaze(GRID_X, GRID_Y);\n```\n\nNext, create the Game component. Inside the `constructor`, get the navigation params that were passed earlier from the Login screen:\n\n```javascript\n    export default class Game extends PureComponent {\n      \n      static navigationOptions = {\n        header: null\n      };\n    \n      state = {\n        isMazeReady: false, // whether to show the maze or not\n        isGameFinished: false // whether someone has already reached the goal or not\n      }\n      \n      constructor(props) {\n        super(props);\n    \n        const { navigation } = this.props;\n       \n        this.pusher = navigation.getParam('pusher');\n        this.myUsername = navigation.getParam('myUsername');\n        this.opponentUsername = navigation.getParam('opponentUsername');\n    \n        this.myChannel = navigation.getParam('myChannel');\n        this.opponentChannel = navigation.getParam('opponentChannel');\n        this.isPlayerOne = navigation.getParam('isPlayerOne');\n        \n        // next: add code for adding the entities\n      }\n    }\n```\n\nNext, we need to construct the object containing the entities to be rendered by the React Native Game Engine. In this game, there are four entities we need to render, three of them are physical (two balls, one goal), while the other is logical (physics). Since there is a need to mirror the objects (and their positions) in both player instances, we first generate the objects in player one’s instance. Once the objects are generated, we send the object’s position to player two via Pusher:\n\n```javascript\n    this.entities = {};\n    \n    if (this.isPlayerOne) {\n      const ballOneStartPoint = GetRandomPoint(GRID_X, GRID_Y); // generate a random point to put the pink ball\n      const ballTwoStartPoint = GetRandomPoint(GRID_X, GRID_Y); // generate a random point to put the blue ball\n    \n      const ballOne = this._createBall(ballOneStartPoint, 'ballOne'); // create the pink ball (for player one)\n      const ballTwo = this._createBall(ballTwoStartPoint, 'ballTwo'); // create the blue ball (for player two)\n    \n      this.myBall = ballOne;\n      this.myBallName = 'ballOne'; \n      this.opponentBall = ballTwo;\n      this.opponentBallName = 'ballTwo';\n    \n      const goalPoint = GetRandomPoint(GRID_X, GRID_Y); // generate a random goal point\n      const goal = this._createGoal(goalPoint); // create the goal box\n      \n      const { engine, world } = this._addObjectsToWorld(maze, ballOne, ballTwo, goal); // add all the objects to the world\n    \n      this.entities = this._getEntities(engine, world, maze, ballOne, ballTwo, goal); // get the entities of the game\n      \n      this._setupPositionUpdater(); // call the interval timer for updating the opponent of the current user's ball position\n      this._setupGoalListener(engine); // setup the sensor for listening if a ball has touched the goal\n      \n      // send the position of the generated objects to player two\n      this.opponentChannel.trigger('client-generated-objects', {\n        ballOneStartPoint,\n        ballTwoStartPoint,\n        goalPoint\n      });\n    }\n```\n\nIf the second player is the one who’s logged in, the following event is triggered. This contains the positions for the two balls and the goal. Using this data, we construct player two’s world:\n\n```javascript\n    this.myChannel.bind('client-generated-objects', ({ ballOneStartPoint, ballTwoStartPoint, goalPoint }) =\u003e {\n      \n      const ballOne = this._createBall(ballOneStartPoint, 'ballOne');\n      const ballTwo = this._createBall(ballTwoStartPoint, 'ballTwo');\n      const goal = this._createGoal(goalPoint);\n    \n      this.myBall = ballTwo;\n      this.myBallName = 'ballTwo';\n      this.opponentBall = ballOne;\n      this.opponentBallName = 'ballOne';\n    \n      const { engine, world } = this._addObjectsToWorld(maze, ballOne, ballTwo, goal);\n      \n      this.entities = this._getEntities(engine, world, maze, ballOne, ballTwo, goal);\n      \n      this._setupPositionUpdater();\n      this._setupGoalListener(engine);\n    });\n```\n\nNext, we add physics to the world. By default, MatterJS applies gravity to the world. We don’t really want that so we set the gravity to zero for both X and Y axis:\n\n```javascript\n    this.physics = (entities, { time }) =\u003e {\n      let engine = entities[\"physics\"].engine;\n      engine.world.gravity = {\n        x: 0,\n        y: 0\n      };\n      Matter.Engine.update(engine, time.delta);\n      return entities;\n    };\n    \n    // next: add this.moveBall\n```\n\nNext, we add the system for moving the ball. This filters `move` events. This event is triggered when the user moves their finger across the screen. Note that this listens for that event on the entire screen so the user doesn’t actually need to place their finger directly on top of the ball in order to move it. As you can see, this function specifically targets `this.myBall`. `this.myBall.position` contains the current position of the ball, while `move.delta` contains the data on how much the finger was moved across the screen. We add that up to the ball’s current position in order to move it to that direction:\n\n```javascript\n    this.moveBall = (entities, { touches }) =\u003e {\n      let move = touches.find(x =\u003e x.type === \"move\");\n      if (move) {\n        // move.delta.pageX is negative if moving fingers to the left\n        // move.delta.pageX is negative if moving fingers to the top\n        const newPosition = {\n          x: this.myBall.position.x + move.delta.pageX, \n          y: this.myBall.position.y + move.delta.pageY\n        };\n        Matter.Body.setPosition(this.myBall, newPosition);\n      }\n    \n      return entities;\n    };\n    \n    // next: listen for the start-game event\n```\n\nNext, listen for the event for starting the game. All we do here is show an alert and update the state so it shows the generated maze instead of the activity indicator:\n\n```javascript\n    this.myChannel.bind('start-game', () =\u003e {\n      Alert.alert('Game Start!', 'You may now navigate towards the black square.');\n      this.setState({\n        isMazeReady: true\n      });\n    });\n    // next: listen for client-moved-ball\n```\n\nNext, listen for the event for moving the opponent’s ball:\n\n```javascript\n    this.myChannel.bind('client-moved-ball', ({ positionX, positionY }) =\u003e {\n      Matter.Body.setPosition(this.opponentBall, {\n        x: positionX,\n        y: positionY\n      });\n    });\n```\n\nThat’s pretty much all there is to it for the Game screen. Let’s now go over the functions we used for constructing the world.\n\nFirst is the function for creating a ball. This accepts the ball’s start point and the name you want to assign to it. The name is very important here because it’s what we use to determine which ball touched the goal:\n\n```javascript\n    constructor(props) {\n      // ...\n    }\n    \n    _createBall = (startPoint, name) =\u003e {\n      const ball = Matter.Bodies.circle(\n        startPoint.x,\n        startPoint.y,\n        BALL_SIZE,\n        {\n          ...ballSettings,\n          label: name\n        }\n      );\n      return ball;\n    }\n```\n\nNext is the function for creating the goal box. Not unlike the ball, we don’t need to add a whole lot of physics settings to the goal. That’s because it only acts as a sensor. It gets rendered to the world, but it doesn’t actually interact or affect the rest of it (For example, the ball shouldn’t bounce if it touches it, nor does it move because of the force applied by the ball). The key setting here is `isSensor: true`: \n\n```javascript\n    _createGoal = (goalPoint) =\u003e {\n      const goal = Matter.Bodies.rectangle(goalPoint.x, goalPoint.y, GOAL_SIZE, GOAL_SIZE, {\n        isStatic: true,\n        isSensor: true,\n        label: 'goal'\n      });\n      return goal;\n    }\n```\n\nNext is the function for adding the objects to the world. Aside from the two balls and the goal, we also need to add the maze that we generated earlier:\n\n```javascript\n    _addObjectsToWorld = (maze, ballOne, ballTwo, goal) =\u003e {\n      const engine = Matter.Engine.create({ enableSleeping: false }); // enableSleeping tells the engine to stop updating and collision checking bodies that have come to rest\n      const world = engine.world;\n    \n      Matter.World.add(world, [\n        maze, ballOne, ballTwo, goal\n      ]);\n    \n      return {\n        engine,\n        world\n      }\n    }\n```\n\nNext is the `_getEntities` function. This is responsible for constructing the `entities` object that we need to pass to the React Native Game Engine. This includes the physics, the two balls, the goal, and the maze walls. All of these objects (except for the `physics`), requires the `body` and `renderer`. All the other options are simply passed as a prop to the renderer to customize its style (`bgColor`, `size`, `borderColor`):\n\n```javascript\n    _getEntities = (engine, world, maze, ballOne, ballTwo, goal) =\u003e {\n      const entities = {\n        physics: {\n          engine,\n          world\n        },\n        playerOneBall: {\n          body: ballOne,\n          bgColor: '#FF5877',\n          borderColor: '#FFC1C1',\n          renderer: Circle\n        },\n        playerTwoBall: {\n          body: ballTwo,\n          bgColor: '#458ad0',\n          borderColor: '#56a4f3',\n          renderer: Circle\n        },\n        goalBox: {\n          body: goal,\n          size: [GOAL_SIZE, GOAL_SIZE],\n          color: '#414448',\n          renderer: Rectangle\n        }\n      };\n    \n      const walls = Matter.Composite.allBodies(maze); // get the children of the composite body\n      walls.forEach((body, index) =\u003e {\n    \n        const { min, max } = body.bounds;\n        const width = max.x - min.x;\n        const height = max.y - min.y;\n        \n        Object.assign(entities, {\n          ['wall_' + index]: {\n            body: body,\n            size: [width, height],\n            color: '#fbb050',\n            renderer: Rectangle\n          }\n        });\n      });\n    \n      return entities; \n    }\n```\n\nThe `_setupPositionUpdater` function triggers the event for updating the current user’s ball position on their opponent’s side. We can actually do this inside the system for moving the ball (`this.moveBall`) but that gets called multiple times over a span of a few milliseconds so it’s not really recommended. Also, make sure to only execute it if no one has reached the goal yet:\n\n```javascript\n    _setupPositionUpdater = () =\u003e {\n      setInterval(() =\u003e {\n        if (!this.state.isGameFinished) { // nobody has reached the goal yet\n          this.opponentChannel.trigger('client-moved-ball', {\n            positionX: this.myBall.position.x,\n            positionY: this.myBall.position.y\n          });\n        }\n      }, 1000);\n    }\n```\n\nThe `_setupGoalListener` is responsible for listening for collision events. These collision events are triggered from the engine so we’re attaching the listener to the engine itself. `collisionStart` gets fired at the very beginning of a collision. This provides data on the bodies which collided. The first body (`bodyA`) always contain the body which initiated the collision. In this case, it’s always one of the two balls. `bodyB`, on the other hand, contains the body which receives the collision. In this case, it’s the goal box. But since the goal box is set as a sensor (`isSensor: true`), it won’t actually affect the ball in any way. It will only register that it collided with the ball:\n\n```javascript\n    _setupGoalListener = (engine) =\u003e {\n    \n      Matter.Events.on(engine, \"collisionStart\", event =\u003e { \n        var pairs = event.pairs;\n    \n        var objA = pairs[0].bodyA.label;\n        var objB = pairs[0].bodyB.label;\n     \n        if (objA == this.myBallName \u0026\u0026 objB == 'goal') {\n          Alert.alert(\"You won\", \"And that's awesome!\");\n          this.setState({\n            isGameFinished: true\n          });\n        } else if (objA == this.opponentBallName \u0026\u0026 objB == 'goal') {\n          Alert.alert(\"You lose\", \"And that sucks!\");\n          this.setState({\n            isGameFinished: true\n          });\n        }\n      });\n    }\n```\n\nLastly, render the UI:\n\n```javascript\n    render() {\n      if (this.state.isMazeReady) {\n        return (\n          \u003cGameEngine\n            systems={[this.physics, this.moveBall]}\n            entities={this.entities}\n          \u003e\n          \u003c/GameEngine\u003e\n        );\n      }\n    \n      return \u003cActivityIndicator size=\"large\" color=\"#0064e1\" /\u003e;\n    }\n```\n\n### Circle component\n\nHere’s the code for the Circle component:\n\n```javascript\n    // src/components/Circle.js\n    import React from \"react\";\n    import { View, Dimensions } from \"react-native\";\n    import dimensions from '../data/constants';\n    const { width, height } = dimensions;\n    \n    const BODY_DIAMETER = Math.floor(width * .02);\n    const BORDER_WIDTH = 2;\n    \n    const Circle = ({ body, bgColor, borderColor }) =\u003e {\n      const { position } = body;\n    \n      const x = position.x;\n      const y = position.y;\n      return \u003cView style={[styles.head, {\n        left: x, \n        top: y,\n        backgroundColor: bgColor,\n        borderColor: borderColor\n      }]} /\u003e;\n    \n    };\n    \n    export default Circle;\n    \n    const styles = {\n      head: {\n        borderWidth: BORDER_WIDTH,\n        width: BODY_DIAMETER,\n        height: BODY_DIAMETER,\n        position: \"absolute\",\n        borderRadius: BODY_DIAMETER * 2\n      }\n    };\n```\n\n### Rectangle component\n\nHere’s the code for the Rectangle component:\n\n```javascript\n    // src/components/Rectangle.js\n    import React from \"react\";\n    import { View } from \"react-native\";\n    \n    const Rectangle = ({ body, size, color }) =\u003e {\n      const width = size[0];\n      const height = size[1];\n      \n      const x = body.position.x - width / 2;\n      const y = body.position.y - height / 2;\n     \n      return (\n        \u003cView\n          style={{\n            position: \"absolute\",\n            left: x,\n            top: y,\n            width: width,\n            height: height,\n            backgroundColor: color\n          }}\n        /\u003e\n      );\n    };\n    \n    export default Rectangle;\n```\n\n### CreateMaze helper\n\nThe CreateMaze helper is really the main meat of this app because it’s the one which generates the maze that the players have to navigate. There are lots of [maze generation algorithms](http://weblog.jamisbuck.org/2011/2/7/maze-generation-algorithm-recap.html) out there. This helper uses the [recursive backtracking algorithm](http://weblog.jamisbuck.org/2010/12/27/maze-generation-recursive-backtracking). Here’s the way it works:\n\n\n1. Create a grid.\n2. Choose a random cell within the grid. In this case, we’re selecting the very first cell in the grid to start with. \n3. Check if there are any cells you can visit from the current cell.\n4. If there is, then:\n  1. Pick a random neighbor.\n  2. Put the neighbor on the stack.\n  3. Mark the path from the current cell to the neighbor.\n5. If there are no more cells you can go to, mark the cell as “visited” and pop it out of the stack. The cell you’ve gone to prior to the cell that was popped out is now the current cell.\n6. Repeat steps 3 to 5 until all the cells in the grid have been visited or popped out of the stack.\n\nNow that you have a general idea of how we’re going to implement this, it’s time to proceed with the code. Start by importing the things we need:\n\n```javascript\n    // src/helpers/CreateMaze.js\n    import Matter from 'matter-js';\n    \n    import GetRandomNumber from './GetRandomNumber';\n    \n    import dimensions from '../data/constants';\n    const { width, height } = dimensions;\n    \n    // convenience variables:\n    const TOP = 'T';\n    const BOTTOM = 'B';\n    const RIGHT = 'R';\n    const LEFT = 'L';\n```\n\nNext, we represent the grid using an array. The `CreateMaze` class accepts the number of cells in the X and Y axis for its constructor. By default, it’s going to generate a 15x18 grid. `this.grid` contains a two-dimensional array of `null` values. This will be filled later with the directions in which a path is carved on each row in the grid:\n\n```javascript\n    const CreateMaze = (gridX = 15, gridY = 18) =\u003e {\n    \n      this.width = gridX; \n      this.height = gridY; \n    \n      this.blockWidth = Math.floor(width / this.width); // 24\n      this.blockHeight = Math.floor(height / this.height); // 38\n    \n      this.grid = new Array(this.height)\n      for (var i = 0; i \u003c this.grid.length; i++) {\n        this.grid[i] = new Array(this.width);\n      }\n      \n      // next: initialize the composite body\n      \n    }\n```\n\nNext, initialize the composite body for containing the maze:\n\n```javascript\n    const wallOpts = {\n      isStatic: true,\n    };\n    \n    this.matter = Matter.Composite.create(wallOpts);\n```\n\nNext, start carving the path. We’re going to start at the very first cell for this one, but you can pretty much start anywhere. Just remember that the grid is only 15x18 so you can only pick numbers between 0 to 14 for the X axis, and numbers between 0 to 17 for the Y axis:\n\n```javascript\n    this.carvePathFrom(0, 0, this.grid);\n```\n\n`carvePathFrom` is a recursive function. It will call itself recursively until it has visited all the cells in the grid. It works by randomly picking which direction to go to first from the current cell. It then loops through those directions to determine if they can be visited or not. As you learned earlier, a cell can be visited if it can be accessed from the current cell and that it hasn’t already been visited. The `getDirectionX` and `getDirectionY` function checks if the next cell in the X or Y axis can be visited:\n\n```javascript\n    carvePathFrom = (x, y, grid) =\u003e {\n     \n      const directions = [TOP, BOTTOM, RIGHT, LEFT]\n        .sort(f =\u003e 0.5 - GetRandomNumber()); // whichever direction is closest to the random number is first in the list. \n    \n      directions.forEach(dir =\u003e {\n        const nX = x + this.getDirectionX(dir);\n        const nY = y + this.getDirectionY(dir);\n        const xNeighborOK = nX \u003e= 0 \u0026\u0026 nX \u003c this.width;\n        const yNeighborOK = nY \u003e= 0 \u0026\u0026 nY \u003c this.height;\n    \n        // next: check if cell can be visited\n      }); \n    }\n```\n\nOnly when both these functions return either `0` or `1`, and that the next cell hasn’t already been visited will it proceed to call itself again. Don’t forget to put the visited direction into the grid. This will tell the function that the specific cell has already been visited. We also need to add the direction opposite to the current direction as the next path:\n\n```javascript\n    if (xNeighborOK \u0026\u0026 yNeighborOK \u0026\u0026 grid\\[nY\\][nX] == undefined) {\n      grid\\[y\\][x] = grid\\[y\\][x] || dir;\n      grid\\[nY\\][nX] = grid\\[nY\\][nX] || this.getOpposite(dir);\n      this.carvePathFrom(nX, nY, grid);\n    }\n```\n\nHere are the variables we used in the above function: \n\n```javascript\n    const LEFT = 'L';\n    \n    // add these:\n    const directionX = {\n      'T': 0, // neutral because were moving in the X axs\n      'B': 0,\n      'R': 1, // +1 because were moving forward (we started at 0,0 so we move from left to right)\n      'L': -1 // -1 because were moving backward\n    };\n    \n    const directionY = {\n      'T': -1, // -1 because were moving backward\n      'B': 1, // +1 because were moving forward (we started at 0,0 so we move from top to bottom)\n      'R': 0, // neutral because were moving in the Y axis\n      'L': 0\n    };\n    \n    // opposite directions\n    const op = {\n      'T': BOTTOM, // top's opposite is bottom\n      'B': TOP,\n      'R': LEFT,\n      'L': RIGHT\n    };\n```\n\nAnd here are the functions:\n\n```javascript\n    this.matter = Matter.Composite.create(wallOpts);\n    \n    // add these:\n    getDirectionX = (dir) =\u003e {\n      return directionX[dir];\n    }\n    \n    getDirectionY = (dir) =\u003e {\n      return directionY[dir];\n    }\n    \n    getOpposite = (dir) =\u003e {\n      return op[dir];\n    }\n```\n\nNow that we have the grid and the path in place, the next step is to construct the walls:\n\n```javascript\n    this.carvePathFrom(0, 0, this.grid);\n    \n    // add these:\n    for (var i = 0; i \u003c this.grid.length; i++) { // rows\n      for (var j = 0; j \u003c this.grid[i].length; j++) { // columns\n        Matter.Composite.add(this.matter, this.generateWall(j, i));\n      }\n    }\n```\n\nThe `generateWall` function accepts the cell’s address in the X and Y axis. The first one is always going to be `0,0` since that’s the very first cell we visited. From there, we figure out which part of the cell do we draw the walls. We do that by checking if the current cell we are in isn’t part of the path. `gridPoint` is the cell we’re currently iterating over and it contains the direction of the path to be visited from there (either `T`, `L`, `B` or `R`). For example, if we’re visiting `0,0` and it contains `B` as part of the path then only the top, right, and left walls will be generated. Aside from that, we also need to consider the opposite. The `getPointInDirection` is key for that. This function is responsible for returning the direction (either `T`, `L`, `B` or `R`) of the next cell to visit, but it only does so if the address to the next cell in the given direction is greater than `0`. So it’s just checking if we’ve actually moved forward in that specific direction:\n\n```javascript\n    generateWall = (x, y) =\u003e {\n      const walls = Matter.Composite.create({ isStatic: true });\n      const gridPoint = this.grid\\[y\\][x];\n      const opts = { \n        isStatic: true\n      };\n    \n      const wallThickness = 5; // how thick the wall is in pixels\n    \n      const topPoint = this.getPointInDirection(x, y, TOP);\n      if (gridPoint !== TOP \u0026\u0026 topPoint !== this.getOpposite(TOP)) {\n        Matter.Composite.add(walls, Matter.Bodies.rectangle(this.blockWidth / 2, 0, this.blockWidth, wallThickness, opts));\n      }\n      const bottomPoint = this.getPointInDirection(x, y, BOTTOM);\n      if (gridPoint !== BOTTOM \u0026\u0026 bottomPoint !== this.getOpposite(BOTTOM)) {\n        Matter.Composite.add(walls, Matter.Bodies.rectangle(this.blockWidth / 2, this.blockHeight, this.blockWidth, wallThickness, opts));\n      }\n      const leftPoint = this.getPointInDirection(x, y, LEFT);\n      if (gridPoint !== LEFT \u0026\u0026 leftPoint !== this.getOpposite(LEFT)) {\n        Matter.Composite.add(walls, Matter.Bodies.rectangle(0, this.blockHeight / 2, wallThickness, this.blockHeight + wallThickness, opts));\n      }\n      const rightPoint = this.getPointInDirection(x, y, RIGHT);\n      if (gridPoint !== RIGHT \u0026\u0026 rightPoint !== this.getOpposite(RIGHT)) {\n        Matter.Composite.add(walls, Matter.Bodies.rectangle(this.blockWidth, this.blockHeight / 2, wallThickness, this.blockHeight + wallThickness, opts));\n      }\n      \n      // next: create vector\n    }\n```\n\nThe final step before we return the walls is to actually put the walls in their proper position. In the code above, all we did was create Rectangle bodies and add it to the composite body. We haven’t actually specified the correct position for them (which cells they need to be added to). That’s where the [Vector class](http://brm.io/matter-js/docs/classes/Vector.html) comes in. We use it to change the position of the walls so that they’re on the cells where they need to be. For this, we simply multiply the cell address with the width or height of each cell in order to get their proper position. Then we use the `translate` method to actually move the walls to that position:\n\n```javascript\n    const translate = Matter.Vector.create(x * this.blockWidth, y * this.blockHeight);\n    Matter.Composite.translate(walls, translate);\n    \n    return walls;\n```\n\nHere’s the `getPointInDirection` function:\n\n```javascript\n    getOpposite = (dir) =\u003e {\n      // ...\n    }\n    \n    getPointInDirection = (x, y, dir) =\u003e {\n      const newXPoint = x + this.getDirectionX(dir);\n      const newYPoint = y + this.getDirectionY(dir);\n    \n      if (newXPoint \u003c 0 || newXPoint \u003e= this.width) {\n        return;\n      }\n      \n      if (newYPoint \u003c 0 || newYPoint \u003e= this.height) {\n        return;\n      }\n    \n      return this.grid\\[newYPoint\\][newXPoint];\n    }\n```\n\n### GetRandomPoint helper\n\nHere’s the code for getting a random point within the grid:\n\n```javascript\n    // src/helpers/GetRandomNumber.js\n    import dimensions from '../data/constants';\n    const { width, height } = dimensions;\n    import GetRandomNumber from './GetRandomNumber';\n    \n    const GetRandomPoint = (gridX, gridY) =\u003e {\n      const gridXPart = (width / gridX);\n      const gridYPart = (height / gridY);\n      const x = Math.floor(GetRandomNumber() * gridX);\n      const y = Math.floor(GetRandomNumber() * gridY);\n    \n      return {\n        x: x * gridXPart + gridXPart / 2,\n        y: y * gridYPart + gridYPart / 2\n      }\n    }\n    \n    export default GetRandomPoint;\n```\n\n### GetRandomNumber helper\n\nHere’s the code for generating random numbers:\n\n```javascript\n    // src/helpers/GetRandomNumber.js\n    var seed = 1;\n    const GetRandomNumber = () =\u003e {\n      var x = Math.sin(seed++) * 10000;\n      return x - Math.floor(x);\n    }\n    \n    export default GetRandomNumber;\n```\n\n## Server\n\nNow we’re ready to work with the server. Start by navigating to the app’s `server` directory and install the dependencies:\n\n```\n    cd server\n    yarn\n```\n\nNext, update the `.env` file with your Pusher credentials:\n\n```\n    APP_ID=\"YOUR PUSHER APP ID\"\n    APP_KEY=\"YOUR PUSHER APP KEY\"\n    APP_SECRET=\"YOUR PUSHER APP SECRET\"\n    APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\nNext, create a `server.js` file and add the following. This sets up the server and Pusher:\n\n```javascript\n    var express = require(\"express\");\n    var bodyParser = require(\"body-parser\");\n    var Pusher = require(\"pusher\");\n    \n    require(\"dotenv\").config();\n    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // setup Pusher\n    var pusher = new Pusher({\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret: process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER\n    });\n```\n\nNext, add the route for authenticating users with Pusher:\n\n```javascript\n    var users = []; // for storing the users who logs in\n    \n    app.post(\"/pusher/auth\", function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var username = req.body.username;\n    \n      users.push(username);\n      console.log(username + \" logged in\");\n    \n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n```\n\nNext, add the route for triggering the event that an opponent was found:\n\n```javascript\n    app.get(\"/opponent-found\", function(req, res) {\n      var unique_users = users.filter((value, index, self) =\u003e {\n        return self.indexOf(value) === index;\n      });\n    \n      var player_one = unique_users[0];\n      var player_two = unique_users[1];\n    \n      console.log(\"opponent found: \" + player_one + \" and \" + player_two);\n    \n      pusher.trigger(\n        [\"private-user-\" + player_one, \"private-user-\" + player_two],\n        \"opponent-found\",\n        {\n          player_one: player_one,\n          player_two: player_two\n        }\n      );\n    \n      res.send(\"opponent found!\");\n    });\n```\n\nNext, add the route for triggering the event for starting the game:\n\n```javascript\n    app.get(\"/start-game\", function(req, res) {\n      var unique_users = users.filter((value, index, self) =\u003e {\n        return self.indexOf(value) === index;\n      });\n    \n      var player_one = unique_users[0];\n      var player_two = unique_users[1];\n    \n      console.log(\"start game: \" + player_one + \" and \" + player_two);\n    \n      pusher.trigger(\n        [\"private-user-\" + player_one, \"private-user-\" + player_two],\n        \"start-game\",\n        {\n          start: true\n        }\n      );\n    \n      users = [];\n    \n      res.send(\"start game!\");\n    });\n```\n\nLastly, run the server on port `5000`:\n\n```javascript\n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\n\n## Running the app\n\nStart by running the server:\n\n```\n    cd server\n    node server\n    ./ngrok http 5000\n```\n\nNext, update the the login screen with the ngrok URL:\n\n```javascript\n    // src/screens/Login.js\n    const base_url = \"YOUR NGROK HTTPS URL\";\n```\n\nFinally, run the app:\n\n```\n    react-native run-android\n```\n\nSince this app requires two players, I recommend that you set up the development server on one or two of the devices (or emulator). That way, you don’t need to physically connect the device to their computer (they only need to be connected to the same WI-FI network). This also helps avoid the confusion of where the React Native CLI will deploy the app if two devices are connected at the same time.\n\n![react-native-maze-game-demo-3](//images.ctfassets.net/1es3ne0caaid/6v86bI45vX2SQ2QF0HbKN7/df7df9cd8597cb6f31186aeb8c14deb8/react-native-maze-game-demo-3.png)\n\nThe screen above can be accessed by shaking the device (or executing `adb shell input keyevent 82` in the terminal), select **Dev Settings**, and select **Debug server host \u0026 port for device**. Then enter your computer’s internal IP address in the box. The default port where the bundler runs is `8081`.\n\nHere’s the workflow I use for running the app:\n\n\n1. Connect device A and run the app.\n2. Set up development server on device A.\n3. Disconnect device A.\n4. Repeat the above steps for the next device.\n5. Log in user on device A.\n6. Log in user on device B.\n7. Access `http://localhost:5000/opponent-found` on your browser.\n8. Dismiss the alerts that show up in the app.\n9. Access `http://localhost:5000/start-game` on your browser.\n10. Dismiss the alert and start navigating the maze on both devices. The position of each ball should be updated every 500 milliseconds. Once a player finds their way to the goal, both players are notified.\n\n\n## Conclusion\n\nIn this tutorial, you learned how to construct a maze using MatterJS. By using Pusher, we were able to update the position of each player within the maze in realtime. \n\nBut as you’ve seen, the game we created isn’t really production-ready. If you’re looking for a challenge, here are a few things that need additional work:\n\n\n- **Automate Pusher events** - automate the events for informing the players that an opponent was found, and the event for starting the game. As you’ve seen, we’re manually triggering these events by accessing a specific server route.\n- **Remove the dimension constraint** - the game is limited to a certain dimension. This means that if the player is on a tablet or a phone with a larger screen or smaller screen than those dimensions, then it won’t really look good. For smaller screens, it will also end up hindering the functionality because the maze will be bigger than the screen.\n- **Generate random mazes** - even though we have a random number generator, it doesn’t really generate a random maze. It’s set up that way because of the need to have the same maze generated for both players.\n- **Generate random points that make sense** - the app generates random points within the grid for the starting point of each player as well as the goal. So it also becomes a game of luck because the goal might be nearer to another player.\n- **Prevent the players from cheating** - there’s a [long time MatterJS issue](https://github.com/liabru/matter-js/issues/5) which allows objects to pass through walls if they have sufficient velocity. The app isn’t really an exception because if you swipe your finger fast enough, the ball can actually pass through the walls. One way to solve this is to change the game setup. The player will now have to change the device orientation in order to move the ball (using the device’s gyroscope). You can use the [React Native Sensors](https://react-native-sensors.github.io/) package to implement this. This should prevent the ball from gaining too much velocity because the walls are usually tightly packed. Another solution would be to detect collisions between the ball and the walls, such that it immediately set the ball’s velocity to a safe one.\n- **Add a basic game loop** - once a player wins, the game ends there. It would be good to have a basic game loop. Such that the app will ask the players if they want to continue playing the game after it finishes. If they answer “yes”, then a new maze will be generated and the game will start all over again. \n\nOnce you’ve implemented the above improvements, the game is basically ready for the app store.\n\nYou can find the code for this app on its [GitHub repo](https://github.com/anchetaWern/RNMaze).","metaTitle":"Create a two-player maze game with React Native","metaDescription":"Build a two-player maze game for mobile using React Native and Node.js. Users can log in, be matched with an opponent, and race each other through a maze to a target. The tutorial takes advantage of MatterJS to handle game physics."}}],"defaultValue":"Channels \u0026 JavaScript","queryType":"tag","pages":25,"route":"/tutorials","query":{"product":"Channels","tag":"JavaScript","page":"2"}}},"page":"/tutorials","query":{"product":"Channels","tag":"JavaScript","page":"2"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=JavaScript&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:30:32 GMT -->
</html>