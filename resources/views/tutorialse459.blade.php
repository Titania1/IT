<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?page=28 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:55 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1">Learn &amp; Discover Pusher</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="1v9vy9q">.css-1v9vy9q{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;text-align:center;}@media all and (min-width:400px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1v9vy9q a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1v9vy9q a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:400px){.css-1v9vy9q{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}</style><p scale="h5" class="css-1v9vy9q e5jrto45"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">447</span> tutorials to help you build great apps</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials0e67.html?product=Channels" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials1bbb.html?product=Beams" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value=""/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:none;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/cryptocurrency-tracking-swift-laravel-part-2.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a cryptocurrency tracking app with push notifications using Swift and Laravel - Part 2: The iOS app</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Build a cryptocurrency tracking app featuring push notifications. Use Swift to create an iOS app, powered by a Laravel b...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-graph-ionic.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Cordova</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live voting app with Ionic</h3><p class="css-k12xad e5jrto45">Build a live voting app using Ionic, with a Node backend. The app replicates the behaviour of a Twitter poll: users can ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/football-feed-go-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a football results feed with Go and React</h3><p class="css-k12xad e5jrto45">Build a realtime football results feed, using Go for the backend and React for the frontend. Admins will be able to send...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cryptocurrency-tracking-swift-laravel-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a cryptocurrency tracking app with push notifications using Swift and Laravel - Part 1: The backend</h3><p class="css-k12xad e5jrto45">Build a cryptocurrency tracking app featuring push notifications. Use Swift to create an iOS app, powered by a Laravel b...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-blog-kotlin-push-notifications.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live blog in Kotlin with push notifications</h3><p class="css-k12xad e5jrto45">Build an Android app with Kotlin. The app connects to a Node.js server, and provides push notifications to alert users w...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-graph-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live graph with Go</h3><p class="css-k12xad e5jrto45">Build a simple interface featuring a live graph, supported by a Go backend. The application simulates a web traffic moni...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-dashboard-python.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live dashboard with Python</h3><p class="css-k12xad e5jrto45">Build a simple dashboard with a Flask backend that receives and displays updates instantly. Users will be able to submit...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/kotlin-ride-sharing-push-notifications.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a Kotlin ride sharing app with push notifications</h3><p class="css-k12xad e5jrto45">Build a full ridesharing platform featuring realtime updates and push notifications. Use Kotlin for both the apps, and t...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/geofencing-ionic.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Cordova<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Implement geofencing in Ionic</h3><p class="css-k12xad e5jrto45">Build a geofencing app for mobile using Ionic and Google Maps. Ionic is an open source SDK for developing native web app...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials2459.html?page=27" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials2679.html?page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials19d2.html?page=26" class="css-za1ua3 edg0byb1">26</a><a href="tutorials2459.html?page=27" class="css-za1ua3 edg0byb1">27</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialse459.html?page=28" class="css-2wakph edg0byb1">28</a><a href="tutorials219f.html?page=29" class="css-za1ua3 edg0byb1">29</a><a href="tutorialsb385.html?page=30" class="css-za1ua3 edg0byb1">30</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials02d1.html?page=50" class="css-5s6711 edg0byb1">50</a><a href="tutorials219f.html?page=29" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":447,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1DwFvg2XSM0e0KAWSkq6MQ","type":"Entry","createdAt":"2018-07-03T09:11:22.597Z","updatedAt":"2020-06-19T10:55:11.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a cryptocurrency tracking app with push notifications using Swift and Laravel - Part 2: The iOS app","url":"cryptocurrency-tracking-swift-laravel-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/cryptocurrency-alert-ios-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-07-02","description":"Build a cryptocurrency tracking app featuring push notifications. Use Swift to create an iOS app, powered by a Laravel backend. User will receive alerts when currency prices change. In part two, create the iOS app.","prerequisite":"You will need the following installed on your machine: Xcode, the Laravel CLI, SQLite and Cocoapods. Familiarity with the Xcode IDE will be helpful. You should have completed part one of the series.","content":"In the [first part](http://http://https://pusher.com/tutorials/cryptocurrency-tracking-swift-laravel-part-1) of this article, we started developing our cryptocurrency alert application. We developed the backend of the application that will power the iOS application. As it stands, our backend application can return settings for a device based on its UUID, save the settings for a device based on its UUID and also it can figure out what devices to send push notifications to when the currencies update.\n\nIn this part, we will focus on creating the iOS application using Swift and Xcode.\n\n## Prerequisites\n\nTo follow along you need the following requirements:\n\n\n- Completed the [part one](http://#) of this article.\n- [Xcode](https://developer.apple.com/xcode) installed on your machine.\n- Knowledge of the Xcode IDE.\n- Basic knowledge using the [Laravel framework](https://laravel.com/).\n- Basic knowledge of the [Swift programming language](http://developer.apple.com/swift).\n- [Laravel CLI](https://laravel.com/docs/5.6/installation) installed on your machine.\n- SQLite installed on your machine. [Installation guide](http://www.sqlitetutorial.net).\n- [Cocoapods](https://guides.cocoapods.org/using/getting-started.html) installed on your machine.\n- [Pusher Beams](https://pusher.com/beams) and [Channels](https://pusher.com/channels) application.\n\n\n## What we will be building\n\nWe already started out by building the backend of the application using Laravel. So next, we will build the iOS application using Swift. If you want to test the push notifications then you will need to run the application on a live device.\n\n### How the client application will work\n\nFor the client app, the iOS application, we will create a simple list that will display the available currencies and the current prices to the dollar. Whenever the price of the cryptocurrency changes, we will trigger an event using Pusher Channels so the prices are updated.\n\nFrom the application, you will be able to set a minimum and maximum price change when you want to be alerted. For instance, you can configure the application to send a push notification to the application when the price of one Etherium (ETH) goes below $500. You can also configure the application to receive a notification when the price of Bitcoin goes above $5000.\n\n### How the application will look\n\nWhen we are done with the application, here's how the application will look:\n\n![ios-cryptocurrency-part-1-demo](//images.ctfassets.net/1es3ne0caaid/1K08NTSdaoIIqWQ2YAyOqo/4efdb4fa01a2ee599bf5b71561a717a4/ios-cryptocurrency-part-1-demo.gif)\n\nLet’s get started.\n\n\n## Setting up your client application\n\nLaunch Xcode and click **Create a new Xcode project**. Select **Single View App** and click **Next**. Enter your **Product Name**, we will call our project *cryptoalat*, and select **Swift** from the **Language** options. You can also change any other detail you wish to on the screen then click **Next**.\n\n### Installing dependencies\n\nNow you have your Xcode project. Close Xcode and open a terminal window. `cd` to the iOS project directory in terminal and run the command below to create a Podfile:\n\n```\n    $ pod init\n```\n\n\u003e The Podfile is a specification that describes the dependencies of the targets of one or more Xcode projects. The file should simply be named Podfile. All the examples in the guides are based on CocoaPods version 1.0 and onwards. - [Cocoapods Guides](https://guides.cocoapods.org/using/the-podfile.html)\n\nThis will generate a new file called `Podfile` in the root of your project. Open this file in any editor and update the file as seen below:\n\n```\n    // File: Podfile\n    platform :ios, '11.0'\n    \n    target 'cryptoalat' do\n      use_frameworks!\n    \n      pod 'Alamofire', '~\u003e 4.7.2'\n      pod 'PushNotifications', '~\u003e 0.10.8'\n      pod 'PusherSwift', '~\u003e 6.1.0'\n      pod 'NotificationBannerSwift', '~\u003e 1.6.3'\n    end\n```\n\n\u003e If you used a project name other than cryptoalat, then change it in the Podfile to match your project’s target name. \n\nGo to terminal and run the command below to install your dependencies:\n\n```\n    $ pod install\n```\n\nWhen the installation is complete, you will have a  `*.xcworkspace` file in the root of your project. Open this file in Xcode and let’s start developing our cryptocurrency alert application.\n\n\n## Building the iOS application\n\n### Creating our storyboard\n\nThe first thing we need to do is design our storyboard for the application. This is what we want the storyboard to look like when we are done.\n\n![ios-cryptocurrency-part-2-storyboard](//images.ctfassets.net/1es3ne0caaid/3CgFeKuZnyMkQ0Kseaw2Gk/9e4a0a12e87fe5685f30c563d9f3ea8d/ios-cryptocurrency-part-2-storyboard.png)\n\nOpen the `Main.storyboard` file and design as seen above.\n\nAbove we have three scenes. The first scene, which is the entry point, is the launch scene. We then draw a manual segue with an identifier called **Main**. Then we set the segue **Kind** to **Present Modally**. This will present the next scene which is a navigation view controller. Navigation controllers already have an attached root view controller by default.\n\nWe will use this attached view controller, which is a `TableViewController`, as the main view for our application. It’ll list the available currencies and show us a text field that allows us to change the setting for that currency when it is tapped.\n\nOn the third scene, we set the reuse identifier of the cells to **coin** and we drag two labels to the prototype cell. The first label will be for the coin name and the second label will be for the price.\n\nNow that we have the scenes, let’s create some controllers and view classes and connect them to our storyboard scenes.\n\n### Creating your controllers\n\nIn Xcode, create a new class `LaunchViewController` and paste the contents of the file below into it:\n\n``` swift\n    import UIKit\n    \n    class LaunchViewController: UIViewController {\n        \n        override func viewDidAppear(_ animated: Bool) {\n            super.viewDidAppear(animated)\n            \n            SettingsService.shared.loadSettings {\n                self.routeToMainController()\n            }\n        }\n    \n        fileprivate func routeToMainController() {\n            performSegue(withIdentifier: \"Main\", sender: self)\n        }\n    }\n```\n\n\u003e Set the controller as the custom class for the first scene in the `Main.storyboard` file.\n\nIn the code, we load the settings using a `SettingsService` class we will create later. When the settings are loaded for the device, we then call the `routeToMainController` method, which routes the application to the main controller using the **Main** segue we created earlier.\n\nThe next controller we will be creating will be the `CoinsTableViewController`. This will be the controller that will be tied to the third scene which is the main scene. \n\nCreate the `CoinsTableViewController` and replace the contents with the following code;\n\n``` swift\n    import UIKit\n    import PusherSwift\n    import NotificationBannerSwift\n    \n    struct Coin {\n        let name: String\n        let rate: Float\n    }\n    \n    class CoinsTableViewController: UITableViewController {\n    \n        var coins: [Coin] = []\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n        }\n        \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return coins.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let coin = coins[indexPath.row]\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"coin\", for: indexPath) as! CoinTableViewCell\n    \n            cell.name.text = \"1 \\(coin.name) =\"\n            cell.amount.text = \"$\\(String(coin.rate))\"\n    \n            return cell\n        }\n    }\n```\n\n\u003e Set the controller as the custom class for the first scene in the `Main.storyboard` file.\n\nAbove we have defined the `Coin` struct and it has a `name` and `rate` property. We have the controller which we define the `coins` property as an array of `Coin`s. We then have some boilerplate code that comes with creating a table view controller.\n\nThe `numberOfSections` method specifies how many sections the table will have. In the first `tableView` method, we return the number of `coins` available and in the second `tableView` method, we define how we want each row to be handled.\n\n### Creating other supporting classes\n\nIf you noticed in the code above, we referenced a `CoinTableViewCell` as the class for each row in the last `tableView` method. Let’s create that.\n\nCreate a `CoinTableViewCell` class and paste the following code into it:\n\n``` swift\n    class CoinTableViewCell: UITableViewCell {\n        @IBOutlet weak var name: UILabel!    \n        @IBOutlet weak var amount: UILabel!\n    }\n```\n\nOpen the `Main.storyboard` file and set the class as the custom class for the prototype cell in the third scene of the `Main.storyboard` file. When you have set the class, connect the `@IBOutlet`s as specified in the cell class above.\n\nThe next class we need to create is the `SettingsService`. This class will be responsible for updating and fetching the settings for the device.\n\nCreate a new `SettingsService` class and replace the contents with the following code:\n\n``` swift\n    import Foundation\n    import Alamofire\n    import NotificationBannerSwift\n    \n    class SettingsService {\n        static let key = \"CryptoAlat\"\n        static let shared = SettingsService()\n        \n        var settings: Settings? {\n            get {\n                return self.getCachedSettings()\n            }\n            set(settings) {\n                if let settings = settings {\n                    self.updateCachedSettings(settings)\n                }\n            }\n        }\n        \n        private init() {}\n        \n        func loadSettings(completion: @escaping() -\u003e Void) {\n            fetchRemoteSettings { settings in\n                guard let settings = settings else {\n                    return self.saveSettings(self.defaultSettings()) { _ in\n                        completion()\n                    }\n                }\n                \n                self.updateCachedSettings(settings)\n                completion()\n            }\n        }\n        \n        fileprivate func defaultSettings() -\u003e Settings {\n            return Settings(\n                btc_min_notify: 0, \n                btc_max_notify: 0, \n                eth_min_notify: 0, \n                eth_max_notify: 0\n            )\n        }\n        \n        func saveSettings(_ settings: Settings, completion: @escaping(Bool) -\u003e Void) {\n            updateRemoteSettings(settings, completion: { saved in\n                if saved {\n                    self.updateCachedSettings(settings)\n                }\n                \n                completion(saved)\n            })\n        }\n        \n        fileprivate func fetchRemoteSettings(completion: @escaping (Settings?) -\u003e Void) {\n            guard let deviceID = AppConstants.deviceIDFormatted else {\n                return completion(nil)\n            }\n    \n            let url = \"\\(AppConstants.API_URL)?u=\\(deviceID)\"\n            Alamofire.request(url).validate().responseJSON { resp in\n                if let data = resp.data, resp.result.isSuccess {\n                    let decoder = JSONDecoder()\n                    if let settings = try? decoder.decode(Settings.self, from: data) {\n                        return completion(settings)\n                    }\n                }\n                \n                completion(nil)\n            }\n        }\n        \n        fileprivate func updateRemoteSettings(_ settings: Settings, completion: @escaping(Bool) -\u003e Void) {\n            guard let deviceID = AppConstants.deviceIDFormatted else {\n                return completion(false)\n            }\n            \n            let params = settings.toParams()\n            let url = \"\\(AppConstants.API_URL)?u=\\(deviceID)\"\n            Alamofire.request(url, method: .post, parameters: params).validate().responseJSON { resp in\n                guard resp.result.isSuccess, let res = resp.result.value as? [String: String] else {\n                    return StatusBarNotificationBanner(title: \"Failed to update settings.\", style: .danger).show()\n                }\n                \n                completion((res[\"status\"] == \"success\"))\n            }\n        }\n        \n        fileprivate func updateCachedSettings(_ settings: Settings) {\n            if let encodedSettings = try? JSONEncoder().encode(settings) {\n                UserDefaults.standard.set(encodedSettings, forKey: SettingsService.key)\n            }\n        }\n        \n        fileprivate func getCachedSettings() -\u003e Settings? {\n            let defaults = UserDefaults.standard\n            if let data = defaults.object(forKey: SettingsService.key) as? Data {\n                let decoder = JSONDecoder()\n                if let decodedSettings = try? decoder.decode(Settings.self, from: data) {\n                    return decodedSettings\n                }\n            }\n            \n            return nil\n        }\n    }\n```\n\nAbove we have the `SettingsService`. The first method `loadSettings` loads the settings from the API and then saves it locally. If there is no setting remotely, it calls the `defaultSettings` method and saves the response to the API.\n\nThe `saveSettings` method saves the `Settings` remotely using `updateRemoteSettings` and then locally using `updateCachedSettings`. The `fetchRemoteSettings` gets the settings from the API and decodes the response using the [Swift decodable API](https://blog.pusher.com/swift-4-decoding-json-codable/).\n\nNext, let’s define the `Settings` struct and have it extend `Codable`. In the same file for the `SettingsService`, add this above the `SettingsService` class definition:\n\n``` swift\n    struct Settings: Codable {\n        var btc_min_notify: Int?\n        var btc_max_notify: Int?\n        var eth_min_notify: Int?\n        var eth_max_notify: Int?\n        \n        func toParams() -\u003e Parameters {\n            var params: Parameters = [:]\n            \n            if let btcMin = btc_min_notify { params[\"btc_min_notify\"] = btcMin }\n            if let btcMax = btc_max_notify { params[\"btc_max_notify\"] = btcMax }\n            if let ethMin = eth_min_notify { params[\"eth_min_notify\"] = ethMin }\n            if let ethMax = eth_max_notify { params[\"eth_max_notify\"] = ethMax }\n    \n            return params\n        }\n    }\n```\n\nAbove we have a simple `Settings` struct that conforms to `Codable`. We also have a `toParams` method that converts the properties to a `Parameters` type so we can use it with [Alamofire](https://github.com/Alamofire/Alamofire) when making requests.\n\nOne last class we need to create is  `AppConstants`. We will use this class to keep all the data that we expect to remain constant and unchanged throughout the lifetime of the application.\n\nCreate a `AppConstants` file and paste the following code:\n\n``` swift\n    import UIKit\n    \n    struct AppConstants {\n        static let API_URL = \"http://127.0.0.1:8000/api/settings\"\n        static let deviceID = UIDevice.current.identifierForVendor?.uuidString\n        static let deviceIDFormatted = AppConstants.deviceID?.replacingOccurrences(of: \"-\", with: \"_\").lowercased()\n        static let PUSHER_INSTANCE_ID = \"PUSHER_BEAMS_INSTANCE_ID\"\n        static let PUSHER_APP_KEY = \"PUSHER_APP_KEY\"\n        static let PUSHER_APP_CLUSTER = \"PUSHER_APP_CLUSTER\"\n    }\n```\n\n\u003e Replace the `PUSHER_*` keys with the values gotten from the Pusher Channels and Beams dashboard.\n\n### Updating the settings for the device\n\nNow that we have defined the settings service, let’s update our controller so the user can set the minimum and maximum prices for each currency.\n\nOpen the `CoinsTableViewController` class and add the following method:\n\n``` swift\n    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        let coin = coins[indexPath.row]\n    \n        var minTextField: UITextField?\n        var maxTextField: UITextField?\n    \n        let title = \"Manage \\(coin.name) alerts\"\n        let message = \"Notification will be sent to you when price exceeds or goes below minimum and maximum price. Set to zero to turn off notification.\"\n    \n        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n        alert.addTextField { textfield in\n            minTextField = textfield\n            textfield.placeholder = \"Alert when price is below\"\n        }\n    \n        alert.addTextField { textfield in\n            maxTextField = textfield\n            textfield.placeholder = \"Alert when price is above\"\n        }\n    \n        alert.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n    \n        alert.addAction(UIAlertAction(title: \"Save\", style: .default, handler: { action in\n            guard let minPrice = minTextField?.text, let maxPrice = maxTextField?.text else {\n                return StatusBarNotificationBanner(title: \"Invalid min or max price\", style: .danger).show()\n            }\n    \n            var btcMin: Int?, btcMax: Int?, ethMin: Int?, ethMax: Int?\n    \n            switch coin.name {\n            case \"BTC\":\n                btcMin = Int(minPrice)\n                btcMax = Int(maxPrice)\n            case \"ETH\":\n                ethMin = Int(minPrice)\n                ethMax = Int(maxPrice)\n            default:\n                return\n            }\n    \n            let settings = Settings(\n                btc_min_notify: btcMin,\n                btc_max_notify: btcMax,\n                eth_min_notify: ethMin,\n                eth_max_notify: ethMax\n            )\n    \n            SettingsService.shared.saveSettings(settings, completion: { saved in\n                if saved {\n                    StatusBarNotificationBanner(title: \"Saved successfully\").show()\n                }\n            })\n        }))\n    \n        present(alert, animated: true, completion: nil)\n    }\n```\n\nThe method above is automatically called when a row is selected. In this method, we display a `UIAlertController` with two text fields for the minimum price and the maximum price. When the prices are submitted, the `SettingsService`  we created earlier takes care of updating the values both locally and remotely.\n\n### Adding realtime cryptocurrency update support\n\nOpen the `CoinsTableViewController` and add the `pusher` property to the class as seen below:\n\n``` swift\n    var pusher: Pusher!\n```\n\nThen replace the `viewDidLoad` method with the following code:\n\n``` swift\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    \n        pusher = Pusher(\n            key: AppConstants.PUSHER_APP_KEY, \n            options: PusherClientOptions(host: .cluster(AppConstants.PUSHER_APP_CLUSTER))\n        )\n    \n        let channel = pusher.subscribe(\"currency-update\")\n    \n        let _ = channel.bind(eventName: \"currency.updated\") { data in\n            if let data = data as? [String: [String: [String: Float]]] {\n                guard let payload = data[\"payload\"] else { return }\n    \n                self.coins = []\n    \n                for (coin, deets) in payload {\n                    guard let currentPrice = deets[\"current\"] else { return }\n                    self.coins.append(Coin(name: coin, rate: currentPrice))\n                }\n    \n                Dispatch.main.async {\n                    self.tableView.reloadData()\n                }\n            }\n        }\n    \n        pusher.connect()\n    }\n```\n\nIn the code above, we are using the [Pusher Swift SDK](https://pusher.com/docs/ios_quick_start) to subscribe to our `currency-update` Pusher Channel. We then subscribe to the `currency.updated` event on that channel. Whenever that event is triggered, we refresh the price of the cryptocurrency in realtime.\n\n### Adding push notifications to our iOS new application\n\nTo add push notification support, open the `AppDelegate` class and replace the contents with the following:\n\n``` swift\n    import UIKit\n    import PushNotifications\n    \n    @UIApplicationMain\n    class AppDelegate: UIResponder, UIApplicationDelegate {\n    \n        var window: UIWindow?\n        \n        func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n            PushNotifications.shared.start(instanceId: AppConstants.PUSHER_INSTANCE_ID)\n            PushNotifications.shared.registerForRemoteNotifications()\n            return true\n        }\n    \n        func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n            PushNotifications.shared.registerDeviceToken(deviceToken) {\n                if let deviceID = AppConstants.deviceIDFormatted {\n                    try? PushNotifications.shared.subscribe(interest: \"\\(deviceID)_eth_changed\")\n                    try? PushNotifications.shared.subscribe(interest: \"\\(deviceID)_btc_changed\")\n                }\n            }\n        }\n    }\n```\n\nIn the class above, we use the [Pusher Beams Swift SDK](https://docs.pusher.com/push-notifications/reference/ios) to register the device for push notifications. We then subscribe to the `*_eth_changed` and `*_btc_changed` interests, where `*` is the device’s unique UUID.\n\nNow that we have completed the logic for the application, let’s enable push notifications on the application in Xcode. \n\nIn the project navigator, select your project, and click on the **Capabilities** tab. [Enable Push Notifications](http://help.apple.com/xcode/mac/current/#/devdfd3d04a1) by turning the switch ON.\n\n![ios-cryptocurrency-part-2-enable-push](//images.ctfassets.net/1es3ne0caaid/7wLtGQ4Y00EUWiKgw6oQoE/8eb22b60c3271e6d0e47646c6423a7ad/ios-cryptocurrency-part-2-enable-push.png)\n\nThis will create an entitlements file in the root of your project. With that, you have provisioned your application to fully receive push notifications.\n\n### Allowing our application to connect locally\n\nIf you are going to be testing the app’s backend using a local server, then there is one last thing we need to do. Open the `info.plist` file and add an entry to the `plist` file to allow connection to our local server:\n\n![ios-cryptocurrency-part-2-local-connection](//images.ctfassets.net/1es3ne0caaid/5SXadC36VOcMs22Ooayw44/a7272c2b7126b3195878e1bcfad3e57b/ios-cryptocurrency-part-2-local-connection.png)\n\nThat’s all. We can run our application. However, **remember that to demo the push notifications, you will need an actual iOS device as simulators cannot receive push notifications.** If you are using a physical device, you’ll need to expose your local API using [Ngrok](https://ngrok.com) and then change the `API_URL`  **In** `AppConstants`.\n\nAnytime you want to update the currency prices, run the command below manually in your Laravel application:\n\n```\n    $ php artisan schedule:run\n```\n\nHere is a screen recording of the application in action:\n\n![ios-cryptocurrency-part-1-demo](//images.ctfassets.net/1es3ne0caaid/1K08NTSdaoIIqWQ2YAyOqo/4efdb4fa01a2ee599bf5b71561a717a4/ios-cryptocurrency-part-1-demo.gif)\n\n\n## Conclusion\n\nIn this article, we have been able to see how easy it is to create a cryptocurrency alert website using Laravel, Swift, Pusher Channels and Pusher Beams. The source code to the application built in this article is available on [GitHub](https://github.com/neoighodaro/cryptocurrency-alert-ios-app).","metaTitle":"Create a cryptocurrency tracking app - Part 2: The iOS app","metaDescription":"Use Swift and Laravel to create an iOS app for tracking cryptocurrency price changes. Users will receive alerts as prices go beyond set limits.  In part two, create the iOS app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6DAliEpVCgYEcIgOk4aYOu","type":"Entry","createdAt":"2018-07-06T09:15:49.491Z","updatedAt":"2018-07-06T09:15:49.491Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live voting app with Ionic","url":"live-graph-ionic","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/HackAfro/ionic-graph-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-07-02","description":"Build a live voting app using Ionic, with a Node backend. The app replicates the behaviour of a Twitter poll: users can vote for who they expect to win the World Cup.","prerequisite":"You should have Node and npm installed on your machine. Familiarity with Ionic development will be helpful.","content":"\u003e **Data visualization** is viewed by many disciplines as a modern equivalent of visual communication. It involves the creation and study of the visual representation of data. \n\u003e - [Wikipedia](https://en.wikipedia.org/wiki/Data_visualization)\n\n An important advantage of data visualization is how it enables users to more effectively see connections as they are occurring between operating conditions and business performance. Adding realtime functionality using [Pusher](https://pusher.com) improves this experience as data changes are witnessed in realtime.\n\nWe’ll be creating an application that will present data about how football fans predict who wins the current running World Cup. Using our application, users will complete a poll and then see the data from the polls in realtime.\n\nHere’s a screenshot of the final product:\n\n![ionic-live-graph-demo](//images.ctfassets.net/1es3ne0caaid/6bQMCuvpks8wsgkOWwAGgq/f7e885b2d2af1dbd1a5dbbbe711d93a3/ionic-live-graph-demo.png)\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of [Angular](https://angular.io), Ionic and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nIf you have no prior knowledge of Ionic, kindly follow the tutorial [here](https://ionicframework.com/docs/intro/tutorial/). Come back and finish the tutorial when you’re done.\n\nWe’ll be using these tools to build our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Ionic](https://ionicframework.com)\n- [Chart.js](http://www.chartjs.org/)\n\nWe’ll be sending data to the server and using [Pusher’s](https://pusher.com) pub/sub pattern, we’ll listen to and receive data in realtime. To make use of Pusher you’ll have to create an account [here](https://pusher.com). \n\nAfter account creation, visit the dashboard. Click **Create new Channels app**, fill out the details, click **Create my app**, and make a note of the details on the **App Keys** tab.\n\n\nLet’s build!\n\n## Setup and folder structure\n\nWe’ll initialize our project using the Ionic CLI (command line interface). First, install the CLI by running `npm install -g ionic` in your terminal. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/) installed.\n\nTo create a new Ionic project called `chat-app` using the CLI, open a terminal and run:   \n\n```\n    ionic start ionic-polls blank\n```\n\nThe command is simply telling the CLI to create a new project called `ionic-polls` without a template. \n\nFollow the prompt and integrate your app with Cordova to target IOS and Android.\n\n![ionic-geofence-integrate-cordova](//images.ctfassets.net/1es3ne0caaid/1IUUkS2jWEsGkaoC0ImGA0/a4419e24c715605029dc1edc7a6a60d5/ionic-geofence-integrate-cordova.png)\n\n Type **Y** to integrate Cordova into the application. The next prompt will ask if you want to integrate Ionic pro into the application. If you have a pro account type **Y** and **N** if you don’t.\n\nThe Ionic team provides three ready made starter templates. You can check out the rest of the templates [here](https://ionicframework.com/getting-started).\n\nOpen the newly created folder, your folder structure should look something like this:\n\n```\n    chat-app/\n      resources/\n      node_modules/\n      src/\n        app/\n          app.component.html\n          app.module.ts\n          app.scss\n          ...\n```\n\nOpen a terminal inside the project folder and start the application by running `ionic serve`. A browser window should pop up and you should see a page like this.\n\n\n![ionic-chat-sentiment-ionic-serve](//images.ctfassets.net/1es3ne0caaid/cZJy8Cc9WgkoiOEKI44uA/8a6010cf3b3515127f486c76c18f33de/ionic-chat-sentiment-ionic-serve.png)\n\n## Installing dependencies\n\nNext, run the following commands in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher\n    \n    // front-end dependencies\n    npm install ng2-charts pusher-js\n```\n\nStart the Ionic development server by running `ionic serve` in a terminal in the root folder of your project.\n\n\n## Building our server\n\nWe’ll build our server using [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/).\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.PUSHER_CLUSTER,\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```\n\nThe calls to our endpoint will be coming in from a different origin. Therefore, we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nThis is a standard Node application configuration, nothing specific to our app.\n\nCreate a Pusher account and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`. Create a file in the root folder of the project and name it `.env`. Copy the the following snippet into the `.env` file and ensure to replace the placeholder values with your Pusher credentials.\n\n```\n    // .env\n    \n    // Replace the placeholder values with your actual pusher credentials\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n    PUSHER_CLUSTER=PUSHER_CLUSTER\n```\n\nWe’ll make use of the `dotenv` library to load the variables contained in the `.env` file into the Node environment. The `dotenv` library should be initalized as early as possible in the application.\n\n\n### Sending votes\n\nTo let users send requests to the server, we’ll create a route to handle incoming requests. Update your `server.js`  file with the code below. \n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      ...\n    });\n    \n    \n    app.post('/vote', (req, res) =\u003e {\n      const {body} = req;\n      const data = {\n        ...body,\n        // set the selected property of the body to true\n        selected: true,\n      };\n      // trigger a new-entry event on the vote-channel\n      pusher.trigger('vote-channel', 'new-entry', data);\n      res.json(data);\n    });\n    \n     ...\n```\n\n- We added a POST route(`/vote`) to handle incoming requests.\n- Using [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment), we got the body of the request.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`vote-channel`), an event name (`new-entry`), and a payload.\n- The payload being sent contains the body of the request sent in. The `selected` property of the payload is set to `true`.\n\nStart the server by running `node server` in a terminal in the root folder of your project.\n\n\n## Home view\n\nThe home view of the project will house both the polling area and the area where the data is visualized. We’ll present the user with options and a submit button to place vote.\n\nOpen the `home.html` file and replace it with the content below. The `home.html` file is in the `src/pages/home/` directory.\n\n``` html\n    \u003c!-- src/pages/home/home.html --\u003e\n    \n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003e\n          Vote\n        \u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \u003cion-content\u003e\n      \u003cdiv padding\u003e\n        \u003ch1 class=\"header\"\u003eWho will win the world cup?\u003c/h1\u003e\n        \u003cp class=\"sub-header\"\u003e* Place vote to see results\u003c/p\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"vote-area\" *ngIf=\"!voted\"\u003e\n        \u003cdiv class=\"options\"\u003e\n          \u003cbutton ion-button full class=\"option\" color=\"light\" [ngClass]=\"{active: selectedOption === option}\" *ngFor=\"let option of optionsArray\"\n            (click)=\"selectOption(option)\"\u003e{{options[option].name}}\u003c/button\u003e\n        \u003c/div\u003e\n        \u003cdiv\u003e\n          \u003cbutton ion-button block class=\"submit\" (click)=\"vote()\"\u003eSubmit Vote!\u003c/button\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"result-area\" *ngIf=\"voted\"\u003e\n        \u003c!-- Charts area --\u003e\n      \u003c/div\u003e\n    \u003c/ion-content\u003e\n```\n\n\n\n- In the code snippet above, we looped through `optionsArray` to create a view based on the player’s information. \n- The `vote` method will make use of the `HttpClient`  to send the user’s selection as a request to the server.\n- An option is active if the current `selectedOption` is equal to the option’s name.\n\nVariables used will be defined in the component’s TypeScript file.\n\n### Styling\n\nReplace the contents of `home.scss` with the following:\n\n``` scss\n    // src/pages/home/home.scss\n    \n    page-home {\n      .toolbar-background {\n        background: #1cd8d2; /* fallback for old browsers */\n        background: linear-gradient(to right, #93edc7, #1cd8d2);\n      }\n      .toolbar-title {\n        color: white;\n      }\n      .header {\n        font-size: 35px;\n        line-height: 1.1;\n      }\n       .sub-header{\n        margin: 0;\n        opacity: 0.5;\n        font-size: 13px;\n        font-weight: bold;\n      }\n      .options {\n        margin-top: 1.5rem;\n        padding: 0 17px 5px;\n        .option {\n          margin: 15px 0;\n          padding-top: 32px;\n          padding-bottom: 32px;\n          opacity: 0.6;\n          font-size: 17px;\n          font-weight: bold;\n          box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.2);\n          \u0026.active {\n            border-left-width: 5px;\n            border-left-style: solid;\n            border-image: linear-gradient(to right, #93edc7, #1cd8d2) 1 100%;\n            box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.2);\n            opacity: 0.9;\n          }\n        }\n      }\n      .submit {\n        background: #1cd8d2; /* fallback for old browsers */\n        background: linear-gradient(to right, #93edc7, #1cd8d2);\n        border-radius: 0;\n        padding-top: 35px;\n        padding-bottom: 35px;\n        margin-bottom: 0;\n        font-size: 19px;\n        font-weight: bold;\n      }\n      .response{\n        @extend .submit;\n        margin-top: 5rem;\n      }\n    }\n```\n\n\nThese styles are meant to add a bit of life to our application. It also helps distinguish between states during application use. \n\n### Home component\n\nIn the HTML snippet, we made reference to some variables that weren’t yet defined, we’ll create the variables here with the logic behind our application. \n\n``` typescript\n    // src/pages/home/home.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { NavController } from 'ionic-angular';\n    import { HttpClient } from '@angular/common/http';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html',\n    })\n    export class HomePage implements OnInit {\n      constructor(\n        public navCtrl: NavController,\n        private http: HttpClient,\n      ) {}\n      options = {\n        germany: { name: 'Germany', votes: 0 },\n        spain: { name: 'Spain', votes: 0 },\n        france: { name: 'France', votes: 0 },\n        nigeria: { name: 'Nigeria', votes: 0 },\n      };\n      optionsArray = Object.keys(this.options);\n      chartData = this.optionsArray.map((val) =\u003e this.options[val].votes);\n      selectedOption = '';\n      chartType = 'doughnut';\n      voted = false;\n      selectOption(option) {\n        this.selectedOption = this.selectedOption !== option ? option : '';\n      }\n      computeData(option) {\n        this.options = {\n          ...this.options,\n          [option]: {\n            ...this.options[option],\n            votes: ++this.options[option].votes,\n          },\n        };\n        this.chartData = this.optionsArray.map((val) =\u003e this.options[val].votes);\n      }\n      vote() {\n        if (this.selectedOption) {\n          this.http\n            .post('http://localhost:4000/vote', { option: this.selectedOption })\n            .subscribe((res) =\u003e {\n              this.voted = true;\n            });\n        }\n      }\n      ngOnInit() {\n        \n      }\n    }\n```\n\n\n\n- `vote`: this method makes use of the native HttpClient service to make requests to our server. A request is sent, only if the user has made a selection. When a response is returned the `voted` property is set to true.\n\n\n- `computeData`: when a response is returned, this function takes the `option`  and increments the votes for the selected option.  \n\n\n- `selectOption`: this method will be used to set the `selectedOption` property to the `option`  param passed it. \n\nTo make use of the HttpClient service, we’ll need to import the `HttpClientModule` into the `app.module.ts` file. Update your app module file as follows:\n\n``` typescript\n    // src/app/app.module.ts\n    \n    ...\n    import { HomePage } from '../pages/home/home';\n    import {HttpClient, HttpClientModule} from '@angular/common/http';\n    \n    @NgModule({\n      ...\n      imports: [\n        ...\n        HttpClientModule,\n      ],\n      ...\n      providers: [\n        ...\n        HttpClient\n      ]\n    })\n    export class AppModule {}\n```\n\n\nLet’s check how our application looks at this point. Make sure the server(`node server`) and Ionic dev server(`ionic serve`) are both running.\n\n![ionic-live-graph-homepage](//images.ctfassets.net/1es3ne0caaid/vW6xfrCOECykEMyOSum28/7eb2e7362cf2b6de7a182149e1503994/ionic-live-graph-homepage.png)\n\n\n## Introducing Pusher\n\nSo far we have an application that allows users be a part of the polling process but data updates aren’t happening in realtime.  Let’s create a provider that will make it easier to include Pusher in our components.\n\nWe’ll create a Pusher provider to be used application wide. The Ionic CLI can aid in the provider creation. Open a terminal in your project’s root folder and run the following command.\n\n```\n    ionic generate provider pusher\n```\n\nThis command simply tells the CLI to generate a service named `pusher`. Now open the `pusher.ts` file in the `src/providers/pusher/` directory and update it with the code below.\n\n``` typescript\n    // src/providers/pusher/pusher.ts\n    \n    import { Injectable } from '@angular/core';\n    import Pusher from 'pusher-js';\n    \n    @Injectable()\n    export class PusherProvider {\n      constructor() {\n        const pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'PUSHER_CLUSTER',\n        });\n        this.channel = pusher.subscribe('vote-channel');\n      }\n      channel;\n      public init() {\n        return this.channel;\n      }\n    }\n```\n\n- First, we initialize Pusher in the constructor. \n- The  `init` method returns the Pusher property we created. \n\n\n\u003e **Note**: ensure you replace the `PUSHER_KEY` and `PUSHER_CLUSTER` string with your actual credentials.\n  \n\nTo make the service available application wide, import it into the `app.module.ts` file.\n\n``` typescript\n    // app.module.ts\n    ...\n    import {HttpClient, HttpClientModule} from '@angular/common/http';\n    import { PusherProvider } from '../providers/pusher/pusher';\n    \n    @NgModule({\n      ...\n      providers: [\n        ...\n        PusherProvider,\n      ]\n    })\n    export class AppModule {}\n```\n\nThe next step is to include the provider in the `home.ts` file. Using the `PusherProvider`, we’ll listen for `vote` events from the server and update our app in real time according to votes placed by users.\n \nOpen the `home.ts` file and update the `ngOnInit` lifecycle to listen for Pusher events.\n \n``` typescript\n    // src/pages/home/home.ts\n    ...\n    import { PusherProvider } from '../../providers/pusher/pusher';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html',\n    })\n    export class HomePage implements OnInit {\n      constructor(\n        ...\n        private pusher: PusherProvider\n      ) {}\n      ...\n      \n      ngOnInit() {\n        const channel = this.pusher.init();\n        channel.bind('new-entry', (data) =\u003e {\n          this.computeData(data.option);\n        });\n    }\n```\n\nNow our application should receive vote updates in realtime. Let’s include a chart component to visualize the data in the application.\n\n## Charts component\n\nTo visualize the data in our application, we’ll be making use of [ng2-charts](https://valor-software.com/ng2-charts/) to create charts and present the data in a graphical format. Let’s make use of the components provided by the [ng2-charts](https://valor-software.com/ng2-charts/) library. Update the `home.html` file to include the `canvas` provided by [ng2-charts](https://valor-software.com/ng2-charts/).\n\nOpen the `home.html` file and update it with the contents below:\n\n``` html\n    // src/pages/home/home.html\n    \n    ...\n    \n    \u003cion-content\u003e\n      ...\n      \u003cdiv class=\"result-area\" *ngIf=\"voted\"\u003e\n        \u003ccanvas baseChart [data]=\"chartData\" [labels]=\"optionsArray\" [chartType]=\"chartType\"\u003e\u003c/canvas\u003e\n        \u003cdiv ion-button block class=\"response\"\u003eThank you for voting!\u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/ion-content\u003e\n```\n\nTo make use of the `ng2-charts` package, we’ll have to import the `ChartsModule` into our module file.\n\nUpdate the `app.module.ts` file like so:\n\n``` typescript\n    // src/app/app.module.ts\n    ...\n    import {HttpClient, HttpClientModule} from '@angular/common/http';\n    import {ChartsModule} from 'ng2-charts';\n    \n    @NgModule({\n      ...\n      imports: [\n        ...\n        HttpClientModule,\n        ChartsModule\n      ],\n      ...\n    })\n    ...\n```\n\n At this point, your application should have realtime updates when votes are placed. Ensure that the server is running alongside the Ionic development server. If not, run `node server` and `ionic serve` in two separate terminals. Both terminals should be opened in the root folder of your project.\n  \nTo test the realtime functionality of the application, open two browsers side-by-side and engage the application. Data updates should be in realtime.\n\n\n## Testing on mobile devices\n\nTo test the application on your mobile device, download the [IonicDevApp](https://ionicframework.com/docs/pro/devapp/) on your mobile device. Make sure your computer and your mobile device are connected to the same network. When you open the IonicDevApp, you should see Ionic apps running on your network listed. \n\n\n\u003e **Note:** Both the server(`node server`), ngrok for proxying our server and the Ionic dev server(`ionic serve`) must be running to get the application working. Run the commands in separate terminal sessions if you haven’t done so already.\n\n![ionic-geofence-in-app](//images.ctfassets.net/1es3ne0caaid/4Tto6qC43SyoeuuCwWk6kC/10b2fcce68e32c25cb8da5cfe7e635ad/ionic-geofence-in-app.png)\n\nTo view the application, click on it and you should see a similar view to what was in the browser. Sending messages to the server might have worked in the browser but localhost doesn’t exist on your phone, so we’ll need to create a proxy to be able to send messages from mobile. \n\n\n## Using Ngrok as a proxy\n\nTo create a proxy for our server, we’ll download Ngrok. Visit the [download](https://ngrok.com/download) page on the Ngrok website. Download the client for your OS. Unzip it and run the following command in the folder where Ngrok can be found:\n\n```\n    ./ngrok http 4000\n```\n\n![ionic-geofence-ngrok](//images.ctfassets.net/1es3ne0caaid/5xPwNwr4DmMCA6k0MaaIqo/d569c60667d1da3659409f57b9a52da5/ionic-geofence-ngrok.png)\n\nCopy the forwarding url with `https` and place it in the `home.ts` file that previously had `http://localhost:4000/vote`. Please do not copy mine from the screenshot above. \n\n``` typescript\n    // src/pages/home/home.ts\n    ...\n    export class ChatComponent implements OnInit {\n      ...\n      vote() {\n        ...\n        this.http\n            .post('\u003cNGROK_URL\u003e/vote', data)\n            .subscribe((res) =\u003e {\n              this.voted = true;\n            });\n      }\n      ...\n    }\n    ...\n```\n\n\u003e Ensure to include the forwarding URL you copied where the placeholder string is\n\nNow you should be receiving messages sent from the phone on the browser. Preferably you can test it with two mobile devices connected to the same network.\n\n\n![ionic-live-graph-demo](//images.ctfassets.net/1es3ne0caaid/6bQMCuvpks8wsgkOWwAGgq/f7e885b2d2af1dbd1a5dbbbe711d93a3/ionic-live-graph-demo.png)\n\n\n\u003e **Note:** Both the server(`node server`), ngrok for proxying our server and the Ionic dev server(`ionic serve`) must be running to get the application working. Run the commands in separate terminal sessions if you haven’t done so already.\n\nTo build your application to deploy on either the AppStore or PlayStore, follow the instructions found [here](https://ionicframework.com/docs/pro/package/).\n\n\n## Conclusion\n\nUsing Pusher,  we’ve built out an application using the pub/sub pattern to recieve realtime updates. With the help of Chart.js, our data was well presented using charts. You can check out the repo containing the demo on [GitHub](https://github.com/HackAfro/ionic-graph-app).","metaTitle":"Build a live voting app with Ionic","metaDescription":"Use Ionic and Node to create a live voting app, similar to a Twitter poll. Users can vote for who they expect to win the World Cup."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5vdxhGJceAEUQ0AusccaWE","type":"Entry","createdAt":"2018-07-04T14:13:24.457Z","updatedAt":"2020-06-19T11:03:40.508Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a football results feed with Go and React","url":"football-feed-go-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/pusher-football-feed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-07-02","description":"Build a realtime football results feed, using Go for the backend and React for the frontend. Admins will be able to send match updates out to any subscribed application.","prerequisite":"You will need Go, dep, Node and npm installed on your machine.","content":"## Introduction\n\nThe World Cup is with us once again. In this article we are going to show how you can add a real-time football results feed to your site so that your users can keep up with the latest scores without needing to go elsewhere.\n\nWe are going to build a system where a football pundit can enter details of matches, and other sites can display a live feed of the results as they are entered.\n\n![go-react-football-feed-demo](//images.ctfassets.net/1es3ne0caaid/41013Qn0XmcY8QcWc4Ikas/f842d3de9f3bdfda7610bdb15ea8c146/go-react-football-feed-demo.gif)\n\n## Prerequisites\n\nThis article focuses on using Go and React. As such, it is important that you have Go already installed and configured on your system - including having the `GOPATH` set up correctly. If you do not know how to do this then the [Go documentation](https://golang.org/doc/install) can explain this all. A certain level of understanding of Go is assumed to follow along with this article. The “[A Tour of Go](https://tour.golang.org/welcome/1)” tutorial is a fantastic introduction if you are new to the language.\n\nWe are also going to use the [dep](https://golang.github.io/dep/) tool to manage the dependencies of our backend application, so make sure that this is correctly installed as well.\n\nFinally, in order to develop and run our pundits web UI you will need to have a recent version of [Node.js](https://nodejs.org/en/) installed and correctly set up. A certain level of understanding of JavaScript is also assumed to follow along with this article.\n\n## Create a Pusher account\n\nIn order to follow along, you will need to create a free Pusher account. This is done by visiting the [Pusher dashboard](https://dashboard.pusher.com/) and logging in, creating a new account if needed. Next click on **Channels apps** on the sidebar, followed by **Create Channels app.** \n\n![go-react-football-feed-create-pusher-app](//images.ctfassets.net/1es3ne0caaid/1S9MC94S2gE40S4CK2OEG0/5f2322e334c6fa1e2d5a3cc53a97a7e0/go-react-football-feed-create-pusher-app.png)\n\nFill out this dialog as needed and then click the **Create my app** button. Then click on **App Keys** and note down the credentials for later.\n\n![go-react-football-feed-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/54CJSIa3o4siOcg2wqimEE/48a3e6990bf8f221badf09f8c9c99e98/go-react-football-feed-pusher-app-keys.png)\n\n## Building the backend service\n\nWe are going to write our backend service using the Go language, using the library to power our HTTP service.\n\nOur service is going to offer the following endpoints:\n\n- POST /match - this will trigger events for half time, extra time and full time.\n- POST /goal - this will trigger events to indicate that a goal has been scored.\n- POST /card - this will trigger events to indicate that a yellow or red card has been given.\n\nTo start with, we need to create an area to work with. Create a new directory under your `GOPATH` in which to work:\n\n```\n    # Mac and Linux\n    $ mkdir -p $GOPATH/src/pusher/football-feed\n    $ cd $GOPATH/src/pusher/football-feed\n    \n    # Windows Powershell\n    mkdir -path $env:GOPATH/src/pusher/football-feed\n    cd $env:GOPATH/src/pusher/football-feed\n```\n\nWe can then initialise our work area for this project. This is done using the `dep` tool:\n\n```\n    $ dep init\n```\n\nDoing this will create the **`Gopkg.toml` and `Gopkg.lock` files used to track our dependencies, and the `vendor` **directory which is used to store vendor dependencies.\n\nThe first thing we want is to be able to send Pusher Channels messages. This is the core of our backend application. For this we will be creating a  new directory called `internal/notifier` in the root of rht project area and then writing a file called `internal/notifier/notifier.go`, as follows:\n\n``` go\n    // internal/notifier/notifier.go\n    package notifier\n    import (\n        \"github.com/pusher/pusher-http-go\"\n    )\n    type Message interface{}\n    type MatchMessage struct {\n        Event     string `json:event`\n        HomeTeam  string `json:homeTeam`\n        AwayTeam  string `json:awayTeam`\n        HomeScore uint16 `json:homeScore`\n        AwayScore uint16 `json_awayScore`\n    }\n    type GoalMessage struct {\n        Player    string `json:player`\n        ForTeam   string `json:forTeam`\n        HomeTeam  string `json:homeTeam`\n        AwayTeam  string `json:awayTeam`\n        HomeScore uint16 `json:homeScore`\n        AwayScore uint16 `json_awayScore`\n        OwnGoal   bool   `json:ownGoal`\n    }\n    type CardMessage struct {\n        Team   string `json:team`\n        Player string `json:player`\n        Card   string `json:card`\n    }\n    type Notifier struct {\n        notifyChannel chan\u003c- Message\n    }\n    func notifier(notifyChannel \u003c-chan Message) {\n        client := pusher.Client{\n            AppId:   \"PUSHER_APP_ID\",\n            Key:     \"PUSHER_KEY\",\n            Secret:  \"PUSHER_SECRET\",\n            Cluster: \"PUSHER_CLUSTER\",\n            Secure:  true,\n        }\n        for {\n            message := \u003c-notifyChannel\n            switch payload := message.(type) {\n            case GoalMessage:\n                client.Trigger(\"match\", \"goal\", payload)\n            case CardMessage:\n                client.Trigger(\"match\", \"card\", payload)\n            case MatchMessage:\n                client.Trigger(\"match\", \"match\", payload)\n            }\n        }\n    }\n    func New() Notifier {\n        notifyChannel := make(chan Message)\n        go notifier(notifyChannel)\n        return Notifier{notifyChannel}\n    }\n    func (notifier *Notifier) Notify(msg Message) {\n        notifier.notifyChannel \u003c- msg\n    }\n```    \n\n\n\u003e **Note:** ensure that PUSHER_APP_ID, PUSHER_KEY, PUSHER_SECRET and PUSHER_CLUSTER are all replaced with values obtained from the Pusher Dashboard when you registered your app.\n\nWe start by defining a number of messages that we can handle - `MatchMessage`, `GoalMessage` and `CardMessage`. We then define our `Notifier`  type that will be handling the actual notifications. This works off of a go-routine so that the actual Pusher Channels messages are sent in the background and do not in any way interfere with the performance of the HTTP requests.\n\nWhen processing a message, we determine the Pusher “event” based on the type of the Message received, and we use the message as-is as the payload.\n\nThe next thing we want is the web server. This will be done by writing a file called `internal/webapp/webapp.go` in our project area, as follows:\n\n``` go\n    // internal/webapp/webapp.go\n    package webapp\n    import (\n        \"net/http\"\n        \"pusher/football-feed/internal/notifier\"\n        \"github.com/gin-contrib/cors\"\n        \"github.com/gin-gonic/gin\"\n    )\n    func StartServer(notify *notifier.Notifier) {\n        r := gin.Default()\n        r.Use(cors.Default())\n        r.POST(\"/match\", func(c *gin.Context) {\n            var json notifier.MatchMessage\n            if err := c.BindJSON(\u0026json); err == nil {\n                notify.Notify(json)\n                c.JSON(http.StatusCreated, json)\n            } else {\n                c.JSON(http.StatusBadRequest, gin.H{})\n            }\n        })\n        r.POST(\"/goal\", func(c *gin.Context) {\n            var json notifier.GoalMessage\n            if err := c.BindJSON(\u0026json); err == nil {\n                notify.Notify(json)\n                c.JSON(http.StatusCreated, json)\n            } else {\n                c.JSON(http.StatusBadRequest, gin.H{})\n            }\n        })\n        r.POST(\"/card\", func(c *gin.Context) {\n            var json notifier.CardMessage\n            if err := c.BindJSON(\u0026json); err == nil {\n                notify.Notify(json)\n                c.JSON(http.StatusCreated, json)\n            } else {\n                c.JSON(http.StatusBadRequest, gin.H{})\n            }\n        })\n        r.Run()\n    }\n```\n\nThis gives us our three routes, each of which does essentially the same:\n\n- Parse the request payload as JSON into an appropriate structure\n- Use the Notifier from above to send a Pusher Channels notification for this message\n\nWe also need our main application file. This will be `/football-feed.go` in our project area, as follows:\n\n``` go\n    // football-feed.go\n    package main\n    import (\n        \"pusher/football-feed/internal/notifier\"\n        \"pusher/football-feed/internal/webapp\"\n    )\n    func main() {\n        notifier := notifier.New()\n        webapp.StartServer(\u0026notifier)\n    }\n```\n\nThe final thing to do is to ensure that our dependencies are all available. This is done by executing:\n\n```\n    $ dep ensure\n```\n\nWe can now start the application by executing `go run football-feed.go`:\n\n```\n    $ go run football-feed.go\n    [GIN-debug] [WARNING] Running in \"debug\" mode. Switch to \"release\" mode in production.\n     - using env:        export GIN_MODE=release\n     - using code:        gin.SetMode(gin.ReleaseMode)\n    \n    [GIN-debug] POST   /match                    --\u003e pusher/football-feed/internal/webapp.StartServer.func1 (4 handlers)\n    [GIN-debug] POST   /goal                     --\u003e pusher/football-feed/internal/webapp.StartServer.func2 (4 handlers)\n    [GIN-debug] POST   /card                     --\u003e pusher/football-feed/internal/webapp.StartServer.func3 (4 handlers)\n    [GIN-debug] Environment variable PORT is undefined. Using port :8080 by default\n    [GIN-debug] Listening and serving HTTP on :8080\n```\n\nAlternatively, we can build an executable using `go build football-feed.go`. This executable can then be distributed however we need to do so - for example, copying it into a Docker container or directly onto our production VMs.\n\nIf we were to make calls to this manually - e.g. by using cURL - then we would see the Pusher Channels events in the debug dashboard:\n\n```\n    \u003e $ curl -v -X POST http://localhost:8080/card -H \"Content-Type: application-json\" --data '{\"team\": \"Russia\", \"player\": \"Aleksandr Golovin\", \"card\": \"yellow\"}'\n    *   Trying ::1...\n    * TCP_NODELAY set\n    * Connected to localhost (::1) port 8080 (#0)\n    \u003e POST /card HTTP/1.1\n    \u003e Host: localhost:8080\n    \u003e User-Agent: curl/7.54.0\n    \u003e Accept: */*\n    \u003e Content-Type: application-json\n    \u003e Content-Length: 67\n    \u003e\n    * upload completely sent off: 67 out of 67 bytes\n    \u003c HTTP/1.1 201 Created\n    \u003c Content-Type: application/json; charset=utf-8\n    \u003c Date: Mon, 25 Jun 2018 13:09:21 GMT\n    \u003c Content-Length: 62\n    \u003c\n    * Connection #0 to host localhost left intact\n    {\"Team\":\"Russia\",\"Player\":\"Aleksandr Golovin\",\"Card\":\"yellow\"}\n```\n\n![go-react-football-feed-event-creator](//images.ctfassets.net/1es3ne0caaid/5u8wfHjneEMwCUaUwmMYcc/d37034bf9266e4d1cbf041b8eae23101/go-react-football-feed-event-creator.png)\n\n## Pundit application\n\nNow that we’ve got our backend that is able to react to messages and send Pusher Channels events, we want to write our Football Pundit application that will actually trigger these messages. This is going to be a simple Create React App application, using Semantic UI to give us some structure to the page.\n\nFirstly, we need to actually create the application. This is done by executing:\n\n```\n    $ create-react-app pundit-ui\n    $ cd pundit-ui\n    $ npm install\n```\n\n\u003e **Note:** you can use “yarn” instead of “npm” if you prefer.\n\nWe then want to add some dependencies that we need for the system:\n\n```\n    $ npm add --save uuid semantic-ui-css semantic-ui-react\n```\n\nOur UI is going to consist of a list of games that we are reporting on. These games will either be Started - in which case the match is underway - or Unstarted - in which case we are still entering the match details.\n\nOur Unstarted Matches will be rendered by a component defined in `src/UnstartedGame.js`, as follows:\n\n``` javascript\n    // src/UnstartedGame.js\n    import React from 'react';\n    import { Segment, Grid, Form, Header, Button } from 'semantic-ui-react';\n    export default function UnstartedGame({game, onTeamUpdated, onPlayerUpdated, onCancel, onStart}) {\n        const homePlayers = [];\n        const awayPlayers = [];\n        for (let i = 1; i \u003c= 11; ++i) {\n            homePlayers.push(\u003cinput placeholder={`Home Player ${i}`}\n                value={game.home.players[`player_${i}`] || ''}\n                onChange={(e) =\u003e onPlayerUpdated('home', `player_${i}`, e.target.value)}\n                key={`home.players.player_${i}`} /\u003e);\n            awayPlayers.push(\u003cinput placeholder={`Away Player ${i}`}\n                value={game.away.players[`player_${i}`] || ''}\n                onChange={(e) =\u003e onPlayerUpdated('away', `player_${i}`, e.target.value)}\n                key={`away.players.player_${i}`} /\u003e);\n        }\n        return (\n            \u003cSegment\u003e\n                \u003cForm\u003e\n                    \u003cGrid\u003e\n                        \u003cGrid.Row columns={1}\u003e\n                            \u003cGrid.Column\u003e\n                                \u003cHeader as='h2' textAlign='center'\u003eNew Match\u003c/Header\u003e\n                            \u003c/Grid.Column\u003e\n                        \u003c/Grid.Row\u003e\n                        \u003cGrid.Row columns={2}\u003e\n                                \u003cGrid.Column\u003e\n                                    \u003cinput placeholder=\"Home Team\"\n                                        value={game.home.team}\n                                        onChange={(e) =\u003e onTeamUpdated('home', e.target.value)} /\u003e\n                                \u003c/Grid.Column\u003e\n                                \u003cGrid.Column\u003e\n                                    \u003cinput placeholder=\"Away Team\"\n                                        value={game.away.team}\n                                        onChange={(e) =\u003e onTeamUpdated('away', e.target.value)} /\u003e\n                                \u003c/Grid.Column\u003e\n                        \u003c/Grid.Row\u003e\n                        \u003cGrid.Row columns={1}\u003e\n                            \u003cGrid.Column\u003e\n                                \u003cHeader as='h2' textAlign='center'\u003ePlayers\u003c/Header\u003e\n                            \u003c/Grid.Column\u003e\n                        \u003c/Grid.Row\u003e\n                        \u003cGrid.Row columns={2}\u003e\n                                \u003cGrid.Column\u003e{homePlayers}\u003c/Grid.Column\u003e\n                                \u003cGrid.Column\u003e{awayPlayers}\u003c/Grid.Column\u003e\n                        \u003c/Grid.Row\u003e\n                        \u003cGrid.Row columns={1}\u003e\n                            \u003cGrid.Column textAlign=\"right\"\u003e\n                                \u003cButton.Group\u003e\n                                    \u003cButton primary onClick={onStart}\u003eStart Game\u003c/Button\u003e\n                                    \u003cButton.Or /\u003e\n                                    \u003cButton negative onClick={onCancel}\u003eCancel\u003c/Button\u003e\n                                \u003c/Button.Group\u003e\n                            \u003c/Grid.Column\u003e\n                        \u003c/Grid.Row\u003e\n                    \u003c/Grid\u003e\n                \u003c/Form\u003e\n            \u003c/Segment\u003e\n        );\n    }\n```\n\nThis renders a large form that has fields for: home team, away team, 11 home players and 11 away players.\n\nOur Started Matches will be rendered by a component defined in `src/StartedGame.js`, as follows:\n\n``` javascript\n    // src/StartedGame.js\n    import React from 'react';\n    import { Segment, Grid, Header, Button, Label, Dropdown, Menu } from 'semantic-ui-react';\n    const gameState = {\n        'first half': 'First Half',\n        'second half': 'Second Half',\n        'finished': 'Full Time',\n        'extra time': 'Extra Time'\n    };\n    export default function StartedGame({ game, onGoal, onCard, onGameEvent }) {\n        const homePlayers = [];\n        const awayPlayers = [];\n        for (let i = 1; i \u003c= 11; ++i) {\n            const playerId = `player_${i}`;\n            let homeLabel;\n            if (game.home.cards[playerId]) {\n                homeLabel=\u003cLabel color={game.home.cards[playerId]} ribbon\u003e{game.home.players[playerId]}\u003c/Label\u003e;\n            } else {\n                homeLabel = game.home.players[playerId];\n            }\n            let awayLabel;\n            if (game.away.cards[playerId]) {\n                awayLabel=\u003cLabel color={game.away.cards[playerId]} ribbon\u003e{game.away.players[playerId]}\u003c/Label\u003e;\n            } else {\n                awayLabel = game.away.players[playerId];\n            }\n            homePlayers.push(\n                \u003cDropdown text={homeLabel}\n                    pointing=\"left\"\n                    className=\"link item\"\n                    key={`home.players.${playerId}}`}\u003e\n                    \u003cDropdown.Menu\u003e\n                        \u003cDropdown.Item onClick={() =\u003e onGoal('home', playerId, 'home')}\u003eGoal\u003c/Dropdown.Item\u003e\n                        \u003cDropdown.Item onClick={() =\u003e onGoal('home', playerId, 'away')}\u003eOwn Goal\u003c/Dropdown.Item\u003e\n                        \u003cDropdown.Item onClick={() =\u003e onCard('home', playerId, 'yellow')}\u003eYellow Card\u003c/Dropdown.Item\u003e\n                        \u003cDropdown.Item onClick={() =\u003e onCard('home', playerId, 'red')}\u003eRed Card\u003c/Dropdown.Item\u003e\n                    \u003c/Dropdown.Menu\u003e\n                \u003c/Dropdown\u003e\n            );\n            awayPlayers.push(\n                \u003cDropdown text={awayLabel}\n                    pointing=\"left\"\n                    className=\"link item\"\n                    key={`away.players.${playerId}}`}\u003e\n                    \u003cDropdown.Menu\u003e\n                    \u003cDropdown.Item onClick={() =\u003e onGoal('away', playerId, 'away')}\u003eGoal\u003c/Dropdown.Item\u003e\n                    \u003cDropdown.Item onClick={() =\u003e onGoal('away', playerId, 'home')}\u003eOwn Goal\u003c/Dropdown.Item\u003e\n                    \u003cDropdown.Item onClick={() =\u003e onCard('away', playerId, 'yellow')}\u003eYellow Card\u003c/Dropdown.Item\u003e\n                    \u003cDropdown.Item onClick={() =\u003e onCard('away', playerId, 'red')}\u003eRed Card\u003c/Dropdown.Item\u003e\n                \u003c/Dropdown.Menu\u003e\n                \u003c/Dropdown\u003e\n            );\n        }\n        return (\n            \u003cSegment\u003e\n                \u003cGrid\u003e\n                    \u003cGrid.Row columns={1}\u003e\n                        \u003cGrid.Column\u003e\n                            \u003cHeader as='h2' textAlign='center'\u003eMatch\u003c/Header\u003e\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                    \u003cGrid.Row columns={2}\u003e\n                        \u003cGrid.Column textAlign=\"right\"\u003e\n                            \u003cLabel\u003e\n                                {game.home.team}\n                                \u003cLabel.Detail\u003e{game.home.score}\u003c/Label.Detail\u003e\n                            \u003c/Label\u003e\n                        \u003c/Grid.Column\u003e\n                        \u003cGrid.Column\u003e\n                            \u003cLabel\u003e\n                                {game.away.team}\n                                \u003cLabel.Detail\u003e{game.away.score}\u003c/Label.Detail\u003e\n                            \u003c/Label\u003e\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                    \u003cGrid.Row columns={1}\u003e\n                        \u003cGrid.Column textAlign='center'\u003e\n                            {gameState[game.state]}\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                    \u003cGrid.Row columns={1}\u003e\n                        \u003cGrid.Column\u003e\n                            \u003cHeader as='h2' textAlign='center'\u003ePlayers\u003c/Header\u003e\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                    \u003cGrid.Row columns={2}\u003e\n                        \u003cGrid.Column\u003e\n                            \u003cMenu vertical borderless secondary style={{width: \"100%\"}}\u003e{homePlayers}\u003c/Menu\u003e\n                        \u003c/Grid.Column\u003e\n                        \u003cGrid.Column\u003e\n                            \u003cMenu vertical borderless secondary style={{width: \"100%\"}}\u003e{awayPlayers}\u003c/Menu\u003e\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                    \u003cGrid.Row columns={1}\u003e\n                        \u003cGrid.Column textAlign=\"right\"\u003e\n                            \u003cButton.Group\u003e\n                                \u003cButton primary onClick={() =\u003e onGameEvent('finished')}\u003eFinish Game\u003c/Button\u003e\n                                \u003cButton onClick={() =\u003e onGameEvent('second half')}\u003eHalf Time\u003c/Button\u003e\n                                \u003cButton onClick={() =\u003e onGameEvent('extra time')}\u003eExtra Time\u003c/Button\u003e\n                            \u003c/Button.Group\u003e\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                \u003c/Grid\u003e\n            \u003c/Segment\u003e\n        );\n    }\n```\n\nThis renders a view that is similar to the previous, but instead of being a form that can be entered it is read-only and has buttons to click to indicate that events have happened. These events can be match-level events - half time, extra time and finish game - or player events - goal scored or card received.\n\nWe then have a single component that displays a list of all the games we are currently working with. This is in `src/Games.js` as follows:\n\n``` javascript\n    // src/Games.js\n    import React from 'react';\n    import { Container, Segment, Button } from 'semantic-ui-react';\n    import uuid from 'uuid/v4';\n    import StartedGame from './StartedGame';\n    import UnstartedGame from './UnstartedGame';\n    export default class Games extends React.Component {\n        state = {\n            games: []\n        }\n        newGameHandler = this.newGame.bind(this)\n        updateTeamHandler = this.updateTeam.bind(this)\n        updatePlayerHandler = this.updatePlayer.bind(this)\n        startGameHandler = this.startGame.bind(this)\n        cancelGameHandler = this.cancelGame.bind(this)\n        goalHandler = this.goalScored.bind(this)\n        cardHandler = this.cardGiven.bind(this)\n        gameEventHandler = this.gameEvent.bind(this)\n        render() {\n            const renderedGames = this.state.games\n                .map((game, index) =\u003e {\n                    if (game.state !== 'unstarted') {\n                        return \u003cStartedGame game={game}\n                            key={game.id}\n                            onGoal={(team, player, goalFor) =\u003e this.goalHandler(game.id, team, player, goalFor)}\n                            onCard={(team, player, card) =\u003e this.cardHandler(game.id, team, player, card)}\n                            onGameEvent={(event) =\u003e this.gameEventHandler(game.id, event)} /\u003e;\n                    } else {\n                        return \u003cUnstartedGame game={game}\n                            key={game.id}\n                            onTeamUpdated={(team, value) =\u003e this.updateTeamHandler(game.id, team, value)}\n                            onPlayerUpdated={(team, player, value) =\u003e this.updatePlayerHandler(game.id, team, player, value)}\n                            onCancel={() =\u003e this.cancelGameHandler(game.id)}\n                            onStart={() =\u003e this.startGameHandler(game.id)} /\u003e;\n                    }\n                });\n            return (\n                \u003cContainer\u003e\n                    \u003cSegment.Group\u003e\n                        {renderedGames}\n                    \u003c/Segment.Group\u003e\n                    \u003cButton onClick={this.newGameHandler}\u003eNew Match\u003c/Button\u003e\n                \u003c/Container\u003e\n            )\n        }\n        goalScored(gameId, team, player, goalFor) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game[goalFor].score++;\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        cardGiven(gameId, team, player, card) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game[team].cards[player] = card;\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        gameEvent(gameId, event) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game.state = event;\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        newGame() {\n            const { games } = this.state;\n            const newGames = [\n                ...games,\n                {\n                    id: uuid(),\n                    state: 'unstarted',\n                    home: {\n                        team: '',\n                        score: 0,\n                        players: {},\n                        cards: {}\n                    },\n                    away: {\n                        team: '',\n                        score: 0,\n                        players: {},\n                        cards: {}\n                    }\n                }\n            ];\n            this.setState({\n                games: newGames\n            });\n        }\n        updateTeam(id, team, value) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === id) {\n                    game[team].team = value;\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        updatePlayer(id, team, player, value) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === id) {\n                    game[team].players[player] = value;\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        startGame(id) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === id) {\n                    game.state = 'first half';\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        cancelGame(id) {\n            const { games } = this.state;\n            const newGames = games.filter((game) =\u003e game.id !== id);\n            this.setState({\n                games: newGames\n            });\n        }\n    }\n```\n\nThis simply renders a list of games, using the appropriate component to render it depending on whether the game has started or finished. It also handles all of the events that can happen in the game, updating our state and ensuring that the games are re-rendered as needed.\n\nFinally we can update our map `App` class in `src/App.js` to render this list of games:\n\n``` javascript\n    // src/App.js\n    import React, { Component } from 'react';\n    import Games from './Games';\n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cGames /\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default App;\n```\n\nAnd the main index of the entire page, in `src/index.js`, ensuring that our styles are loaded correctly:\n\n``` javascript\n    // src/index.js\n    import React from 'react';\n    import ReactDOM from 'react-dom';\n    import 'semantic-ui-css/semantic.min.css';\n    import App from './App';\n    ReactDOM.render(\u003cApp /\u003e, document.getElementById('root'));\n```\n\nAt this point we can run our application using `npm start` and see the Pundit UI that we have built.\n\n### Triggering backend events\n\nNow that we’ve got our pundit UI, we want it to trigger messages on our backend. This will be done using the Axios library to make HTTP calls to the backend.\n\nFirstly we need to install Axios:\n\n```\n    npm install --save axios\n```\n\nThen we make use of it in our application. All of this functionality goes in `src/Games.js`, which is responsible for handling our events.\n\nFirstly we need to actually include Axios and create a client to use. For this, add the following to the top of the file:\n\n``` javascript\n    // src/Games.js\n    import axios from 'axios';\n    \n    const axiosClient = axios.create({\n        baseURL: 'http://localhost:8080'\n    });\n```\n\nThen we need to actually make the API calls to trigger the messages. These are done in the `goalScored`, `cardGiven` and `gameEvent` methods, as follows:\n\n``` javascript\n    // src/Games.js\n        goalScored(gameId, team, player, goalFor) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game[goalFor].score++;\n                }\n                axiosClient.post('/goal', {\n                    player: game[team].players[player],\n                    forTeam: goalFor,\n                    homeTeam: game.home.team,\n                    awayTeam: game.away.team,\n                    homeScore: game.home.score,\n                    awayScore: game.away.score,\n                    ownGoal: team !== goalFor\n                });\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        cardGiven(gameId, team, player, card) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game[team].cards[player] = card;\n                }\n                axiosClient.post('/card', {\n                    team: game[team].team,\n                    player: game[team].players[player],\n                    card\n                });\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        gameEvent(gameId, event) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game.state = event;\n                }\n                axiosClient.post('/match', {\n                    event,\n                    homeTeam: game.home.team,\n                    awayTeam: game.away.team,\n                    homeScore: game.home.score,\n                    awayScore: game.away.score\n                });\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n```\n\nMost of this is simply extracting the data from the current game state to send to the server.\n\nWe can now use this UI and see the events appearing in the Pusher debug dashboard.\n\n![go-react-football-feed-demo-with-event-creator](//images.ctfassets.net/1es3ne0caaid/IYQVADBV8AyCUmwWIgAaI/615e63cde3e4289b035c7b4092a6c2d0/go-react-football-feed-demo-with-event-creator.gif)\n\n## Live feed of events\n\nWe are going to add our live feed to a Bootstrap enabled page using the [Bootstrap Notify](http://bootstrap-notify.remabledesigns.com/) plugin. This can be used on any website that uses Bootstrap, but for our example we are going to use a single static HTML file as follows:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003eFootball Feed\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\"\n            crossorigin=\"anonymous\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cscript src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\"\n            crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/mouse0270-bootstrap-notify/3.1.7/bootstrap-notify.js\" integrity=\"sha256-ZfyZUBGHlJunePNMsBqgGX3xHMv4kaCZ5Hj+8Txwd9c=\"\n            crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript\u003e\n            const pusher = new Pusher('PUSHER_KEY', {\n              cluster: 'PUSHER_CLUSTER'\n            });\n            const channel = pusher.subscribe('match');\n            channel.bind('goal', function(data) {\n                let message = data.Player + ' scored!';\n                if (data.OwnGoal) {\n                    message += ' (OG)';\n                }\n                $.notify({\n                    title: message,\n                    message: `${data.HomeTeam} ${data.HomeScore} - ${data.AwayScore} ${data.AwayTeam}`\n                }, {\n                    type: 'success',\n                    allow_dismiss: true,\n                    newest_on_top: false,\n                });\n            });\n            channel.bind('card', function(data) {\n                let message;\n                let type;\n                if (data.Card === 'yellow') {\n                    message = `Yellow card for ${data.Player} (${data.Team})`;\n                    type = 'warning';\n                } else {\n                    message = `Red card for ${data.Player} (${data.Team})`;\n                    type = 'danger';\n                }\n                $.notify({\n                    message: message\n                }, {\n                    type: type,\n                    allow_dismiss: true,\n                    newest_on_top: false,\n                });\n            });\n            channel.bind('match', function(data) {\n                let message;\n                if (data.Event === 'finished') {\n                    message = 'Full Time';\n                } else if (data.Event === 'second half') {\n                    message = 'Half Time';\n                } else if (data.Event === 'extra time') {\n                    message = 'Extra Time';\n                }\n                $.notify({\n                    title: message,\n                    message: `${data.HomeTeam} ${data.HomeScore} - ${data.AwayScore} ${data.AwayTeam}`\n                }, {\n                    type: 'info',\n                    allow_dismiss: true,\n                    newest_on_top: false,\n                });\n            });\n        \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n\u003e **Note:** make sure that PUSHER_KEY and PUSHER_CLUSTER are the same values as the backend is using.\n\nThe above code can be used on any website that uses Bootstrap, so you can easily include it in an existing site to give your users live football news without leaving.\n\nEnsure that the backend and pundit UI is running, and then open `index.html` in a web browser to see the messages appearing as you trigger events.\n\n```\n    # run backend\n    $ go run football-feed.go\n    \n    # run pundit UI\n    $ npm start\n```\n\n![go-react-football-feed-demo](//images.ctfassets.net/1es3ne0caaid/41013Qn0XmcY8QcWc4Ikas/f842d3de9f3bdfda7610bdb15ea8c146/go-react-football-feed-demo.gif)\n\n## Summary\n\nThis article shows how to use Pusher Channels to trigger a live feed of events on a website. The full source code can be found on [GitHub](https://github.com/sazzer/pusher-football-feed). Why not try extending it to support more actions, or even different games.","metaTitle":"Create a football results feed with Go and React","metaDescription":"Use Go and React to create a footbal feed web app. Admins will be able to send match updates out to any subscribed application."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rJUFHakQgGc6A0WQyyMcA","type":"Entry","createdAt":"2018-07-03T09:11:14.166Z","updatedAt":"2018-07-03T09:14:45.775Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a cryptocurrency tracking app with push notifications using Swift and Laravel - Part 1: The backend","url":"cryptocurrency-tracking-swift-laravel-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/cryptocurrency-alert-ios-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-07-02","description":"Build a cryptocurrency tracking app featuring push notifications. Use Swift to create an iOS app, powered by a Laravel backend. User will receive alerts when currency prices change. In part one, create the backend with Laravel.","prerequisite":"You will need the following installed on your machine: Xcode, the Laravel CLI, SQLite and Cocoapods. Familiarity with the Xcode IDE will be helpful.","content":"## Introduction\n\nCryptocurrency has been and is still one of the biggest trends this year. With currencies like Bitcoin reaching record highs and new companies creating tokens and offerings, it’s showing just how much potential cryptocurrencies have. However, cryptocurrency prices are erratic and can fall or climb at a moments notice, so it’s always a good idea to keep tabs on the changes.\n\nIn this article, we will be building an application that keeps tabs on changes to the crypto market. The application will focus on BTC and ETH and will allow users of the application to set minimum and maximum amounts when they would like to be notified about the coins current price. The application will be built using Swift, Laravel, Pusher Channels, and Pusher Beams.\n\n## Prerequisites\n\nTo follow along you need the following requirements:\n\n\n- [Xcode](https://developer.apple.com/xcode) installed on your machine.\n- Knowledge of the Xcode IDE.\n- Basic knowledge using the [Laravel framework](https://laravel.com/).\n- Basic knowledge of the [Swift programming language](http://developer.apple.com/swift).\n- [Laravel CLI](https://laravel.com/docs/5.6/installation) installed on your machine.\n- SQLite installed on your machine. [Installation guide](https://www.tutorialspoint.com/sqlite/sqlite_installation.htm).\n- [Cocoapods](https://guides.cocoapods.org/using/getting-started.html) installed on your machine.\n- [Pusher Beams](https://pusher.com/beams) and [Channels](https://pusher.com/channels) application.\n\n\n## What we will be building\n\nWe will start out by building the backend of the application using Laravel. Then we will build the iOS application using Swift. If you want to test the push notifications then you will need to run the application on a live device.\n\n### How the client application will work\n\nFor the client app, the iOS application, we will create a simple list that will display the available currencies and the current prices to the dollar. Whenever the price of the cryptocurrency changes, we will trigger an event using Pusher Channels so the prices are updated.\n\nFrom the application, you will be able to set a minimum and maximum price change when you want to be alerted. For instance, you can configure the application to send a push notification to the application when the price of one Etherium (ETH) goes below $500. You can also configure the application to receive a notification when the price of Bitcoin goes above $5000.\n\n### How the backend application will work\n\nFor the backend application, we will be using Laravel and we will create endpoints that allow a user update the settings and load the settings for a device. The API will be responsible for checking the current prices of the cryptocurrency and sending both a Channels update and a Beams notification when the price changes. \n\nHowever, because the prices don’t change very predictably, we will be simulating the currency changes so we can preview the application in action. We will also be using [task scheduling](https://laravel.com/docs/5.6/scheduling) in Laravel to trigger the checks for the current currency prices. \n\nIn a production environment we will set the scheduler as a cronjob, but because we are in development, we will manually run the command to trigger price changes.\n\n### How the application will look\n\nWhen we are done with the application, here's how the application will look:\n\n![ios-cryptocurrency-part-1-demo](//images.ctfassets.net/1es3ne0caaid/1K08NTSdaoIIqWQ2YAyOqo/4efdb4fa01a2ee599bf5b71561a717a4/ios-cryptocurrency-part-1-demo.gif)\n\nLet’s get started.\n\n## Setting up Pusher Beams and Channels\n\n### Setting up Pusher Channels\n\nLog in to your [Pusher dashboard](https://dashboard.pusher.com). If you don’t have an account, create one. Your dashboard should look like this:\n\n![ios-cryptocurrency-part-1-keys](//images.ctfassets.net/1es3ne0caaid/47FA7jeU0w62siO8G6iCQi/aeda1c00644c75e4d327dbe6725694d7/ios-cryptocurrency-part-1-keys.png)\n\nCreate a new Channels app. You can easily do this by clicking the big **Create new Channels app** card at the bottom right. When you create a new app, you are provided with keys. Keep them safe as you will soon need them.\n\n### Setting up Pusher Beams\n\nNext, log in to the new [Pusher dashboard](https://dash.pusher.com/), in here we will create a Pusher Beams instance. You should sign up if you don’t have an account yet. Click on the **Beams** button on the sidebar then click **Create**, this will launch a pop up to **Create a new Beams instance**. Name it `cryptoalat`.\n\n![ios-cryptocurrency-part-1-new-beams](//images.ctfassets.net/1es3ne0caaid/4xKD0goX606gGqUSQW2EcC/3dcd7757df87351ddc54cb62397ce2e7/ios-cryptocurrency-part-1-new-beams.png)\n\nAs soon as you create the instance, you will be presented with a quickstart guide. Select the **IOS** quickstart and follow through the wizard.\n\n![ios-cryptocurrency-part-1-beams-quickstart](//images.ctfassets.net/1es3ne0caaid/27fmUEHf64Qc0KcIQo0KAw/265bde6f67ea031f5d5495a10273e678/ios-cryptocurrency-part-1-beams-quickstart.png)\n\nWhen you are done creating the Beams application, you will be provided with an instance ID and a secret key, we will need these later.\n\n## Setting up your backend application\n\nIn your terminal, run the command below to create a new Laravel project:\n\n```\n    $ laravel new cryptoapi\n```\n\nThis command will create a new Laravel project and install all the required Laravel dependencies. \n\nNext, let’s install some of the project specific dependencies. Open the `composer.json` file and in the `require` property, add the following dependencies:\n\n``` json\n    // File: composer.json\n    \"require\": {\n        [...]\n        \n        \"neo/pusher-beams\": \"^1.0\",\n        \"pusher/pusher-php-server\": \"~3.0\"\n    },\n```\n\nNow run the command below to install these dependencies.\n\n```\n    $ composer update\n```\n\nWhen the installation is complete, open the project in a text editor of your choice. [Visual Studio Code](https://code.visualstudio.com/) is pretty nice. \n\n### Setting up our Pusher Beams library\n\nThe first thing we want to do is set up the [Pusher Beams library](https://github.com/neoighodaro/pusher-beams) we just pulled in using composer. To set up, open the `.env` file and add the following keys:\n\n```\n    PUSHER_BEAMS_SECRET_KEY=\"PUSHER_BEAMS_SECRET_KEY\"\n    PUSHER_BEAMS_INSTANCE_ID=\"PUSHER_BEAMS_INSTANCE_ID\"\n```\n\nYou should replace the `PUSHER_BEAMS_*` placeholders with the keys you got when setting up your Beams application.\n\nNext, open the `config/broadcasting.php` file and scroll until you see the `connections` key. In there, you’ll have the `pusher` settings, add the following to the `pusher` configuration:\n\n``` php\n    'pusher' =\u003e [\n        // [...]\n    \n        'beams' =\u003e [\n            'secret_key' =\u003e env('PUSHER_BEAMS_SECRET_KEY'),\n            'instance_id' =\u003e env('PUSHER_BEAMS_INSTANCE_ID'),\n        ],\n    ],\n```\n\n### Setting up our Pusher Channels library\n\nThe next step is to set up Pusher Channels. Laravel comes with native support for Pusher Channels so we do not need to do much to set it up.\n\nOpen the `.env` file and update the following keys below:\n\n```\n    BROADCAST_DRIVER=pusher\n    \n    // [...]\n    \n    PUSHER_APP_ID=\"PUSHER_APP_ID\"\n    PUSHER_APP_KEY=\"PUSHER_APP_KEY\"\n    PUSHER_APP_SECRET=\"PUSHER_APP_SECRET\"\n    PUSHER_APP_CLUSTER=\"PUSHER_APP_CLUSTER\"\n```\n\nAbove you set the `BROADCAST_DRIVER` to `pusher` and then for the other `PUSHER_APP_*` keys, replace the placeholders with the keys gotten from your Pusher dashboard. That’s all we need to do to set up Pusher Channels for this application.\n\n\n## Building the backend application\n\nNow that we have set up all the dependencies, we can start building the application. We will start by creating the routes. However, instead of creating controllers to hook into the routes, we will be adding the logic directly to the routes.\n\n### Setting up the database, migration, and model\n\nSince we will be working with a database, we need to set up the database we are going to be working with. To make things easy we will be using SQLite. Create an empty  `database.sqlite` file in the `database` directory.\n\nOpen the `.env` file and replace:\n\n```\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_DATABASE=homestead\n    DB_USERNAME=homestead\n    DB_PASSWORD=secret\n```\n\nWith\n\n```\n    DB_CONNECTION=sqlite\n    DB_DATABASE=/full/path/to/your/database.sqlite\n```\n\nNext, let’s create a migration for the `devices` table. We will use this table to store devices and their notification settings. This will help us know what devices to send push notifications to.\n\nRun the command below to create the migration and model:\n\n```\n    $ php artisan make:model Device -m\n```\n\n\u003e The `-m` flag will instruct artisan to create a migration alongside the model.\n\nThis command will generate two files, the migration file in the `database/migrations` and the model in the `app` directory. Let’s edit the migration file first.\n\nOpen the `*_create_devices_table.php` migration file in the `database/migrations`  directory and replace the contents with the following:\n\n``` php\n    \u003c?php\n    \n    use Illuminate\\Support\\Facades\\Schema;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Database\\Migrations\\Migration;\n    \n    class CreateDevicesTable extends Migration\n    {\n        /**\n         * Run the migrations.\n         *\n         * @return void\n         */\n        public function up()\n        {\n            Schema::create('devices', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003estring('uuid')-\u003eunique();\n                $table-\u003efloat('btc_min_notify')-\u003edefault(0);\n                $table-\u003efloat('btc_max_notify')-\u003edefault(0);\n                $table-\u003efloat('eth_min_notify')-\u003edefault(0);\n                $table-\u003efloat('eth_max_notify')-\u003edefault(0);\n            });\n        }\n        \n        /**\n         * Reverse the migrations.\n         *\n         * @return void\n         */\n        public function down()\n        {\n            Schema::dropIfExists('devices');\n        }\n    }\n```\n\nIn the `up` method, we have defined the structure of the `devices` table. We have the `uuid` field which will be a unique string for each device registered. We have two `btc_notify` fields which are there to save the minimum and maximum prices of BTC at which point the device should be notified. Same applies to the* `eth_*_notify`  fields.\n\nTo run the migration, run the command below:\n\n```\n    $ php artisan migrate\n```\n\nOpen the `app/Device.php` model and replace the contents with the code below:\n\n``` php\n    \u003c?php\n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    use Illuminate\\Notifications\\Notifiable;\n    \n    class Device extends Model\n    {\n        use Notifiable;\n    \n        public $timestamps = false;\n        \n        protected $fillable = [\n            'uuid', \n            'btc_min_notify', \n            'btc_max_notify', \n            'eth_min_notify', \n            'eth_max_notify',\n        ];\n        \n        protected $cast = [\n            'btc_min_notify' =\u003e 'float',\n            'btc_max_notify' =\u003e 'float',\n            'eth_min_notify' =\u003e 'float',\n            'eth_max_notify' =\u003e 'float'\n        ];\n        \n        public function scopeAffected($query, string $currency, $currentPrice)\n        {\n            return $query-\u003ewhere(function ($q) use ($currency, $currentPrice) {\n                $q-\u003ewhere(\"${currency}_min_notify\", '\u003e', 0)\n                  -\u003ewhere(\"${currency}_min_notify\", '\u003e', $currentPrice);\n            })-\u003eorWhere(function ($q) use ($currency, $currentPrice) {\n                $q-\u003ewhere(\"${currency}_max_notify\", '\u003e', 0)\n                  -\u003ewhere(\"${currency}_max_notify\", '\u003c', $currentPrice);\n            });\n        }\n    }\n```\n\nIn the model above, we have set the `$timestamps` property to `false` to make sure that Eloquent does not try to update the `created_at` and `updated_at` fields, which is the normal behavior.\n\nWe also have the `scopeAffected` method which is an example of an [Eloquent scope](https://laravel.com/docs/5.6/eloquent#local-scopes). We use this to get the affected devices after a price change has occurred on a currency. So if, for instance, BTC’s price drops, this method will check the devices and the settings to see the devices that need to be notified of this change.\n\n\n\u003e Local scopes allow you to define common sets of constraints that you may easily re-use throughout your application. For example, you may need to frequently retrieve all users that are considered \"popular\". To define a scope, prefix an Eloquent model method with `scope`. - [Laravel documentation](https://laravel.com/docs/5.6/eloquent#local-scopes).\n\nWe will use this scope later in our application when we need to know what devices to send push notifications to.\n\n### Creating the routes\n\nOpen the `routes/api.php` file and replace the contents of the file with the following code:\n\n``` php\n    // File: routes/api.php\n    \u003c?php\n    \n    use App\\Device;\n    use Illuminate\\Http\\Request;\n```\n \nNext, let’s add the first route. Append the code below to the routes file:\n\n``` php\n    // File: routes/api.php\n    Route::get('/settings', function (Request $request) {\n        return Device::whereUuid($request-\u003equery('u'))-\u003efirstOrFail()['settings'];\n    });\n```\n\nIn the route above, we are returning the settings for the device supplied in the `u` query parameter. This means if a registered device hits the `/settings` endpoint and passes the device UUID through the `u` parameter, the settings for that device will be returned. \n\nNext, in the same routes file, paste the following at the bottom of the file:\n\n``` php\n    Route::post('/settings', function (Request $request) {\n        $settings = $request-\u003evalidate([\n            'btc_min_notify' =\u003e 'int|min:0',\n            'btc_max_notify' =\u003e 'int|min:0',\n            'eth_min_notify' =\u003e 'int|min:0',\n            'eth_max_notify' =\u003e 'int|min:0',\n        ]);\n    \n        $settings = array_filter($settings, function ($value) { return $value \u003e 0; });\n    \n        $device = Device::firstOrNew(['uuid' =\u003e $request-\u003equery('u')]);\n        $device-\u003efill($settings);\n        $saved = $device-\u003esave();\n        \n        return response()-\u003ejson([\n            'status' =\u003e $saved ? 'success' : 'failure'\n        ], $saved ? 200 : 400);\n    });\n```\n\nAbove, we have defined the route for the `POST /settings`  route. This route saves settings to the database. It will create a new entry if the setting does not already exist or will update the existing one if it does.\n\nThat’s all for the routes.\n\n### Creating the jobs, events, and notifiers\n\nNext, we need to create the [Laravel job](https://laravel.com/docs/5.6/queues#creating-jobs) that will run at intervals to check if there is a change in the currency price. \n\nRun the command below to create a new Laravel job:\n\n```\n    $ php artisan make:job CheckPrices\n```\n\nThis will create a new `CheckPrices` class in the `app` directory. Open that class and replace the contents with the following:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Jobs;\n    \n    use App\\Device;\n    use Illuminate\\Bus\\Queueable;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Queue\\InteractsWithQueue;\n    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n    use Illuminate\\Foundation\\Bus\\Dispatchable;\n    use App\\Events\\CurrencyUpdated;\n    use App\\Notifications\\CoinPriceChanged;\n    \n    class CheckPrices implements ShouldQueue\n    {\n        use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;\n        \n        protected $supportedCurrencies = ['ETH', 'BTC'];\n    \n        /**\n         * Execute the job.\n         *\n         * @return void\n         */\n        public function handle()\n        {\n            $payload = $this-\u003egetPricesForSupportedCurrencies();\n    \n            if (!empty($payload)) {\n                $this-\u003etriggerPusherUpdate($payload);\n                $this-\u003etriggerPossiblePushNotification($payload);\n            }\n        }\n        \n        private function triggerPusherUpdate($payload)\n        {\n            event(new CurrencyUpdated($payload));\n        }\n        \n        private function triggerPossiblePushNotification($payload)\n        {\n            foreach ($this-\u003esupportedCurrencies as $currency) {\n                $currentPrice = $payload[$currency]['current'];\n                \n                $currency = strtolower($currency);\n    \n                foreach (Device::affected($currency, $currentPrice)-\u003eget() as $device) {\n                    $device-\u003enotify(new CoinPriceChanged($currency, $device, $payload));\n                }\n            }\n        }\n        \n        public function getPricesForSupportedCurrencies(): array\n        {\n            $payload = [];\n    \n            foreach ($this-\u003esupportedCurrencies as $currency) {\n                if (config('app.debug') === true) {\n                    $response = [\n                        $currency =\u003e [\n                            'USD' =\u003e (float) rand(100, 15000)\n                        ]\n                    ];\n                } else {\n                    $url = \"https://min-api.cryptocompare.com/data/pricehistorical?fsym={$currency}\u0026tsyms=USD\u0026ts={$timestamp}\";\n                    \n                    $response = json_decode(file_get_contents($url), true);\n                }\n    \n                if (json_last_error() === JSON_ERROR_NONE) {\n                    $currentPrice = $response[$currency]['USD'];\n    \n                    $previousPrice = cache()-\u003eget(\"PRICE_${currency}\", false);\n    \n                    if ($previousPrice == false or $previousPrice !== $currentPrice) {\n                        $payload[$currency] = [\n                            'current' =\u003e $currentPrice,\n                            'previous' =\u003e $previousPrice,\n                        ];\n                    }\n    \n                    cache()-\u003eput(\"PRICE_${currency}\", $currentPrice, (24 * 60 * 60));\n                }\n            }\n    \n            return $payload;\n        }\n    }\n```\n\nIn the class above, we implement the `ShouldQueue` interface. This makes it so that the job can and will be queued. In a production server, queueing jobs makes your application faster as it queues jobs that might take a while to execute for later execution. \n\nWe have four methods in this class. The first one is the `handle` method. This one is called automatically when the job is executed. In this method, we fetch the prices for the available currencies and then check if the price has changed. If it has, we publish a Pusher Channel event and then check if there are any devices that need to be notified based on the user’s settings. If there are any, we send a push notification to that device. \n\nWe have the `triggerPusherUpdate` method which triggers a `CurrencyUpdated` event. We will create this event in the next section. We also have a `triggerPossiblePushNotification` method which gets the list of devices which should be notified of the currency change and then notifies the user using the `CoinPriceChanged` class, which we will create in the next section.\n\nLastly, we have the `getPricesForSupportedCurrencies` method which just fetches the current price of a currency. In this method, we have a debug mode that simulates the current price of a currency.\n\nTo make sure this class we just created is scheduled properly, open the `app/Console/Kernel.php` file and in the `schedule` method, add the following code to the `schedule` method:\n\n``` php\n    $schedule-\u003ejob(new \\App\\Jobs\\CheckPrices)-\u003eeveryMinute();\n```\n\nNow every time we run the command `php artisan schedule:run` all the jobs in this `schedule` method will be run. Normally, in a production environment, we will need to add the schedule command as a cronjob, however, we will run this command manually.\n\nThe next thing to do will be to create the notifiers and events. In your terminal, run the following commands:\n\n```\n    $ php artisan make:event CurrencyUpdated\n    $ php artisan make:notification CoinPriceChanged\n```\n\nThis will create a class in the `Events` and `Notifications` directories.\n\n In the [event](https://laravel.com/docs/5.6/events) class, `CurrencyUpdated` paste the following code:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Events;\n    \n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    \n    class CurrencyUpdated implements ShouldBroadcast\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        public $payload;\n        \n        public function __construct($payload)\n        {\n            $this-\u003epayload = $payload;\n        }\n    \n        public function broadcastOn()\n        {\n            return new Channel('currency-update');\n        }\n        \n        public function broadcastAs()\n        {\n            return 'currency.updated';\n        }\n    }\n```\n\nIn the event class above, we have the `broadcastOn` method that specifies the Pusher channel we want to broadcast an event on. We also have the `broadcastAs` method which specifies the name of the event we want to broadcast to the channel.\n\nIn the `CoinPriceChanged` [notification](https://laravel.com/docs/5.6/notifications) class, replace the contents with the following code:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Notifications;\n    \n    use App\\Device;\n    use Illuminate\\Bus\\Queueable;\n    use Neo\\PusherBeams\\PusherBeams;\n    use Neo\\PusherBeams\\PusherMessage;\n    use Illuminate\\Notifications\\Notification;\n    \n    class CoinPriceChanged extends Notification\n    {\n        use Queueable;\n        \n        private $currency;\n        private $device;\n        private $payload;\n        \n        public function __construct(string $currency, Device $device, array $payload)\n        {\n            $this-\u003ecurrency = $currency;\n            $this-\u003edevice = $device;\n            $this-\u003epayload = $payload;\n        }\n        \n        public function via($notifiable)\n        {\n            return [PusherBeams::class];\n        }\n        \n        public function toPushNotification($notifiable)\n        {\n            $currentPrice = $this-\u003epayload[strtoupper($this-\u003ecurrency)]['current'];\n            \n            $previousPrice = $this-\u003epayload[strtoupper($this-\u003ecurrency)]['current'];\n    \n            $direction = $currentPrice \u003e $previousPrice ? 'climbed' : 'dropped';\n    \n            $currentPriceFormatted = number_format($currentPrice);\n    \n            return PusherMessage::create()\n                    -\u003eiOS()\n                    -\u003esound('success')\n                    -\u003etitle(\"Price of {$this-\u003ecurrency} has {$direction}\")\n                    -\u003ebody(\"The price of {$this-\u003ecurrency} has {$direction} and is now \\${$currentPriceFormatted}\");\n        }\n        \n        public function pushNotificationInterest()\n        {\n            $uuid = strtolower(str_replace('-', '_', $this-\u003edevice-\u003euuid));\n            \n            return \"{$uuid}_{$this-\u003ecurrency}_changed\";\n        }\n    } \n```\n\nIn the class above we have the `toPushNotification` class which prepares the push notification using the Pusher Beams library. We also have the `pushNotificationInterest` method which sets the name for the interest of the push notification depending on the currency and device ID.\n\nThat’s all for the backend, now just run the command below to start the server:\n\n```\n    $ php artisan serve\n```\n\nThis will start a PHP server with our application running. Also if you need to manually trigger a currency change, run the command below:\n\n```\n    $ php artisan schedule:run\n```\n\nNow that we are done with the backend, we can create the application using Swift and Xcode.\n\n## Conclusion\n\nIn this part of the article, we have created the backend for our cryptocurrency alert application. [In the next part](https://pusher.com/tutorials/cryptocurrency-tracking-swift-laravel-part-2), we will be seeing how we can create the application that will consume the API we just created in this part.\n\nThe source code to this application is available on [GitHub](https://github.com/neoighodaro/cryptocurrency-alert-ios-app).","metaTitle":"Create a cryptocurrency tracking app - Part 1: The backend","metaDescription":"Use Swift and Laravel to create an iOS app for tracking cryptocurrency price changes. Users will receive alerts as prices go beyond set limits.  In part one, create the backend with Laravel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1DkONuEWcYoEGSisSO8ig","type":"Entry","createdAt":"2018-07-03T09:04:25.648Z","updatedAt":"2018-07-03T09:04:25.648Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live blog in Kotlin with push notifications","url":"live-blog-kotlin-push-notifications","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/kotlin-live-blog-with-push-notifications","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-07-01","description":"Build an Android app with Kotlin. The app connects to a Node.js server, and provides push notifications to alert users when a football blog is updated.","prerequisite":"You will need Android Studio 3+, Node and npm installed on your machine. A basic knowledge of Android development, and familiarity with Android Studio, is required.","content":"## Introduction\n\nWe are definitely in the era of realtime everything. We demand that all our tools and apps we use daily should be able to update in realtime. With a lot of realtime applications springing up, the football scene is not an exception. You see popular soccer reporting bodies adopting this strategy. \n\nIn this article, you will learn how to build a live soccer blog mobile app. Here is what your app will look like after this post:\n\n![kotlin-liveblog-beams-demo](//images.ctfassets.net/1es3ne0caaid/5wqd3IR1ccukOkkekgQmu6/960adda8c7e513af7c89f33fde0b0cfa/kotlin-liveblog-beams-demo.gif)\n\n## Prerequisites\n\nFor you to move on smoothly with this tutorial, it is expected that you have the following:\n\n\n- Android Studio (\u003e= v3.0) installed on your machine. Download [here](https://developer.android.com/studio/index.html).\n- A basic knowledge of Android development and an ability to use Android Studio.\n- A basic knowledge of Kotlin programming language. [See the official docs](https://kotlinlang.org/docs/reference/).\n- Node.js and NPM installed on your machine. Check [here](https://nodejs.org/en/) for the latest releases.\n\n\n## Building your live blog app\n\n### Creating your Android app\n\nTo get started, open Android Studio and create a new basic activity project. Android Studio provides a wizard for this to guide you. While creating your app, be sure to enable Kotlin support since that is what you will use. \n\n![kotlin-liveblog-beams-create-project](//images.ctfassets.net/1es3ne0caaid/4al226nIqIoMO0Ocq82Oii/c3c5a0f0eed39dee19c30a0ba1eae1aa/kotlin-liveblog-beams-create-project.png)\n\nSelect **Phone and Tablet** using **API 19: Android 4.4 (Kitkat)**. Select the **EmptyActivity** template and create the project. After this process is complete, you should have an activity named `MainActivity` and its layout `activity_main.xml`.\n\n### Setting up Pusher Channels\n\nLog in to your [Pusher dashboard](https://dashboard.pusher.com). If you don’t have an account, create one. Your dashboard should look like this:\n\n![kotlin-liveblog-beams-create-pusher-app](//images.ctfassets.net/1es3ne0caaid/7nPd10h1x62OK8eA6YSakQ/98ce36a55d015163f626f2169441c966/kotlin-liveblog-beams-create-pusher-app.png)\n\nCreate a new Channels app. You can easily do this by clicking the big **Create new Channels app** card at the bottom right. When you create a new app, you are provided with keys. Keep them safe as you will soon need them.\n\n### Getting your FCM key\n\nBefore you can start using Beams, you need an FCM key and a google-services file because Beams relies on Firebase. Go to your [Firebase console](https://console.firebase.google.com/u/0/) and create a new project.\n\nWhen you get to the console, click the **Add project** card to initialize the app creation wizard. Add the name of the project, for example, `soccer-blog`. Read and accept the terms of conditions. After this, you will be directed to the project overview screen. Choose the **Add Firebase to your Android app** option. The next screen will require the package name of your app.\n\nAn easy way to get the package name of your app is from your `AndroidManifest.xml` file. Check the `\u003cmanifest\u003e` tag and copy the value of the `package` attribute. Another place you can find this is your app-module `build.gradle` file. Look out for the `applicationId` value. When you enter the package name and click **Register app.** Next download your `google-services.json` file. After you have downloaded the file, you can skip the rest of the process. Add the downloaded file to the app folder of your app - `name-of-project/app`.\n\nNext, go to your Firebase project settings, under the Cloud messaging tab, copy your server key.\n\n### Setting up Pusher Beams\n\nNext, log in to the new [Pusher dashboard](https://dash.pusher.com/), in here we will create a Pusher Beams instance. You should sign up if you don’t have an account yet. Click on the **Beams** button on the sidebar then click **Create**, this will launch a pop up to **Create a new Beams instance**. Name it `soccer-blog`.\n\n![kotlin-liveblog-beams-new-beams](//images.ctfassets.net/1es3ne0caaid/jvRWHnL0VqCUkqMa26ImA/9de75f79e56ba99fa0897231dcd638f5/kotlin-liveblog-beams-new-beams.png)\n\nAs soon as you create the instance, you will be presented with a quickstart guide. Select the **ANDROID** quickstart\n\n![kotlin-liveblog-beams-quickstart](//images.ctfassets.net/1es3ne0caaid/5Ef7TiLPGMy4oAs2OQOMW4/676cc584e256fca1be76de3380d80016/kotlin-liveblog-beams-quickstart.png)\n\nThe next screen requires the FCM key you copied earlier. After you add the FCM key, you can exit the quickstart guide.\n\n### Adding dependencies\n\nYou will make use of Beams for notifications and the Channels libraries for live events. Add the following to the project’s `build-gradle` file:\n\n``` gradle\n    // File: ./blog-app/build.gradle\n    buildscript {\n        // [...]\n    \n        dependencies {\n            classpath 'com.google.gms:google-services:4.0.0'\n        }\n    }\n```\n\nAnd these other dependencies to the app-module `build.gradle` file:\n\n``` gradle\n    // File: ./blog-app/app/build.gradle\n    dependencies {\n        implementation 'com.android.support:recyclerview-v7:27.1.1'\n        implementation 'com.android.support:cardview-v7:27.1.1'\n        implementation 'com.pusher:pusher-java-client:1.5.0'\n        implementation 'com.google.firebase:firebase-messaging:17.0.0'\n        implementation 'com.pusher:push-notifications-android:0.10.0'\n    }\n    \n    // Add this line to the end of the file\n    apply plugin: 'com.google.gms.google-services'\n```\n\n### Writing your app\n\nYour app is expected to display a list of posts in realtime and this means you will need a list. Each list row will contain the time of action and current action happening. Since you can’t use the default Android layouts meant for lists as it doesn’t have what you require in the customized fashion you want it, we have to create a custom list row layout. This layout will determine how each item in the list will look like. \n\nCreate a new layout file, name it `list_row.xml` and paste this:\n\n``` xml\n    \u003c!-- File: /blog-app/app/src/main/res/layout/list_row.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.v7.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        app:cardCornerRadius=\"10dp\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"15dp\"\u003e\n    \n        \u003cLinearLayout\n            android:layout_width=\"match_parent\"\n            android:orientation=\"horizontal\"\n            android:padding=\"10dp\"\n            android:layout_height=\"match_parent\"\u003e\n    \n            \u003cTextView\n                android:textColor=\"@android:color/black\"\n                android:layout_gravity=\"center\"\n                android:id=\"@+id/time\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:textSize=\"18sp\"/\u003e\n    \n            \u003cTextView\n                android:id=\"@+id/currentActivity\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginStart=\"10dp\"\n                android:textSize=\"18sp\" /\u003e\n    \n        \u003c/LinearLayout\u003e\n    \u003c/android.support.v7.widget.CardView\u003e\n```\n\nA `CardView` is here used for easy customization of the borders. The `CardView` contains a horizontal linear layout, which in turn contains two `TextView`s. The first `TextView` will show the minute during the match when an event is happening and the second one will show the event happening.\n\nNext, you need a class to mock the kind of data you want to send to each row. Create a data class named `BlogPostModel` and paste this:\n\n``` kotlin\n    // File: /blog-app/app/src/main/java/com/example/soccerliveblog/BlogPostModel.kt\n    data class BlogPostModel(var time:String, var currentActivity:String)\n```\n\nNext, you will need a recycler view adapter to manage items in the recycler view. Create a class `BlogListAdapter` and set it up like this:\n\n``` kotlin\n    // File: /blog-app/app/src/main/java/com/example/soccerliveblog/BlogListAdapter.kt\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    \n    class BlogListAdapter : RecyclerView.Adapter\u003cBlogListAdapter.ViewHolder\u003e() {\n    \n        private var blogList = ArrayList\u003cBlogPostModel\u003e()\n    \n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n            return ViewHolder(LayoutInflater.from(parent.context)\n                    .inflate(R.layout.list_row, parent, false))\n        }\n    \n        override fun onBindViewHolder(holder: ViewHolder, position: Int) = holder.bind(blogList[position])\n    \n        override fun getItemCount(): Int = blogList.size\n    \n        fun addItem(blogItem:BlogPostModel){\n            blogList.add(0,blogItem)\n            notifyDataSetChanged()\n        }\n    \n        inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n    \n            private val time: TextView = itemView.findViewById(R.id.time)\n            private val currentActivity: TextView = itemView.findViewById(R.id.currentActivity)\n    \n            fun bind(currentValue: BlogPostModel) = with(itemView) {\n                time.text = currentValue.time\n                currentActivity.text = currentValue.currentActivity\n            }\n        }\n    }\n```\n\nThis class contains the usual `RecyclerView.Adapter` methods. There are two custom functions created here, `addItem` to add a new blog post item to the top of the list and `bind` inside the `ViewHolder` class to make binding easier.\n\nNext thing you would consider is how you will receive and display notifications in the app. You will create a service for that. Services are one of the key components in Android development. A service is a component that runs in the background to perform long-running operations without needing to interact with the user and it works even if application is destroyed. Create a new class named `NotificationsMessagingService` and paste this:\n\n``` kotlin\n    // File: /blog-app/app/src/main/java/com/example/soccerliveblog/NotificationsMessagingService.kt\n    import android.app.NotificationChannel\n    import android.app.NotificationManager\n    import android.app.PendingIntent\n    import android.content.Intent\n    import android.os.Build\n    import android.support.v4.app.NotificationCompat\n    import com.google.firebase.messaging.RemoteMessage\n    import com.pusher.pushnotifications.fcm.MessagingService\n    \n    class NotificationsMessagingService : MessagingService() {\n    \n        override fun onMessageReceived(remoteMessage: RemoteMessage) {\n            val notificationId = 10\n            val channelId  = \"soccer-channel\"\n            val notificationManager = applicationContext.getSystemService(NotificationManager::class.java)\n            \n            lateinit var channel:NotificationChannel\n    \n            if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.O) {\n                val name = getString(R.string.channel_name)\n                val description = getString(R.string.channel_description)\n                val importance = NotificationManager.IMPORTANCE_DEFAULT\n                channel = NotificationChannel(\"world-cup\", name, importance)\n                channel.description = description\n                notificationManager!!.createNotificationChannel(channel)\n            }\n    \n            val intent = Intent(this, MainActivity::class.java)\n            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\n            val pendingIntent = PendingIntent.getActivity(this, 0, intent, 0)\n    \n            val mBuilder = NotificationCompat.Builder(this, channelId)\n                    .setSmallIcon(R.mipmap.ic_launcher)\n                    .setContentTitle(remoteMessage.notification!!.title!!)\n                    .setContentText(remoteMessage.notification!!.body!!)\n                    .setContentIntent(pendingIntent)\n                    .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                    .setAutoCancel(true)\n    \n            notificationManager.notify(notificationId, mBuilder.build())\n    \n        }\n    }\n```\n\nThis class implements the `MessagingService` abstract class. This mandates the implementation of the method `onMessageReceived`, which is called when a message is pushed remotely. From the snippet, when a message is received, a notification is prepared and sent to the user. \n\nNote that if the user is on the app already, this notification will not come up. API versions 26 and above require creating notification channels and that is exactly what is done above. The title and body of the notification are inline with what is received remotely. An intent is added so that the `MainActivity` will be opened when the notification is selected.\n\nAdd these strings to your `strings.xml` file as they were referenced in the previous snippet:\n\n``` xml\n    \u003cstring name=\"channel_name\"\u003esoccer\u003c/string\u003e\n    \u003cstring name=\"channel_description\"\u003eListen to soccer notifications\u003c/string\u003e\n```\n\nNext, you add the service in your `AndroidManifest.xml` file under the `\u003capplication\u003e` tag like this:\n\n``` xml\n    \u003c!-- /blog-app/app/src/main/AndroidManifest.xml --\u003e\n    \u003capplication\n      \n      [...]\n      \n      \u003cservice android:name=\".NotificationsMessagingService\"\u003e\n          \u003cintent-filter android:priority=\"1\"\u003e\n              \u003caction android:name=\"com.google.firebase.MESSAGING_EVENT\" /\u003e\n          \u003c/intent-filter\u003e\n      \u003c/service\u003e\n      \n      [...]\n      \n    \u003c/application\u003e\n```\n\nWith this, you are ready to receive notifications remotely to your app. Next replace the contents of the `activity_main.xml` file with the following:\n\n``` xml\n    \u003c!-- File: /blog-app/app/src/main/res/layout/activity_main.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\"\u003e\n    \n        \u003candroid.support.v7.widget.RecyclerView\n            android:id=\"@+id/recyclerViewBlogPosts\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nNow, go the `MainActivity` class and make sure you have these imports in the class:\n\n``` kotlin\n    // File: /blog-app/app/src/main/java/com/example/soccerliveblog/MainActivity.kt\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import com.pusher.pushnotifications.PushNotifications\n    import kotlinx.android.synthetic.main.activity_main.*\n    import org.json.JSONObject\n```\n\nThe rest of the class should then look like this:\n\n``` kotlin\n    class MainActivity : AppCompatActivity() {\n    \n        private lateinit var pusher: Pusher\n        private val blogListAdapter = BlogListAdapter()\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n            PushNotifications.start(applicationContext,\n                    PUSHER_BEAMS_INSTANCEID)\n            PushNotifications.subscribe(\"world-cup\")\n            with(recyclerViewBlogPosts){\n                layoutManager = LinearLayoutManager(this@MainActivity)\n                adapter = blogListAdapter\n            }\n            setupPusher()\n        }\n    }\n```\n\n\u003e You are expected to replace the `PUSHER_BEAMS_INSTANCEID` with your instance ID found on your Pusher Beams dashboard.\n\nIn the above snippet, the `pusher` and `blogListAdapter` instance are first declared. In the `onCreate` method, push notifications is initialized and you are particularly listening to the world-cup stream for updates. \n\nNext, you have initialized the recycler view with a linear layout manager and an adapter. Finally, a `setupPusher` function is called. Add the function below to the class:\n\n``` kotlin\n    private fun setupPusher() {\n        val options = PusherOptions()\n        options.setCluster(PUSHER_CLUSTER)\n        pusher = Pusher(PUSHER_API_KEY, options)\n    \n        val channel = pusher.subscribe(\"soccer\")\n    \n        channel.bind(\"world-cup\") { channelName, eventName, data -\u003e\n            val jsonObject = JSONObject(data)\n            val time = jsonObject.getString(\"currentTime\")\n            val currentActivity = jsonObject.getString(\"currentPost\")\n            val model = BlogPostModel(time,currentActivity)\n            runOnUiThread {\n                blogListAdapter.addItem(model)\n            }\n        }\n        \n        pusher.connect()\n    }\n```\n\n\u003e Replace the `PUSHER_CLUSTER` and `PUSHER_API_KEY` with their equivalent values from your dashboard\n\nIn the above snippet, there is a listener to the soccer channel and the world-cup event. When a post is received, it is bound to a new model instance before it being added to the adapter.\n\nFinally, give the activity a `singleInstance` launch mode so that when you open the `MainActivity` from the notification, it won’t restart the activity. To do this, open the `AndroidManifest.xml`  file and add the `android:launchMode` attribute to the `activity` tag and set it to `singleInstance`:\n\n``` xml\n    \u003cactivity android:name=\".MainActivity\"\n        android:launchMode=\"singleInstance\"\n        ...\n    \u003c/activity\u003e\n```\n\n## Building the backend\n\nLet’s build a simple Node.js server to power our app. Create a new folder say `beams-backend`. Open the folder. Create a new `config.js` file like this:\n\n``` javascript\n    module.exports = {\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        secretKey: 'PUSHER_BEAMS_SECRET',\n        instanceId: 'PUSHER_BEAMS_INSTANCEID'\n    };\n```\n\n\u003e Replace the first four items with the keys on you Pusher Channel dashboard while the last two keys will be replaced with the keys on your Pusher Beams dashboard\n\nThis file holds the keys you will access. It is good practice to keep them all in one file. Next up, create a another file named `index.js` and paste this:\n\n``` javascript\n    // Load the required libraries\n    let Pusher = require('pusher');\n    let express = require('express');\n    let bodyParser = require('body-parser');\n    const PushNotifications = require('@pusher/push-notifications-server');\n    \n    // initialize express and pusher and pusher beams\n    let app = express();\n    let pusher = new Pusher(require('./config.js'));\n    let pushNotifications = new PushNotifications(require('./config.js'))\n    \n    // Middlewares\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    app.get('/posts', (req, res) =\u003e {\n    \n      var arrayEvents = [\n          \"Russia (4-2-3-1): Igor Akinfeev; Mario Fernandes, Ilya Kutepov, Sergey Ignashevich, Yury Zhirkov; Yuri Gazinskiy, Roman Zobnin; Aleksandr Samedov, Alan Dzagoev, Aleksandr Golovin; Fedor Smolov.\",\n        \"Finally, the festival of football is here. We've got 64 games, 32 teams...but there can be only one winner. And the action starts today!!\",\n          \"Hello and welcome to live text commentary of the Group A match between Russia and Saudi Arabia at the 2018 World Cup in Russia. The scene is set for the tournament opener!\"\n      ];\n    \n      var arrayTime = [\"15'\", \"10'\", \"5'\"];\n    \n      let sendPushNotification = () =\u003e {\n        var currentPost = arrayEvents.pop()\n        var currentTime = arrayTime.pop()\n      \n        pushNotifications.publish(\n          ['world-cup'],{\n          fcm: {\n            notification: {\n              title: 'New post',\n              body: currentPost\n            }\n          }\n        }).then((publishResponse) =\u003e {\n          console.log('Just published:', publishResponse.publishId);\n        });\n      \n        pusher.trigger('soccer', 'world-cup', {currentTime, currentPost});\n      }\n      \n      sendPushNotification()\n    \n      let sendToPusher = setInterval(() =\u003e {\n        sendPushNotification()\n      \n        if (arrayEvents.length == 0) {\n          clearInterval(sendToPusher)\n        }\n      }, 5000);\n    \n      res.json({success: 200})\n    });\n    \n    // index\n    app.get('/', (req, res) =\u003e res.json(\"It works!\"));\n    \n    // serve app\n    app.listen(4000, _ =\u003e console.log('App listening on port 4000!'));\n```\n\n\u003e These commentaries were gotten manually from Goal.com’s commentary blog for the opening match at the FIFA World Cup 2018 (Russia vs Saudi Arabia)\n  \n\nIn this snippet, there is one endpoint, the `/posts` endpoint, which sends data to the Pusher channel and a notification channel every twenty seconds. The data is gotten from an array initialized locally. The app is then served on port `4000`. In the `beams-backend` directory, run the following commands:\n\n```\n    npm install pusher\n    npm install body-parser\n    npm install @pusher/push-notifications-server express --save\n```\n\nThis installs the three dependencies you need for your app. Now, your server is ready, run this command in the `beams-backend` directory:\n\n```\n    node index.js\n```\n\nNext, run the application from Android Studio, then open the URL `http://localhost:4000/posts` in your browser and you should start receiving live updates in your app.\n\n## Conclusion\n\nIn this post, you have learned how to build a blog app using Kotlin, Pusher Beams, and Pusher Channels. Feel free to fall back to the [GitHub repository](https://github.com/neoighodaro/kotlin-live-blog-with-push-notifications) if you get stuck at any point. I can’t wait to see what you will build with your knowledge of a realtime service like Pusher.","metaTitle":"Build a live blog in Kotlin with push notifications","metaDescription":"Use push notifications to create a live blog app. Create an Android app using Kotlin, with a Node.js server."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"nlxHkriz3q26s4WyIk42u","type":"Entry","createdAt":"2018-07-02T13:15:54.987Z","updatedAt":"2018-07-06T13:40:24.782Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live graph with Go","url":"live-graph-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/pusher-go-realtime-graph","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}}],"reviewDate":"2018-06-29","description":"Build a simple interface featuring a live graph, supported by a Go backend. The application simulates a web traffic monitoring dashboard using Chart.js and some dummy data.","prerequisite":"You will need Go 1.10+ installed on your machine. Basic knowledge of Go and JavaScript will be helpful.","content":"An astronomical number of data streams are being generated every day because data is core to diverse systems. Today’s business owners have come to recognize data as an important factor during decision making. \n\nHowever, the gathered bulk data would be confusing to read and useless without a way to visualize it. For this reason, realtime monitoring systems have gained popularity over the years. We can use such systems to visualize website traffic, weather updates, server performance and so on. \n\nIn this article, we will build a realtime monitoring graph that continuously displays updates on website traffic after a fixed interval. We will build a Go backend server that exposes several endpoints and uses Pusher Channels to trigger events on the count of user visits. We will simulate the website traffic data using a simple setInterval function and a pseudorandom number generator.\n\nOn the frontend, we will receive the simulated updates from Pusher and render the data trend using a line chart. The graph will be a plot on “user visits” against “total number of pages visited.” For context, here is a sample of what we will be building:\n\n![go-live-graph-demo](//images.ctfassets.net/1es3ne0caaid/1xM5LHTn2MYQmyO24M84WI/61af7ff9f8449a3a2c258628b99bea4a/go-live-graph-demo.gif)\n\nFrom the image above, we can see that there is a button labeled **Simulate user visits**, this button is responsible for starting the simulator on the Backend server. Let’s begin.\n\n\n## Requirements\n\nTo follow along with this article, you will need the following:\n\n\n- An editor like Visual Studio Code.\n- Go (version \u003e= 1.10.x) installed on your computer. Heres how you can install [Go.](https://golang.org/doc/install)\n- Basic knowledge of the Go programming language.\n- Basic knowledge of JavaScript (ES6).\n\nOnce you have all the above requirements, we can proceed.\n\n\n## Setting up Pusher\n\nThe first step will be to get a Pusher Channels application. We will need the application credentials for our realtime features to work.\n\nGo to the [Pusher website](https://pusher.com) and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article.\n\n![ember-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/1QiXDu6gpy0CKQCosqgcgE/1ffc23a7859704465b1a9357c07151b5/ember-pusher-app-keys.png)\n\n\n## Setting up the codebase\n\nLet’s begin by navigating into the `src` directory that is located in the `$GOPATH` and creating a new directory for our app. This will be our working directory:\n\n```\n    $ cd $GOPATH/src\n    $ mkdir pusher-go-realtime-graph\n    $ cd pusher-go-realtime-graph\n```\n\nCreate a new file called `graph.go`. Now, before adding content to this file, we need to install the Go packages that we will be referencing within our application. \n\nRun the following packages to pull in the packages:\n\n```\n    $ go get github.com/labstack/echo\n    $ go get github.com/labstack/echo/middleware\n    $ go get github.com/pusher/pusher-http-go\n```\n\n\u003e ⚠️  If you use Windows and you encounter the error ‘cc.exe: sorry, unimplemented: 64-bit mode not compiled in ‘, then you need a Windows gcc port, such as https://sourceforge.net/projects/mingw-w64/. Also, see this [GitHub issue](https://github.com/golang/go/issues/3441).\n\nWithin your favorite editor, open the `graph.go` file and update it with the following code:\n\n``` go\n    package main\n    \n    import (\n        \"math/rand\"\n        \"net/http\"\n        \"time\"\n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/middleware\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    // We register the Pusher client\n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    // visitsData is a struct\n    type visitsData struct {\n        Pages   int\n        Count int\n    }\n    \n    func main() {\n        // Echo instance\n        e := echo.New()\n        \n        // Middleware\n        e.Use(middleware.Logger())\n        e.Use(middleware.Recover())\n        \n        // Define the HTTP routes\n        e.File(\"/\", \"public/index.html\")\n        e.File(\"/style.css\", \"public/style.css\")\n        e.File(\"/app.js\", \"public/app.js\")\n        e.GET(\"/simulate\", simulate)\n        \n        // Start server\n        e.Logger.Fatal(e.Start(\":9000\"))\n    }\n```\n\nThe `graph.go` file is the main entry point of our backend server so this is where we import all the packages we previously pulled in. We import the `time` package because we will need it to create a new ticker for our custom `setInterval` function. We import the `math/rand` package because it provides the [pseudorandom number generation.](http://en.wikipedia.org/wiki/Pseudorandom_number_generator)\n\nNext, registered a new Pusher client with the credentials from the app we created earlier.\n\n\n\u003e  ⚠️  Replace `PUSHER_*`  keys with your app credentials.\n\nWe also created a `visitsData` type, which is a struct with two fields:\n\n\n- `Pages` - this is the number of pages visited at a given time\n- `Count` - this is the user count at a given time\n\nWe defined the main function (this is where the application starts its execution) and created a new echo instance.\n\nIn this application, because we will serve the static files that define our frontend from the backend server, we need to let Go know about them and their location. In the main function, we registered the routes that will serve these static files that we will create shortly.\n\nWe also defined a “/simulate” route that takes a `simulate` handler function and responds to the `GET` HTTP verb. Lastly, we instruct the echo instance we created to start the application and listen on the port 9000.\n\nLet’s create the `simulate` function, before the start of the main function paste the following code:\n\n``` go\n    // [...]\n    \n    // -------------------------------------------------------\n    // Simulate multiple changes to the visitor count value,\n    // this way the chart will always update with different\n    // values.\n    // -------------------------------------------------------\n    \n    func simulate(c echo.Context) error {\n        setInterval(func() {\n            s1 := rand.NewSource(time.Now().UnixNano())\n            r1 := rand.New(s1)\n            newVisitsData := visitsData{\n                Pages:   r1.Intn(100),\n                Count: r1.Intn(100),\n            }\n            client.Trigger(\"visitorsCount\", \"addNumber\", newVisitsData)\n        }, 2500, true)\n        \n        return c.String(http.StatusOK, \"Simulation begun\")\n    }\n    \n    // [...]\n```\n\nWithin the `simulate` function, we called a `setInterval` function and within it we seeded a new random number using the `time.Now()` function. We also instantiated a new `visitsData` object with the name `newVisitsData` and initialized both the `Pages` and `Count` fields using randomly generated numbers. We set the interval between running the logic to 2500ms.\n\nLastly, we use the `Trigger` method on the client object to broadcast an `addNumber` event over the `visitorsCount` channel.\n\nLet’s create the `setInterval` function before the `simulate` function paste the following code:\n\n``` go\n    func setInterval(ourFunc func(), milliseconds int, async bool) chan bool {\n    \n        // How often to fire the passed in function in milliseconds\n        interval := time.Duration(milliseconds) * time.Millisecond\n        \n        // Setup the ticker and the channel to signal\n        // the ending of the interval\n        ticker := time.NewTicker(interval)\n        clear := make(chan bool)\n        \n        // Put the selection in a go routine so that the for loop is none blocking\n        go func() {\n            for {\n                select {\n                case \u003c-ticker.C:\n                    if async {\n                        // This won't block\n                        go ourFunc()\n                    } else {\n                        // This will block\n                        ourFunc()\n                    }\n                case \u003c-clear:\n                    ticker.Stop()\n                    return\n                }\n            }\n        }()\n        \n        // We return the channel so we can pass in\n        // a value to it to clear the interval\n        return clear\n    }\n```\n\nUsing [Goroutines](https://golangbot.com/goroutines/) and Channels, we have created a `setInterval` function that works like the one in JavaScript. For its parameters, it receives the function to be called after an interval, the interval and a boolean value that determines if it runs asynchronously or not.\n\n\n## Building the frontend\n\nIn this step, we will use the received data from the backend server to represent a mathematical graph. To achieve this, we can use any of the open source libraries that support chart types, such as bar charts, pie charts, line charts and scatter charts. Here are links to a few of the popular libraries:\n\n\n- [Highcharts](http://www.highcharts.com/)\n- [Chart.js](http://www.chartjs.org/) \n- [Google Charts](https://developers.google.com/chart/)\n- [Flot](http://www.flotcharts.org/) \n- [D3 JS](http://d3js.org/) \n\nIn this tutorial, we will use Chart.js; it has a fairly simple API and renders robust charts using the HTML canvas tag. It is also able to update the chart without completely re-rendering it and this is what we need since we will be rendering Pusher updates.\n\nTo start building the frontend of our application, we will create a `public` folder in our working directory and create three files within it: \n\n```\n    $ mkdir public\n    $ cd public\n    $ touch index.html style.css app.js\n```\n\nOpen the `index.html` file and update it with the following code:\n\n``` html\n    \u003c!DOCTYPE\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n          \u003ctitle\u003eRealtime User Analytics\u003c/title\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Raleway:200\"\u003e\n          \u003clink rel=\"stylesheet\" href=\"./style.css\"\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e\n          \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n      \u003c/head\u003e\n    \n      \u003cbody\u003e\n      \n          \u003csection class=\"subheader\"\u003e\n              \u003ch2\u003eRealtime User Traffic Analytics\u003c/h2\u003e\n              \u003cbutton id=\"getUpdates\" class=\"btn-primary\"\u003e Simulate user visits\u003c/button\u003e\n          \u003c/section\u003e\n          \n          \u003csection width=\"500px\" style=\"margin:0 auto;width: 100%;max-width: 800px\"\u003e    \n              \u003ccanvas id=\"realtimeChart\"\u003e\u003c/canvas\u003e\n          \u003c/section\u003e\n          \n          \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.bundle.min.js\"\u003e\u003c/script\u003e\n          \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n          \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e\n          \u003cscript type=\"text/javascript\" src=\"./app.js\"\u003e\u003c/script\u003e\n          \n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the scripts part of the markup above, we pulled in the JavaScript Pusher library, [Axios](https://www.npmjs.com/package/axios), and Chart.js.\n\nIn order to style our app properly, add the following CSS into the `style.css` file the public folder:\n\n``` css\n    body{\n        margin:0;\n        padding:0;\n        font-family: Raleway;\n    }\n    \n    header{\n        background: #2b303b;\n        height: 50px;\n        width:100%;\n        display: flex;\n        color:#fff;\n    }\n    \n    .subheader{\n        margin: 20px;\n        text-align: center;\n    }\n```\n\n## Displaying realtime graph updates using Pusher\n\nIn this section, we will write the vanilla JavaScript code that will receive updates from Pusher and update the graph accordingly. We will achieve this behavior by subscribing to the unique channel where our server will be sending update events for the graph. The name of this channel is `visitorsCount` and the event we will be binding to is called `addNumber`.\n\nBecause we want to control when the realtime updates start, we will use JavaScript to target the button element — simulate user visits —  in the markup and attach an `eventListener`, so that the updates only start coming in when we click the button. When the button is clicked, our frontend will make a `GET` request, using Axios, to the “/simulate” endpoint on our backend server and the realtime updates will start.\n\nWe will also instantiate a new line chart object passed in a `chartConfig` object as an argument, this `chartConfig` object will supply the data that will define the line chart’s properties.\n\nOpen the `app.js` file and update it with the following code:\n\n``` javascript\n    document.getElementById(\"getUpdates\").addEventListener(\"click\", function(){\n        axios.get('/simulate')\n    })\n    \n    const pusher = new Pusher('PUSHER_APP_KEY', {\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    \n    const channel = pusher.subscribe('visitorsCount');\n    \n    channel.bind('addNumber', data =\u003e {\n      if (newLineChart.data.labels.length \u003e 15) {\n        newLineChart.data.labels.shift();  \n        newLineChart.data.datasets[0].data.shift();\n      }\n    \n      newLineChart.data.labels.push(data.Count);\n      newLineChart.data.datasets[0].data.push(data.Pages);\n      newLineChart.update();\n    });\n    \n    function renderChart(userVisitsData) {\n      var ctx = document.getElementById(\"realtimeChart\").getContext(\"2d\");\n      \n      var options = {};\n      \n      newLineChart = new Chart(ctx, {\n        type: \"line\",\n        data: userVisitsData,\n        options: options\n      });\n    }\n    \n    var chartConfig = {\n      labels: [],\n      datasets: [\n         {\n            label: \"Realtime User Analytics\",\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: \"rgba(75,192,192,0.4)\",\n            borderColor: \"rgba(75,192,192,1)\",\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: \"rgba(75,192,192,1)\",\n            pointBackgroundColor: \"#fff\",\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n            pointHoverBorderColor: \"rgba(220,220,220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: [],\n            spanGaps: false,\n         }\n      ]\n    };\n    \n    renderChart(chartConfig)\n```\n\n\u003e  ⚠️  Replace `PUSHER_APP_*`  keys with your app credentials.\n\n\n## Running the application\n\nWe can run our application with this command:\n\n```\n    $ go run graph.go\n```\n\nWe can now point our web browser to this address http://localhost:9000, at first, the graph in the window will be static but after we click on the **Simulate users visit** button, we will see this the realtime updates:\n\n![go-live-graph-demo](//images.ctfassets.net/1es3ne0caaid/1xM5LHTn2MYQmyO24M84WI/61af7ff9f8449a3a2c258628b99bea4a/go-live-graph-demo.gif)\n\n## Conclusion\n\nIn this article, we have discussed the importance of data in today’s tech world and gone over the process of building a realtime monitoring system using Go and Pusher channels. In addition to that, we used Vanilla JavaScript to build the frontend of our application and hit an endpoint on our Go web server using Axios.\n\nThe source code to the application is available on [GitHub](https://github.com/neoighodaro/pusher-go-realtime-graph).","metaTitle":"Create a live graph with Go","metaDescription":"Use Go and JavaScript to create a simple live graph. The graph updates in realtime as it receives new data."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"IoVq6Hq32mG6gGsUMaOqy","type":"Entry","createdAt":"2018-07-02T13:17:10.219Z","updatedAt":"2018-07-05T15:16:55.811Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live dashboard with Python","url":"live-dashboard-python","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/pusher-python-realtime-dashboard","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}}],"reviewDate":"2018-06-29","description":"Build a simple dashboard with a Flask backend that receives and displays updates instantly. Users will be able to submit orders, messages and new person data. Admin users can see these displayed in realtime on a dashboard.","prerequisite":"You will need Python 3+ installed on your machine. A basic knowledge of Python and Flask will be helpful.","content":"## Introduction\n\nIn the past, if we needed to build a web platform that keeps track of user actions and displays updates accordingly, say on the admin dashboard, we will have to refresh the dashboard from time to time — usually intuitively — to check for new updates. \n\nToday, however, we can build a fully interactive web application and have the updates served to us in realtime. In this tutorial, we will build an interactive website with a dashboard that displays updates on user actions in realtime. Here is what the final application will look like:\n\n![python-dashboard-demo](//images.ctfassets.net/1es3ne0caaid/6N7rpxs4F2AuUQwm0Aaei8/cd699276cbafba8bcdb9d1c4e30eb582/python-dashboard-demo.gif)\n\nThe image above shows two browser windows, the window on the left shows a user performing three actions:\n\n- The user places a new order.\n- The user sends a new message.\n- The user adds a new customer.\n\nThe window on the right shows an admin dashboard that updates in realtime based on the user’s interaction. The realtime update in this application is powered by [Pusher.](https://pusher.com/)\n\nFor the sake of this article, we will build the backend server using a Python framework called [Flask.](http://flask.pocoo.org/) For the frontend, we will use JavaScript to send HTTP requests and communicate with the backend API.\n\nThe source code for this tutorial is available here on [GitHub.](https://github.com/neoighodaro/pusher-python-realtime-dashboard)\n\n\n## Prerequisites\n\nTo follow along with this tutorial, a basic knowledge of Python, Flask, and JavaScript (ES6 syntax) is required. You will also need the following installed:\n\n\n1. [Python (\u003e= v3.x).](https://www.python.org/)\n2. [virtualenv.](https://virtualenv.pypa.io/en/stable/)\n3. [Flask.](http://flask.pocoo.org/)\n\nVirtualenv is great for creating isolated Python environments, so we can install dependencies in an isolated environment, and not pollute our global packages directory.\n\nLet’s install `virtualenv` with this command:\n\n```\n    $ pip install virtualenv\n```\n\n## Setting up the app environment\n\nLet’s create our project folder, and activate a virtual environment within it:\n\n```\n    $ mkdir pusher-python-realtime-dashboard\n    $ cd pusher-python-realtime-dashboard\n    $ virtualenv .venv\n    $ source .venv/bin/activate # Linux based systems\n    $ \\path\\to\\env\\Scripts\\activate # Windows users\n```\n\nNow that we have the virtual environment setup, we can install [Flask](http://flask.pocoo.org/) with this command:\n\n```\n    $ pip install flask\n```\n\nWe need to install the Pusher library as we will need that for realtime updates.\n\n\n## Setting up Pusher\n\nThe first step will be to get a Pusher Channels application. We will need the application credentials for our realtime features to work.\n\nGo to the [Pusher website](https://pusher.com) and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article.\n\n![python-realtime-poll-keys](//images.ctfassets.net/1es3ne0caaid/752Tb8m156CeqWw2q6eKyS/2a61be62a4ff148b8fe9e7c60a94a5db/python-realtime-poll-keys.png)\n\nWe also need to install the Pusher Python Library to send events to Pusher. Install this using the command below:\n\n```\n    $ pip install pusher\n```\n\n## File and folder structure\n\nWe don’t need to create so many files and folders for this application since it’s a simple one. Here’s the file/folder structure:\n\n```\n    ├── pusher-python-realtime-dashboard\n           ├── app.py\n           ├── static\n           └── templates\n```\n\nThe `static` folder will contain the static files to be used as is defined by [Flask standards.](http://flask.pocoo.org/docs/0.12/tutorial/folders/) The `templates` folder will contain the HTML templates. In our application, `app.py` is the main entry point and will contain our server-side code. \n\nWe will go ahead and create the `app.py` and then the `static` and `templates` folders.\n\n\n## Building the backend\n\nLet’s open the `app.py` file and start writing the backend code that will handle the incoming HTTP requests. In this file, we are going to register five routes and their respective handler functions. The `/` and `/dashboard` routes will render the website and admin dashboard pages respectively. We will create these pages shortly.\n\nWe will define three more routes: `/orders`, `/message` and `/customer`. These will serve as API endpoints. These endpoints will be responsible for processing the `POST` requests that will be coming from our frontend and receiving user data.\n\nWe will also create a fresh Pusher instance and use it to broadcast data through three channels, one for each of the three possible user operations: \n\n\n- Place an order\n- Send a message\n- Register a new customer\n\nOpen the `app.py` file and paste the following code:\n\n``` python\n    from flask import Flask, render_template, request\n    from pusher import Pusher\n    \n    app = Flask(__name__)\n    \n    # configure pusher object\n    pusher = Pusher(\n    app_id='PUSHER_APP_ID',\n    key='PUSHER_APP_KEY',\n    secret='PUSHER_APP_SECRET',\n    cluster='PUSHER_APP_CLUSTER',\n    ssl=True)\n    \n    @app.route('/')\n    def index():\n        return render_template('index.html')\n        \n    @app.route('/dashboard')\n    def dashboard():\n        return render_template('dashboard.html')\n        \n    @app.route('/orders', methods=['POST'])\n    def order():\n        data = request.form\n        pusher.trigger(u'order', u'place', {\n            u'units': data['units']\n        })\n        return \"units logged\"\n        \n    @app.route('/message', methods=['POST'])\n    def message():\n        data = request.form\n        pusher.trigger(u'message', u'send', {\n            u'name': data['name'],\n            u'message': data['message']\n        })\n        return \"message sent\"\n        \n    @app.route('/customer', methods=['POST'])\n    def customer():\n        data = request.form\n        pusher.trigger(u'customer', u'add', {\n            u'name': data['name'],\n            u'position': data['position'],\n            u'office': data['office'],\n            u'age': data['age'],\n            u'salary': data['salary'],\n        })\n        return \"customer added\"\n        \n    if __name__ == '__main__':\n        app.run(debug=True)\n```\n\nIn the code above, we imported the required modules and objects, then initialized a Flask app. Next, we initialized and configure Pusher and also registered the routes and their associated handler functions.\n\n\n\u003e Replace the `PUSHER_APP_*` keys with the values on your Pusher dashboard.\n\nWith the `pusher` object instantiated, we can trigger events on whatever channels we define.\nIn the handler functions of the `/orders,` `/message` and `/customer` routes, we trigger events on three channels. The trigger method has the following syntax:\n\n```\n    pusher.trigger(\"a_channel\", \"an_event\", {key: \"data to pass with event\"})\n```\n\nYou can find the docs for the Pusher Python library [here](https://github.com/pusher/pusher-http-python), to get more information on configuring and using Pusher in Python.\n\nAs we already discussed, the  `/` and `/dashboard` routes will render the `index.html` and `dashboard.html` templates so we need to create these files and write the code to define the frontend layout. In the next step, we will create the app view and use the frontend to communicate with the Python backend.\n\n\n## Setting up the app view\n\nWe need to create two files in the `templates` directory. These files will be named `index.html` and `dashboard.html`, this is where the view for our code will live. When we visit our application’s [root](http://127.0.0.1:5000) address, the `index.html` page will be rendered as the homepage. When we visit the `[/dashboard](http://127.0.0.1:5000/dashboard)` address, the `dashboard.html` file will be rendered on the browser.\n\nIn the `./templates/index.html` file, you can paste this code:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003ePusher Python Realtime Dashboard\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cform method=\"post\" action=\"/orders\"\u003e\n            \u003ch3\u003ePlace a new order\u003c/h3\u003e\n            \u003cinput type=\"number\" name=\"units\" placeholder=\"units\"\u003e\u003cbr\u003e\n            \u003cinput type=\"submit\" name=\"Submit\"\u003e\n        \u003c/form\u003e\n        \u003cform method=\"post\" action=\"/message\"\u003e\n            \u003ch3\u003eSend a new message\u003c/h3\u003e\n            \u003cinput type=\"text\" name=\"name\" placeholder=\"name here\"\u003e\u003cbr\u003e\n            \u003ctextarea  name=\"message\" placeholder=\"message here\"\u003e\u003c/textarea\u003e\u003cbr\u003e\n            \u003cinput type=\"submit\" name=\"Submit\"\u003e\n        \u003c/form\u003e\n        \u003cform method=\"post\" action=\"/customer\"\u003e\n            \u003ch3\u003eAdd new customer\u003c/h3\u003e\n            \u003cinput type=\"text\" name=\"name\" placeholder=\"name here\"\u003e\u003cbr\u003e\n            \u003cinput type=\"text\" name=\"position\" placeholder=\"position here\"\u003e\u003cbr\u003e\n            \u003cinput type=\"text\" name=\"office\" placeholder=\"office here\"\u003e\u003cbr\u003e\n            \u003cinput type=\"number\" name=\"age\" placeholder=\"age here\"\u003e\u003cbr\u003e\n            \u003cinput type=\"text\" name=\"salary\" placeholder=\"salary here\"\u003e\u003cbr\u003e\n            \u003cinput type=\"submit\" name=\"Submit\"\u003e\n        \u003c/form\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the markup above, we created three forms with the `POST` method and defined their actions. Whenever each of these forms is submitted, user data is sent to the Python backend server that we defined in the previous step.\n\nBefore we write the code for `dashboard-single.html` and `dashboard` files, we will pull in some CSS and JS from [https://startbootstrap.com](https://startbootstrap.com/template-overviews/sb-admin/). Go to the URL and click **Download.** Unzip the file and copy the `css` and `js` directories into the `static` directory of our project. Now, let’s continue building the frontend of our application. \n\nOpen the `./templates/dashboard.html` file and paste the following:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n      \u003cmeta name=\"description\" content=\"\"\u003e\n      \u003cmeta name=\"author\" content=\"\"\u003e\n      \u003ctitle\u003eSB Admin - Start Bootstrap Template\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"\u003e\n      \u003clink href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\" type=\"text/css\"\u003e\n      \u003clink href=\"https://cdn.datatables.net/1.10.16/css/dataTables.bootstrap4.min.css\" rel=\"stylesheet\"\u003e\n      \u003clink href=\"{{ url_for('static', filename='css/sb-admin.css') }}\" rel=\"stylesheet\"\u003e\n    \u003c/head\u003e\n    \u003cbody class=\"fixed-nav sticky-footer bg-dark\" id=\"page-top\"\u003e\n      \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-dark fixed-top\" id=\"mainNav\"\u003e\n        \u003ca class=\"navbar-brand\" href=\"index.html\"\u003eStart Bootstrap\u003c/a\u003e\n        \u003cbutton class=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\u003e\n          \u003cspan class=\"navbar-toggler-icon\"\u003e\u003c/span\u003e\n        \u003c/button\u003e\n        \u003cdiv class=\"collapse navbar-collapse\" id=\"navbarResponsive\"\u003e\n          \u003cul class=\"navbar-nav navbar-sidenav\" id=\"exampleAccordion\"\u003e\n            \u003cli class=\"nav-item\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Dashboard\"\u003e\n              \u003ca class=\"nav-link\" href=\"/dashboard\"\u003e\n                \u003ci class=\"fa fa-fw fa-dashboard\"\u003e\u003c/i\u003e\n                \u003cspan class=\"nav-link-text\"\u003eDashboard\u003c/span\u003e\n              \u003c/a\u003e\n            \u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/div\u003e\n      \u003c/nav\u003e\n      \u003cdiv class=\"content-wrapper\"\u003e\n        \u003cdiv class=\"container-fluid\"\u003e\n          \u003col class=\"breadcrumb\"\u003e\n            \u003cli class=\"breadcrumb-item\"\u003e\n              \u003ca href=\"#\"\u003eDashboard\u003c/a\u003e\n            \u003c/li\u003e\n            \u003cli class=\"breadcrumb-item active\"\u003eMy Dashboard\u003c/li\u003e\n          \u003c/ol\u003e\n          \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-xl-3 col-sm-6 mb-3\"\u003e\n              \u003cdiv class=\"card text-white bg-primary o-hidden h-100\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                  \u003cdiv class=\"card-body-icon\"\u003e\n                    \u003ci class=\"fa fa-fw fa-comments\"\u003e\u003c/i\u003e\n                  \u003c/div\u003e\n                  \u003cdiv class=\"mr-5\"\u003e\u003cspan id=\"message-count\"\u003e26\u003c/span\u003e New Messages!\u003c/div\u003e\n                \u003c/div\u003e\n                \u003ca class=\"card-footer text-white clearfix small z-1\" href=\"#\"\u003e\n                  \u003cspan class=\"float-left\"\u003eView Details\u003c/span\u003e\n                  \u003cspan class=\"float-right\"\u003e\n                    \u003ci class=\"fa fa-angle-right\"\u003e\u003c/i\u003e\n                  \u003c/span\u003e\n                \u003c/a\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-xl-3 col-sm-6 mb-3\"\u003e\n              \u003cdiv class=\"card text-white bg-warning o-hidden h-100\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                  \u003cdiv class=\"card-body-icon\"\u003e\n                    \u003ci class=\"fa fa-fw fa-list\"\u003e\u003c/i\u003e\n                  \u003c/div\u003e\n                  \u003cdiv class=\"mr-5\"\u003e11 New Tasks!\u003c/div\u003e\n                \u003c/div\u003e\n                \u003ca class=\"card-footer text-white clearfix small z-1\" href=\"#\"\u003e\n                  \u003cspan class=\"float-left\"\u003eView Details\u003c/span\u003e\n                  \u003cspan class=\"float-right\"\u003e\n                    \u003ci class=\"fa fa-angle-right\"\u003e\u003c/i\u003e\n                  \u003c/span\u003e\n                \u003c/a\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-xl-3 col-sm-6 mb-3\"\u003e\n              \u003cdiv class=\"card text-white bg-success o-hidden h-100\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                  \u003cdiv class=\"card-body-icon\"\u003e\n                    \u003ci class=\"fa fa-fw fa-shopping-cart\"\u003e\u003c/i\u003e\n                  \u003c/div\u003e\n                  \u003cdiv class=\"mr-5\"\u003e\u003cspan id=\"order-count\"\u003e123\u003c/span\u003e New Orders!\u003c/div\u003e\n                \u003c/div\u003e\n                \u003ca class=\"card-footer text-white clearfix small z-1\" href=\"#\"\u003e\n                  \u003cspan class=\"float-left\"\u003eView Details\u003c/span\u003e\n                  \u003cspan class=\"float-right\"\u003e\n                    \u003ci class=\"fa fa-angle-right\"\u003e\u003c/i\u003e\n                  \u003c/span\u003e\n                \u003c/a\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-xl-3 col-sm-6 mb-3\"\u003e\n              \u003cdiv class=\"card text-white bg-danger o-hidden h-100\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                  \u003cdiv class=\"card-body-icon\"\u003e\n                    \u003ci class=\"fa fa-fw fa-support\"\u003e\u003c/i\u003e\n                  \u003c/div\u003e\n                  \u003cdiv class=\"mr-5\"\u003e13 New Tickets!\u003c/div\u003e\n                \u003c/div\u003e\n                \u003ca class=\"card-footer text-white clearfix small z-1\" href=\"#\"\u003e\n                  \u003cspan class=\"float-left\"\u003eView Details\u003c/span\u003e\n                  \u003cspan class=\"float-right\"\u003e\n                    \u003ci class=\"fa fa-angle-right\"\u003e\u003c/i\u003e\n                  \u003c/span\u003e\n                \u003c/a\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-lg-8\"\u003e\n              \u003cdiv class=\"card mb-3\"\u003e\n                \u003cdiv class=\"card-header\"\u003e\n                  \u003ci class=\"fa fa-bar-chart\"\u003e\u003c/i\u003e Revenue Chart\u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                  \u003cdiv class=\"row\"\u003e\n                    \u003cdiv class=\"col-sm-8 my-auto\"\u003e\n                      \u003ccanvas id=\"myBarChart\" width=\"100\" height=\"50\"\u003e\u003c/canvas\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-sm-4 text-center my-auto\"\u003e\n                      \u003cdiv class=\"h4 mb-0 text-primary\"\u003e$34,693\u003c/div\u003e\n                      \u003cdiv class=\"small text-muted\"\u003eYTD Revenue\u003c/div\u003e\n                      \u003chr\u003e\n                      \u003cdiv class=\"h4 mb-0 text-warning\"\u003e$18,474\u003c/div\u003e\n                      \u003cdiv class=\"small text-muted\"\u003eYTD Expenses\u003c/div\u003e\n                      \u003chr\u003e\n                      \u003cdiv class=\"h4 mb-0 text-success\"\u003e$16,219\u003c/div\u003e\n                      \u003cdiv class=\"small text-muted\"\u003eYTD Margin\u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-footer small text-muted\"\u003eUpdated yesterday at 11:59 PM\u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-lg-4\"\u003e\n              \u003c!-- Example Notifications Card--\u003e\n              \u003cdiv class=\"card mb-3\"\u003e\n                \u003cdiv class=\"card-header\"\u003e\n                  \u003ci class=\"fa fa-bell-o\"\u003e\u003c/i\u003e Message Feed\u003c/div\u003e\n                \u003cdiv class=\"list-group list-group-flush small\"\u003e\n                  \u003cdiv id=\"message-box\"\u003e\n                    \u003ca class=\"list-group-item list-group-item-action\" href=\"#\"\u003e\n                      \u003cdiv class=\"media\"\u003e\n                        \u003cimg class=\"d-flex mr-3 rounded-circle\" src=\"http://placehold.it/45x45\" alt=\"\"\u003e\n                        \u003cdiv class=\"media-body\"\u003e\n                          \u003cstrong\u003eJeffery Wellings\u003c/strong\u003eadded a new photo to the album\n                          \u003cstrong\u003eBeach\u003c/strong\u003e.\n                          \u003cdiv class=\"text-muted smaller\"\u003eToday at 4:31 PM - 1hr ago\u003c/div\u003e\n                        \u003c/div\u003e\n                      \u003c/div\u003e\n                    \u003c/a\u003e\n                    \u003ca class=\"list-group-item list-group-item-action\" href=\"#\"\u003e\n                      \u003cdiv class=\"media\"\u003e\n                        \u003cimg class=\"d-flex mr-3 rounded-circle\" src=\"http://placehold.it/45x45\" alt=\"\"\u003e\n                        \u003cdiv class=\"media-body\"\u003e\n                          \u003ci class=\"fa fa-code-fork\"\u003e\u003c/i\u003e\n                          \u003cstrong\u003eMonica Dennis\u003c/strong\u003eforked the\n                          \u003cstrong\u003estartbootstrap-sb-admin\u003c/strong\u003erepository on\n                          \u003cstrong\u003eGitHub\u003c/strong\u003e.\n                          \u003cdiv class=\"text-muted smaller\"\u003eToday at 3:54 PM - 2hrs ago\u003c/div\u003e\n                        \u003c/div\u003e\n                      \u003c/div\u003e\n                    \u003c/a\u003e\n                  \u003c/div\u003e\n                  \u003ca class=\"list-group-item list-group-item-action\" href=\"#\"\u003eView all activity...\u003c/a\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-footer small text-muted\"\u003eUpdated yesterday at 11:59 PM\u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003c!-- Example DataTables Card--\u003e\n          \u003cdiv class=\"card mb-3\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n              \u003ci class=\"fa fa-table\"\u003e\u003c/i\u003e Customer Order Record\u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n              \u003cdiv class=\"table-responsive\"\u003e\n                \u003ctable class=\"table table-bordered\" id=\"dataTable\" width=\"100%\" cellspacing=\"0\"\u003e\n                  \u003cthead\u003e\n                    \u003ctr\u003e\n                      \u003cth\u003eName\u003c/th\u003e\n                      \u003cth\u003ePosition\u003c/th\u003e\n                      \u003cth\u003eOffice\u003c/th\u003e\n                      \u003cth\u003eAge\u003c/th\u003e\n                      \u003cth\u003eStart date\u003c/th\u003e\n                      \u003cth\u003eSalary\u003c/th\u003e\n                    \u003c/tr\u003e\n                  \u003c/thead\u003e\n                  \u003ctfoot\u003e\n                    \u003ctr\u003e\n                      \u003cth\u003eName\u003c/th\u003e\n                      \u003cth\u003ePosition\u003c/th\u003e\n                      \u003cth\u003eOffice\u003c/th\u003e\n                      \u003cth\u003eAge\u003c/th\u003e\n                      \u003cth\u003eStart date\u003c/th\u003e\n                      \u003cth\u003eSalary\u003c/th\u003e\n                    \u003c/tr\u003e\n                  \u003c/tfoot\u003e\n                  \u003ctbody id=\"customer-table\"\u003e\n                    \u003ctr\u003e\n                      \u003ctd\u003eCedric Kelly\u003c/td\u003e\n                      \u003ctd\u003eSenior Javascript Developer\u003c/td\u003e\n                      \u003ctd\u003eEdinburgh\u003c/td\u003e\n                      \u003ctd\u003e22\u003c/td\u003e\n                      \u003ctd\u003e2012/03/29\u003c/td\u003e\n                      \u003ctd\u003e$433,060\u003c/td\u003e\n                    \u003c/tr\u003e\n                    \u003ctr\u003e\n                      \u003ctd\u003eAiri Satou\u003c/td\u003e\n                      \u003ctd\u003eAccountant\u003c/td\u003e\n                      \u003ctd\u003eTokyo\u003c/td\u003e\n                      \u003ctd\u003e33\u003c/td\u003e\n                      \u003ctd\u003e2008/11/28\u003c/td\u003e\n                      \u003ctd\u003e$162,700\u003c/td\u003e\n                    \u003c/tr\u003e\n                  \u003c/tbody\u003e\n                \u003c/table\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-footer small text-muted\"\u003eUpdated yesterday at 11:59 PM\u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cfooter class=\"sticky-footer\"\u003e\n          \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"text-center\"\u003e\n              \u003csmall\u003eCopyright © Your Website 2018\u003c/small\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/footer\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\"\n            crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003c!-- Page level plugin JavaScript--\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.datatables.net/1.10.16/js/dataTables.bootstrap4.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/customer.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/order.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/message.js') }}\"\u003e\u003c/script\u003e\n      \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the code above, we imported the JQuery and the JavaScript [Pusher library](https://pusher.com/) and written the markup to define the layout for the home and dashboard pages, In the next step, we will create the JavaScript files that will handle the realtime updates.\n\n## Communicating with the backend\n\nCreate a new folder called `js` in the `static` directory and populate it with three new files:\n\n\n- `order.js` — in this file, we will subscribe to the `order` channel and update the admin dashboard in realtime whenever a new order is placed.\n- `message.js` — in this file, we will subscribe to the `message` channel and update the admin dashboard in realtime whenever a new message is sent.\n- `customer.js` — in this file, we will subscribe to the `customer` channel and update the admin dashboard in realtime whenever a new customer is registered.\n\nIn the `./static/js/order.js` file, we can paste the following:\n\n``` javascript\n    Chart.defaults.global.defaultFontFamily = '-apple-system,system-ui,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif';\n    \n    Chart.defaults.global.defaultFontColor = '#292b2c';\n    \n    var ctx = document.getElementById(\"myBarChart\");\n    var myLineChart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: [\"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n        datasets: [{\n          label: \"Revenue\",\n          backgroundColor: \"rgba(2,117,216,1)\",\n          borderColor: \"rgba(2,117,216,1)\",\n          data: [5312, 6251, 7841, 9821, 14984, 0],\n        }],\n      },\n      options: {\n        scales: {\n          xAxes: [{\n            time: {\n              unit: 'month'\n            },\n            gridLines: {\n              display: false\n            },\n            ticks: {\n              maxTicksLimit: 6\n            }\n          }],\n        },\n        legend: {\n          display: false\n        }\n      }\n    });\n    \n    // Configure Pusher instance\n    const pusher = new Pusher('PUSHER_APP_KEY', {\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    \n    // Subscribe to poll trigger\n    var orderChannel = pusher.subscribe('order');\n    \n    // Listen to 'order placed' event\n    var order = document.getElementById('order-count')\n    orderChannel.bind('place', function(data) {\n      myLineChart.data.datasets.forEach((dataset) =\u003e {\n          dataset.data.fill(parseInt(data.units),-1);\n      });\n      myLineChart.update();\n      order.innerText = parseInt(order.innerText)+1\n    });\n```\n\n\u003e  Replace the `PUSHER_APP_*`  keys with the keys on your Pusher dashboard.\n\nIn the code above, first, we targeted the bar chart on the dashboard page using the ID `myBarChart`, then we initialized its data object. Next, we configured a Pusher instance to communicate with the Pusher service. We register a listener, on the `place` event, and listen to the events Pusher sends.\n \nNext, open the `./static/js/message.js` file and paste in this code:\n\n``` javascript\n    $(document).ready(function () {\n      $('.navbar-sidenav [data-toggle=\"tooltip\"]').tooltip({\n        template: '\u003cdiv class=\"tooltip navbar-sidenav-tooltip\" role=\"tooltip\" style=\"pointer-events: none;\"\u003e\u003cdiv class=\"arrow\"\u003e\u003c/div\u003e\u003cdiv class=\"tooltip-inner\"\u003e\u003c/div\u003e\u003c/div\u003e'\n      })\n    \n      $('[data-toggle=\"tooltip\"]').tooltip()\n    \n      var messageChannel = pusher.subscribe('message');\n      messageChannel.bind('send', function(data) {\n        var message = document.getElementById('message-count')\n        var date = new Date();\n        var toAppend = document.createElement('a')\n        toAppend.classList.add('list-group-item', 'list-group-item-action')\n        toAppend.href = '#'\n        document.getElementById('message-box').appendChild(toAppend)\n        toAppend.innerHTML ='\u003cdiv class=\"media\"\u003e'+\n                        '\u003cimg class=\"d-flex mr-3 rounded-circle\" src=\"http://placehold.it/45x45\" alt=\"\"\u003e'+\n                        '\u003cdiv class=\"media-body\"\u003e'+\n                          `\u003cstrong\u003e${data.name}\u003c/strong\u003e posted a new message `+\n                          `\u003cem\u003e${data.message}\u003c/em\u003e.`+\n                          `\u003cdiv class=\"text-muted smaller\"\u003eToday at ${date.getHours()} : ${date.getMinutes()}\u003c/div\u003e`+\n                        '\u003c/div\u003e'+\n                      '\u003c/div\u003e'\n                      \n        message.innerText = parseInt(message.innerText)+1\n      });\n    });\n```\n\nAs we did before, here bind to the `sent` event and listen for updates from Pusher, whenever there is an update, we display it on the admin dashboard.\n\nLastly, open the `./static/js/customer.js` file and paste in this code:\n\n``` javascript\n    $(document).ready(function(){\n      var dataTable = $(\"#dataTable\").DataTable()\n      var customerChannel = pusher.subscribe('customer');\n      customerChannel.bind('add', function(data) {\n      var date = new Date();\n      dataTable.row.add([\n          data.name,\n          data.position,\n          data.office,\n          data.age,\n          `${date.getFullYear()}/${date.getMonth()}/${date.getDay()}`,\n          data.salary\n        ]).draw( false );\n      });\n    });\n```\n\nIn the above code, we subscribe to the `customer` channel and bind to the `add` event so that we can update the dashboard in realtime whenever a new customer is registered.\n\nWe are done building! We can run the application using this command:\n\n```\n    $ flask run\n```\n\nNow if we visit [127.0.0.1:5000](http://127.0.0.1:5000/) and [127.0.0.1:5000/dashboard](http://127.0.0.1:5000/dashboard) we should see our app:\n\n![python-dashboard-demo](//images.ctfassets.net/1es3ne0caaid/6N7rpxs4F2AuUQwm0Aaei8/cd699276cbafba8bcdb9d1c4e30eb582/python-dashboard-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have learned how to build a Python Flask project from the scratch and inplement realtime functionality using Pusher and JavaScript. The entire code for this tutorial is available on [GitHub.](https://github.com/neoighodaro/pusher-python-realtime-dashboard)","metaTitle":"Build a live dashboard with Python","metaDescription":"This short tutorial shows how to create a simple dashboard, supported by a backend built with Flask. The dashboard displays new data and messages in realtime, using graphs and tables."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1Uu3pPdHlSYmsksQ6WSowE","type":"Entry","createdAt":"2018-07-02T13:19:07.613Z","updatedAt":"2018-07-02T13:19:07.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a Kotlin ride sharing app with push notifications","url":"kotlin-ride-sharing-push-notifications","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/pusher-ridesharing","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-06-29","description":"Build a full ridesharing platform featuring realtime updates and push notifications. Use Kotlin for both the apps, and the backed, along with Spring Boot.","prerequisite":"You need suitable IDEs, including Android Studio. The tutorial assumes you have some experience with Android development.","content":"## Introduction\n\nMany user facing applications can be greatly improved by introducing realtime notifications for the user. This is especially important when the user is actively waiting for a service to arrive. \n\nIn this article we are going to build a ride sharing app. There are two parts to this app, both of which will take advantage of the Pusher Beams functionality. \n\nOn the Driver side, we will have an Android application that receives a notification when a new job comes up, when the job is no longer available and when the job has finished with the rating from the rider.\n\nOn the Rider side, we will also have an Android application that allows the user to request a car from their current location to a target location, gives regular notifications when the car is en-route to pick up and gives the ability to rate the driver when the ride is finished.\n\n![kotlin-ridesharing-demo](//images.ctfassets.net/1es3ne0caaid/6RBtbLD3JCimAcaw48UMqq/2da3756854a334305b1c4bc8786e8d03/kotlin-ridesharing-demo.gif)\n\n## Prerequisites\n\nIn order to follow along, you will need some experience with the Kotlin programming language, which we are going to use for both the backend and frontend of our application. \n\nYou will also need appropriate IDEs. We suggest [IntelliJ IDEA](https://www.jetbrains.com/idea/) and [Android Studio](https://developer.android.com/studio/index.html). Finally, you will need a free [Pusher Account](https://dash.pusher.com/authenticate/register?ref=pn-landing-page). Sign up now if you haven’t already done so.\n\nIt is also assumed that you know how to use the IDEs that you are working with, including interacting with either an emulated or physical mobile device for running the applications.\n\n## Setting up your Pusher account\n\nIn order to use the Beams API and SDKs from Pusher, you need to create a new Beams instance in the [Pusher Beta Dashboard](https://dash.pusher.com/authenticate/register?ref=pn-social-network-android).\n\nNext, on your **Overview** for your Beams instance, click **Open Quickstart** to add your Firebase Cloud Messaging (FCM) Server Key to the Beams Instance. \n\nAfter saving your FCM key, you can finish the Quickstart wizard by yourself to send your first push notification, or just continue as we’ll cover this below.\n\nIt’s important to make sure that you download and keep the `google-services.json` file from the Firebase Console as we are going to need this later on. \n\nOnce you have created your Beams instance, you will also need to note down your **Instance Id** and **Secret Key** from the Pusher Dashboard, found under the **CREDENTIALS** section of your Instance settings.\n\n## Overall architecture\n\nOur overall application will have two Android applications, and a backend application that orchestrates between them. The Rider application will send a message to the backend in order to request a ride. This will contain the start location. The backend will then broadcast out to all of the drivers that a new job is available. Once one of the drivers accepts the job, the rider is then notified of this fact and is kept informed of the car’s location until it turns up. At the same time, the other drivers are all notified that the job is no longer available.\n\nAt the other end of the journey, the driver will indicate that the job is finished. At this point, they will be able to collect a new job if they wish.\n\n## Backend application\n\nWe are going to build our backend application using Spring Boot and the Kotlin programming language, since this gives us a very simple way to get going whilst still working in the same language as the Android applications will be built.\n\nHead over to https://start.spring.io/ to create our project structure. We need to specify that we are building a **Gradle** project with **Kotlin** and Spring Boot **2.0.1** (or newer if available at the time of reading), and we need to include the “Web” component:\n\n![kotling-ridesharing-spring-initializer](//images.ctfassets.net/1es3ne0caaid/6AKZhv4Ns482MAi0WwGQa2/8cea4b3bac5645ccf5fde687f215540a/kotling-ridesharing-spring-initializer.png)\n\nThe **Generate Project** button will give you a zip file containing our application structure. Unpack this somewhere. At any time, you can execute `./gradlew bootRun` to build and start your backend server running.\n\nFirstly though, we need to add some dependencies. Open up the `build.gradle` file and add the following to the `dependencies` section:\n\n```\n    compile 'com.pusher:push-notifications-server-java:0.9.0'\n    runtime 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.2'\n```\n\nThe first of these is the Pusher library needed for triggering push notifications. The second is the Jackson module needed for serializing and deserializing Kotlin classes into JSON.\n\nNow, build the project. This will ensure that all of the dependencies are downloaded and made available and that everything compiles and builds correctly:\n\n```\n    $ ./gradlew build\n    Starting a Gradle Daemon (subsequent builds will be faster)\n    \n    \u003e Task :test\n    2018-04-27 07:34:27.548  INFO 43169 --- [       Thread-5] o.s.w.c.s.GenericWebApplicationContext   :   \n    Closing org.springframework.web.context.support.GenericWebApplicationContext@c1cf60f: startup date [Fri \n    Apr   27 07:34:25 BST 2018]; root of context hierarchy\n    \n    \n    BUILD SUCCESSFUL in 17s\n    5 actionable tasks: 5 executed\n```\n\n### Broadcasting events\n\nThe sole point of the backend application is to broadcast push notifications via the Pusher Beams service in response to incoming HTTP calls.\n\nWe have a few different endpoints that we want to handle, each of which will broadcast their own particular events:\n\n\n- POST /request-ride\n- POST /accept-job/{job}\n- POST /update-location/{job}\n- POST /pickup/{job}\n- POST /dropoff/{job}\n\nOut of these, the first one is used by the riders application whilst the others are all used by the drivers application. There is also a strict workflow between these. The very first one will generate a new job, with a unique ID that will be passed between all of the other requests and which will be used as the intent of the push notification to ensure that only the correct rider gets the messages.\n\nThe workflow is going to be:\n\n\n- Rider makes a call to `/request-ride` supplying their current location, and gets a Job ID back.\n- All currently active drivers are sent a push notification informing them of the job.\n- Driver makes a call to `/accept-job/{job}`, supplying their current location. This causes the rider to be notified that a driver has accepted the job, and where the driver is, and also causes all the other drivers to remove the job from their list.\n- Driver makes frequent calls to `/update-location/{job}` with their current location. This causes the rider to be notified of where the driver is now.\n- Driver makes a call to `/pickup/{job}` with their current location. This informs the rider that their ride is waiting for them.\n- Driver makes frequent calls to `/update-location/{job}` with their current location. This causes the rider to be notified of where the driver is now.\n- Driver makes a call to `/dropoff/{job}` with their current location. This informs the rider that their ride is over.\n\nThe first thing we need is some way to represent a location in the world. All of our endpoints will use this as their payload. Create a new class called `Location`:\n\n``` kotlin\n    data class Location(\n            val latitude: Double,\n            val longitude: Double\n    )\n```\n\nWe also need an enumeration of the actions that can be performed. Create a new class called `Actions`:\n\n``` kotlin\n    enum class Actions {\n        NEW_JOB,\n        ACCEPT_JOB,\n        ACCEPTED_JOB,\n        UPDATE_LOCATION,\n        PICKUP,\n        DROPOFF\n    }\n```\n\nNow we can create our mechanism to send out Pusher Beams notifications to the relevant clients. There are two different kinda of notification to send - one with a location and one with a rating. Create a new class called `JobNotifier`:\n\n``` kotlin\n    @Component\n    class JobNotifier(\n            @Value(\"\\${pusher.instanceId}\") private val instanceId: String,\n            @Value(\"\\${pusher.secretKey}\") private val secretKey: String\n    ) {\n        private val pusher = PushNotifications(instanceId, secretKey)\n    \n        fun notify(job: String, action: Actions, location: Location) {\n            val interests = when (action) {\n                Actions.NEW_JOB -\u003e listOf(\"driver_broadcast\")\n                Actions.ACCEPTED_JOB -\u003e listOf(\"driver_broadcast\")\n                else -\u003e listOf(\"rider_$job\")\n            }\n    \n            pusher.publish(\n                    interests,\n                    mapOf(\n                            \"fcm\" to mapOf(\n                                    \"data\" to mapOf(\n                                            \"action\" to action.name,\n                                            \"job\" to job,\n                                            \"latitude\" to location.latitude.toString(),\n                                            \"longitude\" to location.longitude.toString()\n                                    )\n                            )\n                    )\n            )\n        }\n    }\n```\n\n\u003e **Note:** If the data sent in a notification contains anything that is not a string then the Android client will silently fail to receive the notification.\n\nThis will send notifications with one of two interest sets. `driver_broadcast` will be received by all drivers that are not currently on a job, and `driver_$job` will be received by the driver currently on that job.\n\nYou will also need to add to the `application.properties` file the credentials needed to access the Pusher Beams API:\n\n```\n    pusher.instanceId=\u003cPUSHER_INSTANCE_ID\u003e\n    pusher.secretKey=\u003cPUSHER_SECRET_KEY\u003e\n```\n\nFinally we need a controller to actually handle the incoming HTTP Requests and trigger the notifications. Create a new class called `RideController`:\n\n``` kotlin\n    @RestController\n    class RideController(\n            private val jobNotifier: JobNotifier\n    ) {\n        @RequestMapping(value = [\"/request-ride\"], method = [RequestMethod.POST])\n        @ResponseStatus(HttpStatus.CREATED)\n        fun requestRide(@RequestBody location: Location): String {\n            val job = UUID.randomUUID().toString()\n            jobNotifier.notify(job, Actions.NEW_JOB, location)\n            return job\n        }\n    \n        @RequestMapping(value = [\"/accept-job/{job}\"], method = [RequestMethod.POST])\n        @ResponseStatus(HttpStatus.NO_CONTENT)\n        fun acceptJob(@PathVariable(\"job\") job: String, @RequestBody location: Location) {\n            jobNotifier.notify(job, Actions.ACCEPT_JOB, location)\n            jobNotifier.notify(job, Actions.ACCEPTED_JOB, location)\n        }\n    \n        @RequestMapping(value = [\"/update-location/{job}\"], method = [RequestMethod.POST])\n        @ResponseStatus(HttpStatus.NO_CONTENT)\n        fun updateLocation(@PathVariable(\"job\") job: String, @RequestBody location: Location) {\n            jobNotifier.notify(job, Actions.UPDATE_LOCATION, location)\n        }\n    \n        @RequestMapping(value = [\"/pickup/{job}\"], method = [RequestMethod.POST])\n        @ResponseStatus(HttpStatus.NO_CONTENT)\n        fun pickup(@PathVariable(\"job\") job: String, @RequestBody location: Location) {\n            jobNotifier.notify(job, Actions.PICKUP, location)\n        }\n    \n        @RequestMapping(value = [\"/dropoff/{job}\"], method = [RequestMethod.POST])\n        @ResponseStatus(HttpStatus.NO_CONTENT)\n        fun dropoff(@PathVariable(\"job\") job: String, @RequestBody location: Location) {\n            jobNotifier.notify(job, Actions.DROPOFF, location)\n        }\n    }\n```\n\nEvery method simply triggers one notification and returns. The handler for `/request-ride` will generate a new UUID as the job ID and will return it to the rider - the drivers will get the job ID in the appropriate push notification if they receive it.\n\n\n## Building the Riders application\n\nThe Rider Android application will also be built in Kotlin, using Android Studio. To start, open up Android Studio and create a new project, entering some appropriate details and ensuring that you select the **Include Kotlin support** option. Note that the **Package name** must match that specified when you set up the FCM Server Key earlier.\n\n![kotlin-ridesharing-create-android-1](//images.ctfassets.net/1es3ne0caaid/FFEGiryVUISEmkKyOw42m/a6bdd550b0fb08242777615db2fca334/kotlin-ridesharing-create-android-1.png)\n\nThen on the next screen, ensure that you select support for **Phone and Tablet** using at least API 23:\n\n![kotlin-ridesharing-create-android-2](//images.ctfassets.net/1es3ne0caaid/24ia023ilW2Y6mOWWq2UOi/dafa778be6315f117728af82a859773c/kotlin-ridesharing-create-android-2.png)\n\nEnsure that an **Google Maps Activity** is selected:\n\n![kotlin-ridesharing-create-android-3](//images.ctfassets.net/1es3ne0caaid/5SFxdcyCZOQUGQAwqsq2CO/bf06d5cbc06603b59ff1ec90265b893c/kotlin-ridesharing-create-android-3.png)\n\nAnd set the **Activity Name** to “MainActivity” and **Layout Name** to “activity_main”:\n\n![kotlin-ridesharing-create-android-4](//images.ctfassets.net/1es3ne0caaid/75OUKAuKmAWAGA0Os0syKw/ad6ee82a18d0230b55e5b1466c632c6d/kotlin-ridesharing-create-android-4.png)\n\nOnce the project opens, you will be presented with the file `google_maps_api.xml` with instructions on how to get a Google Maps API key. Follow these instructions to get a key to use in the application.\n\nNext we need to add some dependencies to our project to support Pusher. Add the following to the project level `build.gradle`, in the existing `dependencies` section:\n\n``` gradle\n    classpath 'com.google.gms:google-services:3.2.1'\n```\n\nThen add the following to the `dependencies` section of the app level `build.gradle`:\n\n``` gradle\n    implementation 'com.google.firebase:firebase-messaging:15.0.0'\n    implementation 'com.pusher:push-notifications-android:0.10.0'\n    \n    compile 'com.loopj.android:android-async-http:1.4.9'\n    compile 'com.google.code.gson:gson:2.2.4'\n```\n\nAnd this to bottom of the app level `build.gradle`:\n\n``` gradle\n    apply plugin: 'com.google.gms.google-services'\n```\n\nNext, copy the `google-services.json` file we downloaded earlier into the `app` directory under your project. We are now ready to actually develop our specific application using these dependencies.\n\nFinally, we need to add some permissions to our application. Open up the `AndroidManifest.xml` file and add the following immediately before the `\u003capplication\u003e` tag:\n\n``` xml\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\nAt this point we can run the application and it will display a map.\n\n\n\u003e **Note:** If you are running this on an emulator then you need to ensure that the emulator is correctly capable of working with the Google Maps API. The “Nexus 5X” with “API 28” works correctly.\n\n\n\u003e **Note:** if you get a grey screen instead of a map it likely means that the Google Maps API key is not valid or not present. Follow the instructions in `google_maps_api.xml` to set this up.\n\n### Displaying the current location\n\nThe first thing we want to be able to do is display our current location on the map. This involves requesting permission from the user to determine their location - which we need to know where our ride should pick us up - and then updating the map to display this. All of this is added to the existing MainActivity.\n\nFirstly, update the `onMapReady` function as follows:\n\n``` kotlin\n    override fun onMapReady(googleMap: GoogleMap) {\n        mMap = googleMap\n        mMap.isMyLocationEnabled = true\n        mMap.isTrafficEnabled = true\n    }\n```\n\nThis simply updates the map to show the **My Location** and **Traffic** layers. \n\nNext, add a new method called `setupMap` as follows:\n\n``` kotlin\n    private fun setupMap() {\n        val mapFragment = supportFragmentManager\n                .findFragmentById(R.id.map) as SupportMapFragment\n        mapFragment.getMapAsync(this)\n    }\n```\n\nThis is the code that is currently in `onCreate`, but which we will be removing soon.\n\nNext, add a new top-level field to the class called `REQUEST_LOCATION_PERMISSIONS`:\n\n``` kotlin\n    private val REQUEST_LOCATION_PERMISSIONS = 1001\n```\n\nThis is used so that we know in the callback from requesting permissions which call it was - so that an appropriate response can happen.\n\nNext, another new method called `onRequestPermissionsResult`:\n\n``` kotlin\n    override fun onRequestPermissionsResult(requestCode: Int,\n                                            permissions: Array\u003cout String\u003e,\n                                            grantResults: IntArray) {\n        if (requestCode == REQUEST_LOCATION_PERMISSIONS) {\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                setupMap()\n            } else {\n                Toast.makeText(this, \"Location Permission Denied\", Toast.LENGTH_SHORT)\n                        .show();\n            }\n        } else {\n            super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n        }\n    }\n```\n\nThis is a standard method defined in the `FragmentActivity` base class that we are extending for our specific case. If the user grants us permission then we move on to our `setupMap` method we’ve just defined, and if they deny us then we show a message and stop there.\n\nNext, a new method called `checkLocationPermissions` to actually check if we’ve got permission for accessing the users location already, and if not to request them:\n\n``` kotlin\n    private fun checkLocationPermissions() {\n        if (checkSelfPermission(android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n            requestPermissions(arrayOf(android.Manifest.permission.ACCESS_FINE_LOCATION), REQUEST_LOCATION_PERMISSIONS)\n            return\n        }\n        setupMap()\n    }\n```\n\nFinally we update the `onCreate` method as follows:\n\n``` kotlin\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n    \n        checkLocationPermissions()\n    }\n```\n\nThis starts the whole chain off. When the main activity is first created, we check if we have permission to access the users location. If not we request permission. Then, once permission is granted, we use this fact to allow the user to see where they are on the map.\n\n### Requesting a ride\n\nOnce we know where the user is, we can allow them to request a ride. This will be done by adding a button to the map that they can click on in order to request their ride, which will then send their current location to our backend.\n\nFirstly, lets add our button to the map. Find and update `activity_main.xml` as follows:\n\n``` xml\n    \u003cfragment xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:map=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:id=\"@+id/map\"\n        android:name=\"com.google.android.gms.maps.SupportMapFragment\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\"com.pusher.pushnotify.ride.MainActivity\"\u003e\n    \n        \u003cButton\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"right|bottom\"\n            android:id=\"@+id/request_ride\"\n            android:text=\"Request Ride\"\n            android:padding=\"10dp\"\n            android:layout_marginTop=\"20dp\"\n            android:paddingRight=\"10dp\"\n            android:enabled=\"false\"\n            android:onClick=\"requestRide\" /\u003e\n    \n    \u003c/fragment\u003e\n```\n\n\u003e **Note:** the value for “tools:context” should match the class name of your main activity class.\n\nMost of this was already present. We are adding the `Button` element inside the `fragment` that was already there.\n\nNext we want to only have this button enabled when we have the location of the user. For this we are going to rely on the Map component telling us when it has got the users location. Update the `onMapReady` method of `MainActivity`  and add this in to the bottom:\n\n``` kotlin\n    mMap.setOnMyLocationChangeListener {\n        findViewById\u003cButton\u003e(R.id.request_ride).isEnabled = true\n    }\n```\n\nWe’re also going to create a new helper method to display a Toast message to the user:\n\n``` kotlin\n    private fun displayMessage(message: String) {\n        Toast.makeText(\n                this,\n                message,\n                Toast.LENGTH_SHORT).show();\n    \n    }\n```\n\nFinally, we will add the `requestRide` method that is triggered when the button is clicked. For now this is as follows:\n\n``` kotlin\n    fun requestRide(view: View) {\n        val location = mMap.myLocation\n    \n        val request = JSONObject(mapOf(\n                \"latitude\" to location.latitude,\n                \"longitude\" to location.longitude\n        ))\n        mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(LatLng(location.latitude, location.longitude), 15.0f))\n    \n        val client = AsyncHttpClient()\n        client.post(applicationContext, \"http://10.0.2.2:8080/request-ride\", StringEntity(request.toString()),\n                \"application/json\", object : TextHttpResponseHandler() {\n    \n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String) {\n                runOnUiThread {\n                    displayMessage(\"Your ride has been requested\")\n                    findViewById\u003cButton\u003e(R.id.request_ride).visibility = View.INVISIBLE\n                }\n            }\n    \n            override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String, throwable: Throwable) {\n                runOnUiThread {\n                    displayMessage(\"An error occurred requesting your ride\")\n                }\n            }\n        });\n    }\n```\n\n\u003e **Note:** The import for `Header` may be ambiguous. Ensure that you select `cz.msebera.android.httpclient.Header`\n\n\n\u003e **Note:** The IP Address “10.0.2.2” is what the Android emulator sees the host machine as. You will want to change this to the real address of the server if you are running this for real.\n\nThis builds our JSON message and sends it to the */request-ride* endpoint that we built earlier. That in turn will broadcast out to all potential drivers that there is a new job. We then display a message to the rider that their ride has been requested, or else an error if we failed to request the ride. We also hide the **Request Ride** button when we have successfully requested a ride, so that we can’t request more than one at a time.\n\n### Receiving push notifications\n\nThe other major feature we need in the riders app is to be able to receive updates from the driver. This includes when a driver has accepted the job, where he is, and when he is ready to pick up or drop off the rider.\n\nAll of these notifications work in very similar manner, containing the location of the driver and the action to perform. We want to always update our map to show the position of the driver, and in many cases to display a message to the rider informing them as to what is going on.\n\nFirstly, we need to register with the Pusher Beams service to be able to receive push notifications. Add the following to the `onCreate` method of `MainActivity`:\n\n``` kotlin\n    PushNotifications.start(getApplicationContext(), \"YOUR_INSTANCE_ID\");\n```\n\nWhere “YOUR_INSTANCE_ID” is replaced with the value received from the Pusher Beams registration process, and must match the value used in the backend application.\n\nNext we want to actually register to receive notifications from the backend. This is done by updating the `o``nSuccess` method inside the `requestRide` method of `MainActivity` as follows:\n\n``` kotlin\n    override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String) {\n        PushNotifications.subscribe(\"rider_$responseString\")\n        runOnUiThread {\n            displayMessage(\"Your ride has been requested\")\n            findViewById\u003cButton\u003e(R.id.request_ride).visibility = INVISIBLE\n        }\n    }\n```\n\nThis builds an interest string that contains the job ID that we were provided, meaning that we will now receive all rider-focused notifications for this job.\n\nThe only thing remaining is to actually handle the notifications. This involves displaying where on the map the driver currently is, and potentially displaying an update message to the rider.\n\nFirstly, add a new field to the `MainAction` class to store the marker for the drivers location:\n\n``` kotlin\n    private var driverMarker: Marker? = null\n```\n\nThis defaults to `null` until we actually first get a location.\n\nNext, add a new method called update`DriverLocation`  in the `MainActivity` class to set the location of the driver, creating the marker if needed:\n\n``` kotlin\n    private fun updateDriverLocation(latitude: Double, longitude: Double) {\n        val location = LatLng(latitude, longitude)\n    \n        if (driverMarker == null) {\n            driverMarker = mMap.addMarker(MarkerOptions()\n                    .title(\"Driver Location\")\n                    .position(location)\n            )\n        } else {\n            driverMarker?.position = location\n        }\n    \n        mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(location, 17.0f))\n    }\n```\n\nFinally, add the necessary handler to receive the push notifications and react accordingly. For this, create a new method called `onResume` in the `MainActivity` class as follows:\n\n``` kotlin\n    override fun onResume() {\n        super.onResume()\n    \n        PushNotifications.setOnMessageReceivedListenerForVisibleActivity(this, object : PushNotificationReceivedListener {\n            override fun onMessageReceived(remoteMessage: RemoteMessage) {\n                val action = remoteMessage.data[\"action\"]\n    \n                runOnUiThread {\n                    updateDriverLocation(remoteMessage.data[\"latitude\"]!!.toDouble(), remoteMessage.data[\"longitude\"]!!.toDouble())\n    \n                    if (action == \"ACCEPT_JOB\") {\n                        displayMessage(\"Your ride request has been accepted. Your driver is on their way.\")\n                    } else if (action == \"PICKUP\") {\n                        displayMessage(\"Your driver has arrived and is waiting for you.\")\n                    } else if (action == \"DROPOFF\") {\n                        displayMessage(\"You are at your destination\")\n                        findViewById\u003cButton\u003e(R.id.request_ride).visibility = View.VISIBLE\n                    }\n                }\n            }\n        })\n    }\n```\n\nThis will call our new method to update the location of the driver on the map, and for selected actions will display a message informing the rider of what is happening. We also re-display the **Request Ride** button when the drop-off action occurs, so that the rider can use the app again if needed.\n\nThis completes the riders side of the application, allowing them to do everything they need to for the ride:\n\n![kotlin-ridesharing-rider-app-demo](//images.ctfassets.net/1es3ne0caaid/SOL4YBv2ACiYYsiIcqmmq/18f4c3ab3ed6ba4a38e7fbb2adbce3ce/kotlin-ridesharing-rider-app-demo.gif)\n\n## Building the drivers application\n\nThe driver Android application will also be built in Kotlin, using Android Studio. To start, open up Android Studio and create a new project, entering some appropriate details and ensuring that you select the **Include Kotlin support** option. Note that the **Package name** must match that specified when you set up the FCM Server Key earlier.\n\n\n\u003e **Note:** these instructions are almost exactly the same as for the riders app, but are repeated here for ease of following along.\n\n![kotlin-ridesharing-create-android-5](//images.ctfassets.net/1es3ne0caaid/4ENZLhc0gEEk4o6oMiOAu4/3889f9e1f12b21c658e43ba1c4ca23b9/kotlin-ridesharing-create-android-5.png)\n\nThen on the next screen, ensure that you select support for **Phone and Tablet** using at least API 23:\n\n![kotlin-ridesharing-create-android-6](//images.ctfassets.net/1es3ne0caaid/6qL0f20xtCmmeWgGoWyMuU/e312d878f160a17ebc9a652fd518a23d/kotlin-ridesharing-create-android-6.png)\n\nEnsure that an **Google Maps Activity** is selected:\n\n![kotlin-ridesharing-create-android-7](//images.ctfassets.net/1es3ne0caaid/6f2xDO0sTu6AOoguysgYG6/0df9b3e7bf31f00431f60e70f353db1f/kotlin-ridesharing-create-android-7.png)\n\nAnd set the **Activity Name** to “MainActivity” and **Layout Name** to “activity_main”:\n\n![kotlin-ridesharing-create-android-8](//images.ctfassets.net/1es3ne0caaid/5S47nZ7IB2MgMgKOGISOSG/d161c98f9106daa326bff0d8f56e7815/kotlin-ridesharing-create-android-8.png)\n\nOnce the project opens, you will be presented with the file `google_maps_api.xml` with instructions on how to get a Google Maps API key. Follow these instructions to get a key to use in the application. This can not be the same key as for the rider application since they are tied to the actual Android application that is using it. It should belong to the same Google project however.\n\nNext we need to add some dependencies to our project to support Pusher. Add the following to the project level `build.gradle`, in the existing `dependencies` section:\n\n``` gradle\n    classpath 'com.google.gms:google-services:3.2.1'\n```\n\nThen add the following to the `dependencies` section of the app level `build.gradle`:\n\n``` gradle\n    implementation 'com.google.firebase:firebase-messaging:15.0.0'\n    implementation 'com.pusher:push-notifications-android:0.10.0'\n    \n    compile 'com.loopj.android:android-async-http:1.4.9'\n    compile 'com.google.code.gson:gson:2.2.4'\n```\n\nAnd this to bottom of the app level `build.gradle`:\n\n``` gradle\n    apply plugin: 'com.google.gms.google-services'\n```\n\nNext, copy the `google-services.json` file we downloaded earlier into the `app` directory under your project. We are now ready to actually develop our specific application using these dependencies.\n\nFinally, we need to add some permissions to our application. Open up the `AndroidManifest.xml` file and add the following immediately before the `\u003capplication\u003e` tag:\n\n``` xml\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\nAt this point we can run the application and it will display a map.\n\n\n\u003e **Note:** If you are running this on an emulator then you need to ensure that the emulator is correctly capable of working with the Google Maps API. The “Nexus 5X” with “API 28” works correctly.\n\n\n\u003e **Note:** if you get a grey screen instead of a map it likely means that the Google Maps API key is not valid or not present. Follow the instructions in `google_maps_api.xml` to set this up.\n\n### Displaying the current location\n\nThe first thing we want to be able to do is display our current location on the map. This involves requesting permission from the user to determine their location - which we need to know where our ride should pick us up - and then updating the map to display this. All of this is added to the existing MainActivity.\n\n\n\u003e **Note:** this is all exactly the same as for the riders application, but is repeated here for ease of following along.\n\nFirstly, update the `onMapReady` function as follows:\n\n``` kotlin\n    override fun onMapReady(googleMap: GoogleMap) {\n        mMap = googleMap\n        mMap.isMyLocationEnabled = true\n        mMap.isTrafficEnabled = true\n    }\n```\n\nThis simply updates the map to show the **My Location** and **Traffic** layers. \n\nNext, add a new method called `setupMap` as follows:\n\n``` kotlin\n    private fun setupMap() {\n        val mapFragment = supportFragmentManager\n                .findFragmentById(R.id.map) as SupportMapFragment\n        mapFragment.getMapAsync(this)\n    }\n```\n\nThis is the code that is currently in `onCreate`, but which we will be removing soon.\n\nNext, add a new top-level field to the class called `REQUEST_LOCATION_PERMISSIONS`:\n\n``` kotlin\n    private val REQUEST_LOCATION_PERMISSIONS = 1001\n```\n\nThis is used so that we know in the callback from requesting permissions which call it was - so that an appropriate response can happen.\n\nNext, another new method called `onRequestPermissionsResult`:\n\n``` kotlin\n    override fun onRequestPermissionsResult(requestCode: Int,\n                                            permissions: Array\u003cout String\u003e,\n                                            grantResults: IntArray) {\n        if (requestCode == REQUEST_LOCATION_PERMISSIONS) {\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                setupMap()\n            } else {\n                Toast.makeText(this, \"Location Permission Denied\", Toast.LENGTH_SHORT)\n                        .show();\n            }\n        } else {\n            super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n        }\n    }\n```\n\nThis is a standard method defined in the `FragmentActivity` base class that we are extending for our specific case. If the user grants us permission then we move on to our `setupMap` method we’ve just defined, and if they deny us then we show a message and stop there.\n\nNext, a new method called `checkLocationPermissions` to actually check if we’ve got permission for accessing the users location already, and if not to request them:\n\n``` kotlin\n    private fun checkLocationPermissions() {\n        if (checkSelfPermission(android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n            requestPermissions(arrayOf(android.Manifest.permission.ACCESS_FINE_LOCATION), REQUEST_LOCATION_PERMISSIONS)\n            return\n        }\n        setupMap()\n    }\n```\n\nFinally we update the `onCreate` method as follows:\n\n``` kotlin\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n    \n        checkLocationPermissions()\n    }\n```\n\nThis starts the whole chain off. When the main activity is first created, we check if we have permission to access the users location. If not we request permission. Then, once permission is granted, we use this fact to allow the user to see where they are on the map.\n\n### Receive notifications of new jobs\n\nNow that we can show the driver where they are on the map, we want to show them where the potential riders are and allow them to accept a job.\n\nFirstly, we need to register with the Pusher Beams service to be able to receive push notifications, and then subscribe to the `driver_broadcast` interest to be told about the jobs. Add the following to the `onCreate` method of `MainActivity`:\n\n``` kotlin\n    PushNotifications.start(getApplicationContext(), \"YOUR_INSTANCE_ID\");\n    PushNotifications.subscribe(\"driver_broadcast\")\n```\n\nWhere “YOUR_INSTANCE_ID” is replaced with the value received from the Pusher Beams registration process, and must match the value used in the backend application.\n\nNext, add a method to display a message to the user when we need to inform them of something. Create the method `displayMessage` in the `MainActivity` class as follows:\n\n``` kotlin\n    private fun displayMessage(message: String) {\n        Toast.makeText(\n                this,\n                message,\n                Toast.LENGTH_SHORT).show();\n    }\n```\n\nNext, add a new top level field into the `MainActivity` class to store the markers that we are placing:\n\n``` kotlin\n    private val markers = mutableMapOf\u003cString, Marker\u003e()\n```\n\nNext, we add a listener so that when we are notified about a job we can place a pin on the map showing where the rider is. For this, add a new `onResume` method to the `MainActivity` class as follows:\n\n``` kotlin\n    override fun onResume() {\n        super.onResume()\n    \n        PushNotifications.setOnMessageReceivedListenerForVisibleActivity(this, object : PushNotificationReceivedListener {\n            override fun onMessageReceived(remoteMessage: RemoteMessage) {\n                val action = remoteMessage.data[\"action\"]\n    \n                runOnUiThread {\n                    if (action == \"NEW_JOB\") {\n                        val jobId = remoteMessage.data[\"job\"]!!\n                        val location = LatLng(remoteMessage.data[\"latitude\"]!!.toDouble(), remoteMessage.data[\"longitude\"]!!.toDouble())\n    \n                        val marker = mMap.addMarker(MarkerOptions()\n                                .position(location)\n                                .title(\"New job\"))\n                        marker.tag = jobId\n                        markers[jobId] = marker\n    \n                        displayMessage(\"A new job is available\")\n                    }\n                }\n            }\n        })\n    }\n```\n\nWe are setting the `tag` on the marker to the ID of the job that has turned up. This will be used next to allow the driver to accept the job. We are also storing the marker in a map so that we can look it up later by ID.\n\n### Accepting a job\n\nAccepting a job is going to be done by clicking on a marker. Once done, the app will send a message to the backend to accept the job, and will start sending regular messages with the drivers location. It will also allow for a **Pickup** and **Dropoff** button to be displayed for the driver to click as appropriate.\n\nFirstly, add a new top-level field to the `MainActivity` class to store the ID of the current job:\n\n``` kotlin\n    private var currentJob: String? = null\n```\n\nNext, update the `onMapReady` method to add a handler for clicking on a marker. This will send the HTTP request to our backend to accept the job, and record the fact in the application that this is now the current job.\n\n``` kotlin\n    mMap.setOnMarkerClickListener { marker -\u003e\n        if (currentJob != null) {\n            runOnUiThread {\n                displayMessage(\"You are already on a job!\")\n            }\n        } else {\n    \n            val jobId = marker.tag\n    \n            val location = mMap.myLocation\n    \n            val request = JSONObject(mapOf(\n                    \"latitude\" to location.latitude,\n                    \"longitude\" to location.longitude\n            ))\n    \n            val client = AsyncHttpClient()\n            client.post(applicationContext, \"http://10.0.2.2:8080/accept-job/$jobId\", StringEntity(request.toString()),\n                    \"application/json\", object : TextHttpResponseHandler() {\n    \n                override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String) {\n                    runOnUiThread {\n                        displayMessage(\"You have accepted this job\")\n                        currentJob = jobId as String\n                    }\n                }\n    \n                override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String, throwable: Throwable) {\n                    runOnUiThread {\n                        displayMessage(\"An error occurred accepting this job\")\n                    }\n                }\n            });\n        }\n        \n        true\n    }\n```\n\n\u003e **Note:** The import for `Header` may be ambiguous. Ensure that you select `cz.msebera.android.httpclient.Header`\n\n### Removing old jobs from the map\n\nWe also want to tidy up the map when a job is accepted, removing markers from every drivers map - including the driver that accepted the job - but adding a new one in a different colour back to the local drivers map.\n\nFirstly, add another new field to the `MainActivity` class for the marker of the job we are currently on: \n\n``` kotlin\n    private var currentJobMarker: Marker? = null\n```\n\nNext, update the `onMessageReceived` callback inside the `onResume` method of `MainActivity` as follows:\n\n``` kotlin\n    override fun onMessageReceived(remoteMessage: RemoteMessage) {\n        val action = remoteMessage.data[\"action\"]\n    \n        runOnUiThread {\n            if (action == \"NEW_JOB\") {\n                val jobId = remoteMessage.data[\"job\"]!!\n                val location = LatLng(remoteMessage.data[\"latitude\"]!!.toDouble(), remoteMessage.data[\"longitude\"]!!.toDouble())\n    \n                val marker = mMap.addMarker(MarkerOptions()\n                        .position(location)\n                        .title(\"New job\"))\n                marker.tag = jobId\n                markers[jobId] = marker\n    \n                displayMessage(\"A new job is available\")\n            } else if (action == \"ACCEPTED_JOB\") {\n                val jobId = remoteMessage.data[\"job\"]!!\n                val location = LatLng(remoteMessage.data[\"latitude\"]!!.toDouble(), remoteMessage.data[\"longitude\"]!!.toDouble())\n    \n                markers[jobId]?.remove()\n                markers.remove(jobId)\n            }\n        }\n    }\n```\n\nHere we are adding the block to handle the `ACCEPTED_JOB` event alongside the `NEW_JOB` event. This is broadcast out to every driver when any driver accepts a job, and is used to remove the markers indicating a job is waiting for pickup.\n\nFinally, add the following in to the `onSuccess` handler in the `onMapReady` method of `MainActivity`:\n\n``` kotlin\n    val selectedJobMarker = markers[jobId]!!\n    val marker = mMap.addMarker(MarkerOptions()\n            .position(selectedJobMarker.position)\n            .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE))\n            .title(\"Current job\"))\n    marker.tag = jobId\n    \n    currentJobMarker = marker\n```\n\nThis adds a new marker to the map, coloured blue instead of the default red, to indicate the job that we are actively on.\n\n### Picking up and dropping off\n\nIn order to pick up and drop off the rider, we need to add UI controls to support this. We are going to add buttons that appear on the map at appropriate times to allow the driver to indicate that he’s ready for pickup and for dropoff.\n\nFirstly, update `activity_main.xml` as follows to add the buttons:\n\n``` xml\n    \u003cfragment xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:map=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:id=\"@+id/map\"\n        android:name=\"com.google.android.gms.maps.SupportMapFragment\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\"com.pusher.pushnotify.ride.MainActivity\"\u003e\n    \n        \u003cButton\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"right|bottom\"\n            android:id=\"@+id/pickup_ride\"\n            android:text=\"Pickup\"\n            android:padding=\"10dp\"\n            android:layout_marginTop=\"20dp\"\n            android:paddingRight=\"10dp\"\n            android:visibility=\"invisible\"\n            android:onClick=\"pickupRide\" /\u003e\n    \n        \u003cButton\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"right|bottom\"\n            android:id=\"@+id/dropoff_ride\"\n            android:text=\"Dropoff\"\n            android:padding=\"10dp\"\n            android:layout_marginTop=\"20dp\"\n            android:paddingRight=\"10dp\"\n            android:visibility=\"invisible\"\n            android:onClick=\"dropoffRide\" /\u003e\n    \n    \u003c/fragment\u003e\n```\n\nThese buttons are initially invisible, but we will display them as necessary in the application.\n\nNext, update the `onSuccess` method inside of `onMapReady` to ensure the correct buttons are displayed. This should now look like:\n\n``` kotlin\n    override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String) {\n        runOnUiThread {\n            displayMessage(\"You have accepted this job\")\n            currentJob = jobId as String\n            findViewById\u003cButton\u003e(R.id.dropoff_ride).visibility = View.INVISIBLE\n            findViewById\u003cButton\u003e(R.id.pickup_ride).visibility = View.VISIBLE\n        }\n    }\n```\n\nFinally, we add the handlers for these buttons. First the one to pick up the rider. Add a new method called `pickupRide` as follows:\n\n``` kotlin\n    fun pickupRide(view: View) {\n        val location = mMap.myLocation\n    \n        val request = JSONObject(mapOf(\n                \"latitude\" to location.latitude,\n                \"longitude\" to location.longitude\n        ))\n    \n        val client = AsyncHttpClient()\n        client.post(applicationContext, \"http://10.0.2.2:8080/pickup/$currentJob\", StringEntity(request.toString()),\n                \"application/json\", object : TextHttpResponseHandler() {\n    \n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String?) {\n                runOnUiThread {\n                    findViewById\u003cButton\u003e(R.id.dropoff_ride).visibility = View.VISIBLE\n                    findViewById\u003cButton\u003e(R.id.pickup_ride).visibility = View.INVISIBLE\n                    currentJobMarker?.remove()\n                    currentJobMarker = null\n                }\n            }\n    \n            override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String, throwable: Throwable) {\n                runOnUiThread {\n                    displayMessage(\"An error occurred picking up your ride\")\n                }\n            }\n        });\n    }\n```\n\nThis will make the call to the backend, and on success will cause the **Pickup** button to be hidden and the **Dropoff** button to be displayed. It also removes the blue marker for the current job, since we have just picked them up.\n\nNext the handler for dropping off the rider. Add another new method called `dropoffRide` as follows:\n\n``` kotlin\n    fun dropoffRide(view: View) {\n        val location = mMap.myLocation\n    \n        val request = JSONObject(mapOf(\n                \"latitude\" to location.latitude,\n                \"longitude\" to location.longitude\n        ))\n    \n        val client = AsyncHttpClient()\n        client.post(applicationContext, \"http://10.0.2.2:8080/dropoff/$currentJob\", StringEntity(request.toString()),\n                \"application/json\", object : TextHttpResponseHandler() {\n    \n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String?) {\n                runOnUiThread {\n                    findViewById\u003cButton\u003e(R.id.dropoff_ride).visibility = View.INVISIBLE\n                    findViewById\u003cButton\u003e(R.id.pickup_ride).visibility = View.INVISIBLE\n                    currentJob = null\n                }\n            }\n    \n            override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String, throwable: Throwable) {\n                runOnUiThread {\n                    displayMessage(\"An error occurred dropping off your ride\")\n                }\n            }\n        });\n    }\n```\n\n### Sending location updates\n\nThe final thing that we need to do is have the driver application send updates about its location so that the rider can be updated.\n\nThis involves using the phones GPS to get updates every time the phone moves, and sending these updates to the backend - but only if we are currently on a job.\n\nIn order to do this, add the following to the bottom of the `setupMap` method in `MainActivity`. This is used because it’s called already once we know we have permission to get the devices location.\n\n``` kotlin\n    val locationManager = applicationContext.getSystemService(LocationManager::class.java)\n    locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 100, 0.0f, object : LocationListener {\n        override fun onLocationChanged(location: Location) {\n            if (currentJob != null) {\n                val request = JSONObject(mapOf(\n                        \"latitude\" to location.latitude,\n                        \"longitude\" to location.longitude\n                ))\n    \n                val client = AsyncHttpClient()\n                client.post(applicationContext, \"http://10.0.2.2:8080/update-location/$currentJob\", StringEntity(request.toString()),\n                        \"application/json\", object : TextHttpResponseHandler() {\n    \n                    override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String?) {\n                    }\n    \n                    override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String, throwable: Throwable) {\n                    }\n                });\n    \n            }\n        }\n    \n        override fun onStatusChanged(provider: String?, status: Int, extras: Bundle?) {\n    \n        }\n    \n        override fun onProviderEnabled(provider: String?) {\n    \n        }\n    \n        override fun onProviderDisabled(provider: String?) {\n    \n        }\n    }, null)\n```\n\n\u003e **Note:** it’s likely that Android Studio will complain about having not performed the correct permissions checks. This error is actually wrong, except that Android Studio can’t tell that because of the way the methods are structured.\n\n\n\u003e **Note:** we have a number of empty methods here. They are required to be defined by the calling class, but we don’t actually have any need for them.\n\nAt this point, we have a fully working application suite that allows riders to request rides, and drivers to pick them up and drop them off. Remember to run your backend application before you launch the Android apps, and then we can test them out working together.\n\n![kotlin-ridesharing-demo](//images.ctfassets.net/1es3ne0caaid/6RBtbLD3JCimAcaw48UMqq/2da3756854a334305b1c4bc8786e8d03/kotlin-ridesharing-demo.gif)\n\n## Conclusion\n\nThis article shows how to use Pusher Beams along with the location and maps functionality of your phone to give a truly interactive experience of requesting a ride. We have painlessly implemented the sending of appropriate details from one device to another, keeping both parties updated to the current job.\n\nThe full source code for this application is available on [GitHub](https://github.com/sazzer/pusher-ridesharing). Why not try extending it yourself. There are many additional things that can be added very easily using Pusher technology to improve the application even further.","metaTitle":"Build a Kotlin ride sharing app with push notifications","metaDescription":"Use Kotlin, Gradle and Spring Boot to build a full ridesharing application, featuring apps for both the driver and rider. Use Google Maps to track rides."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"60CR8KRc2IA8o8IqCWUosQ","type":"Entry","createdAt":"2018-07-02T13:14:33.936Z","updatedAt":"2020-06-19T11:09:48.081Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Implement geofencing in Ionic","url":"geofencing-ionic","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/HackAfro/ionic-geofence-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-06-29","description":"Build a geofencing app for mobile using Ionic and Google Maps. Ionic is an open source SDK for developing native web apps. Admin users will be notified when a user exits a defined area.","prerequisite":"You will need Node and npm installed on your machine. A basic understanding of Angular, TypeScript and Ionic will be helpful.","content":"## Introduction\n\nA **geo-fence** is a virtual perimeter for a real-world geographic area. Geofencing is the use of GPS or RFID technology to create a virtual geographic boundary, enabling software to trigger a response when a mobile device enters or leaves a particular area. \n\nUsing [Ionic](https://ionicframework.com/), you can create a mobile application using web technologies and use a wide array of existing components. Using [Pusher](https://pusher.com), we can enable realtime functionalities in the application using Pusher’s pub/sub pattern. \n\nWe’ll be building a realtime location tracker application using Pusher, Ionic and the Google Maps library. Using the application, admin users will be notified when a user exits a predefined geofence. When this happens, the admin user receives a notification containing the user’s current location\n\nHere’s a demo of the final product:\n\n![ionic-geofence-demo](//images.ctfassets.net/1es3ne0caaid/16YJyTIcJY2U24gQIk6OkM/bfb4d451e5d968578686b7cac3fbc8ba/ionic-geofence-demo.png)\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of [Angular](https://angular.io), Ionic and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nWe’ll be using these tools to build out our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Ionic](https://ionicframework.com/)\n- [Google Maps](https://cloud.google.com/maps-platform/)\n\nWe’ll be sending messages to the server and using [Pusher’s](https://pusher.com) pub/sub pattern, we’ll listen to and receive messages in realtime. To make use of Pusher you’ll have to create an account [here](https://pusher.com). \n\nAfter account creation, visit the dashboard. Click **Create new Channels app**, fill out the details, click **Create my app**, and make a note of the details on the **App Keys** tab.\n\n\nLet’s build!\n\n## Setup and folder structure\n\nWe’ll initialize our project using the Ionic CLI (command line interface). First, install the CLI by running `npm install -g ionic` in your terminal. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/) installed.\n\nTo create a new Ionic project called `geofence``-app` using the CLI, open a terminal and run:   \n\n```\n    ionic start geofence-app tabs\n```\n\nThe command uses the CLI to create a new project using the tabs template. Follow the prompt and integrate your app with Cordova to target IOS and Android.\n\n![ionic-geofence-integrate-cordova](//images.ctfassets.net/1es3ne0caaid/1IUUkS2jWEsGkaoC0ImGA0/a4419e24c715605029dc1edc7a6a60d5/ionic-geofence-integrate-cordova.png)\n\n Type **Y** to integrate Cordova into the application. The next prompt will ask if you want to integrate Ionic pro into the application. If you have an Ionic pro account, type **Y** and **N** if you don’t.\n\nThe Ionic team provides three ready made starter templates. You can check out the rest of the templates [here](https://ionicframework.com/getting-started).\n\nIf you don’t have Cordova installed on your PC, install it by running the following command:\n\n```\n    npm install -g cordova\n```\n\nOpen the newly created folder, your folder structure should look something like this:\n\n```\n    geofence-app/\n      resources/\n      node_modules/\n      src/\n        app/\n          app.component.html\n          app.module.ts\n          app.scss\n          ...\n        assets/\n          ...\n        pages/\n          home/\n          about/\n          ...\n```\n\nOpen a terminal inside the project folder and start the application by running `ionic serve`. A browser window should pop up and you should see screenshot below.\n\n![ionic-geofence-starter](//images.ctfassets.net/1es3ne0caaid/WmvVlyOTE2YeW0IMuSsIe/c4228b1e7aa22077fab6c15abd2513a1/ionic-geofence-starter.png)\n\n## Installing dependencies\n\nNext, run the following commands in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher sentiment uuid \n    \n    // front-end dependencies\n    npm install pusher-js @types/pusher-js @agm/core\n```\n\n## Building our server\n\nNow that we have our application running, let’s build out our server.\n\nTo do this we’ll make user of [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/). We’ll use this to receive requests from our Angular application.\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nWe referenced three packages in the snippet above, `body-parser`, `pusher` and `dotenv`. Let’s get into what each one does.\n\n\n-  body-parser is a package used to parse incoming request bodies in a middleware before your handlers, available under the `req.body` property.\n- dotenv is a zero-dependency module that loads environment variables from a `.env` file into `[process.env](https://nodejs.org/docs/latest/api/process.html#process_process_env)`. This package is used so sensitive information like the `appId` and `secret` aren’t added to our codebase directly. \n- The dotenv package will load the variables provided in our `.env` file into our environment.\n\nThe `dotenv` package should always be initialized very early in the application at the top of the file. This is because we need the environment variables available throughout the application.\n\nThe calls to our endpoint will be coming in from a different origin, therefore we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nAlso, you’ll notice that we installed [Pusher](https://pusher.com) library as a dependency. Visit the [Pusher](https://pusher.com) website to create a Pusher account if you haven’t done so already.\n\nCreate a `.env` file to load the variables we’ll be needing into the Node environment. The file should be in the root folder of your project. Open the file and update it with the code below.\n\n```\n    // .env\n    \n    PUSHER_APP_ID=\u003cAPP_ID\u003e\n    PUSHER_KEY=\u003cPUSHER_KEY\u003e\n    PUSHER_SECRET=\u003cPUSHER_SECRET\u003e\n    PUSHER_CLUSTER=\u003cPUSHER_CLUSTER\u003e\n```\n\n\u003e **P.S:** Please ensure you replace the placeholder values above with your Pusher `appId`, `key`, `secret` and `cluster`.\n\n\nThis is a standard Node application configuration, nothing specific to our app.\n\n### Realtime location updates\n\nTo enable users send in their current receive messages, we’ll create a route to handle incoming requests. Update your `server.js`  file with the code below.\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.PUSHER_CLUSTER,\n      encrypted: true,\n    });\n    \n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    \n    app.post('/ping', (req, res) =\u003e {\n      const { lat, lng } = req.body;\n      const data = {\n        lat,\n        lng,\n      };\n      pusher.trigger('location', 'ping', data);\n      res.json(data);\n    });\n     ...\n```\n\n- We created a `POST /ping` route which, when hit, triggers a Pusher event.\n- We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the body of the request, we also got the `lat` and `lng` in the request body sent by the user.\n- The `data` object will contain the `lat` and `lat` sent by the user. \n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`location`), an event name (`ping`) and a payload(`data`).\n- The payload can be any value, but in this case, we have a JS object.\n- The response will contain the `data` object.\n\n\n### Geofence updates\n\nWe’ll need another route to notify admin users when a user leaves their defined geofence. Let’s create a  `POST /notify` route to handle incoming updates on the user’s geofence status. Update the `server.js` file to include the new route.\n\n``` javascript\n    //server.js\n    \n    ...\n    app.post('/ping', (req, res) =\u003e {\n      ...\n    });\n    \n    app.post('/notify', (req, res) =\u003e {\n      const { lat, lng } = req.body;\n      const data = {\n        lat,\n        lng,\n      };\n      pusher.trigger('geofence', 'exit', data);\n      res.json(data);\n    });\n    \n    ...\n```\n\n\nYou can now start the server by running `node server.js` in a terminal in the root folder of the project.\n\n\n## Home page\n\nLet’s build out the home page for our application. We’ll be creating two pages for this project, the home page and the admin page. Typically, the admin page would have been a separate application but in this context, we’ll limit it to just a page on this project.\n\nSince we’re using a starter template, we already have some pages created in the `pages` directory. \nWe’ll edit and refactor the `home`  page to suit our needs. The `home` page will display the user’s current location on the map using a marker and a string of containing the user’s formatted address. Open the `home.html` file and replace the contents with the snippet below:\n\n``` html\n    \u003c!-- home.html --\u003e\n    \n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003eHome\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \u003cion-content\u003e\n      \u003cmap [center]=\"center\" [zoom]=\"zoom\"\u003e\n      \u003c/map\u003e\n      \u003cdiv class=\"location-address\"\u003e\n        \u003cp\u003e{{address}}\u003c/p\u003e\n        \u003ch4\u003e{{state}}\u003c/h4\u003e\n      \u003c/div\u003e\n    \u003c/ion-content\u003e\n```\n\nWe’ve referenced a `map` component that hasn’t been created, we’ll get to creating it but before then let’s add some styles to the `home.scss` file. Open the file and copy the following content into it:\n\n``` scss\n    // home.scss\n    \n    page-home {\n      ion-content {\n        position: relative;\n        agm-map {\n          height: 100%;\n          width: 100%;\n        }\n        .location-address {\n          width: 100%;\n          border-top-left-radius: 15px;\n          border-top-right-radius: 15px;\n          box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2);\n          background: white;\n          position: absolute;\n          bottom: 0;\n          left: 0;\n          padding: 0 23px 10px;\n          p{\n            font-size: 20px;\n            opacity: .7;\n            font-weight: bold;\n            letter-spacing: .2px;\n            margin-bottom: 4px;\n          }\n          h4{\n            font-size: 14px;\n            opacity: 0.4;\n            font-weight: 500;\n            margin: 0;\n          }\n        }\n      }\n    }\n```\n\n\n\nUpdate the `home.ts` file below to be similar to the snippet below:\n\n``` typescript\n    import { Component, OnInit } from '@angular/core';\n    import { NavController, Platform } from 'ionic-angular';\n    import { MapsAPILoader } from '@agm/core';\n    import { HttpClient } from '@angular/common/http';\n    \n    declare const google;\n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html',\n    })\n    export class HomePage implements OnInit {\n      constructor(\n        public navCtrl: NavController,\n        private loader: MapsAPILoader,\n        private http: HttpClient,\n      ) {\n      \n      }\n      center = {\n        lat: 6.4393477,\n        lng: 3.5244628999999996,\n      };\n      zoom = 15;\n      address = '';\n      state = '';\n      \n      pingLocation(location) {\n        this.http\n          .post('http://localhost:4000/ping', location)\n          .subscribe((res) =\u003e {});\n      }\n      notify(location) {\n        this.http\n          .post('http://localhost:4000/notify', location)\n          .subscribe((res) =\u003e {});\n      }\n      \n      ngOnInit() {\n        this.loader.load().then(() =\u003e {\n          this.pingLocation(this.center);\n        });\n      }\n    }\n```\n\n\n### Realtime location updates\n\nWe’ll be updating the user’s location in realtime and also sending live location data of the user to the server. For this we’ll be using the native Geolocation API by ionic. The API will watch the user’s current position and update the marker on the map. \n\nFirst, we'll install the Geolocation plugin. Run the following commands to add the plugin to your project.\n\n```\n    ionic cordova plugin add cordova-plugin-geolocation --variable GEOLOCATION_USAGE_DESCRIPTION=\"To locate you\"\n    npm install --save @ionic-native/geolocation\n```\n\nUpdate the `home.ts` file with the snippet below:\n\n``` typescript\n    // home.ts\n    ...\n    import { MapsAPILoader } from '@agm/core';\n    import { Geolocation } from '@ionic-native/geolocation';\n    ...\n    export class HomePage implements OnInit{\n      constructor(\n        ...\n        private platform: Platform,\n        private geolocation: Geolocation\n      ){};\n      ...\n      notify(location) {\n        ...\n      }\n      reverseGeocode(latLng) {\n        const geocoder = new google.maps.Geocoder();\n        geocoder.geocode({ location: latLng }, (results, status) =\u003e {\n          if (status === 'OK') {\n            if (results[0]) {\n              const address = results[0].formatted_address;\n              const addressList = address.split(',');\n              this.address = addressList[0];\n              this.state = addressList.slice(2).join(', ');\n            }\n          }\n        });\n      }\n    \n      ngOnInit(){\n        this.loader.load().then(() =\u003e {\n          this.reverseGeocode(this.center);\n          this.pingLocation(this.center);\n        });\n        this.platform.ready().then(() =\u003e {\n          if (this.platform.is('cordova')) {\n            const watch = this.geolocation.watchPosition();\n            watch.subscribe((position) =\u003e {\n              const positionEmpty = Object.keys(position).length \u003c 1;\n              if (!positionEmpty) {\n                this.center = {\n                  lat: position.coords.latitude,\n                  lng: position.coords.longitude,\n                };\n                this.reverseGeocode(this.center);\n                this.pingLocation(this.center);\n              }\n            });\n          }\n        });\n      }\n    }\n```\n\n    \n\nIn the snippet above, we added a new method to the `HomePage` component. The `reverseGeocode` method uses the Google Maps `Geocoder` API to reverse geocode coordinates to addresses. In the function we split the `formatted_address` property getting the `short_name`, `state` and `country`.\n\nThe `ngOnInit` lifecycle got an update. First we reverse geocoded the current address after the Google Maps script has been loaded. We then check if the platform is [Cordova](https://cordova.apache.org/) supported. If it is, we initialize the geolocation API to watch the user's location, subscribing to the `watch` variable initiates the process. When the user's location is returned, we reverse geocode the coordinates to get the address, then we send the coordinates to the server.\n\nAfter this update, you should get an error that the `Geolocation` and `HttpClient` providers haven't been registered. To clear this error, we'll register the these providers in the `app.module.ts` file. Open the file and add them to the list of providers.\n\n``` typescript\n    // app.module.ts\n    \n    ...\n    import { SplashScreen } from '@ionic-native/splash-screen';\n    import { Geolocation } from '@ionic-native/geolocation';\n    import { HttpClientModule, HttpClient } from '@angular/common/http';\n    \n    @NgModule({\n      ...\n      imports: [\n        ...\n        HttpClientModule\n      ],\n      ...\n      providers: [\n        ...\n        Geolocation,\n        HttpClient,\n      ],\n    })\n    export class AppModule {}\n```\n\n\n### Setting up geofences\n\nTo set up geofences for the user, we'll make use of the native Geofence Ionic API. Install this plugin by running the following commands in a terminal in the root folder of your project.\n\n```\n    ionic cordova plugin add cordova-plugin-geofence\n    \n    npm install --save @ionic-native/geofence\n```\n\nThe next step is to use the Geofence provider in the `HomePage` component. Open the `home.ts` file and update it like so:\n\n``` typescript\n    // home.ts\n    ...\n    import { HttpClientModule, HttpClient } from '@angular/common/http';\n    import { Geofence } from '@ionic-native/geofence';\n    import { v4 } from 'uuid';\n    ...\n    export class HomePage implements OnInit {\n      constructor(\n        ...\n        private geofence: Geofence\n      ){\n        if (this.platform.is('cordova')) {\n          this.platform.ready().then((_) =\u003e {\n            geofence.initialize().then((_) =\u003e {\n              console.log('Geofence Plugin Ready');\n            });\n          });\n        }\n      }\n    \n      ...\n      private createGeofence() {\n        let fence = {\n          id: v4(), //any unique ID\n          latitude: this.center.lat, //center of geofence radius\n          longitude: this.center.lng,\n          radius: 1000, //radius to edge of geofence in meters\n          transitionType: 2,\n        };\n        this.geofence\n          .addOrUpdate(fence)\n          .then(\n            () =\u003e console.log('Geofence added'),\n            (err) =\u003e console.log('Geofence failed to add', err)\n          );\n        this.geofence.onTransitionReceived().subscribe((res) =\u003e {\n          this.notify(this.center);\n        });\n      }\n      ngOnInit(){\n        this.loader.load().then(() =\u003e {\n          ...\n        });\n        this.platform.ready().then(() =\u003e {\n          if (this.platform.is('cordova')) {\n            this.createGeofence();\n            const watch = this.geolocation.watchPosition();\n            ...\n          }\n        });\n      }\n    }\n```\n\nFirst we check if the platform is supported by Cordova and if the platform is ready. Then we initialize the `Geofence` provider in the `constructor`. In the `createGeofence` method, we define a `fence` object. The `id`, `latitude`, `longitude` and `radius` properties are kind of self explanatory. The `transitionType` is one of three possible types. A geofence has three transition types:\n\n  \n\n1. Enter\n2. Leave\n3. Both\n\n  \n\nEach type is represented by accordingly by the numbers 1, 2 and 3. Next, we call the `addOrUpdate` method of the geofence provider, the method takes in the `fence` object we created.\nWe'll be listening for the transition type of `leave`, which means we should get notified when the user leaves the set geofence. \n\nUpdating the `ngOnInit` lifecycle to call the `createGeofence` method ensures that the geofence is created once the component is initialized. Include the `Geofence` provider in the module file to prevent the app from throwing errors. Add the `Geofence` to the list of providers in the `app.module.ts` file.\n\n``` typescript\n    // app.module.ts\n    ...\n    import { HttpClientModule, HttpClient } from '@angular/common/http';\n    import { Geofence } from '@ionic-native/geofence';\n    @NgModule({\n      ...\n      providers: [\n        StatusBar,\n        SplashScreen,\n        { provide: ErrorHandler, useClass: IonicErrorHandler },\n        Geolocation,\n        HttpClient,\n        Geofence,\n      ],\n    })\n    export class AppModule {}\n```\n\n\n## Setting up the map component\n\nWe referenced an uncreated `map` component in the `home.html` file. Create a `components` folder in the `src` directory. Within it, create a `map`  folder with three files in it. `map.ts`, `map.html` and `map.scss`.\n\nFor the map component, we'll be using components provided by the [angular-google-maps](https://angular-maps.com/) library. Let's register the angular-google-maps module and the new map component in the `app.module.ts` file. Open the `app.module.ts` file and update the `imports` and `declarations` properties.\n\n``` typescript\n    // app.module.ts\n    ...\n    import { Geofence } from '@ionic-native/geofence';\n    import { AgmCoreModule } from '@agm/core';\n    import { MapComponent } from '../components/map/map';\n    @NgModule({\n      declarations: [\n        ...\n        MapComponent\n      ],\n      imports: [\n        ...\n        AgmCoreModule.forRoot({\n          // please add your own API key here: https://developers.google.com/maps/documentation/javascript/get-api-key?hl=en\n          apiKey: 'GOOGLE_API_KEY',\n          libraries: ['geometry'],\n        }),\n      ],\n     ...\n    })\n    export class AppModule {}\n```\n\nNow, open the `map.html` file and copy the content below into it:\n\n``` html\n    \u003c!-- map.html --\u003e\n    \u003cagm-map [latitude]=\"center.lat\" [longitude]=\"center.lng\" [zoom]=\"zoom\"\u003e\n      \u003cagm-marker [latitude]=\"center.lat\" [longitude]=\"center.lng\" [iconUrl]=\"'assets/imgs/user.svg'\"\u003e\u003c/agm-marker\u003e\n      \u003cagm-circle [latitude]=\"radiusCenter.lat\" [longitude]=\"radiusCenter.lng\" [radius]=\"500\" [fillColor]=\"'#ADC1B9'\"\u003e\u003c/agm-circle\u003e\n    \u003c/agm-map\u003e\n```\n\n\u003e **P.S**: All assets used in the project are available on [GitHub](https://github.com/HackAfro/ionic-geofence-app)\n\nNext, let's update the `map.scss` file to feature styles for the component:\n\n``` scss\n    // map.scss\n    map {\n      agm-map{\n        width: 100%;\n        height: 100%;\n      }\n    }\n```\n\nThat's it. Pretty straightforward. Let's define the missing variables for the map component in the `map.ts` file.\n\n``` typescript\n    // map.ts\n    import { Component, Input } from '@angular/core';\n    /**\n     * Generated class for the MapComponent component.\n     *\n     * See https://angular.io/api/core/Component for more info on Angular\n     * Components.\n     */\n    @Component({\n      selector: 'map',\n      templateUrl: 'map.html',\n    })\n    export class MapComponent {\n      text: string;\n      constructor() {}\n      @Input()\n      center = {\n        lat: 6.435838,\n        lng: 3.451384,\n      };\n      @Input() zoom = 15;\n      radiusCenter = {\n        lat: 6.435838,\n        lng: 3.451384,\n      }\n    }\n```\n\nThe map component will feature two inputs, `center` and `zoom`. The `center` input will set the center of the map and the `zoom` will do the same. Pretty self-explanatory. The `radiusCenter` will be used to define the circle drawn on the map, displaying the geofence set up. Below is a screenshot of the home page after all the changes made.\n\n![ionic-geofence-home-1](//images.ctfassets.net/1es3ne0caaid/5EISWY5Y5yMOQkgQ6k2qKU/e4b4c7c63908ea59c01f0f37887c068d/ionic-geofence-home-1.png)\n\n## Introducing Pusher and updating location in realtime\n\nSo far we have an application that allows users to send location data but the location isn’t updated in realtime. To solve this problem, we’ll include the [Pusher](https://pusher.com) library.\n\nLet’s create a Pusher service to be used application wide. The Angular CLI can aid in the service creation.  Open a terminal in your project’s root folder and run the following command.\n\n```\n    ionic generate provider pusher\n```\n\nThis command simply tells the CLI to generate a provider named `pusher` . Now open the `pusher.ts` file in the `src/providers/pusher`  directory and update it with the code snippet below:\n\n\n``` typescript\n    // src/providers/pusher/pusher.ts\n    \n    import { Injectable } from '@angular/core';\n    import Pusher from 'pusher-js';\n    \n    @Injectable()\n    export class PusherProvider {\n      constructor() {\n        this.pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'PUSHER_CLUSTER',\n          encrypted: true,\n        });\n      }\n      pusher;\n    \n      public init(channelName) {\n        const channel = this.pusher.subscribe(channelName);\n        return channel;\n      }\n    }\n```\n\n\n\n- First, we initialize Pusher in the constructor. \n- The  `init` method returns the Pusher property we created. \n\n\n\u003e **Note:** Ensure you replace the `PUSHER_KEY` and `PUSHER_CLUSTER` string with your actual Pusher credentials.\n  \n\n\n## Admin page\n\nThe admin page will feature two segments, `location` and `notifications`. The location segment will display the user's current location at any particular time. Create the admin page using the CLI by running the following command:\n\n```\n    ionic generate page admin\n```\n\nYou’ll find the `admin` page generated in the `pages` folder. Open the `admin.html` file and copy the code below into it:\n\n``` html\n    \u003c!-- admin.html --\u003e\n    \n    \u003cion-header\u003e\n      \u003cdiv padding\u003e\n        \u003cion-segment [(ngModel)]=\"tab\"\u003e\n          \u003cion-segment-button value=\"location\"\u003e\n            Position\n          \u003c/ion-segment-button\u003e\n          \u003cion-segment-button value=\"notifications\"\u003e\n            Notifications\n          \u003c/ion-segment-button\u003e\n        \u003c/ion-segment\u003e\n      \u003c/div\u003e\n    \u003c/ion-header\u003e\n    \u003cion-content\u003e\n      \u003cdiv [ngSwitch]=\"tab\" style=\"height: 100%\"\u003e\n        \u003cdiv *ngSwitchCase=\"'location'\" style=\"height: 100%\"\u003e\n          \u003cmap [center]=\"center\"\u003e\u003c/map\u003e\n        \u003c/div\u003e\n        \u003cdiv *ngSwitchCase=\"'notifications'\" class=\"notifications-holder\"\u003e\n          \u003ch4 class=\"no-notifications\" *ngIf=\"!notifications.length\"\u003eNo notifications to display\u003c/h4\u003e\n          \u003cion-list *ngIf=\"notifications.length\"\u003e\n            \u003cion-item *ngFor=\"let notification of notifications\"\u003e\n              \u003cion-thumbnail item-start\u003e\n                \u003cion-icon name=\"person\"\u003e\u003c/ion-icon\u003e\n              \u003c/ion-thumbnail\u003e\n              \u003ch2\u003e{{notification.header}}\u003c/h2\u003e\n              \u003cp\u003e{{notification.body}}\u003c/p\u003e\n            \u003c/ion-item\u003e\n          \u003c/ion-list\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/ion-content\u003e\n```\n\nStyle up the page by copying the following styles into the `admin.scss` file.\n\n``` scss\n    agm-map {\n      width: 100%;\n      height: 100%;\n    }\n    ion-thumbnail {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      background: #adc1b9;\n      border-radius: 50%;\n      ion-icon {\n        font-size: 2.2em;\n        color: whitesmoke;\n      }\n    }\n    .no-notifications {\n      font-size: 14px;\n      color: deepskyblue;\n      text-transform: uppercase;\n      text-align: center;\n    }\n```\n\n\nLet’s update the `admin.ts` file to include the variables we used in the HTML file:\n\n``` typescript\n    // admin.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { NavController } from 'ionic-angular';\n    import { PusherProvider } from '../../providers/pusher/pusher';\n    import { Platform } from 'ionic-angular';\n    import { PhonegapLocalNotification } from '@ionic-native/phonegap-local-notification';\n    \n    declare const google;\n    \n    @Component({\n      selector: 'page-admin',\n      templateUrl: 'admin.html',\n    })\n    \n    export class AdminPage implements OnInit {\n      constructor(\n        public navCtrl: NavController,\n        private pusher: PusherProvider,\n        private platform: Platform,\n        private localNotification: PhonegapLocalNotification\n      ) {\n        if (platform.is('cordova')) {\n          platform.ready().then((_) =\u003e {\n            this.localNotification.requestPermission().then((perm) =\u003e {\n              if (perm === 'granted') this.permissionGranted = true;\n            });\n          });\n        }\n      }\n      tab = 'location';\n      notifications = [];\n      center = {\n        lat: 6.435838,\n        lng: 3.451384,\n      };\n      permissionGranted = false;\n      address = '';\n      reverseGeocode(latLng) {\n        const geocoder = new google.maps.Geocoder();\n        geocoder.geocode({ location: latLng }, (results, status) =\u003e {\n          if (status === 'OK') {\n            if (results[0]) {\n              const address = results[0].formatted_address;\n              const addressList = address.split(',');\n              this.address = addressList[0];\n            }\n          }\n        });\n      }\n      ngOnInit() {\n        const locationChannel = this.pusher.init('location');\n        const geofenceChannel = this.pusher.init('location');\n        locationChannel.bind('ping', (data) =\u003e {\n          this.center = {\n            ...data,\n          };\n        });\n        geofenceChannel.bind('exit', (data) =\u003e {\n          this.reverseGeocode(data);\n          if (this.permissionGranted) {\n            this.localNotification.create('Geofence exited', {\n              tag: 'message1',\n              body: 'User has exited the defined geofence',\n              icon: 'assets/imgs/user.svg',\n            });\n          }\n          const notification = {\n            header: 'User has exited the geofence',\n            body: `Current location: ${this.address}`,\n          };\n          this.notifications = this.notifications.concat(notification);\n        });\n      }\n    }\n```\n\n\nThe admin component will be displaying notifications in the notifications bar whenever a user leaves the set geofence. We’ll also have a notifications segment that will show a list of notifications over time.\n\nTo display notifications in the notifications bar, we’ll be using the [PhonegapLocalNotification](https://ionicframework.com/docs/native/phonegap-local-notification/) native API. Install it as a plugin by running the following commands.\n\n```\n    ionic cordova plugin add phonegap-plugin-local-notification\n    \n    npm install --save @ionic-native/phonegap-local-notification\n```\n\nIn the `ngOnInit` lifecycle, we list for two events `ping` and `exit` from Pusher. In the `ping` event callback we use the data returned to update the current position of the marker. When the `exit` event is called we trigger a notification using the `PhonegapLocalNotification`. A notification object is created containing a reverse geocoded address and appended to the notifications array.\n\nAfter creating the `admin` page, the next step is to register it in the `app.module.ts`  file and then add it to the `tabs` page. Update the `app.module.ts`  file and the `tabs` page to include the `admin` page and the `PhonegapLocalNotification` provider.\n\n``` typescript\n    // src/app/app.module.ts\n    \n    ...\n    import { AdminPage } from '../pages/admin/admin';\n    import { PhonegapLocalNotification } from '@ionic-native/phonegap-local-notification';\n    \n    @NgModule({\n      declarations: [\n        ...\n        AdminPage\n      ],\n      ...\n      providers: [\n        ...\n        PhonegapLocalNotification,\n      ],\n    })\n    export class AppModule {}\n```\n\n\nThen update the TabsPage to Include the AdminPage. Open the `tabs.html` file in the `src/pages/tabs` directory and replace the content with the code below:\n\n``` html\n    \u003c!-- tab.html --\u003e\n    \u003cion-tabs\u003e\n      \u003cion-tab [root]=\"tab1Root\" tabTitle=\"Home\" tabIcon=\"home\"\u003e\u003c/ion-tab\u003e\n      \u003cion-tab [root]=\"tab2Root\" tabTitle=\"Admin\" tabIcon=\"people\"\u003e\u003c/ion-tab\u003e\n    \u003c/ion-tabs\u003e\n```\n\n\nNext update the `tabs.ts` file and include the AdminPage:\n\n``` typescript\n    import { Component } from '@angular/core';\n    import { AdminPage } from '../admin/admin';\n    import { HomePage } from '../home/home';\n    @Component({\n      templateUrl: 'tabs.html',\n    })\n    export class TabsPage {\n      tab1Root = HomePage;\n      tab2Root = AdminPage;\n      constructor() {}\n    }\n```\n\n\n\nTo test the application on your mobile device, download the [IonicDevApp](https://ionicframework.com/docs/pro/devapp/) on your mobile device. Make sure your computer and your mobile device are connected to the same network. When you open the IonicDevApp, you should see Ionic apps running on your network listed. \n\n![ionic-geofence-in-app](//images.ctfassets.net/1es3ne0caaid/4Tto6qC43SyoeuuCwWk6kC/10b2fcce68e32c25cb8da5cfe7e635ad/ionic-geofence-in-app.png)\n\nTo view the application, click on it and you should see a similar view with what was on the browser. Sending messages to the server might have worked on the browser but localhost doesn’t exist on your phone, so we’ll need to create a proxy to be able to send messages from mobile. \n\n\n## Using Ngrok as a proxy\n\nTo create a proxy for our server, we’ll download Ngrok. Visit the [download](https://ngrok.com/download) page on the Ngrok website. Download the client for your OS. Unzip it and run the following command in the folder where Ngrok can be found:\n\n```\n    ./ngrok http 4000\n```\n\n![ionic-geofence-ngrok](//images.ctfassets.net/1es3ne0caaid/5xPwNwr4DmMCA6k0MaaIqo/d569c60667d1da3659409f57b9a52da5/ionic-geofence-ngrok.png)\n\nCopy the forwarding url with `https` and place it in the `home.ts` file that previously had `http://localhost:4000/ping` and `http://localhost:4000/notify`. Please do not copy mine from the screenshot above. \n\n``` typescript\n    // src/pages/home/home.ts\n    ...\n    export class HomePage implements OnInit {\n      ...\n      pingLocation() {\n        this.http\n            .post('\u003cNGROK_URL\u003e/ping', data)\n            .subscribe((res: Message) =\u003e {});\n      }\n      \n      notify(location) {\n        this.http\n          .post('\u003cNGROK_URL\u003e/notify', location)\n          .subscribe((res) =\u003e {});\n      }\n      ...\n    }\n    ...\n```\n\n\u003e Ensure to include the forwarding url you copied where the placeholder string is\n\n\n## Running on an emulator\n\nSince our application is making use of some native APIs, we’ll need to test it on an emulator. To run our app on an emulator, run any of the following commands depending on the platform you’re building for.\n\n```\n    // for IOS\n    ionic cordova emulate ios\n    \n    // for android\n    ionic cordova emulate android\n```\n\nTo build your application to deploy on either the AppStore or PlayStore, follow the instructions found [here](https://ionicframework.com/docs/pro/package/).\n\n## Conclusion\n\nUsing Ionic, Google Maps and Pusher, we’ve been able to create an application that offers realtime location tracking. We’ve also learnt how to create geofences using native APIs. You can view the source code for the demo [here](https://github.com/HackAfro/ionic-geofence-app).","metaTitle":"Implement geofencing in Ionic","metaDescription":"Create a geofencing app with Ionic and Google Maps. Ionic uses Angular and TypeScript along with Cordova. Admin users will be notified when a user exits a defined area."}}],"defaultValue":"","queryType":"","pages":50,"route":"/tutorials","query":{"page":"28"}}},"page":"/tutorials","query":{"page":"28"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?page=28 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:55 GMT -->
</html>