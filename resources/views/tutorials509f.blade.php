<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=JavaScript&page=27 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:45:15 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">290</span> tutorials for “<span class="css-npldjc ehwuahf2">JavaScript</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials512c.html?product=Beams&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials.html" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#C223CE"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="JavaScript"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/realtime-comments-aspnet.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build realtime comments using ASP.NET</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Build a mini-blog engine with live commentary features using .NET. </p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/todo-app-flask.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Python<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a to-do app with Flask</h3><p class="css-k12xad e5jrto45">Build a CRUD checklist app with Flask from scratch and add realtime functionality to it.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chart-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Realtime Chart</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime chart in Swift</h3><p class="css-k12xad e5jrto45">Create a simple realtime chart in iOS using Swift, Node.js and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/user-status-update-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a user status update in Swift</h3><p class="css-k12xad e5jrto45">Create an iOS application with realtime user status updates, similar to WhatsApp.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-feed-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo feed using ASP.NET</h3><p class="css-k12xad e5jrto45">Build a mini system that allows people to upload their photographs in realtime.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/read-receipts-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build read receipts using Swift</h3><p class="css-k12xad e5jrto45">Create an iOS chat application with a message delivery status using Swift, Node.js and Pusher for realtime functionality...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/pwa-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime PWA with React</h3><p class="css-k12xad e5jrto45">Build a realtime PWA displaying the price information about cryptocurrencies using React.js and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app with React Native</h3><p class="css-k12xad e5jrto45">Benefit from the powerful frameworks like React Native and build a live chat app.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/counter-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Counter</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime counter using ASP.NET</h3><p class="css-k12xad e5jrto45">Create a live website visits counter using ASP.NET and jQuery.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsc581.html?tag=JavaScript&amp;page=26" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials700d.html?tag=JavaScript&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialsa5cb.html?tag=JavaScript&amp;page=25" class="css-za1ua3 edg0byb1">25</a><a href="tutorialsc581.html?tag=JavaScript&amp;page=26" class="css-za1ua3 edg0byb1">26</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials509f.html?tag=JavaScript&amp;page=27" class="css-2wakph edg0byb1">27</a><a href="tutorials1f5d.html?tag=JavaScript&amp;page=28" class="css-za1ua3 edg0byb1">28</a><a href="tutorialsecef.html?tag=JavaScript&amp;page=29" class="css-za1ua3 edg0byb1">29</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials3c54.html?tag=JavaScript&amp;page=33" class="css-5s6711 edg0byb1">33</a><a href="tutorials1f5d.html?tag=JavaScript&amp;page=28" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":290,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5jgijmJdMAws2oQKmmEOaQ","type":"Entry","createdAt":"2018-02-28T12:58:23.259Z","updatedAt":"2020-06-19T14:33:04.319Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":11,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build realtime comments using ASP.NET","url":"realtime-comments-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/Net_real_time_commenting_pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2017-11-20","description":"Build a mini-blog engine with live commentary features using .NET. ","prerequisite":"A basic understanding of ASP.NET and Vue.js is needed to follow this tutorial.","content":"Reloading pages to view new comments can bore and is also strenuous, given you don't even know if the reply to your comment has come in yet or not. You keep reloading and keep wasting your data. To cut a long story short, users may abandon sites where they have to reload pages to see a new comment.\n\nToday, we will build a mini-blog engine with live commentary features using .NET and Pusher.\n\nTo follow through with this tutorial, we will use MSSQL as our database engine. Please ensure that it is up and running.\n\n![realtime-comments-aspnet-demo](//images.contentful.com/1es3ne0caaid/46ZgWePRgImgGm2uIQay6m/bf106f3e805723fa7fc033b95778cb35/realtime-comments-aspnet-demo.gif)\n\n## Setting up a Pusher account and app\n\n[Pusher](https://pusher.com) is a hosted service that makes it super-easy to add realtime data and functionality to web and mobile applications.\n\nPusher acts as a realtime layer between your servers and clients. Pusher maintains persistent connections to the clients - over Web-socket if possible and falling back to HTTP-based connectivity - so that as soon as your servers have new data they want to push to the clients they can do, via Pusher.\n\nIf you do not already have one, head over to Pusher and create a free account.\n\nWe will register a new app on the dashboard. The only compulsory options are the app name and cluster. A cluster represents the physical location of the Pusher server that will handle your app’s requests. Also, copy out your App ID, Key, and Secret from the App Keys section, as we will need them later on.\n\n## Setting up the ASP.NET project in Visual Studio\n\nThe next thing we need to do is create a new `Asp.Net MVC application`. \n\nTo do so, let’s:\n\n- Open `Visual Studio` and select `N``ew Project` from the sidebar\n- Under templates, select `Visual C#`\n- Next, select `Web`\n- In the middle section, select `ASP.NET Web Application`.\n- For this tutorial, I named the project: `Real-Time-Commenting`.\n- Now we are almost ready. The next step will be to install the official `Pusher` library for `ASP.NET` using the `NuGet Package`.\n\nTo do this, we go to tools on the top bar, click on `NuGet Package Manager`, on the drop-down we select `Package Manager Console`.\n\nWe will see the `Package Manager Console` at the bottom of our Visual Studio. Next, let’s install the package by running:\n\n```\n    Install-Package PusherServer\n```\n\n## Crafting our application\n\nNow that our environment is set up and ready, let’s dive into writing code.\n\nBy default, Visual Studio creates three controllers for us. However, we will use the HomeController for the application logic.\n\nThe first thing we want to do is to define a model that stores the list of articles we have in the database. Let's call this model `BlogPost`. So, let's create a file called `BlogPost.cs` in our models folder, and add:\n\n```\n    using System;\n    using System.Collections.Generic;\n    using System.ComponentModel.DataAnnotations.Schema;\n    using System.Linq;\n    using System.Web;\n    \n    namespace Real_Time_Commenting.Models\n    {\n        public class BlogPost\n        {\n            public int BlogPostID { get; set; }\n    \n            public string Title { get; set; }\n    \n            [Column(TypeName = \"ntext\")]\n            public string Body { get; set; }\n        }\n    }\n```\n\nIn this code block, we have defined the model that holds our blog posts. The properties which we have defined here include:\n\n- The id of the post, called `BlogPostID` (usually the primary key)\n- The title of our post, called `Title` (Defined as a string)\n- The body of the post which we will be creating. Defined as a string\n\nNext, let us create the model called `Comment`, which we had referenced earlier on. Let's create a file called `Comment.cs` in our models folder and add:\n\n```\n    using System;\n    using System.Collections.Generic;\n    using System.ComponentModel.DataAnnotations.Schema;\n    using System.Linq;\n    using System.Web;\n    \n    namespace Real_Time_Commenting.Models\n    {\n        public class Comment\n        {\n            public int CommentID { get; set; }\n            \n            public string Name { get; set; }\n            \n            [Column(TypeName = \"ntext\")]\n            public string Body { get; set; }\n            \n            public int BlogPostID { get; set; }\n        }\n    }\n```\n\nLooking at the code above, we notice that we have declared the following properties:\n\n- The ID of our comment called `CommentID` (Usually the primary key)\n- The name of the person commenting.\n- The body of the comment.\n- The ID of the post we are commenting on.\n\nNow that we have defined our model, let’s reference it in our default database context called `ApplicationDbContext`. To do this, let’s open `models\\IdentityModels.cs` file, then locate the class called `ApplicationDbContext` and add the following after the create function:\n\n```\n    public DbSet\u003cBlogPost\u003e BlogPost { get; set; }\n    public DbSet\u003cComment\u003e Comment { get; set; }\n```\n\nIn the code block above, the `DbSet` class represents an entity set used for read, update, and delete operations.\nHere, we have defined two entities, our `BlogPost` and `Comment` models. We will now have access to them from an instance of the `ApplicationDbContext` .\n\n## Connecting to our database\n\nAlthough our model is set up, we still need to attach a database to our application. To do so, select the Server Explorer on the left-hand side of our Visual Studio, right click on Data Connections and add a database.\nThere are various databases that are lightweight and can fit into the application we are building, such as:\n\n- Microsoft access database\n- Sqlite Database\n- MSSQL Server\n\nFor this tutorial, I used the MSSQL Server.\n\n## Creating our controller\n\nNow both our model and database are setup, let’s go ahead creating our index route. Open the `HomeController` and replace it with:\n\n```\n    using PusherServer;\n    using Real_Time_Commenting.Models;\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using System.Web;\n    using System.Web.Mvc;\n    \n    namespace Real_Time_Commenting.Controllers\n    {\n        public class HomeController : Controller\n        {\n            ApplicationDbContext db = new ApplicationDbContext();\n            public ActionResult Index()\n            {\n                return View(db.BlogPost.AsQueryable());\n            }\n    \n            public ActionResult Create()\n            {\n                return View();\n            }\n            \n            [HttpPost]\n            public ActionResult Create(BlogPost post)\n            {\n                db.BlogPost.Add(post);\n                db.SaveChanges();\n                return RedirectToAction(\"Index\");\n            }\n    \n            public ActionResult Details(int? id)\n            {\n                return View(db.BlogPost.Find(id));\n            }\n    \n            public ActionResult Comments(int? id)\n            {\n                var comments = db.Comment.Where(x =\u003e x.BlogPostID == id).ToArray();\n                return Json(comments, JsonRequestBehavior.AllowGet);\n            }\n    \n            [HttpPost]\n            public async Task\u003cActionResult\u003e Comment(Comment data)\n            {\n                db.Comment.Add(data);\n                db.SaveChanges();\n                var options = new PusherOptions();\n                options.Cluster = \"XXX_APP_CLUSTER\";\n                var pusher = new Pusher(\"XXX_APP_ID\", \"XXX_APP_KEY\", \"XXX_APP_SECRET\", options);\n                ITriggerResult result = await pusher.TriggerAsync(\"asp_channel\", \"asp_event\", data);\n                return Content(\"ok\");\n            }\n        }\n    }\n```\n\nIn the code block above, we have defined six different functions :\n\n- The `Index` function, which shows a quick list of all our blog posts.\n- The `Create` function, which handles the addition of new BlogPosts for both `GET` and `POST` requests.\n- The `D``etails` function, which returns the full view of our post.\n- The `Comment``s` function, which returns a JSON data of all the comments for a particular post.\n- The `Comment` function, which handles the addition of a new comment and emitting the data to Pusher.\n\nBefore looking at our controller functions, we notice that there is an import of our DB context into our class with the line that says:\n\n```\n    ApplicationDbContext db = new ApplicationDbContext();\n```\n\nThis makes it possible to access the database model which we have defined  in our `ApplicationDbContext` class.\n\nIn the `Index` function we return our View, passing in a list of all the posts we have in our database, which will be looped.\n\nNext, In the `Create` function that handles our `GET` request, we simply return the view for creating a new post.\n\nWe move to the `Create` function that handles our `POST` request, which receives an argument called `post` of type `BlogPost` . In this function we add a new `post` into the database, after which we return a redirect to our `Index` function.\n\nIn our `Details` function, we return an instance of a particular `post` to our view which will be displayed. This view will also display the form which allows us to add comments.\n\nIn our `Comments` function, we return all the `comments` that belong to a particular `post`, the ID of which was supplied as JSON. This method will be called via an AJAX POST.\n\nFinally, our `Comment` function handles adding the comments to the database, and sending the data to Pusher. We notice here that this function is an `async` method. This is because the Pusher library sends the data asynchronously, and we have to await its response. \n\nAlso, we need to replace `XXX_APP_CLUSTER`, `XXX_APP_ID`, `XXX_APP_KEY` and `XXX_APP_SECRET` with our app cluster, ID, key and secret which we got from Pusher earlier on.\n\n## Creating our view files\n\nTo complete our application we will need 3 different view files, which we will discuss below.\n\n### The index view\n\nLet us replace the default content in the `Index.cshtml` file at `Views\\Home\\``Index``.cshtml` with:\n\n```\n    @model IEnumerable\u003cReal_Time_Commenting.Models.BlogPost\u003e\n    \n    @{\n        ViewBag.Title = \"Index\";\n    }\n    \n    \u003ch2\u003eIndex\u003c/h2\u003e\n    \n    \u003cp\u003e\n        @Html.ActionLink(\"Create New\", \"Create\")\n    \u003c/p\u003e\n    \u003ctable class=\"table\"\u003e\n        \u003ctr\u003e\n            \u003cth\u003e\n                @Html.DisplayNameFor(model =\u003e model.Title)\n            \u003c/th\u003e\n            \u003cth\u003e\n                @Html.DisplayNameFor(model =\u003e model.Body)\n            \u003c/th\u003e\n            \u003cth\u003e\u003c/th\u003e\n        \u003c/tr\u003e\n    \n    @foreach (var item in Model) {\n        \u003ctr\u003e\n            \u003ctd\u003e\n                @Html.DisplayFor(modelItem =\u003e item.Title)\n            \u003c/td\u003e\n            \u003ctd\u003e\n                @Html.DisplayFor(modelItem =\u003e item.Body)\n            \u003c/td\u003e\n            \u003ctd\u003e\n                @Html.ActionLink(\"Details\", \"Details\", new { id=item.BlogPostID }) |\n            \u003c/td\u003e\n        \u003c/tr\u003e\n    }\n    \n    \u003c/table\u003e\n```\n\nLooking at the HTML structure above, we notice we have defined a table which lists all our posts and links them to the details page.\n\n### The create view\n\nHere, we need to create a new file called `Create.cshtml` in the `View\\Home` folder and paste the following into it:\n\n```\n    @model Real_Time_Commenting.Models.BlogPost\n    \n    @{\n        ViewBag.Title = \"Create\";\n    }\n    \n    \u003ch2\u003eCreate\u003c/h2\u003e\n    \n    \n    @using (Html.BeginForm()) \n    {\n        @Html.AntiForgeryToken()\n    \n        \u003cdiv class=\"form-horizontal\"\u003e\n            \u003ch4\u003eBlogPost\u003c/h4\u003e\n            \u003chr /\u003e\n            @Html.ValidationSummary(true, \"\", new { @class = \"text-danger\" })\n            \u003cdiv class=\"form-group\"\u003e\n                @Html.LabelFor(model =\u003e model.Title, htmlAttributes: new { @class = \"control-label col-md-2\" })\n                \u003cdiv class=\"col-md-10\"\u003e\n                    @Html.EditorFor(model =\u003e model.Title, new { htmlAttributes = new { @class = \"form-control\" } })\n                    @Html.ValidationMessageFor(model =\u003e model.Title, \"\", new { @class = \"text-danger\" })\n                \u003c/div\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv class=\"form-group\"\u003e\n                @Html.LabelFor(model =\u003e model.Body, htmlAttributes: new { @class = \"control-label col-md-2\" })\n                \u003cdiv class=\"col-md-10\"\u003e\n                    @Html.EditorFor(model =\u003e model.Body, new { htmlAttributes = new { @class = \"form-control\" } })\n                    @Html.ValidationMessageFor(model =\u003e model.Body, \"\", new { @class = \"text-danger\" })\n                \u003c/div\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv class=\"form-group\"\u003e\n                \u003cdiv class=\"col-md-offset-2 col-md-10\"\u003e\n                    \u003cinput type=\"submit\" value=\"Create\" class=\"btn btn-default\" /\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    }\n    \n    \u003cdiv\u003e\n        @Html.ActionLink(\"Back to List\", \"Index\")\n    \u003c/div\u003e\n    \n    @section Scripts {\n        @Scripts.Render(\"~/bundles/jqueryval\")\n    }\n```\n\nIn the HTML structure above we have three main inputs:\n\n- A text input element, which holds the title of the post.\n- A text input element, which holds the content of the post.\n- A button element, which is used to submit the new entry.\n\n### The details view and Vue.js bindings**\n\nThis is the final View file we will be needing. This file also handles binding to Pusher events and updating the comments in realtime using Pusher and Vue.\nLet us create a new file called `Details.cshtml` in our `Views\\Home` folder and add the following content into it:\n\n```\n    @model Real_Time_Commenting.Models.BlogPost\n    \n    @{\n        ViewBag.Title = \"Details\";\n    }\n    \n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.3.4/vue.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.2/axios.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"//js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cstyle\u003e\n        .user_name{\n        font-size:14px;\n        font-weight: bold;\n    }\n    .comments-list .media{\n        border-bottom: 1px dotted #ccc;\n    }\n    \u003c/style\u003e\n    \u003ch2\u003eDetails\u003c/h2\u003e\n    \u003cdiv id=\"app\"\u003e\n        \u003cdiv\u003e\n            \u003ch4\u003eBlogPost\u003c/h4\u003e\n            \u003chr /\u003e\n            \u003cdl class=\"dl-horizontal\"\u003e\n                \u003cdt\u003e\n                    @Html.DisplayNameFor(model =\u003e model.Title)\n                \u003c/dt\u003e\n    \n                \u003cdd\u003e\n                    @Html.DisplayFor(model =\u003e model.Title)\n                \u003c/dd\u003e\n    \n                \u003cdt\u003e\n                    @Html.DisplayNameFor(model =\u003e model.Body)\n                \u003c/dt\u003e\n    \n                \u003cdd\u003e\n                    @Html.DisplayFor(model =\u003e model.Body)\n                \u003c/dd\u003e\n    \n            \u003c/dl\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-8\"\u003e\n                    \u003cdiv class=\"page-header\"\u003e\n                        \u003ch1\u003e\u003csmall class=\"pull-right\"\u003e{{comments.length}} comments\u003c/small\u003e Comments \u003c/h1\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"comments-list\"\u003e\n                        \u003cdiv class=\"media\" v-for=\"com in comments\"\u003e\n                            \u003cdiv class=\"media-body\"\u003e\n                                \u003ch4 class=\"media-heading user_name\"\u003e{{com.Name}}\u003c/h4\u003e\n                                {{com.Body}}\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003cbr /\u003e\n            \u003cp\u003eYour Comment\u003c/p\u003e\n            \u003cform onsubmit=\"return false;\"\u003e\n                \u003cinput type=\"text\" id=\"Name\" placeholder=\"Your Name\" v-model=\"comment.Name\" class=\"form-control\" /\u003e\n                \u003ctextarea rows=\"3\" placeholder=\"Your Comment\" id=\"Body\" v-model=\"comment.Body\" class=\"form-control\"\u003e\u003c/textarea\u003e\n                \u003cbutton class=\"btn btn-success\" v-on:click=\"submit_comment()\"\u003esave\u003c/button\u003e\n            \u003c/form\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cp\u003e\n    \n        @Html.ActionLink(\"Back to List\", \"Index\")\n    \u003c/p\u003e\n```\n\nIn the above block of code, we have displayed the title and content of the current post, and **the number of comments** it has.\n\nWe have also created our comment form which comprises three main elements, which are:\n\n- Text input for the name of the person making the comment.\n- Textarea for the body of the comment.\n- Button to save the new comment into the database.\n\nNotice that we have used Vue’s `v-for` directive to iterate and display the comments which are available.\n\nAlso, note we have included some required libraries such as:\n\n- axios JavaScript library\n- Vue js JavaScript library\n- Pusher JavaScript library\n\n### Pusher bindings and Vue.js snippet\n\nBelow is our example Vue snippet used to handle the comment submission and Pusher’s realtime updates.\n\n```\n    \u003cscript\u003e\n    var pusher = new Pusher('XXX_APP_KEY', {\n        cluster: 'XXX_APP_CLUSTER'\n    });\n    var my_channel = pusher.subscribe('asp_channel');\n    var app = new Vue({\n        el: '#app',\n        data: {\n            comments: [],\n            comment: {\n                Name: '',\n                Body: '',\n                BlogPostID: @Model.BlogPostID\n            }\n        },\n        created: function() {\n            this.get_comments();\n            this.listen();\n        },\n        methods: {\n            get_comments: function() {\n                axios.get('@Url.Action(\"Comments\", \"Home\", new { id = @Model.BlogPostID }, protocol: Request.Url.Scheme)')\n                    .then((response) =\u003e {\n    \n                        this.comments = response.data;\n    \n                    });\n    \n            },\n            listen: function() {\n                my_channel.bind(\"asp_event\", (data) =\u003e {\n                    if (data.BlogPostID == this.comment.BlogPostID) {\n                        this.comments.push(data);\n                    }\n    \n                })\n            },\n            submit_comment: function() {\n                axios.post('@Url.Action(\"Comment\", \"Home\", new {}, protocol: Request.Url.Scheme)', this.comment)\n                    .then((response) =\u003e {\n                        this.comment.Name = '';\n                        this.comment.Body = '';\n                        alert(\"Comment Submitted\");\n    \n                    });\n            }\n        }\n    });\n    \u003c/script\u003e\n```\n\nIn the code block above, we have done two major activities, which are:\n\n### Uploading comment code\n\nTo process new comments from the client side to the server, the following steps were followed:\n\n- We attached a Vue event listener `@click` to our submit button which fires a method called `submit_comment`.\n- We defined a function called `submit_comment` which uses `axios` to make a POST request to our `comment` function.\n\n## Subscribing for feed additions on server from other clients\n\nAfter the comment has been sent to the server, a request is sent to Pusher to return an event with the new data we have broadcasted. To listen for these realtime events, we have:\n\n- Initialized a Pusher object while passing our app key and cluster.\n- Subscribed to our channel called `asp_channel`.\n- In the listen method in our Vue code, we declared a binding to our event called `asp_event`. In the callback function of this binding, we push the new data to our list of comments.\n\nThat’s it! Now, once a new comment is made, it also gets broadcast and we can listen using our channel to update the comments in realtime.\n\n![realtime-comments-aspnet-demo](//images.contentful.com/1es3ne0caaid/46ZgWePRgImgGm2uIQay6m/bf106f3e805723fa7fc033b95778cb35/realtime-comments-aspnet-demo.gif)\n\n## Conclusion\n\nIn this article, we have covered how to create a live commentary feature using .NET and Pusher, and creating a mini blog engine in .NET.\nYou can download it for educational purposes.\nHave any reservations or comments, let us know your feedback in the comments.","metaTitle":"Build realtime comments using ASP.NET","metaDescription":"Build a mini-blog engine with live commentary features using .NET. Create a commentary feature that will keep your blog updated in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2lZ8m2NV0ccQMgQ20eoMCU","type":"Entry","createdAt":"2018-02-14T11:49:43.237Z","updatedAt":"2018-03-01T16:19:18.132Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":9,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a to-do app with Flask","url":"todo-app-flask","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3sixk7zsAoQqqSsUWM8I8y","type":"Entry","createdAt":"2018-02-13T18:06:00.483Z","updatedAt":"2018-02-14T10:08:13.372Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Olayinka Omole","url":"olayinka-omole","email":"olayinka.omole@gmail.com","twitter":"https://twitter.com/olayinkaos","github":"https://github.com/olayinkaos","guestWriter":true}}],"projectRepo":"https://github.com/olayinkaos/flask-realtime-todo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}}],"reviewDate":"2017-10-13","description":"Build a CRUD checklist app with Flask from scratch and add realtime functionality to it.","prerequisite":"A basic understanding of Python and JavaScript are needed to follow this tutorial.","content":"[Flask](http://flask.pocoo.org/) is a really cool Python framework for building web applications. One of its major selling points is how simple it is to get started on building apps with it. In this tutorial, we will build a simple Flask [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) application, and add realtime functionality to it using the superpowers Pusher grants us.\n\nOur CRUD app is a simple realtime to-do list app that can find use in distributed teams, for example to manage their deliverables.\n\nHere is what the final app will look like:\n\n![todo-app-flask-pusher-demo](//images.contentful.com/1es3ne0caaid/4y0xYUc9a8S4weouc2yoSS/7d722ecbf572aa73aa94a16f8ad3a4ef/todo-app-flask-pusher-demo.gif)\n\n## Prerequisites \n\nTo follow along properly, basic knowledge of Python, Flask and JavaScript (ES6 syntax) is needed. You will also need the following installed:\n\n1. [Python](https://www.python.org/)\n2. [virtualenv](https://virtualenv.pypa.io/en/stable/)\n3. [Flask](http://flask.pocoo.org/)\n\nVirtualenv is great for creating isolated Python environments, so we can install dependencies (like Flask) in an isolated environment, and not pollute our global packages directory. To install virtualenv:\n\n```\n    pip install virtualenv\n```\n\n## Setup and Configuration\n\n### Installing Flask\nNow, we can create our project folder, activate a virtual environment in it, and install Flask.\nTo activate a virtual environment:\n\n```\n    mkdir realtime-todo\n    cd realtime-todo\n    virtualenv .venv\n    source .venv/bin/activate\n```\n\nTo install Flask:\n\n```\n    pip install flask\n```\n\n### Setting up Pusher\nWe will be using Pusher to power our realtime updates. Head over to Pusher.com and [register for a free account](https://pusher.com/signup?plan=sandbox), if you don’t already have one. Then create an app on the [dashboard](https://dashboard.pusher.com/), and copy out the app credentials (App ID, Key, Secret and Cluster). It is super straight-forward.\n\nWe also need to install the Pusher Python Library to communicate with Pusher on the backend:\n\n```\n    pip install pusher\n```\n\n### File and Folder Structure\nWe will keep things super simple and will only create a couple of files. Here’s the file/folder structure used:\n\n    ├── realtime-todo\n           ├── app.py\n           ├── static\n           └── templates\n\nThe `static` folder will contain the static files to be used [as per Flask standards](http://flask.pocoo.org/docs/0.12/tutorial/folders/), and the `templates` folder will contain the HTML templates for the app. `App.py` is the main entrypoint for our app and will contain all our server-side code.\n\n\n## Building Our App Backend\n\nNext, we will write code to show a simple view and create endpoints for adding, updating and deleting our to-do's. We will not be persisting the data to a database, but will instead use Pusher events to broadcast data to all users subscribed to our channel.\n\nUpdating `app.py`:\n\n```\n    # ./app.py\n    \n    from flask import Flask, render_template, request, jsonify\n    from pusher import Pusher\n    import json\n    \n    # create flask app\n    app = Flask(__name__)\n    \n    # configure pusher object\n    pusher = Pusher(\n      app_id='YOUR_APP_ID',\n      key='YOUR_APP_KEY',\n      secret='YOUR_APP_SECRET',\n      cluster='YOUR_APP_CLUSTER',\n      ssl=True\n    )\n    \n    # index route, shows index.html view\n    @app.route('/')\n    def index():\n      return render_template('index.html')\n    \n    # endpoint for storing todo item\n    @app.route('/add-todo', methods = ['POST'])\n    def addTodo():\n      data = json.loads(request.data) # load JSON data from request\n      pusher.trigger('todo', 'item-added', data) # trigger `item-added` event on `todo` channel\n      return jsonify(data)\n    \n    # endpoint for deleting todo item\n    @app.route('/remove-todo/\u003citem_id\u003e')\n    def removeTodo(item_id):\n      data = {'id': item_id }\n      pusher.trigger('todo', 'item-removed', data)\n      return jsonify(data)\n    \n    # endpoint for updating todo item\n    @app.route('/update-todo/\u003citem_id\u003e', methods = ['POST'])\n    def updateTodo(item_id):\n      data = {\n        'id': item_id,\n        'completed': json.loads(request.data).get('completed', 0)\n      }\n      pusher.trigger('todo', 'item-updated', data)\n      return jsonify(data)\n    \n    # run Flask app in debug mode\n    app.run(debug=True)\n```\n\nIn the code block above, after importing the needed modules and objects and initialising a Flask app, we initialise and configure Pusher. Remember to replace `YOUR_APP_ID` and similar values with the actual values gotten from the Pusher dashboard for your app. With this `pusher` object, we can then trigger events on whatever channels we define.\n\nA clear example of this is seen in the `addTodo()` procedure, where we trigger an `item-added` event on the `todo` channel with the `trigger` method. The trigger method has the following syntax:\n\n```\n    pusher.trigger('a_channel', 'an_event', {'some': 'data'})\n```\n\nYou can find the docs for the Pusher Python library [here](https://github.com/pusher/pusher-http-python), to get more information on configuring and using Pusher in Python.\n\nIn the code above, we also created an index route which is supposed to show our app view by rendering the `index.html` template. In the next step, we will create this view and start communicating with our Python backend.\n\n\n## Creating Our App View\n\nNow, we  create our main app view in `./templates/index.html`. This is where the interface for our app will live.\n\nFirst we will pull [CSS for TodoMVC apps](https://raw.githubusercontent.com/tastejs/todomvc-app-css/master/index.css) to take advantage of some pre-made to-do list app styles, and store the folder in the `./static` folder.\n\nNext, we can write the basic markup for the view:\n\n``` html\n    \u003c!-- ./templates/index.html --\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n      \u003c!-- link to the Todo MVC index.css file --\u003e\n      \u003clink rel=\"stylesheet\" href=\"/static/todomvc-app-css/index.css\"\u003e\n      \u003ctitle\u003eRealtime Todo List\u003c/title\u003e\n    \u003c/head\u003e\n    \n    \u003cbody\u003e\n      \u003csection class=\"todoapp\"\u003e\n        \u003cheader class=\"header\"\u003e\n          \u003ch1\u003eTodos\u003c/h1\u003e\n          \u003cinput class=\"new-todo\" placeholder=\"What needs to be done?\" \n            autofocus=\"\" onkeypress=\"addItem(event)\"\u003e\n        \u003c/header\u003e\n        \n        \u003csection class=\"main\"\u003e\n          \u003cul class=\"todo-list\"\u003e\u003c/ul\u003e\n        \u003c/section\u003e\n        \n        \u003cfooter class=\"footer\"\u003e\u003c/footer\u003e  \n      \u003c/section\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the above markup, notice we added an `addItem()` function to be called `onkeypress` for the `.new-todo` input. In the following steps we will define this function, as well as other JavaScript functions to handle the basic app functions and interact with our Python backend.\n\n\n### Creating, Removing and Updating To-do Items\nNow, we can add the JavaScript code to interact with the to-do items. Whenever an item is to be added, removed or updated, we will make API calls to our backend to affect those changes. We will do this with the simple and intuitive [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API):\n\n``` html\n    \u003c!-- ./templates/index.html --\u003e\n    \u003chtml\u003e\n      \u003c!-- // ... --\u003e\n      \u003cscript\u003e\n        // function that makes API call to add an item\n        function addItem(e) {\n          // if enter key is pressed on the form input, add new item\n          if (e.which == 13 || e.keyCode == 13) {\n            let item = document.querySelector('.new-todo');\n            fetch('/add-todo', {\n              method: 'post',\n              body: JSON.stringify({ \n                id: `item-${Date.now()}`,\n                value: item.value,\n                completed: 0\n              })\n            })\n            .then(resp =\u003e {\n              // empty form input once a response is received\n              item.value = \"\"\n            });\n          }\n        }\n    \n        // function that makes API call to remove an item\n        function removeItem(id) {\n          fetch(`/remove-todo/${id}`);\n        }\n    \n        // function that makes API call to update an item \n        // toggles the state of the item between complete and\n        // incomplete states\n        function toggleComplete(elem) {\n          let id = elem.dataset.id,\n              completed = (elem.dataset.completed == \"1\" ? \"0\" : \"1\");\n          fetch(`/update-todo/${id}`, {\n            method: 'post',\n            body: JSON.stringify({ completed })\n          });\n        }\n        \n        // helper function to append new ToDo item to current ToDo list\n        function appendToList(data) {\n          let html = `\n            \u003cli id=\"${data.id}\"\u003e\n              \u003cdiv class=\"view\"\u003e\n                \u003cinput class=\"toggle\" type=\"checkbox\" onclick=\"toggleComplete(this)\" \n                  data-completed=\"${data.completed}\" data-id=\"${data.id}\"\u003e\n                \u003clabel\u003e${data.value}\u003c/label\u003e\n                \u003cbutton class=\"destroy\" onclick=\"removeItem('${data.id}')\"\u003e\u003c/button\u003e\n              \u003c/div\u003e\n            \u003c/li\u003e`;\n          let list = document.querySelector(\".todo-list\")\n          list.innerHTML += html;\n       };\n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n\u003e **Note:** The JavaScript Fetch API is great for making AJAX requests, although it requires a polyfill for older browsers. A great alternative is [axios](https://github.com/mzabriskie/axios).\n\nIn the above block of code, we define 4 functions to help us interact with the items on our to-do list. The `addItem()` function makes a [POST](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) API call to add a new item to the to-do list, with the value from our input field, we also try to mock a unique ID for each item by assigning them a value of `item-${Date.now()}` (ideally this would be implemented by our data store, but it is beyond the scope of this tutorial). Lastly, we assign an initial state of `0` to the `completed` property for each item, this is to show that the item is just added, and has not yet been completed.\n\nThe `removeItem()` function makes a request to delete an item, while the `toggleComplete()` function makes a request to update the `completed` property of an item. An `appendToList()` helper function is also defined to update our to-do list with new items, this helper function will be used in the next step when we start listening for events.\n\n### Listening For Events\nIn this step we will listen for events from Pusher, and update our app view based on the data received. Updating `index.html`:\n\n``` language-html\n    \u003c!-- ./templates/index.html --\u003e\n    \u003chtml\u003e\n      \u003c!-- .// --\u003e\n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \n      \u003cscript\u003e\n        // Enable pusher logging for debugging - don't include this in production\n        Pusher.logToConsole = true;\n    \n        // configure pusher\n        const pusher = new Pusher('YOUR_APP_KEY', {\n          cluster: 'eu', // gotten from Pusher app dashboard\n          encrypted: true // optional\n        });\n    \n        // subscribe to `todo` public channel, on which we'd be broadcasting events\n        const channel = pusher.subscribe('todo');\n    \n        // listen for item-added events, and update todo list once event triggered\n        channel.bind('item-added', data =\u003e {\n          appendToList(data);\n        });\n    \n        // listen for item-removed events\n        channel.bind('item-removed', data =\u003e {\n          let item = document.querySelector(`#${data.id}`);\n          item.parentNode.removeChild(item);\n        });\n    \n        // listen for item-updated events\n        channel.bind('item-updated', data =\u003e {\n          let elem = document.querySelector(`#${data.id} .toggle`);\n          let item = document.querySelector(`#${data.id}`);\n          item.classList.toggle(\"completed\");\n          elem.dataset.completed = data.completed;\n          elem.checked = data.completed == 1;\n        });\n        \n        // ...\n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe first thing we have to do here is to include the [pusher-js](https://github.com/pusher/pusher-js) library to help us communicate with the Pusher service. Next, we initialise the Pusher service by passing in our App Key, and some other options — for a full list of configuration options, you can check the docs [here](https://github.com/pusher/pusher-js#configuration).\n\nAfter successfully initialising Pusher and assigning it to the `pusher` object we can then subscribe to the channel from which we want to receive events, in our case that’s the public `todo` channel:\n\n```\n    const channel = pusher.subscribe('todo');\n```\n\n\u003e Note: Pusher provides various types on channels, including Public, Private and Presence channels. Read about them [here](https://pusher.com/docs/client_api_guide/client_channels#channel_types).\n\nFinally, we `bind` the various events we’re listening for on the channel. The `bind()` method has the following syntax - `channel.bind(event_name, callback_function)`\n\nOptionally, we can add a loader to the page, which would show whenever a request is made.\nThe final `index.html` file would look like [this](https://github.com/olayinkaos/flask-realtime-todo/blob/master/templates/index.html), and our app should be ready now!\n\nTo run our app:\n\n```\n    python app.py\n```\n\nAnd here is what the demo looks like:\n\n![todo-app-flask-pusher-demo](//images.contentful.com/1es3ne0caaid/4y0xYUc9a8S4weouc2yoSS/7d722ecbf572aa73aa94a16f8ad3a4ef/todo-app-flask-pusher-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have learned how to build a Python Flask project from scratch and add realtime functionality to it using Pusher and Vanilla JavaScript. The entire code for this tutorial is [hosted on GitHub](https://github.com/olayinkaos/flask-realtime-todo).\n\nThere are many other use cases for adding realtime functionality to Python applications. Do you have any more improvements, suggestions or use cases? Let us know in the comments!","metaTitle":"Build a to-do app with Flask","metaDescription":"Build a CRUD checklist app with Python, add realtime functionality and improve your productivity."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2g7hdVlJWICOksEsWgW8gW","type":"Entry","createdAt":"2018-02-22T15:02:41.356Z","updatedAt":"2018-02-28T11:28:42.463Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime chart in Swift","url":"chart-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/Realtime-iOS-Chart","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2017-10-11","description":"Create a simple realtime chart in iOS using Swift, Node.js and Pusher.","prerequisite":"A basic understanding of Swift and Node.js is needed to follow this tutorial.","content":"Nowadays, gathering data is one of the keys to understanding how products are perceived. Gathering some data from users can help you build better products and understand your users. However, all the data in the world would be useless without a way to visualize it.  \n\nIn this article, we will explore how to create a simple realtime chart in iOS. The chart will receive data and update in realtime to the screens of everyone currently logged into your application. We will assume this is a chart that monitors how many visitors are using a website. Let’s begin.\n\nFor context, here is a sample of what we will be building:\n\n![realtime-chart-swift-demo](//images.contentful.com/1es3ne0caaid/jZfPcqCZIkYMW2saIqGSE/d3a698f353264b1b64fe76fa7a1bc99b/realtime-chart-swift-demo.gif)\n\n## Requirements for building a realtime chart in iOS\n\nBefore we begin this tutorial, you will need to have the following requirements settled:\n- A MacBook Pro.\n- [Xcode](https://developer.apple.com/xcode/) installed on your machine.\n- Basic knowledge of [Swift](https://developer.apple.com/swift/) and using Xcode. \n- Basic knowledge of JavaScript (Node.js).\n- [Node.js](https://docs.npmjs.com/getting-started/installing-node) and NPM installed on your machine. \n- [Cocoapods](http://www.raywenderlich.com/12139/introduction-to-cocoapods) ****installed on your machine.\n- A [Pusher](https://pusher.com) application.\n\nWhen you have all the requirements, then we can begin.\n\n## Preparing to create our realtime chart application in Xcode\n\nLaunch Xcode on your Mac and create a new project (call it whatever you want). Follow the new application wizard and create a new **Single-page application**. Once the project has been created, close Xcode and launch your terminal application.\n\nIn the terminal, `cd` to the root of the application directory. Then run the command `pod init`. This will generate a **Podfile**. Update the contents of the Podfile to the contents below (replace `PROJECT_NAME` with your project name):\n\n```\n    platform :ios, '9.0'\n    target 'PROJECT_NAME' do\n      use_frameworks!\n      pod 'Charts', '~\u003e 3.0.2'\n      pod 'PusherSwift', '~\u003e 4.1.0'\n      pod 'Alamofire', '~\u003e 4.4.0'\n    end\n```\n\nSave the Podfile and then go to your terminal and run the command: `pod install`. \n\nRunning this command will install all the third-party packages we need to build our realtime iOS chart application. \n\nThe first package it will install is [Charts](https://github.com/danielgindi/Charts), which is a package for making beautiful charts on iOS. The second package is the Pusher swift SDK. The last package is [Alamofire](https://github.com/Alamofire/Alamofire), a package for making HTTP requests on iOS.\n\nOnce the installation is complete, open the `**.xcworkspace**` file in your project directory root. This should launch Xcode. Now we are ready to start creating our iOS application.\n\n## Creating our realtime chart application views in Xcode\n\nTo begin, we will create the necessary views we need for our realtime chart application. Open the **Main.storyboard** file and let’s start designing our view.\n\nFirst, create a rectangular view from edge to edge at the top of the View Controller in the storyboard. In that view, add a button and add the title “Simulate Visits”. Next, create another view that is also a rectangle, spanning from the end of the first view above to the bottom of the screen. This view will be where we will render the realtime chart.\n\nWhen you are done creating the views, you should have something like shown in the image below. \n\n![realtime-chart-swift-ui](//images.contentful.com/1es3ne0caaid/1O88STS0FuocckSk40waUe/1b585fe12cbece8c88e3b5be91c56d84/realtime-chart-swift-ui.png)\n\nAs it currently stands, the views do nothing. Let us connect some functionality to the iOS chart application view.\n\n## Adding basic functionality to our iOS chart application\n\nAs said before, our application’s views and buttons are not connected to our `ViewController` so let’s fix that.\n\nIn Xcode, while the storyboard is still open, click on the “Show the Assistant Editor” button on the top right of the page to split the view into storyboard and code view. Now, click once on the button you created, and while holding `ctrl`, click and drag the link to the code editor. Then create an `@IBaction` as seen in the images below:\n\n![realtime-chart-swift-building-ui](//images.contentful.com/1es3ne0caaid/1D1EaEKqyEUkmWWMI8cmyw/5116f984e303f60879ac8c79e6430947/realtime-chart-swift-building-ui.png)\n\n![realtime-chart-swift-button-pressed](//images.contentful.com/1es3ne0caaid/6A57x8tLIQA0qoy6KOwyWE/58dcc55659a10f164cd364e26cf36fc7/realtime-chart-swift-button-pressed.png)\n\nWhen the link is complete, you should see something like this added to the code editor:\n\n```\n    @IBAction func simulateButtonPressed(_ sender: Any) {\n    }\n```\n\nGreat! Now that you have created the first link, we will have to create one more link to the chart view.\n\nOn your storyboard, click the view and on the “Identity Inspection” tab, make sure the view is connected to `LineChartView`  as seen below.\n\n![realtime-chart-swift-linechartview](//images.contentful.com/1es3ne0caaid/4OGvHi0ILma0S8YACG0qEa/ca3086f6078f88e2a69e9d12cf1e6b3d/realtime-chart-swift-linechartview.png)\n\nNow that the view is connected to a view class, repeat the same as we did before to link the button, only this time instead of creating an `@IBAction` we will create an `@IBOutlet`. Images are shown below:\n\n![realtime-chart-swift-insert-outlet](//images.contentful.com/1es3ne0caaid/UkxSeK3PoqGiUwwgOmCQs/412ba6c5d70f5a770e9211dd39bb74e8/realtime-chart-swift-insert-outlet.png)\n\n![realtime-chart-swift-outlet](//images.contentful.com/1es3ne0caaid/5ZTSOoHCne2GCoOCwSYkAG/745a9f6c6b6d95c29c56359008ff4cb7/realtime-chart-swift-outlet.png)\n\nWhen the link is complete, you should see something like this added to the code editor:\n\n```\n    @IBOutlet weak var chartView: LineChartView!\n```\n\nFinally, at the top of the `ViewController` import the Charts package. You can add the code below right under `import UIKit` in the `ViewController`.\n\n```\n    import Charts\n```\n\nNow that we have linked both elements to our code, every time the **Simulate Visits** button is pressed, the **simulateButtonPressed** function will be called.\n\n\n## Adding realtime functionality to our iOS chart application\n\nThe final piece of the puzzle will be displaying a chart and making it update in realtime across all devices viewing the chart.\n\nTo achieve this, we will do the following:\n- Create a function that updates our chart depending on the numbers.\n- Make our request button call the backend which will in turn send simulated data to Pusher.\n- Create a function that listens for events from Pusher and, when one is received, it triggers the update chart function we created earlier.\n\n### Create a trigger function to update our chart\nLet’s create the function that updates our chart depending on the numbers supplied to it. Open the `ViewController`, and in it declare a class property right under the class declaration. We will use this property to track the visitors:\n\n```\n    var visitors: [Double] = []\n```\n\nNext, we will add the function that will do the actual update to the chart view:\n\n```\n    private func updateChart() {\n        var chartEntry = [ChartDataEntry]()\n        \n        for i in 0..\u003cvisitors.count {\n            let value = ChartDataEntry(x: Double(i), y: visitors[i])\n            chartEntry.append(value)\n        }\n        \n        let line = LineChartDataSet(values: chartEntry, label: \"Visitor\")\n        line.colors = [UIColor.green]\n        \n        let data = LineChartData()\n        data.addDataSet(line)\n        \n        chartView.data = data\n        chartView.chartDescription?.text = \"Visitors Count\"\n    }\n```\n\nIn the code above, we declare `chartEntry` where we intend to store all our chart data. Then we loop through the available `visitors` and, for each of them, we add a new `ChartDataEntry(x: Double(i), y: visitors[i])` that tells the chart the X and Y positions.\n\nWe set the color the line chart will be displayed in. We create the `LineChartData` and add the `line` which contains our data points. Finally, we add the data to the `chartView` and set the chart view description.\n\n### Make our simulate button call an endpoint\nThe next thing we need to do is make our request button trigger a backend which will in turn send simulated data to Pusher. \n\nTo do this, we need to update the view controller one more time. In the `ViewController` import the Alamofire package right under the Charts package:\n\n```\n    import Alamofire\n```\n\nNow replace the `simulateButtonPressed` function with the code below:\n\n```\n    @IBAction func simulateButtonPressed(_ sender: Any) {\n        Alamofire.request(\"http://localhost:4000/simulate\", method: .post).validate().responseJSON { (response) in\n            switch response.result {\n            case .success(_):\n                _ = \"Successful\"\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n```\n\nIn the code below, we use Alamofire to send a POST request to http://localhost:4000/simulate which is a local web server (we will create this backend soon). In a real application, this will typically point to a real web server.\n\nThis endpoint does not take any parameters in order to keep the tutorial simple. We also do not need to do anything with the response. We just need the POST request to be sent every time the simulate visits button is pressed.\n\n### Tie in realtime functionality using Pusher\nTo make all this work, we will create a function that listens for events from Pusher and, when one is received, we save the value to `visitors` and then trigger the update chart function we created earlier.\n\nTo do this, open the `ViewController` and import the `PusherSwift` SDK under the Alamofire package at the top:\n\n```\n    import PusherSwift\n```\n\nNext, we will declare a class property for the Pusher instance. We can do this right under the `visitors` declaration line:\n\n```\n    var pusher: Pusher!\n```\n\nThen after declaring the property, we need to add the function below to the class so it can listen to the events:\n\n```\n    private func listenForChartUpdates() {\n        pusher = Pusher(key: \"PUSHER_KEY\", options: PusherClientOptions(host: .cluster(\"PUSHER_CLUSTER\")))\n    \n        let channel = pusher.subscribe(\"visitorsCount\")\n        \n        channel.bind(eventName: \"addNumber\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String: AnyObject] {\n                let count = data[\"count\"] as! Double\n                self.visitors.append(count)\n                self.updateChart()\n            }\n        })\n        \n        pusher.connect()\n    } \n```\n\nIn the code above, we instantiate Pusher and pass in our key and the cluster (you can get your key and cluster from your Pusher application’s dashboard). We then subscribe to the `visitorsChannel` and bind to the event name `addNumber` on that channel.\n\nWhen the event is triggered, we fire the logic in the callback which simply appends the count to `visitors` and then calls the `updateChart` function, which updates the actual Chart in realtime.\n\nFinally we call `pusher.connect()` which forms the connection to Pusher.\n\nIn the `viewDidLoad` function just add a call to the `listenForChartUpdates` method:\n\n```\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    \n        // ...stuff    \n    \n        listenForChartUpdates()\n    }\n```\n\nThat’s all! We have created our application in Xcode and we are ready for testing. However, to test, we need to create the backend that we send a `POST` request to when the button is clicked. To create this backend, we will be using Node.js. Let’s do that now.\n\n\n## Creating the backend service for our realtime iOS chart application\n\nTo get started, create a directory for the web application and then create some new files inside the directory:\n\nFile: **index.js**\n \n```\n    // -------------------------------------------------------\n    // Require Node dependencies\n    // -------------------------------------------------------\n    \n    let Pusher     = require('pusher');\n    let express    = require('express');\n    let bodyParser = require('body-parser');\n    let app        = express();\n    \n    // Instantiate Pusher\n    let pusher     = new Pusher(require('./config.js'));\n    \n    // -------------------------------------------------------\n    // Load express middlewares\n    // -------------------------------------------------------\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // -------------------------------------------------------\n    // Simulate multiple changes to the visitor count value,\n    // this way the chart will always update with different\n    // values.\n    // -------------------------------------------------------\n    \n    app.post('/simulate', (req, res, next) =\u003e {\n      var loopCount = 0;\n      let sendToPusher = setInterval(function(){\n        let count = Math.floor((Math.random() * (100 - 1)) + 1)\n        pusher.trigger('visitorsCount', 'addNumber', {count:count})\n        loopCount++;\n        if (loopCount === 20) {\n          clearInterval(sendToPusher);\n        }\n      }, 2000);\n      res.json({success: 200})\n    })\n    \n    \n    // Handle index\n    app.get('/', (req, res) =\u003e {\n      res.json(\"It works!\");\n    });\n    \n    // Handle 404's\n    app.use((req, res, next) =\u003e {\n        let err = new Error('Not Found');\n        err.status = 404;\n        next(err);\n    });\n    \n    // -------------------------------------------------------\n    // Serve application\n    // -------------------------------------------------------\n    \n    app.listen(4000, function(){\n        console.log('App listening on port 4000!')\n    });\n```\n\nThe file above is a simple Express application written in JavaScript. We instantiate all the packages we require and configure pusher using a config file we will create soon. Then we create a route `/simulate` and in this route we trigger the `addNumber` event in the `visitorCount` channel. This is the same channel and event the application is listening for.\n\nTo make it a little easier, we use `setInterval` to send a random visitor count to the Pusher backend every 2000 milliseconds. After looping for 20 times, the loop stops. This should be sufficient to test our application.\n\nCreate the next file **config.js**:\n\n``` language-javascript\n    module.exports = {\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n    };\n```\n\nReplace the `PUSHER_APP_*` keys with the credentials from your own Pusher application.\n\nThe next and final file is **package.json**:\n\n```\n    {\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.16.0\",\n        \"express\": \"^4.14.1\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nIn this file we simply declare dependencies.\n\nNow open terminal and `cd` to the root of the web application directory and run the commands below to install the NPM dependencies and run the application respectively:\n\n```\n    $ npm install\n    $ node index.js\n```\n\nWhen installation is complete and the application is ready you should see the output below:\n\n![realtime-chart-swift-output](//images.contentful.com/1es3ne0caaid/GOS7Vf8b04SEGowUu40aC/692d59e41b38bf987567d0b34edb9379/realtime-chart-swift-output.png)\n\n## Testing the application\n\nOnce you have your local node web server running, you will need to make some changes so your application can talk to the local web server. In the `info.plist` file, make the following changes:\n\n![realtime-chart-swift-arbitrary-loads](//images.contentful.com/1es3ne0caaid/6lABWfuYrCam8Wa2IWAoQ2/b495564400cd813ca96cc8a35007c0d0/realtime-chart-swift-arbitrary-loads.png)\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n## Conclusion\n\nThis article has shown you how you can combine Pusher and the Charts package to create a realtime iOS chart application. There are many other chart types you can create using the package but, for brevity, we have done the easiest. You can explore the other chart types and even pass in multiple data points per request.","metaTitle":"Build a realtime chart in Swift","metaDescription":"Create a realtime chart in iOS using Swift, Node.js and Pusher. Receive data and updates live info on the screens of everyone logged into your application."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1BUhApV5HiM4QEssCU2m8s","type":"Entry","createdAt":"2018-02-22T15:02:41.414Z","updatedAt":"2018-02-28T13:05:55.791Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a user status update in Swift","url":"user-status-update-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-ios-status-update","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2017-10-05","description":"Create an iOS application with realtime user status updates, similar to WhatsApp.","prerequisite":"A good knowledge of Swift and a basic understanding of JavaScript are needed to follow this tutorial.","content":"When building chat applications, it is not uncommon to see something like a friends’ list with the status of the friend. Applications like WhatsApp have this feature and it is very useful to check the status of your friend and know if it is wise to send them a message at that point.\n\nWe are going to be building a similar feature in a make-believe iOS chat application. We are going to be using [Pusher](https://pusher.com) to implement realtime features to the application so that when someone posts a new status update you can see it change in realtime.\n\nHere is a screen recording of how our application will look when we are done.\n\n![user-status-update-swift-demo](//images.contentful.com/1es3ne0caaid/45c2mCELhCY0MqasmiEcww/36df51c7c75bc3fa1d80fc98b78c548a/user-status-update-swift-demo.gif)\n\n## Getting our project ready\n\nTo get started, we need to create the iOS project and then install some dependencies that’ll be needed for the application to function correctly. Let us begin.\n\n### Setting up our project in Xcode\n\nLaunch Xcode on your machine and create a new project. Create a single application project and follow the wizard until you get to the main storyboard. Once you are there, exit Xcode.\n\nIn your terminal, `cd` to the Xcode project directory and then run the command below:\n\n```\n    $ pod init\n```\n\nThis will create a `Podfile` inside the root of your application. The Podfile is where we will define Cocoapods dependencies. Open in your text editor and replace with the following:\n\n```\n    platform :ios, '8.4'\n    \n    target 'project_name' do\n      use_frameworks!\n      pod 'PusherSwift', '~\u003e 4.0'\n      pod 'Alamofire', '~\u003e 4.4'\n    end\n```\n\nIn the above, we have just specified the dependencies we want CocoaPods to install into our application. Do not forget to substitute the *project_name*  for your actual project name.\n\nNow go to the terminal and run the command:\n\n```\n    $ pod install\n```\n\nThis should install all of the dependencies and libraries we have specified in our `Podfile`. Great! Finally, open the project directory and double-click the `.xcworkspace` file in the directory to launch your project workspace in Xcode.\n\n## Creating the User Interface of our realtime iOS application\n\nNow that we have created the project in Xcode and have successfully installed all the dependencies, the next thing we will want to do is create the user interface of our iOS application. Open the `main.storyboard` file in Xcode and let’s start designing the UI.\n\nThis is what we want to have at the end of this section:\n\n![user-status-update-swift-ui](//images.contentful.com/1es3ne0caaid/1MXWYD0FhusWmOum0MgASO/d8f41a237a06c6be7cbac1666fa15cc2/user-status-update-swift-ui.png)\n\nAdd a Navigation Controller in your canvas and make it the root view controller. When you have done this, you then need to update the `TableViewController` attached to the Navigation Controller. \n\nFirst, create a new class in Xcode using `ctrl+n`; the class name should be `FriendsViewController` and it should extend `UITableViewController`. Then, in the `main.storyboard` file, make sure you make the `TableViewController`  use the `FriendsViewController` as its custom class.\n\n![user-status-update-swift-customclass](//images.contentful.com/1es3ne0caaid/4FMHQURO52MAecQ0CIeSmG/40a1085f2b4d1fa5b8e202ef35a78f4e/user-status-update-swift-customclass.png)\n\n### Configuring the prototype cells\n\nNow that we have created the table view controller, we need to configure its cells to match what we are trying to achieve. \n\nClick on “Prototype Cells” on the main storyboard file and make the attributes inspector look something close to the image below. \n\n\u003e 💡 **For the image**  `**avatar.png**`**, you can add a 45x45 pixel image to your Xcode project and use that as the image for the cell.**\n\n![user-status-update-swift-table-view-cell](//images.contentful.com/1es3ne0caaid/YpC4JFoP8kKGyk8KigmKE/ea9c7a48bbc1c2a40663a4ed817f5c77/user-status-update-swift-table-view-cell.png)\n\nOne last thing we can do (which is completely optional) is changing the navigation bar color for our application. Let’s do that.\n\nOpen the `AppDelegate` class and in the `application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?)` method paste the following:\n\n```\n    UINavigationBar.appearance().barTintColor = UIColor(red: 18.0/255.0, green: 140.0/255.0, blue: 126.0/255.0, alpha: 1.0)\n    UINavigationBar.appearance().tintColor = UIColor.white\n    UINavigationBar.appearance().titleTextAttributes = [NSForegroundColorAttributeName: UIColor.white]\n```\n\nWith this, you have finished creating the UI for the application and all that is left is the functionality to support it. Let us do that now.\n\n\n## Creating the functionality of our realtime iOS application\n\nFor the functionality, we will divide it into two parts. The first part will focus on adding the functionality for updating the status, and the second part will focus on making the updates realtime.\n\n### Creating the initial functionality: Update status\nLets open `FriendsViewController` and make some modifications. The first modification will be adding an update “Status” button to the top right corner of the navigation bar. \n\nInside the `viewDidLoad` method of the controller, add the code below:\n\n```\n    navigationItem.title = \"Friends List\"\n    navigationItem.rightBarButtonItem = UIBarButtonItem(\n        title: \"Status\",\n        style: .plain,\n        target: self,\n        action: #selector(showPopup(_:))\n    )\n```\n\nThe code above simply sets the title of the controller in the navigation bar and adds a button to the right side of the navigation bar. \n\nIf you notice, in the `action` parameter it points to a method `showPopup` so let us create this method. Add this method to the controller:\n\n```\n    public func showPopup(_ sender: Any) {\n        let alertController = UIAlertController(\n            title: \"Update your status\",\n            message: \"What would you like your status to say?\",\n            preferredStyle: .alert\n        )\n        \n        alertController.addTextField(configurationHandler: {(_ textField: UITextField) -\u003e Void in\n            textField.placeholder = \"Status\"\n        })\n    \n        alertController.addAction(UIAlertAction(title: \"Update\", style: .default, handler: {(_ action: UIAlertAction) -\u003e Void in\n            let status = (alertController.textFields?[0].text)! as String\n            self.postStatusUpdate(message: status)\n        }))\n    \n        alertController.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n        \n        present(alertController, animated: true, completion: nil)\n    }\n```\n\nSo what we did here is, when the action is called and the `showPopup` method is invoked, the application will display a popup box that asks the user to input their status.\n\nRight now, the popup calls a method `postStatusUpdate` which does not exist in our application. Let us create this method now.\n\nIn the view controller, add the method below:\n\n```\n    public func postStatusUpdate(message: String) {\n        let params: Parameters = [\"username\": username, \"status\": message]\n        \n        Alamofire.request(FriendsViewController.API_ENDPOINT + \"/status\", method: .post, parameters: params).validate().responseJSON { response in\n            switch response.result {\n                \n            case .success:\n                _ = \"Updated\"\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n```\n\nIn this method, we are using the `Alamofire` library to make a request to an endpoint `FriendsViewController.API_ENDPOINT + \"/status``\"` (which does not yet exist). Right now, because we have not imported the Alamofire library nor defined `FriendsViewController.API_ENDPOINT` we will get errors.\n\nAt the top of the view controller, import the `Alamofire` library:\n\n```\n    import 'Alamofire'\n```\n\nAlso, inside the class, after the class definition, add the following to declare the `API_ENDPOINT` which will point to the remote HTTP server.\n\n```\n    static let API_ENDPOINT = \"http://localhost:4000\";\n```\n\n\u003e 💡  **The endpoint we are using now is a local server which will be created later on in the article. If you are using a remote server, you will need to replace this value with the URL of your server.**\n\nSo, right now, when you run the application and click the “Status” button it will bring a popup and you can enter your update. However, because we have not yet created a backend to respond to this call, it will fail and not do anything. We will get to that later in the article.\n\n### Updating the default table view controller methods\nThe table view controller comes with some methods by default, and we will quickly change them to fit our application.\n\nOpen the view controller and update the method `numberOfSections`. Make the return value 1. This will make sure that the first and only section is displayed.\n\nNext, update the `tableView(tableView: UITableView, numberOfRowsInSection: section)` method and make the return value `friends.count`. This will make sure that the right amount of rows are created for each entry on the `friends` list.\n\nTo make the cells display the details of each friend, update the contents of the `tableView(tableView:UITableView, cellForRowAt indexPath:IndexPath)` method with the code below:\n\n```\n    let cell = tableView.dequeueReusableCell(withIdentifier: \"friends\", for: indexPath)\n    \n    var status   = friends[indexPath.row][\"status\"]\n    \n    if status == \"\" {\n        status = \"User has not updated status!\"\n    }\n    \n    cell.detailTextLabel?.textColor = UIColor.gray\n    \n    cell.imageView?.image = UIImage(named: \"avatar.png\")\n    cell.textLabel?.text = friends[indexPath.row][\"username\"]\n    cell.detailTextLabel?.text = status\n    \n    return cell\n```\n\nThe code above simply gets the current cell and updates the required cell labels with the status, username and image (in case you want to add another image).\n\nFinally, add a new method to the view controller:\n\n```\n    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -\u003e CGFloat {\n        return 75.0\n    }\n```\n\nThis will just increase the row height of the table to be equal to **75.0**. This will make it easier to accommodate the contents of the cell.\n\n## Using Pusher to add a realtime update status to our iOS application\n\nNow, before we add the realtime online status updates using Pusher, we want to add some sort pseudo friends listing.\n\nWe will do the friends listing using Pusher. We will accomplish this by creating a class property that is not persistent, and in this variable, we will store details of anyone that comes online.\n\n### Adding a pseudo friends list\nIn the view controller, add some new properties:\n\n```\n    var friends : [[String:String]] = []\n    var username : String = \"\"\n    var pusher : Pusher!\n```\n\nThe `friends` property will store all the users who come online, the `username` property will store a random username for the current user, and the `pusher` property will store the Pusher library instance.\n\nNow, in the `viewDidLoad` method, add the following code:\n\n```\n    username = \"Anonymous\" + String(Int(arc4random_uniform(1000)))\n    \n    listenForRealtimeEvents()\n    \n    // --- Update online presence at intervals --- //\n    let date = Date().addingTimeInterval(0)\n    let timer = Timer(fireAt: date, interval: 1, target: self, selector: #selector(postOnlinePresence), userInfo: nil, repeats: true)\n    RunLoop.main.add(timer, forMode: RunLoopMode.commonModes)\n```\n\nOn line 1, we just assign the `username` property a random string as a username. \n\nOn line 3, we call a method `listenForRealtimeEvents` that does not yet exist (we will create this later). \n\nAnd on line 6 - 8, we just basically added a looping call to the `postOnlinePresence` (also doesn’t exist yet). This call will basically update your online presence every second.\n\nLet us create the `listenForRealtimeEvents` method now. Add the following code to the view controller:\n\n```\n    private func listenForRealtimeEvents() {\n        pusher = Pusher(key: \"PUSHER_KEY\", options: PusherClientOptions(host: .cluster(\"PUSHER_CLUSTER\")))\n        \n        let channel = pusher.subscribe(\"new_status\")\n        let _ = channel.bind(eventName: \"online\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String: AnyObject] {\n                let username = data[\"username\"] as! String\n                \n                let index = self.friends.index(where: { $0[\"username\"] == username })\n                \n                if username != self.username \u0026\u0026 index == nil {\n                    self.friends.append([\"username\": username, \"status\": \"No Status\"])\n                    self.tableView.reloadData()\n                }\n            }\n        })\n        \n        pusher.connect()\n    }\n```\n\nIn the method we just created, we just instantiated the Pusher library with our Pusher key and application cluster. Then we subscribed to a Pusher channel called **new_status** and, on that channel, we started listening for the event called **online.**\n\nIn the callback, when the event listener is triggered, we get the username from the event. We then check if there is username in the list of `friends` that matches. If there isn’t, we append it to the friends’ list and reload the table data.\n\nSo, in summary, every time someone comes online it appends the name to the friends’ list and reloads the table view.\n\nNext, we will create the method `postOnlinePresence` that will periodically post the current users online presence so others can pick it up. In the view controller add the code below:\n\n```\n    public func postOnlinePresence() {\n        let params: Parameters = [\"username\": username]\n        \n        Alamofire.request(FriendsViewController.API_ENDPOINT + \"/online\", method: .post, parameters: params).validate().responseJSON { response in\n            switch response.result {\n                \n            case .success:\n                _ = \"Online\"\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n```\n\nThe code above simply hits an endpoint and thus marks the user as online.\n\n### Adding status updates to the application with Pusher\nThe final part of our iOS application will be adding the listener for the updates so that every time someone updates their status, the update is added.\n\nTo do this, open the `listenForRealtimeEvents` method and add the following after instantiating the pusher variable:\n\n```\n    let channel = pusher.subscribe(\"new_status\")\n    let _ = channel.bind(eventName: \"update\", callback: { (data: Any?) -\u003e Void in\n        if let data = data as? [String: AnyObject] {\n            let username = data[\"username\"] as! String\n            \n            let status = data[\"status\"] as! String\n            \n            let index = self.friends.index(where: { $0[\"username\"] == username })\n            \n            if index != nil {\n                self.friends[index!][\"status\"] = status\n                self.tableView.reloadData()\n            }\n        }\n    })\n```\n\nThe above code creates a listener for the **update** event to the **new_status** channel. When the event is triggered, the callback checks if the username is part of the friends’ list. If it is, it updates the status of that entry and reloads the table view data.\n\nNow we have successfully added the realtime features to our application. The next thing we want to do is create a backend to help us actually trigger Pusher events that can be picked up by our iOS application.\n\n\n## Creating the NodeJS backend for our realtime iOS status updates app\n\nCreate a directory for the web application and then create some new files:\n\n```\n**index.js**\n\n    // ------------------------------------------------------\n    // Import all required packages and files\n    // ------------------------------------------------------\n    \n    let Pusher     = require('pusher');\n    let express    = require('express');\n    let app        = express();\n    let bodyParser = require('body-parser')\n    \n    let pusher     = new Pusher(require('./config.js'));\n    \n    // ------------------------------------------------------\n    // Set up Express middlewares\n    // ------------------------------------------------------\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // ------------------------------------------------------\n    // Define routes and logic\n    // ------------------------------------------------------\n    \n    app.post('/status', (req, res, next) =\u003e {\n      let payload = {username: req.body.username, status: req.body.status};\n      pusher.trigger('new_status', 'update', payload);\n      res.json({success: 200});\n    });\n    \n    app.post('/online', (req, res, next) =\u003e {\n      let payload = {username: req.body.username};\n      pusher.trigger('new_status', 'online', payload);\n      res.json({success: 200});\n    });\n    \n    app.get('/', (req, res) =\u003e {\n      res.json(\"It works!\");\n    });\n    \n    \n    // ------------------------------------------------------\n    // Catch errors\n    // ------------------------------------------------------\n    \n    app.use((req, res, next) =\u003e {\n        let err = new Error('Not Found: ');\n        err.status = 404;\n        next(err);\n    });\n    \n    \n    // ------------------------------------------------------\n    // Start application\n    // ------------------------------------------------------\n    \n    app.listen(4000, () =\u003e console.log('App listening on port 4000!'));\n```\n\nIn this file, we have created a basic Express application. The application has two important endpoints: `POST /online` and `POST /status`. They both trigger Pusher events with a payload which will be picked up by listeners in our iOS application.\n\nNext create the **config.js** file:\n\n```\n    module.exports = {\n        appId: 'PUSHER_ID',\n        key: 'PUSHER_KEY',\n        secret: 'PUSHER_SECRET',\n        cluster: 'PUSHER_CLUSTER',\n    };\n```\n\nThis is our Pusher configuration file. In here, replace the empty strings with the credentials provided in your Pusher dashboard.\n\nFinally, create a **package.json** file:\n\n```\n    {\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.16.0\",\n        \"express\": \"^4.14.1\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nThis file contains all the node packages required for the Node app to function properly.\n\nFinally, in the directory of your Node application, run the command below:\n\n```\n    $ npm install \u0026\u0026 node index.js\n```\n\nThe first command will install all the dependencies and the second one will start an Express server in node. When you see the message “***App listening on port 4000!”*** **then you know your backend application is ready.\n\n## Testing our realtime status update application\n\nOnce you have your local node web server running, you will need to make some changes so your application can talk to the local web server. In the `info.plist` file, make the following changes:\n\n![user-status-update-swift-arbitrary-loads](//images.contentful.com/1es3ne0caaid/5AjdqxJnck8Wa6MaE2gGIE/02a4de3f1e4ff702a6eb1c47f43a5076/user-status-update-swift-arbitrary-loads.png)\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n![user-status-update-swift-demo](//images.contentful.com/1es3ne0caaid/45c2mCELhCY0MqasmiEcww/36df51c7c75bc3fa1d80fc98b78c548a/user-status-update-swift-demo.gif)\n\n## Conclusion\n\nIn the article, we have been able to create an iOS application with realtime user status updates, similar to what an application like WhatsApp currently has.","metaTitle":"Build a user status update in Swift","metaDescription":"Create an iOS application with realtime user status updates, similar to WhatsApp using Swift and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rGqDofyvusUa4i0CSQ6KE","type":"Entry","createdAt":"2018-02-22T15:02:44.761Z","updatedAt":"2020-06-19T14:29:47.852Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo feed using ASP.NET","url":"photo-feed-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/ASP.NET-PHOTO-FEED","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-09-28","description":"Build a mini system that allows people to upload their photographs in realtime.","prerequisite":"A basic understanding of C# and JavaScript is needed to follow this tutorial.","content":"We will build a mini system that allows people to upload their images/photographs for everyone to view in realtime. While this can be likened to a mini-Instagram, it is without the comment, like and views aspect. Sounds cool? Let’s ride on.\n\n## Setting up a Pusher account and app\n\nPusher is a hosted service that makes it super-easy to add realtime data and functionality to web and mobile applications.\n\nPusher sits as a realtime layer between your servers and your clients. Pusher maintains persistent connections to the clients - over Websockets if possible and falling back to HTTP-based connectivity - so that as soon as your servers have new data they want to push to the clients they can do so via Pusher.\n\nIf you do not already have one, head over to [Pusher](https://Pusher.com) and create a free account.\nWe will register a new app on the dashboard. The only compulsory options are the app name and cluster. A cluster represents the physical location of the Pusher server that will handle your app’s requests. Also, select `jQuery` as the front-end technology, and `ASP.NET` as the back-end tech for this tutorial.  For other projects, you can choose as per your requirements.\nNext, copy out your App ID, Key, and Secret from the `App Keys` section, as we will need them later on.\n\n![photo-feed-aspnet-create-app](//images.contentful.com/1es3ne0caaid/cCYiSwvQicgakmOOEwSMq/2038fcd7642b17465b331d51bcd502b9/photo-feed-aspnet-create-app.png)\n\n## Setting up the ASP.NET project in Visual Studio\n\nThe next thing we need to do is create a new Asp.Net MVC application. \nTo do so, let’s:\n\n- Open Visual Studio and select new project from the sidebar\n- Under templates, select `Visual C#`\n- Next, select web\n- In the middle section, select `ASP.N``ET MVC Web Applicat``ion`.\n\nFor this tutorial, I named the project: `Real-time-photo-feed`.\nNow we are almost ready. The next step will be to install the official `Pusher` library for .Net using the `NuGet Package`.\n\nTo do this, we go to tools, via the menu on the top bar, click on `NuGet Package Manager`, on the drop-down we select `Package Manager Console`.\n\nWe will see the `Package Manager Console` at the bottom of our Visual Studio. Next, let’s install the package by running:\n\n```\n    Install-Package PusherServer\n```\n\nAlternatively, we can also install the `Pusher` library using the `NuGet Package Manager UI`. To do this, in the `**S**``olution Explorer`, right-click either `References` or a project and select `Manage NuGet Packages`. The Browse tab displays available packages by popularity. Search for the `Pusher` package by typing in `PusherServer` into the search box on the top right. Select the Pusher package to display the package information on the right and to enable the `Install` button.\n\n## Crafting our application\n\nNow that our environment is set up and ready, let’s dive into writing code.\nBy default, Visual Studio creates three controllers for us, however we will use the `HomeController` for the application logic.\nThe first thing we want to do is to define a model that stores the list of images we have in the database.\nUnder the `models` folder, let’s create a file named `PhotoFeed.cs` and add the following content:\n\n```\n    using System;\n    using System.Collections.Generic;\n    using System.ComponentModel.DataAnnotations;\n    using System.Linq;\n    using System.Web;\n    \n    namespace Real_time_photo_feed.Models\n    {\n        public class PhotoFeed\n        {\n            [Key]\n            public int Id { get; set; }\n            [Required]\n            public string Comment { get; set; }\n    \n            public string Imagepath { get; set; }\n    \n        }\n    }\n```\n\nIn the above block of code, we have declared a model called `PhotoFeed` with three main properties:\n\n- Id: This is the primary key of the model table.\n- Comment: The description of the image.\n- Imagepath: The path to the stored image.\n\nNow we have defined our model, let’s reference it in our default database context called `ApplicationDbContext`. To do this, let’s open `models\\IdentityModels.cs` file, then locate the class called `ApplicationDbContext` and add the following after the create function:\n\n```\n    public DbSet\u003cPhotoFeed\u003e FeedModel { get; set; }\n```\n\nIn the code block above, the `DBSet` class represents an entity set used for read, update, and delete operations. The entity which we will use to do CRUD operations is the `PhotoFeed` model we created earlier, and we have given it the name `FeedModel`.\n\n## Connecting our database\n\nAlthough our model is set up, we still need to attach a database to our application. To do so, select the Server Explorer on the left-hand side of our Visual Studio, right click on Data Connections and add a database.\nThere are various databases that are lightweight and can fit into the application we are building, such as:\n- Microsoft access database\n- Sqlite Database\n- MSSQL Server\n- Firebird\n- VistaDb\n\nFor this tutorial, I used the MSSQL Server.\n\n## Creating our index route\n\nNow both our model and database is set to work, let’s go ahead creating our index route. Open the `HomeController` and replace it with the following code:\n\n```\n    using PusherServer;\n    using Real_time_photo_feed.Models;\n    using System;\n    using System.Collections.Generic;\n    using System.IO;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using System.Web;\n    using System.Web.Mvc;\n    \n    namespace Real_time_photo_feed.Controllers\n    {\n        public class HomeController : Controller\n        {\n            ApplicationDbContext db = new ApplicationDbContext();\n            public ActionResult Index()\n            {\n               var me = db.FeedModel.AsQueryable();\n    \n                return View(me);\n            }\n            [HttpPost]\n            public async Task\u003cActionResult\u003e Index(PhotoFeed feed, HttpPostedFileBase upload)\n            {\n    \n                if (ModelState.IsValid)\n                {\n                    if (upload != null \u0026\u0026 upload.ContentLength \u003e 0)\n                    {\n                        var FileName = System.IO.Path.GetFileName(upload.FileName);\n                        var newpath = Path.Combine(HttpContext.Server.MapPath(\"~/UploadedFiles\"), FileName);\n                        upload.SaveAs(newpath);\n                        PhotoFeed setdata = new PhotoFeed();\n                        setdata.Comment = feed.Comment;\n                        setdata.Imagepath = \"/UploadedFiles/\"+FileName;\n                        db.FeedModel.Add(setdata);\n                        db.SaveChanges();\n    \n                        var options = new PusherOptions();\n                        options.Cluster = \"XXX_APP_CLUSTER\";\n                        var pusher = new Pusher(\"XXX_APP_ID\", \"XXX_APP_KEY\", \"XXX_APP_SECRET\", options);\n                        ITriggerResult result = await pusher.TriggerAsync(\"a_channel\", \"an_event\", setdata);\n                    }\n                }\n                    return Content(\"ok\");\n            }\n    \n        }\n    }\n```\n\nIn the code block above, we have defined our Index function for both `GET` and `POST` requests.\nBefore looking at our `GET` and `POST` controller functions, we notice that there is an import of our db context into our class with the line that says:\n\n```\n    ApplicationDbContext db = new ApplicationDbContext();\n```\n\nThis makes it possible to access our database model which we have defined using the `DbSet` class in our `ApplicationDbContext` class.\nIn the `GET` function, we have returned the view with which we will handle the addition and realtime updating of our feed.\n\nNotice that in the `GET` function, we pass a variable into the view function called `me`. This variable is a **queryable** version of our `BlogFeed` model. This will be passed to the view, which is later looped and rendered.\n\nObserve that the `POST` method is set to be asynchronous. This is because the Pusher .NET library uses the await operator to wait for the asynchronous response from the data sent to Pusher.\nIn this function, we first add our new movie to the database, then we trigger an event. Once the event has been emitted, we then return an ok string.\n\nHowever, please note that the code above would not handle any error if the Image was saved in DB but not posted using Pusher. We might need to use a try and catch statement to handle failures in posting to Pusher.\n\n## Creating our view files\n\nLet’s open up our `Views\\Home\\Index.cshtml` and replace the content with the following:\n\n```\n    @model IEnumerable\u003cReal_time_photo_feed.Models.PhotoFeed\u003e\n    \n    @{\n        Layout = null;\n    }\n    \n    \n       \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eASP.NET Photo feed\u003c/title\u003e\n        \u003clink href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"//js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \n        \u003cdiv class=\"container\"\u003e\n            \u003cform method=\"post\" enctype=\"multipart/form-data\" action=\"/Home/Index\" onsubmit=\"return feed_it()\"\u003e\n    \n                \u003cdiv class=\"form-group\"\u003e\n                    \u003clabel for=\"usr\"\u003eImage:\u003c/label\u003e\n                    \u003cinput type=\"file\" id=\"upload\" name=\"upload\" class=\"form-control\" required\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003clabel for=\"pwd\"\u003ecomment:\u003c/label\u003e\n                    \u003cinput type=\"text\" id=\"Comment\" name=\"Comment\" class=\"form-control\" required\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003cbutton type=\"submit\" class=\"btn btn-success\"\u003eFeed it\u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/form\u003e\n            \u003cdiv class=\"row\" id=\"feeds\"\u003e\n    \n    \n                @foreach (var item in Model)\n                {\n                \u003cspan\u003e\n                    \u003ch2\u003e@item.Comment\u003c/h2\u003e\n                    \u003cimg src=\"@item.Imagepath\"\u003e\n                \u003c/span\u003e\n                }\n    \n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the above block of code, we have created our form which **comprises** three main elements, which are:\n- Text input for the comment of the image.\n- File input for selecting the image we want to feed.\n- Button to save the new entry into the database.\n\nAlso, note we have included some required libraries such as:\n- Bootstrap CSS\n- jQuery JavaScript library\n- Pusher JavaScript library\n\n## Pusher bindings and jQuery snippet\n\nBelow is our example jQuery snippet used to handle the file upload and Pusher’s realtime updates.\n\n```\n    \u003cscript\u003e\n         var files;\n    \n            // Add events\n            $(document).ready(function() {\n                $('input[type=file]').on('change', prepareUpload);\n            })\n    \n    \n            // Grab the files and set them to our variable\n            function prepareUpload(event) {\n                files = event.target.files;\n            }\n    \n            function feed_it() {\n                var data = new FormData();\n                $.each(files, function(key, value) {\n                    data.append('upload', value);\n                });\n                data.append('Comment', document.getElementById('Comment').value);\n    \n    \n                $.post({\n                    url: '/Home/Index',\n                    data: data,\n                    processData: false, // Don't process the files\n                    contentType: false, // Set content type to false as jQuery will tell the server it's a query string request\n                    success: function(data) {\n                        if (data == \"ok\") {\n                            alert('done');\n                            document.getElementById('Comment').value = '';\n                        }\n                    },\n                    error: function(error) {\n                        alert('an error occured, please try again later')\n                    }\n                });\n                return false;\n            }\n            var pusher = new Pusher(\"XXX_APP_KEY\", {\n    \n                cluster: \"XXX_APP_CLUSTER\"\n            });\n            var my_channel = pusher.subscribe('a_channel');\n            my_channel.bind(\"an_event\", function(doc) {\n    \n                var new_message = `\u003cspan\u003e\n                            \u003ch2\u003e` + doc.Comment + `\u003c/h2\u003e\n                            \u003cimg  src=\"` + doc.Imagepath + `\"\u003e\n                        \u003c/span\u003e`;\n                $('#feeds').prepend(new_message);\n            });\n    \u003c/script\u003e\n```\n\nIn the code block above, we notice we have done two major activities, which are:\n\n**Uploading Image Code**\nTo process the upload of images from the client side to the server, the following steps were followed: \n\n- We attached an event listener to our file input button that stores our image into a variable called `files`.\n- We defined a function called `feed_it` which creates a new `FormData`, then appends our image and description to the form data. This function then makes an `AJAX POST` request to our `index` route.\n\n**Subscribing for Feed Additions on Server from other clients**\nAfter the image has been sent to the server, a request is sent to Pusher to return an event with the new data we have broadcasted. To listen for this realtime events, we have:\n\n- Initialized a Pusher object while passing our app key and cluster.\n- Subscribed to our channel called `a_channel`.\n- Declared a binding to our event called `an_event`. In the callback function of this binding, we have `pre-pended` the new data to our list of feeds.\n\nThat’s it! Now, once a photo gets uploaded, it also gets broadcast and we can listen using our channel to update the feed in realtime.\n\nBelow is an image of what we have built:\n\n![photo-feed-aspnet-demo](//images.contentful.com/1es3ne0caaid/7sdjWIDLSoCswsauwIQMKU/a5d8d3bd6b0efd803223fe042f9b8832/photo-feed-aspnet-demo.gif)\n\n## Conclusion\n\nIn this article, we have covered how to create a realtime photo feed using .NET and Pusher as well as handling file uploads in .NET.\nThe code base to this tutorial is available in a [public Github](https://github.com/samuelayo/ASP.NET-PHOTO-FEED).","metaTitle":"Build a photo feed using ASP.NET","metaDescription":"Build a system that allows people to upload their photographs in realtime, similar to Instagram using ASP.NET, jQuery and realtime features."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"pyEmgfpl28CuK4gOGgC2i","type":"Entry","createdAt":"2018-02-22T15:02:43.190Z","updatedAt":"2018-03-01T17:51:09.195Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build read receipts using Swift","url":"read-receipts-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/message-delivery-status-ios","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}}],"reviewDate":"2017-09-26","description":"Create an iOS chat application with a message delivery status using Swift, Node.js and Pusher for realtime functionality.","prerequisite":"A basic understanding of Swift and Node.js is needed to follow this tutorial.","content":"When building mobile chat applications, it is not uncommon to see developers adding a delivery status feature that lets you know when the message you sent has been delivered to the recipient. Instant Messaging applications like WhatsApp, Messenger, BBM, Skype and the like all provide this feature.\n\nSome of the tools that we will need to build our application are:\n\n1. [**Xcode**](https://developer.apple.com/xcode/)- The application will be built using Apple’s Swift programming language.\n2. [**NodeJS**](https://nodejs.org/en/download/) **(Express)** - The backend application will be written in NodeJS.\n3. [**Pusher**](https://pusher.com/) - Pusher will provide realtime reporting when the sent messages are delivered. You will need a Pusher application ID, key and secret. Create your free account at [pusher.com](https://pusher.com), then grab your app ID, key and secret from the Pusher dashboard.\n\nBelow is a screen recording of what we’ll be building. As you can see, when a message is sent, it is marked as sent, and the moment it hits the recipient’s phone, it is marked as delivered.\n\n![read-receipts-swift-demo](//images.contentful.com/1es3ne0caaid/57yKLaGkBikEIesQg6gQUu/10ee2f0aedc39b174bfc377031a70666/message-delivery-status-swift-demo.gif)\n\n## Getting started with our iOS application\n\nLaunch Xcode and create a new project. We are calling ours **Anonchat**. Once it has loaded the workspace, close Xcode and then `cd` to the root of your project and run the command `pod init`. This should generate a `Podfile` for you. Change the contents of the `Podfile`:\n\n```\n    # Uncomment the next line to define a global platform for your project\n    platform :ios, '9.0'\n    \n    target 'anonchat' do\n      # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\n      use_frameworks!\n    \n      # Pods for anonchat\n      pod 'Alamofire'\n      pod 'PusherSwift'\n      pod 'JSQMessagesViewController'\n    end\n```\n\nNow run the command `pod install` so the Cocoapods package manager can pull in the necessary dependencies. When this is complete, close Xcode (if open) and then open the `.xcworkspace` file that is in the root of your project folder.\n\n\n## Creating the views for our iOS application\n\nWe are going to be creating a couple of views that we will need for the chat application to function properly. The views will look something like the screenshot below:\n\n![read-receipts-swift-app-flow](//images.contentful.com/1es3ne0caaid/4IWwX3XnlCoSwIGCsWuUIg/029a6d6a6d2a854904c4fba4b82ac4b7/message-delivery-status-swift-app-flow.png)\n\nWhat we have done above is create the first ViewController which will serve as our welcome ViewController, and we have added a button which triggers navigation to the next controller which is a `Navigation Controller`. This Navigation Controller in turn has a View Controller set as the root controller.\n\n\n## Coding the message delivery status for our iOS application\n\nNow that we have set up the views using the interface builder on the `MainStoryboard`, let's add some functionality. The first thing we will do is create a `WelcomeViewController` and associate it with the first view on the left. This will be the logic house for that view; we won't add much to it for now though:\n\n```\n    import UIKit\n    \n    class WelcomeViewController: UIViewController {\n        override func viewDidLoad() {\n            super.viewDidLoad()\n        }\n    }\n```\n\nNext, we create another controller called the `ChatViewController`, which will be the main power house and where everything will be happening. The controller will extend the `JSQMessagesViewController` so that we automatically get a nice chat interface to work with out of the box, then we have to work on customizing this chat interface to work for us.\n\n```\n    import UIKit\n    import Alamofire\n    import PusherSwift\n    import JSQMessagesViewController\n    \n    class ChatViewController: JSQMessagesViewController {\n        override func viewDidLoad() {\n            super.viewDidLoad()\n    \n            let n = Int(arc4random_uniform(1000))\n    \n            senderId = \"anonymous\" + String(n)\n            senderDisplayName = senderId\n        }\n    }\n```\n\nIf you notice on the `viewDidLoad` method, we are generating a random username and setting that to be the `senderId` and `senderDisplayName` on the controller. This extends the properties set in the parent controller and is required.\n\nBefore we continue working on the chat controller, we want to create a last class called the `AnonMessage` class. This will extend the `JSQMessage` class and we will be using this to extend the default functionality of the class.\n\n\n```\n    import UIKit\n    import JSQMessagesViewController\n    \n    enum AnonMessageStatus {\n        case sending\n        case sent\n        case delivered\n    }\n    \n    class AnonMessage: JSQMessage {\n        var status : AnonMessageStatus\n        var id : Int\n    \n        public init!(senderId: String, status: AnonMessageStatus, displayName: String, text: String, id: Int?) {\n            self.status = status\n            \n            if (id != nil) {\n                self.id = id!\n            } else {\n                self.id = 0\n            }\n            \n            \n    \n            super.init(senderId: senderId, senderDisplayName: displayName, date: Date.init(), text: text)\n        }\n    \n        public required init?(coder aDecoder: NSCoder) {\n            fatalError(\"init(coder:) has not been implemented\")\n        }\n    }\n```\n\nIn the class above we have extended the `JSQMessage` class and we have also added some new properties to track: the `id` and the `status`. We also added an initialisation method so we can specify the new properties before instantiating the `JSQMessage` class properly. We also added an `enum` that contains all the statuses the message could possibly have.\n\nReturning to the `ChatViewController`, let's add a few properties to the class that we will need:\n\n``` language-swift\n    static let API_ENDPOINT = \"http://localhost:4000\";\n    \n    var messages = [AnonMessage]()\n    var pusher: Pusher!\n    \n    var incomingBubble: JSQMessagesBubbleImage!\n    var outgoingBubble: JSQMessagesBubbleImage!\n```\n\nNow that's done, let’s start customizing the controller to suit our needs. First, we will add some logic to the `viewDidLoad` method:\n\n```\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    \n        let n = Int(arc4random_uniform(1000))\n    \n        senderId = \"anonymous\" + String(n)\n        senderDisplayName = senderId\n    \n        inputToolbar.contentView.leftBarButtonItem = nil\n    \n        incomingBubble = JSQMessagesBubbleImageFactory().incomingMessagesBubbleImage(with: UIColor.jsq_messageBubbleBlue())\n        outgoingBubble = JSQMessagesBubbleImageFactory().outgoingMessagesBubbleImage(with: UIColor.jsq_messageBubbleGreen())\n    \n        collectionView!.collectionViewLayout.incomingAvatarViewSize = CGSize.zero\n        collectionView!.collectionViewLayout.outgoingAvatarViewSize = CGSize.zero\n    \n        automaticallyScrollsToMostRecentMessage = true\n    \n        collectionView?.reloadData()\n        collectionView?.layoutIfNeeded()\n    }\n```\n\nIn the above code, we started customizing the way our chat interface will look, using the parent class that has these properties already set. For instance, we are setting the `incomingBubble` to blue, and the `outgoingBubble` to green. We have also eliminated the avatar display because we do not need it right now.\n\nThe next thing we are going to do is override some of the methods that come with the parent controller so that we can display messages, customize the feel and more:\n\n```\n    override func collectionView(_ collectionView: JSQMessagesCollectionView!, messageDataForItemAt indexPath: IndexPath!) -\u003e JSQMessageData! {\n        return messages[indexPath.item]\n    }\n    \n    override func collectionView(_ collectionView: JSQMessagesCollectionView!, attributedTextForCellBottomLabelAt indexPath: IndexPath!) -\u003e NSAttributedString! {\n        if !isAnOutgoingMessage(indexPath) {\n            return nil\n        }\n    \n        let message = messages[indexPath.row]\n    \n        switch (message.status) {\n        case .sending:\n            return NSAttributedString(string: \"Sending...\")\n        case .sent:\n            return NSAttributedString(string: \"Sent\")\n        case .delivered:\n            return NSAttributedString(string: \"Delivered\")\n        }\n    }\n    \n    override func collectionView(_ collectionView: JSQMessagesCollectionView!, layout collectionViewLayout: JSQMessagesCollectionViewFlowLayout!, heightForCellBottomLabelAt indexPath: IndexPath!) -\u003e CGFloat {\n        return CGFloat(15.0)\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -\u003e Int {\n        return messages.count\n    }\n    \n    override func collectionView(_ collectionView: JSQMessagesCollectionView!, messageBubbleImageDataForItemAt indexPath: IndexPath!) -\u003e JSQMessageBubbleImageDataSource! {\n        let message = messages[indexPath.item]\n        if message.senderId == senderId {\n            return outgoingBubble\n        } else {\n            return incomingBubble\n        }\n    }\n    \n    override func collectionView(_ collectionView: JSQMessagesCollectionView!, avatarImageDataForItemAt indexPath: IndexPath!) -\u003e JSQMessageAvatarImageDataSource! {\n        return nil\n    }\n    \n    override func didPressSend(_ button: UIButton, withMessageText text: String, senderId: String, senderDisplayName: String, date: Date) {\n        let message = addMessage(senderId: senderId, name: senderId, text: text, id: nil)\n    \n        if (message != nil) {\n            postMessage(message: message as! AnonMessage)\n        }\n        \n        finishSendingMessage(animated: true)\n    }\n    \n    private func isAnOutgoingMessage(_ indexPath: IndexPath!) -\u003e Bool {\n        return messages[indexPath.row].senderId == senderId\n    }\n```\n\nThe next thing we are going to do is create some new methods on the controller that will help us post a new message. After that, we create a method to hit the remote endpoint which sends the message. Finally, we create a method to append the new message sent (or received) to the messages array:\n\n```\n    private func postMessage(message: AnonMessage) {\n        let params: Parameters = [\"sender\": message.senderId, \"text\": message.text]\n        hitEndpoint(url: ChatViewController.API_ENDPOINT + \"/messages\", parameters: params, message: message)\n    }\n    \n    private func hitEndpoint(url: String, parameters: Parameters, message: AnonMessage? = nil) {\n        Alamofire.request(url, method: .post, parameters: parameters).validate().responseJSON { response in\n            switch response.result {\n            case .success(let JSON):\n                let response = JSON as! NSDictionary\n    \n                if message != nil {\n                    message?.id = (response.object(forKey: \"ID\") as! Int) as Int\n                    message?.status = .sent\n                    self.collectionView.reloadData()\n                }\n    \n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n    \n    private func addMessage(senderId: String, name: String, text: String, id: Int?) -\u003e Any? {\n        let status = AnonMessageStatus.sending\n        \n        let id = id == nil ? nil : id;\n    \n        let message = AnonMessage(senderId: senderId, status: status, displayName: name, text: text, id: id)\n    \n        if (message != nil) {\n            messages.append(message as AnonMessage!)\n        }\n    \n        return message\n    }\n```\n\nGreat. Now every time we send a new message, the `didPressSend` method will be triggered and all the other ones will fall into place nicely!\n\nFor the last piece of the puzzle, we want to create the method that listens for Pusher events and fires a callback when an event trigger is received:\n\n```\n    private func listenForNewMessages() {\n        let options = PusherClientOptions(\n            host: .cluster(\"PUSHER_CLUSTER\")\n        )\n    \n        pusher = Pusher(key: \"PUSHER_KEY\", options: options)\n    \n        let channel = pusher.subscribe(\"chatroom\")\n    \n        channel.bind(eventName: \"new_message\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String: AnyObject] {\n                let messageId = data[\"ID\"] as! Int\n                let author = data[\"sender\"] as! String\n                \n                if author != self.senderId {\n                    let text = data[\"text\"] as! String\n    \n                    let message = self.addMessage(senderId: author, name: author, text: text, id: messageId) as! AnonMessage?\n                    message?.status = .delivered\n                    \n                    let params: Parameters = [\"ID\":messageId]\n                    self.hitEndpoint(url: ChatViewController.API_ENDPOINT + \"/delivered\", parameters: params, message: nil)\n    \n                    self.finishReceivingMessage(animated: true)\n                }\n            }\n        })\n        \n        channel.bind(eventName: \"message_delivered\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String: AnyObject] {\n                let messageId = (data[\"ID\"] as! NSString).integerValue\n                let msg = self.messages.first(where: { $0.id == messageId })\n                \n                msg?.status = AnonMessageStatus.delivered\n                self.finishReceivingMessage(animated: true)\n            }\n        })\n    \n        pusher.connect()\n    }\n```\n\nIn this method, we have created a `Pusher` instance, we have set the cluster and the key. We attach the instance to a `chatroom` channel and then bind to the `new_message` event on the channel. We also bind a `message_delivered` event, this will be the event that is triggered when a message is marked as delivered. It will update the message status to `delivered` so the sender knows the message has indeed been delivered.\n\n\u003e 💡 **Remember to replace the key and cluster with the actual values** **you have gotten from your Pusher dashboard**.\n\nNow we should be done with the application and as it stands, it should work but no messages can be sent just yet as we need a backend application for it to work properly.\n\n### Building the backend Node application\n\nNow that we are done with the iOS and Xcode parts, we can create the NodeJS backend for the application. We are going to use Express so that we can quickly whip something up.\n\nCreate a directory for the web application and then create two new files:\n\nThe **index.js** file…\n\n```\n    // ------------------------------------------------------\n    // Import all required packages and files\n    // ------------------------------------------------------\n    \n    let Pusher     = require('pusher');\n    let express    = require('express');\n    let bodyParser = require('body-parser');\n    let Promise    = require('bluebird');\n    let db         = require('sqlite');\n    let app        = express();\n    let pusher     = new Pusher(require('./config.js')['config']);\n    \n    // ------------------------------------------------------\n    // Set up Express\n    // ------------------------------------------------------\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // ------------------------------------------------------\n    // Define routes and logic\n    // ------------------------------------------------------\n    \n    app.post('/delivered', (req, res, next) =\u003e {\n      let payload = {ID: \"\"+req.body.ID+\"\"}\n      pusher.trigger('chatroom', 'message_delivered', payload)\n      res.json({success: 200})\n    })\n    \n    app.post('/messages', (req, res, next) =\u003e {\n      try {\n        let payload = {\n          text: req.body.text,\n          sender: req.body.sender\n        };\n    \n        db.run(\"INSERT INTO Messages (Sender, Message) VALUES (?,?)\", payload.sender, payload.text)\n          .then(query =\u003e {\n            payload.ID = query.stmt.lastID\n            pusher.trigger('chatroom', 'new_message', payload);\n    \n            payload.success = 200;\n    \n            res.json(payload);\n          });\n    \n      } catch (err) {\n        next(err)\n      }\n    });\n    \n    app.get('/', (req, res) =\u003e {\n      res.json(\"It works!\");\n    });\n    \n    \n    // ------------------------------------------------------\n    // Catch errors\n    // ------------------------------------------------------\n    \n    app.use((req, res, next) =\u003e {\n        let err = new Error('Not Found');\n        err.status = 404;\n        next(err);\n    });\n    \n    \n    // ------------------------------------------------------\n    // Start application\n    // ------------------------------------------------------\n    \n    Promise.resolve()\n      .then(() =\u003e db.open('./database.sqlite', { Promise }))\n      .then(() =\u003e db.migrate({ force: 'last' }))\n      .catch(err =\u003e console.error(err.stack))\n      .finally(() =\u003e app.listen(4000, function(){\n        console.log('App listening on port 4000!')\n      }));\n```\n\nHere we define the entire logic of our backend application. We are also using SQLite to store the chat messages; this is useful to help identify messages. Of course, you can always change the way the application works to suite your needs.\n\nThe `index.js` file also has two routes where it receives messages from the iOS application and triggers the Pusher event which is picked up by the application.\n\nThe next file is the **packages.json** where we define the NPM dependencies:\n\n```\n    {\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"bluebird\": \"^3.5.0\",\n        \"body-parser\": \"^1.16.0\",\n        \"express\": \"^4.14.1\",\n        \"pusher\": \"^1.5.1\",\n        \"sqlite\": \"^2.8.0\"\n      }\n    }\n```\n\nYou’ll also need a config.js file in the root directory:\n\n```\n    module.exports = {\n        appId: '',\n        key: '',\n        secret: '',\n        cluster: '',\n    };\n```\n\nSubstitute with the actual values from your Pusher application. Now run `npm install` on the directory and then `node index.js` once the npm installation is complete. You should see an *App listening on port 4000!* message.\n\n![read-receipts-swift-nodejs](//images.contentful.com/1es3ne0caaid/3x1vWsQRtYKsG2OWGaeuEk/34449477511a92d054ba98fc5fcc13d9/message-delivery-status-swift-nodejs.png)\n\n## Testing the application\n\nOnce you have your local node web server running, you will need to make some changes so your application can talk to the local web server. In the `info.plist` file, make the following changes:\n\n![read-receipts-swift-allow-arbitrary-loads](//images.contentful.com/1es3ne0caaid/64eKCfeNxewSUya2K4qga6/30343ac917a5e28a59bf4b71d976ba41/message-delivery-status-swift-allow-arbitrary-loads.png)\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n\n## Conclusion\n\nIn this article, we have explored how to create an iOS chat application with a message delivery status message after the message is sent to other users. For practice, you can expand the statuses to support more instances.","metaTitle":"Build read receipts using Swift","metaDescription":"Create an iOS chat application with a message delivery status using Swift, Node.js and Pusher for realtime functionality."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5LC6qtO0W4EYSUSKGSeAS4","type":"Entry","createdAt":"2018-02-22T15:04:12.881Z","updatedAt":"2018-02-28T11:02:32.754Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime PWA with React","url":"pwa-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2iE6KIsESkeOEcCmEmCQM8","type":"Entry","createdAt":"2018-02-13T12:06:21.229Z","updatedAt":"2018-02-14T10:08:19.561Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Yomi Eluwande","url":"yomi-eluwande","email":"yomi.eluwande@gmail.com","twitter":"https://twitter.com/yomieluwande","github":"https://github.com/yomete","guestWriter":true}}],"projectRepo":"https://github.com/yomete/pushercoins","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}}],"reviewDate":"2017-09-14","description":"Build a realtime PWA displaying the price information about cryptocurrencies using React.js and Pusher.","prerequisite":"A basic understanding of React, Node.js and PWA are needed to follow this tutorial.","content":"Progressive Web Apps are experiences that combine the best of the web and the best of apps. They use service workers, HTTPS, a manifest file and an app shell architecture to deliver native app experiences to web applications.\n\nIn this tutorial, we’ll build a PWA called PusherCoins. PusherCoins shows the current and past price information about BTC, LTC, and ETH using data from [Cryptocurrency](http://cryptocompare.com). A demo can be seen below. The current Bitcoin, Ether, and Litecoin price will be updated every 10 seconds and the change will be realtime and seen across other connected clients connected via [Pusher](http://pusher.com).\n\n![pwa-react-demo](//images.contentful.com/1es3ne0caaid/1mJC8DNySUW282EAKeIw6C/bf8e90962701acda5f785ee00663cefd/pwa-react-demo.gif)\n\n## Building a PWA with create-react-app\n\nWe’re going to be building a realtime PWA with the help of [create-react-app](https://github.com/facebookincubator/create-react-app). \n\nSome of the common comments made by developers who are just getting into React are that it is hard to set up and there are so many ways to do things.\n`create-react-app` eliminates all of that by allowing developers to build React apps with little or no build configuration. All you have to do to get a working React app is install the npm module and run a single command.\n\nMost importantly, the production build of `create-react-app`  is a fully functional Progressive Web Application. This is done with the help of the `[sw-precache-webpack-plugin](https://github.com/goldhand/sw-precache-webpack-plugin)` which is integrated into the production configuration.\n\nLet’s get started with building the React app. Install the `create-react-app` tool with this command:\n\n\n```\n    npm install -g create-react-app\n```\n\nOnce the installation process has been completed, you can now create a new React app by using the command `create-react-app pushercoins`.\n\nThis generates a new folder with all the files required to run the React app and a service worker file. A manifest file is also created inside the `public` folder.\n\n![pwa-react-project-directory](//images.contentful.com/1es3ne0caaid/33lQkFdaW46aYOKmEEY6gE/bf8e90962701acda5f785ee00663cefd/pwa-react-project-directory.png)\n\nThe `manifest.json` file in the `public` folder is a simple JSON file that gives you, the ability to control how your app appears to the user and define its appearance at launch.\n\n```\n    {\n      \"short_name\": \"PusherCoins\",\n      \"name\": \"PusherCoins\",\n      \"icons\": [\n        {\n          \"src\": \"favicon.ico\",\n          \"sizes\": \"192x192\",\n          \"type\": \"image/png\"\n        },\n        {\n          \"src\": \"android-chrome-512x512.png\",\n          \"sizes\": \"512x512\",\n          \"type\": \"image/png\"\n        }\n      ],\n      \"start_url\": \"./index.html\",\n      \"display\": \"standalone\",\n      \"theme_color\": \"#000000\",\n      \"background_color\": \"#ffffff\"\n    }\n```\n\nWe notify the app of the `manifest.json` file by linking to it in line 12 of the `index.html` file.\n\n```\n    \u003clink rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\"\u003e\n```\n\nNext up, let’s go through the `registerServiceWorker.js` file and see how the service worker file works. The service worker file can be seen in the `src` folder on on [GitHub](https://github.com/yomete/pushercoins/blob/master/src/registerServiceWorker.js).\n\nThe service worker code basically registers a service worker for the React app. We first check if the app is being served from localhost via the `isLocalhost` const value that will either return a truthy or falsy value. The `register()` function helps to register the service worker to the React app only if its in a production mode and if the browser supports Service workers. The `unregister()` function helps to unregister the service worker.\n\nLet’s find out if the service worker really works. To do that we’ll need to prepare the React app for production as the Service Worker code only works in production mode. The `npm run build` command helps with that.\n\nThis command builds the app for production to the `build` folder and correctly bundles React in production mode and optimizes the build for the best performance. It also registers the service worker. Run the command and the output from the terminal should look like something below.\n\n![pwa-react-npm-run-output](//images.contentful.com/1es3ne0caaid/RdDPMgk3W6moK48G2SIS6/bf8e90962701acda5f785ee00663cefd/pwa-react-npm-run-output.png)\n\nWe get to see the size of the files in our React app and most importantly how to run the app with the aid of a static server. We are going to use [serve](https://www.npmjs.com/package/serve) npm package to, wait for it, serve(😀) the React app. \nTherefore, use the following commands to install serve on your computer and also setup a static server for the app.\n\n```\n    npm i serve -g\n    \n    serve -s build\n```\n\nYour application should be up and running at http://localhost:5000. So how do we check if a site is a PWA? We can do that by checking the service worker section in the Application tab in the Developer tools.\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2017/09/build-realtime-pwa-react-service-worker-devtools.png\" alt=\"\" width=\"1280\" height=\"219\" class=\"alignnone size-full wp-image-3489\" /\u003e\n\nWe could also check by using the [Lighthouse](https://developers.google.com/web/tools/lighthouse/) tool. Lighthouse is an [open-source](https://github.com/GoogleChrome/lighthouse), automated tool for improving the quality of web pages. It has audits for performance, accessibility and progressive web apps. Lighthouse is currently available as an extension on [Google Chrome](https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk) only and as an [npm](https://www.npmjs.com/package/lighthouse) package.\n\nI used the Lighthouse extension to generate a report for the newly created React app in production and got the following result.\n\n![pwa-react-lighthouse](//images.contentful.com/1es3ne0caaid/6w4fXnjeXCe0O0SA4sSAOk/bf8e90962701acda5f785ee00663cefd/pwa-react-lighthouse.png)\n\nThe React app got a score of 91 out of 100 for the PWA section, which isn’t that bad. All audits were passed bar the one about HTTPS, which cannot be implemented right now because the app is still on a local environment.\n\nNow that we know how to check if an app is a PWA, let’s go ahead to build the actual app. \nAs we’ll be building this PWA with React, it’s very important that we think in terms of React components. \n\nTherefore, the React app would be divided into three components.\n\n1. `History.js` houses all the code needed to show the past prices of BTC, ETH, and LTC.\n2. `Today.js` houses all the code needed to show the current price of BTC, ETH and LTC.\n3. `App.js` houses both `History.js` and `Today.js`\n\n![pwa-react-components](//images.contentful.com/1es3ne0caaid/ypI7IqLUhqmAqUgEs4AAy/bf8e90962701acda5f785ee00663cefd/pwa-react-components.png)\n\nAlright, let’s continue with building the app. We’ll need to create two folders inside the `src` folder, `Today` and `History`. In the newly created folders, create the files `Today.js`, `Today.css` and `History.js`, `History.css` respectively. Your project directory should look like the one below.\n\n![pwa-react-components-project-directory](//images.contentful.com/1es3ne0caaid/3cahl0boIESA6c8g2Yskw0/bf8e90962701acda5f785ee00663cefd/pwa-react-components-project-directory.png)\n\nBefore we get started on the `Today` and `History` components, let’s build out the app shell.\n\n\u003e An app shell is the minimal HTML, CSS and JavaScript required to power the user interface and when cached offline can ensure instant**,** reliably good performance to users on repeat visits. You can read more about app shells [here](https://developers.google.com/web/fundamentals/architecture/app-shell).\n\nOpen up the `App.js` file and replace with the following code:\n\n```\n    // Import React and Component\n    import React, { Component } from 'react';\n    // Import CSS from App.css\n    import './App.css';\n    // Import the Today component to be used below\n    import Today from './Today/Today'\n    // Import the History component to be used below\n    import History from './History/History'\n    \n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv className=\"\"\u003e\n              \u003cdiv className=\"topheader\"\u003e\n                  \u003cheader className=\"container\"\u003e\n                      \u003cnav className=\"navbar\"\u003e\n                          \u003cdiv className=\"navbar-brand\"\u003e\n                              \u003cspan className=\"navbar-item\"\u003ePusherCoins\u003c/span\u003e\n                          \u003c/div\u003e\n                          \u003cdiv className=\"navbar-end\"\u003e\n                              \u003ca className=\"navbar-item\" href=\"https://pusher.com\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ePusher.com\u003c/a\u003e\n                          \u003c/div\u003e\n                      \u003c/nav\u003e\n                  \u003c/header\u003e\n              \u003c/div\u003e\n              \u003csection className=\"results--section\"\u003e\n                  \u003cdiv className=\"container\"\u003e\n                      \u003ch1\u003ePusherCoins is a realtime price information about\u003cbr\u003e\u003c/br\u003e BTC, ETH and LTC.\u003c/h1\u003e\n                  \u003c/div\u003e\n                  \u003cdiv className=\"results--section__inner\"\u003e\n                      \u003cToday /\u003e\n                      \u003cHistory /\u003e\n                  \u003c/div\u003e\n              \u003c/section\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nThe `App.css` file should be replaced with the following: \n\n```\n    .topheader {\n      background-color: #174c80;\n    }\n    .navbar {\n      background-color: #174c80;\n    }\n    .navbar-item {\n      color: #fff;\n    }\n    .results--section {\n      padding: 20px 0px;\n      margin-top: 40px;\n    }\n    h1 {\n      text-align: center;\n      font-size: 30px;\n    }\n```\nWe’ll also be using the Bulma CSS framework, so add the line of code below to your `index.html`\nin `public` folder.\n\n```\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.4.3/css/bulma.min.css\"\u003e\n```\n\n## Creating the React components\n\nNext up, open up the `Today.js` file as we’ll soon be writing the code for that component. So what does this component do?\n\nIt’s responsible for getting the current prices of Bitcoin, Ether and Litecoin from the Cryptocurrency API and displaying it on the frontend. Let’s write the code. \n\nThe first thing we do is import React and its Component module using ES6 `import`, we also import axios. axios is used to make API requests to the Cryptocurrency API and can be installed by running `npm install axios` in your terminal\n\n```\n    import React, { Component } from 'react';\n    import './Today.css'\n    import axios from 'axios'\n```\n\nThe next thing to do is create an [ES6 class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes) named `Today` that extends the component module from `react`.\n\n```\n    class Today extends Component {\n        // Adds a class constructor that assigns the initial state values:\n        constructor () {\n            super();\n            this.state = {\n                btcprice: '',\n                ltcprice: '',\n                ethprice: ''\n            };\n        }\n        // This is called when an instance of a component is being created and inserted into the DOM.\n        componentWillMount () {\n            axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD')\n                .then(response =\u003e {\n                    // We set the latest prices in the state to the prices gotten from Cryptocurrency.\n                    this.setState({ btcprice: response.data.BTC.USD });\n                    this.setState({ ethprice: response.data.ETH.USD });\n                    this.setState({ ltcprice: response.data.LTC.USD });\n                })\n                // Catch any error here\n                .catch(error =\u003e {\n                    console.log(error)\n                })\n        }\n        // The render method contains the JSX code which will be compiled to HTML.\n        render() {\n            return (\n                \u003cdiv className=\"today--section container\"\u003e\n                    \u003ch2\u003eCurrent Price\u003c/h2\u003e\n                    \u003cdiv className=\"columns today--section__box\"\u003e\n                        \u003cdiv className=\"column btc--section\"\u003e\n                            \u003ch5\u003e${this.state.btcprice}\u003c/h5\u003e\n                            \u003cp\u003e1 BTC\u003c/p\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"column eth--section\"\u003e\n                            \u003ch5\u003e${this.state.ethprice}\u003c/h5\u003e\n                            \u003cp\u003e1 ETH\u003c/p\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"column ltc--section\"\u003e\n                            \u003ch5\u003e${this.state.ltcprice}\u003c/h5\u003e\n                            \u003cp\u003e1 LTC\u003c/p\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            )\n        }\n    }\n    \n    export default Today;\n```\n\nIn the code block above, we imported the `react` and `component` class from react. We also imported `axios` which will be used for API requests. In the `componentWillMount` function, we send an API request to get the current cryptocurrency rate from Cryptocurrency. The response from the API is what will be used to set the value of the state.\n\nLet’s not forget the CSS for the component. Open up `Today.css` and type in the following CSS code.\n\n```\n    .today--section {\n        margin-bottom: 40px;\n        padding: 0 50px;\n    }\n    .today--section h2 {\n        font-size: 20px;\n    }\n    .today--section__box {\n        background-color: white;\n        padding: 20px;\n        margin: 20px 0;\n        border-radius: 4px;\n        box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n    }\n    .btc--section {\n        text-align: center;\n        border-right: 1px solid #DAE1E9;\n    }\n    .btc--section h5 {\n        font-size: 30px;\n    }\n    .eth--section {\n        text-align: center;\n        border-right: 1px solid #DAE1E9;\n    }\n    .eth--section h5 {\n        font-size: 30px;\n    }\n    .ltc--section {\n        text-align: center;\n    }\n    .ltc--section h5 {\n        font-size: 30px;\n    }\n    @media (max-width: 480px) {\n        .eth--section {\n            border-right: none;\n        }\n        .btc--section {\n            border-right: none;\n        }\n        .today--section {\n            margin-top:  50px;\n        }\n    }\n```\n\nThe next step, is to write the code for `History.js`. This component is responsible for showing us the prices of BTC, ETH and LTC from the past five days. We’ll be using the `axios` package as well as the `moment` package for formatting dates. Moment.js can be installed by running `npm install moment` in your terminal. Open up the `History.js` file, the first thing we do is import React and its Component module using ES6 `import`, we also import axios and Moment.js.\n\n```\n    import React, { Component } from 'react';\n    import './History.css'\n    import axios from 'axios'\n    import moment from 'moment'\n```\n\nLike we did in the `Today.js` component, we’ll create an [ES6 class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes) named `History` that extends the component module from `react` and also create some functions which will be bound with `this`.\n\n```\n    class History extends Component {\n      constructor () {\n        super();\n        this.state = {\n            todayprice: {},\n            yesterdayprice: {},\n            twodaysprice: {},\n            threedaysprice: {},\n            fourdaysprice: {}\n        }\n        this.getBTCPrices = this.getBTCPrices.bind(this);\n        this.getETHPrices = this.getETHPrices.bind(this);\n        this.getLTCPrices = this.getLTCPrices.bind(this);\n      }\n      // This function gets the ETH price for a specific timestamp/date. The date is passed in as an argument\n      getETHPrices (date) {\n          return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH\u0026tsyms=USD\u0026ts=' + date);\n      }\n      // This function gets the BTC price for a specific timestamp/date. The date is passed in as an argument\n      getBTCPrices (date) {\n          return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=BTC\u0026tsyms=USD\u0026ts=' + date);\n      }\n      // This function gets the LTC price for a specific timestamp/date. The date is passed in as an argument\n      getLTCPrices (date) {\n          return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=LTC\u0026tsyms=USD\u0026ts=' + date);\n      }\n    }\n```\n\nAs seen in the code block above, we have defined state values that will hold the price information about BTC, ETH, and LTC for the past five days. We also created functions that returns API requests to Cryptocurrency. Now, let’s write the code that utilizes the functions above and stores the various prices in the state and renders them. \n\nIt’s important to note that Cryptocurrency currently does not have an API endpoint that allows you to get a date range of price information. You’d have to get the timestamp of the past five days and then use them individually to get the required data you want.\nA workaround will be to use moment.js to get the timestamp of the particular day you want using the `.subtract` [method](https://momentjs.com/docs/#/manipulating/subtract/) and `.unix` [method](https://momentjs.com/docs/#/displaying/unix-timestamp/) . So for example, to get a timestamp of two days ago, you’d do something like:\n\n```\n    moment().subtract(2, 'days').unix();\n```\n\nOkay, so let’s continue with the rest of the code and write out the functions that gets the values for the past 5 days.\n\n```\n    // This function gets the prices for the current date.\n    getTodayPrice () {\n        // Get today's date in timestamp\n        let t = moment().unix()\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) =\u003e {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of todayprice to the content of the object f\n                this.setState({ todayprice: f });\n            }));\n    }\n    // This function gets the prices for the yesterday.\n    getYesterdayPrice () {\n        // Get yesterday's date in timestamp\n        let t = moment().subtract(1, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) =\u003e {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of yesterdayprice to the content of the object f\n                this.setState({ yesterdayprice: f });\n            }));\n    }\n    // This function gets the prices for the two days ago.\n    getTwoDaysPrice () {\n        // Get the date for two days ago in timestamp\n        let t = moment().subtract(2, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) =\u003e {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of twodaysprice to the content of the object f\n                this.setState({ twodaysprice: f });\n            }));\n    }\n    // This function gets the prices for the three days ago.\n    getThreeDaysPrice () {\n        // Get the date for three days ago in timestamp\n        let t = moment().subtract(3, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) =\u003e {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of threedaysprice to the content of the object f\n                this.setState({ threedaysprice: f });\n            }));\n    }\n    // This function gets the prices for the four days ago.\n    getFourDaysPrice () {\n        // Get the date for four days ago in timestamp\n        let t = moment().subtract(4, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) =\u003e {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of fourdaysprice to the content of the object f\n                this.setState({ fourdaysprice: f });\n            }));\n    }\n    // This is called when an instance of a component is being created and inserted into the DOM.\n    componentWillMount () {\n        this.getTodayPrice();\n        this.getYesterdayPrice();\n        this.getTwoDaysPrice();\n        this.getThreeDaysPrice();\n        this.getFourDaysPrice();\n    }\n```\n\nSo we have five functions above, they basically just use `moment.js` to get the date required and then pass that date into the functions we first created above, to get the price information from Cryptocurrency. We use `axios.all` and `axios.spread` which is a way of of dealing with concurrent requests with callbacks. The functions will be run in the `componentWillMount` function.\n\nFinally, for `History.js`, we’ll write the render function.\n\n```\n    render() {\n            return (\n                \u003cdiv className=\"history--section container\"\u003e\n                    \u003ch2\u003eHistory (Past 5 days)\u003c/h2\u003e\n                    \u003cdiv className=\"history--section__box\"\u003e\n                        \u003cdiv className=\"history--section__box__inner\"\u003e\n                            \u003ch4\u003e{this.state.todayprice.date}\u003c/h4\u003e\n                            \u003cdiv className=\"columns\"\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 BTC = ${this.state.todayprice.btc}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 ETH = ${this.state.todayprice.eth}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 LTC = ${this.state.todayprice.ltc}\u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"history--section__box__inner\"\u003e\n                            \u003ch4\u003e{this.state.yesterdayprice.date}\u003c/h4\u003e\n                            \u003cdiv className=\"columns\"\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 BTC = ${this.state.yesterdayprice.btc}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 ETH = ${this.state.yesterdayprice.eth}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 LTC = ${this.state.yesterdayprice.ltc}\u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"history--section__box__inner\"\u003e\n                            \u003ch4\u003e{this.state.twodaysprice.date}\u003c/h4\u003e\n                            \u003cdiv className=\"columns\"\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 BTC = ${this.state.twodaysprice.btc}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 ETH = ${this.state.twodaysprice.eth}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 LTC = ${this.state.twodaysprice.ltc}\u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"history--section__box__inner\"\u003e\n                            \u003ch4\u003e{this.state.threedaysprice.date}\u003c/h4\u003e\n                            \u003cdiv className=\"columns\"\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 BTC = ${this.state.threedaysprice.btc}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 ETH = ${this.state.threedaysprice.eth}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 LTC = ${this.state.threedaysprice.ltc}\u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"history--section__box__inner\"\u003e\n                            \u003ch4\u003e{this.state.fourdaysprice.date}\u003c/h4\u003e\n                            \u003cdiv className=\"columns\"\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 BTC = ${this.state.fourdaysprice.btc}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 ETH = ${this.state.fourdaysprice.eth}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 LTC = ${this.state.fourdaysprice.ltc}\u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n    \n                    \u003c/div\u003e\n                \u003c/div\u003e\n            )\n        }\n    }\n    \n    export default History;\n```\n\nWe can now run the `npm start` command to see the app at http://localhost:3000. \n\n![pwa-react-pushercoins](//images.contentful.com/1es3ne0caaid/3IfTKCLwCIky02WK06WW0e/bf8e90962701acda5f785ee00663cefd/pwa-react-pushercoins.png)\n\nWe can quickly check to see how the current state of this app would fare as a PWA. Remember we have a service worker file which currently caches all the resources needed for this application. So you can run the `npm run build` command to put the app in production mode, and check its PWA status with Lighthouse.\n\n![pwa-react-light](//images.contentful.com/1es3ne0caaid/7sc2HDKIfuECq8AuIsOAyw/bf8e90962701acda5f785ee00663cefd/pwa-react-light.png)\n\nWe got a 91/100 score. Whoop! The only audit that failed to pass is the HTTPS audit which cannot be implemented right now because the app is still on a local server. \n\nOur application is looking good and fast apparently (Interactive at \u003c 3s), let’s add realtime functionalities by adding Pusher.\n\n## Make it realtime with Pusher\n\nBy using Pusher, we can easily add realtime functionalities to the app. Pusher makes it simple to bind UI interactions to events that are triggered from any client or server. Let’s setup Pusher.\n\nLog into your [dashboard](http://dashboard.pusher.com) (or [create](http://pusher.com) a new account if you’re a new user) and create a new app. Copy your `app_id`, `key`, `secret` and `cluster` and store them somewhere as we’ll be needing them later.\n\nWe’ll also need to create a server that will help with triggering events to Pusher and we’ll create one with Node.js. In the root of your project directory, create a file named `server.js` and type in the following code:\n\n```\n    // server.js\n    const express = require('express')\n    const path = require('path')\n    const bodyParser = require('body-parser')\n    const app = express()\n    const Pusher = require('pusher')\n    \n    //initialize Pusher with your appId, key, secret and cluster\n    const pusher = new Pusher({\n        appId: 'APP_ID',\n        key: 'APP_KEY',\n        secret: 'APP_SECRET',\n        cluster: 'YOUR_CLUSTER',\n        encrypted: true\n    })\n    \n    // Body parser middleware\n    app.use(bodyParser.json())\n    app.use(bodyParser.urlencoded({ extended: false }))\n    \n    // CORS middleware\n    app.use((req, res, next) =\u003e {\n        // Website you wish to allow to connect\n        res.setHeader('Access-Control-Allow-Origin', '*')\n        // Request methods you wish to allow\n        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE')\n        // Request headers you wish to allow\n        res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type')\n        // Set to true if you need the website to include cookies in the requests sent\n        // to the API (e.g. in case you use sessions)\n        res.setHeader('Access-Control-Allow-Credentials', true)\n        // Pass to next layer of middleware\n        next()\n    })\n    \n    // Set port to be used by Node.js\n    app.set('port', (5000))\n    \n    app.get('/', (req, res) =\u003e {\n        res.send('Welcome')\n    })\n    \n    // API route in which the price information will be sent to from the clientside\n    app.post('/prices/new', (req, res) =\u003e {\n        // Trigger the 'prices' event to the 'coin-prices' channel\n        pusher.trigger( 'coin-prices', 'prices', {\n            prices: req.body.prices\n        });\n        res.sendStatus(200);\n    })\n    \n    app.listen(app.get('port'), () =\u003e {\n        console.log('Node app is running on port', app.get('port'))\n    })\n```    \n\nThis is a simple Node.js server that uses Express as its web framework. Pusher is initialized with the dashboard credentials, and the various API routes are also defined. Don’t forget to install the packages in use.\n\n```\n    npm install express body-parser pusher\n```\n\nWe’ll also need to add a line of code to the `package.json` file so as to allow API proxying. Since we will be running a backend server, we need to find a way to run the React app and backend server together. API proxying helps with that. \n\nTo tell the development server to proxy any unknown requests (`/prices/new`) to your API server in development, add a `proxy` field to your `package.json` immediately after the `scripts` object.\n\n``` language-bash\n    \"proxy\": \"http://localhost:5000\"\n```\n\nWe only need to make the current price realtime and that means we’ll be working on the `Today` component, so open up the file.  The Pusher Javascript library is needed, so run `npm install pusher-js` to install that.\n\nThe first thing to do is import the `pusher-js` package.\n\n```\n    import Pusher from 'pusher-js'\n```\n\nIn the `componentWillMount` method, we establish a connection to Pusher using the credentials obtained from the dashboard earlier.\n\n```\n    // establish a connection to Pusher\n    this.pusher = new Pusher('APP_KEY', {\n        cluster: 'YOUR_CLUSTER',\n        encrypted: true\n    });\n    // Subscribe to the 'coin-prices' channel\n    this.prices = this.pusher.subscribe('coin-prices');\n```\n\nWe need a way to query the API every 10 seconds so as to get the latest price information. We can use the `setInterval` function to send an API request every 10 seconds and then send the result of that API request to Pusher so that it can be broadcasted to other clients. \n\nBefore we create the setInterval function, let’s create a simple function that takes in an argument and sends it to the backend server API.\n\n```\n    sendPricePusher (data) {\n        axios.post('/prices/new', {\n            prices: data\n        })\n            .then(response =\u003e {\n                console.log(response)\n            })\n            .catch(error =\u003e {\n                console.log(error)\n            })\n    }\n```\n Let’s create the `setInterval` function. We will need to create a `componentDidMount` method so we can put the interval code in it.\n\n```\n    componentDidMount () {\n        setInterval(() =\u003e {\n            axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD')\n                .then(response =\u003e {\n                    this.sendPricePusher (response.data)\n                })\n                .catch(error =\u003e {\n                    console.log(error)\n                })\n        }, 10000)\n    }\n```\n\nSo right now, the app queries the API every 10 seconds and sends the data to Pusher, but we still haven’t made the app realtime. We need to implement the realtime functionality so that other clients/users connected to the application can see price change in realtime. That will be done by using Pusher’s [bind method](https://pusher.com/docs/client_api_guide/client_events#bind-events).\n\nInside the `componentDidMount` method, add the code below, immediately after the `setInterval` function.\n\n```\n    // We bind to the 'prices' event and use the data in it (price information) to update the state values, thus, realtime changes \n    this.prices.bind('prices', price =\u003e {\n            this.setState({ btcprice: price.prices.BTC.USD });\n            this.setState({ ethprice: price.prices.ETH.USD });\n            this.setState({ ltcprice: price.prices.LTC.USD });\n        }, this);\n```\n\nThe code block above, listens for data from Pusher, since we already subscribed to that channel and uses the data it gets to update the state values, thus, realtime changes.\nWe now have Progressive Realtime App! See a demo below.\n\n![pwa-react-demo](//images.contentful.com/1es3ne0caaid/1mJC8DNySUW282EAKeIw6C/bf8e90962701acda5f785ee00663cefd/pwa-react-demo.gif)\n\n## Offline Strategies\n\nRight now, if we were to go offline, our application would not be able to make API requests to get the various prices. So how do we make sure that we still able to see some data even when the network fails?\n\nOne way to go about it would be to use Client Side Storage. So how would this work? We’ll simply use localStorage to cache data.\n\nlocalStorage makes it possible to store values in the browser which can survive the browser session. It is one type of the [Web Storage API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API), which is an API for storing key-value pairs of data within the browser. It has a limitation of only storing strings. That means any data being stored has to be *stringified*  with the use of `JSON.stringify` \n\n It’s important to note that there are other types of client side storage, such as Session Storage, Cookies, IndexedDB, and WebSQL. Local Storage can be used for a demo app like this, but in a production app, it’s advisable to use a solution like IndexedDB which offers more features like better structure, multiple tables and databases, and more storage.\n\nThe goal will be to display the prices from localStorage. That means we’ll have to save the results from various API requests into the localStorage and set the state to the values in the localStorage. This will ensure that when the network is unavailable and API requests are failing, we would still be able to see some data, albeit cached data. Let’s do just that. Open up the `Today.js` file and edit the code inside the callback function of the API request to get prices with the one below.\n\n```\n    axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD')\n        .then(response =\u003e {\n            this.setState({ btcprice: response.data.BTC.USD });\n            localStorage.setItem('BTC', response.data.BTC.USD);\n    \n            this.setState({ ethprice: response.data.ETH.USD });\n            localStorage.setItem('ETH', response.data.ETH.USD);\n    \n            this.setState({ ltcprice: response.data.LTC.USD });\n            localStorage.setItem('LTC', response.data.LTC.USD);\n        })\n        .catch(error =\u003e {\n            console.log(error)\n        })\n```\n\nWe are essentially storing the values gotten from the API request to the localStorage. With our values now in the localStorage, we’ll need to set the state values to the saved values in localStorage. Inside the `componentDidMount` method, before the `setInterval` code, add the following code.\n\n```\n    if (!navigator.onLine) {\n        this.setState({ btcprice: localStorage.getItem('BTC') });\n        this.setState({ ethprice: localStorage.getItem('ETH') });\n        this.setState({ ltcprice: localStorage.getItem('LTC') });\n    }\n```\n\nThe code above is only executed when the browser is offline. We can check for internet connectivity by using `navigator.onLine`. The `navigator.onLine` property returns the online status of the browser. The property returns a boolean value, with `true` meaning online and `false` meaning offline.\n\nLet’s now implement localStorage for `History.js` too. We’ll need to save the values gotten from the API in these functions ( `getTodayPrice(), getYesterdayPrice(), getTwoDaysPrice(), getThreeDaysPrice(), this.getFourDaysPrice()` ) to the localStorage. \n\n```\n    // getTodayPrice()\n    localStorage.setItem('todayprice', JSON.stringify(f));\n    this.setState({ todayprice: f });\n    \n    // getYesterdayPrice()\n    localStorage.setItem('yesterdayprice', JSON.stringify(f));\n    this.setState({ yesterdayprice: f });\n    \n    // getTwoDaysPrice()\n    localStorage.setItem('twodaysprice', JSON.stringify(f));\n    this.setState({ twodaysprice: f });\n    \n    // getThreeDaysPrice()\n    localStorage.setItem('threedaysprice', JSON.stringify(f));\n    this.setState({ threedaysprice: f });\n    \n    // getFourDaysPrice()\n    localStorage.setItem('fourdaysprice', JSON.stringify(f));\n    this.setState({ fourdaysprice: f });\n```\n\nWe are essentially storing the values gotten from the API request to the localStorage. With our values now in the localStorage, we’ll also need to set the state values to the saved values in localStorage like we did in the `Today` component. Create a `componentDidMount` method and add the following code inside the method.\n\n```\n    componentDidMount () {\n        if (!navigator.onLine) {\n            this.setState({ todayprice: JSON.parse(localStorage.getItem('todayprice')) });\n            this.setState({ yesterdayprice: JSON.parse(localStorage.getItem('yesterdayprice')) });\n            this.setState({ twodaysprice: JSON.parse(localStorage.getItem('twodaysprice')) });\n            this.setState({ threedaysprice: JSON.parse(localStorage.getItem('threedaysprice')) });\n            this.setState({ fourdaysprice: JSON.parse(localStorage.getItem('fourdaysprice')) });\n        }\n    }\n```\n\nNow our application will display cached values when there’s no internet connectivity.\n\n![pwa-react-offlinemode](//images.contentful.com/1es3ne0caaid/5SasJ5fSKWiYMkcIKemMa0/bf8e90962701acda5f785ee00663cefd/pwa-react-offlinemode.png)\n\nIt’s important to note that the app is time sensitive. Time sensitive data are not really useful to users when cached. What we can do is, add a status indicator warning the user when they are offline, that the data being shown might be stale and an internet connection is needed to show the latest data.\n\n## Deploy the app to production\n\nNow that we’re done building, let’s deploy the app to production and carry out a final Lighthouse test. We’ll be using [now.sh](http://now.sh) for deployment, `now` allows you to take your JavaScript (Node.js) or Docker powered websites, applications and services to the cloud with ease. You can find installation instructions on the site. You can also use any other deployment solution, I’m using Now because of its simplicity.\n\nPrepare the app for production by running the command below in the terminal\n\n```\n    npm run build\n```\n\nThis builds the app for production to the `build` folder. Alright, so the the next thing to do is to create a server in which the app will be served from. Inside the `build` folder, create a file named `server.js` and type in the following code.\n\n```\n    const express = require('express')\n    const path = require('path')\n    const bodyParser = require('body-parser')\n    const app = express()\n    const Pusher = require('pusher')\n    \n    const pusher = new Pusher({\n        appId: 'APP_ID',\n        key: 'YOUR_KEY',\n        secret: 'YOUR SECRET',\n        cluster: 'YOUR CLUSTER',\n        encrypted: true\n    })\n    \n    app.use(bodyParser.json())\n    app.use(bodyParser.urlencoded({ extended: false }))\n    app.use(express.static(path.join(__dirname)));\n    \n    app.use((req, res, next) =\u003e {\n        // Website you wish to allow to connect\n        res.setHeader('Access-Control-Allow-Origin', '*')\n        // Request methods you wish to allow\n        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE')\n        // Request headers you wish to allow\n        res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type')\n        // Set to true if you need the website to include cookies in the requests sent\n        // to the API (e.g. in case you use sessions)\n        res.setHeader('Access-Control-Allow-Credentials', true)\n        // Pass to next layer of middleware\n        next()\n    })\n    \n    app.set('port', (5000))\n    \n    app.get('/', (req, res) =\u003e {\n        res.sendFile(path.join(__dirname + '/index.html'));\n    });\n    \n    app.post('/prices/new', (req, res) =\u003e {\n        pusher.trigger( 'coin-prices', 'prices', {\n            prices: req.body.prices\n        });\n        res.sendStatus(200);\n    })\n    \n    app.listen(app.get('port'), () =\u003e {\n        console.log('Node app is running on port', app.get('port'))\n    })\n```\n\nThis is basically the same code we wrote in the `server.js` file in the root of the project directory. The only addition here is that we set the home route to serve the `index.html` file in the `public` folder. Next up, run the command `npm init` to create a `package.json` file for us and lastly install the packages needed with the command below.\n\n```\n    npm install express body-parser pusher\n```\n\nYou can now see the application by running `node server.js` inside the `build` folder and your app should be live at http://localhost:5000\n\nDeploying to Now is very easy, all you have to do is run the command `now deploy` and Now takes care of everything, with a live URL automatically generated.\n\nIf everything goes well, your app should be deployed and live now, in this case, https://build-zrxionqses.now.sh/. Now automatically provisions all deployments with SSL, so we can finally generate the Lighthouse report again to check the PWA status. A live Lighthouse report of the site can be seen [here](https://googlechrome.github.io/lighthouse/viewer/?gist=4da584b2d889a4f7ce9e439659ea5441).\n\n![pwa-react-lighthousecomplete](//images.contentful.com/1es3ne0caaid/2Lrip4t3TaU02SAg2emKU4/bf8e90962701acda5f785ee00663cefd/pwa-react-lighthousecomplete.png)\n\n100/100! Whoop! All the PWA audits were passed and we got the site to load under 5s (2.6s).\n\n## App Install\n\nOne of the features of PWAs is the web app install banner. So how does this work? A PWA will install a web app install banner only if the following conditions are met:\n- Has a web app manifest file with:\n  - a `short_name` (used on the home screen)\n  - a `name` (used in the banner)\n  - a 144x144 png icon (the icon declarations must include a mime type of `image/png`)\n  - a `start_url` that loads\n- Has a [service worker](https://developers.google.com/web/fundamentals/getting-started/primers/service-workers) registered on your site.\n- Is served over [HTTPS](https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https) (a requirement for using service worker).\n- Is visited at least twice, with at least five minutes between visits.\n\nThe `manifest.json` file in the `public` folder meets all the requirements above, we have a service worker registered on the site and the app is served over HTTPS at https://build-zrxionqses.now.sh/.\n\n![pwa-react-banner](//images.contentful.com/1es3ne0caaid/5ShDNuOOGW6iQEK0CyggQS/bf8e90962701acda5f785ee00663cefd/pwa-react-banner.png)\n\n## Conclusion\nIn this tutorial, we’ve seen how to use ReactJS, Pusher and Service Workers to build a realtime PWA. We saw how service workers can be used to cache assets and resources so as to reduce the load time and also make sure that the app works even when offline.\n\nWe also saw how to use localStorage to save data locally for cases when the browser looses connectivity to the internet.\n\nThe app can be viewed live \u003ca href=\"https://build-zrxionqses.now.sh/\"\u003ehere\u003c/a\u003e and you can check out the Github repo [here](https://github.com/yomete/pushercoins). See if you can change stuff and perhaps make the app load faster!","metaTitle":"Build a realtime PWA with React","metaDescription":"In this tutorial you'll build a realtime PWA displaying the current and past price information about popular cryptocurrencies like BTC, LTC, and ETH, using React.js and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"QcaDBEoTGoyCkiK8umAiE","type":"Entry","createdAt":"2018-02-22T15:04:12.055Z","updatedAt":"2019-01-02T15:29:48.784Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app with React Native","url":"chat-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/react-native-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2017-09-12","description":"Benefit from the powerful frameworks like React Native and build a live chat app.","prerequisite":"A basic understanding of React and Node.js are needed to follow this tutorial.","content":"Social chat applications are hugely popular these days, allowing people to stay connected on topics they are interested in from all over the world. In this article we’re going to explore creating a simple chat app in the [React Native](https://facebook.github.io/react-native/) framework, which allows us to use the same source code to target both Android and iOS. In order to keep this example simple to follow we’re going to focus only on the basics - a single chat room, and no authentication of the people chatting. \n\n![chat-app-react-native-demo](//images.contentful.com/1es3ne0caaid/5wRZEV2DjqoWk0mWUIQ6aI/fa20729730a5845efe2cadf3a6cf1246/chat-app-react-native-demo.gif)\n\nThe application will work in two parts. The client application will receive events from Pusher informing it of new users and new messages, and there will be a server application that is responsible for sending message to Pusher. \n\nIn order to implement this you need to have the following on your computer:\n\n- A recent version of Node.js\n- A text editor\n\nYou will also need a mobile device with the [Expo](https://expo.io/) tools installed - available from the Android Play Store or the Apple App Store for free. This is used to test the React Native application whilst you are still developing it. It works by allowing you to start and host the application on your workstation, and connect to it remotely from your mobile device as long as you are on the same network.\n\nNote as well that this article assumes some prior experience with writing JavaScript applications, and with the React framework - especially working with the ES6 and JSX versions of the language.\n\n\n## Creating a Pusher application to use\n\nFirstly, we’ll need to create a Pusher application that we can connect our server and client to. This can be done for free [here](https://dashboard.pusher.com/). When you create your application, you will need to make note of your App ID, App Key, App Secret and Cluster:\n\n![chat-app-react-native-create-pusher-app](//images.contentful.com/1es3ne0caaid/6mrD8WM6as0WIEka2AYI6I/0b294d87f2dccd850a508cfc46254d0a/chat-app-react-native-create-pusher-app.png)\n\n## Creating the server application\n\nOur server application is going to be written in Node.js using the Express web framework. We are going to have three RESTful endpoints, and no actual views. The endpoints are:\n\n- PUT /users/\u003cname\u003e - Indicate that a new user has joined\n- DELETE /users/\u003cname\u003e - Indicate that a user has left\n- POST /users/\u003cname\u003e/messages - Send a message to the chatroom\n\nCreating a new Node application is done using the `npm init` call, as follows:\n\n```\n    \u003e npm init\n    This utility will walk you through creating a package.json file.\n    It only covers the most common items, and tries to guess sensible defaults.\n    \n    See `npm help json` for definitive documentation on these fields\n    and exactly what they do.\n    \n    Use `npm install \u003cpkg\u003e --save` afterwards to install a package and\n    save it as a dependency in the package.json file.\n    \n    Press ^C at any time to quit.\n    name: (server) react-native-chat-server\n    version: (1.0.0)\n    description: Server component for our React Native Chat application\n    entry point: (index.js)\n    test command:\n    git repository:\n    keywords:\n    author:\n    license: (ISC)\n    \n    {\n      \"name\": \"react-native-chat-server\",\n      \"version\": \"1.0.0\",\n      \"description\": \"Server component for our React Native Chat application\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\"\n      },\n      \"author\": \"\",\n      \"license\": \"ISC\"\n    }\n    \n    \n    Is this ok? (yes)\n```\n\nWe then need to install the modules that we’re going to depend on - `express`, `body-parser` - to allow us to parse incoming JSON bodies - and `pusher`, to talk to the Pusher API.\n\n```\n    \u003e npm install --save express body-parser pusher\n```\n\nThis gives us everything we need to get our server application written. Because it’s so simple we can do it all in one file - `index.js` - which will look like this:\n\n```\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const pusherConfig = require('./pusher.json'); // (1)\n    const pusherClient = new Pusher(pusherConfig);\n    \n    const app = express(); // (2)\n    app.use(bodyParser.json());\n    \n    app.put('/users/:name', function(req, res) { // (3)\n        console.log('User joined: ' + req.params.name);\n        pusherClient.trigger('chat_channel', 'join', {\n            name: req.params.name\n        });\n        res.sendStatus(204);\n    });\n    \n    app.delete('/users/:name', function(req, res) { // (4)\n        console.log('User left: ' + req.params.name);\n        pusherClient.trigger('chat_channel', 'part', {\n            name: req.params.name\n        });\n        res.sendStatus(204);\n    });\n    \n    app.post('/users/:name/messages', function(req, res) { // (5)\n        console.log('User ' + req.params.name + ' sent message: ' + req.body.message);\n        pusherClient.trigger('chat_channel', 'message', {\n            name: req.params.name,\n            message: req.body.message\n        });\n        res.sendStatus(204);\n    });\n    \n    app.listen(4000, function() { // (6)\n        console.log('App listening on port 4000');\n    });\n```\n\nThis is the entire Server application, which works as follows:\n\n1. Create a new Pusher client and configure it to connect to our Pusher application, as configured above\n2. Create a new Express server\n3. Add a new route - PUT /users/:name. This will send a *join* message to the Pusher application with the name of the user that has joined as the payload\n4. Add a new route - DELETE /users/:name. This will send a *part* message to the Pusher application with the name of the user that has just departed as the payload\n5. Add a third route - POST /users/:name/messages. This will send a *message* message to the Pusher application with the name of the user sending the message and the actual message as the payload\n6. Start the server listening on port 4000\n\nPusher has native support for Join and Leave notification as a part of it’s API, by leveraging the [Presence Channel](https://pusher.com/docs/client_api_guide/client_presence_channels) functionality. This requires [authentication](https://pusher.com/docs/authenticating_users) to be implemented before the client can use it though, which is beyond the scope of this article, but will give a much better experience if you are already implementing authentication.\n\n\n----------\n\n**Note**\nWhy the names *join* and *part*? It’s a throwback to the IRC specification. The names aren’t important at all - as long as they are distinct from each other, and consistent with what the client expects.\n\n----------\n\nBefore we can start the application, we need a Pusher configuration file. This goes in `pusher.json` and looks like this:\n\n```\n    {\n        \"appId\":\"SOME_APP_ID\",\n        \"key\":\"SOME_APP_KEY\",\n        \"secret\":\"SOME_APP_SECRET\",\n        \"cluster\":\"SOME_CLUSTER\",\n        \"encrypted\":true\n    }\n```\n\nThe values used here are exactly the ones taken from the Pusher application config we saw above.\n\n### Starting the server\nWe can now start this up and test it out. Starting it up is simply done by executing `index.js`:\n\n```\n    \u003e node index.js\n    App listening on port 4000\n```\n\nIf we then use a REST Client to interact with the server, by sending the appropriate messages to our server.\n\n![chat-app-react-native-test-server](//images.contentful.com/1es3ne0caaid/9ujxp3oRBC0gk8UkEEKmg/7d8f511d5b6dd85f6d6c237357f22cca/chat-app-react-native-test-server.png)\n\nDoing so will cause the correct messages to appear in the Debug Console in the Pusher Dashboard, proving that they are coming through correctly. \n\n![chat-app-react-native-view-pusher-message](//images.contentful.com/1es3ne0caaid/6EJ1Ea4i1UWcUuSQIsUGUw/e995486f1dd088181401ff6771f2a13b/chat-app-react-native-view-pusher-message.png)\n\nYou can do the same for the other messages, and see how it looks:\n\n![chat-app-react-native-view-pusher-messages](//images.contentful.com/1es3ne0caaid/2D7H9JCTfOuSgmWEgm4AS2/206acafd09cdea2d32f2fb58725d1a92/chat-app-react-native-view-pusher-messages.png)\n\n## Creating the client application\n\nOur client application is going to be built using React Native, and leveraging the `create-react-native-app` scaffolding tool to do a lot of work for us. This first needs to be installed onto the system, as follows:\n\n```\n    \u003e npm install -g create-react-native-app\n```\n\nOnce installed we can then create our application, ready for working on:\n\n```\n    \u003e create-react-native-app client\n    Creating a new React Native app in client.\n    \n    Using package manager as npm with npm interface.\n    Installing packages. This might take a couple minutes.\n    Installing react-native-scripts...\n    \n    npm WARN react-redux@5.0.6 requires a peer of react@^0.14.0 || ^15.0.0-0 || ^16.0.0-0 but none was installed.\n    Installing dependencies using npm...\n    \n    npm WARN react-native-branch@2.0.0-beta.3 requires a peer of react@\u003e=15.4.0 but none was installed.\n    npm WARN lottie-react-native@1.1.1 requires a peer of react@\u003e=15.3.1 but none was installed.    \n    \n    Success! Created client at client\n    Inside that directory, you can run several commands:\n\n      npm start\n        Starts the development server so you can open your app in the Expo\n        app on your phone.\n    \n      npm run ios\n        (Mac only, requires Xcode)\n        Starts the development server and loads your app in an iOS simulator.\n    \n      npm run android\n        (Requires Android build tools)\n        Starts the development server and loads your app on a connected Android\n        device or emulator.\n    \n      npm test\n        Starts the test runner.\n    \n      npm run eject\n        Removes this tool and copies build dependencies, configuration files\n        and scripts into the app directory. If you do this, you can’t go back!\n    \n    We suggest that you begin by typing:\n\n      cd client\n      npm start\n   \n    Happy hacking!\n```\n\nWe can now start up the template application ensure that it works correctly. Starting it is a case of running `npm start` from the project directory:\n\n![chat-app-react-native-start-application](//images.contentful.com/1es3ne0caaid/6lOnR2VsdO44uumQu00KY/05e0a81ced530618fb64bdc21ac39d55/chat-app-react-native-start-application.png)\n\nAmongst other things, this shows a huge QR Code on the screen. This is designed for the Expo app on your mobile device to read in order to connect to the application. If we now load up Expo and scan this code with it, it will load the application for you to see:\n\n![chat-app-react-native-default-homescreen](//images.contentful.com/1es3ne0caaid/5nantNK54AKgCEYaccUOiC/45300e8ddaa41ae0801bb01c70c14424/chat-app-react-native-default-homescreen.png)\n\n### Adding a Login screen\nThe first thing we’re going to need is a screen where the user can enter a name to appear as. This is simply going to be a label and a text input field for now.\n\nTo achieve this, we are going to create a new React component that handles this. This will go in `Login.js` and look like this:\n\n```\n    import React from 'react';\n    import { StyleSheet, Text, TextInput, KeyboardAvoidingView } from 'react-native';\n    \n    export default class Login extends React.Component { // (1)\n      render() {\n        return (\n          \u003cKeyboardAvoidingView style={styles.container} behavior=\"padding\"\u003e // (2)\n            \u003cText\u003eEnter the name to connect as:\u003c/Text\u003e // (3)\n            \u003cTextInput autoCapitalize=\"none\" // (4)\n                       autoCorrect={false}\n                       autoFocus\n                       keyboardType=\"default\"\n                       maxLength={ 20 }\n                       placeholder=\"Username\"\n                       returnKeyType=\"done\"\n                       enablesReturnKeyAutomatically\n                       style={styles.username}\n                       onSubmitEditing={this.props.onSubmitName}\n                       /\u003e\n          \u003c/KeyboardAvoidingView\u003e\n        );\n      }\n    }\n    \n    const styles = StyleSheet.create({ // (5)\n      container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      username: {\n        alignSelf: 'stretch',\n        textAlign: 'center'\n      }\n    });\n```\n\nThis works as follows:\n\n1. Define our Login component that we are going to use\n2. Render the `KeyboardAvoidingView`. This is a special wrapper that understands the keyboard on the device and shifts things around so that they aren’t hidden underneath it\n3. Render some simple text as a label for the user\n4. Render a text input field that will collect the name the user wants to register as. When the user presses the Submit button this will call a provided callback to handle the fact\n5. Apply some styling to the components so that they look as we want them to\n\nWe then need to make use of this in our application. For now this is a simple case of updating `App.js` as follows:\n\n```\n    import React from 'react';\n    import Login from './Login';\n    \n    export default class App extends React.Component { // (1)\n      constructor(props) {\n        super(props); // (2)\n        this.handleSubmitName = this.onSubmitName.bind(this); // (3)\n        this.state = { // (4)\n          hasName: false\n        };\n      }\n    \n      onSubmitName(e) { // (5)\n        const name = e.nativeEvent.text;\n        this.setState({\n          name,\n          hasName: true\n        });\n      }\n    \n      render() { // (6)\n        return (\n          \u003cLogin onSubmitName={ this.handleSubmitName } /\u003e\n        );\n      }\n    }\n```\n\nThis is how this works:\n\n1. Define our application component\n2. We need a constructor to set up our initial state, so we need to pass the props up to the parent\n3. Add a local binding for handling when a name is submitted. This is so that the correct value for `this` is used\n4. Set the initial state of the component. This is the fact that no name has been selected yet. We’ll be making use of that later\n5. When a name is submitted, update the component state to reflect this\n6. Actually render the component. This only renders the Login view for now\n\nIf you left your application running then it will automatically reload. If not then restart it and you will see it now look like this:\n\n![chat-app-react-native-login-page](//images.contentful.com/1es3ne0caaid/4vaH8gMx2MCyKYKiSGiGMA/8eb74f105ce45bc460776597bc153b40/chat-app-react-native-login-page.png)\n\n### Managing the connection to Pusher\nOnce we’ve got the ability to enter a name, we want to be able to make use of it. This will be a Higher Order Component that manages the connection to Pusher but doesn’t render anything itself.\n\nFirstly we are going to need some more modules to actually support talking to Pusher. For this we are going to use the [pusher-js](https://github.com/pusher/pusher-js/) module, which has React Native support. This is important because React Native is not a full Node compatible environment, so the full [pusher module](https://www.npmjs.com/package/pusher) will not work correctly.\n\n```\n    \u003e npm install --save pusher-js\n```\n\nWe then need our component that will make use of this. Write a file `ChatClient.js`:\n\n```\n    import React from 'react';\n    import Pusher from 'pusher-js/react-native';\n    import { StyleSheet, Text, KeyboardAvoidingView } from 'react-native';\n    \n    import pusherConfig from './pusher.json';\n    \n    export default class ChatClient extends React.Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          messages: []\n        };\n        this.pusher = new Pusher(pusherConfig.key, pusherConfig); // (1)\n    \n        this.chatChannel = this.pusher.subscribe('chat_channel'); // (2)\n        this.chatChannel.bind('pusher:subscription_succeeded', () =\u003e { // (3)\n          this.chatChannel.bind('join', (data) =\u003e { // (4)\n            this.handleJoin(data.name);\n          });\n          this.chatChannel.bind('part', (data) =\u003e { // (5)\n            this.handlePart(data.name);\n          });\n          this.chatChannel.bind('message', (data) =\u003e { // (6)\n            this.handleMessage(data.name, data.message);\n          });\n        });\n        \n        this.handleSendMessage = this.onSendMessage.bind(this); // (9)\n      }\n    \n      handleJoin(name) { // (4)\n        const messages = this.state.messages.slice();\n        messages.push({action: 'join', name: name});\n        this.setState({\n          messages: messages\n        });\n      }\n      \n      handlePart(name) { // (5)\n        const messages = this.state.messages.slice();\n        messages.push({action: 'part', name: name});\n        this.setState({\n          messages: messages\n        });\n      }\n      \n      handleMessage(name, message) { // (6)\n        const messages = this.state.messages.slice();\n        messages.push({action: 'message', name: name, message: message});\n        this.setState({\n          messages: messages\n        });\n      }\n    \n      componentDidMount() { // (7)\n        fetch(`${pusherConfig.restServer}/users/${this.props.name}`, {\n          method: 'PUT'\n        });\n      }\n    \n      componentWillUnmount() { // (8)\n        fetch(`${pusherConfig.restServer}/users/${this.props.name}`, {\n          method: 'DELETE'\n        });\n      }\n    \n      onSendMessage(text) { // (9)\n        const payload = {\n            message: text\n        };\n        fetch(`${pusherConfig.restServer}/users/${this.props.name}/messages`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(payload)\n        });\n      }\n    \n      render() { // (10)\n        const messages = this.state.messages;\n    \n        return (\n          \u003cText\u003eMessages: { messages.length }\u003c/Text\u003e\n        );\n      }\n    }\n```\n\nThere’s an awful lot going on here, so let’s go over it all:\n\n1. This is our Pusher client. The configuration for this is read from an almost identical to the one on the server - the only difference is that this file also has the URL to that server, but that’s not used by Pusher\n2. This is where we subscribe to the Pusher channel that our Server is adding all of the messages to\n3. This is a callback when the subscribe has been successful, since it’s an asynchronous event\n4. This is a callback registered whenever we receive a `join` message on the channel, and it adds a message to our list\n5. This is a callback registered whenever we receive a `part` message on the channel, and it adds a message to our list\n6. This is a callback registered whenever we receive a `message` message on the channel, and it adds a message to our list\n7. When the component first mounts, we send a message to the server informing them of the user that has connected\n8. When the component unmounts, we send a message to the server informing them of the usre that has left\n9. This is the handler for sending a message to the server, which will be hooked up soon\n10. For now we just render a counter of the number of messages received\n\nThis isn’t very fancy yet, but it already does all of the communications with both our server and with Pusher to get all of the data flow necessary.\nNote that to communicate with our server we use the [Fetch API](https://developer.mozilla.org/en/docs/Web/API/Fetch_API), which is a standard part of the React Native environment. We do need the address of the server, which we put into our `pusher.json` file to configure it. This file then looks as follows here:\n\n```\n    {\n        \"appId\":\"SOME_APP_ID\",\n        \"key\":\"SOME_APP_KEY\",\n        \"secret\":\"SOME_APP_SECRET\",\n        \"cluster\":\"SOME_CLUSTER\",\n        \"encrypted\":true,\n        \"restServer\":\"http://192.168.0.15:4000\"\n    }\n```\n\n----------\n\n**Note**\nWhen you actually deploy this for real, the *restServer* property will need to be changed to the address of the live server.\n\n----------\n\n### Chat Display\nThe next thing that we need is a way to display all of the messages that happen in our chat. This will be a list containing every message, displaying when people join, when they leave and what they said. This will look like this:\n\n\n```\n    import React from 'react';\n    import { StyleSheet, Text, TextInput, FlatList, KeyboardAvoidingView } from 'react-native';\n    import { Constants } from 'expo';\n    \n    export default class ChatView extends React.Component {\n      constructor(props) {\n        super(props);\n    \n        this.handleSendMessage = this.onSendMessage.bind(this);\n      }\n    \n      onSendMessage(e) { // (1)\n        this.props.onSendMessage(e.nativeEvent.text);\n        this.refs.input.clear();\n      }\n    \n      render() { // (2)\n        return (\n          \u003cKeyboardAvoidingView style={styles.container} behavior=\"padding\"\u003e\n            \u003cFlatList data={ this.props.messages } \n                      renderItem={ this.renderItem }\n                      styles={ styles.messages } /\u003e\n            \u003cTextInput autoFocus\n                       keyboardType=\"default\"\n                       returnKeyType=\"done\"\n                       enablesReturnKeyAutomatically\n                       style={ styles.input }\n                       blurOnSubmit={ false }\n                       onSubmitEditing={ this.handleSendMessage }\n                       ref=\"input\"\n                       /\u003e\n          \u003c/KeyboardAvoidingView\u003e\n        );\n      }\n    \n      renderItem({item}) { // (3)\n        const action = item.action;\n        const name = item.name;\n    \n        if (action == 'join') {\n            return \u003cText style={ styles.joinPart }\u003e{ name } has joined\u003c/Text\u003e;\n        } else if (action == 'part') {\n            return \u003cText style={ styles.joinPart }\u003e{ name } has left\u003c/Text\u003e;\n        } else if (action == 'message') {\n            return \u003cText\u003e{ name }: { item.message }\u003c/Text\u003e;\n        }\n      }\n    }\n    \n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'flex-start',\n        justifyContent: 'flex-start',\n        paddingTop: Constants.statusBarHeight\n      },\n      messages: {\n        alignSelf: 'stretch'\n      },\n      input: {\n        alignSelf: 'stretch'\n      },\n      joinPart: {\n        fontStyle: 'italic'\n      }\n    });\n```\n\nThis works as follows:\n\n1. When the user submits a new message, we call the handler we were provided, and then clear the input box so that they can type the next message\n2. Render a *FlatList* of messages, and an input box for the user to type their messages into. Each message is rendered by the *renderItem* function\n3. Actually render the messages in the list into the appropriate components. Every message is in a *Text* component, with the actual text and the styling depending on the type of message.\n\nWe then need to update the *render* method of the *ChatClient.js* component to look as follows:\n\n```\n      render() {\n        const messages = this.state.messages;\n    \n        return (\n            \u003cChatView messages={ messages } onSendMessage={ this.handleSendMessage } /\u003e\n        );\n      }\n```\n\nThis is simply so that it renders our new *ChatView* in place of just the number of messages received.\n\nFinally, we need to update our main view to display the Chat Client when logged in. Update *App.js* to look like this:\n\n```\n      render() {\n        if (this.state.hasName) {\n          return (\n            \u003cChatClient name={ this.state.name } /\u003e\n          );\n        } else {\n          return (\n            \u003cLogin onSubmitName={ this.handleSubmitName } /\u003e\n          );\n        }\n      }\n```\n\nThe end result of this will look something like this:\n\n![chat-app-react-native-demo](//images.contentful.com/1es3ne0caaid/5wRZEV2DjqoWk0mWUIQ6aI/fa20729730a5845efe2cadf3a6cf1246/chat-app-react-native-demo.gif)\n\n## Conclusion\n\nThis article has shown an introduction to the fantastic React Native framework for building universal mobile applications, and shown how it can be used in conjunction with the Pusher service for handling realtime messaging between multiple different clients.\n\nAll of the source code for this application is available at [Github](https://github.com/sazzer/react-native-chat).","metaTitle":"Build a chat app with React Native","metaDescription":"In this tutorial, build a simple chat app with React Native and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5iVt9pr8RaQmi6OmQYOmwG","type":"Entry","createdAt":"2018-02-22T15:02:42.944Z","updatedAt":"2020-06-19T14:18:26.221Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime counter using ASP.NET","url":"counter-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}}],"reviewDate":"2017-09-06","description":"Create a live website visits counter using ASP.NET and jQuery.","prerequisite":"A basic understanding of C# and JavaScript is needed to follow this tutorial.","content":"It is common practice on websites and applications to make viewers aware of how many others have interacted with the same content e.g. [YouTube videos](https://www.youtube.com/watch?v=Qoti7G-tjN8). The practice of displaying this information emphasizes the relevance of the resource and draws more attention to it.\n\nIn this tutorial, we will emulate this practice by displaying the number of visits to a single page website. We will use C Sharp, C# for short, as our server-side language with ASP.NET MVC to build our webpage and Pusher to provide realtime updates of the page visits. \n\nLet’s get started!\n\n\n## Building the frontend for our realtime counter in .NET\n\n### First, let’s start up Visual Studio\nFor this tutorial, we’ll be using Visual Studio. It’s an IDE that makes ASP.NET development easier and quicker. Visual Studio 2017 is free and available for the popularly used Operating Systems. You can find installation details [here](https://www.visualstudio.com/).\n\n### Creating our new project\nWe’ll start a new project by clicking **New Project** on the Visual Studio dashboard. Following the GUI prompts (in this order) we:\n  - Set C# as the language to use\n  - Select ASP.NET MVC Project as the template\n  - Include a Unit Test Project (this is optional and can be unticked)\n  - Fill in the Project name e.g. Notif (any name would do)\n  - Fill in the Solution name i.e. application name (again any name would do)\n  - Select the version control options to include git to the project\n\nAnd then click **Create**.\n\nThe project gets created with a default `HomeController.cs`. This is the HomeController class file. For the purpose of this tutorial, being a single page website, this single Controller class will be enough.\n\n\n\u003e 💡 ASP.NET MVC routes follow the pattern of /{ControllerName}/{ActionName} i.e assuming our **HomeController.cs** has a method named **Index** the route would be **viewdotnet.com/Home/Index**. ASP.NET MVC provides **Home** as the default controller name and **Index** as the default action name so that a route ‘**/**’ i.e. **viewdotnet.com/** maps to the Index method in the Home controller.\n\nIn our `HomeController.cs` we’ll have\n\n```\n            public ActionResult Index()\n            {\n                var mvcName = typeof(Controller).Assembly.GetName();\n                var isMono = Type.GetType(\"Mono.Runtime\") != null;\n    \n                ViewData[\"Version\"] = mvcName.Version.Major + \".\" + mvcName.Version.Minor;\n                ViewData[\"Runtime\"] = isMono ? \"Mono\" : \".NET\";\n    \n                return View();\n            }\n```\n\n**ActionResult** is the return type of the method which specifies that it will return an action in the form of rendering a view, serving a streamed file, etc. **ViewData** is used to pass data from the method to the HTML file (our view file) that will be rendered. **View()** creates a view response which we return. **Note that** `**Mono**` **is only available on a Mac OS machine.** \n\n\u003e 💡 In ASP.NET MVC the views (html files) rendered by a Controller Class must exist in the View folder and either under the Shared folder or the Folder bearing the name of the Controller. i.e. for the HomeController views must be in either `Views/Home/*``.cshtml` or `Views/Shared/*``.cshtml`.\n\u003e \n\u003e Also when the view is unspecified in the View function it defaults to `index.cshtml`; these views extend `_Layout.cshtml` found in the Shared folder.\n\n### Create the single web page\n\nTo achieve a quick and simple web page for our visitors to view we’ll be using [Bootstrap](https://getbootstrap.com).\n\n```\n    //_Layout.cshtml file\n    \n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003e@ViewBag.Title\u003c/title\u003e\n            \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        @RenderBody()\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"\u003e \u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe’ve used CDNs to include to Bootstrap CSS and JS files and also the jQuery JS file (it is needed for Bootstrap JS).\n\n\n\u003e **@ViewBag** is another means of passing data to the view file from the controller\n\u003e **@RenderBody** is where our actual view `index.cshtml`  will be inserted in this base view\n\n```\n    // index.cshtml file\n    \n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003ch2\u003eView Funny Memes, Have a good laugh\u003c/h2\u003e\n            \u003cdiv class=\"col-md-8\"\u003e\n                \u003cimg src=\"http://i.imgur.com/gRWkE0j.jpg\"\u003e\n            \u003c/div\u003e        \n        \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nOur page has a header and a big image (pretty minimal stuff)\n\n## Keeping track of views\n\nNow we’ll write the code to display the number of visitors to our page. We’ll need our code:\n\n\n- To recognize a visit\n- To store the visits so far (adding to this stored value every time someone visits)\n- To pass the data (number of visitors) to our view to display\n\nIn our `HomeController.cs` we’ll add the code to retrieve the visits so far, increment it and pass it on to the view. To keep things light and simple, we’ll be using file storage as our store (i.e. reading and writing the number of visits to a file such as visitors.txt).\n\n```\n    //HomeController.cs\n    ...\n    using System.IO;\n    \n    namespace notif.Controllers\n    {\n        public class HomeController : Controller\n        {\n            public ActionResult Index()\n            {\n                ViewBag.Title = \"Views Dot Net | A pusher - .Net Tutorial\";\n            \n                var visitors = 0;\n            \n                if (System.IO.File.Exists(\"visitors.txt\")) {\n                    string noOfVisitors = System.IO.File.ReadAllText(\"visitors.txt\");\n                    visitors = Int32.Parse(noOfVisitors);\n                }\n                \n                ++visitors;\n            \n                var visit_text = (visitors == 1) ? \" view\" : \" views\";\n                System.IO.File.WriteAllText(\"visitors.txt\", visitors.ToString());\n            \n                ViewData[\"visitors\"] = visitors;\n                ViewData[\"visitors_txt\"] = visit_text;\n            \n            \n                return View();\n            }\n    ...\n```\n\nWe create a **visitors** variable and initialize it to 0. Then we check if the `visitors.txt` file exists, if it does then we’ve been visited in the past and we read the content into the **visitors** variable. Next, we increment the value of **visitors** by 1 (the visitor we are currently serving) and save the new value back into our file.\n\n\n\u003e 💡 To check if a file exists, read, and write into it, we’ll use the File class (available from ASP.NET) which is a member of the **System.IO** namespace so at the top of our class file we’ve added  `using System.IO;`\n\nNow that we have the number of visitors in a variable, we’ll pass it on to our view using **ViewData**. We’ve also added some supporting text based on the value of the visitors variable to improve readability. In our view file we’ll add some markup to display the visitors value and text we’re passing along.\n\n```\n    //index.cshtml\n    \n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003ch2\u003eView Funny Memes, Have a good laugh\u003c/h2\u003e\n            \u003cdiv class=\"col-md-8\"\u003e\n                \u003cimg src=\"http://i.imgur.com/gRWkE0j.jpg\"\u003e\n            \u003c/div\u003e        \n        \u003c/div\u003e\n        \u003cbr\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-12\"\u003e\n                \u003cdiv class=\"pull-left\"\u003e\n                    \u003cp\u003e \u003cb id=\"noOfVisitors\"\u003e@ViewData[\"visitors\"]\u003c/b\u003e \u003cspan id=\"visitorsText\"\u003e @ViewData[\"visitors_txt\"] \u003c/span\u003e \u003c/p\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nNow our page will look like:\n\n![counter-aspnet-debug](//images.contentful.com/1es3ne0caaid/5XpGPfMB3y8oOCw8euGOEc/5b6d29addaefac77c7c7b16a0b06c2af/counter-aspnet-debug.png)\n\n## Adding realtime updates to our views counter with Pusher\n\nWhile a user views our page we’d like them to know when more people visit the page by increasing the **number of views** without requiring a refresh. We will be using Pusher for this.\n\nTo start with, lets head over to the pusher [dashboard](https://dashboard.pusher.com/) and create an app. You can [register for free](https://pusher.com/signup?plan=sandbox) if you haven’t got an account. Fill out the create app form with the information requested.\n\nTo make our app realtime, we’ll make each visit trigger an event via Pusher on the server-side (i.e. backend) and have Pusher listen and react to that event on the client-side (i.e. view using JavaScript).\n\n### Triggering event on the server-side\n\nIn our `HomeController.cs`, on every new visit using Pusher we’ll trigger a `newVisit` event on a channel we’ll call `general` which will broadcast the current number of visits.\n\nTo do this, we’ll install Pusher via NuGet - *a packer manager for ASP.NET *- by:\n- Right clicking the `*Packages*` folder in our solution\n- Selecting `Add Packages` and;\n- Searching and selecting `Pusher Server`\n\nNext, we’ll initialize Pusher in our Controller using and trigger our `newVisit` event.\n\n```\n    //HomeController.cs\n    \n    ...\n    using PusherServer;\n    \n    public ActionResult Index()\n    {\n        ViewBag.Title = \"Views Dot Net | A pusher - .Net Tutorial\";\n        var visitors = 0;\n    \n        if (System.IO.File.Exists(\"visitors.txt\")) {\n            string noOfVisitors = System.IO.File.ReadAllText(\"visitors.txt\");\n            visitors = Int32.Parse(noOfVisitors);\n        }\n    \n        ++visitors;\n        var visit_text = (visitors == 1) ? \" view\" : \" views\";\n        \n        System.IO.File.WriteAllText(\"visitors.txt\", visitors.ToString());\n    \n        var options = new PusherOptions();\n        options.Cluster = \"PUSHER_APP_CLUSTER\";\n    \n        var pusher = new Pusher(\n        \"PUSHER_APP_ID\",\n        \"PUSHER_APP_KEY\",\n        \"PUSHER_APP_SECRET\", options);\n    \n        pusher.TriggerAsync(\n        \"general\",\n        \"newVisit\",\n        new { visits = visitors.ToString(), message = visit_text });\n    \n        ViewData[\"visitors\"] = visitors;\n        ViewData[\"visitors_txt\"] = visit_text;\n    \n        return View();\n    }\n```\n\n\u003e 💡 After Installing the `PusherServer` package we use it in our controller by adding `using PusherServer` at the top of our class definition.\n\nAfter initializing Pusher using our **PUSHER_APP_ID**, **PUSHER_APP_KEY,** *****PUSHER_APP_SECRET and PUSHER_APP_CLUSTER*** *(be sure to replace these with the actual values from your dashboard),* we will broadcast an object consisting of the **number of visitors** and the **visitors supporting text** with our pusher instance on the `newVisit` event via the `general` channel.\n\n### Listening for the event on our client-side\n\nTo react to our `newVisit` event and its corresponding data we’ll be using JavaScript and JQuery for DOM manipulation to display the event data.\n\n```\n    //_Layout.cshtml\n    \n    ...\n    \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n            \u003cscript\u003e\n    \n                // Enable pusher logging - don't include this in production\n                Pusher.logToConsole = true;\n    \n                var pusher = new Pusher('PUSHER_APP_KEY', {\n                    cluster:'PUSHER_APP_CLUSTER'\n                });\n    \n                var channel = pusher.subscribe('general');\n                \n                channel.bind('newVisit', function(data) {\n                  \n                  var visits = data.visits;\n                  var message = data.message;\n                  $('#noOfVisitors').text( visits );\n                  $('#visitorsText').text( message );\n                });\n            \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the above code, we:\n\n- Add the pusher library to our view via a CDN,\n- Initialize Pusher passing in our PUSHER_APP_KEY,\n- Subscribe to the `general` channel\n- Bind the channel to the `newVisit` event also attaching a callback function to the binding.\n\nIn our callback function we retrieve the **visits** and **message** data, then using jQuery pass it into our markup.\n\nNow we run our application by clicking the play button in the top left corner of our IDE and here’s a glimpse of our resulting webpage.\n\n![counter-aspnet-demo](//images.contentful.com/1es3ne0caaid/1rQGWpFwVK8k8EqIGoQaCq/9fc865b9cb2e12902f2c5870adb88bd4/counter-aspnet-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we’ve covered building a single web page with ASP.NET MVC in C# and how to implement realtime functionality in our web page using Pusher in both C# and JavaScript. There’s a lot more functionality we can achieve using ASP.NET and Pusher together, feel free to extend the functionality of your web page.","metaTitle":"Build a realtime counter using ASP.NET","metaDescription":"Discover how you can build a live counter using ASP.NET and jQuery."}}],"defaultValue":"JavaScript","queryType":"tag","pages":33,"route":"/tutorials","query":{"tag":"JavaScript","page":"27"}}},"page":"/tutorials","query":{"tag":"JavaScript","page":"27"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=JavaScript&page=27 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:45:17 GMT -->
</html>