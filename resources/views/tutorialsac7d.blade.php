<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=JavaScript&page=32 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:32:32 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">290</span> tutorials for “<span class="css-npldjc ehwuahf2">JavaScript</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials512c.html?product=Beams&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials.html" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#C223CE"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="JavaScript"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/live-comments-laravel.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live comments feature using Laravel</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Create a live comments feature using Laravel and Pusher.</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/twitter-feed-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Social<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a Twitter feed using Swift</h3><p class="css-k12xad e5jrto45">Build your own iOS realtime Twitter feed app and track a custom set of hashtags.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/activity-feed-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Social<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime activity feed with Laravel</h3><p class="css-k12xad e5jrto45">Take advantage from Laravel power and build a live activity feed.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/typing-indicator-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Social Interactions<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a typing indicator with Laravel</h3><p class="css-k12xad e5jrto45">Integrate a typing indicator feature in your Laravel app using Vue.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-angular.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">TypeScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app with Angular</h3><p class="css-k12xad e5jrto45">Build a basic chat web application using Angular, a popular Javascript framework and enable realtime functions.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/typing-indicator-javascript.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a typing indicator with JavaScript</h3><p class="css-k12xad e5jrto45">Build a typing indicator in a chat application with JavaScript and display the name or username of who is currently typi...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a Swift chat app</h3><p class="css-k12xad e5jrto45">Learn how to build a group chat app using Swift and Node.js</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/shopping-cart-java-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Java<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live UX</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime shopping cart with Java and React</h3><p class="css-k12xad e5jrto45">Discover how to sync your shopping cart between browsers and devices with Java and React.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/activity-feed-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an activity feed with React</h3><p class="css-k12xad e5jrto45">Build a simple activity feed with Node.js REST API, Express and Mongoose. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsa3e2.html?tag=JavaScript&amp;page=31" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials700d.html?tag=JavaScript&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials65e2.html?tag=JavaScript&amp;page=30" class="css-za1ua3 edg0byb1">30</a><a href="tutorialsa3e2.html?tag=JavaScript&amp;page=31" class="css-za1ua3 edg0byb1">31</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsac7d.html?tag=JavaScript&amp;page=32" class="css-2wakph edg0byb1">32</a><a href="tutorials3c54.html?tag=JavaScript&amp;page=33" class="css-5s6711 edg0byb1">33</a><a href="tutorials3c54.html?tag=JavaScript&amp;page=33" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":290,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1TxqLiHFt2E2g4iEuUMgC0","type":"Entry","createdAt":"2018-02-27T10:52:20.139Z","updatedAt":"2018-06-01T11:07:13.309Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live comments feature using Laravel","url":"live-comments-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55LOucxD5Ycm4oGSGa0A2O","type":"Entry","createdAt":"2018-02-15T15:02:22.618Z","updatedAt":"2018-02-15T15:02:22.618Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Viraj Khatavkar","url":"viraj-khatavkar","email":"viraj@virajkhatavkar.com","twitter":"https://twitter.com/virajkhatavkar","github":"https://github.com/viraj-khatavkar","guestWriter":true}}],"projectRepo":"https://github.com/viraj-khatavkar/live-commenting-pusher-laravel","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2017-03-10","description":"Create a live comments feature using Laravel and Pusher.","prerequisite":"A basic understanding of Laravel and Vue.js is needed to follow this tutorial.","content":"Live commenting allows users to see new comments from other users without reloading the page. This paves a way to have better collaboration and conversation between friends and collaborators. It brings dynamic feel to the application interface and a better usability.\n\nToday, we will create a live commenting system using [Laravel](https://laravel.com/) and [Pusher](https://pusher.com/). With the release of [Echo](https://laravel.com/docs/5.4/broadcasting), Laravel has provided an out of the box solution for implementing realtime data synchronisation using event broadcasting. It is simple and we can get started in a matter of few minutes.\n\nA basic understanding of Laravel and Vue is needed to understand this tutorial.\n\n## Setup an app on Pusher\n\nWe need to [sign up on Pusher](https://pusher.com/signup) and create a new app.\n\n![live-comments-laravel-create-app](//images.contentful.com/1es3ne0caaid/D7dQh1tlxAIGC0eiWyqW2/aae782335d89328cf3d4a322efcaed33/live-comments-laravel-create-app.png)\n\n## Install Laravel, Pusher SDK and Echo\n\nFirst, we will grab a fresh copy of Laravel:\n\n```\nlaravel new live-commenting-pusher-laravel\n```\n\nThis will install the latest version of the Laravel framework and download the necessary dependencies. Next, we will install the [Pusher PHP SDK](https://github.com/pusher/pusher-http-php) using [Composer](https://getcomposer.org/download/):\n\n```\ncomposer require pusher/pusher-php-server\n```\n\nNext, we will install the JavaScript dependencies:\n\n```\nnpm install\n```\n\nNow, we need to install two Javascript libraries necessary for realtime event broadcasting: Laravel Echo and Pusher JS\n\n```\nnpm install --save laravel-echo pusher-js\n```\n\nWe require some form of user authentication mechanism to demonstrate the functionality. Let us use the default authentication scaffolding provided by Laravel:\n\n```language-bash\nphp artisan make:auth\n```\n\n## Configuration\n\nFirst, we need to set the `APP_ID`, `APP_KEY`, `APP_SECRET` and `APP_CLUSTER` in the environment file. We can get these details in our Pusher [app dashboard](https://dashboard.pusher.com/):\n\n``` \n# .env\n\nBROADCAST_DRIVER=pusher\n\nPUSHER_APP_ID=your-pusher-app-id\nPUSHER_APP_KEY=your-pusher-app-key\nPUSHER_APP_SECRET=your-pusher-app-secret\nPUSHER_APP_CLUSTER=your-pusher-app-cluster\n```\n\nNext, we need to create a fresh Echo instance in our applications's JavaScript. We can do so at the bottom of our `resources/assets/js/bootstrap.js` file:\n\n```\nimport Echo from \"laravel-echo\"\n\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: 'your-pusher-app-key',\n    cluster: 'ap2',\n    encrypted: true\n});\n```\n\n## Our application\n\nWe will create a live commenting functionality for a video similar to what YouTube does. The core feature is the number of users active on this page and whenever a user comments on the video, it will be automatically broadcasted as a feed of the comments to all the viewers who are viewing this video. We will not cover anything relating to writing CRUD functionality using Laravel. We will concentrate on the code necessary for implementing the live commenting feature. The code is available on a [Github repository](https://github.com/viraj-khatavkar/live-commenting-pusher-laravel) for cloning and understanding purposes.\n\n## Online users\n\nWe will now show the number of users who are currently online on the video page. This is a typical feature where we show a message: **2 users watching now**. Whenever a new user joins or leaves the page, the count is automatically updated. Let us implement that with Echo and it is super simple. Let us go and fill out our `listen` method in the `Example` Vue component.\n\n```\nlisten() {\n    Echo.join('video')\n        .here((users) =\u003e {\n            this.count = users.length;\n        })\n        .joining((user) =\u003e {\n            this.count++;\n        })\n        .leaving((user) =\u003e {\n            this.count--;\n        });\n}\n```\n\n`join` is used when we want to join a presence channel and that is used to tell us who else is on the page. Presence channels are automatically private channels. We do need to authenticate them.\n\n`here` gives us a list of users that are also present on the same page.\n\n`joining` will be executed whenever a new user joins the channel or page in the above scenario.\n\n`leaving` will be executed whenever a user leaves the channel.\n\nBelow is the demonstration where the count of users present on the page is updated automatically when a user leaves or joins the page.\n\n![live-comments-laravel-demo](//images.contentful.com/1es3ne0caaid/2o6B0UKR9GSqcKMouGomsE/053b5976ca9adb65011d16ddb406897c/live-comments-laravel-demo.gif)\n\n## Migrations\n\nNext, we need a `comments` table where we can store all the comments for the video.\n\n```\nphp artisan make:model Comment -m\n```\n\nThe `comments` table would require the following fields:\n\n1. Body of each comment\n2. A field to link the comment to the user that created it\n3. A field to link the comment to the video for which it is posted\n \nBelow is the migration for our `comments` table:\n\n```\n\u003c?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateCommentsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('comments', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003etext('body');\n            $table-\u003einteger('video_id')-\u003eunsigned();\n            $table-\u003einteger('user_id')-\u003eunsigned();\n            $table-\u003etimestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('comments');\n    }\n}\n```\n\n## Broadcasting new comments\n\nWhenever a new comment is created, we need to fire an event which will be broadcasted over Pusher to a specific presence channel. For broadcasting an event, it should implement the `ShouldBroadcast` interface. Let us first create the `NewComment` event:\n\n```\nphp artisan make:event NewComment\n```\n\n### broadcastOn method\n\nThe event should implement a `broadcastOn` method. This method should return the presence channel to which the event should be broadcasted.\n\n```\nnamespace App\\Events;\n\nuse App\\Comment;\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Broadcasting\\PresenceChannel;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass NewComment implements ShouldBroadcast\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    public $comment;\n\n    public function __construct(Comment $comment)\n    {\n        $this-\u003ecomment = $comment;\n    }\n\n    public function broadcastOn()\n    {\n        return new PresenceChannel('video');\n    }\n\n    public function broadcastWith()\n    {\n        return [\n            'id' =\u003e $this-\u003ecomment-\u003eid,\n            'body' =\u003e $this-\u003ecomment-\u003ebody,\n            'user' =\u003e [\n                'name' =\u003e $this-\u003ecomment-\u003euser-\u003ename,\n                'id' =\u003e $this-\u003ecomment-\u003euser-\u003eid,\n            ],\n        ];\n    }\n}\n```\nNext, we need to start our queue to actually listen for jobs and broadcast any events that are recorded. We can use the database queue listener on our local environment:\n\n```\nphp artisan queue:listen\n```\n\n### Broadcast the event\n\nWhenever a new comment is created, we will broadcast the `NewComment` event using the `broadcast` helper:\n\n```\npublic function store(Video $video)\n{\n    $comment = $video-\u003ecomments()-\u003ecreate([\n        'body' =\u003e request('body'),\n        'user_id' =\u003e auth()-\u003euser()-\u003eid,\n        'video_id' =\u003e $video-\u003eid\n    ]);\n\n    $comment = Comment::where('id', $comment-\u003eid)-\u003ewith('user')-\u003efirst();\n\n    broadcast(new NewComment($comment))-\u003etoOthers();\n\n    return $comment;\n}\n```\n\nWhenever we create a new comment, we push it to the `comments` variable so that it is reflected instantly for the user. If we do not use the `toOthers` method, then the event would also be broadcasted to the user who has created it. This would create a list of duplicate comments.\n\n`toOthers` allows you to exclude the current user from the broadcast's recipients.\n\n## Listening for new comments on the presence channel\n\nInstallation and configuration of Laravel Echo is a must before we can start listening to new comments. We have covered the process in detail in the above section of this article. Please go through it if you might have skipped it.\n\n```\nEcho.join('video')\n    .here((users) =\u003e {\n        this.count = users.length;\n    })\n    .joining((user) =\u003e {\n        this.count++;\n    })\n    .leaving((user) =\u003e {\n        this.count--;\n    })\n    .listen('NewComment', (e) =\u003e {\n        this.comments.unshift(e);\n    });\n```\n\n### Authorization\n\nEvery presence channel is a private channel. Laravel Echo will automatically call the specified authentication route. But, we still need to write the authentication logic which will actually authorize the user to listen to a particular channel.\n\nAuthorization logic is written in the `routes/channels.php`. The authorization logic for our `video` channel is:\n\n```\nBroadcast::channel('video', function ($user) {\n    return [\n        'id' =\u003e $user-\u003eid,\n        'name' =\u003e $user-\u003ename,\n    ];\n});\n```\n\nWe are not going to return `true` or `false`. If the user is authenticated to listen on this presence channel we are going to return an array of data that we want to be returned to that callback in the `listen` method.\n\nYou can write the authentication logic as required for your application in the above callback and return null if authorization fails.\n\n## Vue Component\n\nThat's it! Now, whenever a new comment is created, it will be broadcast and we can listen using our presence channel.\n\nBelow is our Example component written using `Vue.js`\n\n```\n\u003ctemplate\u003e\n\u003cdiv class=\"container\"\u003e\n    \u003cdiv class=\"row\"\u003e\n    \u003cdiv class=\"col-sm-5\"\u003e\n            \u003cdiv class=\"panel panel-primary\"\u003e\n                \u003cdiv class=\"panel-heading\" id=\"accordion\"\u003e\n                    \u003cspan class=\"glyphicon glyphicon-comment\"\u003e\u003c/span\u003e Chat\n                    \u003cdiv class=\"btn-group pull-right\"\u003e\n                        \u003ca type=\"button\" class=\"btn btn-default btn-xs\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapseOne\"\u003e\n                            \u003cspan class=\"glyphicon glyphicon-chevron-down\"\u003e\u003c/span\u003e\n                        \u003c/a\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003cdiv class=\"panel-collapse collapse\" id=\"collapseOne\"\u003e\n                \u003cdiv class=\"panel-body\"\u003e\n                    \u003cul class=\"chat\"\u003e\n                        \u003cli class=\"left clearfix\" v-for=\"comment in comments\"\u003e\n                        \u003cspan class=\"chat-img pull-left\"\u003e\n                            \u003cimg src=\"http://placehold.it/50/55C1E7/fff\u0026text=U\" alt=\"User Avatar\" class=\"img-circle\" /\u003e\n                        \u003c/span\u003e\n                            \u003cdiv class=\"chat-body clearfix\"\u003e\n                                \u003cdiv class=\"header\"\u003e\n                                    \u003cstrong class=\"primary-font\"\u003e{{ comment.user.name }}\u003c/strong\u003e \u003csmall class=\"pull-right text-muted\"\u003e\n                                        \u003cspan class=\"glyphicon glyphicon-time\"\u003e\u003c/span\u003e12 mins ago\u003c/small\u003e\n                                \u003c/div\u003e\n                                \u003cp\u003e\n                                    {{ comment.body }}\n                                \u003c/p\u003e\n                            \u003c/div\u003e\n                        \u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"panel-footer\"\u003e\n                    \u003cdiv class=\"input-group\"\u003e\n                        \u003cinput id=\"btn-input\" type=\"text\" class=\"form-control input-sm\" placeholder=\"Type your message here...\" v-model=\"body\" @keyup.enter=\"postComment()\" /\u003e\n                        \u003cspan class=\"input-group-btn\"\u003e\n                            \u003cbutton class=\"btn btn-warning btn-sm\" id=\"btn-chat\" @click.prevent=\"postComment()\"\u003e\n                                Send\u003c/button\u003e\n                        \u003c/span\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"col-sm-7\"\u003e\n            \u003ciframe width=\"640\" height=\"280\" src=\"https://www.youtube.com/embed/Xip2TgAEVz4\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-sm-12\"\u003e\n            \u003ch1\u003e\n                {{ count }} watching now\n            \u003c/h1\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\u003c/template\u003e\n\n\u003cscript\u003e\n    export default {\n        props: ['user', 'video'],\n        data() {\n            return {\n                viewers: [],\n                comments: [],\n                body: 'Your comment',\n                count: 0\n            }\n        },\n        mounted() {\n            this.listen();\n            this.getComments();\n        },\n        methods: {\n            getComments() {\n                axios.get('/api/videos/'+ this.video.id +'/comments?api_token=' + this.user.api_token, {})\n                .then((response) =\u003e {\n                    this.comments = response.data;\n                });\n            },\n            postComment() {\n                axios.post('/api/videos/'+ this.video.id +'/comment?api_token=' + this.user.api_token, {\n                    body: this.body\n                })\n                .then((response) =\u003e {\n                    this.comments.unshift(response.data);\n                });\n            },\n            listen() {\n                Echo.join('video')\n                    .here((users) =\u003e {\n                        this.count = users.length;\n                    })\n                    .joining((user) =\u003e {\n                        this.count++;\n                    })\n                    .leaving((user) =\u003e {\n                        this.count--;\n                    })\n                    .listen('NewComment', (e) =\u003e {\n                        this.comments.unshift(e);\n                    });\n            }\n        }\n    }\n\u003c/script\u003e\n```\nBelow is the image demonstrating the workflow of our system:\n\n![live-comments-laravel-workflow](//images.contentful.com/1es3ne0caaid/mXQPhDqOqG4UmicYGeWa6/aafa43a2d287bf3f8dd1ec124f1eef6e/live-comments-laravel-workflow.gif)\n\n## Conclusion\n\nIn this article, we have covered how to create a live commenting system using Laravel and Pusher. We have covered the configuration options necessary to get started, and the example above should help you fill in the gaps and give an overview of some of the other configuration options available to you.","metaTitle":"Build a live comments feature using Laravel","metaDescription":"Create a live comments feature using Laravel and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3er1QaHNaUuCmkcCC8iAwA","type":"Entry","createdAt":"2018-02-22T15:02:41.959Z","updatedAt":"2018-02-28T14:35:17.882Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a Twitter feed using Swift","url":"twitter-feed-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/twitter-feed-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-03-08","description":"Build your own iOS realtime Twitter feed app and track a custom set of hashtags.","prerequisite":"A basic understanding of Swift and Node.js is needed to follow this tutorial.","content":"Every second, thousands of tweets are tweeted on Twitter. To make sense of it all, we can track what interests us by following tweets with certain hashtags. In this tutorial, we're going to build an iOS realtime Twitter feed app with Pusher to track a custom set of hashtags.\n\nIn the backend, we'll have a Node.js process listening for tweets that contain one or more defined hashtags. When we find one, we'll publish an object with the tweet information to a Pusher channel.\n\nOn the other hand, the iOS app will be listening for new tweets in that channel to add them to a feed. To keep things simple, the app will only show some basic information for each tweet. This is how the app looks like in action:\n\n![twitter-feed-swift-demo](//images.contentful.com/1es3ne0caaid/2r2ZcT6GEc6qkKqaUCQSi6/88fb467bf849b1fe4e3d11fb17fccfef/twitter-feed-swift-demo.gif)\n\nThe complete source code of the [Node.js process](https://github.com/eh3rrera/hashtags_pusher) and the [iOS app](https://github.com/eh3rrera/twitter-feed-pusher) is on Github for reference.\n\nLet's get started!\n\n## Setting up Pusher\n\nCreate a free account at [https://pusher.com/signup](https://pusher.com/signup).\n\nWhen you first log in, you'll be asked to enter some configuration options to create you app:\n\n![twitter-feed-swift-create-app](//images.contentful.com/1es3ne0caaid/1j4McgnNB04o4sWcY0iGSs/17445723edb998f36c55e192ba75cb34/twitter-feed-swift-create-app.png)\n\nEnter a name, choose *iOS* as your frontend tech, and *Node.js* as your backend tech. This will give you some sample code to get you started:\n\n![twitter-feed-swift-getting-started](//images.contentful.com/1es3ne0caaid/13G490Uqm62aWyogw20ueI/34aecf9f5674f2b7be3d4d0da8826863/twitter-feed-swift-getting-started.png)\n\nBut don't worry, this won't lock you into this specific set of technologies, you can always change them. With Pusher, you can use any combination of libraries.\n\nThen go to the *App Keys* tab to copy your App ID, Key, and Secret credentials, we'll need them later.\n\n## Setting up a Twitter app\n\nLog in to your Twitter account and go to [https:/apps.twitter.com/app/new](https://apps.twitter.com/app/new) to create a new application.\n\nYou'll have to enter the following:\n\n- **Name** (your application name, which shouldn't have to be taken, for instance, *pusher_hashtags_1*)\n- **Description** (your application description)\n- **Website** (your application's publicly accessible home page. We're not going to use it, so you can enter *http://127.0.0.1*).\n\n![twitter-feed-swift-application-management](//images.contentful.com/1es3ne0caaid/5V96LgoNBCOkWyAoauSIKI/f3bcdc07dbc8bdffa8854ab5bc8c0bd5/twitter-feed-swift-application-management.png)\n\nAfter you agree to Twitter's developer agreement, your application will be created.\n\nNow go to the *Keys and Access Token* section and create your access token by clicking on the *Create my access token* button:\n\n![twitter-feed-swift-access-token-twitter](//images.contentful.com/1es3ne0caaid/4L1r2YO2esG80A4KEIeIYe/32d4f648f45ea027ba6c50cef0851efe/twitter-feed-swift-access-token-twitter.png)\n\nSave your consumer key, consumer secret, access token, and access token secret since we'll need them later.\n\n# The backend\n\nWe'll get the tweets by using the [Twitter Streaming API](https://dev.twitter.com/streaming/overview) with the help of the [twit](https://github.com/ttezel/twit) library.\n\nYou can clone the [GitHub repository](https://github.com/eh3rrera/hashtags_pusher) and run `npm install` to set up dependencies.\n\nThen, create a `config.js` file from `config.sample.js` :\n\n``` \ncp config.js.sample config.js\n```\n\nAnd enter your Twitter and Pusher information:\n\n```\nmodule.exports = {\n  twitter: {\n    consumer_key        :  '\u003cINSERT_TWITTER_CONSUMER_KEY_HERE\u003e',\n    consumer_secret     :  '\u003cINSERT_TWITTER_CONSUMER_SECRET_HERE\u003e',\n    access_token        :  '\u003cINSERT_TWITTER_ACCESS_TOKEN_HERE\u003e',\n    access_token_secret :  '\u003cINSERT_TWITTER_ACCESS_TOKEN_SECRET_HERE\u003e',\n  },\n\n  pusher: {\n    appId      : '\u003cINSERT_PUSHER_APP_ID_HERE\u003e',  \n    key        : '\u003cINSERT_PUSHER_KEY_ID_HERE\u003e',\n    secret     : '\u003cINSERT_PUSHER_SECRET_ID_HERE\u003e',\n    encrypted  : true,\n  },\n\n  hashtagsToTrack: ['#nodejs', '#swift', '#ios', 'programming'],\n\n  channel: 'hashtags',\n\n  event: 'new_tweet',\n}\n```\n\nYou can also change the hashtags to track if you want.\n\nOur main file, `app.js`, is simple. After some setup code, we configure the Twitter stream to filter tweets by the hashtags to track:\n\n```\nconst config = require('./config');\nconst Twit = require('twit');\nconst Pusher = require('pusher');\n\nconst T = new Twit(config.twitter);\n\nconst pusher = new Pusher(config.pusher);\n\nconst stream = T.stream('statuses/filter', { track: config.hashtagsToTrack });\n```\n\nWhen a new tweet matches our conditions, we'll extract the properties our iOS client will need to create an object and publish it to a Pusher channel as a `new_tweet` event:\n\n```\n...\n\nstream.on('tweet', (tweet) =\u003e {\n  const message = {\n    message: tweet.text, \n    username: tweet.user.screen_name, \n    name: tweet.user.name, \n  };\n\n  pusher.trigger(config.channel, config.event, message);\n});\n```\n\nAnd that's all this process does, let's see how the iOS client is built.\n\n## Setting up the Xcode project\n\nWe'll be using iOS 10 and Swift 3 to build our app, so Xcode 8 is required.\n\nTo start, open Xcode and create a *Single View Application*:\n\n![twitter-feed-swift-single-view-application](//images.contentful.com/1es3ne0caaid/2ZuF7suPiwSysOIoyooSiW/87b7a3c694d7e6c34a291931d5e3276b/twitter-feed-swift-single-view-application.png)\n\nGive it a name, choose *Swift* as the language and *Universal* in the *Devices* option:\n\n![twitter-feed-swift-app-options](//images.contentful.com/1es3ne0caaid/48HHFtP1ocOsQEyi6GG2ii/80431e2f142b25ac36ec2542309faaa8/twitter-feed-swift-app-options.png)\n\nNow, we're going to install the project dependencies with [CocoaPods](https://cocoapods.org/). Close your Xcode project, and in a terminal window go to the top-level directory of your project and execute this command:\n\n``` \npod init\n```\n\nThis will create a text file named `Podfile` with some defaults, open it and add as dependencies `PusherSwift` and `AlamofireImage`. It should look like this:\n\n```\n# Uncomment the next line to define a global platform for your project\n# platform :ios, '9.0'\n\ntarget 'twitter_feed_pusher' do\n  # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\n  use_frameworks!\n\n  # Pods for twitter_feed_pusher\n  pod 'PusherSwift'\n  pod 'AlamofireImage'\n\nend\n```\n\nNow you can install the dependencies in your project with:\n\n``` \npod install\n```\n\nAnd from now on, make sure to open the generated Xcode workspace instead of the project file:\n\n``` \nopen twitter_feed_pusher.xcworkspace\n```\n\nFor apps like this, creating everything programmatically is easier. We won't use the *Interface Builder* or the storyboard file that Xcode creates (`Main.storyboard`).\n\nSo let's start by opening the file `AppDelegate.swift` to manually create the window in which our app is going to live and specify a `rootViewController`:\n\n```\nimport UIKit\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: \n        [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n\n        // Override point for customization after application launch.\n        window = UIWindow(frame: UIScreen.main.bounds)\n        window?.makeKeyAndVisible()\n\n        window?.rootViewController = UINavigationController(rootViewController: ViewController())\n\n        return true\n    }\n\n    ...\n}\n```\n\nIn the above code, we're using the `ViewController` file Xcode created for us.\n\nNow let's use a `UITableViewController`, this will give us for free an `UITableViewDataSource` and an `UITableViewDelegate`.\n\nOpen the `ViewController` class and make it extend from `UITableViewController`:\n\n```\nimport UIKit\n\nclass ViewController: UITableViewController {\n    ...\n}\n```\n\nIf you run the app at this point, you should see something like the following:\n\n![twitter-feed-swift-run-initial-app](//images.contentful.com/1es3ne0caaid/7MBJmAajjaYasoym4YqwQC/d7935ed935b1fdfda6ba1f61a34fbb73/twitter-feed-swift-run-initial-app.png)\n\nNow let's take a closer look at how the app is going to present a tweet. It has a profile image, the name of the user, the Twitter username, and the text of the tweet:\n\n![twitter-feed-swift-closer-look-tweet](//images.contentful.com/1es3ne0caaid/3zEvMcITzOaOSaI6mawQwq/797660ff6a69b7d4739458d861287d69/twitter-feed-swift-closer-look-tweet.png)\n\nSo let's create a new Swift file, `Tweet.swift`, to create a structure that will hold the tweet's information:\n\n```\nimport Foundation\n\nstruct Tweet {\n    let name: String\n    let username: String\n    let message: String\n}\n```\n\nWe don't have to create a property to hold the profile image URL, we can get it from the username.\n\nWe're going to need a custom cell class for our `UITableView`. Once again, create a new Swift file, this time with the name `TweetCell.swift` and the following content:\n\n```\nimport UIKit\n\nclass TweetCell: UITableViewCell {\n\n    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n}\n```\n\nTo simplify the layout, our cell is going to have a `UIImageView` for the image profile and a `UITextView` for the rest of the content, which will be formatted as an attributed string:\n\n![twitter-feed-swift-custom-cell-layout](//images.contentful.com/1es3ne0caaid/3MZ4jq3XIQCsOkIeQmGeWa/f1a5c3057fb08bf63d3fbbf925f7de0d/twitter-feed-swift-custom-cell-layout.png)\n\nSo let's add these views along with some properties:\n\n```\nclass TweetCell: UITableViewCell {\n\n    let profileImage: UIImageView = {\n        let imageView = UIImageView()\n        imageView.layer.cornerRadius = 5\n        imageView.clipsToBounds = true\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n\n        return imageView\n    }()\n\n    let messageText: UITextView = {\n        let textView = UITextView()\n        textView.translatesAutoresizingMaskIntoConstraints = false\n        textView.isUserInteractionEnabled = false\n\n        return textView\n    }()\n\n    ...\n}\n```\n\nIt's important to set `translatesAutoresizingMaskIntoConstraints` to `false` because we're going to use the [NSLayoutAnchor API](https://developer.apple.com/reference/uikit/nslayoutanchor) to position our views.\n\nLet's add the `UIImageView` at the top-left corner of the cell, with an offset of `12` points on both left and top, and a width and height of `50`:\n\n```\nclass TweetCell: UITableViewCell {\n\n    ...\n\n    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n\n    addSubview(profileImage)\n\n        profileImage.topAnchor.constraint(equalTo: self.topAnchor, constant: 12).isActive = true\n        profileImage.leftAnchor.constraint(equalTo: self.leftAnchor, constant: 12).isActive = true\n        profileImage.widthAnchor.constraint(equalToConstant: 50).isActive = true\n        profileImage.heightAnchor.constraint(equalToConstant: 50).isActive = true\n    }\n\n    ...\n}\n```\n\nAnd the `UITextView` at the left of the profile image, with a top and left offset of `4` points and using all the available space of the cell:\n\n```\nclass TweetCell: UITableViewCell {\n    ...\n\n    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {\n        ...\n\n        addSubview(messageText)\n\n        messageText.topAnchor.constraint(equalTo: self.topAnchor, constant: 4).isActive = true\n        messageText.leftAnchor.constraint(equalTo: profileImage.rightAnchor, constant: 4).isActive = true\n        messageText.bottomAnchor.constraint(equalTo: self.bottomAnchor).isActive = true\n        messageText.rightAnchor.constraint(equalTo: self.rightAnchor).isActive = true\n    }\n\n    ...\n}\n```\n\nNow let's add a property observer so when an object of type `Tweet` is set on this cell, we can compose our attributed string and set the value of the profile image (don't forget to import `AlamofireImage`):\n\n```\nimport UIKit\nimport AlamofireImage\n\nclass TweetCell: UITableViewCell {\n\n    var tweet: Any? {\n        didSet {\n            guard let t = tweet as? Tweet else { return }\n\n            // Add the name in bold\n            let attributedText = NSMutableAttributedString(string: t.name, attributes: [NSFontAttributeName: UIFont.boldSystemFont(ofSize: 16)])\n\n            // Add the Twitter username in grey color (and a new line)\n            attributedText.append(NSAttributedString(string: \" @\\(t.username)\\n\", attributes: [NSFontAttributeName: UIFont.systemFont(ofSize: 14), NSForegroundColorAttributeName: UIColor.gray]))\n\n            // Modify the line spacing of the previous line so they look a litle separated\n            let paragraphStyle = NSMutableParagraphStyle()\n            paragraphStyle.lineSpacing = 5\n            let range = NSMakeRange(0, attributedText.string.characters.count)\n            attributedText.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: range)\n\n            // Add the message\n            attributedText.append(NSAttributedString(string: t.message, attributes: [NSFontAttributeName: UIFont.systemFont(ofSize: 14)]))\n\n            messageText.attributedText = attributedText\n\n            // Compose the image URL with the username and set it with AlamofireImage\n            let imageUrl = URL(string: \"https://twitter.com/\" + t.username + \"/profile_image\")\n            profileImage.af_setImage(withURL: imageUrl!)\n        }\n    }\n\n    ...\n}\n```\n\nNow, in the `ViewController` class, let's create a cell identifier, an array that will control our tweets and the Pusher object:\n\n```\nimport UIKit\nimport PusherSwift\n\nclass ViewController: UITableViewController {\n\n    let cellId = \"cellId\"\n    var tweets = [Tweet]()\n    var pusher: Pusher! = nil\n\n    ...\n}\n```\n\nSo we can register the type `TweetCell` and instantiate the Pusher object inside `viewDidLoad`:\n\n```\nclass ViewController: UITableViewController {\n\n    ...\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        navigationItem.title = \"Pusher Feed\"\n\n        tableView.register(TweetCell.self, forCellReuseIdentifier: cellId)\n\n        pusher = Pusher(\n            key: \"\u003cINSERT_YOUR_PUSHER_KEY_HERE\u003e\"\n        )\n\n\n    }\n}\n```\n\nWe will listen to new tweets by subscribing to the channel `hashtags` and binding the event `new_tweet` :\n\n```\nclass ViewController: UITableViewController {\n\n    ...\n\n    override func viewDidLoad() {\n\n        ...\n\n    let channel = pusher.subscribe(\"hashtags\")\n\n        let _ = channel.bind(eventName: \"new_tweet\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String : AnyObject] {\n\n                // Extract the Tweet information\n                let message = data[\"message\"] as! String\n                let name = data[\"name\"] as! String\n                let username = data[\"username\"] as! String\n\n                // Create a tweet\n                let tweet = Tweet(name: name, username: username, message: message)\n\n                // Insert it at the beginning of the array\n                self.tweets.insert(tweet, at: self.tweets.startIndex)\n\n                // Insert the new tweet at the beginning of the table and scroll to that position\n                let indexPath = IndexPath(row: 0, section: 0)\n                self.tableView.insertRows(at: [indexPath], with: UITableViewRowAnimation.automatic)\n                self.tableView.scrollToRow(at: indexPath, at: UITableViewScrollPosition.none, animated: true)\n            }\n        })\n\n        pusher.connect()\n    }\n}\n```\n\nThis way, we can extract the tweet information, create a `Tweet` instance and insert it in the array and in the `tableView` to display it.\n\nOf course, for this to happen, we also need to implement the following methods:\n\n```\nclass ViewController: UITableViewController {\n\n    ...\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n        return tweets.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellId, for: indexPath) as! TweetCell\n\n        // At this point, the didSet block will set up the cell's views\n        cell.tweet = tweets[indexPath.item]\n\n        return cell;\n    }\n}\n```\n\nOne last detail. The cells need to have a dynamic height to accommodate the text of the tweet. One easy way to achieve this is by disabling the scrolling on the cell's `UITextView`:\n\n```\nclass TweetCell: UITableViewCell  {\n\n    ...\n\n    let messageText: UITextView = {\n        let textView = UITextView()\n        ...\n\n        textView.isScrollEnabled = false\n\n        return textView\n    }()\n\n    ...\n}\n```\n\nEstimating an average row height, and setting the `rowHeight` property this way:\n\n```\nclass ViewController: UITableViewController {\n\n    ...\n\n    override func viewDidLoad() {\n        ...\n\n        tableView.estimatedRowHeight = 100.0\n        tableView.rowHeight = UITableViewAutomaticDimension\n\n        ...\n    }\n\n    ...\n}\n```\n\nAnd we're done!\n\n## Testing the app\n\nRun the iOS app in the simulator or in a real device:\n\n![twitter-feed-swift-first-run](//images.contentful.com/1es3ne0caaid/5zg4uzd7FK4Y80sUw6uCu8/4cbad8a8c9434bc3573b3d0cd426bf50/twitter-feed-swift-first-run.png)\n\nAnd execute the backend with:\n\n``` \nnode app.js\n```\n\nOr if you only want to test the app, you can use the [Pusher Debug Console on your dashboard](http://dashboard.pusher.com/):\n\n![twitter-feed-swift-debug-console](//images.contentful.com/1es3ne0caaid/38bSzl7HDiee028UQqeMKu/3037c291075ce328357c7a5b5be6d661/twitter-feed-swift-debug-console.png)\n\nWhen a `new_tweet` event is received in the Pusher channel, the new tweet will come up in the iOS app:\n\n![twitter-feed-swift-demo](//images.contentful.com/1es3ne0caaid/2r2ZcT6GEc6qkKqaUCQSi6/88fb467bf849b1fe4e3d11fb17fccfef/twitter-feed-swift-demo.gif)\n\n## Conclusion\n\nYou can find the final version of the backend [here](https://github.com/eh3rrera/hashtags_pusher) and the final version of the iOS app [here](https://github.com/eh3rrera/twitter-feed-pusher).\n\nHopefully, this tutorial has shown you how to build a Twitter feed for an iOS app with Pusher in an easy way. You can improve the app by showing more information or saving it to a database. \n\n## Further reading\n\n- [Pusher Swift client](https://github.com/pusher/pusher-websocket-swift)\n- [Twitter Streaming API](https://dev.twitter.com/streaming/overview)\n- [Twit Node.js library](https://github.com/ttezel/twit)\n- [Pain Free Constraints with Layout Anchors](http://useyourloaf.com/blog/pain-free-constraints-with-layout-anchors/)\n- [Property observers: didSet](https://www.hackingwithswift.com/read/8/5/property-observers-didset)\n- [Using Attributed Strings in Swift 3.0](https://makeapppie.com/2016/07/05/using-attributed-strings-in-swift-3-0)","metaTitle":"Build a Twitter feed using Swift","metaDescription":"Build your own iOS realtime Twitter feed application using Swift and Node.js and  learn how to track a custom set of hashtags."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5EyzdiGB7GQ8EIIeamWgUq","type":"Entry","createdAt":"2018-02-16T11:31:53.507Z","updatedAt":"2018-02-28T14:11:02.960Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime activity feed with Laravel","url":"activity-feed-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55LOucxD5Ycm4oGSGa0A2O","type":"Entry","createdAt":"2018-02-15T15:02:22.618Z","updatedAt":"2018-02-15T15:02:22.618Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Viraj Khatavkar","url":"viraj-khatavkar","email":"viraj@virajkhatavkar.com","twitter":"https://twitter.com/virajkhatavkar","github":"https://github.com/viraj-khatavkar","guestWriter":true}}],"projectRepo":"https://github.com/viraj-khatavkar/activity-feed-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2017-03-06","description":"Take advantage from Laravel power and build a live activity feed.","prerequisite":"A basic understanding of Laravel and Vue.js are needed to follow this tutorial.","content":"Activity feeds display our behaviour into an event-based timeline, so we can follow along with our actions as we experience a product. Having a realtime feed improves the user experience and gives instant data synchronisation relating to the actions taken by the user or their collaborators.\n\nToday, we will create a realtime Activity Feed using [Laravel](https://laravel.com/) and [Pusher](https://pusher.com/). With the release of [Echo](https://laravel.com/docs/5.4/broadcasting), Laravel has provided an out of the box solution for implementing a realtime data synchronisation using event broadcasting. It is simple and we can get started in a matter of few minutes.\n\n## Setup an app on Pusher\n\nWe need to [sign up to Pusher](https://pusher.com/signup) and create a new app.\n\n![activity-feed-laravel-create-app](//images.contentful.com/1es3ne0caaid/1EVNOby9rWgYGqyOsuky2S/bf8e90962701acda5f785ee00663cefd/activity-feed-laravel-create-app.png)\n\n## Install Laravel, Pusher SDK and Echo\n\nFirst, we will grab a fresh copy of Laravel:\n\n```\nlaravel new activity-feed-pusher\n```\n\nThis will install the latest version of the Laravel framework and download the necessary dependencies. Next, we will install the [Pusher PHP SDK](https://github.com/pusher/pusher-http-php) using [Composer](https://getcomposer.org/download/):\n\n```\ncomposer require pusher/pusher-php-server\n```\n\nNext, we will install the JavaScript dependencies:\n\n```\nnpm install\n```\nNow, we need to install two Javascript libraries necessary for realtime event broadcasting: Laravel Echo and Pusher JS\n\n```\nnpm install --save laravel-echo pusher-js\n```\n\nWe require some form of user authentication mechanism to demonstrate the functionality. Let us use the default authentication scaffolding provided by Laravel:\n\n```\nphp artisan make:auth\n```\n## Configuration\n\nFirst, we need to set the `APP_ID`, `APP_KEY`, `APP_SECRET` and `APP_CLUSTER` in the environment file. We can get these details in our Pusher [app dashboard](https://dashboard.pusher.com/):\n\n``` \n# .env\n\nBROADCAST_DRIVER=pusher\n\nPUSHER_APP_ID=your-pusher-app-id\nPUSHER_APP_KEY=your-pusher-app-key\nPUSHER_APP_SECRET=your-pusher-app-secret\nPUSHER_APP_CLUSTER=your-pusher-app-cluster\n```\nNext, we need to create a fresh Echo instance in our applications's JavaScript. We can do so at the bottom of our `resources/assets/js/bootstrap.js` file:\n\n```\nimport Echo from \"laravel-echo\"\n\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: 'your-pusher-app-key',\n    cluster: 'ap2',\n    encrypted: true\n});\n```\n## Our application\n\nWe will create a basic to-do application for the purpose of this article. We will not cover anything relating to writing CRUD functionality using Laravel. We will concentrate on the code necessary for implementing a realtime Activity Feed. The code is available on a [Github repository](https://github.com/viraj-khatavkar/activity-feed-pusher) for cloning and understanding purposes.\n\n## Migrations\n\nNext, we need a `activities` table, where we can record all the actions taken by a user. Let us create a model and migration:\n\n```\nphp artisan make:model Activity -m\n```\nThe `activities` table would require the following fields:\n\n1. Name of each recorded activity - Eg: created, updated or deleted\n2. A field to link the activity to the user that created it\n3. A polymorphic relation to store the details of the model for which the activity is being recorded\n \nBelow is our migration file for the `activities` table:\n\n```\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateActivitiesTable extends Migration \n{\n\n    public function up()\n    {\n        Schema::create('activities', function(Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003einteger('subject_id')-\u003eindex();\n                $table-\u003estring('subject_type')-\u003eindex();\n                $table-\u003estring('name');\n                $table-\u003einteger('user_id')-\u003eindex();\n                $table-\u003etimestamps();\n            });\n    }\n\n    public function down()\n    {\n        Schema::drop('activities');\n    }\n\n}\n```\n\n## Recording activity\n\nTo record activity for a specific model, we need to track any model updates whenever it is `created`, `updated` or `deleted`. We will create a trait which will hijack these events and store the necessary data into the `activities` table.\n\nThe trait will have following methods:\n\n1. `bootRecordsActivity` - Eloquent will automatically trigger this method. This will be the starting point for the process of recording the activity.\n2. `recordActivity` - This method will store the activity details in the `activities` table\n3. `getActivityName` - This will return the name of activity viz. *created_task* or *updated_task*\n4. `getModelEvents` - This method will return an array of model events that are to be recorded. We can overwrite this in our Model if necessary.\n \nThe `RecordsActivity` trait will look like this:\n\n```\n# RecordsActivity.php\n\nnamespace App;\n\nuse App\\Events\\ActivityLogged;\nuse ReflectionClass;\n\ntrait RecordsActivity\n{\n    /**\n     * Register the necessary event listeners.\n     *\n     * @return void\n     */\n    protected static function bootRecordsActivity()\n    {\n        foreach (static::getModelEvents() as $event) {\n            static::$event(function ($model) use ($event) {\n                $model-\u003erecordActivity($event);\n            });\n        }\n    }\n\n    /**\n     * Record activity for the model.\n     *\n     * @param  string $event\n     * @return void\n     */\n    public function recordActivity($event)\n    {\n        $activity = Activity::create([\n            'subject_id' =\u003e $this-\u003eid,\n            'subject_type' =\u003e get_class($this),\n            'name' =\u003e $this-\u003egetActivityName($this, $event),\n            'user_id' =\u003e $this-\u003euser_id\n        ]);\n\n        event(new ActivityLogged($activity));\n    }\n\n    /**\n     * Prepare the appropriate activity name.\n     *\n     * @param  mixed  $model\n     * @param  string $action\n     * @return string\n     */\n    protected function getActivityName($model, $action)\n    {\n        $name = strtolower((new ReflectionClass($model))-\u003egetShortName());\n\n        return \"{$action}_{$name}\";\n    }\n\n    /**\n     * Get the model events to record activity for.\n     *\n     * @return array\n     */\n    protected static function getModelEvents()\n    {\n        if (isset(static::$recordEvents)) {\n            return static::$recordEvents;\n        }\n\n        return [\n            'created', 'deleted', 'updated'\n        ];\n    }\n}\n```\nNext, we will include this trait in the `Task` and `Comment` models:\n\n```\n# app/Task.php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Task extends Model\n{\n    use RecordsActivity;\n\n    ...\n    ...\n}      \n\n\n# app/Comment.php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Task extends Model\n{\n    use RecordsActivity;\n\n    ...\n    ...\n}    \n\n```\nNow, any changes in the above models will be recorded in the `activities` table. Let us create a task:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2017/03/activity-feed-with-laravel-and-pusher-create-task.gif\" alt=\"\" width=\"600\" height=\"375\" class=\"alignnone size-full wp-image-2886\" /\u003e\n\nThis action is recorded in the `activities` table:\n\n```\n\u003e\u003e\u003e Activity::all();\n=\u003e Illuminate\\Database\\Eloquent\\Collection {#671\n     all: [\n       App\\Activity {#672\n         id: 1,\n         subject_id: 1,\n         subject_type: \"App\\Task\",\n         name: \"created_task\",\n         user_id: 1,\n         created_at: \"2017-02-16 10:54:00\",\n         updated_at: \"2017-02-16 10:54:00\",\n       },\n     ],\n   }\n```\nLet us now comment on *Task 1*:\n\n![activity-feed-laravel-add-comment](//images.contentful.com/1es3ne0caaid/3BZo8CAB2M0wWoggawwIsM/bf8e90962701acda5f785ee00663cefd/activity-feed-laravel-add-comment.gif)\n\nThis action is also recorded in the `activities` table:\n\n```\n\u003e\u003e\u003e Activity::latest()-\u003efirst();\n=\u003e App\\Activity {#690\n     id: 2,\n     subject_id: 1,\n     subject_type: \"App\\Comment\",\n     name: \"created_comment\",\n     user_id: 1,\n     created_at: \"2017-02-16 11:03:05\",\n     updated_at: \"2017-02-16 11:03:05\",\n   }\n```\n## Broadcasting feed\n\nWhenever an activity is logged, we need to fire an event which will be broadcasted over Pusher. For broadcasting an event, it should implement the `ShouldBroadcast` interface. Let us first create the `ActivityLogged` event:\n\n```\nphp artisan make:event ActivityLogged\n```\n### broadcastOn method\n\nThe event should implement a `broadcastOn` method. This method should return the channels to which the event should be broadcast.\n\n### broadcastWith method\n\nBy default, Laravel will broadcast all the public properties in JSON format as the event payload. We can define our logic to broadcast only the necessary data in the `broadcastWith` method.\n\nWe do not want any user of the app to able to listen to all the broadcast activity. To avoid this, we will use the `PrivateChannel` to broadcast our event. For broadcasting on a public channel, we can simply use the `Channel` class.\n\nBelow is our `ActivityLogged` event:\n\n```\n# app/Events/ActivityLogged.php\n\nnamespace App\\Events;\n\nuse App\\Activity;\nuse App\\Transformers\\ActivityTransformer;\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Broadcasting\\PresenceChannel;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Queue\\SerializesModels;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass ActivityLogged implements ShouldBroadcast\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    public $activity;\n\n    public function __construct(Activity $activity)\n    {\n        $this-\u003eactivity = $activity;\n    }\n\n    public function broadcastOn()\n    {\n        return new PrivateChannel('activity.' . $this-\u003eactivity-\u003euser-\u003eid);\n    }\n\n    public function broadcastWith()\n    {\n        return fractal($this-\u003eactivity, new ActivityTransformer())-\u003etoArray();\n    }\n}\n```\nIn the `RecordsActivity` trait, we broadcast this event whenever a new activity is recorded. The snippet from `recordActivity` method:\n\n```language-php\npublic function recordActivity($event)\n{\n    $activity = Activity::create([\n        'subject_id' =\u003e $this-\u003eid,\n        'subject_type' =\u003e get_class($this),\n        'name' =\u003e $this-\u003egetActivityName($this, $event),\n        'user_id' =\u003e $this-\u003euser_id\n    ]);\n\n    broadcast(new ActivityLogged($activity));\n}\n```\nNext, we need to start our queue to actually listen for jobs and broadcast any events that are recorded. We can use the database queue listener on our local environment:\n\n```\nphp artisan queue:listen\n```\n## Listening to feed\n\nInstallation and configuration of Laravel Echo is a must before we can start listening to feeds. We have covered the process in detail in the above section of this article. Please go through it if you might have skipped it.\n\nWe can listen to a public channel using `Echo.channel(channel)`. For listening to a private channel, we need to use `Echo.private(channel)`. As we have broadcasted the `ActivityLogged` event on a private channel, we will use `Echo.private()`:\n\n```language-javascript\nEcho.private('activity.' + this.user.id)\n    .listen('ActivityLogged', (e) =\u003e {\n        //push to feed variable\n    });\n```\n### Authorization\n\nAs we are listening on a private channel, we need to authenticate that the current logged in user should be able to listen on this private channel. Laravel Echo will automatically call the necessary authorization routes if we are listening to a private channel. But, we need to write the authentication logic which will actually authorize the user.\n\nAuthorization logic is written in the `routes/channels.php`. The authorization logic for our `activity` channel:\n\n```language-php\nBroadcast::channel('activity.{id}', function ($user, $id) {\n    return (int) $user-\u003eid === (int) $id;\n});\n```\nThat's it! Now, whenever a new activity is recorded, it will be broadcast and we can listen using this private channel.\n\nWe can even listen to multiple events on the same channel:\n\n```language-javascript\nEcho.private('activity.' + this.user.id)\n    .listen(...)\n    .listen(...)\n    .listen(...);\n```\nBelow is our Activity component written using `Vue.js`\n\n```language-javascript\n\u003ctemplate\u003e\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"panel panel-info\"\u003e\n      \u003c!-- Default panel contents --\u003e\n      \u003cdiv class=\"panel-heading\"\u003eActivity Dashboard\u003c/div\u003e\n\n        \u003cul class=\"list-group\"\u003e\n            \u003cli class=\"list-group-item\" v-for=\"item in feed\"\u003e\n                {{ item.description }}  \n                \u003cspan class=\"pull-right\"\u003e{{ item.lapse }}\u003c/span\u003e\n            \u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003cscript\u003e\n    export default {\n        props: ['user'],\n        data() {\n            return {\n                feed: {}\n            }\n        },\n        mounted() {\n            console.log('Component mounted.')\n\n        },\n        created() {\n            this.getFeed();\n            this.listenForActivity();\n        },\n        methods: {\n            getFeed() {\n                var self = this;\n                return axios.get('/api/activities?api_token=' + this.user.api_token, {})\n                .then(function(response) {\n                    self.feed = response.data.data;\n                });\n            },\n            listenForActivity() {\n                Echo.private('activity.' + this.user.id)\n                    .listen('ActivityLogged', (e) =\u003e {\n                        this.feed.unshift(e.data);\n                    });\n            }\n        }\n    }\n\u003c/script\u003e\n```\nHere is the screenshot of what our Activity Feed looks like:\n\n![activity-feed-laravel-example](//images.contentful.com/1es3ne0caaid/uE0XJzw3M4MWw2cCk8CIk/bf8e90962701acda5f785ee00663cefd/activity-feed-laravel-example.png)\n\n## Conclusion\n\nIn this article, we have covered how to create a realtime Activity Feed for our application. We have covered the configuration options necessary to get started, and the examples above should help you fill in the gaps and give an overview of some of the other configuration options available to you.\n\nThe code is hosted on public [Github repository](https://github.com/viraj-khatavkar/activity-feed-pusher). You can download it for educational purposes. How do you use Laravel and Pusher for activity feed? Can you think of any advanced use cases for this library? What are they? Let us know in the comments!","metaTitle":"Build a realtime activity feed with Laravel","metaDescription":"Build an live activity feed that display user behaviour into an event-based timeline with realtime updates using Laravel, Vue.js and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1yhuKn07UwSYoMAYmggUsK","type":"Entry","createdAt":"2018-02-22T15:02:42.115Z","updatedAt":"2018-02-28T14:40:59.126Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a typing indicator with Laravel","url":"typing-indicator-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5K3KWA2xvqw4SW2sYI8eCG","type":"Entry","createdAt":"2018-02-12T15:34:14.169Z","updatedAt":"2018-02-14T10:09:19.038Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Chimezie Enyinnaya","url":"chimezie-enyinnaya","email":"meziemichael@gmail.com","twitter":"https://twitter.com/ammezie","github":"https://github.com/ammezie","guestWriter":true}}],"projectRepo":"https://github.com/ammezie/laravel-whos-typing","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-03-01","description":"Integrate a typing indicator feature in your Laravel app using Vue.js.","prerequisite":"A basic understanding of Laravel and Vue.js are needed to follow this tutorial.","content":"In this tutorial, I will show you how to build a typing indicator with Laravel and Pusher, using the concept of a chat app to demonstrate it. Note that this tutorial focuses on the typing indicator part of the app (if you want to learn how to build a chat app using Laravel and Pusher, you should read [this tutorial](https://blog.pusher.com/how-to-build-a-laravel-chat-app-with-pusher/)).\n\nLet's take a quick look at what we'll be building:\n\n![typing-indicator-laravel](//images.contentful.com/1es3ne0caaid/628hzh5YVGGuwgg2a8Gi0Y/62e8a60793f9559b6cbb35d7b632ca90/typing-indicator-laravel.gif)\n\nThe code of the completed demo is available on [GitHub](https://github.com/ammezie/laravel-whos-typing).\n\n## Setting Up Laravel\n\nCreate a new Laravel project. (I prefer using the Laravel installer) Open your terminal and run the code below:\n\n```\nlaravel new laravel-whos-typing\n```\n\nNext, we need to setup our new Laravel project. First, we need to register the `App\\Providers\\BroadcastServiceProvider`. Open `config/app.php` and uncomment `App\\Providers\\BroadcastServiceProvider` in the `providers` array.\n\nWe then need to tell Laravel that we are using the Pusher driver in the `.env` file:\n\n```\n// .env\n\nBROADCAST_DRIVER=pusher\n```\n\nSince we specified we want to use Pusher as our broadcasting driver, we need to install the Pusher PHP SDK:\n\n```\ncomposer require pusher/pusher-php-server\n```\n\n## Setting Up Pusher\n\nIf you don't have one already, create a free Pusher account [here](https://pusher.com/signup) and then log in to your dashboard and create an app. Take note of your app credentials as we'll be using them shortly.\n\nNow, let's fill in our Pusher app credentials. If you open the `config/broadcasting.php`, you'll notice that Laravel is pulling some of the Pusher credentials from the `.env` file. So let's update the `.env` file to contain our Pusher app credentials:\n\n```\n// .env\n\nPUSHER_APP_ID=xxxxxx\nPUSHER_APP_KEY=xxxxxxxxxxxxxxxxxxxx\nPUSHER_APP_SECRET=xxxxxxxxxxxxxxxxxxxx\n```\n\nRemember to replace the `x`s with your Pusher app credentials. You can find your app credentials under the **Keys** section on the **Overview** tab in the Pusher Dashboard.\n\nAlso, remember to fill in the `cluster` of your Pusher app and other additional options:\n\n```\n// config/broadcasting.php\n\n'options' =\u003e [\n   'cluster' =\u003e 'eu',\n   'encrypted' =\u003e true\n],\n```\n\n## Installing Frontend Dependencies\n\nFor this tutorial, we'll be using `Bootstrap`, `Vue` and `Axios`, which have been setup for us by Laravel, though we still need to install each of the dependencies. To compile our CSS and JavaScript, we need to install Laravel Mix, which is a wrapper around Webpack. We can install these dependencies through `NPM`:\n\n```\nnpm install\n```\n\nWe also need to install Laravel Echo, which is a JavaScript library that makes it painless to subscribe to channels and listen for events broadcast by Laravel and of course the Pusher JavaScript library:\n\n``` language-bash\nnpm install --save laravel-echo pusher-js\n```\n\nOnce installed, we need to tell Laravel Echo to use Pusher. At the bottom of the `resources/assets/js/bootstrap.js` file, uncomment the Laravel Echo section and update the details with:\n\n```\n// resources/assets/js/bootstrap.js\n\nimport Echo from \"laravel-echo\"\n\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: Laravel.pusherKey,\n    cluster: 'eu',\n    encrypted: true\n}); \n```\n\nSince we specified our Pusher app credentials in the `.env` file, notice `Laravel.pusherKey` from the code above, we'll load our Pusher app key from the config instead of hard coding it directly in `resources/assets/js/bootstrap.js`. We'll define `Laravel.pusherKey` in a later section.\n\nAlso use the same `cluster` that you specified earlier in `config/broadcasting.php`.\n\nWith the setups done, let's start implementing a typing indicator in our Laravel application.\n\nTo do this, we need to know when a user is typing into the chat box. There are different ways to accomplish this, but in this tutorial, we'll add event listeners to the chat box. With this, we can know when a user is actually typing a message and display the typing indicator to the appropriate users.\n\nWe'll make use of JavaScript keyboard events: `onkeydown` which fires event when a user is pressing a key. This means that when a user presses a key, we send events to Pusher. These types of events are called `client events` and do not hit the server at all. But how do we broadcast such events to Pusher since they are a bit different from the normal events (server to Pusher events)? Well, Pusher is aware of such events and has a special way of handling them.\n\nBy default, when you create a Pusher app, client events are not enabled. We have to enable this for our app. To enable client events in your Pusher app, select the app then click on the **App Settings** tab and then check the box next to **Enable client events**.\n\n![typing-indicators-laravel-enable-client-event](//images.contentful.com/1es3ne0caaid/3LmEpfXCFWGwOcGwKOsWm2/9bdf8e898c782932fee24342366f3109/typing-indicators-laravel-enable-client-event.png)\n\nOnce we have enabled client events in our Pusher app, we can now trigger and listen for client events in our chat app.\n\n## Authenticating Users\n\nOur chat app will require users to be logged in before they can begin to chat. So, we need an authentication system:\n\n```\nphp artisan make:auth\n```\nThis will create the necessary routes, views and controllers needed for an authentication system.\n\nBefore we go on to create users, we need to run the `users` migration that comes with a fresh installation of Laravel. But to do this, we first need to setup our database. Open the `.env` file and enter your database details:\n\n```\n// .env\n\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=laravel-chat\nDB_USERNAME=root\nDB_PASSWORD=root\n```\n\nUpdate with your own database details. Now, we can run our migration:\n\n``` language-bash\nphp artisan migrate\n```\n\nNote: There's a bug in Laravel 5.4 if you're running a version of MySQL older than 5.7.7 or MariaDB older than 10.2.2. More info [here](https://github.com/laravel/framework/issues/17508). This can be fixed by replacing the `boot()` of `app/Providers/AppServiceProvider.php` with:\n\n```\n// app/Providers/AppServiceProvider.php\n\n// remember to use\nIlluminate\\Support\\Facades\\Schema;\n\n/**\n * Bootstrap any application services.\n *\n * @return void\n */\npublic function boot()\n{\n  Schema::defaultStringLength(191);\n}\n```\n\n## Defining App Routes\n\nOpen `routes/web.php` and replace the routes with the code below:\n\n```\n// routes/web.php\n\nAuth::routes();\n\nRoute::get('/', function () {\n    return view('chat');\n})-\u003emiddleware('auth');\n```\n\nThe routes are pretty simple: a route that will handle authentication and a route to the homepage that will render a chat view which we'll create shortly.\n\n**NOTE**: Since we have removed the `/home` route, you might want to update the `redirectTo` property of both `app/Http/Controllers/Auth/LoginController.php` and `app/Http/Controllers/Auth/RegisterController.php` to:\n\n```\nprotected $redirectTo = '/';\n```\n\n## Creating the chat app view\n\nCreate a new `resources/views/chat.blade.php` file and paste into it:\n\n```\n// resources/views/chat.blade.php\n\n@extends('layouts.app')\n\n@section('content')\n\u003cdiv class=\"container\"\u003e\n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-8 col-md-offset-2\"\u003e\n            \u003cdiv class=\"panel panel-default\"\u003e\n                \u003cdiv class=\"panel-heading\"\u003eChats\u003c/div\u003e\n\n                \u003cdiv class=\"panel-body\"\u003e\n                    \u003cul\u003e\n                        \u003cli v-for=\"message in messages\"\u003e\n                            @{{ message.user.name }} - @{{ message.message }}\n                        \u003c/li\u003e\n                    \u003c/ul\u003e\n                    \u003cdiv\u003e\n                        \u003cdiv class=\"input-group\"\u003e\n                            \u003cinput type=\"text\" name=\"message\" class=\"form-control\" placeholder=\"Type your message here...\" v-model=\"newMessage\" @keyup.enter=\"sendMessage\"\u003e\n                            \u003cspan class=\"input-group-btn\"\u003e\n                                \u003cbutton class=\"btn btn-primary\" @click=\"sendMessage\"\u003e\n                                    Send\n                                \u003c/button\u003e\n                            \u003c/span\u003e\n                        \u003c/div\u003e\n                        \u003cspan v-show=\"typing\" class=\"help-block\" style=\"font-style: italic;\"\u003e\n                            @{{ user }} is typing...\n                        \u003c/span\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n@endsection\n```\n\nOnce again pretty straightforward, we are using Vue here. We loop through each of the messages and display them. Next, there is a input field and a send button for composing chat messages. The input field is binded to the `newMessage` data. When the send button is clicked or the enter key is pressed on the input field, a `sendMessage()` is called. Lastly, there is span holding the 'is typing' indicator. This will be hidden by default and will be displayed using Vue's `v-show` when `typing` is `true` (that is when a user is typing).\n\nNotice that we are displaying the name of the user along with the 'is typing' indicator, we need a way to pass the authenticated user to our JavaScript file. Remember from `resources/assets/js/bootstrap.js`, where we used `Laravel.pusherKey`, we also need to pass Pusher app key to our JavaScript file. We can do this by updating the `` section in `resources/views/layouts/app.blade.php` (which was created when we ran `make:auth`) with:\n\n```\nresources/views/layouts/app.blade.php\n\n\u003c!-- Scripts --\u003e\n\u003cscript\u003e\n  window.Laravel = {!! json_encode([\n    'csrfToken' =\u003e csrf_token(),\n    'user' =\u003e Auth::user(),\n    'pusherKey' =\u003e config('broadcasting.connections.pusher.key'),\n  ]) !!};\n\u003c/script\u003e\n```\n\nThe code above creates a `Laravel` object on the global window, we then add some items to the object. The `user` item will be the currently authenticated user and the `pusherKey` item will load our Pusher app key from the `config/broadcasting.php` config file.\n\nLaravel has integrated Vue and Axios for us, so we can start using `Vue` without any further setup. There is an `app.js`file that Laravel creates by default within `resources/assets/js/app.js`. Open this file and update with the code below:\n\n```\n// resources/assets/js/app.js\n\nrequire('./bootstrap');\n\nconst app = new Vue({\n    el: '#app',\n\n    data: {\n        messages: [],\n        newMessage: '',\n        user: '',\n        typing: false\n    },\n\n    methods: {\n        sendMessage() {\n            // add new message to messages array\n            this.messages.push({\n                user: Laravel.user,\n                message: this.newMessage\n            });\n\n            // clear input field\n            this.newMessage = '';\n\n            // persist to database\n        }\n    }\n});\n```\n\nFirst, we require the `resources/assets/js/bootsrap.js` file that contains our package setups and integrations. Next, we create a new Vue instance and bind it to **app** `id`. We then create some data variables: `messages` array will hold our chat messages, `newMessage` will be the new message that a user sends, `user` will be the currently authenticated user and finally `typing` will hold `true` or `false` indicating whether a user is typing or not.\n\nNext we define a `sendMessage()` that simply adds the new message along with the user that sent it to the messages array and finally clears the input field. (If you are building an actual chat app, you might want to do an AJAX request to persist the new message to the database here.)\n\nHaving done this, we can start sending messages and our messages will be displayed on the chat view. Now let's move on to the meat of this tutorial; adding a typing indicator to our Laravel application.\n\nLaravel Echo provides some handy methods to integrate with client events which we'll be using to implement our typing indicator.\n\nPaste the code below into the `resources/assets/js/app.js` within the `methods` object:\n\n```\n// resources/assets/js/app.js\n\nisTyping() {\n  let channel = Echo.private('chat');\n\n  setTimeout(function() {\n    channel.whisper('typing', {\n      user: Laravel.user,\n        typing: true\n    });\n  }, 300);\n},\n```\n\nThe `isTyping()` will be triggered when an **onkeydown** event is fired within the chat input field (that is, when a user is typing a message). First, we subscribe to a private channel called `chat` and trigger a client event using Laravel Echo's `whisper()` after 0.3s. The `whisper()` accepts the name of the client event, in our case `typing` and the data we want to broadcast. Since Pusher specifies that client events must be prefixed by `client-`, Laravel is smart enough to prefix the `client-` for us under the hood. We pass the user that is typing a message and typing as `true` as the data we are broadcasting.\n\n**Note:** Client events can only be triggered on private and presence channels because they require authentication. Also, client events are not delivered to the originator of the event. For more information on client events, kindly checkout the Pusher [documentation](https://pusher.com/docs/client_api_guide/client_events#trigger-events).\n\nSince we created a private channel, only authenticated users will be able to listen on the `chat` channel. We need a way to authorize that the currently authenticated user can actually listen on the channel. This can be done by in the `routes/channels.php` file:\n\n```\n// routes/channels.php\n\nBroadcast::channel('chat', function ($user) {\n  return Auth::check();\n});\n```\n\nWe pass to the `channel(),` the name of our channel and a callback function that will either return `true` or `false` depending on whether the current user is authenticated.\n\nNow that we can trigger client events, we also need a way to listen for the client events in our application. To do this, add the code below to `resources/assets/js/app.js` just after the `data` object:\n\n```\n// resources/assets/js/app.js\n\ncreated() {\n  let _this = this;\n\n  Echo.private('chat')\n    .listenForWhisper('typing', (e) =\u003e {\n      this.user = e.user;\n      this.typing = e.typing;\n\n      // remove is typing indicator after 0.9s\n      setTimeout(function() {\n        _this.typing = false\n      }, 900);\n    });\n},\n```\n\nAgain we subscribe to the `chat` channel. To listen for client events, we use the `listenForWhisper()` and set both the `user` and `typing` data accordingly. Lastly, we remove the is typing indicator after 0.9s of a user not typing.\n\nBefore we start testing the typing indicator, let update the input field of the `chat` view with:\n\n```\n// resources/view/chat.blade.php\n\n\u003cinput type=\"text\" name=\"message\" class=\"form-control\" placeholder=\"Type your message here...\" v-model=\"newMessage\" @keydown=\"isTyping\" @keyup=\"notTyping\" @keyup.enter=\"sendMessage\"\u003e\n```\n\nWe added two keyboard events: `@keydown` and `@keyup` which are Vue equivalent of the JavaScript keyboard events we talked about earlier. On keydown, the `isTyping()` will be triggered and on keyup, the `notyping()` will be triggered.\n\nWe can now compile the JavaScript files using Laravel Mix using:\n\n```\nnpm run dev\n```\n\nNow we can start our chat app by running:\n\n```\nphp artisan serve\n```\n\n## Conclusion\n\nWith such a basic app, we have seen how to implement typing indicator in a Laravel application using Pusher.","metaTitle":"Build a typing indicator with Laravel","metaDescription":"Craft an essential feature for messaging users like a typing indicator using Laravel and Vue.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"471EQdSap2QOaaqEwwaU8s","type":"Entry","createdAt":"2018-02-19T15:43:08.045Z","updatedAt":"2019-01-02T15:26:08.706Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app with Angular","url":"chat-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6hNNk2LcVUYo8sQGKaISEc","type":"Entry","createdAt":"2018-02-16T15:14:51.094Z","updatedAt":"2018-02-16T15:14:51.094Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Kirils Ladovs","url":"kirils-ladovs","email":"kirilsladovs@gmail.com","twitter":"https://twitter.com/kirjai","github":"https://github.com/kirjai","guestWriter":true}}],"projectRepo":"https://github.com/kirjai/pusher-chat-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-02-27","description":"Build a basic chat web application using Angular, a popular Javascript framework and enable realtime functions.","prerequisite":"A basic understanding of Angular and Node.js are needed to follow this tutorial.","content":"In this tutorial, we are going to build a basic chat web application using Pusher and [Angular](https://angular.io/), a popular Javascript framework.\n\n## What we are going to be building\n\nUsing our application, users will be able to view and send messages on a private channel.\n\n![chat-angular-demo](//images.contentful.com/1es3ne0caaid/7JtfhcBiCc4WO4ga0SUKSy/bf8e90962701acda5f785ee00663cefd/chat-angular-demo.png)\n\nTo achieve this, we are going to be using Pusher's API for sending and receiving messages in realtime. So make sure you have your Pusher account at hand, or [sign up for free here](https://dashboard.pusher.com/accounts/sign_up). We will also write a tiny server-side Node app that will be used by Pusher to authenticate channel subscriptions received from our Angular front end. Let's look at how these three parts (Pusher, Server, Client) fit together.\n\n![chat-angular-diagram](//images.contentful.com/1es3ne0caaid/1TqlZatPpusQKmmo0GSOuU/bf8e90962701acda5f785ee00663cefd/chat-angular-diagram.png)\n\n## Project structure\n\n\u003e You can find the full code used in this post [in this Github repo](https://github.com/kirjai/pusher-chat-app)\n\nWe are going to keep our server-side and client-side apps separate in their respective directories.\n\n```\nchat-app/\n  chat-app-client/\n  chat-app-server/\n```\n\n## Building a Node app\n\nFirst, let's get the server app out of the way by creating its directory and initializing `npm`.\n\n```\n$ mkdir chat-app-server\n$ cd chat-app-server\n$ npm init\n```\n\nThis will create a `package.json` file for our app. Now let's install our dependencies.\n\n```\n$ npm i --save body-parser express pusher\n```\n\nNote that we are installing the [pusher Node library](https://github.com/pusher/pusher-http-node) as a dependency.\n\nIt's also a good practice to define a `npm start` script. In our `package.json` file, let's replace the default `scripts` property with the following.\n\n```\n// package.json\n\"scripts\": {\n  \"start\": \"node server.js\"\n}\n```\n\nThis maps the command `node server.js` to an `npm start` command. However, `server.js` doesn't exist as a file yet, so let's create it next.\n\n```\n// server.js\nconst express = require('express');\nconst http = require('http');\nconst bodyParser = require('body-parser');\nconst api = require('./api.js');\nconst port = process.env.PORT || '3000';\nconst app = express();\n\n// define middleware\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use((req, res, next) =\u003e {\n  res.header(\"Access-Control-Allow-Origin\", \"*\")\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\")\n  next();\n});\napp.use('/', api);\napp.set('port', port);\n\nconst server = http.createServer(app);\nserver.listen(port, () =\u003e console.log(`Running on port ${port}`));\n```\n\nThe calls to our endpoint will be coming in from a different origin, therefore we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nThis all is standard Node application configuration, nothing specific to our app.\n\n### API Routes\n\nIn our `server.js` file we are referencing a non-existent file `api.js` on line 5. That's the file where we will define our API routes and the logic behind them.\n\n```\n// api.js\nconst express = require('express');\nconst router = express.Router();\nconst Pusher = require('pusher');\n\nrouter.get('/', (req, res) =\u003e {\n  res.send('all good');\n});\n\nmodule.exports = router;\n```\n\nWe've defined one route for our app: `/`, that returns an `all good`response. Now, let's take a step back and define what we want our API to do based on our requirements.\n\n#### Pusher Channel Authentication\n\nConsidering that we will be triggering Pusher events directly from our client, we need to implement an authentication endpoint. This endpoint will be called by Pusher directly in order to authenticate any subscription it receives from our front end.\n\nPusher will be making a `POST` request to an endpoint that we will provide. Therefore, let's create a `POST /pusher/auth` endpoint.\n\n```\n// api.js\nrouter.post('/pusher/auth', (req, res) =\u003e {\n  console.log('POST to /pusher/auth');\n});\n```\nWhenever Pusher calls the authentication endpoint, it sends a `socket_id` and `channel_name` that we will use to authenticate the incoming subscription.\n\n```\n// api.js\nrouter.post('/pusher/auth', (req, res) =\u003e {\n  console.log('POST to /pusher/auth');\n  const socketId = req.body.socket_id;\n  const channel = req.body.channel_name;\n});\n```\nNext step is to authenticate the subscription using the extracted `socketId` and `channel` values from the request. Since we will be telling Pusher to authenticate the subscription, we need to initialize Pusher by instantiating it with our Pusher account credentials first. Let's do that at the top of our `api.js` file.\n\n```\n// api.js\nconst pusher = new Pusher({\n  appId: 'xxxxxx',\n  key: 'xxxxxxxxxxxxxxxxxxxx',\n  secret: 'xxxxxxxxxxxxxxxxx',\n});\n```\nYou can find these values by navigating to a specific Pusher application from your [personal Pusher dashboard](https://dashboard.pusher.com/).\n\nWe now have an instance of Pusher available to us that we can use for authenticating subscriptions.\n\n```\n// api.js\nrouter.post('/pusher/auth', (req, res) =\u003e {\n  const socketId = req.body.socket_id;\n  const channel = req.body.channel_name;\n  const auth = pusher.authenticate(socketId, channel);\n  res.send(auth);\n});\n```\n\nThat is all the logic we need to write for our Node app. All that is left now is to run it so that it's ready to start serving requests. We start our app by running `npm start`.\n\n## Building an Angular web app\n\nAs you remember, the client app's responsibility is to send and receive new messages from Pusher in real time. Let's get going.\n\n### Angular app initialization\n\nWe are going to use [Angular CLI](https://github.com/angular/angular-cli) to quickly scaffold our application. You can follow the [installation instructions](https://github.com/angular/angular-cli#installation) if you don't have Angular CLI installed already.\n\nAfter you've installed Angular CLI, it's time to initialize our Angular application. Navigate to the `chat-app` directory and run the following command to scaffold an application.\n\n```\n$ ng new chat-app-client --skip-tests --routing\n```\nAfter the installation is finished we need to install Pusher's client library.\n\n```\n$ npm i --save pusher-js\n```\nInstalling the library isn't enough, as we also want to include it on our page. In order to do that we need to add the library to third party scripts to be loaded by Angular CLI. All CLI config is stored in `.angular-cli.json` file. Modify the `scripts` property to include the link to `pusher.min.js`.\n\n```\n// .angular-cli.json\n\"scripts\": [\"../node_modules/pusher-js/dist/web/pusher.min.js\"]\n```\nWe are now ready to write some more code. However, let's take a step back and figure out the application structure.\n\n### Angular application structure\n\nNothing is stopping us from writing the whole app inside the `AppComponent`, however, if we want to follow best practices (and we do), then we need to avoid that. `AppComponent` is best left for any startup initialization we need to do for our app.\n\nConsidering that our app is basic, I can only see one other component we can create - `MessagesComponent` that will be in charge of displaying existing messages, as well as collecting user input and sending new messages.\n\nThere will also be one service that we'll need to create - a `PusherService` that deals with Pusher.\n\nWith CLI, we can easily generate components and services. In our instance, we want to run the following commands.\n\n```\n$ ng g c messages\n$ ng g s pusher\n```\n\n\u003e Note: `g` is an alias for a `generate` command, `c` is an alias for component and `s` is an alias for a service\n\nWe now have all our components in place. Even though our service has been created, it hasn't been provided. Therefore we need to manually add it as a provider to the correct application module. However, because we only have one module, `AppModule`, we can only provide it in there.\n\n```\n// app.module.ts\nimport { PusherService } from './pusher.service';\n...\n@NgModule({\n  providers: [PusherService],\n  ...\n})\n```\n\n### Pusher initialization\n\nFirst, let's initialize Pusher. When we were initializing Pusher on the server, we needed three properties: `appId`, `key` and `secret`, however, we only need the `key` on the client.\n\nIn a real world application, you are likely to use different Pusher keys depending on the environment you are in (like development or production), therefore it is a good idea to store our Pusher key as a property on the `environment` constant.\n\nAngular CLI creates an `environment.ts` file that is used to store environment-specific variables. Let's store our Pusher key there.\n\n```\n// environment.ts\nexport const environment = {\n  pusher: {\n    key: '\u003cYOUR_PUSHER_KEY\u003e',\n  }\n};\n```\nNow we can use the environment variable in our `PusherService` when initializing an instance of Pusher. Upon initialization, we will store it in a property on the service that any other component can use.\n\n```\n// pusher.service.ts\nimport { environment } from '../environment/environment';\n...\nexport class PusherService {\n  pusher: any;\n\n  constructor() {\n    // replace xxxx's with your Pusher application key\n    this.pusher = new Pusher(environment.pusher.key);\n  }\n}\n```\nAt this point, Typescript will complain about our `new Pusher(..)` expression, because we haven't imported `Pusher`. However, we don't need to import it, as it exists in the `Window` object in the browser because we're including the `pusher-js` library in our index.html. Therefore, to silence the Typescript compiler, we need to declare Pusher at the top of the file along with other imports.\n\n```\n// pusher.service.ts\ndeclare const Pusher: any;\n...\n```\nIn addition to the application key, we also need to instantiate `Pusher` with our authentication endpoint that we created with Node.\n\n```\nconstructor() {\n  // replace xxxx's with your Pusher application key\n  this.pusher = new Pusher('xxxxxxxxxxxx', {\n    authEndpoint: 'http://localhost:3000/pusher/auth',\n  });\n}\n```\n\u003e `localhost:3000` is where our Node application is running.\n\nNow we can have access to our `pusher` instance through the `PusherService` class.\n\nPusher works by publishing events to a specific channel. Whoever is subscribed to that channel will receive the published event. Events can have data associated with them. Our client will be receiving and triggering events to a predefined channel. On top of storing the Pusher instance as a property on the `PusherService`, let's also store the channel that we will be receiving and triggering messages on.\n\n```\n// pusher.service.ts\n...\nexport class PusherService {\n  ...\n  messagesChannel: any;\n\n  constructor() {\n    ...\n    this.messagesChannel = this.pusher.subscribe('private-messages');\n  }\n}\n```\nIt is at this point, during the subscription to a channel that Pusher sends an authentication request to our specified endpoint.\n\nIn the snippet above, `private-messages` is the name of our channel. Triggering events on the front end only works with private or presence channels, therefore we have to prefix our channel's name with `private`.\n\n### MessagesComponent\n\nOur Angular project was initialized with routing because we passed a `--routing` flag with the initialization command. However, we need to tell Angular to use our `MessagesComponent` for the default route. Routing is configured in `app-routing.module.ts`.\n\n```\n// app-routing.module.ts\nimport { MessagesComponent } from './messages/messages.component';\n...\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MessagesComponent,\n  }\n];\n...\n```\nNow that `MessagesComponent` loads for our default route, let's work on it.\n\nOne of this component's responsibilities is to display existing messages. We could achieve that with an array of messages that we are looping through in the view and display them.\n\n```\n// messages.component.ts\n...\ninterface Message {\n  text: string;\n  user: string;\n}\nexport class MessagesComponent {\n  messages: Array\u003cMessage\u003e;\n  constructor() {\n    this.messages = [];\n  }\n}\n\n```\n\u003e Note: one of the most powerful Typescript features is (obviously) types. They are there to help you, so make sure you use them. Like in the snippet above, I created an interface for an individual message object. As a result, I can specify that `messages` property is an array of `Message` and if I try putting anything else in it - Typescript will not allow me to.\n\nWe can now loop over the `messages` array to display individual messages.\n\n```\n// messages.component.html\n\u003cdiv *ngFor=\"let message of messages\"\u003e\n  \u003cb\u003e{{ message.user }}\u003c/b\u003e: {{ message.text }}\n\u003c/div\u003e\n```\nBecause the `messages` property is initialized to an empty array, nothing will be displayed. Now that we have a way of storing all messages, let's write the logic to populate our storage.\n\n#### Realtime messages from Pusher\n\nNew messages are going to be coming in via Pusher. We have the channel that will be transmitting messages and it's stored in the `PusherService`. So what we want to do is start listening for events on that channel and handle whenever an event is received.\n\nBecause we want to start listening for events on the channel as soon as the `MessagesComponent` is initialized, we need to use Angular component [lifecycle hooks](https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html). Specifically, we are interested in the `OnInit` lifecycle hook, as it is triggered as soon as the component initialization is finished.\n\nBefore we use it, we need to let Angular know that we want to be using this hook by specifying that our component implements the `OnInit` interface.\n\n```\n// messages.component.ts\nimport { OnInit } from '@angular/core';\n...\nexport class MessagesComponent implements OnInit {\n  ...\n\n  ngOnInit() {}\n}\n```\n`ngOnInit` is the method that will be run when the `OnInit` lifecycle hook is triggered by Angular. That makes it a perfect place to run any sort of initialization logic, in this case, start listening for events. For that, we need to get access to the `messagesChannel` property on the `PusherService`\n\nBefore we can use `PusherService` inside our component, we need to inject it as a dependency of this component.\n\n```\n// messages.component.ts\nimport { PusherService } from '../pusher.service';\n\nexport class MessagesComponent {\n  ...\n  constructor(private pusherService: PusherService) {...}\n}\n```\nNow we can start listening for events on the `messagesChannel` property of `PusherService`.\n\n```\n// messages.component.ts\n...\nexport class MessagesComponent {\n  ...\n  ngOnInit() {\n    this.pusherService.messagesChannel.bind('client-new-message', (message) =\u003e {\n      this.messages.push(message);\n    });\n  }\n}\n```\n\nIn the snippet above, we are listening for `client-new-message` events on the messages channel. The second parameter of the `bind` is the callback function. It is a function that will be called whenever an event is received with the event data. In our case, the data associated with the event will be the message, therefore we are pushing the new message into our array of messages.\n\n#### Triggering Pusher events\n\nIn the `MessagesComponent` we need to collect the user's username and message text in order to send it as a new event to Pusher. First, let's add two input fields in our HTML.\n\n```\n// messages.component.html\n...\n\u003clabel for=\"userName\"\u003eUsername\u003c/label\u003e\n\u003cinput type=\"text\" id=\"userName\" [(ngModel)]=\"userName\"\u003e\n\n\u003clabel for=\"message\"\u003eMessage\u003c/label\u003e\n\u003cinput type=\"text\" id=\"message\" [(ngModel)]=\"messageText\"\u003e\n\n\u003cbutton (click)=\"sendMessage(userName, messageText)\"\u003eSend\u003c/button\u003e\n```\nTwo things to note here:\n\n- We are using Angular's two-way binding with `ngModel` to record user input.\n- We have added a click handler on the button that calls a method `sendMessage` on our component (this method doesn't exist yet, we will write it soon) with the `userName` and `messageText` values.\n \n\u003e Because we will be are triggering events directly from the client, we need to prefix the event name with `client`.\n\u003e\n\u003e There are also other restrictions that apply when triggering events from the client. Even though I will be pointing them out as we go in this article, I suggest you read the [Pusher documentation](https://pusher.com/docs/client_api_guide/client_events#trigger-events) on the topic to avoid confusion.\n\nBefore we can start triggering events from the client, we need to tell Pusher that we intend to do so. You can do that by navigating to your application's settings on your [Pusher dashboard](https://dashboard.pusher.com).\n\n![chat-angular-dashboard](//images.contentful.com/1es3ne0caaid/7oZhIOsDNmwc0OUKCeisom/bf8e90962701acda5f785ee00663cefd/chat-angular-dashboard.png)\n\nInside our `sendMessage` method, we will want to trigger an event named `client-new-message` with the message assembled from this method's arguments. On top of that, we need to add this message to our array of messages.\n\n```\n// message.component.ts\n...\nexport class MessagesComponent implements OnInit {\n  ...\n\n  sendMessage(user: string, text: string) {\n    const message: Message = {\n       user: user,\n       text: text,\n    }\n    this.pusherService.messagesChannel.trigger('client-new-message', message);\n    this.messages.push(message);\n  }\n}\n```\nFinally, we can send messages and display realtime messages!\n\nYou might wonder why are we adding the message that we just triggered an event with to our `messages` array. Surely, it should come back to us as in our event listener that we've defined in the `OnInit` lifecycle hook of this component?\n\nWell, not exactly. What our event listener does is listen for events on the channel **that originated somewhere else**, that is a very important aspect. An event from the same origin will not be received on the channel subscription in the same origin.\n\nHow can we see our application in all its glory? First, we need to make sure our server is running. Remember, to run it we simply need to run `npm start` from our `chat-app-server` directory. Second, we need to run our front-end application, which we can easily do with Angular CLI, by running `ng serve` from its root directory. By default, the application will be run on `localhost:4200`.\n\nNow in order to actually test that our chat application is fully operational, we can open two browser tabs/windows side by side with our Angular application running. Messages sent from one window will appear in another window. Voila, our chat app is fully functional! ?\n\n![chat-angular-demo](//images.contentful.com/1es3ne0caaid/5lwtnQ6CFqgc0sSi0U4W8E/bf8e90962701acda5f785ee00663cefd/chat-angular-demo.gif)\n\nCongratulations, you have built a chat app with Node, Angular and Pusher!","metaTitle":"Build a chat app with Angular","metaDescription":"Build a basic chat web application using Node.js, Angular and enable realtime features."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"402fO9TSxO6ggQYQeIG8wG","type":"Entry","createdAt":"2018-02-27T10:55:23.454Z","updatedAt":"2018-03-02T10:19:15.866Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a typing indicator with JavaScript","url":"typing-indicator-javascript","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5HjouOQyOIwCcyuswYcIuc","type":"Entry","createdAt":"2018-02-16T18:20:46.412Z","updatedAt":"2018-04-23T13:19:32.814Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Perfect Makanju","url":"perfect-makanju","email":"damiperfect@gmail.com","twitter":"https://twitter.com/perfectmak","github":"https://github.com/perfectmak","guestWriter":true}}],"projectRepo":"https://github.com/perfectmak/who-is-typing-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}}],"reviewDate":"2017-02-21","description":"Build a typing indicator in a chat application with JavaScript and display the name or username of who is currently typing. ss","prerequisite":"A basic understanding of JavaScript is needed to follow this tutorial.","content":"A popular feature of chat applications is a typing indicator, which displays the name or username of who is currently typing. In this tutorial, we will walk through how to build a typing indicator in a chat application using Pusher with JavaScript.\n\nHere's how the final application will look:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2017/02/whos-typing-feature-javascript-demo.gif\" alt=\"\" width=\"800\" height=\"450\" class=\"alignnone size-full wp-image-2902\" /\u003e\n\nWe will focus on the implementation of the typing indicator feature of the application.\n\nNow, let's dive into how we built the typing indicator in the chat application.\n\n## Setup a Pusher account\n\nWe will be using [Pusher](https://pusher.com) for the realtime features of this chat application. To create a Pusher account go to [https://pusher.com/signup](https://pusher.com/signup). When you first log in, a pop-up dialogue appears as shown below:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2017/02/whos-typing-feature-javascript-pusher-create-app.png\" alt=\"\" width=\"2560\" height=\"1600\" class=\"alignnone size-full wp-image-2904\" /\u003e\n\nIf you already have an account, log in to the dashboard and click on the `Create new app` button in the `Your apps` to the left. Select VanillaJS for the front-end tech and Node.js for the backend tech. (Don't worry, the tech stack you select doesn't matter as you can always change it later. Its purpose is to generate starter code that you can use to start communicating with Pusher)\n\nAfter creating the application, go to the `App Keys` tab and copy your **App ID**, **Key**, and **Secret** credentials. We will use them later in the tutorial.\n\n## Setup the Node.js server\n\nNow that you have your Pusher Keys, let's get to building the realtime chat application.\n\nFirst, generate a Node.js application using this command:\n\n``` \nnpm init -y\n```\nNext, install Express, Pusher and some other dependencies the server will be needing:\n\n``` \nnpm install --save body-parser ejs express pusher\n```\n\nWhen done, the dependency section of your package.json file should look like this:\n\n```\n\"dependencies\": {\n    \"body-parser\": \"^1.16.0\",\n    \"ejs\": \"^2.5.5\",\n    \"express\": \"^4.14.1\",\n    \"pusher\": \"^1.5.1\"\n  }\n```\n\nTo serve our application we need to do three things:\n\n1. Set up Express and Pusher.\n2. Create routes to serve our application pages and listen for web requests.\n3. Start the Express server.\n \n### 1. Setup Express and Pusher\n\nInside the `server.js` file, we initialize Express and Pusher like this:\n\n```\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst ejs = require('ejs');\nconst path = require('path');\nconst Pusher = require('pusher');\n\nconst app = express();\n\n//Initialize Pusher\nconst pusherConfig = {\n  appId: 'YOUR_PUSHER_APP_ID',\n  key: 'YOUR_PUSHER_KEY',\n  secret: 'YOUR_PUSHER_SECRET',\n  encrypted: true\n};\nconst pusher = new Pusher(pusherConfig);\n```\n\nRemember to replace the parameters in the `pusherConfig` object with the Pusher credentials you copied earlier from the Pusher dashboard.\n\n### 2. Create routes to serve our application\n\nSetup Express to serve our static files from the `public` folder and to load our HTML views from the `views` :\n\n```\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs');\n\napp.get('/', function(req, res) {\n  res.render('index', {\n    //pass pusher key to index.ejs for pusher client\n    pusherKey: pusherConfig.key\n  });\n});\n```\n\nNext, we create a route that uses Pusher to broadcast a `user_typing` event.\n\n```\nconst chatChannel = 'anonymous_chat';\nconst userIsTypingEvent = 'user_typing';\n\napp.post('/userTyping', function(req, res) {\n  const username = req.body.username;\n  pusher.trigger(chatChannel, userIsTypingEvent, {username: username});\n  res.status(200).send();\n});\n```\n\nThis route broadcasts the request's username to everyone subscribed to the channel.\n\n### 3. Start the Express Server\n\nThen start the Express server to listen on the app port `3000`.\n\n```\napp.listen(3000, function () {\n  console.log('Node server running on port 3000');\n});\n```\n\nNow we have the application server set up. Next, we develop the chat application's user interface and functionalities.\n\n## Set up the Chat Application Web Page\n\nThe HTML for the chat application is in the `views/index.ejs` file. First, we load jQuery, bootstrap and our custom style and JavaScript:\n\n```\n\u003chead\u003e\n  \u003cmeta charset=\"utf-8\"\u003e\n  \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n  \u003ctitle\u003eWho is typing functionality with Pusher\u003c/title\u003e\n\n  \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n  \u003clink href='https://fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,400,600,700,900,200italic,300italic,400italic,600italic,700italic,900italic' rel='stylesheet' type='text/css'\u003e\n  \u003clink rel=\"stylesheet\" href=\"/css/style.css\"\u003e\n\n  \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.js\"\u003e\u003c/script\u003e\n  \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n  \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/cuid/1.3.8/browser-cuid.min.js\"\u003e\u003c/script\u003e\n  \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n  \u003cscript type=\"text/javascript\" src=\"/js/app.js\"\u003e\u003c/script\u003e\n\n\u003c/head\u003e\n```\n\nThere are three sections in the application's user interface:\n\n1. **Top Menu**: This contains the application title and a section to show who is currently typing.\n2. **Messages**: This contains a list of all messages sent and received.\n3. **Input**: This contains the text field to input messages and also contains the send button.\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2017/02/whos-typing-feature-javascript-ui-outlined.png\" alt=\"\" width=\"2560\" height=\"1582\" class=\"alignnone size-full wp-image-2905\" /\u003e \n\nAnd here is the HTML body for it:\n\n```\n\n\u003cdiv class=\"chat_window\"\u003e\n\n  \u003cdiv class=\"top_menu\"\u003e\n    \u003cdiv class=\"is_typing\"\u003e\n      \u003cem id=\"user-is-typing\"\u003e\u003c/em\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"title\"\u003eAnonymous Chat App\u003c/div\u003e\n  \u003c/div\u003e\n\n  \u003cul class=\"messages\"\u003e\n  \u003c/ul\u003e\n\n  \u003cdiv class=\"input bottom_wrapper clearfix\"\u003e\n    \u003cdiv\u003e\n      Your username: \u003cem\u003e\u003cspan id=\"username\"\u003eloading...\u003c/span\u003e\u003c/em\u003e\n    \u003c/div\u003e\n    \u003cbr/\u003e\n    \u003cdiv class=\"message_input_wrapper\"\u003e\n      \u003cinput id=\"message-text-field\" class=\"message_input\" placeholder=\"Type your message here...\" /\u003e\n    \u003c/div\u003e\n    \u003cbutton id=\"send-button\" class=\"send_message\"\u003e\n      \u003cdiv class=\"text\"\u003eSend\u003c/div\u003e\n    \u003c/button\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n```\nNow that the user interface is set up, let us add the typing indicator to the application.\n\n## How the typing indicator will work\n\nBefore we proceed to the implementation, let me explain how the typing indicator functionality will work.\n\nWhen the user starts typing in the message text field, the page sends a request to the server. The server then broadcasts this to everyone as a Pusher event. The page would also subscribe to the user's typing event from Pusher and show a 'user is typing' message when a broadcast is received.\n\nTherefore we can split this process into two steps:\n\n1. Publishing `user_typing` Event.\n2. Subscribing to `user_typing` Event.\n \nNow, open the `public/js/app.js` file for their implementations.\n\n### 1. Publishing `user_typing` Event\n\nFirst, we need to initialize Pusher and some other variables.\n\n```\nvar pusher = new Pusher(PUSHER_KEY, {encrypted: true,});\nvar chatChannelName = 'anonymous_chat';\nvar userIsTypingEvent = 'user_typing';\nvar currentUsername = getCurrentUsername();\n```\n\nNext, we need to listen to the current user's input events and publish their username.\n\n```\nvar messageTextField = $('#message-text-field');\nmessageTextField.on('keyup', function(event) {\n    $.post('/userTyping', {username: username});\n});\n```\n\nThis would post a 'user is typing' event for each input in the message text field. While this is good, it is not optimal because every input will make a call to the server.\n\nA better way to do this is to throttle the rate at which we post events to the server. Throttling is a technique used to ensure a particular code is executed only once within a specified time interval.\n\nSo let's update our code to ensure we only post typing events to the server once every 0.2 seconds.\n\n```\nvar messageTextField = $('#message-text-field');\nvar canPublish = true;\nvar throttleTime = 200; //0.2 seconds\n\nmessageTextField.on('keyup', function(event) {\n  if(canPublish) {\n    $.post('/userTyping', {username: username});\n\n    canPublish = false;\n    setTimeout(function() {\n      canPublish = true;\n    }, throttleTime);\n  }\n});\n```\n\nTo explain the code, the `canPublish` boolean is set to `false` immediately after we post a 'user is typing' request to the server, preventing us from posting more requests. We then set a timeout function that sets the `canPublish` boolean to `true` after 0.2 seconds, thus allowing us to post another request to the server. This way, we throttle the requests made to the server.\n\nNext, let's see how we will subscribe to the `user_typing` event.\n\n### 2. Subscribing to `user_typing` Event\n\nWe need to subscribe to our chat channel on Pusher and bind to the `user_typing` event like so:\n\n```\nvar channel = pusher.subscribe(chatChannelName);\nchannel.bind(userIsTypingEvent, function(data) {\n  if(data.username !== currentUsername) {\n    $('#user-is-typing').html(data.username + 'is typing...');\n  }\n});\n```\n\nSo, if the username of the event is not the current users' username, we show a 'user is typing' text on the web page.\n\nThe application now updates the web page with the username that is typing. But the 'user is typing' message needs to be cleared when the user stops typing or else the message stays forever (and we definitely don't want that). An easy solution is to set a timer that clears the 'user is typing' message after some seconds of not receiving an event. From experience, a clear timer of 0.9 seconds has given the best results.\n\nWe can set the clear timer by doing the following:\n\n```\nvar clearInterval = 900; //0.9 seconds\nvar clearTimerId;\nchannel.bind(userIsTypingEvent, function(data) {\n  if(data.username !== currentUsername) {\n    $('#user-is-typing').html(data.username + 'is typing...');\n\n    //restart timeout timer\n    clearTimeout(clearTimerId);\n    clearTimerId = setTimeout(function () {\n      //clear user is typing message\n      $('#user-is-typing').html('');\n    }, clearInterval);\n  }\n});\n```\n\nTo explain the code, the `userIsTypingEvent` will clear the 'user is typing' message after 0.9 seconds of not receiving a broadcast.\n\nPutting all the codes together we have:\n\n```\nvar channel = pusher.subscribe(chatChannelName);\nvar clearInterval = 900; //0.9 seconds\nvar clearTimerId;\nchannel.bind(userIsTypingEvent, function(data) {\n  if(data.username !== currentUsername) {\n    $('#user-is-typing').html(data.username + 'is typing...');\n\n    //restart timeout timer\n    clearTimeout(clearTimerId);\n    clearTimerId = setTimeout(function () {\n      //clear user is typing message\n      $('#user-is-typing').html('');\n    }, clearInterval);\n  }\n});\n```\n\nAnd there you have it. The chat application now has the functionality to display who's currently typing.\n\n## Testing\n\nFirst, ensure you have updated your Pusher credentials in the `server.js` file. To run the application, execute the `server.js` file using the following command:\n\n```\nnode server.js\n```\n\nThe application should be running now. Visit the chat web page at [http://localhost:3000](http://localhost:3000). To try out the typing indicator feature, open two of the chat web pages beside each other. When you start typing in one, you should notice the other window shows that you are currently typing.\n\n## Conclusion\n\nIn this tutorial, we saw how to build a typing indicator using Pusher with JavaScript. As you can see, it is trivial and easy to build such realtime features using Pusher.","metaTitle":"Build a typing indicator with JavaScript","metaDescription":"Build a typing indicator in a chat application with JavaScript and display the name or username of who is currently typing."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"16nXukOziii2WSK4ku0EKE","type":"Entry","createdAt":"2018-02-16T11:33:08.995Z","updatedAt":"2019-01-02T15:25:39.608Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a Swift chat app","url":"chat-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4oX8JhZUI0oIgmUKyQAGUe","type":"Entry","createdAt":"2018-02-15T18:07:40.087Z","updatedAt":"2018-02-15T18:07:40.087Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Zan Markan","url":"zan-markan","email":"zan@pusher.com","twitter":"https://twitter.com/zmarkan","github":"https://github.com/zmarkan","guestWriter":false}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2017-02-16","description":"Learn how to build a group chat app using Swift and Node.js","prerequisite":"A basic understanding of Swift and Node.js are needed to follow this tutorial.","content":"We thought we'd create a walkthrough of how to easily build an iOS chat app with Pusher. Together we will build a group chat application, leading you through how to use Pusher to send and show realtime messages in your UI.\n\n## The app we're building\n\nThe app we're building is a simple chat application that uses Pusher to send and receive messages.\nIt has two screens - the \"Login\" screen where we enter our Twitter username, and the \"Chat\" screen where we do the messaging.\n\n![chat-swift-demo](//images.contentful.com/1es3ne0caaid/3HImJu32XKiGcMgO0QaUq8/bf8e90962701acda5f785ee00663cefd/chat-swift-demo.png)\n\n## Setting up our project with XCode\n\nIf you haven't yet, create a new application on XCode. By default the wizard offers you to create a Single View Application for iOS, and that's perfectly fine. Once you've done that, you'll need to prepare the dependencies for the app. The dependencies you need are Pusher Swift for interaction with Pusher, and AlamofireImage for performing network requests, and loading images over the network.\n\nThe easiest way install dependencies is by using CocoaPods. If you don't have CocoaPods installed you can install them via RubyGems.\n\n```\ngem install cocoapods\n```\n\nThen configure CocoaPods in our application. First initialise the project by running this command in the top-level directory of your XCode project:\n\n```\npod init\n```\n\nThis will create a file called `Podfile`. Open it, and make sure to add the following lines specifying your app's dependencies:\n\n```\n# Uncomment the next line to define a global platform for your project\n# platform :ios, '9.0'\n\ntarget 'Pusher Chat Sample iOS' do\n  # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\n  use_frameworks!\n\n  # Pods for Pusher Chat Sample iOS\n  pod 'PusherSwift'\n  pod 'AlamofireImage' //need that for networking\n\nend\n```\n\nAnd then run `pod install` to download and install both dependencies.\n\n```\npod install\n```\n\nCocoaPods will ask you to close XCode if it's currently running, and open the newly generated `.xcworkspace` file. Do this now, and XCode will open with your project configured.\n\n## Creating the Login View\n\nFor our login feature we'll just create a simple page with a field to enter a twitter handle and a login button.\n\nFirst rename our scene to \"Login Scene\", and then drag the two elements onto it.\nAlso rename the `ViewController` to `LoginViewController`.\n\n`Control-drag` the each element into the `LoginViewController` class to create the IBOutlet (for the TextView) and the IBAction for the button.\n\nName the IBOutlet `twitterHandle` and IBAction `loginButtonClicked`.\n\nIn your `LoginViewController.swift` add the following logic to the `loginButton` function:\n\n```\n\n@IBAction func loginButtonClicked(_ sender: Any) {\n       if(twitterHandle.hasText){\n           let messagesViewController = self.storyboard?.instantiateViewController(withIdentifier: \"chatViewController\") as! ChatViewController\n           messagesViewController.twitterHandle = twitterHandle.text!\n           self.present(messagesViewController, animated:true)\n       }\n       else{\n           print(\"No text in textfield\")\n       }\n}\n\n```\n\nThis will grab the current text in the `twitterHandle` field and set it to the `ChatViewController`, and transition to the Chat screen.\n\n## Chat View\n\nBut the `ChatViewController` doesn't exist yet! Create a new ViewController in the Storyboard and the corresponding `ChatViewController.swift` class.\nAdd to it a TableView, a Text Field, and a Button as in the example.\n\n### Listening to messages\n\nWe will listen to new messages in realtime by subscribing to the `chatroom` channel and listening to events tagged `new_message`.\nPusher channels can support unlimited number of message types, but in our case we are only interested the single one.\n\nIn `viewDidLoad` create your Pusher instance - and copy your setup details from the Pusher Dashboard. It shoud look like this:\n\n```\npusher = Pusher(\n          key: \"abcdefghijklmnopqrstuvwxyz\"\n)\n```\n\nThen subscribe to the `chatroom` channel, and bind to the `new_message` events, printing their messages to the console. Lastly, connect to Pusher.\n\n```\nlet channel = pusher!.subscribe(\"chatroom\")\nlet _ = channel.bind(eventName: \"new_message\", callback: { (data: Any?) -\u003e Void in\n\n    if let data = data as? [String: AnyObject] {\n\n        let text = data[\"text\"] as! String\n        let author = data[\"name\"] as! String\n        print(author + \": \" + text)\n    }\n})\npusher!.connect()\n```\n\nNow that we've subscribed and listening to the events, we can send some events to test it out. The easiest way to do this is by using Pusher's Debug Console - in your app's Dashboard. Have the application running - Simulator is fine.\nClick Show Event Creator button, and change the name of Channel to `chatroom`, and change the Event to `new_message` - what we're listening to in the app.\nNow change the Data field to something like:\n\n```\n{\n  \"name\": \"John\",\n  \"text\": \"Hello, World!\"\n}\n```\n\n![chat-swift-dashboard](//images.contentful.com/1es3ne0caaid/rxKviaNea440Omi8ekaQ8/bf8e90962701acda5f785ee00663cefd/chat-swift-dashboard.png)\n\nAnd click Send event. In the XCode's console, you should see the message printed out:\n\n```\nJohn: Hello, World!\n```\n\n### Presenting messages in a table\n\nNow, let's show the messages as they arrive in the UITableView.\nWe will create a Prototype cell in the UITableView in the Storyboard, and specify a class for it.\n\n![chat swift app message cell](//images.contentful.com/1es3ne0caaid/Vl3XztBXUWMecyIkQIKqk/bf8e90962701acda5f785ee00663cefd/chat_swift_app_message_cell.png)\n\nCreate a `MessageCell.swift` class and make it extend `UITableViewCell`. This will represent a single chat message as a row in our table. Drag the outlets for `authorAvatar`, `authorName`, and `messageText` into the class. This\n\n```\nimport Foundation\nimport UIKit\n\nclass MessageCell: UITableViewCell {\n    @IBOutlet var authorAvatar: UIImageView!\n    @IBOutlet var authorName: UILabel!\n    @IBOutlet var messageText: UILabel!\n}\n```\n\nNow create a `Message.swift` which will hold a struct representing a single Message object. It just needs to hold two strings, for the author and message.\n\n```\nimport Foundation\n\nstruct Message {\n\n    let author: String\n    let message: String\n\n    init(author: String, message: String) {\n        self.author = author\n        self.message = message\n    }\n}\n```\n\nBack in the `ChatViewController.swift`, make the class implement the protocols `UITableViewDataSource` and `UITableViewDelegate` alongside `UIViewController`:\n\n```\nclass ChatViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n```\n\nTo make it compile, you'll need to implement the following methods - first one to let the tableView know how many items it holds:\n\n```\nfunc tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n       return array.count\n   }\n```\n\nAnd the second one that will create a `MessageCell` object:\n\n```\nfunc tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n\n    let cell = tableView.dequeueReusableCell(withIdentifier: \"MessageCell\", for: indexPath) as! MessageCell\n    return cell\n}\n```\n\nThen we need to add some logic that will actually present the data in a cell. Add these lines to the second method:\n\n```\nlet message = array.object(at: indexPath.row) as! Message\n\ncell.authorName.text = message.author\ncell.messageText.text = message.message\n\nlet imageUrl = URL(string: \"https://twitter.com/\" + message.author + \"/profile_image\")\ncell.authorAvatar.af_setImage(withURL: imageUrl!)\n```\n\nFirst we set up the text in the author and message labels, and lastly we use the AlamofireImage library to load the image from Twitter avatar into the `authorImage` field.\n\n## Sending messages from the app\n\n### Building the serverside component in NodeJS\n\nSo far, we've created a client that receives items. But what about sending them? We'll do that next.\nFirst, we'll need a server-side component that receives messages and sends them back to Pusher.\n\n![chat-swift-diagram](//images.contentful.com/1es3ne0caaid/4zZckRHFrOQACQ2AcmAygg/bf8e90962701acda5f785ee00663cefd/chat-swift-diagram.png)\n\nWe prepared a simple NodeJS application that will serve that purpose. You can find it \u003ca href=\"https://github.com/pusher/ios-chat-example\"\u003ehere\u003c/a\u003e.\n\nFirst clone the repository and CD into its directory. Then run `npm install` to setup dependencies.\n\nThen open `app.js` and change the Pusher initialisation fields there to include your App ID, key and secret. You can copy these from your Pusher Dashboard - the Getting Started tab will have everything you need.\n\nOnce you've done that you can launch the app by running `node app.js`.\n\nIf your iOS app is running on your simulator, and your Node app is running the server, you should be able send a test message via the `cURL` command:\n\n```\n$ curl -X \"POST\" \"http://localhost:3000/messages\" -H \"Content-Type: application/json; charset=utf-8\" -d $'{\"name\": \"Pusher\",\"text\": \"Hello, Node!\"}'\n```\n\nIf everything works as it should, you should see the new message appear in your app.\n\n## Building the app component\n\nThe last thing to do is to create the function that triggers and sends the message to us.\n\nFirst make sure your Text Field and Button have their corresponding outlets in `ChatViewController.swift`:\n\n```\n@IBOutlet var message: UITextField!\n@IBAction func send(_ sender: Any) {\n\n       if(message.hasText){\n           postMessage(name: twitterHandle, message: message.text!)\n       }\n}\n```\n\nFinally, we can implement the `postMessage` function that calls our NodeJS endpoint to trigger a new message over Pusher:\n\n```\nfunc postMessage(name: String, message: String){\n\n        let params: Parameters = [\n            \"name\": name,\n            \"text\": message\n        ]\n\n        Alamofire.request(ChatViewController.MESSAGES_ENDPOINT, method: .post, parameters: params).validate().responseJSON { response in\n\n            switch response.result {\n\n            case .success:\n                print(\"Validation successful\")\n            case .failure(let error):\n                print(error)\n            }\n        }\n}\n```\n\nTry it out!\n\nIf you are running the Node server locally XCode might not allow you to make the request. You can get around this by adding `App Transport Security Settings` to your `Info.plist` file and set `Allow Artibrary Loads` to `YES`.\n\n![chat-swift-plist-settings](//images.contentful.com/1es3ne0caaid/7oIT12nsPeeiu0yMGYGiY/bf8e90962701acda5f785ee00663cefd/chat-swift-plist-settings.png)\n\n## Get Pushing\n\nHopefully you have found this a straightforward example of how to build an iOS chat app with Pusher. There are many ways you can extend this tutorial for an improved application:\n\n* Use Pusher client events to send messages from one client to another. You could use our webhooks to notify your server when messages are sent, allowing you to persist them in your database.\n* Use Pusher presence channels to create live user lists and show who’s online in realtime.\n* Use our [REST API](http://pusher.com/docs/server_api_guide/interact_rest_api) to determine whether a user is connected to Pusher. If they are, go ahead and send them a message as normal. If not, send them a native push notification leading them back to your app.\n\nEven with such a basic app, hopefully I have shown you how easy and few lines of code it is to drop in Pusher to any iPhone app. Feel more than free to [let us know](http://twitter.com/pusher) what you end up building with Pusher and iPhone!","metaTitle":"Build a Swift chat app","metaDescription":"In this tutorial, discover how you can build an iOS chat app by using Swift, Node.js and Pusher to send and show realtime messages in the UI."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14MIsjihhCeEO6iomkOW6U","type":"Entry","createdAt":"2018-02-14T10:57:43.954Z","updatedAt":"2018-02-28T15:01:14.347Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime shopping cart with Java and React","url":"shopping-cart-java-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/shopping-cart-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Od9rZziIoMG4yaQ4EAeok","type":"Entry","createdAt":"2018-02-13T11:31:10.435Z","updatedAt":"2018-02-26T12:31:10.730Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":16,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live UX","url":"live-ux","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-01-24","description":"Discover how to sync your shopping cart between browsers and devices with Java and React.","prerequisite":"A basic understanding of React and Java are needed to follow this tutorial.","content":"Programming a shopping cart may not be as easy as you think. One of the greatest challenges is to synchronize the content of a user's shopping cart between devices or even browser tabs.\n\nFor example, a friend sends you, via a messaging app on your phone, the link to a great deal on the latest video game that you've been dying to get. You add the game to your shopping cart, but for some reason, you prefer to go through the checkout process on your desktop computer. You log into your account and that's when you realize that there's nothing in your shopping cart. You add the video game to the shopping cart again on your phone, but nothing appears on the other side. Have you experienced this before? Are you a developer that doesn't want your users to go through the same annoyance? If so, keep reading.\n\nIn this tutorial, we're going to build a simple realtime shopping cart, using Pusher to solve the synchronization issue we mentioned earlier. When an action like a quantity update or an item is removed from the Cart, a Pusher event will be sent so all the listening devices, windows or tabs can be synchronized accordingly.\n\nThe stack will be the following:\n\n- [Java 8](http://www.oracle.com/technetwork/java/index.html)\n- [Maven](https://maven.apache.org) as the build manager\n- [Spring Boot](http://projects.spring.io/spring-boot/) with [Spring MVC](https://projects.spring.io/spring-framework/) as the server-side frameworks\n- [Thymeleaf](http://www.thymeleaf.org/) as the server-side template engine\n- [React](https://facebook.github.io/react/) for the client-side interaction\n- [Bootstrap ](http://getbootstrap.com/) as the CSS framework.\n \nTo keep things simple, we won't use a database. We'll keep a list of four products in memory, the app will only support one user, and the cart items will be stored in a web session.\n\nThe server will provide a REST API so the front-end can work just as a presentation layer with AJAX calls. For complex applications, the recommended way to do this is by using something like [Redux](http://redux.js.org/). In fact, in the Redux documentation you can find a [shopping cart example](http://redux.js.org/docs/introduction/Examples.html#shopping-cart). However, once again, to keep things simple, we are going to issue all of our AJAX requests from the parent component using [fetch](https://github.com/github/fetch).\n\nIn summary, our shopping cart will have the following functionality:\n\n- Choose the quantity to add a product to the shopping cart (if the product is already in the shopping cart, the quantity will be updated)\n- Remove a product from the shopping cart\n- Calculate the total when a product is added/updated/removed\n- Empty the shopping cart\n \nThis is how the final application will look:\n\n![realtime-shopping-cart-java-react-demo](//images.contentful.com/1es3ne0caaid/1Nwjqw59SAGo0AqIkCUMaI/28adc679071ab231a02644c0b67b05a9/realtime-shopping-cart-java-react-demo.gif)\n\nThis tutorial assumes prior knowledge of Java 8, Spring Boot/MVC and React. We will integrate Pusher into a Spring MVC REST API, create React components and hook them up with Pusher.\n\nYou can find the entire code of the application on [Github](https://github.com/).\n\n## Setting up Pusher\n\nCreate a free account at [https://pusher.com/signup](https://pusher.com/signup).\n\nWhen you first log in, you'll be asked to enter some configuration options:\n\n![realtime-shopping-cart-java-react-create-pusher-app](//images.contentful.com/1es3ne0caaid/6bHQhfzN5e4Y64QgKO6WWI/5b5275cd61415c55ddbc606a9ac5d914/realtime-shopping-cart-java-react-create-pusher-app.png)\n\nEnter a name, choose *React* as your front-end tech, and *Java* as your back-end tech. This will give you some sample code to get you started.\n\n![realtime-shopping-cart-java-react-pusher-libraries](//images.contentful.com/1es3ne0caaid/4CsFo1vNpCAEE0IWSGiSMm/8f7b63d513f2f90d47eaba0bcb11f107/realtime-shopping-cart-java-react-pusher-libraries.jpg)\n\nThis won't lock you into a specific set of technologies, you can always change them. With Pusher, you can use any combination of libraries.\n\nThen go to the *App Keys* tab to copy your App ID, Key, and Secret credentials - we'll need them later.\n\n## Setting up the application\n\nOne of the easiest ways to create a Spring Boot app is to use the project generator at [https://start.spring.io/](https://start.spring.io/).\n\nGo to that page and choose to generate a Maven project with the following dependencies:\n\n- Web\n- Thymeleaf\n \nEnter a *Group ID*, an *Artifact ID* and generate the project:\n\n![realtime-shopping-cart-java-react-Sprint-Initializr](//images.contentful.com/1es3ne0caaid/2d18LCiRPqOmA2WSECsiuE/ced10faf9fc8f27cebe20bc5791a4f25/realtime-shopping-cart-java-react-Sprint-Initializr.jpg)\n\nUnzip the content of the downloaded file. At this point, you can import the project to an IDE if you want.\n\nNow open the `pom.xml` file and add the Pusher library to the `dependencies` section:\n\n```\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.pusher\u003c/groupId\u003e\n  \u003cartifactId\u003epusher-http-java\u003c/artifactId\u003e\n  \u003cversion\u003e1.0.0\u003c/version\u003e\n\u003c/dependency\u003e\n```\n## The Java Back-end\n\nLet's start with the [com/pusher/web/IndexController](https://github.com/) class. It defines the root route (`/`) that shows an `index` template, passing the Pusher App Key and the channel name where the events will be published:\n\n```\n@Controller\n@SessionAttributes(GeneralConstants.ID_SESSION_SHOPPING_CART)\npublic class IndexController {\n\n  @RequestMapping(method=RequestMethod.GET, value=\"/\")\n  public ModelAndView index(Model model) {\n    ModelAndView modelAndView = new ModelAndView();\n\n    modelAndView.setViewName(\"index\");\n    modelAndView.addObject(\"pusher_app_key\", PusherConstants.PUSHER_APP_KEY); \n    modelAndView.addObject(\"pusher_channel\", PusherConstants.CHANNEL_NAME); \n\n    if(!model.containsAttribute(GeneralConstants.ID_SESSION_SHOPPING_CART)) {\n      model.addAttribute(GeneralConstants.ID_SESSION_SHOPPING_CART, new ArrayList\u003cProduct\u003e());\n    }\n\n    return modelAndView;\n  }\n}\n```\nThe `@SessionAttributes` annotation defines the identifier of an attribute that will be added to the session automatically when an object with the same identifier is added to the model object. This way, if a list of products (representing the shopping cart) is not in the session already, an empty one is created.\n\nAs this application supports only one user, the name of the channel is fixed. However, in a real application, the shopping cart of each user will use a different Pusher channel, so the name would have to be unique. But there's no problem, Pusher offers [unlimited channels on all of its plans](https://pusher.com/pricing).\n\nThen, we have the [com/pusher/web/CartController](https://github.com/) class, where the REST API for our shopping cart is defined. First, we define the `configure()` method that is called after dependency injection is done to initialize the Pusher object and the list of products:\n\n```\n@RestController\n@SessionAttributes(GeneralConstants.ID_SESSION_SHOPPING_CART)\npublic class CartController {\n\n  private List\u003cProduct\u003e products = new ArrayList\u003cProduct\u003e();\n\n  private Pusher pusher;\n\n  @PostConstruct\n  public void configure() {\n    pusher = new Pusher(\n      PusherConstants.PUSHER_APP_ID, \n      PusherConstants.PUSHER_APP_KEY, \n      PusherConstants.PUSHER_APP_SECRET\n    );\n\n    Product product = new Product();\n    product.setId(1L);\n    product.setName(\"Office Chair\");\n    product.setPrice(new BigDecimal(\"55.99\"));\n    products.add(product);\n\n    product = new Product();\n    product.setId(2L);\n    product.setName(\"Sunglasses\");\n    product.setPrice(new BigDecimal(\"99.99\"));\n    products.add(product);\n\n    product = new Product();\n    product.setId(3L);\n    product.setName(\"Wireless Headphones\");\n    product.setPrice(new BigDecimal(\"349.01\"));\n    products.add(product);\n\n    product = new Product();\n    product.setId(4L);\n    product.setName(\"External Hard Drive\");\n    product.setPrice(new BigDecimal(\"89.99\"));\n    products.add(product);\n  }\n\n  ...\n}\n```\nNext, we define the endpoints to get, in JSON format, the list of products as well as the products in the shopping cart:\n\n```\npublic class CartController {\n\n  ...\n\n  @RequestMapping(value = \"/products\", \n    method = RequestMethod.GET,  \n    produces = \"application/json\")\n  public List\u003cProduct\u003e getProducts() {\n    return products;\n  }\n\n  @RequestMapping(value = \"/cart/items\", \n    method = RequestMethod.GET,  \n    produces = \"application/json\")\n  public List\u003cProduct\u003e getCartItems(@SessionAttribute(GeneralConstants.ID_SESSION_SHOPPING_CART) List\u003cProduct\u003e shoppingCart) {\n    return shoppingCart;\n  }\n\n  ...\n}\n```\nA method to search for a product by its identifier in a list of products would be handy, so let's define one using the [Java 8 Stream API](https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html) to do it in a functional style:\n\n```\nprivate Optional\u003cProduct\u003e getProductById(Stream\u003cProduct\u003e stream, Long id) {\n  return stream\n    .filter(product -\u003e product.getId().equals(id))\n    .findFirst();\n}\n```\nThis way, to add a product, we look for the product passed in the catalog of products (to see if it's a valid one) and then, if the product is in the shopping cart already, we update its quantity, otherwise, we added directly to the shopping cart, triggering an `itemUpdated` or `itemAdded` accordingly:\n\n```\npublic class CartController {\n\n  ...\n\n  @RequestMapping(value = \"/cart/item\", \n            method = RequestMethod.POST, \n            consumes = \"application/json\")\n  public String addItem(@RequestBody ItemRequest request, @SessionAttribute(GeneralConstants.ID_SESSION_SHOPPING_CART) List\u003cProduct\u003e shoppingCart) {\n    Product newProduct = new Product();\n    Optional\u003cProduct\u003e optional = getProductById(products.stream(), request.getId());\n\n    if (optional.isPresent()) {\n      Product product = optional.get();\n\n      newProduct.setId(product.getId());\n      newProduct.setName(product.getName());\n      newProduct.setPrice(product.getPrice());\n      newProduct.setQuantity(request.getQuantity());\n\n      Optional\u003cProduct\u003e productInCart = getProductById(shoppingCart.stream(), product.getId());\n      String event;\n\n      if(productInCart.isPresent()) {\n        productInCart.get().setQuantity(request.getQuantity());\n        event = \"itemUpdated\";\n      } else {\n        shoppingCart.add(newProduct);\n        event = \"itemAdded\";\n      }\n\n      pusher.trigger(PusherConstants.CHANNEL_NAME, event, newProduct);\n    }\n\n    return \"OK\";\n  }\n\n  ...\n}\n```\nDeleting a product from the shopping cart is similar. If the product is valid (if it exists in the catalog), we look for it on the shopping cart to remove it and trigger an `itemRemoved` event on Pusher:\n\n```\npublic class CartController {\n\n  ...\n\n  @RequestMapping(value = \"/cart/item\", \n            method = RequestMethod.DELETE, \n            consumes = \"application/json\")\n  public String deleteItem(@RequestBody ItemRequest request, @SessionAttribute(GeneralConstants.ID_SESSION_SHOPPING_CART) List\u003cProduct\u003e shoppingCart) {\n    Optional\u003cProduct\u003e optional = getProductById(products.stream(), request.getId());\n\n    if (optional.isPresent()) {\n      Product product = optional.get();\n\n      Optional\u003cProduct\u003e productInCart = getProductById(shoppingCart.stream(), product.getId());\n\n      if(productInCart.isPresent()) {\n        shoppingCart.remove(productInCart.get());\n        pusher.trigger(PusherConstants.CHANNEL_NAME, \"itemRemoved\", product);\n      }\n    }\n\n    return \"OK\";\n  }\n\n  ...\n}\n```\nFinally, to empty the cart, we just replace the cart in the session with an empty list and trigger the `cartEmptied` Pusher event:\n\n```\npublic class CartController {\n\n  ...\n\n  @RequestMapping(value = \"/cart\", \n            method = RequestMethod.DELETE)\n  public String emptyCart(Model model) {\n    model.addAttribute(GeneralConstants.ID_SESSION_SHOPPING_CART, new ArrayList\u003cProduct\u003e());\n    pusher.trigger(PusherConstants.CHANNEL_NAME, \"cartEmptied\", \"\");\n\n    return \"OK\";\n  }\n\n  ...\n}\n```\n## React + Pusher\n\nReact thinks of the UI as a set of components, where you simply update a component's state, and then React renders a new UI based on this new state updating the DOM for you in the most efficient way.\n\nThe app's UI will be organized into five components, a header (`Header`), the cart (`Cart`), a component for each cart item (`CartItem`), the product list (`ProductList`), and a component for each product (`Product`):\n\n![realtime-shopping-cart-java-react-components](//images.contentful.com/1es3ne0caaid/fwG15SpRluO64oYKWqauK/ad050f6448e9f09a236e21bedbf3d773/realtime-shopping-cart-java-react-components.jpg)\n\nThe template for the index page just contains references to the CSS files, a page header, a `div` element where the UI will be rendered, the Pusher app key and channel name (passed from the server), and references to all the Javascript files the application uses:\n\n```\n\u003c!DOCTYPE html\u003e\n\u003chtml xmlns:th=\"http://www.thymeleaf.org\"\u003e\n\u003chead\u003e\n  \u003cmeta charset=\"utf-8\" /\u003e\n  \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /\u003e\n    \u003ctitle\u003eReal-time shopping cart with Pusher, Java, and React\u003c/title\u003e\n\n  \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" /\u003e\n  \u003clink rel=\"stylesheet\" href=\"http://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css\" /\u003e\n  \u003clink rel=\"stylesheet\" href=\"/css/style.css\" /\u003e\n\u003c/head\u003e\n\u003cbody class=\"blue-gradient-background\"\u003e\n\n  \u003cnav class=\"navbar navbar-inverse\"\u003e\n    \u003cdiv class=\"container\"\u003e\n    \u003cdiv class=\"navbar-header\"\u003e\n      \u003ca class=\"navbar-brand\" href=\"https://pusher.com\"\u003e\n      \u003cimg class=\"logo\" src=\"/images/pusher-logo.png\" width=\"111\" height=\"37\"/\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n\n      \u003cp class=\"navbar-text navbar-right\"\u003e\u003ca class=\"navbar-link\" href=\"http://pusher.com/signup\"\u003eCreate a Free Account\u003c/a\u003e\u003c/p\u003e\n    \u003c/div\u003e\n  \u003c/nav\u003e\n\n  \u003cdiv id=\"app\"\u003e\u003c/div\u003e\n\n  \u003c!-- React --\u003e\n  \u003cscript src=\"https://unpkg.com/react@15.4.1/dist/react-with-addons.js\"\u003e\u003c/script\u003e\n  \u003cscript src=\"https://unpkg.com/react-dom@15.4.1/dist/react-dom.js\"\u003e\u003c/script\u003e\n  \u003cscript src=\"https://unpkg.com/babel-standalone@6.19.0/babel.min.js\"\u003e\u003c/script\u003e\n\n  \u003c!-- Libs --\u003e\n  \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/fetch/2.0.1/fetch.js\"\u003e\u003c/script\u003e\n  \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n\n  \u003c!-- Pusher Config --\u003e\n  \u003cscript th:inline=\"javascript\"\u003e\n    var PUSHER_APP_KEY = /*[[${pusher_app_key}]]*/ 'NA';\n    var PUSHER_CHANNEL_NAME = /*[[${pusher_channel}]]*/ 'NA';\n  \u003c/script\u003e\n\n  \u003c!-- App/Components --\u003e\n  \u003cscript type=\"text/babel\" src=\"/js/components/header.js\"\u003e\u003c/script\u003e\n  \u003cscript type=\"text/babel\" src=\"/js/components/cartItem.js\"\u003e\u003c/script\u003e\n  \u003cscript type=\"text/babel\" src=\"/js/components/cart.js\"\u003e\u003c/script\u003e\n  \u003cscript type=\"text/babel\" src=\"/js/components/product.js\"\u003e\u003c/script\u003e\n  \u003cscript type=\"text/babel\" src=\"/js/components/productList.js\"\u003e\u003c/script\u003e\n  \u003cscript type=\"text/babel\" src=\"/js/app.js\"\u003e\u003c/script\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n```\nThe application will be rendered in the `div` element with the ID `app`. The file [static/js/app.js](https://github.com/app.js) is the starting point for our React app:\n\n```\nvar App = React.createClass({\n  ...\n});\n\nReactDOM.render(\u003cApp /\u003e, document.getElementById(\"app\"));\n```\nInside the `App` class, first, we define our state as arrays of cart items and products:\n\n```\nvar App = React.createClass({\n\n  getInitialState: function() {\n    return { items: [], products: [] };\n  },\n\n  ...\n\n});\n\n...\n```\nThen, we use the `componentWillMount` method, which is invoked once immediately before the initial rendering occurs, to set up Pusher and a variable to keep the cart total:\n\n```language-jsx\nvar App = React.createClass({\n  ...\n\n  componentWillMount: function() {\n    this.pusher = new Pusher(PUSHER_APP_KEY, {\n      encrypted: true,\n    });\n    this.channel = this.pusher.subscribe(PUSHER_CHANNEL_NAME);\n    this.total = 0;\n  }, \n\n  ...\n});\n\n...\n```\nWe subscribe to the channel's events in the `componentDidMount` method and get the catalog of products and any existing content of the shopping cart using [fetch](https://github.com/github/fetch):\n\n```\nvar App = React.createClass({\n\n  ... \n\n  componentDidMount() {\n    this.channel.bind('itemAdded', this.itemAdded);\n    this.channel.bind('itemUpdated', this.itemUpdated);\n    this.channel.bind('itemRemoved', this.itemRemoved);\n    this.channel.bind('cartEmptied', this.cartEmptied);\n\n    fetch('/products').then(function(response) {\n        return response.json();\n    }).then(this.getProductsSuccess);\n\n    fetch('/cart/items', {\n        credentials: 'same-origin',\n    }).then(function(response) {\n        return response.json();\n    }).then(this.getCartItemsSuccess);\n  }\n\n  ...\n});\n\n...\n```\nThe callbacks used when the products and cart items are fetched from the server just update the state of the component and calculate the cart total using the `countTotal` function:\n\n```\nvar App = React.createClass({\n\n  ... \n\n  getProductsSuccess: function(response) {\n    this.setState({\n        products: response\n    });\n  },\n\n  getCartItemsSuccess: function(response) {\n    this.countTotal(response);\n    this.setState({\n      items: response\n    });\n  },\n\n  countTotal: function(newArray) {\n    var temp = 0;\n\n    newArray.forEach(function(item, index) {\n      temp += (item.price * item.quantity);\n    });\n\n    this.total = temp;\n  },\n\n  ...\n});\n\n...\n```\nIn the `componentWillUnmount` method, we unsubscribe from the Pusher events and in case the AJAX requests have not been completed at that point, we assign an empty function to the callbacks to do nothing when the component is unmounted:\n\n```\nvar App = React.createClass({\n\n  ... \n\n  componentWillUnmount: function() {\n    this.channel.unbind();\n\n    this.pusher.unsubscribe(this.channel);\n\n    this.getProductsSuccess = function() {};\n    this.getCartItemsSuccess = function() {};\n  },\n\n  ...\n});\n\n...\n```\nWhen an `itemAdded` event is received, the total is updated and the new item is added to a new array, which is used to update the state so React can re-render the components:\n\n```\nvar App = React.createClass({\n\n  ... \n\n  itemAdded: function(item) {\n    var newArray = this.state.items.slice(0);\n    newArray.push(item);\n\n    this.countTotal(newArray);\n\n    this.setState({\n      items: newArray,\n    });\n  },\n\n  ...\n});\n\n...\n```\nSomething similar happens with the `itemUpdated` and `itemRemoved` events, the difference is that the index of the item being referenced is looked up using the [some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) function to update/remove it:\n\n```\nvar App = React.createClass({\n\n  ... \n\n  itemUpdated: function(item) {\n    var newArray = this.state.items.slice(0);\n    var indexToUpdate;\n\n    this.state.items.some(function(it, index) {\n      if(it.id === item.id) {\n        indexToUpdate = index;\n        return true;\n      }\n    });\n\n    newArray[indexToUpdate].quantity = item.quantity;\n\n    this.countTotal(newArray);\n\n    this.setState({\n      items: newArray,\n    });\n  },\n\n  itemRemoved: function(item) {\n    var newArray = this.state.items.slice(0);\n    var indexToRemove;\n\n    this.state.items.some(function(it, index) {\n      if(it.id === item.id) {\n        indexToRemove = index;\n        return true;\n      }\n    });\n\n    newArray.splice(indexToRemove, 1);\n\n    this.countTotal(newArray);\n\n    this.setState({\n      items: newArray,\n    });\n  },\n\n  ...\n});\n\n...\n```\nAnd, when the cart is emptied, we just update the state with an empty array. Notice how in all cases, we worked with a copy of the existing array, since React works best with immutable objects:\n\n```\nvar App = React.createClass({\n\n  ...\n\n  cartEmptied: function() {\n    var newArray = [];\n    this.countTotal(newArray);\n\n    this.setState({\n      items: newArray\n    });\n  },\n\n  ...\n\n\n});\n\n...\n```\nFinally, the `render` method shows the top-level components of our app:\n\n```\nvar App = React.createClass({\n\n  ...\n\n  render: function() {\n    return (\n      \u003cdiv className=\"container\"\u003e\n        \u003cHeader  /\u003e\n        \u003cCart items={this.state.items} total={this.total} /\u003e\n        \u003cProductList products={this.state.products} /\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  ...\n}\n\n...\n```\n[static/js/header.js](https://github.com/header.js) is a simple component without state or properties that only renders the HTML for the page's title.\n\nThe `Cart` component ([public/js/cart.js](https://github.com/cart.js)) takes the array of items to create an array of `CartItem` components and define an `emptyCart` function to call the API endpoint for that functionality:\n\n```\nvar Cart = React.createClass({\n  emptyCart: function() {\n    fetch('/cart', {\n      credentials: 'same-origin',\n      method: 'DELETE'\n    });\n  },\n\n  render: function() {\n    var itemsMapped = this.props.items.map(function (item, index) {\n      return \u003cCartItem item={item} key={index} /\u003e\n    });\n\n    var empty = \u003cdiv className=\"alert alert-info\"\u003eCart is empty\u003c/div\u003e;\n\n    return (\n      \u003cdiv className=\"row extra-bottom-margin\"\u003e\n        \u003cdiv className=\"col-xs-8 col-xs-offset-2\"\u003e\n          \u003cdiv className=\"panel panel-info\"\u003e\n            \u003cdiv className=\"panel-heading\"\u003e\n              \u003cdiv className=\"panel-title\"\u003e\n                \u003cdiv className=\"row\"\u003e\n                  \u003cdiv className=\"col-xs-12\"\u003e\n                    \u003ch5\u003e\u003cspan className=\"glyphicon glyphicon-shopping-cart\"\u003e\u003c/span\u003e Shopping Cart\u003c/h5\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"panel-body\"\u003e\n              \u003cdiv className=\"row\"\u003e\n                \u003cdiv className=\"col-xs-6\"\u003e\n                  \u003ch6\u003e\u003cstrong\u003eProduct\u003c/strong\u003e\u003c/h6\u003e\n                \u003c/div\u003e\n                \u003cdiv className=\"col-xs-6\"\u003e\n                  \u003cdiv className=\"col-xs-4 text-center\"\u003e\n                    \u003ch6\u003e\u003cstrong\u003ePrice\u003c/strong\u003e\u003c/h6\u003e\n                  \u003c/div\u003e\n                  \u003cdiv className=\"col-xs-4 text-center\"\u003e\n                    \u003ch6\u003e\u003cstrong\u003eQuantity\u003c/strong\u003e\u003c/h6\u003e\n                  \u003c/div\u003e\n                  \u003cdiv className=\"col-xs-4 text-center\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              {itemsMapped.length \u003e 0 ? itemsMapped : empty}\n            \u003c/div\u003e\n            \u003cdiv className=\"panel-footer\"\u003e;\n              \u003cdiv className=\"row text-center\"\u003e\n                \u003cdiv className=\"col-xs-9\"\u003e\n                  \u003ch4 className=\"text-right\"\u003eTotal \u003cstrong\u003e${this.props.total}\u003c/strong\u003e\u003c/h4\u003e\n                \u003c/div\u003e\n                \u003cdiv className=\"col-xs-3\"\u003e\n                  \u003cbutton type=\"button\" className=\"btn btn-info btn-sm btn-block\" onClick={this.emptyCart} disabled={itemsMapped.length == 0}\u003e\n                    Empty cart\n                  \u003c/button\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    );\n  }\n});\n```\n\nThe `CartItem` component ([static/js/cartItem.js](https://github.com/cartItem.js)) defines functions to remove the item from the shopping cart (passing its identifier) and render it:\n\n```\n\n\nvar CartItem = React.createClass({\n  deleteItem: function() {\n    fetch('/cart/item', {\n      credentials: 'same-origin',\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id: this.props.item.id,\n     })\n    });\n  },\n\n  render: function() {\n    var name = this.props.item.name;\n    var id = this.props.item.id;\n    var price = this.props.item.price;\n    var quantity = this.props.item.quantity;\n\n    return (\n      \u003cdiv className=\"row cart-item\"\u003e\n        \u003cdiv className=\"col-xs-6\"\u003e\n          \u003ch6 className=\"product-name\"\u003e\u003cstrong\u003e{name}\u003c/strong\u003e\u003c/h6\u003e\n        \u003c/div\u003e\n        \u003cdiv className=\"col-xs-6\"\u003e\n          \u003cdiv className=\"col-xs-4 text-center\"\u003e\n            \u003ch6\u003e{price}\u003c/h6\u003e\n          \u003c/div\u003e\n          \u003cdiv className=\"col-xs-4 text-center\"\u003e\n            \u003ch6\u003e{quantity}\u003c/h6\u003e\n          \u003c/div\u003e\n          \u003cdiv className=\"col-xs-4 text-center\"\u003e\n            \u003cbutton type=\"button\" className=\"btn btn-link btn-xs\" onClick={this.deleteItem}\u003e\n              \u003ci className=\"fa fa-trash-o fa-lg\"\u003e\u003c/i\u003e\n            \u003c/button\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    );\n  }\n});\n```\nOn the other hand, the `ProductList` component ([static/js/productList.js](https://github.com/productList.js)) takes the array of products to create an array of `Product` components:\n\n```\nvar ProductList = React.createClass({\n  render: function() {\n\n    var productsMapped = this.props.products.map(function (product, index) {\n      return \u003cProduct product={product} key={index} /\u003e\n    });\n\n    return ( \u003cdiv className=\"row extra-bottom-margin\"\u003e {productsMapped} \u003c/div\u003e );\n  }\n});\n```\nWhile the `Product` component defines `quantity` as its state, a function to call the API endpoint to add an item to the shopping cart and render a product:\n\n```\nvar Product = React.createClass({\n  getInitialState: function() {\n    return {\n      quantity: 1\n    };\n  },\n\n  updateQuantity: function(evt) {\n    this.setState({\n        quantity: evt.target.value\n    });\n  },\n\n  addToCart: function() {\n    fetch('/cart/item', {\n      credentials: 'same-origin',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id: this.props.product.id,\n        quantity: this.state.quantity,\n     })\n    });\n  },\n\n  render: function() {\n    var name = this.props.product.name;\n    var id = this.props.product.id;\n    var price = this.props.product.price;\n\n    return (\n      \u003cdiv className=\"col-sm-3\"\u003e\n        \u003cdiv className=\"col-item\"\u003e\n          \u003cdiv className=\"photo\"\u003e\n            \u003cimg src=\"http://placehold.it/200x150\" className=\"img-responsive\" alt=\"a\" /\u003e\n          \u003c/div\u003e\n          \u003cdiv className=\"info\"\u003e\n            \u003cdiv className=\"row\"\u003e\n              \u003cdiv className=\"price col-md-12\"\u003e\n                \u003ch5\u003e{name}\u003c/h5\u003e\n                \u003ch5 className=\"price-text-color\"\u003e${price}\u003c/h5\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"separator clear-left\"\u003e\n              \u003cp className=\"section-qty\"\u003e\n                \u003cinput className=\"form-control input-sm\" type=\"text\" value={this.state.quantity} onChange={this.updateQuantity} /\u003e\n              \u003c/p\u003e\n              \u003cp className=\"section-add\"\u003e\n                \u003cbutton type=\"button\" className=\"btn btn-link btn-xs\" onClick={this.addToCart}\u003e\n                  \u003ci className=\"fa fa-shopping-cart\"\u003e\u003c/i\u003e\u003cspan className=\"hidden-sm\"\u003eAdd to cart\u003c/span\u003e\n                \u003c/button\u003e\n              \u003c/p\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"clearfix\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    );\n  }\n});\n```\nFinally, you can run the application either by executing the `com.pusher.ShoppingCartApplication` class on your IDE, or on the command line with:\n\n``` \n$ mvn spring-boot:run\n```\nAdditionally, on the command line, you can create a JAR file and execute it:\n\n``` \n$ mvn package -DskipTests\n$ java -jar target/shopping-cart-0.0.1-SNAPSHOT.jar\n```\nNow, when you open `http://localhost:8080/` in two browser windows at the same time, the actions made in one window should be reflected on the other one:\n\n![realtime-shopping-cart-java-react-final-app](//images.contentful.com/1es3ne0caaid/7M1VxgHmHmMI60osakayIi/e43d2479b6313e9753ad79ab75ea747d/realtime-shopping-cart-java-react-final-app.gif)\n\n## Conclusion\n\nIn this tutorial, we saw how to integrate Pusher into a Java back-end and a React front-end. As you can see, it is trivial and easy to add Pusher to your app and start adding new features. You can start on the forever free plan that includes 100 max connections, unlimited channels, 200k daily messages, and SSL protection. [Signup now!](https://pusher.com/signup)\n\nRemember that if you get stuck, you can find the final version of this code on [Github](https://github.com/eh3rrera/shopping-cart-pusher) or contact us with your questions.\n\n## Further reading\n\n- [Getting started with Spring Boot](https://spring.io/guides/gs/spring-boot/)\n- [React documentation](https://facebook.github.io/react/docs/getting-started.html)\n- [Pusher channels](https://pusher.com/docs/client_api_guide/client_public_channels)\n- [Pusher events](https://pusher.com/docs/client_api_guide/client_events)","metaTitle":"Build a realtime shopping cart with Java and React","metaDescription":"Learn how to build a simple live shopping cart, using Pusher to sync the content of a user's shopping cart between devices and browser tabs."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5pVmqz52CIiSwk8YIuqc6W","type":"Entry","createdAt":"2018-02-22T15:04:11.995Z","updatedAt":"2018-02-28T11:49:05.472Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an activity feed with React","url":"activity-feed-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/pusher-community/activity-feed-pusher-react/","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2016-11-29","description":"Build a simple activity feed with Node.js REST API, Express and Mongoose. ","prerequisite":"A basic understanding of React and Node.js are needed to follow this tutorial.","content":"Applications can generate a lot of events when they're running. However, most of the time, the only way to know what's going on is by looking at the logs or running queries against the database. It would be nice to let the users see what is going on in an easy way, so why not build an activity feed to see in realtime, every change made to the models of the application?\n\nIn this tutorial we are going to build a simple [Node.js](https://nodejs.org) REST API with [Express](http://expressjs.com/) and [Mongoose](http://mongoosejs.com/) to work with generic measurements, let's say for example, temperatures. Every time a database record is modified (created/updated/deleted), it will trigger an event to a channel in realtime using [Pusher](https://pusher.com/). In the frontend, those events will be shown in an activity feed made with [React](https://facebook.github.io/react/index.html).\n\nThis is how the final application will look like:\n\n![activity-feed-react-demo](//images.contentful.com/1es3ne0caaid/lwQz7IHmP6eyq684I2Syk/bf8e90962701acda5f785ee00663cefd/activity-feed-react-demo.gif)\n\nThis tutorial assumes prior knowledge of Node.js and React. We will integrate Pusher into a Node.js API, create React components and hook them up with Pusher. However, since Pusher is so easy to use together with Node.js and React, you might feel that in this tutorial we will spend most of our time setting things up in the backend and creating the React components.\n\nYou'll need to have access to a [MongoDB](https://www.mongodb.com) database. If you're new to MongoDB, you might find [this](https://docs.mongodb.com/manual/administration/install-community/) documentation on how to install it handy.\n\nThe source code of the final version of the application is available on [Github](https://github.com/pusher-community/activity-feed-pusher-react).\n\n## Application Structure\n\nThe project has the following structure:\n\n``` \n|— models\n| |— measure.js\n|— public\n| |— css\n| |— images\n| |— js\n| | |— app.js\n| | |— event.js\n| | |— events.js\n| | |— header.js\n|— routes\n| |— api.js\n| |— index.js\n|— views\n| |— index.ejs\n|- package.json\n|- server.js\n```\n\n- The `model` directory contains the Mongoose schema to interact with the database.\n- The `public` directory contains the CSS and images files as well as the Javascript (React) files that will be used on the main web page of the app.\n- The `routes` directory contains the server's API endpoints and the route to server the main page of the app.\n- The `view` directory contains the EJS template for the main page of the app.\n- In the root directory, we can find the package.json file with the project's dependencies and the file for the Express server.\n\n## Setting up Pusher\n\nCreate a free account at [Pusher](https://pusher.com/signup).\n\nWhen you first log in, you'll be asked to enter some configuration options:\n\n![activity-feed-react-create-pusher-app](//images.contentful.com/1es3ne0caaid/xCy2xfTAMSWsMmYwckagm/bf8e90962701acda5f785ee00663cefd/activity-feed-react-create-pusher-app.png)\n\nEnter a name, choose *React* as your frontend tech, and *Node.js* as your backend tech. This will give you some sample code to get you started.\n\n![activity-feed-react-pusher-libraries](//images.contentful.com/1es3ne0caaid/6Bqkw0hDgWKiU4IQswWiAE/bf8e90962701acda5f785ee00663cefd/activity-feed-react-pusher-libraries.png)\n\nThis won't lock you into a specific set of technologies, you can always change them. With Pusher, you can use any combination of libraries.\n\nThen go to the *App Keys* tab to copy your App ID, Key, and Secret credentials, we'll need them later.\n\n## Setting up the application\n\nFirst, add a default `package.json` configuration file with:\n\n``` \nnpm init -y\n```\n\nFor running the server, we'll need Express, React, Pusher, and other dependencies, let's add them with:\n\n``` \nnpm install --save express ejs body-parser path pusher mongoose\n```\n\nHere are the dependencies section on the package.json file in case a future version of a dependency breaks the code:\n\n```\n{\n  ...\n  \"dependencies\": {\n    \"body-parser\": \"^1.15.2\",\n    \"ejs\": \"^2.5.2\",\n    \"express\": \"^4.14.0\",\n    \"mongoose\": \"^4.6.4\",\n    \"path\": \"^0.12.7\",\n    \"pusher\": \"^1.5.0\",\n  }\n}\n```\n\n## The Node.js Backend\n\nThe backend is a standard Express app with Mongoose to interact with the database. In the [server.js](https://github.com/pusher-community/activity-feed-pusher-react/blob/master/server.js) file, you can find the configuration for Express:\n\n```\nvar app = express();\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs');\n```\n\nThe routes exposed to the server are organized in two different files:\n\n```\napp.use('/', index);\napp.use('/api', api);\n```\n\nThen, the app will connect to the database and start the web server on success:\n\n```\nmongoose.connect('mongodb://localhost/temperatures');\n\nvar db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'Connection Error:'));\ndb.once('open', function () {\n  app.listen(3000, function () {\n    console.log('Node server running on port 3000');\n  });\n});\n```\n\nHowever, the interesting part is in the file [routes/api.js](https://github.com/pusher-community/activity-feed-pusher-react/blob/master/routes/api.js). First, the Pusher object is created passing the configuration object with the App ID, the key, and the secret for the Pusher app:\n\n```\nvar pusher = new Pusher({\n  appId      : process.env.PUSHER_APP_ID,\n  key        : process.env.PUSHER_APP_KEY,\n  secret     : process.env.PUSHER_APP_SECRET,\n  encrypted  : true,\n});\n```\n\nPusher can be used to publish any events that happen in our application.  These events have a _channel_, which allows events to relate to a particular topic, an _event-name_ used to identify the type of the event, and a _payload_,  which you can attach any additional information to the message.\n\nWe are going to publish an event to a Pusher channel when a database record is created/updated/deleted with that record as attachment so we can show it in an activity feed.\n\nHere's the definition of our API's REST endpoints. Notice how the event is triggered using `pusher.trigger` after the database operation is performed successfully:\n\n```\n/* CREATE */\nrouter.post('/new', function (req, res) {\n  Measure.create({\n    measure: req.body.measure,\n    unit: req.body.unit,\n    insertedAt: Date.now(),\n  }, function (err, measure) {\n    if (err) {\n      ...\n    } else {\n      pusher.trigger(\n        channel,\n        'created', \n        {\n          name: 'created',\n          id: measure._id,\n          date: measure.insertedAt,\n          measure: measure.measure,\n          unit: measure.unit,\n        }\n      );\n\n      res.status(200).json(measure);\n    }\n  });\n});\n\nrouter.route('/:id')\n  /* UPDATE */\n  .put((req, res) =\u003e {\n    Measure.findById(req.params.id, function (err, measure) {\n      if (err) {\n        ...\n      } else if (measure) {\n        measure.updatedAt = Date.now();\n        measure.measure = req.body.measure;\n        measure.unit = req.body.unit;\n\n        measure.save(function () {\n          pusher.trigger(\n            channel,\n            'updated', \n            {\n              name: 'updated',\n              id: measure._id,\n              date: measure.updatedAt,\n              measure: measure.measure,\n              unit: measure.unit,\n            }\n          );\n\n          res.status(200).json(measure);\n        });\n\n\n     } else {\n        ...\n      }\n    });\n  })\n\n  /* DELETE */\n  .delete((req, res) =\u003e {\n    Measure.findById(req.params.id, function (err, measure) {\n      if (err) { \n        ...\n      } else if (measure) {\n        measure.remove(function () {\n          pusher.trigger(\n            channel,\n            'deleted', \n            {\n              name: 'deleted',\n              id: measure._id,\n              date: measure.updatedAt ? measure.updatedAt : measure.insertedAt,\n              measure: measure.measure,\n              unit: measure.unit,\n            }\n          );\n\n          res.status(200).json(measure);\n        });\n     } else {\n        ...\n      }\n    });\n  });\n```\n\n`Measure` is the Mongoose schema used to access the database. You can find its definition in the [models/measure.js](https://github.com/pusher-community/activity-feed-pusher-react/blob/master/models/measure.js) file:\n\n```\nvar measureSchema = new Schema({  \n  measure:     { type: Number },\n  insertedAt:  { type: Date },\n  updatedAt:   { type: Date },\n  unit:        { type: String },\n});\n```\n\nThis way, we'll be listening to these events to update the state of the client in the frontend.\n\n## React + Pusher\n\nReact thinks of the UI as a set of components, where you simply update a component's state, and then React renders a new UI based on this new state updating the DOM for you in the most efficient way.\n\nThe app's UI will be organized into three components, a header (`Header`), a container for events (`Events`), and a component for each event (`Event`):\n\n![activity-feed-react-components](//images.contentful.com/1es3ne0caaid/2eZ8j0npW0IU6siac6wokW/bf8e90962701acda5f785ee00663cefd/activity-feed-react-components.png)\n\nThe template for the index page is pretty simple. It just contains references to the CSS files, a `div` element where the UI will be rendered, the Pusher app key (passed from the server), and references to all the Javascript files the application uses:\n\n```\n\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u003chead\u003e\n  \u003cmeta charset=\"utf-8\"\u003e\n  \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n  \u003ctitle\u003eRealtime Activity Feed with Pusher + React\u003c/title\u003e\n  \u003clink rel=\"stylesheet\" href=\"/css/all-the-things.css\"\u003e\n  \u003clink rel=\"stylesheet\" href=\"/css/style.css\"\u003e\n\u003c/head\u003e\n\n\u003cbody class=\"blue-gradient-background\"\u003e\n\n  \u003cdiv id=\"app\"\u003e\u003c/div\u003e\n\n  \u003c!-- React --\u003e\n  \u003cscript src=\"https://unpkg.com/react@15.3.2/dist/react-with-addons.js\"\u003e\u003c/script\u003e\n  \u003cscript src=\"https://unpkg.com/react-dom@15.3.2/dist/react-dom.js\"\u003e\u003c/script\u003e\n  \u003cscript src=\"https://unpkg.com/babel-standalone@6.15.0/babel.min.js\"\u003e\u003c/script\u003e\n\n  \u003c!-- Libs --\u003e\n  \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.15.2/moment.min.js\"\u003e\u003c/script\u003e\n  \u003cscript src=\"https://js.pusher.com/3.2/pusher.min.js\"\u003e\u003c/script\u003e\n\n  \u003c!-- Pusher Config --\u003e\n  \u003cscript\u003e\n    var PUSHER_APP_KEY = '\u003c%= pusher_app_key %\u003e';\n  \u003c/script\u003e\n\n  \u003c!-- App/Components --\u003e\n  \u003cscript type=\"text/babel\" src=\"/js/header.js\"\u003e\u003c/script\u003e\n  \u003cscript type=\"text/babel\" src=\"/js/event.js\"\u003e\u003c/script\u003e\n  \u003cscript type=\"text/babel\" src=\"/js/events.js\"\u003e\u003c/script\u003e\n  \u003cscript type=\"text/babel\" src=\"/js/app.js\"\u003e\u003c/script\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n```\n\nThe application will be rendered in the `div` element with the ID `app`. The file [public/js/app.js](https://github.com/pusher-community/activity-feed-pusher-react/blob/master/public/js/app.js) is the starting point for our React app:\n\n```\nvar App = React.createClass({\n  ...\n});\n\nReactDOM.render(\u003cApp /\u003e, document.getElementById(\"app\"));\n```\n\nInside the `App` class, first, we define our state as an array of events:\n\n```\nvar App = React.createClass({\n\n  getInitialState: function() {\n    return { events: [] };\n  },\n  \n  ...\n  \n});\n```\n\nThen, we use the `componentWillMount` method, which is invoked once immediately before the initial rendering occurs, to set up Pusher:\n\n```\nvar App = React.createClass({\n\n  ...\n\n  componentWillMount: function() {\n    this.pusher = new Pusher(PUSHER_APP_KEY, {\n      encrypted: true,\n    });\n    this.channel = this.pusher.subscribe('events_to_be_shown');\n  }, \n\n  ...\n});\n\n...\n```\n\nWe subscribe to the channel's events in the `componentDidMount` method and unsubscribe from all of them and from the channel in the `componentWillUnmount` method:\n\n```\nvar App = React.createClass({\n\n  ... \n\n  componentDidMount() {\n    this.channel.bind('created', this.updateEvents);\n    this.channel.bind('updated', this.updateEvents);\n    this.channel.bind('deleted', this.updateEvents);\n  }\n\n  componentWillUnmount() {\n    this.channel.unbind();\n\n    this.pusher.unsubscribe(this.channel);\n  } \n\n  ...\n});\n\n...\n```\n\nThe `updateEvents` function updates the state of the component so the UI can be re-render. Notice how the new event is prepended to the existing array of events. Since React works best with immutable objects, we create a copy of that array to then update this copy:\n\n```\n\nvar App = React.createClass({\n\n  ...\n\n  updateEvents: function(data) {\n    var newArray = this.state.events.slice(0);\n    newArray.unshift(data);\n\n    this.setState({\n      events: newArray,\n    });\n  },\n\n  ...\n});\n\n...\n```\n\nFinally, the `render` method shows the top-level components of our app, `Header` and `Events`:\n\n```\nvar App = React.createClass({\n\n  ...\n\n  render() {\n    return (\n      \u003cdiv\u003e\n        \u003cHeader  /\u003e\n        \u003cEvents events={this.state.events} /\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  ...\n}\n\n...\n```\n\n[public/javascript/header.js](https://github.com/pusher-community/activity-feed-pusher-react/blob/master/public/js/header.js) is a simple component without state or properties that only renders the HTML for the page's header.\n\nThe `Events` component ([public/javascript/events.js](https://github.com/pusher-community/activity-feed-pusher-react/blob/master/public/js/events.js)) takes the array of events to create an array of `Event` components:\n\n```\nvar Events = React.createClass({\n  render: function() {\n    var ReactCSSTransitionGroup = React.addons.CSSTransitionGroup;\n\n    var eventsLength = this.props.events.length;\n    var eventsMapped = this.props.events.map(function (evt, index) {\n      const key = eventsLength - index;\n      return \u003cEvent event={evt} key={key} /\u003e\n    });\n\n    return \u003csection className={'blue-gradient-background intro-splash splash'}\u003e\n             \u003cdiv className={'container center-all-container'}\u003e\n               \u003ch1 className={'white light splash-title'}\u003e\n                 Realtime Activity Feed with Pusher + React\n               \u003c/h1\u003e\n               \u003cReactCSSTransitionGroup component=\"ul\" className=\"evts\" transitionName=\"evt-transition\" transitionEnterTimeout={500} transitionLeaveTimeout={500}\u003e\n                 {eventsMapped}\n               \u003c/ReactCSSTransitionGroup\u003e\n             \u003c/div\u003e\n           \u003c/section\u003e;\n    }\n});\n```\n\nThere are two important things in this code.\n\nFirst, React requires every message component in a collection to have a unique identifier defined by the `key` property. This help it to know when elements are added or removed. As new elements are prepended instead of appended, we can't give the first element the index `0` as key since this will only work the first time an element is added (for the next added elements, there will be an element with key `0` already). Therefore, keys are assigned this way:\n\n```\nvar key = eventsLength - index;\n```\n\nThe second thing is that the insertion of a new event is done with the `ReactCSSTransitionGroup` add-on component, which wraps the elements you want to animate. By default, it renders a `span` to wrap them, but since we're going to work with `li` elements, we specify the wrapper tag `ul` with the `component` property. `className` becomes a property of the rendered component, as any other property that doesn't belong to `ReactCSSTransitionGroup`.\n\n`transitionName` is the prefix used to identify the CSS classes to perform the animation. You can find them in the file [public/css/style.css](https://github.com/pusher-community/activity-feed-pusher-react/blob/master/public/css/style.css):\n\n```\n.evt-transition-enter {\n    opacity: 0.01;\n}\n\n.evt-transition-enter.evt-transition-enter-active {\n    opacity: 1;\n    transition: opacity 500ms ease-in;\n}\n\n.evt-transition-leave {\n    opacity: 1;\n}\n\n.evt-transition-leave.evt-transition-leave-active {\n    opacity: 0.01;\n    transition: opacity 500ms ease-in;\n}\n```\n\nFinally, the `Event` component ([public/js/event.js](https://github.com/pusher-community/activity-feed-pusher-react/blob/master/public/js/event.js)), using [Moment.js](https://momentjs.com/) to format the date, renders the event in the following way:\n\n```\n  var Event = React.createClass({\n    render: function() {\n      var name = this.props.event.name;\n      var id = this.props.event.id;\n      var date = moment(this.props.event.date).fromNow();\n      var measure = this.props.event.measure;\n      var unit = this.props.event.unit;\n\n      return (\n        \u003cli className={'evt'}\u003e\n          \u003cdiv className={'evt-name'}\u003e{name}:\u003c/div\u003e\n          \u003cdiv className={'evt-id'}\u003e{id}\u003c/div\u003e\n          \u003cdiv className={'evt-date'}\u003e{date}\u003c/div\u003e\n          \u003cdiv className={'evt-measure'}\u003e{measure}\u0026deg;{unit}\u003c/div\u003e\n        \u003c/li\u003e\n      );\n    }\n  });\n```\n\nTo run the server, execute the `server.js` file using the following command:\n\n``` \nPUSHER_APP_ID=\u003cYOUR PUSHER APP ID\u003e PUSHER_APP_KEY=\u003cYOUR PUSHER APP KEY\u003e PUSHER_APP_SECRET=\u003cYOUR PUSHER APP SECRET\u003e node server.js\n```\n\nTo test the whole app, you can use something to call the API endpoints with a JSON payload, like [curl](https://curl.haxx.se/) or [Postman](https://www.getpostman.com/):\n\n![activity-feed-react-postman](//images.contentful.com/1es3ne0caaid/1WnorjIqIoMqKWu8I0W4qA/bf8e90962701acda5f785ee00663cefd/activity-feed-react-postman.png)\n\nOr if you only want to test the frontend part with Pusher, you can use the [Pusher Debug Console on your dashboard](http://dashboard.pusher.com/):\n\n![activity-feed-react-pusher-console](//images.contentful.com/1es3ne0caaid/4Q1z5sQ9zG8IokUqE6ACsk/bf8e90962701acda5f785ee00663cefd/activity-feed-react-pusher-console.png)\n\n## Conclusion\n\nIn this tutorial, we saw how to integrate Pusher into a Node.js backend and a React frontend. As you can see, it is trivial and easy to add Pusher to your app and start adding new  features.\n\nRemember that if you get stuck, you can find the final version of this code on [Github](https://github.com/pusher-community/activity-feed-pusher-react/) or contact us with your questions.\n\n## Further reading\n\n- [Express routing documentation](http://expressjs.com/en/starter/basic-routing.html)\n- [Mongoose quick start](http://mongoosejs.com/docs/index.html)\n- [React documentation](https://facebook.github.io/react/docs/getting-started.html)\n- [Moment.js documentation](http://momentjs.com/docs/)\n- [Pusher channels](https://pusher.com/docs/client_api_guide/client_public_channels)\n- [Pusher events](https://pusher.com/docs/client_api_guide/client_events)","metaTitle":"Build an activity feed with React","metaDescription":"Build a realtime activity feed with React, Node.js and Pusher. Learn how to set up realtime updates of the backend database and keep your feed updated live! "}}],"defaultValue":"JavaScript","queryType":"tag","pages":33,"route":"/tutorials","query":{"tag":"JavaScript","page":"32"}}},"page":"/tutorials","query":{"tag":"JavaScript","page":"32"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=JavaScript&page=32 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:32:33 GMT -->
</html>