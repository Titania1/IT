<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?page=31 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:51 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1">Learn &amp; Discover Pusher</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="1v9vy9q">.css-1v9vy9q{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;text-align:center;}@media all and (min-width:400px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1v9vy9q a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1v9vy9q a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:400px){.css-1v9vy9q{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}</style><p scale="h5" class="css-1v9vy9q e5jrto45"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">447</span> tutorials to help you build great apps</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials0e67.html?product=Channels" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials1bbb.html?product=Beams" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value=""/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:none;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/carpooling-react-native-part-1.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a carpooling app with React Native - Part 1: Setting up the server</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This two-part series uses React Native, Docker and several Google services (Maps, Places, Directions and Geocoding) to c...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/comments-app-ruby-rails.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a comments app with Ruby on Rails</h3><p class="css-k12xad e5jrto45">This short tutorial demonstrates how to integrate realtime updates into a Ruby on Rails application. You will create a s...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-notifications-nodejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to add realtime notifications to your Node.js app</h3><p class="css-k12xad e5jrto45">This short tutorial shows you how to quickly add instant notifications to a Node.js app. You will create a simple wiki, ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/ios-chat-app-swift-chatkit-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an iOS chat app using Swift and Chatkit - Part 3: Building the iOS app</h3><p class="css-k12xad e5jrto45">Build a chat app for iOS, with a Laravel API backend. In part three, build the iOS application. By the end of this secti...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-feed-go-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo feed with Go and Vue.js</h3><p class="css-k12xad e5jrto45">Build a photo feed application using Go, Vue.js and SQLite. Users can post pictures, and see each others&#x27; images appear ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-go-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live comments feed with Go and Vue.js</h3><p class="css-k12xad e5jrto45">Build a simple comments feed using Go, Vue.js and SQLite. Users can comment on a post, with the comments feed updating i...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-gatsby.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Add a chat widget to your Gatsby blog</h3><p class="css-k12xad e5jrto45">In this tutorial, we’re going to take a look at how we can add a realtime chat feature to a Gatsby blog using Pusher, us...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/mongodb-change-streams.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Using MongoDB as a realtime database with change streams</h3><p class="css-k12xad e5jrto45">Learn how to use change streams in MongoDB to create a Firebase alternative. The tutorial provides a working example of ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/voting-app-go-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Polls</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a voting application with Go and Vue.js</h3><p class="css-k12xad e5jrto45">Build a polling app using Echo, the Go framework, Vue.js and SQLite. Users are able to vote on their favorite JavaScript...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsb385.html?page=30" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials2679.html?page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials219f.html?page=29" class="css-za1ua3 edg0byb1">29</a><a href="tutorialsb385.html?page=30" class="css-za1ua3 edg0byb1">30</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsdcf3.html?page=31" class="css-2wakph edg0byb1">31</a><a href="tutorialsfa9c.html?page=32" class="css-za1ua3 edg0byb1">32</a><a href="tutorialsbd1b.html?page=33" class="css-za1ua3 edg0byb1">33</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials02d1.html?page=50" class="css-5s6711 edg0byb1">50</a><a href="tutorialsfa9c.html?page=32" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":447,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"FeIJHByAhMWYaGyuIGWKO","type":"Entry","createdAt":"2018-06-07T16:31:28.809Z","updatedAt":"2018-06-11T12:43:52.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a carpooling app with React Native - Part 1: Setting up the server","url":"carpooling-react-native-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/Ridesharer","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-06-07","description":"This two-part series uses React Native, Docker and several Google services (Maps, Places, Directions and Geocoding) to create a carpooling app. In part one you will set up the backend.","prerequisite":"You will need a React Native development environment, Docker and Docker Compose installed on your machine. This tutorial assumes you know how to install and configure these on your own system. You will need experience with React Native and Docker.","content":"In this series, we’re going to create a carpooling app with React Native. This will be a two-part series showing you how to create a full-stack React Native app which uses PHP as the backend. The first part covers setting up the backend, while the [second part](https://pusher.com/tutorials/carpooling-react-native-part-2) will cover building the frontend and running the app.\n\nI’ve previously written a similar tutorial: [Build a ride hailing app with React Native](https://pusher.com/tutorials/ride-hailing-react-native). The main difference between the two is that the first one shows how to build an app similar to the following:\n\n- [Grab](https://www.grab.com)\n- [Uber](https://www.uber.com) \n- [Lyft](https://www.lyft.com/)\n\nThe main idea of the above apps is to provide a ride-hailing service to users. This is traditionally called “Ridesharing”.\n\nWhile this tutorial will show you how to build an app similar to these:\n\n- [Wunder Carpool](https://www.wunder.org/)\n- [Grab Share](https://www.grab.com/ph/share/)\n- [Waze Carpool](https://www.waze.com/carpool)\n\nThe main idea of the above apps is for users to share their ride with people who are going the same route as them. This is traditionally called “Carpooling”.\n\n## Prerequisites\n\nThis tutorial requires the following to be already set up on your machine:\n\n- [**React Native development environment**](https://facebook.github.io/react-native/) - the series assumes that you already have set up all the software needed to create and run React Native apps. The series will show you how to create the app for both Android and iOS devices. We will use the `react-native init`  command to create a React Native project. You can either have both Android Studio and Xcode set up on your machine or just one of them. Additionally, you can set up [Genymotion](https://www.genymotion.com/fun-zone/) so you can easily change your in-app location. Be sure to check out the [setup instructions](https://facebook.github.io/react-native/docs/getting-started.html) if you haven’t setup your machine already. \n- [**Docker**](https://www.docker.com/) and [**Docker Compose**](https://docs.docker.com/compose/) - the series assumes that you already have [Docker](https://docs.docker.com/install/) and [Docker Compose](https://docs.docker.com/compose/install/) running on your machine. We will be using those to easily setup a server with all the software that we need. This also assures that we both have the same environment. \n- [**Git**](https://git-scm.com/) - used for cloning repos.\n\nKnowing the basics of creating a React Native app is required. This means you have to know how to run the app on an emulator or your device. You should also have a good grasp of basic React concepts such as props, refs, state, and the component lifecycle.\n\nKnowledge of [Docker](https://www.docker.com/) is required. You should know how to setup Docker on your operating system and setup a containers from scratch. Note that Docker has poor support for Windows 7 and 8. So if you’re using any of those systems, you might have difficulty in following this tutorial.\n\nKnowledge of the following will be helpful, but not required. I’ll try to cover as much detail as I can, so readers with zero knowledge of the following will still be able to follow along:\n\n\n- [PHP](http://php.net/)\n- [Elasticsearch](https://www.elastic.co/) \n- [Pusher Channels](https://pusher.com/)\n\nLastly, the tutorial assumes that you know your way around the operating system that you’re using. Knowing how to install new software, execute commands in the terminal is required.\n\n\n## What we’ll be building\n\nBefore we proceed, it’s important to know what exactly we’ll be building. The app will have two modes: \n\n\n- **sharing** - this allows the user to share their ride so that others can make a request to ride with them. For the rest of the series, I’ll be referring to the users who uses this feature as the “rider”.\n- **hiking** - this allows the user to make a request to ride with someone. I’ll be referring to these users as “hikers”.\n\nBelow is the entire flow of the app. I’m using Genymotion emulator for the user that plays the rider, and iPhone for the hiker. This is so I can emulate a moving vehicle by using Genymotion’s GPS emulation tool: \n\n![carpooling-react-native-gps-emulation](//images.ctfassets.net/1es3ne0caaid/4H7d0cHWj6qC4qgqQU0moo/04c6b267d3a8582123a7b18e985fc377/carpooling-react-native-gps-emulation.png)\n\nI can simply click around the map so that React Native’s Geolocation is triggered. This then allows me to use Pusher Channels to send a message to the hiker so that they’re informed of the rider’s current location.\n\nNow, let’s proceed with the app flow:\n\n\n1. First, the rider enters their username and clicks **Share a ride**:\n\n![carpooling-react-native-share-a-ride](//images.ctfassets.net/1es3ne0caaid/6I48i2AQrmyiuoICqiyiIY/1bceeb357948e5b31dbc13299eff5ba4/carpooling-react-native-share-a-ride.png)\n\n2. Rider types in where they want to go and selects it from the drop-down. Google Places Autocomplete makes this feature work:\n\n![carpooling-react-native-rider-searches](//images.ctfassets.net/1es3ne0caaid/4iCq1toOb6eoOisOyi24CM/c1c6fa071340a13a7f390b4a5cc55264/carpooling-react-native-rider-searches.png)\n\n3. After selecting a place, the app plots the most desirable route from the origin to the destination. The red marker being the origin, and the blue one being the destination:\n\n![carpooling-react-native-route-finder](//images.ctfassets.net/1es3ne0caaid/4KNVRbBcNicEaasWa0s0yA/7d1c5d286ac1965222b50217c98e22ed/carpooling-react-native-route-finder.png)\n\nIf the rider wants to pick another place, they can click on the **Reset** button. This will empty the text field for entering the place as well as remove the markers and the route from the map.\n\n\n4. At this point, the rider clicks on the **Share Ride** button. This triggers a request to the server which then saves all the relevant data to an Elasticsearch index. This allows hikers to search for them later on. \n\n\n  To keep the route information updated, we use React Native’s Geolocation feature to watch the rider’s current location. Every time their location changes, the Elasticsearch index is also updated:\n\n![carpooling-react-native-driver-route-stored](//images.ctfassets.net/1es3ne0caaid/3nLm7Z3gik8s64IO2YgwEw/d01bb5f743921cff55786e3566d53300/carpooling-react-native-driver-route-stored.png)\n\n5. Now let’s take a look at the hiker’s side of things. First, the hiker enters their username and clicks on **Hitch a ride**:\n\n![carpooling-react-native-hitch-a-ride](//images.ctfassets.net/1es3ne0caaid/5UKI0GRYHKSIGkksQs2Uoa/8c9eb565dec00189cad36681c38a4859/carpooling-react-native-hitch-a-ride.jpeg)\n\n6. Next, the hiker searches for their destination. To keep things simple, let’s pick the same place where the rider is going:\n\n![carpooling-react-native-hitch-destination-search](//images.ctfassets.net/1es3ne0caaid/kLAUXtOhZm0Im4uy8cCUo/805ca4b280e726510d47d4ccf6a70a83/carpooling-react-native-hitch-destination-search.jpeg)\n\n7. Once again, the app plots the most desirable route from the hiker’s origin to their destination:\n\n![carpooling-react-native-hitch-route](//images.ctfassets.net/1es3ne0caaid/4F5S0WK7niumMOsoMuOqWy/4133360090d2e5727b69347511c70ac5/carpooling-react-native-hitch-route.jpeg)\n\n8. The hiker then clicks on the **Search Ride** button. At this point, the app makes a request to the server to look for riders matching the route added by the hiker. The rider should now receive the request. Pusher Channels makes this feature work:\n\n![carpooling-react-native-request-to-driver](//images.ctfassets.net/1es3ne0caaid/3Wbxnk3wLeKE06YG2McKk4/442aaa6ce3125eeb37d039efb9894238/carpooling-react-native-request-to-driver.png)\n\n9. Once the rider accepts the request, the hiker receives an alert that the rider accepted their request:\n\n![carpooling-react-native-ride-accepted](//images.ctfassets.net/1es3ne0caaid/2zBc6OM5juqIKkgS8scKe4/bcc09e370613da0900d736ca6c33d81e/carpooling-react-native-ride-accepted.jpeg)\n\n10. At this point, the hiker’s map will show rider’s current location. React Native’s Geolocation feature and Pusher Channels make this work:\n\n![carpooling-react-native-hitch-location](//images.ctfassets.net/1es3ne0caaid/6mZVzKfJ5Yq0yYOuwmSckW/0249c980ad672477b7039027ce60b4d6/carpooling-react-native-hitch-location.jpeg)\n\nAt the same time, the rider’s map will show their current location on the map. This is where you can use Genymotion’s GPS emulation tool to update the rider’s location:\n\n![carpooling-react-native-current-location](//images.ctfassets.net/1es3ne0caaid/2HtFr7jCfYC4oYcaEiWGc0/df3ec3cf2e0215cf8515b291fb29fcbd/carpooling-react-native-current-location.png)\n\n11. Once the rider is near the hiker, both users will receive a notification informing them that they’re already near each other:\n\n![carpooling-react-native-proximity](//images.ctfassets.net/1es3ne0caaid/66En3l4x3ieKC8SKM2o6Gs/d13457e68814b3820e026c1319824083/carpooling-react-native-proximity.png)\n\n12. Once they are within 20 meters of each other, the app’s UI resets and it goes back to the login screen:\n\n![carpooling-react-native-reset](//images.ctfassets.net/1es3ne0caaid/6xxnIcAg00a4gKuO222q0Q/d35e6865ad8c3078147f2c4d250353b7/carpooling-react-native-reset.png)\n\nWe will use the following technologies to build the app:\n\n- **Elasticsearch** - for saving and searching for routes.\n- **Pusher Channels** - for establishing realtime communication between the rider and the hiker so they are kept updated where each other is.\n- **PHP** - for saving and searching documents from the Elasticsearch index.\n- **Google Maps** - for showing maps inside the app.\n- **Google Places Autocomplete** - for searching for places.\n- **Google Directions API** - for getting the directions between the origin and the destination of the riders and hikers.\n- [**Geometry Library Google Maps API V3**](https://github.com/alexpechkarev/geometry-library) - for determining whether a specific coordinate lies within a set of coordinates. \n\nThe full source code of the app is available on this [Github repo](https://github.com/anchetaWern/Ridesharer). \n\n\n## Setting up a Pusher app\n\nWe’ll need to create a Pusher app to use Pusher Channels. Start by creating a [Pusher account](https://pusher.com/) if you haven’t done so already.\n\nOnce you have an account, go to your [dashboard](https://dashboard.pusher.com/) and click on **Channels apps** on the left side of the screen, then click on **Create Channels apps**. Enter the name of your app and select a desirable cluster, preferably one that’s nearest to your current location:\n\n![carpooling-react-native-create-channels-app](//images.ctfassets.net/1es3ne0caaid/4uecV7cGQokq6MAQEgWeoe/b31b3ade12a22747326d7f963c95bafd/carpooling-react-native-create-channels-app.png)\n\nOnce the app is created, click on the **App Settings** tab and enable client events:\n\n![carpooling-react-native-enable-client-events](//images.ctfassets.net/1es3ne0caaid/4t9p6MLB7aIgOGKs0W8Qys/323dbfc484d5ef2bb93d9e11e4fb31b7/carpooling-react-native-enable-client-events.png)\n\nThis will allow us to trigger events right from the app itself. That way, the only thing that we need to do on the server is to authenticate requests. Don’t forget to click on **Update** once you’re done.\n\nThe API keys which we’ll be using later are on the **App keys** tab.\n\n## Setting up a Google project\n\nWe will be using three of Google’s services to build this app:\n\n\n- Google Maps\n- Google Places\n- Google Directions\n\nThis requires us to create a Google project at [console.developers.google.com](https://console.developers.google.com) so we can use those services. \n\nOn your dashboard, click on the **Select a project** dropdown then click on **Create project**. Enter the name of the project and click **Create**:\n\n![carpooling-react-native-google-console-create-project](//images.ctfassets.net/1es3ne0caaid/5ODzOiU9EWiYy8awiSoigg/9de826dd47fc6d1fc527e2e3167ddf87/carpooling-react-native-google-console-create-project.png)\n\nOnce the project is created, click on **Library** on the left side. Look for the following APIs and enable them:\n\n- Maps SDK for Android\n- Maps SDK for iOS - note that if you don’t enable this, and followed the [installation instructions for iOS](https://github.com/react-community/react-native-maps/blob/master/docs/installation.md#if-you-want-to-use-google-maps), Apple Maps will be used instead.\n- Places SDK for Android\n- Places SDK for iOS\n- Directions API\n- Geocoding API\n\nOnce those are enabled, click on the **Credentials** menu on the left side, then click on the **Create credentials** button and select **API key**:\n\n![carpooling-react-native-google-console-credentials](//images.ctfassets.net/1es3ne0caaid/3D0rkMkRXyYeYCY2Yy6yUo/7e422484fbb0d294bfe47c2c39f810c4/carpooling-react-native-google-console-credentials.png)\n\nThat will generate an API key which allows you to use the services mentioned above. Take note of the key as we will be using it later. \n\nYou can choose to restrict access so not just anybody can use your key once they get access to it. To avoid problems while developing the app, I recommend to just leave it for now.\n\n## Setting up Laradock\n\nLaradock is a full PHP development environment for Docker. It allows us to easily set up the development server. Go through the following steps to setup Laradock.\n\n### Configuring the environment\n\n1. Clone the official repo. This will create a `laradock` directory:\n\n```\n    git clone https://github.com/laradock/laradock.git --branch v7.0.0\n```\n\nNote that in the above command we’re cloning a specific release tag ([v7.0.0](https://github.com/laradock/laradock/tree/v7.0.0)). This is to make sure we’re both using the same version of Laradock. This helps you avoid issues that has to do with different configuration and software versions installed by Laradock. You can choose to clone the most recent version, but you’ll have to handle the compatibility issues on your own.\n\n2. Navigate inside the `laradock` directory and create a copy of the sample `.env` file:\n\n```\n    cd laradock\n    cp env-example .env\n```\n\n3. Open the `.env` file on your text editor and replace the existing config with the following:\n\nThis is the directory where your projects are saved. Go ahead and create a `laradock-projects` folder outside the `laradock` folder. Then inside the `laradock-projects`, create a new folder named `ridesharer`. This is where we will add the server code:\n\n```\n    APP_CODE_PATH_HOST=../laradock-projects\n```\n\nThis is the Elasticsearch port configuration. The one below is actually the default one so in most cases, you don’t really need to change anything. But if you have a different configuration, or if you want to use a different port because an existing application is already using these ports then this is a good place to change them:\n\n```\n    ELASTICSEARCH_HOST_HTTP_PORT=9200\n    ELASTICSEARCH_HOST_TRANSPORT_PORT=9300\n```\n\nThis is the path where the Apache site configuration is located. We will be updating it at a later step. This is just to let you know that this is where it’s located:\n\n```\n    APACHE_SITES_PATH=./apache2/sites\n```\n\n### Adding a virtual host\n\n\n1. Open the `laradock/apache2/sites/default.apache.conf` file and add a new virtual host (you can also replace the existing one if you’re not using it):\n\n```\n    \u003cVirtualHost *:80\u003e\n      ServerName ridesharer.loc\n      DocumentRoot /var/www/ridesharer\n      Options Indexes FollowSymLinks\n    \n      \u003cDirectory \"/var/www/ridesharer\"\u003e\n        AllowOverride All\n        \u003cIfVersion \u003c 2.4\u003e\n          Allow from all\n        \u003c/IfVersion\u003e\n        \u003cIfVersion \u003e= 2.4\u003e\n          Require all granted\n        \u003c/IfVersion\u003e\n      \u003c/Directory\u003e\n    \n    \u003c/VirtualHost\u003e\n```\n\nThe code above tells Apache to serve the files inside the `/var/www/ridesharer` directory when `http://ridesharer.loc` is accessed on the browser. If the directory has `index.php` file in it, then it will get served by default (if the filename is not specified).\n\nThe `/var/www` directory maps to the application directory you’ve specified earlier on the `.env` file:\n\n```\n    APP_CODE_PATH_HOST=../laradock-projects\n```\n\nThis means that `/var/www/ridesharer` is equivalent to `/laradock-projects/ridesharer`.\n\nThis is why we’ve created a `ridesharer` folder inside the `laradock-projects` directory earlier. Which means that any file you create inside the `ridesharer` folder will get served.\n\n\n2. Update the operating system’s `hosts` file to point out `ridesharer.loc` to `localhost`:\n\n```\n    127.0.0.1     ridesharer.loc\n```\n\nThis tells the browser to not go looking anywhere else on the internet when `http://ridesharer.loc` is accessed. Instead, it will just look in the localhost.\n\n\n### Configuring Elasticsearch\n\nOpen the `docker-compose.yml` file and search for `ElasticSearch Container`. This will show you the Elasticsearch configuration:\n\n``` yaml\n    ### ElasticSearch ########################################\n        elasticsearch:\n          build: ./elasticsearch\n          volumes:\n            - elasticsearch:/usr/share/elasticsearch/data\n          environment:\n            - cluster.name=laradock-cluster\n            - bootstrap.memory_lock=true\n            - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n          ulimits:\n            memlock:\n              soft: -1\n              hard: -1\n          ports:\n            - \"${ELASTICSEARCH_HOST_HTTP_PORT}:9200\"\n            - \"${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300\"\n          depends_on:\n            - php-fpm\n          networks:\n            - frontend\n            - backend\n```\n\nUnder the environment, add the following:\n\n``` yaml\n    - xpack.security.enabled=false\n```\n\nSo it should look like this:\n\n``` yaml\n    environment:\n      - cluster.name=laradock-cluster\n      - bootstrap.memory_lock=true\n      - xpack.security.enabled=false\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n```\n\nThis disables the need to authenticate when connecting to Elasticsearch.\n\nYou can choose to enable it later so that not just anyone can have access to the Elasticsearch index. But to avoid problems with authentication while we’re developing, we’ll disable it for now.\n\n\n### Bringing up the container\n\nNavigate inside the `laradock` directory and bring up the container with Docker Compose:\n\n```\n    docker-compose up -d apache2 php-fpm elasticsearch workspace\n```\n\nThis will install and setup Apache, PHP, and Elasticsearch on the container. There’s also a workspace so you can log in to the container. This allows you to install packages using [Composer](https://getcomposer.org/).\n\nThis process should take a while depending on your internet connection.\n\n### Troubleshooting Laradock issues\n\nIf you’re having problems completing this step, it is most likely a port issue. That is, another process is already using the port that the containers wants to use.\n\nThe quickest way to deal with a port issue is to change the default ports that Apache and Elasticsearch are using (or whatever port is already occupied by another process). Open the `.env` file inside the `laradock` folder and make the following changes:\n\nFor Apache, replace the values for either `APACHE_HOST_HTTPS_PORT` or `APACHE_PHP_UPSTREAM_PORT` (or both):\n\n```\n    # APACHE_HOST_HTTPS_PORT=443 \n    APACHE_HOST_HTTPS_PORT=445 \n    \n    # APACHE_PHP_UPSTREAM_PORT=9000\n    APACHE_PHP_UPSTREAM_PORT=9001\n```\n\nFor Elasticsearch:\n\n```\n    # ELASTICSEARCH_HOST_HTTP_PORT=9200\n    ELASTICSEARCH_HOST_HTTP_PORT=9211\n    \n    # ELASTICSEARCH_HOST_TRANSPORT_PORT=9300\n    ELASTICSEARCH_HOST_TRANSPORT_PORT=9311\n```\n\nIt’s a good practice to comment out the default config so you know which one’s you’re replacing.\n\nIf the issue you’re having isn’t a port issue, then you can visit [Laradock’s issues page](https://github.com/laradock/laradock/issues) and search for the issue you’re having.\n\n## Creating the server component\n\n### Installing the Dependencies\n\nOnce all the software is installed in the container, Docker will automatically bring it up. This allows you to login to the container. You can do that by executing the following command while inside the `laradock` directory:\n\n```\n    docker-compose exec --user=laradock workspace bash\n```\n\nOnce you’re inside, navigate inside the `ridesharer` folder and create a `composer.json` file:\n\n``` json\n    {\n      \"require\": {\n        \"alexpechkarev/geometry-library\": \"1.0\",\n        \"elasticsearch/elasticsearch\": \"^6.0\",\n        \"pusher/pusher-php-server\": \"^3.0\",\n        \"vlucas/phpdotenv\": \"^2.4\"\n      }\n    }\n```\n\nSave the file and execute `composer install`. This will install the following packages:\n\n- `geometry-library` - as mentioned earlier, this allows us to determine whether a specific coordinate lies within a set of coordinates. We will be using this library to determine if the directions returned by the Google Directions API covers the hiker’s pick-up location (origin).  \n- `elasticsearch` - this library allows us to query the Elasticsearch index so we can add, search, update, or delete documents.\n- `pusher-php-server` - this is the official Pusher PHP library for communicating with Pusher’s server. We will be using it to authenticate requests coming from the app.\n- `vlucas/phpdotenv` - for loading environment variables from `.env` files. The `.env` file is where we put the Elasticsearch, Google, and Pusher config. \n\n### Adding environment variables\n\nInside the `laradock-projects/ridesharer` directory, create a `.env` file and add the following:\n\n```\n    PUSHER_APP_ID=\"YOUR PUSHER APP ID\"\n    PUSHER_APP_KEY=\"YOUR PUSHER APP KEY\"\n    PUSHER_APP_SECRET=\"YOUR PUSHER APP SECRET\"\n    PUSHER_APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n    \n    GOOGLE_API_KEY=\"YOUR GOOGLE API KEY\"\n    \n    ELASTICSEARCH_HOST=\"elasticsearch\"\n```\n\nThis file is where you will put the keys and configuration options that we will be using for the server.\n\n### Loader file\n\nSince the majority of the files we will be creating will use either the configuration from the `.env` file or connect to the Elasticsearch server, we will be using this file to do those task for us. That way, we simply need to include this file on each of the files instead of repeating the same code.\n\nStart by importing the `Elasticsearch\\ClientBuilder` class to the current scope. This allows us to use the `ClientBuilder` class without having to refer to its namespace `Elasticsearch` everytime we need to use it:\n\n``` php\n    // laradock-projects/ridesharer/loader.php\n    use Elasticsearch\\ClientBuilder;\n```\n\nInclude the vendor autoload file. This allows us to include all the packages that we installed earlier:\n\n``` php\n    require 'vendor/autoload.php';\n```\n\nLoad the `.env` file:\n\n``` php\n    $dotenv = new Dotenv\\Dotenv(__DIR__);\n    $dotenv-\u003eload();\n    \n    $elasticsearch_host = getenv('ELASTICSEARCH_HOST'); // get the elasticsearch config\n```\n\nAfter that, connect to Elasticsearch:\n\n``` php\n    $hosts = [\n      [\n        'host' =\u003e $elasticsearch_host\n      ]\n    ];\n    \n    $client = ClientBuilder::create()-\u003esetHosts($hosts)-\u003ebuild();\n```\n\n### Setting the type mapping\n\nSince we will be working with coordinates in this app, we need to tell Elasticsearch which of the fields we will be using are coordinates. That way, we can query them later using functions which are specifically created to query geo-point data. This is done through a process called [Mapping](https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-point.html). \n\nStart by including the loader file:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/set-map.php\n    require 'loader.php';\n```\n\nNext, we can now proceed with specifying the actual map. Note that an error might occur (for example, the index has already been created, or one of the datatypes we specified isn’t recognized by Elasticsearch) so we’re wrapping everything in a `try..catch`. This allows us to “catch” the error and present it in a friendly manner:\n\n``` php\n    try {\n      $indexParams['index']  = 'places'; // the name of the index\n    \n      $myTypeMapping = [\n        '_source' =\u003e [\n          'enabled' =\u003e true\n        ],\n        'properties' =\u003e [\n          'from_coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'to_coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'current_coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'from_bounds.top_left.coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'from_bounds.bottom_right.coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'to_bounds.top_left.coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'to_bounds.bottom_right.coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ]\n        ]\n      ];\n    \n      // next: add code for adding the map\n      \n    } catch(\\Exception $e) {\n      echo 'err: ' . $e-\u003egetMessage();\n    }\n```\n\nBreaking down the code above, we first specify the name of the index we want to use. This shouldn’t already exist within Elasticsearch. If you’re coming from an RDBMS background, an index is synonymous to a database:\n\n``` php\n    $indexParams['index']  = 'places';\n```\n\nFor the actual type mapping, we only need to specify two properties: `_source` and `properties`. \n\n`_source` allows us to specify whether to enable returning of the [source](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-source-field.html) when getting documents. In Elasticsearch, the `_source` contains the fields (and their values) that we’ve indexed. \n\nIn a real-world app, you don’t really want this option to be enabled as it will affect the search performance. We’re only enabling it so that we don’t have to perform an additional step to fetch the source whenever where querying the index:\n\n``` php\n    '_source' =\u003e [\n      'enabled' =\u003e true\n    ],\n```\n\nThe other property that we need to specify is the `properties`. This accepts the array of field names whose data type we want to specify. Of course, we don’t need to specify the data type of all the fields we plan on using. This is because the data type is already implied in most cases (for example, if it’s wrapped in double or single quotes then it’s a string). But for special data types such as the [geo-point](https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-point.html), that’s the time where we need to explicitly specify it: \n\n``` php\n    'from_coords' =\u003e [\n      'type' =\u003e 'geo_point'\n    ],\n```\n\nIf the field that you want to work with is located deep within other fields, then you use the dot notation to specify the parent:\n\n``` php\n    'from_bounds.top_left.coords' =\u003e [\n      'type' =\u003e 'geo_point'\n    ]\n```\n\nLastly, add the code for creating the index with the map that we specified:\n\n``` php\n    $indexParams['body']['mappings']['location'] = $myTypeMapping; // specify the map\n    $response = $client-\u003eindices()-\u003ecreate($indexParams); // create the index\n    print_r($response); // print the response\n```\n\nAccess `http://ridesharer.loc/set-map.php` on your browser and it should print out a success response. \n\nNote that if you have another local development environment that’s currently running, it might be the one that takes priority instead of Laradock. So be sure to disable them if you can’t access the URL above.\n\n### Creating users\n\nWhen someone uses the app, they need to login first. If the username they used doesn’t already exist then it’s created.\n\nStart by getting the data passed from the app, in PHP this is commonly done by extracting the field name from the `$_POST` global variable. But in this case, we’re using the [PHP input stream](http://php.net/manual/en/wrappers.php.php) to read the raw `POST` data from the request body. This is because this is how Axios (the library that we’ll be using in the app later on) submits the data when sending requests to the server:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/create-user.php\n    require 'loader.php';\n    \n    $data = json_decode(file_get_contents(\"php://input\"), true);\n    $username = $data['username']; // get the value from the username field\n```\n\nConstruct the parameters to be supplied to Elasticsearch. This includes the `index` and the `type`. You can think of the `type` as the table or collection that you want to query. \n\n``` php\n    $params = [\n      'index' =\u003e 'places', // the index \n      'type' =\u003e 'users' // the table or collection\n    ];\n```\n\nSpecify the query. In this case, we’re telling Elasticsearch to look for an exact match for the username supplied:\n\n``` php\n    $params['body']['query']['match']['username'] = $username; // look for the username specified\n```\n\nExecute the search query, if it doesn’t return any “hits” then we create a new user using the username that was supplied:\n\n``` php\n    try {\n      $search_response = $client-\u003esearch($params); // execute the search query\n     \n      if($search_response['hits']['total'] == 0){ // if the username doesn't already exist\n        // create the user\n        $index_response = $client-\u003eindex([\n          'index' =\u003e 'places',\n          'type' =\u003e 'users',\n          'id' =\u003e $username,\n          'body' =\u003e [\n            'username' =\u003e $username\n          ]\n        ]);\n      }\n    \n      echo 'ok';\n      \n    } catch(\\Exception $e) {\n      echo 'err: ' . $e-\u003egetMessage();\n    }\n```\n\n### Saving routes\n\nWhenever a rider shares a ride, the following information needs to be stored in the index:\n\n- username\n- origin\n- destination\n- origin coordinates\n- destination coordinates\n- the steps from the origin to destination\n\nStart by getting the data submitted from the app:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/save-route.php\n    require 'loader.php';\n    \n    $google_api_key = getenv('GOOGLE_API_KEY');\n    \n    $data = json_decode(file_get_contents(\"php://input\"), true);\n    $start_location = $data['start_location']; // an array containing the coordinates (latitude and longitude) of the rider's origin\n    $end_location = $data['end_location']; // the coordinates of the rider's destination\n    \n    $username = $data['username']; // the rider's username\n    $from = $data['from']; // the descriptive name of the rider's origin\n    $to = $data['to']; // the descriptive name of the rider's destination\n    $id = generateRandomString(); // unique ID used for identifying the document\n```\n\nMake a request to the [Google Directions API](https://developers.google.com/maps/documentation/directions/intro) using the `file_get_contents()` function. The `directions` endpoint expects the `origin` and `destination` to be passed as a query parameter. These two contains the latitude and longitude value pairs (separated by a comma). We simply pass the values supplied from the app. \n\nThe `file_get_contents()` function returns a JSON string so we use the `json_decode()` function to convert it to an array. Specifying `true` as the second argument tells PHP to convert it to an array instead of an object (when the second argument is omitted or set to `false`):\n\n``` php\n    $steps_data = [];\n    \n    $contents = file_get_contents(\"https://maps.googleapis.com/maps/api/directions/json?origin={$start_location['latitude']},{$start_location['longitude']}\u0026destination={$end_location['latitude']},{$end_location['longitude']}\u0026key={$google_api_key}\");\n    \n    $directions_data = json_decode($contents, true);\n```\n\nLoop through the array of steps and construct an array (`$steps_data`) that only contains the data that we want to store. In this case, it’s only the latitude and longitude values for each of the steps:\n\n``` php\n    if(!empty($directions_data['routes'])){\n      $steps = $directions_data['routes'][0]['legs'][0]['steps'];\n      foreach($steps as $step){\n        $steps_data[] = [\n          'lat' =\u003e $step['start_location']['lat'],\n          'lng' =\u003e $step['start_location']['lng']\n        ];\n    \n        $steps_data[] = [\n          'lat' =\u003e $step['end_location']['lat'],\n          'lng' =\u003e $step['end_location']['lng']\n        ];\n      }\n    }\n```\n\nNext, construct the data that we’ll save to the Elasticsearch index:\n\n``` php\n    if(!empty($steps_data)){\n    \n      $params = [\n        'index' =\u003e 'places',\n        'type' =\u003e 'location',\n        'id' =\u003e $id,\n        'body' =\u003e [\n          'username' =\u003e $username, \n          'from' =\u003e $from, \n          'to' =\u003e $to,\n          'from_coords' =\u003e [ // geo-point values needs to have lat and lon\n            'lat' =\u003e $start_location['latitude'],\n            'lon' =\u003e $start_location['longitude'],\n          ],\n          'current_coords' =\u003e [\n            'lat' =\u003e $start_location['latitude'],\n            'lon' =\u003e $start_location['longitude'],\n          ],\n          'to_coords' =\u003e [\n            'lat' =\u003e $end_location['latitude'],\n            'lon' =\u003e $end_location['longitude'],\n          ],\n          'steps' =\u003e $steps_data\n        ]\n      ];\n    \n    }\n```\n\nMake the request to index the data:\n\n``` php\n    try{\n      $response = $client-\u003eindex($params);\n      $response_data = json_encode([\n        'id' =\u003e $id\n      ]);\n            \n      echo $response_data;\n    }catch(\\Exception $e){\n      echo 'err: ' . $e-\u003egetMessage();\n    }\n```\n\nHere’s the function for generating a unique ID:\n\n``` php\n    function generateRandomString($length = 10){\n      $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      $charactersLength = strlen($characters);\n      $randomString = '';\n      for($i = 0; $i \u003c $length; $i++){\n        $randomString .= $characters[rand(0, $charactersLength - 1)];\n      }\n      return $randomString;\n    }\n```\n\n### Searching routes\n\nWhen a hiker searches for a ride, a request is made to this file. This expects the origin and destination of the hiker to be passed in the request body. That way, we can make a request to the Google Directions API with those data:\n\n``` php\n    \u003c?php \n    // /laradock-projects/ridesharer/search-routes.php\n    require 'loader.php';\n    \n    $google_api_key = getenv('GOOGLE_API_KEY');\n    \n    $params['index'] = 'places';\n    $params['type'] = 'location';\n    \n    $data = json_decode(file_get_contents(\"php://input\"), true);\n    \n    // the hiker's origin coordinates\n    $hiker_origin_lat = $data['origin']['latitude'];\n    $hiker_origin_lon = $data['origin']['longitude'];\n    \n    // the hiker's destination coordinates\n    $hiker_dest_lat = $data['dest']['latitude'];\n    $hiker_dest_lon = $data['dest']['longitude'];\n    \n    $hiker_directions_contents = file_get_contents(\"https://maps.googleapis.com/maps/api/directions/json?origin={$hiker_origin_lat},{$hiker_origin_lon}\u0026destination={$hiker_dest_lat},{$hiker_dest_lon}\u0026key={$google_api_key}\");\n    \n    $hiker_directions_data = json_decode($hiker_directions_contents, true);\n```\n\nStore the hiker’s steps into an array. We will be using it later to determine whether the hiker and the rider have the same route. Note that we’re only storing the `start_location` for the first step. This is because the `start_location` of all the succeeding steps overlaps with the `end_location` of the step that follows:\n\n``` php\n    $hikers_steps = [];\n    \n    $steps = $hiker_directions_data['routes'][0]['legs'][0]['steps']; // extract the steps\n    foreach($steps as $index =\u003e $s){\n      if($index == 0){ \n        $hikers_steps[] = [\n          'lat' =\u003e $s['start_location']['lat'],\n          'lng' =\u003e $s['start_location']['lng']\n        ];  \n      }\n    \n      $hikers_steps[] = [\n        'lat' =\u003e $s['end_location']['lat'],\n        'lng' =\u003e $s['end_location']['lng']\n      ];\n    }\n```\n\nNext, we construct the query to be sent to Elasticsearch. Here we use a `d``ecay` function called `gauss` to assign a score to each of the routes that are currently saved in the index. This score is then used to determine the order in which the results are returned, or whether they will be returned at all. \n\nSpecifying the `min_score` means all the documents which don’t meet the supplied score won’t be returned in the response. In the code below, we’re querying for documents which are up to five kilometers away from the origin. But once the documents have a `current_coords` which are not within 100 meters, the score assigned to them is halved:\n\n``` php\n    $params['body'] = [\n      \"min_score\" =\u003e 0.5, // the minimum score for the function to return the record\n      'query' =\u003e [\n        'function_score' =\u003e [\n          'gauss' =\u003e [\n            'current_coords' =\u003e [\n              \"origin\" =\u003e [\"lat\" =\u003e $hiker_origin_lat, \"lon\" =\u003e $hiker_origin_lon], // where to begin the search\n              \"offset\" =\u003e \"100m\", // only select documents that are up to 100 meters away from the origin\n              \"scale\" =\u003e \"5km\" // (offset + scale = 5,100 meters) any document which are not within the 100 meter offset but are still within 5,100 meters gets a score of 0.5\n            ]\n          ]\n        ]\n      ]\n    ];\n```\n\nIf you want to know more about how the function works, check this article out: [The Closer, The Better](https://www.elastic.co/guide/en/elasticsearch/guide/current/decay-functions.html).\n\nNext, construct the coordinates for the hiker’s origin and destination. We will use this to compute the distance between the hiker’s origin and destination, as well as the hiker’s origin and the rider’s destination. We will need these values later on to determine whether the routes returned from the query matches the hiker’s route:\n\n``` php\n    $hikers_origin = ['lat' =\u003e $hiker_origin_lat, 'lng' =\u003e $hiker_origin_lon];\n    $hikers_dest = ['lat' =\u003e $hiker_dest_lat, 'lng' =\u003e $hiker_dest_lon];\n```\n\nSend the request and loop through all the results:\n\n``` php\n    try {\n      $response = $client-\u003esearch($params);\n      \n      if(!empty($response['hits']) \u0026\u0026 $response['hits']['total'] \u003e 0){\n        foreach($response['hits']['hits'] as $hit){\n          \n          $source = $hit['_source'];\n          $riders_steps = $source['steps'];\n    \n          $current_coords = $source['current_coords'];\n          $to_coords = $source['to_coords'];\n    \n          $riders_origin = [\n            'lat' =\u003e $current_coords['lat'],\n            'lng' =\u003e $current_coords['lon']\n          ];\n    \n          $riders_dest = [\n            'lat' =\u003e $to_coords['lat'],\n            'lng' =\u003e $to_coords['lon']\n          ];\n          \n          // check whether the rider's route matches the hiker's route\n          if(isCoordsOnPath($hiker_origin_lat, $hiker_origin_lon, $riders_steps) \u0026\u0026 canDropoff($hikers_origin, $hikers_dest, $riders_origin, $riders_dest, $hikers_steps, $riders_steps)){\n            // the rider's username, origin and destination\n            $rider_details = [\n              'username' =\u003e $source['username'],\n              'from' =\u003e $source['from'],\n              'to' =\u003e $source['to']\n            ];\n    \n            echo json_encode($rider_details); // respond with the first match       \n            break; // break out from the loop\n          }\n        }\n      }\n    \n    } catch(\\Exception $e) {\n      echo 'err: ' . $e-\u003egetMessage();\n    }\n```\n\nThe `isCoordsOnPath()` function uses the `isLocationOnPath()` function from the `php-geometry` library. This accepts the following arguments:\n\n\n- An array containing the latitude and longitude of the coordinate we want to check.\n- An array of arrays containing the latitude and longitude of each of the steps.\n- The tolerance value in degrees. This is useful if the place specified isn’t near a road. Here, I’ve used a high value to cover for most cases. As long as the hiker’s origin is somewhat near to a road, then it should be fine.\n\n``` php\n    function isCoordsOnPath($lat, $lon, $path) {\n      $response = \\GeometryLibrary\\PolyUtil::isLocationOnPath(['lat' =\u003e $lat, 'lng' =\u003e $lon], $path, 350); \n      return $response;\n    }\n```\n\nThe `canDropoff()` function determines whether the rider and the hiker are both treading the same route. This accepts the following arguments:\n\n\n- `$hikers_origin` - the coordinates of the hiker’s origin.\n- `$hikers_dest` - the coordinates of the hiker’s destination.\n- `$riders_origin` - the coordinates of the rider’s origin.\n- `$riders_destination` - the coordinates of the rider’s destination.\n- `$hikers_steps` - an array containing the hiker’s steps.\n- `$riders_steps` - an array containing the rider’s steps.\n\nThe way this function works is that it first determines who leaves the vehicle last: the rider or the hiker. The app works with the assumption that the rider has to ride the vehicle first, and that they should pick up the hiker before they get to leave the vehicle. Otherwise, the hiker won’t be able to track where the vehicle is. This means that there are only two possible scenarios when it comes to the order of leaving the vehicle:\n\n- rider rides vehicle → rider picks up hiker → rider leaves the vehicle → hiker leaves the vehicle\n- rider rides vehicle → rider picks up hiker → hiker leaves the vehicle → rider leaves the vehicle\n\nThe tracking starts once the rider picks up the hiker. So we measure the distance between the hiker’s origin and their destination, as well as the hiker’s origin and the rider’s destination. This then allows us to determine who will leave the vehicle last by comparing the distance between the two.\n\nOnce we know the order in which the two users leaves the vehicle, we can now use the `isCoordsOnPath()` function to determine if the destination of the person who will leave the vehicle first is within the route of the person who will leave the vehicle last:\n\n``` php\n    function canDropoff($hikers_origin, $hikers_dest, $riders_origin, $riders_dest, $hikers_steps, $riders_steps) {\n      // get the distance from the hiker's origin to the hiker's destination\n      $hiker_origin_to_hiker_dest = \\GeometryLibrary\\SphericalUtil::computeDistanceBetween($hikers_origin, $hikers_dest);\n      \n      // get the distance from the hiker's origin to the rider's destination\n      $hiker_origin_to_rider_dest = \\GeometryLibrary\\SphericalUtil::computeDistanceBetween($hikers_origin, $riders_dest);\n    \n      $is_on_path = false; // whether the rider and hiker is on the same path or not\n    \n      if($hiker_origin_to_hiker_dest \u003e $hiker_origin_to_rider_dest){ // hiker leaves the vehicle last\n        // if the rider's destination is within the routes covered by the hiker\n        $is_on_path = isCoordsOnPath($riders_dest['lat'], $riders_dest['lng'], $hikers_steps); \n    \n      }else if($hiker_origin_to_rider_dest \u003e $hiker_origin_to_hiker_dest){ // rider leaves the vehicle last\n        // if hiker's destination is within the routes covered by the rider\n        $is_on_path = isCoordsOnPath($hikers_dest['lat'], $hikers_dest['lng'], $riders_steps);\n    \n      }else{ // if the rider and hiker are both going the same place\n        // check whether either of the conditions above returns true\n        $is_on_path = isCoordsOnPath($hikers_dest['lat'], $hikers_dest['lng'], $riders_steps) || isCoordsOnPath($riders_dest['lat'], $riders_dest['lng'], $hikers_steps);\n      }\n    \n      return $is_on_path;\n    \n    }\n```\n\n### Update route\n\nEvery time the location changes, the app makes a request to this file. The app sends the unique ID that the server responded with when the route was created. This allows us to fetch the existing document from the index. We then update the source with the new coordinates:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/update-route.php\n    require 'loader.php';\n    \n    $data = json_decode(file_get_contents(\"php://input\"), true); // get the request body and convert it to an array\n    \n    $params['index'] = 'places';\n    $params['type'] = 'location';\n    $params['id'] = $data['id']; // the id submitted from the app\n    \n    // the latitude and longitude values submitted from the app\n    $lat = $data['lat']; \n    $lon = $data['lon']; \n    \n    $result = $client-\u003eget($params); // get the document based on the id used as the parameter\n    $result['_source']['current_coords'] = [ // update the current coordinates with the latitude and longitude values submitted from the app\n      'lat' =\u003e $lat,\n      'lon' =\u003e $lon\n    ];\n    \n    $params['body']['doc'] = $result['_source']; // replace the source with the updated data\n    $result = $client-\u003eupdate($params); // update the document\n    \n    echo json_encode($result);\n```\n\n### Delete route\n\nOnce the rider accepts a request from the hiker, the app makes a request to this file so that the existing route will be deleted. We need to do this because we don’t want other hikers to make another request to the same rider (remember the 1:1 ratio of the rider to hiker?). Also, note that we’re using the rider’s `username` to query the index. We haven’t really put any security measures to only allow a username to be used on a single app instance, but this tells us that a user can only save one route at a time:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/delete-route.php\n    require 'loader.php';\n    \n    $data = json_decode(file_get_contents(\"php://input\"), true);\n    \n    $params['index'] = 'places';\n    $params['type'] = 'location';\n    $params['body']['query']['match']['username'] = $data['username']; // find the rider's username\n     \n    $result = $client-\u003esearch($params); // search the index\n    $id = $result['hits']['hits'][0]['_id']; // only get the first result\n    \n    unset($params['body']);\n    $params['id'] = $id;\n    $result = $client-\u003edelete($params);\n    \n    echo json_encode($result);\n```\n\n### Delete index\n\nDeleting the index (`delete-index.php` ) isn’t really required for the app to work. Though it will be useful when testing the app. This allows you to reset the Elasticsearch index so you can control the results that are returned when you search for riders:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/delete-index.php\n    require 'loader.php';\n    \n    try {\n      $params = ['index' =\u003e 'places'];\n      $response = $client-\u003eindices()-\u003edelete($params);\n      print_r($response);\n    } catch(\\Exception $e) {\n      echo 'err: ' . $e-\u003egetMessage();\n    }\n```\n\n### Authenticating requests\n\nBelow is the code for authenticating requests so that Pusher will allow the user to use the Channels service. This requires the keys from the **App keys** tab earlier. Be sure to replace the placeholders with your keys:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/pusher-auth.php\n    require 'vendor/autoload.php';\n    \n    // load the .env file located on the same directory as this file\n    $dotenv = new Dotenv\\Dotenv(__DIR__); \n    $dotenv-\u003eload();\n    \n    // get the individual config from the .env file. This should be the same as the one's you have on the .env file\n    $app_id = getenv('PUSHER_APP_ID');\n    $app_key = getenv('PUSHER_APP_KEY');\n    $app_secret = getenv('PUSHER_APP_SECRET');\n    $app_cluster = getenv('PUSHER_APP_CLUSTER');\n```\n\nSet the content type to `application/json` as this is what the Pusher client expects in the client side:\n\n``` php\n    header('Content-Type: application/json');\n```\n\nConnect to the Pusher app using the keys and options. The options include the cluster where the app is running from, and whether to encrypt the connection or not:\n\n``` php\n    $options = ['cluster' =\u003e $app_cluster, 'encrypted' =\u003e true]; \n    $pusher = new Pusher\\Pusher($app_key, $app_secret, $app_id, $options);\n```\n\nLastly, get the data sent by the Pusher client and use it as an argument for the `socket_auth()` method. This method returns the success token required by the Pusher client:\n\n``` php\n    $channel = $_POST['channel_name'];\n    $socket_id = $_POST['socket_id'];\n    \n    echo $pusher-\u003esocket_auth($channel, $socket_id);\n```\n\nAs you can see, we didn’t really apply any form of authentication in the code above. In a real-world scenario, you want to have some form of authentication before returning the success token. This can be a unique ID that’s only assigned to the users of your app, it can also be a key which is then decrypted to come up with a token used for authenticating the request. This unique ID or key is sent from the client side so the server can verify it. \n\nYou can test if the server is working by accessing any of the files you created earlier.\n\n## Exposing the server with ngrok\n\nSo that you can access the virtual host `http://ridesharer.loc` from the app, you need to setup ngrok. This allows you to expose your virtual host to the internet.\n\n1. [Sign up for an ngrok account](https://dashboard.ngrok.com/user/signup). \n2. Go to your [dashboard](https://dashboard.ngrok.com/get-started) and download ngrok.\n3. Unzip the archive.\n4. Authenticate ngrok using your auth token:\n\n``` \n    .\\ngrok authtoken YOUR_AUTH_TOKEN\n```\n\n5. Expose the virtual host:\n\n```\n    ngrok http -host-header=ridesharer.loc 80\n```\n\nThis will give you an output similar to the following:\n\n![carpooling-react-native-ngrok-setup](//images.ctfassets.net/1es3ne0caaid/44tTdWBLCMOsOWYYC6qaGa/2c1156e0bb1a4b588a83659e85f2b34b/carpooling-react-native-ngrok-setup.png)\n\nCopy the HTTPS URL as that’s what we’re going to use in the app later on.\n\n## Conclusion\n\nThat’s it! In this tutorial, we’ve set up the server to be used by the app. You can find the code used in this tutorial on this [Github repo](https://github.com/anchetaWern/Ridesharer). In the [second part](https://pusher.com/tutorials/carpooling-react-native-part-2) of this series, we’ll be covering how to create the frontend of the app.","metaTitle":"Create a carpooling app with React Native - Part 1","metaDescription":"Build a carpooling app using React Native, Docker and Google SDKs and APIs. In the first part, create the backend server using Docker and PHP."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"76Wlp2erKwSOoMUgkikEa0","type":"Entry","createdAt":"2018-06-07T16:31:20.083Z","updatedAt":"2018-06-07T16:31:20.083Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a comments app with Ruby on Rails","url":"comments-app-ruby-rails","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/pusher-action-cable","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6S5luSjtlYk4i8eM8AyO4I","type":"Entry","createdAt":"2018-02-02T13:39:48.331Z","updatedAt":"2018-02-12T14:41:19.307Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby","url":"ruby","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"hPWAADkjVmomS68E6seqQ","type":"Entry","createdAt":"2018-02-12T14:48:52.613Z","updatedAt":"2018-02-12T14:48:52.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby on Rails","url":"ruby-on-rails","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-06-07","description":"This short tutorial demonstrates how to integrate realtime updates into a Ruby on Rails application. You will create a simple comments interface. Users will be able to add comments, and see comments appear for all users instantly.","prerequisite":"You will need Ruby and Rails installed on your machine.","content":"You see the way the web world is set up now yeah? No one wants to have to reload their pages anymore to get updates as to what is going one with their applications.  You probably would have experienced realtime features like this (seeing realtime the number of likes and re-tweets on a particular tweet on twitter)! Imagine not having to swipe down again to see a new tweet! Having such interesting features are some of the advantages of having realtime functionality on your applications.\n\n## What we’ll build \n\nIn this article, we will build a realtime commenting Ruby on Rails application using Pusher. This application has a simple interface. The user loads a page and can see existing comments on the page. The user can also add comments and see as comments are being made in realtime. Because this article is primarily to show how to add realtime functionality to your application, less emphasis will be placed on Rails syntax and more on making your application realtime\n\n\n## Requirements\n\nFor you to successfully follow through this article, you need to have the following set up:\n\n- Ruby installed on your machine\n- Rails installed on your machine\n\nTo confirm your installation, run the following :\n\n```\n    ruby -v\n    rails --version\n```\n\nIf you get version numbers as result then it means you’re good to go!\n\n## Building the application\n\nTo get started, generate a new project using rails by running the command : \n\n```\n    rails new pusher-realtime-ruby\n```\n\nThis gives us a starter project with this structure to work with. The starter project has the following structure.\n\n![ruby-rails-comments-app-directories](//images.ctfassets.net/1es3ne0caaid/2HqJgFjR4Ai2M6ssiIq40c/b0e43c3cdce00d0a2e686849356f6441/ruby-rails-comments-app-directories.png)\n\n## Creating controller and routes\n\nFor this application, we have two basic routes :\n\n- `/` - displays the homepage with an image and existing comments\n- `/comment/store` -  this route handles the logic for when a new comment is made on the page\n\nCreate a new controller by running :\n\n```\n    rails generate controller Comment store\n```\n\nThis creates a `Comment` controller with an action called `store` .\n\n### Specifying our routes\n\nNow, we need to define the routes we mentioned earlier so the rails server can know to handle requests made by users. To do this, edit the `config/routes.rb` file:\n\n``` ruby\n    // config/routes.rb\n    \n    Rails.application.routes.draw do\n      post 'comment/store'\n      root 'welcome#index'\n    end\n```\n\nThe `comment/store` route accepts a post request from the user and the root of the application is set to the `welcome#index` view.\n\n\u003e We will look at the `welcome#index` view in depth later on in the article\n\n### Adding controller logic\n\nNow that the `comment/store` route has been defined, the next thing to do is to edit the controller logic to do update the comments. The controller looks like this:\n\n``` ruby\n    # app/controllers/comment_controller.rb\n    class CommentController \u003c ApplicationController\n      def store\n        render plain: params[:comment].inspect\n      end\n    end\n```\n\nAt the moment, this just renders the new comment on  a new page. The intended feature is to store the comments in the database and update the comments in realtime. \n\n### Creating a database\n\nTo store comments in a database, a database driver is needed. With Ruby on Rails, `SQLite` is used as the default database driver, and for simplicity, we are going to continue with that.\n\nTo create your database, run the command:\n\n```\n    rake db:create\n```\n\nThis creates the databases for the application in the `db/` directory.\n\n### Creating the Comment model and running migrations\n\nTo populate the database, there need to be tables. Rails is an MVC based Framework and developers can create models to represent entities and structures in their database. To do this, run the command below:\n\n```\n     rails generate model Comment comment:text\n```\n\nThis creates a `Comment` model with a single property `comment`. Running this command will also automatically generate a migration file for the model at `db/migrate/{timestamp}_create_comments.rb`. Let’s take a look at the migration file:\n\n``` ruby\n    class CreateComments \u003c ActiveRecord::Migration[5.1]\n      def change\n        create_table :comments do |t|\n          t.text :comment\n          t.timestamps\n        end\n      end\n    end\n```\n\nWe can see from above that the `comment` field is also created. Now that we are satisfied with the migration, you can use a command to run it:\n\n```\n    rails db:migrate\n```\n\nOnce the run is complete, you get a result that looks like this:\n\n```\n    rails db:migrate\n    == 20180408165733 CreateComments: migrating ===================================\n    -- create_table(:comments)\n       -\u003e 0.0022s\n    == 20180408165733 CreateComments: migrated (0.0023s) ==========================\n```\n\nThis means the `comments` table has successfully been created in the database.\n\n### Storing new comments\n\nNow, let’s go back to the comment controller. To save the comments in the database, change the `store`  action to look like this:\n\n``` ruby\n    class CommentController \u003c ApplicationController\n      def store\n        @comment = Comment.new(comment_params)\n        @comment.save\n        redirect_to '/'\n      end\n    \n      private\n        def comment_params\n          params.require(:comment).permit(:comment)\n        end\n    end\n```\n\nThis creates a new comment, saves it in the database and then reloads the home page to the user showing the existing comments\n\nCreating the HomePage view\nNow, let’s take a quick look at the `welcome#index` view.  To display the view, there is a welcome controller created, with an action called `index`.\n\n```\n    rails generate controller Welcome index\n```\n\nEdit the created controller to look like this:\n\n``` ruby\n    # app/controllers/welcome_controller.rb\n    class WelcomeController \u003c ApplicationController\n      def index\n        @comments = Comment.all\n      end\n    end\n```\n\nThis fetches all the comments from the database and then passes it to the view being generated.\n\nThe index view should be edited to look like this:\n\n``` html\n    # app/views/welcome/index.html.rb\n    \n    \u003ch1 style=\"text-align:center\"\u003eReal-time Comments!\u003c/h1\u003e\n    \u003cdiv class=\"wrapper\"\u003e\n        \u003cimg src=\"https://image4.owler.com/logo/pusher_owler_20160228_200254_large.png\" height=\"150\"alt=\"Pusher\" /\u003e\n        \u003cdiv class=\"top\"\u003e\n            \u003c%= form_with scope: :comment, url: '/comment/store', local: true do |form| %\u003e\n            \u003cdiv class=\"form-group\"\u003e\n                \u003c%= form.label :comment %\u003e\n                \u003c%= form.text_field :comment %\u003e\n                \u003c%= form.submit %\u003e\n            \u003c/div\u003e\n            \n            \u003c% end %\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"bottom\" id=\"comment_section\"\u003e\n            \u003ch2\u003eComments\u003c/h2\u003e\n            \u003c% @comments.each do |comment| %\u003e\n                \u003cp\u003e\u003c%= comment.comment %\u003e\u003c/p\u003e\n            \u003c% end %\u003e\n        \u003c/div\u003e  \n    \u003c/div\u003e\n```    \n\nThe view displays an image and a form where users can comment on the image. When the submit button is clicked, the `/comment/store` route handles the request. In the same view, we also have a listing of all the existing comments that are saved in the database.\n\nTo add some minimal styling to the page, edit the `app/assets/stylesheets/welcome.scss` file to look like this:\n\n``` scss\n    // app/assets/stylesheets/welcome.scss\n    .wrapper{\n        display: flex;\n        justify-content: space-around;\n        flex-direction: column;\n        align-items: center;\n    }\n    \n    .top{\n        display: flex;\n        justify-content: space-around;\n    }\n    \n    .bottom{\n        display: flex;\n        justify-content: center;\n        flex-direction: column;\n    }\n    \n    input[type=submit]{\n       background-color: rgb(27, 96, 160);\n       border : 0px;\n       border-radius: 10px;\n       color: white;\n       height: 40px;\n       margin-left: 20px;\n    }\n    \n    input[type=text]{\n        height: 40px;\n        border-radius: 10px;\n        border: 1px solid rgb(155, 147, 147);\n    }\n    \n    label{\n        height: 40px;\n        margin-right: 10px;\n    }\n    h2{\n        margin-bottom : 0px;\n    }\n```    \n\nTo see the application at work, start the rails server using the command:\n\n```\n    rails server --binding=127.0.0.1\n```\n\nThis starts up a rails server with the port shown to you - in this case `127.0.0.1:3000` as specified with the `--binding` flag. When you visit the application, this is what you see:\n\n![ruby-rails-comments-welcome-view](//images.ctfassets.net/1es3ne0caaid/5LGxFRMZQQqO0eq0EikeSe/63b9fb2a56182312c457a5307e6de275/ruby-rails-comments-welcome-view.png)\n\nWhat we want are the comments to be updated in realtime for all users as changes are being made. Let’s take a look at how to do this.\n\n## Adding realtime functionality using Pusher\n\nLet’s see how to add realtime functionality using [Pusher](https://pusher.com). Pusher allows to seamlessly add realtime features to your applications without worrying about infrastructure.\n\nTo get started, create a [developer account](https://pusher.com/signup). Once that is done, [create your application](https://dashboard.pusher.com/#wizard-modal) and obtain your application keys. \n\nTo use Pusher with your rails application, you need to do a couple of things.\n\n### Install Pusher via Ruby Gems\n\nAdd pusher to your `Gemfile` \n\n```\n    # Gemfile\n    [...]\n    \n    gem 'pusher'\n    \n    [...]\n```\n\nAnd then install the new gem:\n\n```\n    bundle install\n```\n\nTo confirm your installation run:\n\n```\n    bundle info pusher\n```\n\nYou should get a result like this:\n\n``` ruby\n    $ bundle info pusher\n    * pusher (1.3.1)\n            Summary: Pusher API client\n            Homepage: http://github.com/pusher/pusher-http-ruby\n            Path: /home/captog/.rvm/gems/ruby-2.4.1/gems/pusher-1.3.1\n```\n\nImport the Pusher package\n\nCreate the  `config/initializers/pusher.rb` file and edit it to look like this:\n\n``` ruby\n    # config/initializers/pusher.rb\n    require 'pusher'\n    \n    Pusher.app_id = 'PUSHER_APP_ID'\n    Pusher.key = 'PUSHER_APP_KEY'\n    Pusher.secret = 'PUSHER_APP_SECRET'\n    Pusher.cluster = 'PUSHER_APP_CLUSTER'\n    Pusher.logger = Rails.logger\n    Pusher.encrypted = true\n```\n\nThe `PUSHER_APP_ID`, `PUSHER_APP_KEY`, `PUSHER_APP_SECRET` and `PUSHER_APP_CLUSTER`  can all be obtained from the [dashboard](https://dashboard.pusher.com) of your application.\n\n### Trigger events from controller\n\nEarlier on in the article, the Comment controller saved comments to the database and then rendered the homepage. Now, let’s tweak it a bit to trigger a new event. The comment controller will look like this:\n\n``` ruby\n    # app/controllers/comment_controller.rb\n    class CommentController \u003c ApplicationController\n      def store\n        @comment = Comment.new(comment_params)\n        @comment.save\n          # broadcasting comments using pusher\n          Pusher.trigger('comment-channel','new-comment', {\n            comment: @comment.comment\n          })\n        redirect_to '/'\n      end\n    \n      private\n        def comment_params\n          params.require(:comment).permit(:comment)\n        end\n    end\n```\n\nAfter the comment is saved, then a new event named `new-comment` is triggered in the `comment-channel`. From the Pusher dashboard, you can see when events are being triggered for debugging purpose. \n\n![ruby-rails-comments-debug-console](//images.ctfassets.net/1es3ne0caaid/ciMNcN7ybmuw6AG6scyay/9512d8a07979a34d3c33649bf18e8966/ruby-rails-comments-debug-console.png)\n\n### Displaying comments on the client side\n\nSo far, we have seen how to trigger events from the server. For the users to get the realtime experience, they need to be able to see the new comments pop up on their pages. To integrate Pusher to the front end of the application, you need to do the following:\n\nFirst, include the Pusher script in the header of the application in the `app/views/layouts/application.html.erb`\n\n``` html\n    # app/views/layouts/application.html.erb\n    [...]\n      \u003chead\u003e\n        [...]\n        \n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n       \n         [...]\n      \u003c/head\u003e\n    [...]\n```\n\nNext thing to do is to create a Pusher Client in the application header:\n\n``` javascript\n    # app/views/layouts/application.html.erb\n    [...]\n      \u003chead\u003e\n        [...]\n        // add pusher script\n        \u003cscript\u003e\n          var pusher = new Pusher('PUSHER_APP_KEY', {\n          cluster: 'eu',\n          encrypted: true\n        });\n        \u003c/script\u003e\n       \n         [...]\n      \u003c/head\u003e\n    [...]\n```\n\nFinally, subscribe to the `comment-channel` and listen for `new-comment` events. You can do this in the `welcome#index` view of the application. Tweak the view to look like this:\n\n``` javascript\n    # app/views/welcome/index.html.erb\n      [...]\n        \u003cdiv class=\"bottom\" id=\"comment_section\"\u003e\n            \u003ch2\u003eComments\u003c/h2\u003e\n            \u003c% @comments.each do |comment| %\u003e\n                \u003cp\u003e\u003c%= comment.comment %\u003e\u003c/p\u003e\n            \u003c% end %\u003e\n        \u003c/div\u003e\n        \u003cscript\u003e\n            var channel = pusher.subscribe('comment-channel');\n            channel.bind('new-comment', function(data) {\n                let comment = data.comment;\n                var div = document.getElementById('comment_section');\n                div.innerHTML += `\u003cp\u003e ${comment} \u003c/p\u003e`;\n            });\n        \u003c/script\u003e  \n    \u003c/div\u003e\n```\n\nIn the above, we subscribe to the `comment-channel` and listen for a `new-comment` event. Once we get that, the new comment is appended to the comment section of the page.\n\nNow, when you visit the page again, you get this:\n\n![ruby-rails-comments-demo](//images.ctfassets.net/1es3ne0caaid/5r9TjJB1WoqW8OkuuceywW/0aec7673f3133aec8d13636e2b561c7f/ruby-rails-comments-demo.gif)\n\n## Conclusion\n\nIn this article, we looked at how to add Realtime functionality to your Rails application without any hassle. Feel free to implement this for any other use cases you deem fit. Here’s a link to the full [GitHub](https://github.com/christiannwamba/pusher-action-cable) repository if you’re interested.","metaTitle":"Build a comments app with Ruby on Rails","metaDescription":"Use Ruby on Rails to build a realtime comments app. Users can add comments and see each others' comments display immediately."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1O0mR8jCSUq26uSqS22GY8","type":"Entry","createdAt":"2018-06-06T10:50:48.230Z","updatedAt":"2018-06-06T10:50:48.230Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to add realtime notifications to your Node.js app","url":"realtime-notifications-nodejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/tattletale","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-06-06","description":"This short tutorial shows you how to quickly add instant notifications to a Node.js app. You will create a simple wiki, where users can edit and save posts. On save, all wiki users online will receive a notification.","prerequisite":"To follow this tutorial you will need Node 6+, npm 3.8.6+ and MongoDB 3.4+ installed on your machine.","content":"Realtime notifications are useful in social and other apps where all or some users need to be immediately aware when events they might be interested in occur. With the Web Notifications API (supported by most modern browsers), combined with Pusher’s realtime messaging model, it’s easy to notify your users almost instantly when something they should know about occurs. \n\nIn this tutorial, we’ll demonstrate how we can add realtime notifications to a Node.js app. The app we’ll build is similar to Wikipedia: it shows a list of posts that anyone can read and edit. Unlike Wikipedia, though, the app notifies everyone who’s anywhere in the app whenever you edit a page. (For this reason, we’ll call the app **Tattletale****.**) Here’s a preview of the app in action:\n\n![tattletale-demo](//images.ctfassets.net/1es3ne0caaid/614Nqsopmos0GYEeK4G2ES/450502843ed244c2ffd2f2382e4a2504/tattletale-demo.gif)\n\nYou can check out the source code of the completed application [on](https://github.com/shalvah/tattletale) [GitHub](https://github.com/shalvah/tattletale).\n\n## Requirements\n\n- Node.js (version 6.0.0 or higher) and NPM (version 3.8.6 or higher). Get Node [here](https://nodejs.org/en/download/) (NPM’s included).\n- MongoDB (version 3.4 or higher). Get it [here](https://docs.mongodb.com/manual/installation/).\n\n## Set up the project\n\nWe’ll be using the Express framework. First, install the Express app generator to quickly set up our app:\n\n```\n    npm install express-generator -g\n```\n\nNext, create a new Express app with the view engine set to Handlebars (hbs):\n\n```\n    express --view=hbs tattletale\n```\n\nThen we’ll install our dependencies, and add some more modules we’ll need:\n\n```\n    cd tattletale \u0026\u0026 npm install\n    npm install --save dotenv faker mongoose pusher\n```\nHere’s a breakdown of what each module is for.\n\n- **dotenv**: package for loading private configuration variables (namely our Pusher app credentials) from a `.env` file.\n- **faker**: module for generating fake data we can seed into our database.\n- **mongoose**: an ORM for MongoDB that maps our models (JavaScript objects) to MongoDB documents.\n- **pusher**: library for interacting with Pusher’s APIs.\n\nWe’ll store posts in a **posts** collection.  A single item in this collection will contain a title and a body. Let’s define our `Post` model. Create a directory called `models` , and create a file in it called `post.js` with he following content:\n\n``` javascript\n    let mongoose = require('mongoose');\n    \n    let Post = mongoose.model('Post', {\n        title: String,\n        body: String\n    });\n    \n    module.exports = Post;\n```\n\nNext up, let’s populate our database with some fake posts. Create a file called `seed.js` in the `bin` directory, with the following content:\n\n``` javascript\n    require('mongoose').connect('mongodb://localhost/tattletale');\n    \n    const faker = require('faker');\n    const Post = require('../models/post');\n    \n    // empty the collection first\n    Post.remove({})\n        .then(() =\u003e {\n            const posts = [];\n            for (let i = 0; i \u003c 5; i++) {\n                posts.push({\n                    title: faker.lorem.sentence(),\n                    body: faker.lorem.paragraph()\n                });\n            }\n            return Post.create(posts);\n        })\n        .then(() =\u003e {\n            process.exit();\n        })\n        .catch((e) =\u003e {\n            console.log(e);\n            process.exit(1);\n        });\n```\n\nRun the seed using `node` (remember to start your MongoDB server by running `mongod` first):\n\n```\n    node bin/seed.js\n```\n\n## Displaying posts\n\nLet’s implement our views and routes. Our home page will display a list of post titles. Clicking on a title will open the post for viewing. On the single post page, there’ll also be an **Edit** button that makes the post editable. Let’s get to work!\n\nFirst, we’ll add our MongoDB connection setup to our `app.js`, so the connection gets created when our app starts.  Above this line:\n\n``` javascript\n    module.exports = app;\n```\n\nAdd this:\n\n``` javascript\n    require('mongoose').connect('mongodb://localhost/tattletale');\n```\n\nNext, let’s write the route that retrieves all posts from the database and pass them to the view. We’ll also write the route that renders a single post. Replace the code in `routes/index.js` with this:\n\n``` javascript\n    const router = require('express').Router();\n    const Post = require('./../models/post');\n    \n    router.get('/', (req, res, next) =\u003e {\n        Post.find({}, {title: true}).exec((err, posts) =\u003e {\n            res.render('index', { posts });\n        });\n    });\n    \n    router.get('/posts/:id', (req, res, next) =\u003e {\n        Post.findOne({ _id: req.params.id }).exec((err, post) =\u003e {\n            res.render('post', { post });\n        });\n    });\n    \n    module.exports = router;\n```\n\nLet’s create our views.\n\nPut the following code in the `views/layout.hbs` file:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang='en'\u003e\n    \u003chead\u003e\n        \u003ctitle\u003e{{title}}\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\"\n          integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\"\n          crossorigin=\"anonymous\"\u003e\n        \u003c!-- jQuery for easy DOM manipulation --\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.3.0.min.js\"\n            integrity=\"sha256-RTQy8VOmNlT6b2PIRur37p6JEBZUE7o8wPgMvu18MC4=\"\n            crossorigin=\"anonymous\"\u003e\n        \u003c/script\u003e\n        \u003c!-- Axios for AJAX requests --\u003e\n        \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e\n    \u003c/head\u003e\n    \n    \u003cbody\u003e\n    \u003cdiv class=\"container\" style=\"padding: 50px;\"\u003e\n        {{{body}}}\n    \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```    \n\nAdd the following to the `views/index.hbs` file:\n\n``` html\n    \u003cdiv class=\"row\"\u003e\n        \u003ch2\u003ePosts\u003c/h2\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"list-group\"\u003e\n        {{#each posts }}\n            \u003ca href=\"/posts/{{ this._id }}\" class=\"list-group-item\"\u003e\n                {{ this.title }}\n            \u003c/a\u003e\n        {{/each}}\n    \u003c/div\u003e\n```\n\nPlace the code below in a file called `post.hbs` in the `views` directory:\n\n``` html\n    \u003cdiv class=\"jumbotron jumbotron-fluid\"\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003ch1\u003e{{ post.title }}\u003c/h1\u003e\n            \u003cp id=\"post-body\"\u003e{{ post.body }}\u003c/p\u003e\n            \u003cp id=\"actions\"\u003e\n                \u003ca class=\"btn btn-primary btn-lg\" href=\"#\" id=\"edit-btn\" role=\"button\"\u003eEdit\u003c/a\u003e\n            \u003c/p\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n## Editing posts\n\nOn the single post page, when a user clicks the **Edit** button, the post body should become editable, and **Save** and **Cancel** buttons should replace the **Edit** button.\n\nLet’s update our views and routes to support editing of posts. First, in our `routes/index.js`, the route for saving changes to the post:\n\n``` javascript\n    router.post('/posts/:id', (req, res, next) =\u003e {\n        Post.findByIdAndUpdate(req.params.id, {body: req.body.body}, (err, post) =\u003e {\n                res.send('');\n            });\n    });\n```\n\nAdd the following code to the single post view, `views/post.hbs`:\n\n``` javascript\n    \u003cscript\u003e\n        var postId = \"{{ post._id }}\";\n        var postContent;\n        var makeEditable = function (event) {\n            // capture the content of the post, then replace with editable textarea\n            postContent = $(\"#post-body\").html();\n            var editableText = $('\u003ctextarea id=\"editable-post-body\" class=\"form-control\" /\u003e');\n            editableText.val(postContent);\n            $(\"#post-body\").replaceWith(editableText);\n            editableText.focus();\n    \n            var saveBtn = $('\u003ca class=\"btn btn-primary btn-lg\" id=\"save-btn\" role=\"button\"\u003eSave\u003c/a\u003e');\n            var cancelBtn = $('\u003ca class=\"btn btn-info btn-lg\" id=\"cancel-btn\" role=\"button\"\u003eCancel\u003c/a\u003e');\n    \n            saveBtn.click(function () {\n                // capture the new post content and send to backend\n                postContent = $(\"#editable-post-body\").val();\n                axios.post(\"/posts/\" + postId, { body: postContent });\n                restoreBody();\n            });\n            cancelBtn.click(restoreBody);\n            // replace \"Edit\" button with \"Save\" and \"Cancel\"\n            $(\"#actions\").html([saveBtn, cancelBtn]);\n        };\n    \n        $('#edit-btn').click(makeEditable);\n    \n        var restoreBody = function() {\n            var postBody = $('\u003cp id=\"post-body\"\u003e\u003c/p\u003e');\n            postBody.html(postContent);\n            $(\"#editable-post-body\").replaceWith(postBody);\n            var editBtn = $('\u003ca class=\"btn btn-primary btn-lg\" href=\"#\" id=\"edit-btn\" role=\"button\"\u003eEdit\u003c/a\u003e');\n            editBtn.click(makeEditable);\n            $(\"#actions\").html(editBtn);\n        };\n    \n    \u003c/script\u003e\n```\n\nAt this point, the app is fairly functional. Start the app by running `npm start`. Visit the app on http://localhost:3000. You should be able to view all posts, view a single post, and edit it (see the GIF below).\n\n![tattletale-editing](//images.ctfassets.net/1es3ne0caaid/4c2E3zkVT2mU0ismUUIK4C/8ab08986db0269c375f142dec0ae964b/tattletale-editing.gif)\n\n## Adding notfications\n\nNow let’s add the realtime notification capability. \n\nThe first thing you’ll need to do is to [create a Pusher account](http://pusher.com/signup) if you don’t already have one (it’s free). Then create an app and obtain your app credentials from the app dashboard. Create a file named `.env` in the root of your project with the following content:\n\n```\n    PUSHER_APP_ID=YOUR_APP_ID\n    PUSHER_APP_KEY=YOUR_APP_KEY\n    PUSHER_APP_SECRET=YOUR_APP_SECRET\n    PUSHER_APP_CLUSTER=YOUR_APP_CLUSTER\n```\n\nReplace `YOUR_APP_ID`, `YOUR_APP_KEY`, `YOUR_APP_SECRET`, and `YOUR_APP_CLUSTER`with your Pusher app ID, app key, app secret and cluster respectively.\nThen add this line to the top of your `app.js`. This is to setup `dotenv` so it pulls environment variables from our `.env` file:\n\n``` javascript\n    require('dotenv').config();\n```\n\nModify your `routes/index.js` so the endpoint for editing a post looks like this:\n\n``` javascript\n    router.post('/posts/:id', (req, res, next) =\u003e {\n        Post.findByIdAndUpdate(req.params.id, {body: req.body.body}, (err, post) =\u003e {\n                let Pusher = require('pusher');\n                let pusher = new Pusher({\n                    appId: process.env.PUSHER_APP_ID,\n                    key: process.env.PUSHER_APP_KEY,\n                    secret: process.env.PUSHER_APP_SECRET,\n                    cluster: process.env.PUSHER_APP_CLUSTER\n                });\n    \n                pusher.trigger('notifications', 'post_updated', post, req.headers['x-socket-id']);\n                res.send('');\n            });\n    });\n```\n\nYou’ll notice we include a fourth parameter in our call to `pusher.trigger`. This is the **socket ID**, a unique identifier that Pusher assigns to each client connection (in this case, every new window where our app is opened). The socket ID is sent from the frontend via an `X-Socket-Id` header. By passing the socket ID to `pusher.trigger`, we are ensuring that the client with that ID will **not** get notified. This is what we want, since that window has already updated its UI. \n\nLet’s add the frontend code that responds to the events. We want to respond in two ways when a `post_updated` event comes in:\n\n- A browser notification should pop up. When the notification is clicked, it should open the edited post.\n- On the home page, an **Updated** badge should also appear next to the list item corresponding to the post that was updated.\n\nSince both pages in our app use this functionality, we’ll place it in within the body tags of `views/layout.hbs` :\n\n``` javascript\n    \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        var pusher = new Pusher('your-app-key', { cluster: 'your-app-cluster' });\n    \n        // retrieve the socket ID once we're connected\n        pusher.connection.bind('connected', function () {\n            // attach the socket ID to all outgoing Axios requests\n            axios.defaults.headers.common['X-Socket-Id'] = pusher.connection.socket_id;\n        });\n    \n        // request permission to display notifications, if we don't alreay have it\n        Notification.requestPermission();\n        pusher.subscribe('notifications')\n                .bind('post_updated', function (post) {\n                    // if we're on the home page, show an \"Updated\" badge\n                    if (window.location.pathname === \"/\") {\n                        $('a[href=\"/posts/' + post._id + '\"]').append('\u003cspan class=\"badge badge-primary badge-pill\"\u003eUpdated\u003c/span\u003e');\n                    }\n                    var notification = new Notification(post.title + \" was just updated. Check it out.\");\n                    notification.onclick = function (event) {\n                        window.location.href = '/posts/' + post._id;\n                        event.preventDefault();\n                        notification.close();\n                    }\n                });\n    \u003c/script\u003e\n```\n\nRemember to replace `your-app-i`d with your Pusher app ID and `your-app-cluster` with your app cluster.\n\nAll done! Start up your MongoDB server by running `mongod`, serve your app with `npm start,` and visit your app on http://localhost:3000 in two browser windows. It should work just like the preview shown earlier. Editing a post in one window immediately notifies the other.\n\n## Conclusion\n\nWe’ve seen how straightforward it is to add realtime push notifications to a web app, thanks to the Web Notifications API and Pusher realtime messaging. Our demo app is a simple example. The same functionality could be used in many real world scenarios (for instance, an internal company tool where realtime updates are important). You can check out the source code of the completed application on [GitHub](https://github.com/shalvah/tattletale), read up more about Web Notifications [here](https://developer.mozilla.org/en-US/docs/Web/API/notification), and dive deeper into Pusher services [here](https://pusher.com/docs).","metaTitle":"How to add realtime notifications to your Node.js app","metaDescription":"Learn how to add realtime notifications to Node.js apps. Use Node.js, Express and MongoDB to create a simple wiki, where users can edit and save posts. On save, all wiki users online will receive a notification."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5aeEXGAZZeeAQGmMc4mggo","type":"Entry","createdAt":"2018-06-05T12:52:45.191Z","updatedAt":"2020-06-19T14:25:43.622Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an iOS chat app using Swift and Chatkit - Part 3: Building the iOS app","url":"ios-chat-app-swift-chatkit-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/pusher/sample-chatroom-ios-chatkit","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2018-06-05","description":"Build a chat app for iOS, with a Laravel API backend. In part three, build the iOS application. By the end of this section you will have a working app with instant chat functionality.","prerequisite":"To follow this series you will need Xcode, Cocoapods, PHP and Laravel installed on your machine. Some knowledge of Xcode and Swift will be helpful.","content":"We previously created the API backend we need our iOS application to connect to. In this part, we will create the application itself using Xcode and Swift. We will be building out the application based on the prototypes we created in the first part of the series.\n\nHere are the prototypes we made using our prototyping tool:\n\n![Create-iOS-Chat-App-Using-Chatkit-prototype](//images.ctfassets.net/1es3ne0caaid/2OGOxROMGsikAgIMAksa66/810bd07140a87a274ee6f983235342c4/Create-iOS-Chat-App-Using-Chatkit-prototype.png)\n\n Let’s go through some requirements you need to have to follow this part of the article.\n\n## Creating our app’s storyboard in Xcode\n\nWe previously created the scenes of our application in Xcode using the Clean Swift templates. Now we are going to work on creating our storyboards and linking them to the view controllers we created.\n\n### Creating the launch scene\n\nFirst add a Navigation View Controller and a View Controller to the storyboard as seen below. The Navigation Controller will be the entry point to our application. Set the custom class for the second View Controller as the `LaunchViewController` we created in the first part of the article.\n\n![Create-iOS-Chat-App-Using-Chatkit-launch-scene-controller](//images.ctfassets.net/1es3ne0caaid/xgFRNtuy3YGiiSUMWsAYW/3e22912c68e4bcd6f09012d0c38d7ee0/Create-iOS-Chat-App-Using-Chatkit-launch-scene-controller.png)\n\nWe will use the `LaunchViewController` to determine which initial screen to present to the user when the app is launched. If the user is logged in we’ll present the contacts list, if not, we’ll present the Welcome scene so the user can log in or sign up.\n\n### Creating the welcome scene\nThe next scene we will create is the welcome scene. When a user is not logged in, they will be redirected to this scene. From here they can sign up or log in to their account. In the `Main.storyboard` add the View Controller and create a “Present Modally” manual segue from the launch controller to the controller you just created.\n\n![Create-iOS-Chat-App-Using-Chatkit-welcome-scene](//images.ctfassets.net/1es3ne0caaid/P1C4QxlOgKmQOwEkckUqs/31f6d0f2a15493825d2d33af23caaabe/Create-iOS-Chat-App-Using-Chatkit-welcome-scene.png)\n\nAfter creating the welcome view controller, you can start designing it to look like the prototype using a combination of `UILabel`s, `UIButton`s, and `UIView`s. Then set the name of the manual segue to **Welcome**. Finally, set the custom class for the view controller to `WelcomeViewController`\n\n### Creating the signup and login scene\n\nNext create two new View Controllers. The first will be for login and the second will be for sign up. Set theView Controller for the Signup controller to `SignupViewController` and the custom class for the login View Controller to `LoginViewController`.\n\nCreate a “Present Modally” segue from the **Sign In** button to the `LoginViewController` and from the **Don’t have an account? Sign up here** button to the `SignupViewController`. Name the segues **Login** and **Signup**.\n\n![Create-iOS-Chat-App-Using-Chatkit-signup-login-scene](//images.ctfassets.net/1es3ne0caaid/3Yp5Dp0gNaEG24i0aAWKcE/bddb6f073a6c86d080affba594de08be/Create-iOS-Chat-App-Using-Chatkit-signup-login-scene.png)\n\nIn the Signup view create three input fields and create an `@IBOutlet` for them in the `SignupViewController`, we named ours `emailTextField`, `nameTextField` and `passwordTextField`. Create an `@IBAction` called `cancelButtonWasPressed` for the cancel button and `signupButtonWasPressed`  for the sign up button.\n\nIn the login view, we will follow almost the same steps as the sign up controller, but, this time the  `@IBAction` will be named `loginButtonWasPressed` and there will be no `nameTextField`.\n\n### Creating the ListContacts and Chatroom scenes\n\nNext, create a Navigation controller and make sure the root controller for it is a `UITableViewController`. Create a manual segue named **ListMessages** from the `LaunchViewController` to the navigation controller and set the custom class of the `UITableViewController` to `ListContactsViewController`.\n\nCreate a “Present Modally” manual segue named **MainNavigator** between the navigation controller and the Login and Signup scenes. \n\nLastly, create a new `UIViewController` and create a segue named **Chatroom** from the Prototype Cells to the new View Controller, then set the custom class of the View Controller to `ChatroomViewController`.\n\nHere is a screenshot of our entire storyboard:\n\n![Create-iOS-Chat-App-Using-Chatkit-storyboard](//images.ctfassets.net/1es3ne0caaid/4bUz80F2Io4CSKSWA60mY0/131de2d7b16dd933cedd7b68eff1fd26/Create-iOS-Chat-App-Using-Chatkit-storyboard.png)\n\n## Adding functionality to our scenes\n\nNow that we have our scenes in place and hooked up to our View Controllers, let’s start adding the functionality to them. We will start at the very first piece of code that gets called when the application is launched: `AppDelegate`.\n\nIn the `AppDelegate` file, right below the `import` statement add the code block below:\n\n``` swift\n    struct AppConstants {\n        static let ENDPOINT: String = \"http://127.0.0.1:8000\"\n        static let CLIENT_ID: Int = API_CLIENT_ID\n        static let CLIENT_SECRET: String = \"API_CLIENT_SECRET\"\n        static let CHATKIT_INSTANCE_LOCATOR: String = \"CHATKIT_INSTANCE_LOCATOR\"\n    }\n```\n\nIn the `struct` above, we define some constants for our application. We will use this as some configuration value handler for our application. Replace the values for the `API_CLIENT_ID`, `API_CLIENT_SECRET` and `CHATKIT_INSTANCE_``LOCATOR` with the actual values.\n\n\n\u003e 💡  You can get the `API_CLIENT_*` key values from when you were setting up Passport in the previous part of the tutorial, and you can get the `CHATKIT_INSTANCE_``LOCATOR` from the Chatkit dashboard.\n\n### Launch scene\n\nOpen the `Scenes/Launch/LaunchSceneController` file and let us start adding some functionality to the class.\n\nIn the file, replace the code with [this](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Launch/LaunchViewController.swift)\n\nWe have simplified most of the code that comes with the Clean Swift template. In the `viewDidLoad` method, we check to see if the user is logged in using an `Authenticator` class, which we will create later. If the user is logged in then we route the user to the list messages page else we go to the welcome page.\n\nNext, open the `LaunchRouter` class and in the file paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Launch/LaunchRouter.swift)\n\nIn the router we have defined the `routeToWelcome` and `routeToListContacts` methods. Both methods do what is necessary to route the user to either the **Welcome** or **MainNavigator** segue.\n\nThis is all we need to do for the Launch scene. You can delete the other template files in the `Scenes/Launch` directory as we will not be using them.\n\n### Welcome scene\n\nFor our Welcome scene we do not need to do anything actually as the scene has no logic. In the `WelcomeViewController` you can just paste the code below:\n\n``` swift\n    import UIKit\n    \n    class WelcomeViewController: UIViewController {\n    }\n```\n\nYou can delete the other template files in the Welcome scene as we will not be needing them and they serve no purpose.\n\n### Login scene\n\nFor our Login scene we will start by adding the logic to our `LoginModels` class. The models will help us format the response from the API to what our application will be able to consume.\n\nIn the `LoginModels` file paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Login/LoginModels.swift). \n\nIn the code above we have defined a series of `struct`s and in them we have `Request` and `Response`. The `Request` standardises the parameters required for the request to the login endpoint while the `Response` takes the raw response from the API and saves them as either a  `ChatkitToken` or `UserToken` object. We will define the `ChatToken` and the `UserToken` object later in the article\n\nNext open the `LoginInteractor` and paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Login/LoginInteractor.swift) into the file.\n\nIn this class we have a `login` method that just calls a `login` method on the `UsersWorker` class. Depending on the response from that call, we either show a login error or we route to the contacts list.\n\nNext, open the `LoginRouter` class and in the file paste the following code:\n\n``` swift\n    import UIKit\n    \n    @objc protocol LoginRoutingLogic {\n        func routeToListContacts()\n    }\n    \n    class LoginRouter: NSObject, LoginRoutingLogic {\n        weak var viewController: LoginViewController?\n    \n        func routeToListContacts() {\n            let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n            let destinationVC = storyboard.instantiateViewController(withIdentifier: \"MainNavigator\") as! UINavigationController\n            \n            viewController!.show(destinationVC, sender: nil)\n        }\n    }\n```\n\nThe router above has just one method. This method routes the app to the list contacts page when called.\n\nThe last class we want to edit for this scene is the `LoginViewController`. This is the class that pieces the other classes above. Open the file and paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Login/LoginViewController.swift) into the file.\n\nIn the view controller we have the usual set up methods used by Clean Swift but we also have the `@IBAction`s and `@IBOutlet`s we created when we were creating our storyboards. \n\nIn the `cancelButtonPressed` method we just dismiss the login screen modal, in the `loginButtonPressed` method we call the `login` method on the interactor, and in the `showValidationError` method we show an alert with an error message.\n\n### Signup scene\n\nFor the Login scene functionality we will start with the models. Open the `SignupModels` file in the `Scene/Signup` directory and paste the code below into it:\n\n``` swift\n    import Foundation\n    \n    enum Signup {    \n        struct Request {\n            var name: String\n            var email: String\n            var password: String\n        }\n    \n        struct Response {\n            var user: User?\n            \n            init(data: [String:Any]) {\n                self.user = User(\n                    id: data[\"id\"] as! Int,\n                    name: data[\"name\"] as! String,\n                    email: data[\"email\"] as! String,\n                    chatkit_id: data[\"chatkit_id\"] as! String\n                )\n            }\n        }\n    }\n```\n\nIn the models we have Request and Response structs. Their functionality was described above.\n\nNext, paste the code below into the `SignupInteractor` class in the same directory:\n\n``` swift\n    import Foundation\n    \n    protocol SignupBusinessLogic {\n        func createAccount(request: Signup.Request)\n    }\n    \n    class SignupInteractor: SignupBusinessLogic {\n        var viewController: SignupFormErrorLogic?\n        var router: (NSObjectProtocol \u0026 SignupRoutingLogic)?\n        var worker = UsersWorker()\n    \n        func createAccount(request: Signup.Request) -\u003e Void {\n            self.worker.signup(request: request) { user, error in\n                guard error == nil else {\n                    self.viewController?.showValidationError(\"Error creating account!\")\n                    return\n                }\n                \n                self.router?.routeToListContacts()\n            }\n        }\n    }\n```\n\nIn the `createAccount` method, we call the `signup` method on the `UsersWorker` and then depending on the response we either route to the contacts list or show an error.\n\nNext, open the router class `SignupRouter` and paste the code below into it:\n\n``` swift\n    import UIKit\n    \n    @objc protocol SignupRoutingLogic {\n        func routeToListContacts()\n    }\n    \n    class SignupRouter: NSObject, SignupRoutingLogic {\n        weak var viewController: SignupViewController?\n        \n        func routeToListContacts() {\n            let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n            let destinationVC = storyboard.instantiateViewController(withIdentifier: \"MainNavigator\") as! UINavigationController\n            \n            viewController!.show(destinationVC, sender: nil)\n        }\n    }\n```\n\nAs in the login router, this method just routes the user to the contacts screen using the `MainNavigator` segue.\n\nFor the `SignupViewController`, use [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Signup/SignupViewController.swift).\n\nIn this view controller, we set up the Clean Swift components then in the `cancelButtonPressed` method we dismiss the signup modal and in the `signupButtonPressed` method we create the account using the interactor. The `showValidationError` shows an alert when it is called, usually when there is an error signing up.\n\n### ListContacts scene\n\nThe ListContacts scene is supposed to show a list of the contacts available to chat with. Open the `ListContactsModels` file and paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/ListContacts/ListContactsModels.swift) into the file.\n\nIn the code above we have the usual `Request` and `Response` (explained above). We also have a `ParseContact` struct that takes the raw data and an array of `rooms`. It parses it into a `Contact` model object with `User` and `PCRoom` object. We reference this in the `Response`s above so as to avoid duplication.\n\nWe also have a `ViewModel` struct that we use to format the data in a way the presenter needs to display the data to the user.\n\nNext open the `ListContactsInteractor` class and paste the code below into it: https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/ListContacts/ListContactsInteractor.swift\n\nIn the method above, we have `fetchContacts`, which uses the `UsersWorker` class to fetch the contacts from the API and also the `addContact` class, which also uses the same worker to add contacts.\n\nAfter a successful call, in both methods we call the presenter, which formats the data and makes a call to the View Controller and displays the content. \n\nLet’s update the code for the `ListContactsPresenter`. Open the file and paste the code below into the file:\n\n``` swift\n    import Foundation\n    \n    protocol ListContactsPresentationLogic {\n        func presentContacts(_ contacts: [Contact])\n        func presentAddedContact(_ contact: Contact)\n    }\n    \n    class ListContactsPresenter: ListContactsPresentationLogic {\n        weak var viewController: ListContactsDisplayLogic?\n        var displayedContacts: [ListContacts.Fetch.ViewModel.DisplayedContact] = []\n    \n        func presentContacts(_ contacts: [Contact]) {\n            displayedContacts = []        \n            for contact in contacts {\n                displayedContacts.append(ListContacts.Fetch.ViewModel.DisplayedContact(\n                    id: contact.user.chatkit_id,\n                    name: contact.user.name, \n                    isOnline: false\n                ))\n            }\n            displayContacts()\n        }\n        \n        func presentAddedContact(_ contact: Contact) {\n            displayedContacts.append(ListContacts.Fetch.ViewModel.DisplayedContact(\n                id: contact.user.chatkit_id,\n                name: contact.user.name, \n                isOnline: false\n            ))\n            displayContacts()\n        }\n        \n        private func displayContacts() {\n            let vm = ListContacts.Fetch.ViewModel(displayedContacts: displayedContacts)\n            viewController?.displayFetchedContacts(viewModel: vm)\n        }\n    }\n```\n\nThe code above has three methods. `presentContacts` and `presentAddedContact` do pretty much the same thing: format the contacts, append it to the `displayedContacts` array, and call the `displayContacts` method. The `displayContacts` method just calls `displayFetchedContacts` on the View Controller.\n\nLet us update the code for the `ListContactsViewController`. Paste the following into the controller:\n\n``` swift\n    import UIKit\n    import PusherChatkit\n    \n    protocol ListContactsDisplayLogic: class {\n        func displayFetchedContacts(viewModel: ListContacts.Fetch.ViewModel)\n    }\n    \n    class ListContactsViewController: UITableViewController, ListContactsDisplayLogic {\n        var interactor: ListContactsBusinessLogic?\n        var displayedContacts: [ListContacts.Fetch.ViewModel.DisplayedContact] = []\n        var router: (NSObjectProtocol \u0026 ListContactsRoutingLogic \u0026 ListContactsDataPassing)?\n      \n        override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {\n            super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)\n            setup()\n        }\n      \n        required init?(coder aDecoder: NSCoder) {\n            super.init(coder: aDecoder)\n            setup()\n        }\n      \n        private func setup() {\n            let viewController = self\n            let interactor = ListContactsInteractor()\n            let presenter = ListContactsPresenter()\n            let router = ListContactsRouter()        \n            viewController.interactor = interactor\n            viewController.router = router\n            interactor.presenter = presenter\n            presenter.viewController = viewController\n            router.viewController = viewController\n            router.dataStore = interactor\n        }\n          \n        override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n            if let scene = segue.identifier {\n                let selector = NSSelectorFromString(\"routeTo\\(scene)WithSegue:\")\n                if let router = router, router.responds(to: selector) {\n                    router.perform(selector, with: segue)\n                }\n            }\n        }\n    }\n```\n\nThis is the basic set up that comes with the Clean Swift templates. It just sets up the connections between all the **ListContacts** scene classes. Next, let’s add the methods below to the class. These are specific to our implementation:\n\n``` swift\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        navigationItem.title = \"Contacts\"\n        navigationController?.navigationBar.prefersLargeTitles = true\n        navigationItem.rightBarButtonItem = UIBarButtonItem(\n            title: \"Add\", \n            style: .plain, \n            target: self, \n            action: #selector(showAddContactPopup)\n        )\n                \n        initialiseChatkit()\n    }\n        \n    private func initialiseChatkit() {\n        let userId = CurrentUserIDDataStore().getID()\n    \n        let chatManager = ChatManager(\n            instanceLocator: AppConstants.CHATKIT_INSTANCE_LOCATOR,\n            tokenProvider: ChatkitTokenDataStore(),\n            userID: userId.id!\n        )\n        \n        chatManager.connect(delegate: self) { user, error in\n            guard error == nil else { return }\n            self.interactor?.currentUser = user\n            self.fetchContacts()\n        }\n    }\n    \n    var emailTextField: UITextField?\n    \n    @objc func showAddContactPopup(_ sender: Any) {\n        let alert = UIAlertController(\n            title: \"Add\",\n            message: \"Enter the users email address\",\n            preferredStyle: .alert\n        )\n    \n        alert.addTextField { emailTextField in\n            emailTextField.placeholder = \"Enter email address\"\n            self.emailTextField = emailTextField\n        }\n        \n        alert.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n        alert.addAction(UIAlertAction(title: \"Add Contact\", style: .default) { action in\n            let request = ListContacts.Create.Request(user_id: self.emailTextField!.text!)\n            self.interactor?.addContact(request: request)\n        })\n        \n        present(alert, animated: true, completion: nil)\n    }\n    \n    private func fetchContacts() {\n        interactor?.fetchContacts(request: ListContacts.Fetch.Request())\n    }\n    \n    func displayFetchedContacts(viewModel: ListContacts.Fetch.ViewModel) {\n        displayedContacts = viewModel.displayedContacts\n        tableView.reloadData()\n    }\n```\n\nIn the `viewDidLoad` method, we configure the navigation bar and add an “Add” button to it. We also set the title to “Contacts”. The `showAddContactPopup` method shows an alert controller with a text field for the contact you want to add. When you click add, the contact will be added. \n\nThe `initialiseChatkit` method connects to Chatkit and stores the `currentUser` in the interactor while the `fetchContacts` method gets all the contacts from the API while the `displayFetchedContacts` method simply displays them.\n\nNext we will add the class extension of `ListContactsViewController` that implements the `UITableViewDelegate` protocol. At the bottom of the `ListContactsViewController` paste the following:\n\n``` swift\n    extension ListContactsViewController {    \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n        \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return displayedContacts.count\n        }\n        \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            var cell = tableView.dequeueReusableCell(withIdentifier: \"ContactTableViewCell\")        \n            if cell == nil {\n                cell = UITableViewCell(style: .subtitle, reuseIdentifier: \"ContactTableViewCell\")\n            }\n    \n            let contact = displayedContacts[indexPath.row]\n            cell?.textLabel?.text = contact.name\n            cell?.detailTextLabel?.text = contact.isOnline ? \"online\" : \"Seen recently\"\n    \n            return cell!\n        }\n    }\n```\n\nThe method should be familiar to you as it just helps us feed data to the `UITableView` so our contacts display properly on the table.\n\nThe last bit of code for the ListContacts scene is the `ListContactsRouter`. This will manage the routing to the Chatroom scene. Open the `ListContactsRouter` class and add the following code:\n\n``` swift\n    import UIKit\n    \n    @objc protocol ListContactsRoutingLogic {\n        func routeToChatroom(segue: UIStoryboardSegue)\n    }\n    \n    protocol ListContactsDataPassing {\n        var dataStore: ListContactsDataStore? { get }\n    }\n    \n    class ListContactsRouter: NSObject, ListContactsRoutingLogic, ListContactsDataPassing {\n        var dataStore: ListContactsDataStore?\n        weak var viewController: ListContactsViewController?\n    \n        func routeToChatroom(segue: UIStoryboardSegue) {\n            let destinationVC = segue.destination as! ChatroomViewController\n            var destinationDS = destinationVC.router!.dataStore!\n            passDataToChatroom(source: dataStore!, destination: \u0026destinationDS)\n        }\n        \n        func passDataToChatroom(source: ListContactsDataStore, destination: inout ChatroomDataStore) {\n            let selectedRow = viewController?.tableView.indexPathForSelectedRow?.row\n            destination.contact = source.contacts?[selectedRow!]\n            destination.currentUser = source.currentUser\n        }\n    } \n```\n\nIn the `routeToChatroom` method we call `passDataToChatroom` which passes data (the `Contact` object and the current user) to the `ListContactsViewController` for usage.\n\n### Chatroom scene\nIn the Chatroom scene we will start with the `ChatroomModels`. Open the file and paste the following code:\n\n``` swift\n    import Foundation\n    import MessageKit\n    import PusherChatkit\n    \n    enum Chatroom {\n        struct Messages {        \n            struct Fetch {\n                struct Request {\n                    var room: PCRoom\n                }\n                \n                struct Response {\n                    var messages: [Message] = []                \n                    init(messages: [PCMessage]) {\n                        for message in messages {\n                            let res = Chatroom.Messages.Create.Response(message: message)\n                            self.messages.append(res.message)\n                        }\n                    }\n                }\n            }\n            \n            struct Create {\n                struct Request {\n                    var text: String\n                    var sender: Sender\n                    var room: PCRoom\n                }\n                \n                struct Response {\n                    var message: Message                \n                    init(message: PCMessage) {\n                        self.message = Message(\n                            text: message.text,\n                            sender: Sender(id: message.sender.id, displayName: message.sender.displayName),\n                            messageId: String(describing: message.id),\n                            date: ISO8601DateFormatter().date(from: message.createdAt)!\n                        )\n                    }\n                }\n            }\n        }\n    }\n```\n\nLike the other methods, we have the usual `Request` and `Response` struct (explained above).\n\nIn the `ChatroomInteractor.swift` file paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Chatroom/ChatroomInteractor.swift).\n\n\n\nIn the `subscribeToRoom` method, we subscribe the `currentUser` to a room. We also set the `PCRoomDelegate` to the interactor which means we can implement methods that handle events on the interactor.\n\nIn the `addChatMessage` method we add a new message to the room as the `currentUser`. When the user is added we pass the `messageId` to the completion handler.\n\nIn the extension class, we implement the `newMessage` method of the `PCRoomDelegate`. The method is fired automatically anytime there is a new message in the room. So we handle the new message by presenting it to the controller using the `ChatroomPresenter`s `presentMessages` method.\n\nNext, open the `ChatPresenter.swift` file and paste the code below into it:\n\n``` swift\n    import Foundation\n    \n    protocol ChatroomPresentationLogic {\n        func presentMessages(response: Chatroom.Messages.Fetch.Response)\n    }\n    \n    class ChatroomPresenter: ChatroomPresentationLogic {\n        weak var viewController: ChatroomDisplayLogic?\n        \n        func presentMessages(response: Chatroom.Messages.Fetch.Response) {\n            viewController?.displayChatMessages(response: response)\n        }\n    }\n```\n\nThe only method there is the `presentMessages` method. It just calls the `displayChatMessages` method on the view controller.\n\nNext, in the `ChatroomRouter` just paste in the following code:\n\n``` swift\n    import Foundation\n    \n    protocol ChatroomDataPassing {\n        var dataStore: ChatroomDataStore? { get }\n    }\n    \n    class ChatroomRouter: NSObject, ChatroomDataPassing {\n        weak var viewController: ChatroomViewController?\n        var dataStore: ChatroomDataStore?\n    }\n```\n\nThen in the `ChatroomViewController` we are going to split the controller into extensions as the code is lengthy. First paste the Clean Swift set up code into the file:\n\n``` swift\n    import UIKit\n    import MessageKit\n    import PusherChatkit\n    import MessageInputBar\n    \n    protocol ChatroomDisplayLogic: class {\n        func displayChatMessages(response: Chatroom.Messages.Fetch.Response)\n    }\n    \n    class ChatroomViewController: MessagesViewController, ChatroomDisplayLogic {\n        var messages: [Message] = []\n        var interactor: ChatroomBusinessLogic?\n        var router: (NSObjectProtocol \u0026 ChatroomDataPassing)?\n      \n        override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {\n            super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)\n            setup()\n        }\n      \n        required init?(coder aDecoder: NSCoder) {\n            super.init(coder: aDecoder)\n            setup()\n        }\n      \n        private func setup() {\n            let viewController = self\n            let interactor = ChatroomInteractor()\n            let presenter = ChatroomPresenter()\n            let router = ChatroomRouter()\n      \n            viewController.interactor = interactor\n            viewController.router = router\n            interactor.presenter = presenter\n            presenter.viewController = viewController\n            router.viewController = viewController\n            router.dataStore = interactor\n        }\n    }\n```\n\nNext, we will paste the class extension that handles the loading of the chat messages, and configures [MessageKit](https://messagekit.github.io/) and [Chatkit](https://pusher.com/chatkit) as the view is loaded:\n\n``` swift\n    extension ChatroomViewController {\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            self.initialiseChatkit()\n            self.configureMessageKit()\n            self.navigationItem.title = router?.dataStore?.contact?.user.name\n        }\n        \n        private func initialiseChatkit() {\n            guard let room = router?.dataStore?.contact?.room else { return }\n            guard let currentUser = router?.dataStore?.currentUser else { return }\n            self.interactor?.currentUser = currentUser\n            self.interactor?.subscribeToRoom(room: room)\n        }\n        \n        private func configureMessageKit() {\n            messageInputBar.delegate = self\n            messagesCollectionView.messagesDataSource = self\n            messagesCollectionView.messagesLayoutDelegate = self\n            messagesCollectionView.messagesDisplayDelegate = self\n            scrollsToBottomOnKeyboardBeginsEditing = true\n            maintainPositionOnKeyboardFrameChanged = true\n        }\n        \n        func displayChatMessages(response: Chatroom.Messages.Fetch.Response) {\n            self.messages = response.messages\n            self.messagesCollectionView.reloadData()\n            self.messagesCollectionView.scrollToBottom()\n        }\n    }\n```\n\nIn the extension above we have the `initialiseChatkit` method. It takes the current user passed on from the ListContacts scene and saves it to the interactor. Then the next method is the `configureMessageKit` where we configure MessageKit. Lastly, we have the `displayChatMessages` method that displays the messages.\n\nNext, paste the extension below the previous class:\n\n``` swift\n    extension ChatroomViewController: MessagesDataSource {    \n        func isFromCurrentSender(message: MessageType) -\u003e Bool {\n            return message.sender == currentSender()\n        }\n    \n        func currentSender() -\u003e Sender {\n            return Sender(id: (interactor?.currentUser?.id)!, displayName: (interactor?.currentUser?.name)!)\n        }\n    \n        func numberOfSections(in messagesCollectionView: MessagesCollectionView) -\u003e Int {\n            return self.messages.count\n        }\n        \n        func messageForItem(at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e MessageType {\n            return self.messages[indexPath.section]\n        }\n    \n        func configureAvatarView(_ avatarView: AvatarView, for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) {\n            avatarView.initials = self.initials(fromName: message.sender.displayName)\n        }\n    \n        func messageTopLabelAttributedText(for message: MessageType, at indexPath: IndexPath) -\u003e NSAttributedString? {\n    \n            return NSAttributedString(\n                string: message.sender.displayName,\n                attributes: [NSAttributedString.Key.font: UIFont.preferredFont(forTextStyle: .caption1)]\n            )\n        }\n    \n        func messageBottomLabelAttributedText(for message: MessageType, at indexPath: IndexPath) -\u003e NSAttributedString? {\n    \n            struct ConversationDateFormatter {\n                static let formatter: DateFormatter = {\n                    let formatter = DateFormatter()\n                    formatter.dateStyle = .medium\n                    return formatter\n                }()\n            }\n    \n            return NSAttributedString(\n                string: ConversationDateFormatter.formatter.string(from: message.sentDate),\n                attributes: [NSAttributedStringKey.font: UIFont.preferredFont(forTextStyle: .caption2)]\n            )\n        }\n    }\n    \n    extension ChatroomViewController: MessagesLayoutDelegate {\n        func messageBottomLabelHeight(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e CGFloat {\n            return 16\n        }\n    \n        func messageTopLabelHeight(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e CGFloat {\n            return 16\n        }\n    \n        func avatarPosition(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e AvatarPosition {\n            return AvatarPosition(horizontal: .natural, vertical: .messageBottom)\n        }\n    \n        func messagePadding(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e UIEdgeInsets {\n            return isFromCurrentSender(message: message)\n                ? UIEdgeInsets(top: 0, left: 30, bottom: 0, right: 4)\n                : UIEdgeInsets(top: 0, left: 4, bottom: 0, right: 30)\n        }\n    \n        func footerViewSize(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e CGSize {\n            return CGSize(width: messagesCollectionView.bounds.width, height: 10)\n        }\n    \n        func heightForLocation(message: MessageType, at indexPath: IndexPath, with maxWidth: CGFloat, in messagesCollectionView: MessagesCollectionView) -\u003e CGFloat {\n            return 200\n        }\n    }\n    \n    extension ChatroomViewController: MessagesDisplayDelegate {\n    }\n    \n    extension ChatroomViewController: MessageInputBarDelegate {\n        func messageInputBar(_ inputBar: MessageInputBar, didPressSendButtonWith text: String) {\n            guard interactor?.currentUser != nil else { return }\n            guard let room = router?.dataStore?.contact?.room else { return }\n     \n            let request = Chatroom.Messages.Create.Request(text: text, sender: currentSender(), room: room)\n    \n            self.interactor?.addChatMessage(request: request) { id, error in\n                guard error == nil else { return }\n                inputBar.inputTextView.text = String()\n            }\n        }\n    }\n```\n\nThe first extension above extends the `[MessagesDataSource](https://messagekit.github.io/Protocols/MessagesDataSource.html)` protocol and has to conform to some of its methods. Here we implement `currentSender`, `numberOfMessages` and `messageForItem`, all self explanatory.\n\nThe next extension on the list is for the `[MessagesLayoutDelegate](https://messagekit.github.io/Protocols/MessagesLayoutDelegate.html)` protocol and it implements some of the methods but there are other methods you can implement to change the layouts display. There is also the implementation of `[MessagesDisplayDelegate](https://messagekit.github.io/Protocols/MessagesDisplayDelegate.html)`, which is empty but you can look through the documentation to see methods you can implement.\n\nLastly, we implement  `[MessageInputBarDelegate](https://messagekit.github.io/Protocols/MessageInputBarDelegate.html)` and in there we have the `messageInputBar` method, which is called after the send button is clicked on the chat screen. In this method we send the message using the interactor and then empty the input.\n\nWith this we are done with our scenes. Next, we will add the code for our supporting classes used in the scenes.\n\n\n## Implementing supporting classes for our application\n\nThe first set of supporting classes we will implement are the models. The models we want to implement are `User`, `Message`, `Contact`, `Room`, `UserToken`, and `ChatToken`. Here are the class contents:\n\n### Implementing the models\n\nTo implement the models, create a new folder/group in the root directory called **Models** and start creating the model files below in them. Get the code from the GitHub links.\n\n[The code for the `Message.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/Message.swift)\n\n[The code for the `Contact.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/Contact.swift) \n\n[The code for the `User.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/User.swift)\n\n[The code for `UserToken` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/UserToken.swift)\n\nIn the `UserToken` class above we implement the `NSCoding` protocol, we need this so we can save the `UserToken` object to UserDefaults.\n\n[The code to the `ChatToken.swift` model]( https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/ChatkitToken.swift)\n\nLike the `UserToken` model, the `ChatToken` does the same thing with the `NSCoding` protocol.\n\nWhen we have received a `chatkit_id` back from the server we want to store that in `UserDefaults` so that we can use it to connect to Chatkit.\n\n[The code to the `CurrentUserID.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/CurrentUserID.swift)\n\n### Implementing the services\nCreate a new folder/group in the root directory for the project on Xcode and name it **Services** and in there add the following files:\n\n`Authenticator.swift` class:\n\n``` swift\n    import Foundation\n    \n    class Authenticator {\n        func isLoggedIn() -\u003e Bool {\n            return getAccessToken().count \u003e 0\n        }\n    \n        private func getAccessToken() -\u003e String {\n            guard let token = ChatkitTokenDataStore().getToken().access_token, token.count \u003e 0 else {\n                return \"\"\n            }\n    \n            return token\n        }\n    } \n```\n\nThis `Authenticator` class checks if the user is logged in. It does this by checking if the token from the API is saved in UserDefaults.\n\n`UserTokenDataStore.swift` class:\n\n``` swift\n    import Foundation\n    \n    class UserTokenDataStore {\n        static var DATA_KEY = \"WORDS_API_TOKEN\"\n        \n        func getToken() -\u003e UserToken {\n            if let token = UserDefaults.standard.object(forKey: type(of: self).DATA_KEY) as! Data? {\n                return NSKeyedUnarchiver.unarchiveObject(with: token) as! UserToken\n            }\n    \n            return UserToken(token_type: nil, access_token: nil, expires_in: nil)\n        }\n        \n        func setToken(_ token: UserToken) {\n            let encodedData = NSKeyedArchiver.archivedData(withRootObject: token)\n            UserDefaults.standard.set(encodedData, forKey: type(of: self).DATA_KEY)\n        }\n    }\n```\n\nThe `UserDataTokenStore` class saves and fetches the token required to make calls to our backend API.\n\nAdd the `ChatTokenDataStore.swift` class with [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Services/ChatkitTokenDataStore.swift)\n\nThe class above does the same as the `UserTokenDataStore`, however it checks for the token required to make calls to the Chatkit API. It also extends the `[PCTokenProvider](https://github.com/pusher/chatkit-swift/blob/master/Source/PCTokenProvider.swift)` and thus we have the `fetchToken` method that fetches the token from the UserDefaults.\n\nAdd the `CurrentUserIDDataStore.swift` class with [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Services/CurrentUserIDDataStore.swift)\n\nThe class above does the same as the two token data stores. It takes some information, in this case the user’s Chatkit ID, and fetches and stores it in `UserDefaults`.\n\n### Implementing the global worker\nThe last class we want to implement is the `UsersWorker`. Create a `UsersWorker` class and paste the following into the file:\n\n``` swift\n    import UIKit\n    import Alamofire\n    \n    class UsersWorker {\n    }\n    \n    // MARK: Errors\n    \n    enum ContactsError: Error {\n        case CannotAdd\n        case CannotFetch\n    }\n    \n    enum UsersStoreError: Error {\n        case CannotLogin\n        case CannotSignup\n        case CannotFetchChatkitToken\n    }\n```\n\nNow we will start adding methods to the `UsersWorker` class. The first method is the `fetchContacts` method, which calls the API, using [Alamofire](https://github.com/Alamofire/Alamofire), to get a list of contacts for display:\n\n``` swift\n    func fetchContacts(currentUser: PCCurrentUser, completionHandler: @escaping ([Contact]?, ContactsError?) -\u003e Void){\n        let enc = JSONEncoding.default\n        let url = AppConstants.ENDPOINT + \"/api/contacts\"\n        let headers = authorizationHeader(token: nil)\n        \n        Alamofire\n            .request(url, method: .get, parameters: nil, encoding: enc, headers: headers)\n            .validate()\n            .responseJSON { response in\n                switch (response.result) {\n                case .success(let data):                \n                    DispatchQueue.main.async {\n                        let data = data as! [[String:Any]?]\n                        let res = ListContacts.Fetch.Response(for: currentUser, data:data)\n                        completionHandler(res.contacts, nil)\n                    }\n                case .failure(_):\n                    completionHandler(nil, ContactsError.CannotFetch)\n            }\n        }\n    }\n```\n\nThe next method to add to the class is the `addContact` method. The method makes the call to the API to add a contact:\n\n``` swift\n    func addContact(currentUser: PCCurrentUser, request: ListContacts.Create.Request, completionHandler: @escaping (Contact?, ContactsError?) -\u003e Void) {\n        let params = [\"user_id\": request.user_id]\n        let headers = authorizationHeader(token: nil)\n        \n        postRequest(\"/api/contacts\", params: params, headers: headers) { data in\n            guard data != nil else {\n                return completionHandler(nil, ContactsError.CannotAdd)\n            }\n            \n            DispatchQueue.main.async {\n                let response = ListContacts.Create.Response(for: currentUser, data: data!)\n                completionHandler(response.contact, nil)\n            }\n        }\n    }\n```\n\nThe next method to add to the class is the `login` method. The method makes a call to the API to login. The API returns the token for the API as the response. We make an additional call to the API to get the Chatkit token for the user so we can make calls to the Chatkit API on behalf of the user:\n\n``` swift\n    func login(request: Login.Account.Request, completionHandler: @escaping (UserToken?, UsersStoreError?) -\u003e Void) {\n        let params: Parameters = [\n            \"grant_type\": \"password\",\n            \"username\": request.email,\n            \"password\": request.password,\n            \"client_id\": AppConstants.CLIENT_ID,\n            \"client_secret\": AppConstants.CLIENT_SECRET,\n        ]\n        \n        postRequest(\"/oauth/token\", params: params, headers: nil) { data in\n            guard data != nil else {\n                return completionHandler(nil, UsersStoreError.CannotLogin)\n            }\n            \n            let response = Login.Account.Response(data: data!)\n            \n            let request = Login.Chatkit.Request(\n                username: request.email, \n                password: request.password, \n                token: response.userToken\n            )\n            \n            self.fetchChatkitToken(request: request) { token, error in\n                guard error == nil else {\n                    return completionHandler(nil, UsersStoreError.CannotFetchChatkitToken)\n                }\n                \n                ChatkitTokenDataStore().setToken(token!)\n                UserTokenDataStore().setToken(response.userToken)\n                \n                DispatchQueue.main.async {\n                    completionHandler(response.userToken, nil)\n                }\n            }\n        }\n    }\n```\n\nNext we will add the `signup` method, this will call the API to create a user and then it will log the user in and fetch the Chatkit token for that user:\n\n``` swift\n    func signup(request: Signup.Request, completionHandler: @escaping (User?, UsersStoreError?) -\u003e Void) {\n        let params: Parameters = [\n            \"name\": request.name,\n            \"email\": request.email,\n            \"password\": request.password\n        ]\n        \n        postRequest(\"/api/users/signup\", params: params, headers: nil) { data in\n            guard data != nil else {\n                return completionHandler(nil, UsersStoreError.CannotSignup)\n            }\n            \n            let response = Signup.Response(data: data!)\n            CurrentUserIDDataStore().setID(CurrentUserID(id: response.user?.chatkit_id))\n            \n            let request = Login.Account.Request(\n                email: request.email, \n                password: request.password\n            )\n            \n            self.login(request: request) { token, error in\n                guard error == nil else {\n                    return completionHandler(nil, UsersStoreError.CannotLogin)\n                }\n                \n                DispatchQueue.main.async {\n                    completionHandler(response.user, nil)\n                }\n            }\n        }\n    }\n```\n\nThe next method to add is the `fetchChatkitToken`. It fetches the Chatkit token from the API:\n\n``` swift\n    func fetchChatkitToken(request: Login.Chatkit.Request, completionHandler: @escaping (ChatkitToken?, UsersStoreError?) -\u003e Void) {\n        let headers = authorizationHeader(token: request.token.access_token!)\n        \n        postRequest(\"/api/chatkit/token\", params: nil, headers: headers) { data in\n            guard data != nil else {\n                return completionHandler(nil, UsersStoreError.CannotFetchChatkitToken)\n            }\n            \n            DispatchQueue.main.async {\n                let response = Login.Chatkit.Response(data: data!)\n                completionHandler(response.token, nil)\n            }\n        }\n    }\n```\n\nThe last two methods to add will be helpers, the `postRequest` and `authorizationHeader` methods:\n\n``` swift\n    private func postRequest(_ url: String, params: Parameters?, headers: HTTPHeaders?, completion: @escaping([String:Any]?) -\u003e Void) {\n        let enc = JSONEncoding.default\n        let url = AppConstants.ENDPOINT + url\n        \n        Alamofire\n            .request(url, method: .post, parameters:params, encoding:enc, headers:headers)\n            .validate()\n            .responseJSON { response in\n                switch (response.result) {\n                case .success(let data): completion((data as! [String:Any]))\n                case .failure(_): completion(nil)\n            }\n        }\n    }\n    \n    private func authorizationHeader(token: String?) -\u003e HTTPHeaders {\n        let accessToken = (token == nil) \n            ? UserTokenDataStore().getToken().access_token \n            : token\n        \n        return [\"Authorization\": \"Bearer \\(accessToken!)\"]\n    }\n```\n\nThe first method is a wrapper around Alamofire and the second method generates a HTTPHeaders array where we specify the token to send along with requests to the API.\n\nNow you can run the application in the emulator and it should work.\n\nIf you are running the API server locally XCode might not allow you to make requests to the local server. You can get around this by adding `App Transport Security Settings` to your `Info.plist` file and set `Allow Artibrary Loads` to `YES`.\n\n![Create-iOS-Chat-App-Using-Chatkit-allow-arbitrary-loads](//images.ctfassets.net/1es3ne0caaid/4ZHA4yRh4ss2SEY4GeMKSm/0d2667e4f46fb35c26aff64b96aab1a8/Create-iOS-Chat-App-Using-Chatkit-allow-arbitrary-loads.png)\n\n## Conclusion\n\nIn this part we were able to create the iOS application. \n\nThe source code to the application built in this series is available on [GitHub](https://github.com/neoighodaro/sample-chatroom-ios-chatkit).","metaTitle":"Build an iOS chat app using Swift and Chatkit - Part 3","metaDescription":"This tutorial series provides a detailed walkthrough of how to create a chat app for iOS, with a Laravel API backend. In this article you will create the iOS app. By the end of this section you will have a working chat app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"34QrjBOqpOcEcGQCssMcsS","type":"Entry","createdAt":"2018-06-06T10:51:18.709Z","updatedAt":"2020-06-19T12:51:14.059Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo feed with Go and Vue.js","url":"photo-feed-go-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-photofeed-pusher-go","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-06-04","description":"Build a photo feed application using Go, Vue.js and SQLite. Users can post pictures, and see each others' images appear in realtime.","prerequisite":"You will need Go and SQLite installed on your machine, as well as basic knowledge of Go and JavaScript.","content":"Many social media based applications allow users to upload photos and these photos are usually displayed in a timeline for their followers and others to see. In the past, you would have had to refresh your feed manually to see new photos uploaded to the timeline. However, with modern web technologies, you can see the updates in realtime without having to refresh the page manually.\n\nIn this article, we will consider how you can build a realtime photo feed using Pusher Channels, GO and a little Vue.js. [Pusher Channels](https://pusher.com) helps you “easily build scalable in-app notifications, chat, realtime graphs, geotracking and more in your web \u0026 mobile apps with our hosted pub/sub messaging API.”\n\nThis is a preview of what we will be building:\n\n![go-photo-feed-demo](//images.ctfassets.net/1es3ne0caaid/5vVy2T7aY8qoOiCuA8oGQK/abdfe10038a2935fa4a894296db6630d/go-photo-feed-demo.gif)\n\n## Prerequisites\n\nBefore we start building our application, make sure you have:\n\n- Basic knowledge of the [Go](https://golang.org/) programming language.\n- Basic JavaScript (Vue.js) knowledge.\n- Go (version \u003e= 0.10.x) installed on your machine. Check out the [installation guide](https://golang.org/doc/install).\n- SQLite (version \u003e= 3.x) installed on your machine.\n\nLet’s get started.\n\n\n## Getting a Pusher Channels application\n\nThe first step will be to get a Pusher Channels application. We will need the application credentials for our realtime features to work.\n\nGo to the Pusher website and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article.\n\n![go-photo-feed-app-keys](//images.ctfassets.net/1es3ne0caaid/5mwD9r7FFmWugK6AyY08Ga/fdff5e30849724654dd10c6a5f3de29a/go-photo-feed-app-keys.png)\n\nNow that we have our application, let’s move on to the next step\n\n## Creating our Go application\n\nThe next thing we want to do is create the Go application. In your terminal, `cd` to your `$GOPATH` and create a new directory there.\n\n```\n    $ cd $GOPATH/src\n    $ mkdir gofoto\n    $ cd gofoto\n```\n\n\u003e 💡  It is recommended that you place the source code for your project in the `src` subdirectory (e.g., `$GOPATH/src/your_project` or `$GOPATH/src/github.com/your_github_username/your_project`.\n\nNext, we will create some directories to organize our application a little:\n\n```\n    $ mkdir database\n    $ mkdir public\n    $ mkdir public/uploads\n```\n\nThis will create a `database` and `public` directory, and also an `uploads` directory inside the public directory. We will store our database file inside the `database` directory, we will keep our public files: HTML and images, inside the `public` and `uploads` directory. Create a new `index.html` file in the `public` directory that was created.\n\nNow let’s create our first (and only) Go file for this article. We will try to keep everything simple by placing all our source code in a single file. Create a `main.go` file in the project root.\n\nIn the file paste the following:\n\n``` go\n    package main\n    \n    import (\n        \"database/sql\"\n        \"io\"\n        \"net/http\"\n        \"os\"\n        \n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/middleware\"\n        _ \"github.com/mattn/go-sqlite3\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n```\n\nAbove we have imported some packages we will be needing to work on our photo feed. We need the `database/sql` to run SQL queries, the `io` and `os` package for our file uploading process, and the `net/http` for our HTTP status codes.\n\nWe have some other external packages we imported. The `labstack/echo` package is the [Echo framework](https://github.com/labstack/echo) that we will be using. We also have the `mattn/go-sqlite3` package which is for SQLite. Finally, we imported the `pusher/pusher-http-go` package which we will use to trigger events to Pusher Channels.\n\n### Importing external Go packages\nBefore we continue, let’s pull in these packages using our terminal. Run the following commands below to pull the packages in:\n\n```\n    $ go get github.com/labstack/echo\n    $ go get github.com/labstack/echo/middleware\n    $ go get github.com/mattn/go-sqlite3\n    $ go get github.com/pusher/pusher-http-go\n```\n\n\u003e Note that the commands above will not return any confirmation output when it finishes installing the packages. If you want to confirm the packages were indeed installed you can just check the `$GOPATH/src/github.com` directory.\n\nNow that we have pulled in our packages, let’s create the `main` function. This is the function that will be the entry point of our application. In this function, we will set up our applications database, middleware, and routes.\n\nOpen the `main,go` file and paste the following code:\n\n``` go\n    func main() {\n        db := initialiseDatabase(\"database/database.sqlite\")\n        migrateDatabase(db)\n        \n        e := echo.New()\n    \n        e.Use(middleware.Logger())\n        e.Use(middleware.Recover())\n    \n        e.File(\"/\", \"public/index.html\")\n        e.GET(\"/photos\", getPhotos(db))\n        e.POST(\"/photos\", uploadPhoto(db))\n        e.Static(\"/uploads\", \"public/uploads\")\n    \n        e.Logger.Fatal(e.Start(\":9000\"))\n    }\n```\n\nIn the code above, we instantiated our database using the file path to the database file. This will create the SQLite file if it did not already exist. We then run the `migrateDatabase` function which migrates the database.\n\nNext, we instantiate Echo and then register some middlewares. The [logger middleware](https://echo.labstack.com/middleware/logger) is helpful for logging information about the HTTP request while the [recover middleware](https://echo.labstack.com/middleware/recover) “recovers from panics anywhere in the chain, prints stack trace and handles the control to the centralized [HTTPErrorHandler](https://echo.labstack.com/guide/customization#http-error-handler).”\n\nWe then set up some routes to handle our requests. The first handler is the `File` handler. We use this to serve the `index.html` file. This will be the entry point to the application from the frontend. We also have the `/photos` route which accepts a `POST` and `GET` request. We need these routes to act like API endpoints that are used for uploading and displaying the photos. The final handler is `Static`. We use this to return static files that are stored in the `/uploads` directory.\n\nWe finally use `e.Start` to start our Go web server running on port 9000. The port is not set in stone and you can choose any available and unused port you feel like.\n\nAt this point, we have not created most of the functions we referenced in the `main` function so let’s do so now.\n\n### Creating our database management functions\n\nIn the `main` function we referenced an `initialiseDatabase` and `migrateDatabase` function. Let’s create them now. In the `main.go` file, paste the following functions above the `main` function:\n\n``` go\n    func initialiseDatabase(filepath string) *sql.DB {\n        db, err := sql.Open(\"sqlite3\", filepath)\n        if err != nil || db == nil {\n            panic(\"Error connecting to database\")\n        }\n     \n        return db\n    }\n    \n    func migrateDatabase(db *sql.DB) {\n        sql := `\n            CREATE TABLE IF NOT EXISTS photos(\n                    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n                    src VARCHAR NOT NULL\n            );\n       `\n       \n        _, err := db.Exec(sql)\n        if err != nil {\n            panic(err)\n        }\n    }\n```\n\nIn the `initialiseDatabase` function, we create an instance of the SQLite database using the database file and return that instance. In the `migrateDatabase` function, we use the instance of the database returned in the previous function to execute the migration SQL.\n\nLet’s create the data structure for our photo and photo collection.\n\n### Creating our data structures\n\nThe next thing we will do is create the data structure for our object types. We will create a `Photo` structure and a `PhotoCollection` structure. The `Photo` struct will define how a typical photo will be represented while the `PhotoCollection` will define how a collection of photos will be represented.\n\nOpen the `main.go` file and paste the following code above the `initialiseDatabase` function:\n\n``` go\n    type Photo struct {\n        ID  int64  `json:\"id\"`\n        Src string `json:\"src\"`\n    }\n    \n    type PhotoCollection struct {\n        Photos []Photo `json:\"items\"`\n    }\n```\n\n### Creating our route handler functions\n\nNext let’s create the functions for our routes. Open the `main.go` file and paste the following file inside it:\n\n```go\n    func getPhotos(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            rows, err := db.Query(\"SELECT * FROM photos\")\n            if err != nil {\n                panic(err)\n            }\n            \n            defer rows.Close()\n    \n            result := PhotoCollection{}\n    \n            for rows.Next() {\n                photo := Photo{}\n                \n                err2 := rows.Scan(\u0026photo.ID, \u0026photo.Src)\n                if err2 != nil {\n                    panic(err2)\n                }\n    \n                result.Photos = append(result.Photos, photo)\n            }\n    \n            return c.JSON(http.StatusOK, result)\n        }\n    }\n    \n    func uploadPhoto(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            file, err := c.FormFile(\"file\")\n            if err != nil {\n                return err\n            }\n            \n            src, err := file.Open()\n            if err != nil {\n                return err\n            }\n    \n            defer src.Close()\n    \n            filePath := \"./public/uploads/\" + file.Filename\n            fileSrc := \"http://127.0.0.1:9000/uploads/\" + file.Filename\n    \n            dst, err := os.Create(filePath)\n            if err != nil {\n                panic(err)\n            }\n    \n            defer dst.Close()\n    \n            if _, err = io.Copy(dst, src); err != nil {\n                panic(err)\n            }\n    \n            stmt, err := db.Prepare(\"INSERT INTO photos (src) VALUES(?)\")\n            if err != nil {\n                panic(err)\n            }\n    \n            defer stmt.Close()\n    \n            result, err := stmt.Exec(fileSrc)\n            if err != nil {\n                panic(err)\n            }\n    \n            insertedId, err := result.LastInsertId()\n            if err != nil {\n                panic(err)\n            }\n    \n            photo := Photo{\n                Src: fileSrc,\n                ID:  insertedId,\n            }\n    \n            return c.JSON(http.StatusOK, photo)\n        }\n    }\n```\n\nIn the `getPhotos` method, we are simply running the query to fetch all the photos from the database and returning them as a JSON response to the client. In the `uploadPhoto` method we first get the file to be uploaded then upload them to the server and then we run the query to insert a new record in the `photos` table with the newly uploaded photo. We also return a JSON response from that function.\n\n### Adding realtime support to our Go application\n\nThe next thing we want to do is trigger an event when a new photo is uploaded to the server. For this, we will be using the [Pusher Go HTTP library](https://github.com/pusher/pusher-http-go). \n\nIn the `main.go` file paste the following above the type definitions for the `Photo` and `PhotoCollection`:\n\n``` go\n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n```\n\nThis will create a new Pusher client instance. We can then use this instance to trigger notifications to different channels we want. Remember to replace the `PUSHER_APP_*` keys with the keys provided when you created your Pusher application earlier.\n\nNext, go to the `uploadPhoto` function in the `main.go` file and right before the `return` statement at the bottom of the function, paste the following code:\n\n``` go\n    client.Trigger(\"photo-stream\", \"new-photo\", photo)\n```\n\nThis is the code that triggers a new event when a new photo is uploaded to our application.\n\nThat will be all for our Go application. At this point, you can build your application and compile it into a binary using the `go build` command. However, for this tutorial we will just run the binary temporarily:\n\n``` \n    $ go run main.go\n```\n\n![go-photo-feed-go-run](//images.ctfassets.net/1es3ne0caaid/3DPeaIV05GMOGMSUouAaO/ce811f6f30da4b86c8c659f8637fdc3e/go-photo-feed-go-run.png)\n\n## Building our frontend\n\nThe next thing we want to do is build out our frontend. We will be using the [Vue.js framework](https://vuejs.org/) and the [Axios library](https://github.com/axios/axios) to send requests.\n\nOpen the `index.html` file and in there paste the following code:\n\n``` html\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"\u003e\n        \u003ctitle\u003ePhoto Feed\u003c/title\u003e\n        \u003cstyle type=\"text/css\"\u003e\n            #photoFile { display: none; }\n            #app img { max-width: 100%; }\n            .image-row { margin: 20px 0; }\n            .image-row .thumbnail { padding: 2px; border: 1px solid #d9d9d9; }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n        \n            \u003cnav class=\"navbar navbar-expand-lg navbar-light bg-light\"\u003e\n                \u003ca class=\"navbar-brand\" href=\"#\"\u003eGoFoto\u003c/a\u003e\n                \u003cdiv\u003e\n                    \u003cul class=\"navbar-nav mr-auto\"\u003e\n                        \u003cli class=\"nav-item active\"\u003e\n                            \u003ca class=\"nav-link\" v-on:click=\"filePicker\" href=\"#\"\u003eUpload\u003c/a\u003e\n                            \u003cinput type=\"file\" id=\"photoFile\" ref=\"myFiles\" @change=\"upload\" name=\"file\" /\u003e\n                        \u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n            \u003c/nav\u003e\n            \n            \u003cdiv class=\"container\"\u003e\n                \u003cdiv class=\"row justify-content-md-center\" id=\"loading\" v-if=\"loading\"\u003e\n                    \u003cdiv class=\"col-xs-12\"\u003e\n                        Loading photos...\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"row justify-content-md-center image-row\" v-for=\"photo in photos\"\u003e\n                    \u003cdiv class=\"col col-lg-4 col-md-6 col-xs-12\"\u003e\n                        \u003cimg class=\"thumbnail\" :src=\"photo.src\" alt=\"\" /\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \n        \u003c/div\u003e\n        \u003cscript src=\"//js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the HTML file above we have defined the design for our photostream. We are using Bootstrap 4 and we included the CSS in the HTML above. We are also using the Axios library, Pusher library, and Vue framework. We included the links to the scripts at the bottom of the HTML document.\n\nNext let’s add the Vue.js code. In the HTML file, add the following code right before the closing `body` tag:\n\n``` javascript\n    \u003cscript type=\"text/javascript\"\u003e\n        new Vue({\n            el: '#app',\n            data: {\n                photos: [],\n                loading: true,\n            },\n            mounted() {\n                const pusher = new Pusher('PUSHER_APP_KEY', {\n                    cluster: 'PUSHER_APP_CLUSTER',\n                    encrypted: true\n                });\n                \n                let channel = pusher.subscribe('photo-stream')\n                \n                channel.bind('new-photo', data =\u003e this.photos.unshift(data));\n                \n                axios.get('/photos').then(res =\u003e {\n                    this.loading = false\n                    this.photos = res.data.items ? res.data.items : []\n                })\n            },\n            methods: {\n                filePicker: function () {\n                    let elem = document.getElementById('photoFile');\n                    \n                    if (elem \u0026\u0026 document.createEvent) {\n                        let evt = document.createEvent(\"MouseEvents\");\n                        evt.initEvent(\"click\", true, false);\n                        elem.dispatchEvent(evt);\n                    }\n                },\n                upload: function () {\n                    let data = new FormData();\n                    data.append('file', this.$refs.myFiles.files[0]);\n    \n                    axios.post('/photos', data).then(res =\u003e console.log(res))\n                }\n            }\n        });\n    \u003c/script\u003e\n```\n\nAbove we created a Vue instance and stored the properties `photos` and `loading`. The `photos` property stores the photo list and the `loading` just holds a boolean that indicates if the photos are loading or not.\n\nIn the `mounted` method we create an instance of our Pusher library. We then listen on the `photo-stream` channel for the `new-photo` event. When the event is triggered we append the new photo from the event to the `photos` list. We also send a GET request to `/photos` to fetch all the photos from the API. Replace the `PUSHER_APP_*` keys with the one from your Pusher dashboard.\n\nIn the `methods` property, we added a few methods. The `filePicker` is triggered when the ‘Upload’ button is pressed on the UI. It triggers a file picker that allows the user to upload photos. The `upload` method takes the uploaded file and sends a POST request with the file to the API for processing. \n\nThat’s all for the frontend, you can save the file and head over to your web browser. Visit http://127.0.0.1:9000 to see your application in action.\n\nHere’s how it will look again:\n\n![go-photo-feed-demo](//images.ctfassets.net/1es3ne0caaid/5vVy2T7aY8qoOiCuA8oGQK/abdfe10038a2935fa4a894296db6630d/go-photo-feed-demo.gif)\n\n## Conclusion\n\nIn this article, we have been able to demonstrate how you can use Pusher Channels in your Go application to provide realtime features for your application. As seen from the code samples above, it is very easy to get started with Pusher Channels. Check the [documentation](https://pusher.com/docs) to see other ways you can use Pusher Channels to provide realtime features to your users.\n\nThe source code for this application is available on [GitHub](https://github.com/neoighodaro/realtime-photofeed-pusher-go).","metaTitle":"Build a photo feed with Go and Vue.js","metaDescription":"This short tutorial shows how to add realtime functionality to a Go web app. Use Go, Vue.js and SQLite to create a simple photo feed."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XaCS1RWmcC6OQCW2OSceE","type":"Entry","createdAt":"2018-06-06T10:53:29.784Z","updatedAt":"2020-06-19T12:38:38.352Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live comments feed with Go and Vue.js","url":"live-comments-go-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-comments-go-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-06-04","description":"Build a simple comments feed using Go, Vue.js and SQLite. Users can comment on a post, with the comments feed updating instantly.","prerequisite":"You will need Go, and SQLite installed on your machine. Basic knowledge of Go and JavaScript will be helpful.","content":"The internet is a breeding ground for all kinds of social activities because it expands the possibilities of communication. In order to keep web applications social and enjoyable, it is important for them to have one or more interfaces for the users to interact through. One such interface is the comment section. \n\nThe comment section is where users can discuss a subject (post, video, picture) that they have access to. In the past, for a user to see a comment from another user, the user would have to refresh the browser window. However, with realtime comments now we can automatically pull in comments live. This article will cover how we can build realtime commenting using Pusher.\n\nBy the end of this article, we will have built an application that looks like this:\n\n![go-comments-demo](//images.ctfassets.net/1es3ne0caaid/3dhebYl8aAm4cCME4Os2ys/4d39432a0bd39156cf8556c15649a2f1/go-comments-demo.gif)\n\n## Requirements\n\nTo follow along with this article, you will need the following:\n\n- Go (version \u003e= 0.10.x) installed on your computer. Heres how you can [install Go](https://golang.org/doc/install).\n- SQLite (v3.x) installed on your machine. [Installation guide](http://www.sqlitetutorial.net).\n- Basic knowledge of the Go programming language.\n- Basic knowledge of JavaScript (ES6).\n- Basic knowledge of Vue.js.\n\n## Getting a Pusher Channels application\n\nThe first step will be to get a Pusher Channels application. We will need the application credentials for our realtime features to work.\n\nGo to the Pusher website and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article.\n\n![go-comments-app-keys](//images.ctfassets.net/1es3ne0caaid/2h3e4hp58cIW6acMc8Mgy0/dfeac8f3cdffb41174e93ad567233cd0/go-comments-app-keys.png)\n\nNow that we have our application, let’s move on to the next step.\n\n## Setting up the codebase\n\nLet’s start by navigating into the `src` directory located in the `$GOPATH`. Then we’ll create a new directory for our app there.\n\n```\n    $ cd $GOPATH/src\n    $ mkdir go-realtime-comments\n    $ cd go-realtime-comments\n```\n\nCreate a `comments.go` file in this directory.\n\nBefore we write code, we need to import a few Go packages that will help run our projects. We will install the [Echo framework](https://echo.labstack.com) and the [SQLite packages](https://github.com/mattn/go-sqlite3). Run the following commands to pull in the packages:\n\n```\n    $ go get github.com/labstack/echo\n    $ go get github.com/labstack/echo/middleware\n    $ go get github.com/mattn/go-sqlite3\n```\n\n\u003e ⚠️  If you use Windows and you encounter the error ‘cc.exe: sorry, unimplemented: 64-bit mode not compiled in ‘, then you need a Windows gcc port, such as https://sourceforge.net/projects/mingw-w64/. Also see this [GitHub issue](https://github.com/mattn/go-sqlite3/issues/297).\n\nWith your favorite editor, open the `comments.go` file and paste in the following lines of code:\n\n``` go\n    package main\n    \n    import (\n        // \"database/sql\"\n    \n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/middleware\"\n        // _ \"github.com/mattn/go-sqlite3\"\n    )\n```\n\n\n## Configuring the database and routes\n\nEvery Go application must have a `main` function. This is where the execution of the application will start from, so let’s create our `main` function:\n\nIn the `comments.go` file, add the following below the imports:\n\n``` go\n    func main() {\n    \n        // Echo instance\n        e := echo.New()\n        \n        // Middleware\n        e.Use(middleware.Logger())\n        e.Use(middleware.Recover())\n            \n        // Define the HTTP routes\n        e.GET(\"/comments\", func(c echo.Context) error {\n            return c.JSON(200, \"GET Comments\")\n        })\n        \n        e.POST(\"/comment\", func(c echo.Context) error {\n            return c.JSON(200, \"POST a new Comment\")\n        })\n        \n        // Start server\n        e.Logger.Fatal(e.Start(\":9000\"))\n    }\n```\n\nIn the main function, we have defined some basic route handler functions, these functions basically return hard coded text to browser on request. The last line will start Go’s standard HTTP server using Echo’s start method and listen for requests port 9000.\n\nWe can test that the application works at this stage by running it and making some requests using [Postman](https://www.getpostman.com/).\n\nHere is how you can run the application:\n\n```\n    $ go run ./comments.go\n```\n\nWe can send HTTP requests using Postman. Here’s a sample GET request using Postman:\n\n![go-comments-get-example](//images.ctfassets.net/1es3ne0caaid/1hOAHfzR8C2SocUciKSaEi/de4455b61abfaed1da7f612a6b1c75f6/go-comments-get-example.png)\n\nPOST request with Postman:\n\n![go-comments-post-example](//images.ctfassets.net/1es3ne0caaid/1uCCDXGXBeus4mSKgSKYoi/a66e13b4921d54b799a3ceae40c2b4d1/go-comments-post-example.png)\n\nWe will create a function that will initialize a database and for that we need the SQL and SQLite3 drivers. We already added them to the `import` statement so uncomment them. We will also create a function that will migrate the database using a database schema defined inside the function.\n\nOpen the `comments.go` file and paste the following code before the `main` function:\n\n``` go\n    func initDB(filepath string) *sql.DB {\n        db, err := sql.Open(\"sqlite3\", filepath)\n        if err != nil {\n            panic(err)\n        }\n    \n        if db == nil {\n            panic(\"db nil\")\n        }\n        return db\n    }\n    \n    func migrate(db *sql.DB) {\n        sql := `\n        CREATE TABLE IF NOT EXISTS comments(\n                id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n                name VARCHAR NOT NULL,\n                email VARCHAR NOT NULL,\n                comment VARCHAR NOT NULL\n        );\n       `\n        _, err := db.Exec(sql)\n        if err != nil {\n            panic(err)\n        }\n    }\n```\n\nNext add the following code to the top of the `main` function:\n\n``` go\n    // [...]\n    \n    // Initialize the database\n    db := initDB(\"storage.db\")\n    migrate(db)\n    \n    // [...]\n```\n\nWe can now check that these functions are being called and the database is created during execution by running the application:\n\n```\n    go run comments.go\n```\n\n\u003e ⚠️  If you were already running the Go application you would need to kill the process using ctrl+c on your keyboard and then restart it to see changes.\n\nWhen the application is run for the first time, a `storage.db` file will be created in the working directory if it did not previously exist.\n\n\n## Setting up the handlers\n\nWe have tested that our application listens on the specified port 9000 and handles the HTTP requests as we configured it to. However, the current handler functions simply return hard-coded text to the browser so let’s create new handler functions to handle responses to the routes.\n\nCreate a new folder in the root directory named `handlers`:\n\n```\n    $ mkdir handlers\n    $ cd handlers\n```\n\nNext create a `handlers.go` file and paste the following:\n\n``` go\n    package handlers\n    \n    import (\n        \"database/sql\"\n        \"go-realtime-comments/models\"\n        \"net/http\"\n        \"github.com/labstack/echo\"\n    )\n```\n\nNow we need to go back to the `comments.go` file and import the handlers package:\n\n```\n    import (\n        \"go-realtime-comments/handlers\"\n    \n        // [...]\n    )\n```\n\nIn the same file, replace the route definitions from earlier with the ones below:\n\n``` go\n    // [...]\n    \n    // Define the HTTP routes\n    e.File(\"/\", \"public/index.html\")\n    e.GET(\"/comments\", handlers.GetComments(db))\n    e.POST(\"/comment\", handlers.PushComment(db))\n    \n    // [...]\n```\n\nNext paste the following code in the `handlers.go` file below the import statement:\n\n``` go\n    type H map[string]interface{}\n    \n    //GetComments handles the HTTP request that hits the /comments endpoint\n    func GetComments(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            return c.JSON(http.StatusOK, models.GetComments(db))\n        }\n    }\n    \n    func PushComment(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            var comment models.Comment\n    \n            c.Bind(\u0026comment)\n    \n            id, err := models.PushComment(db, comment.Name, comment.Email, comment.Comment)\n            if err == nil {\n                return c.JSON(http.StatusCreated, H{\n                    \"created\": id,\n                })\n            }\n            \n            return err\n        }\n    }\n```\n\nThe `GetComments` function fetches and returns comments from the database while the  `PushComment` saves comments to the database and returns a response.\n\n\n## Setting up the models\n\nTo create the model package, we need to create a new folder in the root directory of our application:\n\n```\n    $ mkdir models\n    $ cd models\n```\n\nNext create a `models.go` file and paste the following code:\n\n``` go\n    package models\n    \n    import (\n        \"database/sql\"\n        _ \"github.com/mattn/go-sqlite3\"\n    )\n```\n\nLet’s create a Comment `type`, which is a struct with four fields:\n\n- `ID` - the ID of the comment.\n- `Name` - the username of the user who made the comment.\n- `Email` - the email of the user who made the comment.\n- `Comment` - the comment.\n\nIn Go, we can add metadata to variables by putting them within backticks. We can use this to define what each field should look like when converted to `JSON`. This will also help the `c.Bind` function know how to map `JSON` data when registering a new comment.\n\nLet’s define the structs for `Comment` and `CommentCollection`. In the `models.go` file paste in the following below the imports:\n\n``` go\n    type Comment struct {\n        ID      int    `json:\"id\"`\n        Name    string `json:\"name\"`\n        Email   string `json:\"email\"`\n        Comment string `json:\"comment\"`\n    }\n    \n    type CommentCollection struct {\n        Comments []Comment `json:\"items\"`\n    }\n```\n\nNext, paste in the following code after the structs:\n\n``` go\n    func GetComments(db *sql.DB) CommentCollection {\n        sql := \"SELECT * FROM comments\"\n        rows, err := db.Query(sql)\n    \n        if err != nil {\n            panic(err)\n        }\n    \n        defer rows.Close()\n    \n        result := CommentCollection{}\n    \n        for rows.Next() {\n    \n            comment := Comment{}\n            err2 := rows.Scan(\u0026comment.ID, \u0026comment.Name, \u0026comment.Email, \u0026comment.Comment)\n            if err2 != nil {\n                panic(err2)\n            }\n    \n            result.Comments = append(result.Comments, comment)\n        }\n    \n        return result\n    }\n```\n\nThe `GetComments` function is responsible for retrieving all the available comments from the database and returning them as an instance of the `CommentCollection` that we defined. \n\nNext, paste in the following code below the one above:\n\n``` go\n    func PushComment(db *sql.DB, name string, email string, comment string) (int64, error) {\n        sql := \"INSERT INTO comments(name, email, comment) VALUES(?, ?, ?)\"\n        stmt, err := db.Prepare(sql)\n        if err != nil {\n            panic(err)\n        }\n    \n        defer stmt.Close()\n    \n        result, err2 := stmt.Exec(name, email, comment)\n        if err2 != nil {\n            panic(err2)\n        }\n    \n        return result.LastInsertId()\n    }\n```\n\nThe `PushComments` function adds a new comment to the database.\n\n\n## Building the frontend\n\nNext, create a `public` folder in our application’s root directory and create an `index.html` file inside it. \n\nOpen the `index.html` file and paste in this code:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e\n        \u003ctitle\u003eRealtime comments\u003c/title\u003e\n        \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cstyle\u003e\n          @media (min-width: 48em) {\n            html {\n              font-size: 18px;\n            }\n          }\n          body {\n            font-family: Georgia, \"Times New Roman\", Times, serif;\n            color: #555;\n          }\n          h1, .h1, h2, .h2, h3, .h3, h4, .h4, h5, .h5, h6, .h6 {\n            font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n            font-weight: 400;\n            color: #333;\n          }\n          .blog-masthead {\n            margin-bottom: 3rem;\n            background-color: #428bca;\n            box-shadow: inset 0 -.1rem .25rem rgba(0,0,0,.1);\n          }\n          .nav-link {\n            position: relative;\n            padding: 1rem;\n            font-weight: 500;\n            color: #cdddeb;\n          }\n          .nav-link:hover, .nav-link:focus {\n            color: #fff;\n            background-color: transparent;\n          }\n          .nav-link.active {\n            color: #fff;\n          }\n          .nav-link.active::after {\n            position: absolute;\n            bottom: 0;\n            left: 50%;\n            width: 0;\n            height: 0;\n            margin-left: -.3rem;\n            vertical-align: middle;\n            content: \"\";\n            border-right: .3rem solid transparent;\n            border-bottom: .3rem solid;\n            border-left: .3rem solid transparent;\n          }\n          @media (min-width: 40em) {\n            .blog-title {\n              font-size: 3.5rem;\n            }\n          }\n          .sidebar-module {\n            padding: 1rem;\n          }\n          .sidebar-module-inset {\n            padding: 1rem;\n            background-color: #f5f5f5;\n            border-radius: .25rem;\n          }\n          .sidebar-module-inset p:last-child,\n          .sidebar-module-inset ul:last-child,\n          .sidebar-module-inset ol:last-child {\n            margin-bottom: 0;\n          }\n          .blog-post {\n            margin-bottom: 4rem;\n          }\n          .blog-post-title {\n            margin-bottom: .25rem;\n            font-size: 2.5rem;\n            text-align: center;\n          }\n          .blog-post-meta {\n            margin-bottom: 1.25rem;\n            color: #999;\n            text-align: center;\n          }\n          .blog-footer {\n            padding: 2.5rem 0;\n            color: #999;\n            text-align: center;\n            background-color: #f9f9f9;\n            border-top: .05rem solid #e5e5e5;\n          }\n          .blog-footer p:last-child {\n            margin-bottom: 0;\n          }\n          input{\n              width: 45% !important;\n              display: inline-block !important;\n          }\n          textarea {\n              width: 90%;\n              height: 150px;\n              padding: 12px 20px;\n              box-sizing: border-box;\n              border: 2px solid #ccc;\n              border-radius: 4px;\n              background-color: #f8f8f8;\n              resize: none;\n          }\n          textarea:focus, input:focus{\n              outline: none !important;\n          }\n          #comment-section{\n            background: rgb(178, 191, 214); \n            padding: 0.5em 2em; width: 90%;\n            margin: 10px 0;\n            border-radius: 15px;\n          }\n          #comment-section \u003e div \u003e p {\n            color: black;\n            display:inline;\n          }\n          img{\n          border-radius: 50%;\n          float: left;\n          }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \u003cdiv id=\"app\"\u003e\n        \u003cheader\u003e\n            \u003cdiv class=\"blog-masthead\"\u003e\n              \u003cdiv class=\"container\"\u003e\n                \u003cnav class=\"nav\"\u003e\n                  \u003ca class=\"nav-link active\" href=\"#\"\u003eHome\u003c/a\u003e\n                \u003c/nav\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/header\u003e\n    \n          \u003cmain role=\"main\" class=\"container\"\u003e\n    \n            \u003cdiv class=\"row\"\u003e\n    \n              \u003cdiv class=\"col-sm-12 blog-main\"\u003e\n    \n                \u003cdiv class=\"blog-post\"\u003e\n                  \u003ch2 class=\"blog-post-title\"\u003eRealtime Comments With Pusher\u003c/h2\u003e\n                  \u003cp class=\"blog-post-meta\"\u003eJanuary 1, 2018 by \u003ca href=\"#\"\u003eJordan\u003c/a\u003e\u003c/p\u003e\n                  \u003cp\u003eThis blog post shows a few different types of content that's supported and styled with Bootstrap. Basic typography, images, and code are all supported.This blog post shows a few different types of content that's supported and styled with Bootstrap. Basic typography, images, and code are all supported\n                  \u003c/p\u003e\n                  \u003cdiv class=\"comment-section\"\u003e\n            \u003cform class=\"form-signin\"\u003e\n            \u003ch5 class=\"comment\"\u003eComment\u003c/h5\u003e\n            \u003cinput type=\"username\" ref=\"username\" class=\"form-control\" placeholder=\"John Doe\" required autofocus\u003e\n            \u003cinput type=\"email\" ref=\"email\" class=\"form-control\" placeholder=\"Johndoe@gmail.com\" required\u003e\n            \u003ctextarea ref=\"comment\"\u003e\u003c/textarea\u003e\n            \u003cbutton class=\"btn btn-lg btn-primary\" @click.prevent=\"sendComment\" type=\"submit\"\u003eComment\u003c/button\u003e\n          \u003c/form\u003e\n          \u003cbr\u003e\n          \u003cdiv id=\"comment-section\" v-for=\"comment in comments\"\u003e\n            \u003cdiv\u003e\n              \u003cimg src=\"http://merritos.com/img/team/maleTeam.jpg\" width=\"65px\" height=\"65px\"\u003e\n               \u003cp\u003e\u0026nbsp;\u0026nbsp;{{comment.name}} \u0026nbsp;\u003c {{comment.email}} \u003e\u003c/p\u003e\n               \u003chr\u003e\n            \u003c/div\u003e\n            \u003cp style=\"color:black\"\u003e{{comment.comment}}\u003c/p\u003e\n          \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n    \n            \u003c/div\u003e\n    \n          \u003c/main\u003e\n    \n          \u003cfooter class=\"blog-footer\"\u003e\n            \u003cp\u003e\u003ca href=\"#\"\u003eBack to top\u003c/a\u003e\u003c/p\u003e\n          \u003c/footer\u003e\n    \n        \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNow in the same file, paste the following code before the closing `body` tag of the HTML:\n\n``` javascript\n    \u003cscript\u003e\n      var app = new Vue({\n        el: '#app',\n        data: {\n          comments : []\n        },\n        created: function() {\n          axios.get('/comments').then(response =\u003e { \n            this.comments = response.data.items ? response.data.items : [] \n          })\n        },\n        methods: {\n            sendComment: function(index) {\n              let comment = {\n                name: this.$refs.username.value,\n                email: this.$refs.email.value,\n                comment: this.$refs.comment.value\n              }\n              \n              axios.post('/comment', comment).then(response =\u003e { \n                this.$refs.username.value = '',\n                this.$refs.email.value = '',\n                this.$refs.comment.value = ''\n              })\n            }\n        }\n      })\n    \u003c/script\u003e\n```\n\nAbove we have the Vue.js code for our application and this is a summary of what it does:\n\n\n- We instantiate a comments array that will hold all the available comments.\n- In the `created()` method, we use [Axios](https://www.npmjs.com/package/axios) to pull in all the comments available from the API and store it in the `comments` array.\n- In the `sendComment` method, we send a request to the API to create a new `comment`.\n\nWe can build our application at this stage and visit http://localhost:9000, we should see this:\n\n```\n    $ go run comments.go\n```\n\nOur application should display like this:\n\n![go-comments-homepage](//images.ctfassets.net/1es3ne0caaid/2m7H3gsZCMIkEKGueSEuK/d014e440249b413da2ed8f509d91eae1/go-comments-homepage.png)\n\n### Making comments display in realtime\nThe next thing we need to do is make sure the comments are displayed in realtime. To do this, we need to trigger an event every time a new comment is added. We will do this in the backend using the [Pusher Go library](https://github.com/pusher/pusher-http-go).\n\nTo pull in the Pusher Go library run the following command:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\nNext let’s import the library. In our `models.go` file do the following in the imports statement:\n\n``` go\n    package models\n    \n    import (\n        // [...]\n        \n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n```\n\nIn the same file, before the `type` definition, paste in the following code:\n\n``` go\n    // [...]\n    \n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    // [...]\n```\n\nHere, we have initialized the Pusher client using the credentials from our earlier created app.\n\n\n\u003e ⚠️ Replace `PUSHER_APP_*` keys with your Pusher app credentials.\n\nNext, let’s trigger an event every time a comment is saved to the database. Replace the `PushComment` function with the following code:\n\n``` go\n    func PushComment(db *sql.DB, name string, email string, comment string) (int64, error) {\n        sql := \"INSERT INTO comments(name, email, comment) VALUES(?, ?, ?)\"\n        stmt, err := db.Prepare(sql)\n        if err != nil {\n            panic(err)\n        }\n    \n        defer stmt.Close()\n    \n        result, err2 := stmt.Exec(name, email, comment)\n        if err2 != nil {\n            panic(err2)\n        }\n    \n        newComment := Comment{\n            Name:    name,\n            Email:   email,\n            Comment: comment,\n        }\n    \n        client.Trigger(\"comment-channel\", \"new-comment\", newComment)\n        return result.LastInsertId()\n    }\n```\n\nIn this newer version of the function we create a `newComment` object that holds information for the last comment that was saved to the database. Whenever a new comment is created, we will send it to the Pusher channel `comment-channel` to be triggered on the event `new-comment`.\n\n**Displaying data in realtime on the client**\nTo receive comments we have to register the [Pusher JavaScript Client](https://github.com/pusher/pusher-js) in our frontend code. Add this line of code inside the head tag of our HTML in the index.html file:\n\n```\n    \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n```\n\nNext we will register a Pusher instance in the `created()` life cycle hook:\n\n``` go\n    created: function() {\n    \n        const pusher = new Pusher('PUSHER_APP_KEY', {\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n        \n        const channel = pusher.subscribe('comment-channel');\n        \n        channel.bind('new-comment', data =\u003e {\n          this.comments.push(data)\n        });\n    \n        // [...]    \n    }\n```\n\n\u003e ⚠️  Replace the `PUSHER_APP_*` keys with the credentials for your Pusher application.\n\nIn the code above, we are creating a Pusher instance and then subscribing to a channel. In that channel we are listening for the `new-comment` event.\n\nNow we can run our application:\n\n```\n    $ go run comments.go\n```\n\nWe can point a web browser to this address http://localhost:9000 and we should see the application in action:\n\n![go-comments-demo](//images.ctfassets.net/1es3ne0caaid/3dhebYl8aAm4cCME4Os2ys/4d39432a0bd39156cf8556c15649a2f1/go-comments-demo.gif)\n\n## Conclusion\n\nIn this article, we looked at how to build a realtime comment system using Go, Vue.js, and Pusher Channels. The source code to the application is available on [GitHub.](https://github.com/neoighodaro/realtime-comments-go-pusher)","metaTitle":"Build a live comments feed with Go and Vue.js","metaDescription":"Use Go and Vue.js to create a live comments feed. You will build a simple app, with a sample post. Users will be able to comment on the post and see all users' comments update in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"vduceSq8dEe6MO4sgiis4","type":"Entry","createdAt":"2018-06-01T11:22:55.789Z","updatedAt":"2020-06-19T10:18:58.883Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Add a chat widget to your Gatsby blog","url":"chat-gatsby","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/gatsby-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-06-01","description":"In this tutorial, we’re going to take a look at how we can add a realtime chat feature to a Gatsby blog using Pusher, using React.","prerequisite":"Some knowledge of React will be helpful when following this tutorial.","content":"Gatsby is a static-site generator which uses modern web technologies such as React and Webpack. It can generate blazing-fast static sites from Markdown, JSON, APIs, and CMSs like Wordpress and Drupal. \n\nIn this tutorial, we’re going to take a look at how we can add a realtime chat feature to a Gatsby blog using Pusher. This tutorial assumes that you’re new to Gatsby but have a little bit of knowledge on React.\n\n## What you’ll create\n\nYou’ll be creating a realtime chat component using React and Pusher. This allows visitors of your blog to chat with each other. Each blog post will serve as a unique chat room. This means that messages sent from “blog post A” will only be viewable from that page. Here’s what the final output will look like:\n\n![add-realtime-chat-gatsby-blog-pusher-chat-component](//images.ctfassets.net/1es3ne0caaid/2pKH6jgECs2EQCK2aCMIC6/8bf070a10263637ecb0664062db5f2c5/add-realtime-chat-gatsby-blog-pusher-chat-component.png)\n\nYou can find the source code for this tutorial on this [Github repo](https://github.com/anchetaWern/gatsby-chat).\n\n## Install Gatsby\n\nThe first thing that you need to do is to install the Gatsby command line tool:\n\n```\n    npm install -g gatsby-cli\n```\n\nThis allows you to create a Gatsby site from the command line. \n\nThe gatsby-cli comes with a default template for starting out a Gatsby site, but we’re going to use the [Gatsby starter blog](https://github.com/gatsbyjs/gatsby-starter-blog) instead. This is because the default template doesn’t really come with the plugins that will allow us to build a blog from markdown files. We’re using Markdown since it is the most common format for building static sites.\n\nHere’s how you can tell Gatsby to use the “Gatsby starter blog” as the template:\n\n```\n    gatsby new gatsby-blog https://github.com/gatsbyjs/gatsby-starter-blog\n```\n\nOnce that’s done, you can now start developing using the `develop` command:\n\n```\n    gatsby develop\n```\n\nThis spins up a local server which you can access at `http://localhost:8000` from your browser. This automatically reloads as you make changes to the files in the `src` directory or the config file (`gatsby-config.js`).  \n\n\n## Create a Pusher app\n\nIn order to use Pusher, you first need to create a new Pusher app. Select React as the front-end tech and Node.js as the back-end tech.\n\n![add-realtime-chat-gatsby-blog-pusher-create-pusher-app](//images.ctfassets.net/1es3ne0caaid/DnpnIFLKH60cQEG2MSKcC/25b8e80c5303e66811c2aecd050a74cb/add-realtime-chat-gatsby-blog-pusher-create-pusher-app.png)\n\nIf you don’t have a Pusher account yet, you can [sign up here](https://pusher.com/signup). Pusher's sandbox plan is free and is [very generous](https://dashboard.pusher.com/plans) when it comes to the number of messages you can send. \n\nOnce created, go to the app settings page and enable client events:\n\n![add-realtime-chat-gatsby-blog-pusher-enable-client-events](//images.ctfassets.net/1es3ne0caaid/29xLMdzI8sGAO4C0eoSiYo/1014cbe581653744e62558424d7c8063/add-realtime-chat-gatsby-blog-pusher-enable-client-events.png)\n\nThis allows us to directly send messages from the client-side without server intervention, though Pusher requires an authentication server before client events can be sent. This is a security feature in order to ensure that the users who are sending messages are really genuine users of the app. In the next section, you’ll learn how to create the server.\n\n## Create the auth server\n\nTo create an auth server, start by creating a new folder outside of your Gatsby blog. Once created, navigate inside that directory and install the following packages:\n\n```\n    npm install express body-parser pusher\n```\n\nNext, create a `server.js` file and import the packages you just installed:\n\n``` language-javascript\n    var express = require('express');\n    var bodyParser = require('body-parser');\n    var Pusher = require('pusher');\n    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n```\n\nSince the blog will be on a different domain from the auth server, we need to enable CORS so that it can accept connection from any domain:\n\n``` language-javascript\n    // enable cross-origin resource sharing\n    app.use(function(req, res, next) {\n      res.header(\"Access-Control-Allow-Origin\", \"*\");\n      res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n      next();\n    });\n```\n\nNext, add the code for connecting to Pusher. I’ll explain later how the values for the configuration options are supplied. For now, just know that they’re being loaded as environment variables:\n\n``` language-javascript\n    var pusher = new Pusher({ // connect to pusher\n      appId: process.env.APP_ID, \n      key: process.env.APP_KEY, \n      secret:  process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER, \n    });\n```\n\nNext, add a route for checking if the server is running:\n\n``` language-javascript\n    app.get('/', function(req, res){ // to test if the server is running\n      res.send('all green');\n    });\n```\n\nLastly, add the routes for authenticating users. Later on, the Chat component will hit this route every time a visitor views a blog post:\n\n``` language-javascript\n    // to authenticate users\n    app.post('/pusher/auth', function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n    \n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\nAs you have seen, there’s really no authentication going on. This exposes your Pusher app to potential misuse because anyone can just use your Pusher App ID and it won’t be verified that the request came from your blog.  Here’s some code that will allow you to verify where the request originated from. Add this to your Pusher auth handler, right before the `pusher.authenticate` call to check if the request is valid or not.\n\n``` language-javascript\n    var origin = req.get('origin');\n    if(origin == 'YOUR BLOG DOMAIN NAME OR IP'){\n      // authenticate the request\n    }\n```\n\n## Deploy the auth server\n\nWe’ll be using [*Now*](https://zeit.co/now) to deploy the auth server. You can install it with the following command:\n\n```\n    npm install -g now\n```\n\nNavigate to the folder where you have the `server.js` file and execute `now`. This will ask you to enter and verify your email.\n\nOnce verified, you can add the Pusher app config to [*now’s*](https://zeit.co/blog/environment-variables-secrets) [secrets](https://zeit.co/blog/environment-variables-secrets). Be sure to replace the values on the right side with the actual Pusher app config.\n\n```\n    now secret add gatsby_app_id YOUR_PUSHER_APP_ID\n    now secret add gatsby_app_key YOUR_PUSHER_APP_KEY\n    now secret add gatsby_app_secret YOUR_PUSHER_APP_SECRET\n    now secret add gatsby_app_cluster YOUR_PUSHER_APP_CLUSTER\n```\n\nAfter that, you can already deploy the auth server:\n\n```\n    now -e APP_ID=@gatsby_app_id -e APP_KEY=@gatsby_app_key -e APP_SECRET=@gatsby_app_secret APP_CLUSTER=@gatsby_app_cluster\n```\n\nThe values on the left side (e.g. `APP_ID`) are the names for the environment variable and the values on the right side are the names you gave to the secret (e.g `gatsby_app_id`) earlier. This allows the auth server to access it via  `process.env.APP_ID`.\n\nOnce deployed, you should be able to access the URL returned by *now*. \n\n\n## Create the chat component\n\nNow you’re ready to work with the Chat component. First, navigate inside the Gatsby blog folder and install the dependencies:\n\n```\n    npm install --save pusher-js slugify random-animal-name-generator react-timeago\n```\n\nHere’s a summary of what each one does:\n\n- `pusher-js` - for communicating with Pusher.\n- `slugify` - for creating a machine-friendly channel name for Pusher. \n- `random-animal-name-generator` - for generating a random animal username for each user in the chat room.\n- `react-timeago` - for creating human-friendly timestamps (e.g 3 minutes ago).\n\nOnce everything is installed, create an `index.js` file in the `src/components/Chat` directory. This will serve as the main file for the Chat component. \n\nStart by importing the packages you just installed, as well as the `MessageList` component which we’ll be creating later:\n\n``` javascript\n    import React from 'react';\n    import PropTypes from 'prop-types';\n    \n    import Pusher from 'pusher-js';\n    import slugify from 'slugify';\n    import randomAnimal from 'random-animal-name-generator';\n    \n    import MessageList from './MessageList'; // the component for listing messages\n    import './style.css';\n```\n\nNext, create the Chat component:\n\n``` javascript\n    class Chat extends React.Component {\n    \n      constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this); // for updating the message being typed by the user\n        this.onSubmit = this.onSubmit.bind(this);\n        this.state = {\n          message: '', // the message being typed by the user\n          messages: [] // the messages that will be displayed by the MessageList component\n        }\n    \n        this.user = randomAnimal(); // generate random animal name\n      }\n      // next: add code for componentWillMount()\n    }\n```\n\nJust before the component mounts, connect to Pusher and subscribe to the channel for the current blog post in which the component is used. Later on, we’ll be importing this component in the template used for rendering blog posts. It will then use the title of the blog post as the channel name, which means that each blog post will be a separate chat room. Only those who are currently accessing a specific blog post can send and receive messages on it.\n\n``` javascript\n    componentWillMount() {\n      this.pusher = new Pusher('YOUR-PUSHER-APP-KEY', {\n        authEndpoint: 'https://YOUR-AUTH-SERVER-ENDPOINT',\n        cluster: 'YOUR APP CLUSTER',\n        encrypted: true // whether the connection is encrypted or not\n      });\n      \n      // subscribe to the channel for this specific blog post\n      var channel = 'private-' + slugify(this.props.title);\n      this.post_channel = this.pusher.subscribe(channel);\n    }\n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we want to listen for when a message is sent to the channel we just subscribed to. The function specified as the second argument gets executed every time someone viewing the same blog post sends a message.  When this happens, we update the state so the UI is updated.\n\n``` javascript\n    componentDidMount() {\n      this.post_channel.bind('client-on-message', (message) =\u003e {\n        message.time = new Date(message.time); // convert to a date object since its converted to a string when sending the message\n        // update the state to include the new message\n        this.setState({\n          messages: this.state.messages.concat(message)\n        });\n      });\n    }\n    // next: add render()\n```\n\nNext, render the actual component:\n\n``` javascript\n    render() {  \n      return (\n        \u003cdiv className=\"chatbox\"\u003e\n          \u003cdiv className=\"post-single\"\u003e\n            \n            \u003cdiv className=\"post-single__inner\"\u003e\n              \u003ch1\u003eChat Component\u003c/h1\u003e\n              \u003cform onSubmit={this.onSubmit}\u003e\n                \u003cinput type=\"text\" className=\"text-input\" placeholder=\"Type your message here..\" \n                value={this.state.message} \n                onChange={this.handleChange} /\u003e\n              \u003c/form\u003e\n              {\n                  this.state.messages \u0026\u0026\n                  \u003cMessageList messages={this.state.messages} /\u003e\n              }\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      );\n    }\n    \n    // next: add handleChange() function\n```\n\nUpdate the state when the value of the text field for entering the message changes:\n\n``` javascript\n    handleChange(e) {\n      var message = e.target.value;\n      this.setState({\n        message: message\n      });\n    }\n```\n\nWhen the user presses the *enter* key, get the current value of the text field then create an object containing the name of the user, the message and the time it was sent. Once created, send it using the `trigger` function. This will then cause the event listeners on any other browser tab with the same blog post open to be triggered.\n\n``` javascript\n    onSubmit(e) {\n      e.preventDefault();\n      let text = this.state.message;\n      let message = {\n        by: this.user,\n        body: text,\n        time: new Date()\n      };\n    \n      this.post_channel.trigger('client-on-message', message);\n      this.setState({\n        message: '',\n        messages: this.state.messages.concat(message)\n      });\n    }\n    \n    // next: add prop types\n```\nDon’t forget to specify the required props for this component:\n\n``` javascript\n    Chat.propTypes = {\n      title: PropTypes.string.isRequired\n    };\n    \n    export default Chat;\n```\n\nNext, create the MessageList component. This displays the list of messages sent by the users within a specific blog post:\n\n``` javascript\n    import React from 'react';\n    import ReactDOM from 'react-dom'; // for working with the DOM\n    import PropTypes from 'prop-types';\n    import TimeAgo from 'react-timeago'; // for displaying human-friendly time\n    \n    class MessageList extends React.Component {\n        \n      constructor(props) {\n        super(props);\n        this.renderMessages = this.renderMessages.bind(this);\n      }       \n      // next: add the render() method \n    }\n```\n\nThe `render()` method calls the method for rendering the messages. Below it is a div which acts as the anchor for scrolling to the bottom of the chat component. We’re setting its `ref` to `this.messagesEnd` so we can refer to this particular div whenever we need to scroll to the bottom of the component.\n\n``` javascript\n    render() {\n      \n      return (\n        \u003cdiv className=\"messages\"\u003e\n          { this.renderMessages() }\n          \u003cdiv ref={(el) =\u003e { this.messagesEnd = el; }}\u003e\u003c/div\u003e\n        \u003c/div\u003e\n      );\n      \n    }\n    // next: add the renderMessages() function\n```\n\nThe `renderMessages()` function loops through the array of messages and displays them one by one:\n\n``` javascript\n    renderMessages(){\n      return this.props.messages.map((msg, index) =\u003e {\n        return (\n          \u003cdiv className=\"msg\" key={index}\u003e\n            \u003cdiv className=\"msg-from\"\u003e{msg.by}\u003c/div\u003e\n            \u003cdiv className=\"msg-body\"\u003e{msg.body}\u003c/div\u003e\n            \u003cdiv className=\"msg-time\"\u003e\n               \u003cTimeAgo date={msg.time} minPeriod={60} /\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      });\n    }\n    // next: add the scrollToBottom() function\n```\n\nThe `scrollToBottom()` function selects the div at the bottom of the Chat component and scrolls down to it:\n\n``` javascript\n    scrollToBottom() {\n      const node = ReactDOM.findDOMNode(this.messagesEnd);\n      node.scrollIntoView({ behavior: \"smooth\" });\n    }\n```\n\nEverytime the component is updated, we want to scroll to the bottom of it. This way the latest message is always visible:\n\n``` javascript\n    componentDidUpdate() {\n      this.scrollToBottom();\n    }\n    // next: add prop types\n```\n\nAgain, don’t forget to include the prop types:\n\n``` javascript\n    MessageList.propTypes = {\n      messages: PropTypes.arrayOf(\n        React.PropTypes.shape({\n          by: PropTypes.string.isRequired,\n          body: PropTypes.string.isRequired,\n          time: PropTypes.instanceOf(Date).isRequired\n        })\n      )\n    };\n    \n    export default MessageList;\n```\n\nLastly, create a `style.css` file and add the following:\n\n``` css\n    .chatbox {\n        width: 500px;\n        padding-bottom: 50px;\n        margin: 0 auto;\n    }\n    \n    .text-input {\n        padding: 10px;\n        width: 100%;\n    }\n    \n    .msg {\n        padding: 10px 0;\n        border-bottom: 1px solid #f7f7f7;\n    }\n    \n    .msg-from {\n        font-weight: bold;\n    }\n    \n    .msg-time {\n        font-size: 13px;\n    }\n    \n    .msg-body {\n        font-size: 18px;\n    }\n    \n    .messages {\n        min-height: 0;\n        max-height: 400px;\n        margin-top: 30px;\n        overflow: auto;\n    }\n```\n\n## Add the chat component to blog posts\n\nNow you’re ready to actually add the component to the blog post page. For this particular starter theme, the file you need to edit is `src/templates/blog-post.js`.\n\nAt the top of the file, include the Chat component:\n\n```\n    import Chat from '../components/Chat';\n```\n\nThen render it right after the Bio component, passing in the title of the blog post as a prop:\n\n```\n    \u003cChat title={post.frontmatter.title} /\u003e\n```\n\n## Deploying the blog \n\nWe’re going to use [surge.sh](http://surge.sh/). Surge is a service specifically created for hosting static websites for free. All you have to do is install the Surge command line tool:\n\n```\n    npm install -g surge\n```\n\nNext, tell Gatsby to build the static site:\n\n```\n    gatsby build\n```\n\nOnce it’s done building the site, you can now deploy it using surge:\n\n```\n    surge public your-blogs-name.surge.sh\n```\n\nThe `surge`  command accepts the name of the folder in which the static files are stored, and the domain name as its options. Note that by default you’re stuck in the  `surge.sh` subdomain.\nIf you want to [use a custom domain](http://surge.sh/help/adding-a-custom-domain), you can simply add a CNAME file which contains the custom domain name inside the `public` directory.\n\nOnce it’s done uploading, you may now access the site on the URL that you specified.\n\n## Conclusion\n\nThat’s it! In this tutorial you’ve learned how to create a realtime chat component for your Gatsby blog. As you have seen, adding realtime features to your Gatsby blog is really made simple by using Pusher.","metaTitle":"Add a chat widget to your Gatsby blog","metaDescription":"This tutorial uses React and Pusher to add a realtime chat feature to a Gatsby blog. Gatsby is a static site generator, built with React."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4BqrnGujKEiwsGcSOQ4skm","type":"Entry","createdAt":"2018-05-28T11:23:19.174Z","updatedAt":"2018-06-25T11:23:40.988Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Using MongoDB as a realtime database with change streams","url":"mongodb-change-streams","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/realtime-mongodb-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-05-28","description":"Learn how to use change streams in MongoDB to create a Firebase alternative. The tutorial provides a working example of realtime database updates in action, with a simple task list React app.","prerequisite":"You will need MongoDB 3.6+ and Node.js 6+ installed on your machine. You should have some knowledge of Node and React, and a basic understanding of MongoDB management tasks.","content":"Getting data changes from a database in realtime is not as easy as you may think.\n\n[In a previous tutorial](https://pusher.com/tutorials/realtime-mysql-java), I mentioned there are three main approaches to do this:\n\n- Poll the database every X seconds and determine if something has changed using a timestamp, version number or status field.\n- Use database or application-level triggers to execute a piece of code when something changes.\n- Use the database transaction/replication log, which records every change to the database.\n\nHowever,  in MongoDB, [change streams](https://docs.mongodb.com/manual/changeStreams/) allows you to listen for changes in collections without any complexity.\n\nChange streams are available since MongoDB 3.6 and they work by reading the [oplog](https://docs.mongodb.com/manual/reference/glossary/#term-oplog), a capped collection where all the changes to the data are written and functions as the database replication log.\n\nIn this tutorial, you’re going to learn how to stream, in realtime, the changes made to a collection in a MongoDB database to a React app using a Node.js server. \n\nThe application that you’ll be building allows you to add and delete tasks. It  looks like this:\n\n![realtime-mongodb-change-streams-pusher-demo-app](//images.ctfassets.net/1es3ne0caaid/7o9SkqC3cWeqIIKooOyyQq/762eef0051bf0f5d55ee5384238e998a/realtime-mongodb-change-streams-pusher-demo-app.gif)\n\nUnder the hood, it communicates to an API implemented in Node.js that saves the changes to a database. The Node.js script also receives these changes using change streams, parsing them and publishing them to a Pusher channel so the React application can consume them. \n\nHere’s the diagram that describes the above process:\n\n![realtime-mongodb-change-streams-pusher-diagram preview](//images.ctfassets.net/1es3ne0caaid/3r3Lz24mVOOW0K4YgCIU8Y/fb9e8722de6f92b6e28227c7ab8c29da/realtime-mongodb-change-streams-pusher-diagram_preview.png)\n\nOf course, a scenario where multiple applications are writing to the same database could be more realistic, but for learning purposes, I’ll use a simple application.\n\nIn addition, you’ll see how a solution like this one, could be a good alternative to the realtime database capabilities of Firebase.\n\n## Prerequisites\n\nHere’s what you need to have installed to follow this tutorial:\n\n- MongoDB (version 3.6 or superior)\n- [Node.js](https://nodejs.org/en/download/) (6 or superior)\n- Optionally, a JavaScript editor.\n\nYou’ll need to have knowledge of:\n\n- JavaScript (intermediate level), in particular, Node.js and React.\n- Basic MongoDB management tasks\n\nFor reference, [here is a GitHub repository](https://github.com/eh3rrera/realtime-mongodb-pusher) with all the code shown in this tutorial and instructions to run it.\n\nNow let’s start by creating a Pusher application.\n\n## Creating a Pusher application\n\nIf you haven’t already, create a free account at [Pusher](https://pusher.com/).\n\nThen, go to your [dashboard](https://dashboard.pusher.com/) and create a Channels app, choosing a name, the cluster closest to your location, and optionally, React as the frontend tech and Node.js as the backend tech:\n\n![realtime-mongodb-change-streams-pusher-create-app preview](//images.ctfassets.net/1es3ne0caaid/20AOY1mlVSOQc6GYGwqa8K/b12043692785f4c08a692777a685beb6/realtime-mongodb-change-streams-pusher-create-app_preview.png)\n\nThis will give you some sample code to get started:\n\n![realtime-mongodb-change-streams-pusher-sample-code preview](//images.ctfassets.net/1es3ne0caaid/5lN0V9UEmW2Ss888cWIakE/35d2acb00586825d18f745aee1d34cae/realtime-mongodb-change-streams-pusher-sample-code_preview.png)\n\nSave your app id, key, secret and cluster values. We’ll need them later.\n\n## Configuring MongoDB\n\nSince change streams use MongoDB’s operations log, and the oplog is used to support the replication features of this database, you can only use change streams with [replica sets](https://docs.mongodb.com/manual/replication/) or [sharded clusters](https://docs.mongodb.com/manual/sharding/).\n\nIt’s easier to use replica sets, so let’s go that way.\n\nA replica set is a group of `mongod` processes that maintain the same data set. However, you can create a replica set with only one server, just execute this command:\n\n```\n    mongod --replSet \"rs\"\n```\n\nRemember that if you do not use the default data directory (`/data/db` or `c:\\data\\db`), specify the path to the data directory using the `--dbpath` option:\n\n```\n    mongod --dbpath \u003cDATA_PATH\u003e --replSet \"rs\"\n```\n\nNext, in a separate terminal window, run `mongo`, the MongoDB client.\n\nIf this is the first time you create a replica set, execute `rs.initiate()`:\n\n```\n    eh@eh:~/Documents/mongodb-linux-x86_64-3.6.4$ bin/mongo\n    MongoDB shell version v3.6.4\n    connecting to: mongodb://127.0.0.1:27017\n    MongoDB server version: 3.6.4\n    ...\n    \u003e rs.initiate()\n    {\n            \"info2\" : \"no configuration specified. Using a default configuration for the set\",\n            \"me\" : \"localhost:27017\",\n            \"ok\" : 1,\n            \"operationTime\" : Timestamp(1527258648, 1),\n            \"$clusterTime\" : {\n                    \"clusterTime\" : Timestamp(1527258648, 1),\n                    \"signature\" : {\n                            \"hash\" : BinData(0,\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"),\n                            \"keyId\" : NumberLong(0)\n                    }\n            }\n    }\n    rs:OTHER\u003e\n```\n\nThe application is going to watch the collection `tasks` in a database called `tasksDb`. \n\nUsually, the database and the collection are created by the MongoDB driver when the application performs the first operation upon them, but for change streams, they must exist before opening the stream.\n\nSo while you are at `mongo` , create the database and the collection with the commands `use` and `db.createCollection`, like this:\n\n```\n    rs:OTHER\u003e use tasksDb\n    switched to db tasksDb\n    rs:OTHER\u003e db.createCollection('tasks')\n    {\n            \"ok\" : 1,\n            \"operationTime\" : Timestamp(1527266976, 1),\n            \"$clusterTime\" : {\n                    \"clusterTime\" : Timestamp(1527266976, 1),\n                    \"signature\" : {\n                            \"hash\" : BinData(0,\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"),\n                            \"keyId\" : NumberLong(0)\n                    }\n            }\n    }\n    rs:OTHER\u003e \n```\n\nNow you're ready to start building the application.\n\nLet’s start with the Node.js server.\n\n## Building the Node.js server\n\nCreate a new directory and in a terminal window, inside that directory, initialize a Node.js project with the command:\n\n```\n    npm init -y\n```\n\nNext, install the dependencies the application is going to use with:\n\n```\n    npm install --save body-parser express mongoose pusher\n```\n\n- [body-parser](https://github.com/expressjs/body-parser) is a middleware for parsing the body of the request.\n- [express](https://github.com/expressjs/express) to create the web server for the REST API that the React app is going to use.\n- [mongoose](http://mongoosejs.com/) is a schema-based library for working with MongoDB.\n- [pusher](https://pusher.com/) to publish the database changes in realtime.\n\nNow the first thing we’re going to do is create a schema for the task collection. Create the file `models/task.js` and copy the following code:\n\n``` javascript\n    const mongoose = require('mongoose');  \n    const Schema   = mongoose.Schema;\n    \n    const taskSchema = new Schema({ \n      task: { type: String },\n    });\n    \n    module.exports = mongoose.model('Task', taskSchema); \n```\n\nAs you can see, the collection is only going to store the task as text.\n\nNext, create the file `routes/api.js` and require the task schema and Express to create a router:\n\n``` javascript\n    const Task  = require('../models/task');\n    const express = require('express');\n    const router = express.Router();\n```\n\nCreate a `POST` endpoint with the `/new` path to save task:\n\n``` javascript\n    router.post('/new', (req, res) =\u003e {\n      Task.create({\n        task: req.body.task,\n      }, (err, task) =\u003e {\n        if (err) {\n          console.log('CREATE Error: ' + err);\n          res.status(500).send('Error');\n        } else {\n          res.status(200).json(task);\n        }\n      });\n    });\n```\n\nAnd another one to delete tasks, passing the ID of the task using a `DELETE` method:\n\n``` javascript\n    router.route('/:id')\n      /* DELETE */\n      .delete((req, res) =\u003e {\n        Task.findById(req.params.id, (err, task) =\u003e {\n          if (err) { \n            console.log('DELETE Error: ' + err);\n            res.status(500).send('Error');\n          } else if (task) {\n            task.remove( () =\u003e {\n              res.status(200).json(task);\n            });\n         } else {\n            res.status(404).send('Not found');\n          }\n        });\n      });\n    \n    module.exports = router;\n```\n\nNow, in the root directory, create the file `server.js` and require the following modules:\n\n``` javascript\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const mongoose = require('mongoose');\n    const api = require('./routes/api');\n    const Pusher = require('pusher');\n```\n\nConfigure the Pusher object entering your app information:\n\n```\n    const pusher = new Pusher({\n      appId      : '\u003cINSERT_APP_ID\u003e',\n      key        : '\u003cINSERT_APP_KEY\u003e',\n      secret     : '\u003cINSERT_APP_SECRET\u003e',\n      cluster    : '\u003cINSERT_APP_CLUSTER\u003e',\n      encrypted  : true,\n    });\n    const channel = 'tasks';\n```\n\nAnd configure an Express server with CORS headers (because the React app is going to be published in a different port), JSON requests, and `/api` as the path:\n\n``` javascript\n    const app = express();\n    \n    app.use((req, res, next) =\u003e {\n      res.header(\"Access-Control-Allow-Origin\", \"*\");\n      res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n      res.header(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\");\n      next();\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    app.use('/api', api);\n```\n\nThis way, you can connect to the database passing the name of the replica set you configured before:\n\n``` javascript\n    mongoose.connect('mongodb://localhost/tasksDb?replicaSet=rs');\n```\n\nAnd set two callbacks, one for connections errors and another one if the connection is successful:\n\n``` javascript\n    const db = mongoose.connection;\n    \n    db.on('error', console.error.bind(console, 'Connection Error:'));\n    \n    db.once('open', () =\u003e {\n    \n    });\n```\n\nIf the connection is successful, let’s start listening for connections on port 9000 and watch for changes on the `tasks` collection:\n\n``` javascript\n    db.once('open', () =\u003e {\n      app.listen(9000, () =\u003e {\n        console.log('Node server running on port 9000');\n      });\n      \n      const taskCollection = db.collection('tasks');\n      const changeStream = taskCollection.watch();\n        \n      changeStream.on('change', (change) =\u003e {\n      \n      });\n    });\n```\n\nHere comes the interesting part.\n\nWhen there’s a change in the collection, a change event is received. In particular, the following changes are supported:\n\n- Insert\n- Update\n- Replace\n- Delete\n- Invalidate\n\nHere’s an example of an insert event:\n\n```\n    { _id: \n       { _data: \n          Binary {\n            _bsontype: 'Binary',\n            sub_type: 0,\n            position: 49,\n            buffer: \u003cBuffer 82 5b 08 8a 2a 00 00 00 01 46 64 5f 69 64 00 64 5b 08 8a 2a 99 a1 c5 0d 65 f4 c4 4f 00 5a 10 04 13 79 9a 22 35 5b 45 76 ba 45 6a f0 69 81 60 af 04\u003e } },\n      operationType: 'insert',\n      fullDocument: { _id: 5b088a2a99a1c50d65f4c44f, task: 'my task', __v: 0 },\n      ns: { db: 'tasksDb', coll: 'tasks' },\n      documentKey: { _id: 5b088a2a99a1c50d65f4c44f } }\n```\n\nYou can use the `_id` property to [resume a change stream](https://docs.mongodb.com/manual/changeStreams/#resume-a-change-stream), in other words, to start receiving events from the operation represented by that property.\n\nHere’s an example of a delete event:\n\n```\n    { _id: \n       { _data: \n          Binary {\n            _bsontype: 'Binary',\n            sub_type: 0,\n            position: 49,\n            buffer: \u003cBuffer 82 5b 08 8b f6 00 00 00 01 46 64 5f 69 64 00 64 5b 08 8a 2a 99 a1 c5 0d 65 f4 c4 4f 00 5a 10 04 13 79 9a 22 35 5b 45 76 ba 45 6a f0 69 81 60 af 04\u003e } },\n      operationType: 'delete',\n      ns: { db: 'tasksDb', coll: 'tasks' },\n      documentKey: { _id: 5b088a2a99a1c50d65f4c44f } }\n```\n\nNotice that in this case, the deleted object is not returned, just its ID in the `documentKey` property.\n\nYou can learn more about these [change events here](https://docs.mongodb.com/manual/reference/change-events/).\n\nWith this information, back to `server.js`, you can extract the relevant data from the object and publish it to Pusher in the following way:\n\n``` javascript\n    changeStream.on('change', (change) =\u003e {\n        console.log(change);\n    \n        if(change.operationType === 'insert') {\n          const task = change.fullDocument;\n          pusher.trigger(\n            channel,\n            'inserted', \n            {\n              id: task._id,\n              task: task.task,\n            }\n          ); \n        } else if(change.operationType === 'delete') {\n          pusher.trigger(\n            channel,\n            'deleted', \n            change.documentKey._id\n          );\n        }\n    });\n```\n\nAnd that’s the code for the server. Now let’s build the React app.\n\n## Building the React app\n\nLet’s use [create-react-app](https://github.com/facebook/create-react-app) to bootstrap a React app.\n\nIn another directory, execute the following command in a terminal window to create a new app:\n\n```\n    npx create-react-app my-app\n```\n\nNow go into the app directory and install all the Pusher dependency with `npm`:\n\n```\n    cd my-app\n    npm install --save pusher-js\n```\n\nOpen the file `src/App.css` and replace its content with the following CSS styles:\n\n``` css\n    *{\n      box-sizing: border-box;\n    }\n    \n    body {\n      font-size: 15px;\n      font-family: 'Open Sans', sans-serif;\n      color: #444;\n      background-color: #300d4f;\n      padding: 50px 20px;\n      margin: 0;\n      min-height: 100vh;\n      position: relative;\n    }\n    \n    .todo-wrapper {\n      width: 400px;\n      max-width: 100%;\n      min-height: 500px;\n      margin: 20px auto 40px;\n      border: 1px solid #eee;\n      border-radius: 4px;\n      padding: 40px 20px;\n      -webkit-box-shadow: 0 0 15px 0 rgba(0,0,0,0.05);\n      box-shadow: 0 0 15px 0 rgba(0,0,0,0.05);\n      background-color: #e9edf6;\n      overflow: hidden;\n      position: relative;\n    }\n    \n    form{\n      overflow: overlay;\n    }\n    \n    .btn, input {\n      line-height: 2em;\n      border-radius: 3px;\n      border: 0;\n      display: inline-block;\n      margin: 15px 0;\n      padding: 0.2em 1em;\n      font-size: 1em;\n    }\n    \n    input[type='text'] {\n      border: 1px solid #ddd; \n      min-width: 80%;\n    }\n    \n    input:focus {\n      outline: none;\n      border: 1px solid #a3b1ff;\n    }\n    \n    .btn {\n      text-align: center;\n      font-weight: bold; \n      cursor: pointer;\n      border-width: 1px;\n      border-style: solid;\n    }\n    \n    .btn-add {\n      background: #00de72;\n      color: #fefefe;\n      min-width: 17%;\n      font-size: 2.2em;\n      line-height: 0.5em;\n      padding: 0.3em 0.3em;\n      float: right;\n    }\n    \n    ul {\n      list-style: none;\n      padding: 0;\n    }\n      \n    li {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 5px;\n        background-color: #dee2eb;\n    }\n    \n    .text {\n      padding: 0.7em;\n    }\n    \n    .delete {\n      padding: 0.3em 0.7em;\n      min-width: 17%;\n      background: #f56468;\n      color: white;\n      font-weight: bold;\n      cursor: pointer;\n      font-size: 2.2em;\n        line-height: 0.5em;\n    }\n```\n\nNext, open the file `src/App.js` and at the top, import the Pusher library:\n\n``` javascript\n    import Pusher from 'pusher-js';\n```\n\nDefine a constant for the API URL:\n\n``` javascript\n    const API_URL = 'http://localhost:9000/api/';\n```\n\nIn the constructor of the class, define an array for the tasks and a property for the text of a task as the state, and bind the methods to update the text and add and delete tasks:\n\n``` javascript\n    class App extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          tasks: [],\n          task: ''\n        };\n        this.updateText = this.updateText.bind(this);\n        this.postTask = this.postTask.bind(this);\n        this.deleteTask = this.deleteTask.bind(this);\n        this.addTask = this.addTask.bind(this);\n        this.removeTask = this.removeTask.bind(this);\n      }\n      ...\n    }\n```\n\nLet’s review each method. Add them after the constructor, before the `render()` method.\n\nThe `updateText` method will update the state every time the input text for the task changes:\n\n``` javascript\n    updateText(e) {\n        this.setState({ task: e.target.value });\n    }\n```\n\nThe `postTask` method will post to task entered by the user to the API:\n\n``` javascript\n    postTask(e) {\n        e.preventDefault();\n        if (!this.state.task.length) {\n          return;\n        }\n        const newTask = {\n          task: this.state.task\n        };\n        fetch(API_URL + 'new', {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(newTask)\n        }).then(console.log);\n    }\n```\n\nAnd  the method `deleteTask` will call the API to delete a task using its ID:\n\n``` javascript\n    deleteTask(id) {\n        fetch(API_URL + id, {\n          method: 'delete'\n        }).then(console.log);\n    }\n```\n\nOn the other hand, you’ll also need methods to add and delete a task from the state so the changes can be reflected in the UI. That’s the job of the methods `addTask` and `removeTask`:\n\n``` javascript\n    addTask(newTask) {\n        this.setState(prevState =\u003e ({\n          tasks: prevState.tasks.concat(newTask),\n          task: ''\n        }));\n    }\n        \n    removeTask(id) {\n        this.setState(prevState =\u003e ({\n          tasks: prevState.tasks.filter(el =\u003e el.id !== id)\n        }));\n    }\n```\n\nThe app will call these methods when the corresponding event from Pusher is received.\n\nYou can set up Pusher and bind these methods to the `inserted` and `deleted`  events in the method `componentDidMount`, entering your Pusher app key and cluster:\n\n``` javascript\n    componentDidMount() {\n        this.pusher = new Pusher('\u003cINSERT_APP_KEY\u003e', {\n              cluster: '\u003cINSERT_APP_CLUSTER\u003e',\n          encrypted: true,\n        });\n        this.channel = this.pusher.subscribe('tasks');\n            \n        this.channel.bind('inserted', this.addTask);\n        this.channel.bind('deleted', this.removeTask);\n    }\n```\n\nThis way, the `render` method just renders the tasks from the state using a `Task` component and a form to enter new tasks. \n\nReplace the `render()` method with the following:\n\n``` javascript\n    render() {\n        let tasks = this.state.tasks.map(item =\u003e\n          \u003cTask key={item.id} task={item} onTaskClick={this.deleteTask} /\u003e\n        );\n    \n        return (\n          \u003cdiv className=\"todo-wrapper\"\u003e\n            \u003cform\u003e\n              \u003cinput type=\"text\" className=\"input-todo\" placeholder=\"New task\" onChange={this.updateText} value={this.state.task} /\u003e\n              \u003cdiv className=\"btn btn-add\" onClick={this.postTask}\u003e+\u003c/div\u003e\n            \u003c/form\u003e\n            \n            \u003cul\u003e\n              {tasks}\n            \u003c/ul\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n```\n\nAnd the code of the `Task` component (which you can place after the `App` class):\n\n``` javascript\n    class Task extends Component {\n      constructor(props) {\n        super(props);\n        this._onClick = this._onClick.bind(this);\n      }\n      _onClick() {\n        this.props.onTaskClick(this.props.task.id);\n      }\n      render() {\n        return (\n          \u003cli key={this.props.task.id}\u003e\n            \u003cdiv className=\"text\"\u003e{this.props.task.task}\u003c/div\u003e\n            \u003cdiv className=\"delete\" onClick={this._onClick}\u003e-\u003c/div\u003e\n          \u003c/li\u003e\n        );\n      }\n    }\n```\n\nAnd that’s it. Let’s test the complete application.\n\n## Testing the application\n\nMake sure the MongoDB database is running with the replica set configured on the server:\n\n```\n    mongod --dbpath \u003cDATA_PATH\u003e --replSet \"rs\"\n```\n\nIn a terminal window, go to the directory where the Node.js server resides and execute:\n\n```\n    node server.js\n```\n\nFor the React app, inside the app directory, execute:\n\n```\n    npm start\n```\n\nA browser window will open [http://localhost:3000/](http://localhost:3000/), and from there, you can start entering and deleting tasks:\n\n![realtime-mongodb-change-streams-pusher-demo-app](//images.ctfassets.net/1es3ne0caaid/7o9SkqC3cWeqIIKooOyyQq/762eef0051bf0f5d55ee5384238e998a/realtime-mongodb-change-streams-pusher-demo-app.gif)\n\nYou can also see in the output of the Node.js server how change events are received from MongoDB:\n\n![realtime-mongodb-change-streams-pusher-console](//images.ctfassets.net/1es3ne0caaid/haDpdaBxpmkSkw6oiGGoo/52b8125a48f8a93804b9c464d0032c58/realtime-mongodb-change-streams-pusher-console.gif)\n\nOr on [Pusher’s dashboard](https://dashboard.pusher.com), select your app, and in the Debug section, you’ll see how the messages are received:\n\n![realtime-mongodb-change-streams-pusher-dashboard](//images.ctfassets.net/1es3ne0caaid/4J2lvf8wgEEckAss2MUWuq/ecfcd913fb159a99e80d7fbf583a3153/realtime-mongodb-change-streams-pusher-dashboard.gif)\n\n## Conclusion\n\nIn this tutorial, you have learned how to persist data in MongoDB and propagate the changes in realtime using change streams and Pusher channels\n\nThis is equivalent to the functionality provided by Firebase and its realtime database. The advantage is that a solution like the one presented in this tutorial is more flexible and gives you more control.\n\nFrom here, the application can be extended in many ways, for example:\n\n- Support for more collections\n- Implement an update functionality for the tasks (for example, the status) and replicate this event.\n- Use the resume token to receiving the events from the last one registered, after a connection failure.\n\nRemember that in [this GitHub repository](https://github.com/eh3rrera/realtime-mongodb-pusher) you can find the code of the Node.js server and the React app.\n\nFor more information about change streams, here are some good resources:\n\n- [Using Change Streams to Keep Up with Your Data](https://www.mongodb.com/presentations/using-change-streams-to-keep-up-with-your-data)\n- [An Introduction to Change Streams](https://www.mongodb.com/blog/post/an-introduction-to-change-streams)\n- [MongoDB 3.6 change streams example with Node.js](https://medium.com/@thakkaryash94/mongodb-3-6-change-streams-example-with-node-js-2b9a85652c50)\n- [MongoDB Data Change](https://medium.com/riow/mongodb-data-collection-change-85b63d96ff76)\n- [MongoDB manual: Change Streams](https://docs.mongodb.com/manual/changeStreams/)","metaTitle":"Using MongoDB as a realtime database with change streams","metaDescription":"This tutorial demonstrates how to use change streams in MongoDB to receive realtime notification of database changes. Create a simple React app that provides a full working example, and demonstrates its power as a Firebase alternative."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5kd5NYciXeUsoa4ogwCWu6","type":"Entry","createdAt":"2018-05-29T09:13:20.560Z","updatedAt":"2018-05-29T09:13:20.560Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a voting application with Go and Vue.js","url":"voting-app-go-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-poll-go-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-05-28","description":"Build a polling app using Echo, the Go framework, Vue.js and SQLite. Users are able to vote on their favorite JavaScript frameworks. Results update instantly.","prerequisite":"You will need Go installed on your machine, and a basic knowledge of Go and JavaScript.","content":"Digital polls are a great way for an online crowd to express their opinions towards a set of items on the list. In the past, to participate in voting, voters would have to physically be present at the elected place of vote so that they can cast their ballots. Such a drag right?\n\n## What we will be building\n\nIn this tutorial we will demonstrate how to build a realtime voting poll application. We will write the backend API for handling the HTTP requests and saving updates to the database ([SQLite](https://www.sqlite.org/)) in [Go](https://golang.org/). \n\nWe will be using the Go framework, [Echo](https://echo.labstack.com/), to keep boilerplate to a minimum. You can think of Echo to be to Go what [Laravel](https://laravel.com/) is to PHP. If you have prior experience using web frameworks to create routes and handle HTTP requests, the code in this tutorial should look somewhat familiar.\n\nFor the frontend section of this project, we’ll use [Vue.js](https://vuejs.org/). With its reactive properties, Vue.js will re-render the DOM whenever there is an update to the `upvotes` or `downvotes` of a vote member. We’ll also require a bit of [jQuery](https://jquery.com/) to handle some functionality.\n\nTo make things work in realtime, we’ll integrate Pusher into the application. [Pusher](https://pusher.com) makes it very easy to create realtime applications.\n\nWhen we are done with our application, here’s what we will have:\n\n![voting-app-go-demo-1](//images.ctfassets.net/1es3ne0caaid/6aAc9s9C9OkIMCIs88o2Sg/47c72b8039deedd5e655159bb8d61b86/voting-app-go-demo-1.gif)\n\n## Requirements\n\nTo follow along with this article, you will need the following:\n\n- An IDE of your choice like [Visual Studio Code](https://code.visualstudio.com/).\n- [Go](https://golang.org/doc/install) (version \u003e= 0.10.x) installed on your computer. [Heres how you can install Go](https://golang.org/doc/install#install).\n- Basic knowledge of the Go programming language.\n- Basic knowledge of JavaScript (ES6).\n- Basic knowledge of Vue.js and jQuery.\n\nOnce you have all the above requirements, we can proceed.\n\n## Setting up our codebase\n\nTo get started create a new directory in our `$GOPATH` and launching that directory with an IDE. We can do this by running the commands below:\n\n```\n    $ cd $GOPATH/src\n    $ mkdir gopoll \n    $ cd gopoll\n```\n\nThe directory above will be our project directory. Next create our first `.go` file where our main function will go, we will call it `poll.go`.\n\nLet’s import some useful Go packages that we’ll be using within our project. For a start, we have to fetch the Echo and SQLite packages from GitHub. Run the following commands to pull in the packages:\n\n```\n    $ go get github.com/labstack/echo\n    $ go get github.com/labstack/echo/middleware\n    $ go get github.com/mattn/go-sqlite3\n```\n\n\u003e ⚠️  If you use Windows and you encounter the error ‘cc.exe: sorry, unimplemented: 64-bit mode not compiled in ‘, then you need a Windows gcc port, such as https://sourceforge.net/projects/mingw-w64/. Also see this [GitHub issue](https://github.com/mattn/go-sqlite3/issues/297).\n\nOpen the `poll.go` file and paste in the following code:\n\n``` go\n    package main\n    \n    import (\n        // \"database/sql\"\n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/middleware\"\n        // _ \"github.com/mattn/go-sqlite3\"\n    )\n```\n\nAbove we also imported the `database/sql` library but we don’t have to use `go get` because this is a part of the standard Go library.\n\n## Setting up the routes and database\n\nTo enable Go to run our application, we need a `main` function, so lets create that before we think of creating the routes and setting up the database.\n\nOpen the `poll.go` file and in there add the following code to the file:\n\n``` go\n    func main() {\n        e := echo.New()\n    \n        // Middleware\n        e.Use(middleware.Logger())\n        e.Use(middleware.Recover())\n    \n        // Define the HTTP routes\n        e.GET(\"/polls\", func(c echo.Context) error { \n            return c.JSON(200, \"GET Polls\") \n        })\n    \n        e.PUT(\"/polls\", func(c echo.Context) error { \n            return c.JSON(200, \"PUT Polls\") \n        })\n    \n        e.PUT(\"/polls/:id\", func(c echo.Context) error {\n            return c.JSON(200, \"UPDATE Poll \" + c.Param(\"id\"))    \n        })\n    \n        // Start server\n        e.Logger.Fatal(e.Start(\":9000\"))\n    }\n```\n\nAwesome, we’ve created some basic routes and even if they don’t do more than echo ‘static’ text, they should be able to handle matching URL requests.\n\nWe included the final line because we want to instruct Go to start the application using Echo’s `Start` method. This will start Go’s standard HTTP server and listen for requests on the port `9000`.\n\nWe can test the routes in our application as it is now by compiling it down, running it and making requests to the port `9000` of our local host with [Postman](https://www.getpostman.com/).\n\n```\n    $ go run poll.go\n```\n\nNow we can head over to Postman and point the address to `localhost:9000/polls` with a `GET` HTTP verb. To try the PUT request, we can use an address such as `localhost:9000/polls/3`.\nAssuming that everything works as we planned, you should get the following screens:\n\n### GET request\n\n![voting-app-go-GET](//images.ctfassets.net/1es3ne0caaid/50FAIAIQzukai0yCaIwGie/bc264375d33faa2621d121dc0ab0f5b8/voting-app-go-GET.png)\n\n### PUT request\n\n![voting-app-go-PUT](//images.ctfassets.net/1es3ne0caaid/3kGQb7GcHmCasScCWA0Ica/cebb54775deb8809c8651c9a435edaf1/voting-app-go-PUT.png)\n\nIn the `poll.go` file, we will write some code to initialize a database with a filename of `Storage.db` on application run. The `Sql` driver can create this file for us if it doesn’t already exist. After the database has been created, we will run a function to migrate and seed the database for us if it hasn’t already been migrated and seeded.\n\nOpen the `poll.go` file and add the following functions to the file:\n\n``` go\n    func initDB(filepath string) *sql.DB {\n            db, err := sql.Open(\"sqlite3\", filepath)\n    \n            if err != nil {\n                panic(err)\n            }\n    \n            if db == nil {\n                panic(\"db nil\")\n            }\n            \n            return db\n    }\n    \n    func migrate(db *sql.DB) {\n        sql := `\n            CREATE TABLE IF NOT EXISTS polls(\n                    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n                    name VARCHAR NOT NULL,\n                    topic VARCHAR NOT NULL,\n                    src VARCHAR NOT NULL,\n                    upvotes INTEGER NOT NULL,\n                    downvotes INTEGER NOT NULL,\n                    UNIQUE(name)\n            );\n        \n            INSERT OR IGNORE INTO polls(name, topic, src, upvotes, downvotes) VALUES('Angular','Awesome Angular', 'https://cdn.colorlib.com/wp/wp-content/uploads/sites/2/angular-logo.png', 1, 0);\n        \n            INSERT OR IGNORE INTO polls(name, topic, src, upvotes, downvotes) VALUES('Vue', 'Voguish Vue','https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/400px-Vue.js_Logo.svg.png', 1, 0);\n        \n            INSERT OR IGNORE INTO polls(name, topic, src, upvotes, downvotes) VALUES('React','Remarkable React','https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/React-icon.svg/1200px-React-icon.svg.png', 1, 0);\n        \n            INSERT OR IGNORE INTO polls(name, topic, src, upvotes, downvotes) VALUES('Ember','Excellent Ember','https://cdn-images-1.medium.com/max/741/1*9oD6P0dEfPYp3Vkk2UTzCg.png', 1, 0);\n        \n            INSERT OR IGNORE INTO polls(name, topic, src, upvotes, downvotes) VALUES('Knockout','Knightly Knockout','https://images.g2crowd.com/uploads/product/image/social_landscape/social_landscape_1489710848/knockout-js.png', 1, 0);\n       `\n        _, err := db.Exec(sql)\n    \n        if err != nil {\n                panic(err)\n        }\n    }\n```\n\nThe first function, `initDB` is pretty straightforward with its task, it makes an attempt to open a database file, or creates it when it doesn’t exist. In a case where it is unable to read the database file or create it, the program exits because the database is crucial to the logic of the application.\n\nThe `migrate` function, does exactly what its name suggests. It runs an SQL statement against the database to ensure that the `polls` table is created if it isn’t already created, and seeded with some initial values for this example.\n\nFor our example, we will be seeding the database with some values for a few JavaScript frameworks. Each framework will have a column for registering the state of `upvotes` and `downvotes`. Like the `initDB` function, if the `migrate` function fails to migrate and seed the database, the program will return an error.\n\nNext open the `poll.go` file and add the following into the `main` function right after the middleware definitions:\n\n``` go\n    // [...]\n    \n    // Initialize the database\n    db := initDB(\"storage.db\")\n    migrate(db)\n    \n    // [...]\n```\n\nNext, uncomment the imports in the `poll.go` file. Now we can test to see if our application works. Run the following command to build and run the application:\n\n```\n    $ go run poll.go\n```\n\nIf we look at the project directory, there should be a `storage.db` file there. This means that our code executed correctly.\n\nGreat, now let’s create the handlers.\n\n## Creating the handlers\n\nWe’ve already created the endpoints with which the frontend can interact with the backend. Now we need to build the backend logic that will handle the received requests on specific routes. We can achieve this by registering several handler functions of our own.\n\nLet’s begin by creating and navigating into a new directory called `handlers`:\n\n```\n    $ mkdir handlers\n    $ cd handlers\n```\n\nLet’s create a new `handlers.go` file in this `handlers` directory and paste the following code into the file:\n\n``` go\n    package handlers\n    \n    import (\n        \"database/sql\"\n        \"net/http\"\n        \"strconv\"\n        \"github.com/labstack/echo\"\n    )\n```\n\nNext, open the `poll.go` file and import the `handlers.go` package in there:\n\n``` go\n    import (\n        // [...]\n    \n        \"gopoll/handlers\"\n    \n        // [...]\n    )\n```\n\nIn the same file, replace the route definitions from earlier with the ones below:\n\n``` go\n    // [...]\n    \n    // Define the HTTP routes\n    e.File(\"/\", \"public/index.html\")\n    e.GET(\"/polls\", handlers.GetPolls(db))\n    e.PUT(\"/poll/:index\", handlers.UpdatePoll(db))\n    \n    // [...]\n```\n\nYou may have noticed that we included an extra route above:\n\n```\n    e.File(\"/\", \"public/index.html\")\n```\n\nThis is the route that will process requests sent to the `/` endpoint. We need this route to serve a static `HTML` file that we are yet to create, this file will hold our client-side code and live in the public directory.\n\nNow back to the `handlers.go` file. In order for us to return arbitrary JSON as responses in our handler, we need to register a map just below our import statements:\n\n```\n    type H map[string]interface{}\n```\n\nThis maps strings as keys and anything else as values. In Go, the \"interface\" keyword represents anything from a primitive datatype to a user defined type or struct.\n\nLet’s create our handlers. We will make it so they receive an instance of the database we’ll be passing from the routes. They’ll also need to implement the [Echo.HandlerFunc](https://godoc.org/github.com/labstack/echo#HandlerFunc) interface so they can be used by the routes. \n\nOpen the `handlers.go` file and paste the following:\n\n``` go\n    func GetPolls(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            return c.JSON(http.StatusOK, models.GetPolls(db))\n        }\n    }\n    \n    func UpdatePoll(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            var poll models.Poll\n    \n            c.Bind(\u0026poll)\n    \n            index, _ := strconv.Atoi(c.Param(\"index\"))\n    \n            id, err := models.UpdatePoll(db, index, poll.Name, poll.Upvotes, poll.Downvotes)\n    \n            if err == nil {\n                return c.JSON(http.StatusCreated, H{\n                    \"affected\": id,\n                })\n            }\n    \n            return err\n        }\n    }\n```\n\nThe `GetPolls` function returns the `StatusOK` status code and passes the received instance of the database to a model function that we will create soon. In the next section, we’ll create the models package, define its functions and import it into the handlers package.\n\nThe `UpdatePoll` function is defined to work on a single poll, it calls `c.Bind` on an instance of `models.Poll`; this call is responsible for taking a `JSON` formatted body sent in a `PUT` request and mapping it to a Poll struct. The Poll struct will be defined in the models package. \n\nSince this handler will be receiving an `index` parameter from the route, we are using the `strconv` package and the `Atoi` (alpha to integer) function to make sure the index is cast to an integer. This will ensure that we can correctly point to a row when we query the database. We have also done a bit of error checking in this function, we want to ensure that the application terminates properly if there is ever an error.\n\nLet’s move on to the creation of the models package.\n\n## Creating the models\n\nIt is a good practice to keep codebases as modular as possible so we have avoided making direct calls to the database in the `handlers` package. Instead, we will abstract the database logic into the models package so that the interactions are performed by the models.\n\nLet’s create a new directory in the working directory of our application. This is where the models package will go, we can run this command:\n\n```\n    $ mkdir models\n```\n\nIn the `models` directory create a new `models.go` file and paste the following into the code:\n\n``` go\n    package models\n    \n    import (\n        \"database/sql\"\n        _ \"github.com/mattn/go-sqlite3\"\n    )\n```\n\nNext import the models package into the `handlers.go` file:\n\n``` go\n    package handlers\n    \n    import (\n        // [...]\n    \n        \"gopoll/models\"\n        \n        // [...]\n    )\n```\n\nIn the models package, let’s create a Poll `type` which is a struct with six fields:\n\n- `ID` -  the id of the poll.\n- `Name` - the name of the poll.\n- `Topic` - the topic of the poll.\n- `Src` - the link to an image  for the poll.\n- `Upvotes` - the number of upvotes on the poll.\n- `Downvotes` - the number of downvotes on the poll.\n\nIn Go, we can add metadata to variables by putting them within backticks. We can use this feature to define what each field should look like when converted to `JSON`. This will also help the `c.Bind` function in the `handlers.go` file to know how to map `JSON` data when registering a new Poll.\n\nWe will also use the `type` keyword to define a collection of Polls, this is required for when there is a request to return all the Polls in the database. We’d simply aggregate them into an instance of this collection and return them.\n\n``` go\n    type Poll struct {\n        ID        int     `json:\"id\"`\n        Name      string  `json:\"name\"`\n        Topic     string  `json:\"topic\"`\n        Src       string  `json:\"src\"`\n        Upvotes   int     `json:\"upvotes\"`\n        Downvotes int     `json:\"downvotes\"`\n    }\n    \n    type PollCollection struct {\n        Polls []Poll `json:\"items\"`\n    }\n```\n\nNow let’s define the `GetPolls` function. This function will be responsible for getting the polls from the database, returning them as an instance of a Poll collection and returning them to the function that invoked it. This function doesn’t use any new features and is pretty straight forward:\n\n``` go\n    func GetPolls(db *sql.DB) PollCollection {\n        sql := \"SELECT * FROM polls\"\n        \n        rows, err := db.Query(sql)\n    \n        if err != nil {\n            panic(err)\n        }\n    \n        defer rows.Close()\n    \n        result := PollCollection{}\n    \n        for rows.Next() {\n            poll := Poll{}\n            \n            err2 := rows.Scan(\u0026poll.ID, \u0026poll.Name, \u0026poll.Topic, \u0026poll.Src, \u0026poll.Upvotes, \u0026poll.Downvotes)\n    \n            if err2 != nil {\n                panic(err2)\n            }\n            \n            result.Polls = append(result.Polls, poll)\n        }\n        \n        return result\n    }\n```\n\nWe also need to define an `UpdatePoll` method that will update the state of the `upvotes` and `downvotes` of a Poll. In the same file paste the following code:\n\n``` go\n    func UpdatePoll(db *sql.DB, index int, name string, upvotes int, downvotes int) (int64, error) {\n        sql := \"UPDATE polls SET (upvotes, downvotes) = (?, ?) WHERE id = ?\"\n    \n        // Create a prepared SQL statement\n        stmt, err := db.Prepare(sql)\n    \n        // Exit if we get an error\n        if err != nil {\n            panic(err)\n        }\n    \n        // Make sure to cleanup after the program exits\n        defer stmt.Close()\n    \n        // Replace the '?' in our prepared statement with 'upvotes, downvotes, index'\n        result, err2 := stmt.Exec(upvotes, downvotes, index)\n    \n        // Exit if we get an error\n        if err2 != nil {\n            panic(err2)\n        }\n        \n        return result.RowsAffected()\n    }\n```\n\nYou might have noticed we are using [prepared SQL statements](https://en.wikipedia.org/wiki/Prepared_statement) in the `UpdatePoll` function. There are several benefits to doing this. We ensure SQL statements are always cleaned up and safe from [SQL injection](https://en.wikipedia.org/wiki/SQL_injection) attacks. Prepared SQL statements also help our program execute faster since the statements will be compiled and cached for multiple uses.\n\n## Building out our frontend\n\nNow that we are done with the backend, lets add some frontend code. Create a `public` directory in the root directory of your project. In this directory create an `index.html` file. This is where we will add most of the frontend magic.\n\nBecause we want to keep things simple, we will include the Vue.js and jQuery code in the `index.html` file. Open the file and paste the following HTML code into it:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.0.13/css/all.css\"\u003e\n        \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js\"\u003e\u003c/script\u003e\n        \u003ctitle\u003eA GO Voting Poll Application With Pusher \u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"msg\" style=\"display: none; padding: 1em; position: fixed; margin: 0px 5px;\"\u003e\u003c/div\u003e\n        \u003cdiv id=\"app\" class=\"container\"\u003e\n            \u003cdiv class=\"row\" style=\"margin: 1em 0em\" v-for=\"(poll, index) in polls\"\u003e\n            \u003cdiv class=\"card col-md-4\" style=\"margin: 20px auto; width: 25rem; background: rgb(93, 95, 104)\"\u003e\n                \u003cimg class=\"card-img-top\" :src=\"poll.src\" alt=\"Card image\"\u003e\n                \u003cdiv class=\"card-body\" \u003e\n                  \u003cp class=\"card-text text-center\" style=\"font-size: 1.5em; color: white; font-weight: bold\"\u003e {{ poll.topic }} as the best JS framework \u003c/p\u003e\n                    \u003cform\u003e\n                        \u003cdiv style=\"background: white; color: black; padding: 1em; border-radius: 5px;\"\u003e \u003cinput type=\"radio\" :value=\"poll.name\" :name=\"poll.name\" @change=\"upvote(index)\"\u003e Yes \u003cspan style=\"padding-left: 60%;\"\u003e\u003ci class=\"fas fa-thumbs-up\"\u003e\u003c/i\u003e ({{ poll.upvotes }}) \u003c/span\u003e\u003c/div\u003e\n                        \u003chr\u003e\n                        \u003cdiv style=\"background: white; color: black; padding: 1em; border-radius: 5px;\"\u003e \u003cinput type=\"radio\" :value=\"poll.name\" :name=\"poll.name\" @change=\"downvote(index)\" \u003e No \u003cspan style=\"padding-left: 60%;\"\u003e\u003ci class=\"fas fa-thumbs-down\"\u003e\u003c/i\u003e ({{ poll.downvotes }}) \u003c/span\u003e\u003c/div\u003e\n                    \u003c/form\u003e\n                    \u003cbutton class=\"btn btn-block\" style=\"margin: 1em 0; background: #1bff8b; cursor: pointer; font-weight: bold\" v-on:click=\"UpdatePoll(index)\"\u003e Vote \u003c/button\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNext in the same file, paste the following code before the closing `body` tag of the HTML:\n\n``` javascript\n    \u003cscript\u003e\n    var app = new Vue({\n        el: '#app',\n        data: {\n            polls: [],\n            click: [],\n        },\n        created: function () {\n            axios.get('/polls')\n                .then(res =\u003e this.polls = res.data.items ? res.data.items : [])\n                .catch(e =\u003e this.failed('Unsuccesful'))\n        },\n        methods: {\n            upvote: function (n) {\n                if (this.click[n] == true) {\n                    this.polls[n].downvotes -= 1;\n                    this.polls[n].upvotes += 1;\n                } else {\n                    this.polls[n].upvotes += 1;\n                    this.click[n] = true;\n                }\n            },\n            downvote: function (n) {\n                if (this.click[n] == true) {\n                    this.polls[n].upvotes -= 1;\n                    this.polls[n].downvotes += 1;\n                } else {\n                    this.polls[n].downvotes += 1;\n                    this.click[n] = true;\n                }\n            },\n            UpdatePoll: function (index) {\n                let targetPoll = index + 1;\n                axios.put('/poll/' + targetPoll, this.polls[index])\n                    .then(res =\u003e this.approved('Successful'))\n                    .catch(e =\u003e this.failed('Unsuccesful'))\n            },\n            approved: function (data) {\n                $(\"#msg\").css({\n                    \"background-color\": \"rgb(94, 248, 94)\",\n                    \"border-radius\": \"20px\"\n                });\n                $('#msg').html(data).fadeIn('slow');\n                $('#msg').delay(3000).fadeOut('slow');\n            },\n            failed: function (data) {\n                $(\"#msg\").css({ \"background-color\": \"rgb(248, 66, 66)\", \"border-radius\": \"20px\" });\n                $('#msg').html(data).fadeIn('slow');\n                $('#msg').delay(3000).fadeOut('slow');\n            }\n        }\n    })\n    \u003c/script\u003e\n```\n\nAbove we have our Vue code. We added the `created()` life cycle hook so that [Axios](https://www.npmjs.com/package/axios) can make a `GET` request to the backend API.\n\nWe’ve also defined two functions to keep track of the clicks on `upvotes` or `downvotes` to any members of the poll. These functions call another function, `UpdatePoll`, which takes the index of the affected poll member as argument and makes a PUT request to the backend API for an update.\n\nLastly, we used jQuery to display matching `divs`  depending on if the update request was successful or unsuccessful.\n\nHere’s a display of the application at the current level:\n\n![voting-app-go-stage-1](//images.ctfassets.net/1es3ne0caaid/3E8smWapTOSuska6mm0mgw/7e961cac0db5b12ec2a0994c9deaaa11/voting-app-go-stage-1.png)\n\nNext, head over to [Pusher](https://pusher.com), you can [create a free account](https://pusher.com/signup?plan=sandbox) if you don’t already have one. On the [dashboard](https://dashboard.pusher.com/), create a new app and copy out the app credentials (App ID, Key, Secret, and Cluster). We will use these credentials shortly.\n\n### Sending realtime data from the backend\n\nTo make sure our application is realtime, our backend must trigger an event when the poll is voted on. \n\nTo do this let’s pull in the [Pusher Go library](https://github.com/pusher/pusher-http-go), which we will use to trigger events. Run the command below to pull in the package:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\nIn the `models.go` file, let’s import the Pusher Go library:\n \n``` go\n    package models\n    \n    import (\n        // [...]\n    \n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n```\n \nThen initialize the Pusher client. In the same file before the type definitions paste in the following:\n\n``` go\n    // [...]\n    \n    var client = pusher.Client{\n            AppId:   \"PUSHER_APP_ID\",\n            Key:     \"PUSHER_APP_KEY\",\n            Secret:  \"PUSHER_APP_SECRET\",\n            Cluster: \"PUSHER_APP_CLUSTER\",\n            Secure:  true,\n    }\n    \n    // [...]\n```\n\nHere, we have initialized the Pusher client using the credentials from our earlier created app.\n\n\u003e ⚠️  Replace `PUSHER_*`  keys with your app credentials.\n\nNext, we will use our Pusher client to trigger an event, which will include the updates on the specific row in the database to be displayed as an update to the votes in our view. We will do this in the `UpdatePoll` method, which updates the state of `upvotes` and `downvotes` in the database.\n\nReplace the `UpdatePoll` function with the following code:\n\n``` go\n    func UpdatePoll(db *sql.DB, index int, name string, upvotes int, downvotes int) (int64, error) {\n        sql := \"UPDATE polls SET (upvotes, downvotes) = (?, ?) WHERE id = ?\"\n    \n        stmt, err := db.Prepare(sql)\n    \n        if err != nil {\n            panic(err)\n        }\n    \n        defer stmt.Close()\n    \n        result, err2 := stmt.Exec(upvotes, downvotes, index)\n    \n        if err2 != nil {\n            panic(err2)\n        }\n    \n        pollUpdate := Poll{\n            ID:        index,\n            Name:      name,\n            Upvotes:   upvotes,\n            Downvotes: downvotes,\n        }\n    \n        client.Trigger(\"poll-channel\", \"poll-update\", pollUpdate)\n        return result.RowsAffected()\n    }\n```\n\nAbove, we create a `pollUpdate` object that holds the data for the most recent update to a row in the `polls` table. This `pollUpdate` object has all the data required for a realtime update on the client-side of our application, so will be passed to Pusher for transmission.\n\n### Displaying data in realtime on the client\nTo display the realtime updates on votes, we will use the Pusher JavaScript client. Open your `index.html` file and include the Pusher JavaScript library inside the `head` tag like this:\n\n```\n    \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n```\n\nNext, we want to go to the `created()` method and create a Pusher instance using our app’s credentials:\n\n``` go\n    created: function() {\n        const pusher = new Pusher('PUSHER_APP_KEY', {\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n        \n        // [...]\n    }\n```\n\n\u003e ⚠️  Replace `PUSHER_APP_*` with values from your applications credentials.\n\nNext, let’s subscribe to the `poll-channel` and listen for the `poll-update` event, where our votes updates will be transmitted. Right after the code we added above, paste the following:\n\n``` go\n    const channel = pusher.subscribe('poll-channel');\n    \n    channel.bind('poll-update', data =\u003e {\n        this.polls[data.id - 1].upvotes = data.upvotes;\n        this.polls[data.id - 1].downvotes = data.downvotes;\n    });\n```\n\n\u003e **Note**:  We are subtracting from the `polls` array index because we need it to match the data received from Pusher. JavaScript arrays begin their index at 0, while SQL id starts at 1.  \n\nNow we can build our application and see that the realtime functionality in action.\n\n```\n    $ go run poll.go\n```\n\nOnce the application is running, we can point our browser to this address [http://localhost:9000](http://localhost:9000/)\n\n![voting-app-go-demo-1](//images.ctfassets.net/1es3ne0caaid/5ZJDwcs6Zig28MsWIoqoMM/7b1fed4d80b0e15f596adde3027bcc9c/voting-app-go-demo-1.gif)\n\n## Conclusion\n\nIn this article, we were able to trigger realtime updates on new votes and demonstrate how Pusher works with Go applications. We also learnt, on an unrelated note, how to consume API’s using Vue.js.\n\nThe source code to the application is available on [GitHub](https://github.com/neoighodaro/realtime-poll-go-pusher).","metaTitle":"Build a voting application with Go and Vue.js","metaDescription":"This short tutorial will show you how to build a simple web app with Go and Vue.js. You will create a polling app. Users will be able to vote on their favorite JavaScript frameworks, and see responses update instantly."}}],"defaultValue":"","queryType":"","pages":50,"route":"/tutorials","query":{"page":"31"}}},"page":"/tutorials","query":{"page":"31"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?page=31 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:52 GMT -->
</html>