<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Social&page=5 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:51 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">64</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; Social</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials3671.html?tag=Social" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials19b3.html?product=Beams&amp;tag=Social" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; Social"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/live-comments-sentiment-analysis-angular.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Live comments and ratings using sentiment analysis and Angular</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Learn to build a live comments application using Angular, featuring sentiment analysis. Use the sentiment analysis to me...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-sentiment-analysis-nestjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Nest.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app with sentiment analysis using Nest.js</h3><p class="css-k12xad e5jrto45">Learn to build a chat app with Nest.js. Add a fun element with sentiment analysis, automatically attaching emoticons bas...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/comments-sentiment-analysis-nextjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a comments widget with sentiment analysis using Next.js</h3><p class="css-k12xad e5jrto45">Learn to build a comments widget with Next.js. Use sentiment analysis to gauge the mood of the comments and automaticall...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-tables-nextjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime table with Next.js</h3><p class="css-k12xad e5jrto45">Use Next.js, React Table and Pusher to create a movie review site, updated in realtime as users post reviews.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/collaborative-text-editor-net.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">.NET</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an online collaborative text editor using .NET</h3><p class="css-k12xad e5jrto45">Learn to build an online document editing app using .NET. Featuring realtime updates for new edits.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-sentiment-analysis-nextjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Online Presence</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app with sentiment analysis using Next.js</h3><p class="css-k12xad e5jrto45">Use Next.js to build a chat app featuring sentiment analysis to track users&#x27; moods. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime Instagram clone — Part 2: Connecting the UI with GraphQL data</h3><p class="css-k12xad e5jrto45">This four-part series takes you through building an Instagram clone using Node and React. In part two, connect your UI a...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-part-4.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime Instagram clone — Part 4: Going offline with service workers</h3><p class="css-k12xad e5jrto45">This four-part series takes you through building an Instagram clone using Node and React. In part four, implement offlin...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime Instagram clone — Part 3: Realtime feed updates with Pusher and desktop notifications</h3><p class="css-k12xad e5jrto45">This four-part series takes you through building an Instagram clone using Node and React. In part three, implement realt...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsef07.html?product=Channels&amp;tag=Social&amp;page=4" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialsc8c3.html?product=Channels&amp;tag=Social&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials0eeb.html?product=Channels&amp;tag=Social&amp;page=3" class="css-za1ua3 edg0byb1">3</a><a href="tutorialsef07.html?product=Channels&amp;tag=Social&amp;page=4" class="css-za1ua3 edg0byb1">4</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials60b8.html?product=Channels&amp;tag=Social&amp;page=5" class="css-2wakph edg0byb1">5</a><a href="tutorialsff58.html?product=Channels&amp;tag=Social&amp;page=6" class="css-5s6711 edg0byb1">6</a><a href="tutorials37d5.html?product=Channels&amp;tag=Social&amp;page=7" class="css-5s6711 edg0byb1">7</a><a href="tutorials4034.html?product=Channels&amp;tag=Social&amp;page=8" class="css-5s6711 edg0byb1">8</a><a href="tutorialsff58.html?product=Channels&amp;tag=Social&amp;page=6" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":64,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3DkeuCPVMQ4cKIEckycsaO","type":"Entry","createdAt":"2018-05-09T09:36:10.483Z","updatedAt":"2018-05-09T09:36:10.483Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Live comments and ratings using sentiment analysis and Angular","url":"live-comments-sentiment-analysis-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/angular-live-comment","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-05-08","description":"Learn to build a live comments application using Angular, featuring sentiment analysis. Use the sentiment analysis to measure whether comments are positive or negative, and display this information on an admin panel.","prerequisite":"You should have Node and npm installed on your machine. A basic understanding of Angular and Node is required.","content":"## Introduction\n\nSentiment analysis is a way to evaluate written or spoken language to determine if the expression is favorable, unfavorable, or neutral, and to what degree. You can read up about it [here](https://www.clarabridge.com/sentiment-analysis/).\n\nLive comments offer a realtime comment experience that doesn’t require a page refresh. You see comments when they’re posted.\n\nUsing [Angular](https://angular.io), you can extend the template language with your components and use a wide array of existing components. With [Pusher](https://pusher.com) we can enable realtime messaging in the chat using Pusher’s pub/sub pattern. \n\nWe’ll be building a live comments application using Pusher, Angular and the [sentiment](https://github.com/thisandagain/sentiment) library for emoji suggestions based on the context of messages received.\n\nUsing our application, admin users can view how videos are rated based on the analysis of the messages sent in the live comments section.\n\nHere’s a demo of the final product:\n\n![angular-comments-sentiment-demo](//images.ctfassets.net/1es3ne0caaid/3rWNv9JECI8O8ygySuAgaY/28000959a9534d3bd6c97a34afb5d525/angular-comments-sentiment-demo.gif)\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of Angular and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nWe’ll be using these tools to build out our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Angular](https://angular.io)\n- [Sentiment](https://github.com/thisandagain/sentiment)\n\nWe’ll be sending messages to the server, then using [Pusher’s](https://pusher.com) pub/sub pattern, we’ll listen and receive messages in realtime. To make use of Pusher you’ll have to create an account [here](https://pusher.com). \n\nAfter account creation, visit the dashboard. Click **Create new Channels** **app**, fill out the details, click **Create my app**, and make a note of the details on the **App Keys** tab.\n\nLet’s build!\n\n## Setup and folder structure\n\nUsing the Angular [CLI](https://cli.angular.io/) (command line interface) provided by the Angular team, we’ll initialize our project. To initialize the project, first, install the CLI by running `npm install @angular/cli` in your terminal. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/) installed.\n\nTo create a new Angular project using the CLI, open a terminal and run:   \n```\n    ng new angular-live-comments --style=scss --routing\n```\nThe command tells the CLI to create a new project called `angular-live-comments`, use the CSS pre-processor SCSS rather than CSS for styling and set up routing for the application.\n\nOpen the newly created folder `angular-live-comments`, your folder structure should be identical to this:\n\n```\n    angular-live-comments/\n      e2e/\n      node_modules/\n      src/\n        app/\n          app.component.html\n          app.component.ts\n          app.component.css\n          ...\n```\nOpen a terminal inside the project folder and start the application by running `ng serve` or `npm start`. Open your browser and visit http://localhost:4200.  What you see should be identical to the screenshot below.\n\n![angular-welcome-screen](//images.ctfassets.net/1es3ne0caaid/7Cw6E4WHFmaOogyKkK0MA/a660fc968171c614fd566c33c5e00d7d/tables-angular-welcome-screen.png)\n\n##  Building our server\n\nNow that we have our Angular application running, let’s build out a part of our server.\n\nTo do this we’ll need to install [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/). We’ll use this to receive requests from our Angular application.\n\nTo install express, run `npm install express` in a terminal in the root folder of your project.\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nWe referenced three packages that haven’t been installed, `body-parser`, `pusher` and `dotenv`. Install these packages by running the following command in your terminal.\n\n```\n    npm i body-parser pusher dotenv\n```\n\n- body-parser is a package used to parse incoming request bodies in a middleware before your handlers, available under the `req.body` property.\n- dotenv is a zero-dependency module that loads environment variables from a `.env` file into `[process.env](https://nodejs.org/docs/latest/api/process.html#process_process_env)`. This package is used to avoid adding sensitive information like the `appId` and `secret` into our codebase directly. \n- The dotenv package will load the variables provided in our `.env` file into our environment.\n- CORS: The calls to our endpoint will be coming in from a different origin. Therefore we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\n The `dotenv` library should always be initialized at the start of our file because we need to load the variables as early as possible to make them available throughout the application.\n\nWe also installed the [Pusher](https://pusher.com) library as a dependency. Follow the steps above to create a Pusher account if you haven’t done so already\n\nLet’s create a `.env` file to load the variables we’ll be needing into the Node environment. Create the file in the root folder of your project and update it with the code below.\n\n```\n    // .env\n    \n    PUSHER_APP_ID=APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n```\nPlease ensure you replace the placeholder values above with your Pusher `appId`, `key` and `secret`.\n\nThis is a standard Node application configuration, nothing specific to our app.\n\n### Sending messages\n\nTo enable users to send and receive messages, we’ll create a route to handle incoming requests. Update your `server.js`  file with the code below.\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: 'eu',\n      encrypted: true,\n    });\n    \n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.post('/messages', (req, res) =\u003e {\n      const { body } = req;\n      const { text, name } = body;\n      const data = {\n        text,\n        name,\n        timeStamp: new Date(),\n      };\n      \n      try {\n        pusher.trigger(['chat', 'rate'], 'message', data);\n      } catch (e) {}\n      res.json(data);\n    });\n    \n     ...\n```\n\n- We created a `POST /messages` route which, when hit, triggers a Pusher event.\n- We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the body of the request, we also got the `text` and `name` in the request body sent by the user.\n- The `data` object contains the `text` and `name` sent by the user. It also includes a timestamp. \n-  The `trigger` method which takes a trigger identifier, we included a list of channels because we wish to dispatch the event across two channels(`chat`,  `rate`). \n- The trigger function also takes a second argument, the event name (`message`), and a payload(`data`).\n- We still go ahead to respond with an object containing the `data` variable we created. \n\n\n### Sentiment analysis\n\n\n\u003e Sentiment analysis uses data mining processes and techniques to extract and capture data for analysis in order to discern the subjective opinion of a document or collection of documents, like blog posts, reviews, news articles and social media feeds like tweets and status updates.                - [Technopedia](https://www.techopedia.com/definition/29695/sentiment-analysis)\n\n\nUsing sentiment analysis, we’ll analyze the messages sent to determine the attitude of the sender. With the data gotten from the analysis, we’ll determine the emojis to suggest to the user. \n\nWe’ll use the [Sentiment](https://github.com/thisandagain/sentiment) JavaScript library for analysis. To install this library, open a terminal in the root folder of your project and run the following command. \n\n```\n    npm install sentiment\n```\nWe’ll update our `POST /messages` route to include analysis of the messages being sent in. Update your `server.js` with the code below.\n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const Sentiment = require('sentiment');\n    const sentiment = new Sentiment();\n    \n    ...\n    \n    app.post('/messages', (req, res) =\u003e {\n      const { body } = req;\n      const { text, name } = body;\n      const result = sentiment.analyze(text);\n      const comparative = result.comparative;\n      \n      const data = {\n        text,\n        name,\n        timeStamp: new Date(),\n        score: result.score,\n      };\n      try {\n        pusher.trigger(['chat', 'rate'], 'message', data);\n      } catch (e) {}\n      res.json(data);\n    });\n    \n    ...\n```    \n\n\n- Include the sentiment library in the project.\n- `result`: here, we analyze the message sent in by the user to determine the context of the message.\n- `comparative`: this is the comparative score gotten after analyzing the message. \n- A new property (`score`) is added to the response data containing the message’s score after analysis.\n\nYou can now start the server by running `node server.js` in a terminal in the root folder of the project.\n\n\n## Chat view\n\nLet’s begin to build out our chat interface. We’ll create a `chat` component to hold the chat interface. We’ll create this using the CLI. Run `ng generate component chat` in a terminal in the root folder of your project. \n\nUpdate the recently created files as follows: \n\n``` html\n    // chat.component.html\n    \n    \u003cdiv\u003e\n      \u003cdiv class=\"input-area\"\u003e\n        \u003cform (submit)=\"sendMessage()\" name=\"messageForm\" #messageForm=\"ngForm\"\u003e\n          \u003cdiv\u003e\n            \u003cinput type=\"text\" placeholder=\"Your name\" name=\"name\" id=\"name\" [(ngModel)]=\"message.name\"\u003e\n            \u003ctextarea type=\"text\" placeholder=\"Your message\" name=\"message\" id=\"message\" [(ngModel)]=\"message.text\" rows=\"5\"\u003e\u003c/textarea\u003e\n          \u003c/div\u003e\n          \u003cbutton\u003e\n            \u003cspan data-feather=\"send\"\u003e\u003c/span\u003e\n          \u003c/button\u003e\n        \u003c/form\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```    \n\nIn the code snippet above:\n\n- We have a form containing an input element, a textarea and a submit button.\n- We are using an icon-set called [feather-icons](https://feathericons.com) in our project. To include feather-icons in your project, simply add the cdn link in your `index.html` file.\n\n``` html\n    // index.html\n    ...\n    \u003cscript src=\"https://unpkg.com/feather-icons/dist/feather.min.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    ...\n```\n\nOpen the `chat.component.ts` file and update with the code below:\n\n``` typescript\n    // chat.component.ts\n    \n    import { Component, OnInit, Output, EventEmitter } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    declare const feather: any;\n    export interface Message {\n      text: string;\n      name: string;\n    }\n    @Component({\n      selector: 'app-chat',\n      templateUrl: './chat.component.html',\n      styleUrls: ['./chat.component.scss'],\n    })\n    export class ChatComponent implements OnInit {\n      constructor(private http: HttpClient) {}\n      @Output() onSendMessage: EventEmitter\u003cMessage\u003e = new EventEmitter();\n      message = {\n        name: '',\n        text: '',\n      };\n      sendMessage() {\n        if (this.message.text !== '' \u0026\u0026 this.message.name !== '') {\n          this.http\n            .post(`http://localhost:4000/messages`, this.message)\n            .subscribe((res: Message) =\u003e {\n              this.onSendMessage.emit(res);\n              this.message = {\n                name: '',\n                text: '',\n              };\n            });\n        }\n      }\n      ngOnInit() {\n        feather.replace(); \n      }\n    }\n```\n\n`sendMessage`: this method uses the native `HttpClient` to make requests to the server. The `POST` method takes a URL and the request `body` as parameters. We then append the data returned to the array of messages. \n\nIn the `ngOnInit` lifecycle, we initialize `[feather](https://feathericons.com)`, our chosen icon set. \n\nTo make use of the `HttpClient` service, we’ll need to import the `HttpClientModule` into the `app.module.ts` file. Also to make use of form-related directives, we’ll need to import the `FormsModule`. Update your app module file as follows:\n\n``` typescript\n    // app.module.ts\n    ...\n    import { ChatComponent } from './chat/chat.component';\n    import {HttpClientModule} from '@angular/common/http';\n    import {FormsModule} from \"@angular/forms\";\n    \n    @NgModule({\n      declarations: [AppComponent, ChatComponent],\n      imports: [BrowserModule, AppRoutingModule, HttpClientModule, FormsModule],\n      providers: [],\n      bootstrap: [AppComponent],\n    })\n      ...\n```\n\n### Styling\n\nOpen the `chat.component.scss` file and update it with the following styles below: \n\n``` scss\n    // chat.component.scss\n    \n    %input {\n      width: 100%;\n      border: none;\n      background: rgba(0, 0, 0, 0.08);\n      padding: 10px;\n      color: rgba(0, 0, 0, 0.3);\n      font-size: 14px;\n      font-weight: bold;\n      font-family: 'Roboto Condensed', sans-serif;\n      border-radius: 15px;\n      \u0026:focus{\n        outline: none;\n      }\n    }\n    .input-area {\n      width: 100%;\n      form {\n        display: flex;\n        flex-direction: column;\n        div {\n          display: flex;\n          flex-direction: column;\n          max-width: 450px;\n          input {\n            @extend %input;\n            margin: 0 0 10px 0;\n          }\n          textarea {\n            @extend %input;\n          }\n        }\n        button {\n          width: 25%;\n          border: none;\n          background: darkslategray;\n          color: white;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          cursor: pointer;\n          margin-top: 10px;\n          padding: 5px 20px;\n          border-radius: 27px;\n          box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.12),\n            0 2px 4px 0 rgba(0, 0, 0, 0.08);\n        }\n      }\n    }\n```\n\n## Home view \n\nLet’s create the home component, this will house (pun intended) our `chat` component, video and list of messages. Run `ng generate component home` in a terminal in the root folder of your project.\n\nOpen the `home.component.html` file and replace the contents with the snippet below.\n\n``` html\n    // home.component.html\n    \n    \u003cdiv\u003e\n      \u003cdiv class=\"video\"\u003e\n        \u003ciframe width=\"500\" height=\"300\" src=\"https://www.youtube.com/embed/7CVtTOpgSyY\" frameborder=\"0\" allow=\"autoplay; encrypted-media\"\n          allowfullscreen\u003e\u003c/iframe\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"messages\"\u003e\n        \u003ch4\u003eMessages\u003c/h4\u003e\n        \u003cdiv class=\"message\" *ngFor=\"let message of messages\"\u003e\n          \u003cdiv class=\"pic\"\u003e\n            \u003cimg src=\"/assets/man.svg\" alt=\"profile-img\"\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"message-text\"\u003e\n            \u003cspan\u003e{{message.name}}\u003c/span\u003e\n            \u003cp\u003e{{message.text}}\u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \u003capp-chat\u003e\u003c/app-chat\u003e\n    \u003c/div\u003e\n```\n\n\u003e **Note:** you can find the assets used throughout the article in the GitHub [repo](https://github.com/christiannwamba/angular-live-comment).\n\nOpen the `home.component.ts` file and update it with the following snippet:\n\n``` typescript\n    // home.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { Message } from '../chat/chat.component';\n    \n    @Component({\n      selector: 'app-home',\n      templateUrl: './home.component.html',\n      styleUrls: ['./home.component.scss'],\n    })\n    \n    export class HomeComponent implements OnInit {\n      constructor() {}\n      messages: Array\u003cMessage\u003e = [];\n      ngOnInit() {\n      }\n    }\n```    \n\n### Styling\n\nOpen the `home.component.scss` file and update it with the styles below:\n\n``` scss\n    .video {\n      width: 500px;\n      height: 300px;\n      background: rgba(0, 0, 0, 0.2);\n      margin-bottom: 20px;\n    }\n    .messages {\n      margin-bottom: 30px;\n      border-bottom: 2px solid rgba(0, 0, 0, 0.2);\n      max-width: 500px;\n      h4 {\n        margin: 10px 0;\n      }\n      .message {\n        display: flex;\n        .pic {\n          display: flex;\n          align-items: center;\n          img {\n            height: 40px;\n            width: 40px;\n            border-radius: 50%;\n          }\n        }\n        .message-text {\n          padding: 10px;\n          span {\n            font-size: 11px;\n            opacity: 0.8;\n            font-weight: bold;\n          }\n          p {\n            font-size: 15px;\n            opacity: 0.6;\n            margin: 2px 0;\n          }\n        }\n      }\n    }\n```\n\n\n\n## Introducing Pusher\n\nSo far we have an application that allows users send in comments, but these comments are only visible to the sender. We’ll include the [Pusher](https://pusher.com) library in our application to enable realtime features like seeing comments as they come in without having to refresh the page.\n\nOpen a terminal in the root folder of the project and install the package by running the following command:\n\n```\n    npm install pusher-js\n```\n\nWe’ll add the library as a third party script to be loaded by Angular CLI. CLI config is always stored in the `.angular-cli.json` file. Modify the `scripts` property to include the link to `pusher.min.js`.\n\n``` json\n    // .angular-cli.json\n    ...\n    \n    \"scripts\": [\n      \"../node_modules/pusher-js/dist/web/pusher.min.js\"\n    ]\n     ...\n```          \n\nNow that Pusher has been made available in our project, we’ll create a Pusher service to be used application wide. The Angular CLI can aid in the service creation.  Open a terminal in your project’s root folder and run the following command.\n\n```\n    ng generate service pusher\n```\n\nThis command simply tells the CLI to generate a service named `pusher`. Now open the `pusher.service.ts` file and update it with the code below.\n\n``` typescript\n    // pusher.service.ts\n    \n    import { Injectable } from '@angular/core';\n    declare const Pusher: any;\n    @Injectable()\n    export class PusherService {\n      constructor() {\n      // Replace this with your pusher key    \n        this.pusher = new Pusher('\u003cPUSHER_KEY\u003e', {\n          cluster: 'eu',\n          encrypted: true,\n        });\n      }\n      pusher;\n      public init(channel) {\n        return this.pusher.subscribe(channel);\n      }\n    }\n```\n\n\n\n- First, we initialize Pusher in the constructor. \n- The  `init` subscribes to the channel passed as a parameter. \n\n\n\u003e **Note:** ensure you replace the `PUSHER_KEY` string with your actual Pusher key.\n\nTo make the service available application wide, import it into the module file.\n\n``` typescript\n    // app.module.ts\n    ...\n    import { HttpClientModule } from '@angular/common/http';\n    import {PusherService} from './pusher.service';\n    \n    @NgModule({\n       ....\n       providers: [PusherService],\n       ....\n     })\n```\n \n We’ll make use of this service in our component, by binding to the message event and appending the returned message into the list of messages. This will be done in the `ngOnInit` lifecycle in the `home.component.ts` file.\n\n``` typescript\n    // home.component.ts\n    import { Component, OnInit } from '@angular/core';\n    import { Message } from '../chat/chat.component';\n    import { PusherService } from '../pusher.service';\n    ...\n    \n      constructor(private pusher: PusherService){}\n      messages: Array\u003cMessage\u003e = [];\n    \n      ngOnInit() {\n        const channel = this.pusher.init('chat');\n        channel.bind('message', (data) =\u003e {\n          this.messages = this.messages.concat(data);\n        });\n      }\n    }\n```\n\n\n\n## Routing\n\nTo enable routing between the `home` and `admin` page, we’ll define routes for each component in the `app-routing.module.ts` file.\n\n``` typescript\n    // app-routing.module.ts\n    \n    import { NgModule } from '@angular/core';\n    import { Routes, RouterModule } from '@angular/router';\n    import { HomeComponent } from './home/home.component';\n    \n    const routes: Routes = [\n      {\n        component: HomeComponent,\n        path: '',\n      },\n    ];\n    \n    @NgModule({\n      imports: [RouterModule.forRoot(routes)],\n      exports: [RouterModule],\n    })\n    \n    export class AppRoutingModule {}\n```\n\n\n`routes`: previously, the `routes` variable was an empty array, but we’ve updated it to include two objects containing our route `component` and `path`.\n\n\nNext we’ll replace all the contents in your `app.component.html` file leaving just the `router-outlet`. Your `app.component.html` file should look like the snippet below:\n\n``` html\n    // app.component.html\n    \n    \u003cdiv class=\"main\"\u003e\n      \u003crouter-outlet\u003e\u003c/router-outlet\u003e\n    \u003c/div\u003e\n```\n\nLet’s have a look at what our home page looks like after the updates. Navigate to http://localhost:4200\n\n![angular-comments-sentiment-home](//images.ctfassets.net/1es3ne0caaid/6rLqKZoZBC6cqIUCW0KaUQ/56a695bb4a6e5ec9302a9d795fcccec2/angular-comments-sentiment-home.png)\n\n## Admin page\n\nWhenever we post a video, we want to be able to tell how the video was perceived by users using their comments on the video. Sentiment analysis is used to achieve this. All comments under the video will be analyzed to determine the user’s attitude towards the video. All videos posted will be rated based on the tone of every comment posted.\n\nIf the comments under a video are mostly negative, the video will get a simple thumbs down(👎🏼) and a thumbs up(👍🏼) if the comments are positive. \n\nTo create the admin page, run `ng generate component admin` in a terminal in the root folder of your project.\n\nReplace the contents of the `admin.component.html` file with the snippet below.\n\n``` html\n    // admin.component.html\n    \n    \u003cdiv class=\"admin\"\u003e\n      \u003ch3\u003eAdmin\u003c/h3\u003e\n      \u003cdiv\u003e\n        \u003ch4\u003eVideos List\u003c/h4\u003e\n        \u003cdiv class=\"video\"\u003e\n          \u003cdiv class=\"vid-thumbnail\"\u003e\n            \u003cimg src=\"/assets/vid-thumbnail.png\" alt=\"video thumbnail\"\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"vid-desc\"\u003e\n            \u003cspan\u003ePixar\u003c/span\u003e\n            \u003cp\u003eShooting Star Clip\u003c/p\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"vid-rating\"\u003e\n            \u003cspan class=\"header\"\u003e\n              Rating\n            \u003c/span\u003e\n            \u003cdiv [hidden]=\"rating \u003c 1\"\u003e\n              \u003cspan data-feather=\"thumbs-up\" class=\"positive\"\u003e\u003c/span\u003e\n            \u003c/div\u003e\n            \u003cdiv [hidden]=\"rating \u003e= 1\"\u003e\n              \u003cspan data-feather=\"thumbs-down\" class=\"negative\"\u003e\u003c/span\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n\n\n\u003e **Note:** all assets used are available in the repo [here](https://github.com/christiannwamba/angular-live-comment).\n\nWe have the thumbs up and thumbs down icons, we display thumbs up if the rating is one and above. Thumbs down is displayed when the video rating is below one. The `rating` property will be defined in the `admin.component.ts` file below.\n\n### Styling\n\nAdd the styles below to the `admin.component.scss` file.\n\n``` scss\n    // admin.component.scss\n    \n    .admin {\n      width: 500px;\n      .video {\n        display: flex;\n        box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.2);\n        padding: 10px;\n        .vid-thumbnail {\n          flex: 1;\n          img {\n            height: 70px;\n            width: 120px;\n          }\n        }\n        .vid-desc {\n          flex: 4;\n          padding: 0 8px;\n          span {\n            font-size: 15px;\n            font-weight: bold;\n            opacity: 0.8;\n          }\n          p {\n            margin: 3px;\n            font-size: 17px;\n            opacity: 0.6;\n          }\n        }\n        .vid-rating {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          .header{\n            font-size: 12px;\n            margin: 0 0 5px;\n            opacity: 0.6;\n          }\n          .positive {\n            color: #40a940;\n          }\n          .negative {\n            color: rgb(196, 64, 64);\n          }\n        }\n      }\n    }\n```\n\n\nOpen the `admin.component.ts` file and update it as so:\n\n``` typescript\n    // admin.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { PusherService } from '../pusher.service';\n    \n    declare const feather: any;\n    \n    @Component({\n      selector: 'app-admin',\n      templateUrl: './admin.component.html',\n      styleUrls: ['./admin.component.scss'],\n    })\n    \n    export class AdminComponent implements OnInit {\n      constructor(private pusher: PusherService) {}\n      rating = 1;\n      \n      ngOnInit() {\n        feather.replace();\n        const channel = this.pusher.init('rate');\n        channel.bind('message', (data) =\u003e {\n          this.rating += data.score;\n        });\n      }\n    }\n```\n\n- `rating`: starting out, every video has a rating of 1.\n- In the `ngOnInit` lifecycle, we initialize feather and subscribe to the `rate` channel. We then listen for a `message` event. In the callback, the `score`  property of the data returned is added to the `rating` property.\n\n\nNow let’s define the route for the admin page. Open the `app-routing.module.ts` file and update the `routes` array like so:\n\n``` typescript\n    // app-routing.module.ts\n    import { NgModule } from '@angular/core';\n    import { Routes, RouterModule } from '@angular/router';\n    import { HomeComponent } from './home/home.component';\n    import { AdminComponent } from './admin/admin.component';\n    \n    const routes: Routes = [\n      {\n        component: HomeComponent,\n        path: '',\n      },\n      {\n        component: AdminComponent,\n        path: 'admin',\n      },\n    ];\n    ...\n```\n\nNavigate to http://localhost:4200/admin to view the admin page. Here’s a screenshot of what it looks like:\n\n![angular-comments-sentiment-admin](//images.ctfassets.net/1es3ne0caaid/zpnyoDkAfYMwQ6m6OewY6/191a5054646bfc39b847213f5db0ef6b/angular-comments-sentiment-admin.png)\n\nThere’s not much going on here, but now our admin page rates videos in realtime whenever there’s a new comment. \n\nHere’s a screenshot of both pages side by side.\n\n![angular-comments-sentiment-both-views](//images.ctfassets.net/1es3ne0caaid/wpeiNFaL0yy8KSegKOugQ/2390d72d67eadf6289ccd55dba1e12fd/angular-comments-sentiment-both-views.png)\n\n## Conclusion\n\nUsing the sentiment analysis library, we can rate videos on our site by analyzing the comments posted under the videos. Using [Pusher Channels](https://pusher.com/channels), we were able to implement live comments functionality in our application. You can view the source code for the demo [here](https://github.com/christiannwamba/angular-live-comment).","metaTitle":"Build live comments and ratings using sentiment and Angular","metaDescription":"This tutorial shows you how to build a live comments application, featuring sentiment analysis. Use Angular and Node.js with a sentiment analysis library to measure whether comments are positive or negative, and display this information on an admin panel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5axHEzyj0Wai02m4GcWSw0","type":"Entry","createdAt":"2018-05-06T17:31:45.700Z","updatedAt":"2018-05-06T17:31:49.489Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app with sentiment analysis using Nest.js","url":"chat-sentiment-analysis-nestjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/nest-pusher-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SgQuYVb0kSMIgEmwqImOA","type":"Entry","createdAt":"2018-02-12T14:49:17.136Z","updatedAt":"2018-04-19T08:52:46.508Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Nest.js","url":"nest-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-05-06","description":"Learn to build a chat app with Nest.js. Add a fun element with sentiment analysis, automatically attaching emoticons based on the user's detected mood.","prerequisite":"To follow this tutorial you need Node and npm installed on your machine. A basic understanding of TypeScript and Node.js will be helpful.","content":"## Introduction\n\nIn recent years, sentiment analysis has shifted from analyzing online product reviews to social media texts from Twitter and Facebook. Now with the advent and popularity of chat applications on virtually all web applications around the world, we can use a [sentiment analysis](https://github.com/thisandagain/sentiment) tool to add a fun feature that enriches users’ chat experience.\n\nIn this post, we will take a dive into a realtime chat demo. This application will be built using Nest.js and Pusher. Nest.js is a Node.js progressive framework for building efficient and scalable server-side applications. In addition, we will also be able to perform sentiment analysis on messages sent by users. \n\n## Prerequisites\n\nA basic understanding of TypeScript and Node.js will help you get the best out of this tutorial. It is assumed that you already have Node and npm installed. Kindly check [Node.js](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) for further instructions and installation steps. \n\nHere is a quick overview of the technologies that we will be using in this post. \n\n\n- [Nest.js](https://nestjs.com/): a progressive framework for building efficient and scalable server-side applications. Built to take the advantage of modern JavaScript, but still preserves compatibility with pure JavaScript. \n- [Pusher](https://pusher.com/): a [Node.js](http://nodejs.org/) client to interact with the Pusher REST API\n- [Axios](https://www.npmjs.com/package/axios): a promise-based HTTP client that works both in the browser and in a Node.js environment.\n- [Sentiment](https://github.com/thisandagain/sentiment): Sentiment is a module that uses the [AFINN-165](http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010) wordlist and [Emoji Sentiment Ranking](http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0144296) to perform [sentiment analysis](http://en.wikipedia.org/wiki/Sentiment_analysis) on arbitrary blocks of input text.\n- [Vue.js](https://vuejs.org/): Vue is a progressive JavaScript frontend framework for building web applications.\n\n \n\n## Setting up the application\n\nThe simplest and most efficient way to set up a Nest.js application is to clone the starter repository made available on their [website](https://nestjs.com/).\n\nNow let’s run a command that will create a new project folder named `realtime-chat-nest` on your machine. Open your terminal or command prompt and run this command :\n\n```\n    $ git clone https://github.com/nestjs/typescript-starter.git realtime-chat-nest\n```\n\nGo ahead and change directory into the newly created folder and install all the dependencies for the project.\n\n```\n    // change directory\n    cd realtime-chat-nest\n    \n    // install dependencies\n    npm install\n```\n\n## Start the application\n\nRun the application with:\n\n```\n    npm start\n```\n\nThe command above will start the application on the default port used by Nest.js. Open your browser and navigate to http://localhost:3000. You should see the page with a welcome message like what we have below.\n\n![nest-hello-world](//images.ctfassets.net/1es3ne0caaid/45ET2cOwzYa8MUO6mIwq2Q/c9511e3c4c76117982d0bfadfd43c652/nest-hello-world.png)\n\n## Server dependencies\n\nRun the command below to install the server dependencies required for this project.\n\n```\n    npm install ejs body-parser pusher\n```\n\n- **ejs**: this is a simple templating language for generating HTML markup with plain JavaScript.\n\n\n- **Body-parser**: a middleware used for extracting the entire body portion of an incoming request stream and expose it on `req.body` .\n\n\n- **Pusher**: a Node.js client to interact with the Pusher REST API\n\n\n## Pusher account setup\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![nest-phone-pusher-1](//images.ctfassets.net/1es3ne0caaid/43DKutJFOw86I2cCeMEGMG/246afa094f08c930af91a38c7b1a65fb/nest-phone-pusher-1.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![nest-phone-pusher-2](//images.ctfassets.net/1es3ne0caaid/6m8JvB3xxC444SmaIQ824i/5e5ea5d799a6717ca6c74324ac5a6576/nest-phone-pusher-2.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n\n![nest-phone-pusher-3](//images.ctfassets.net/1es3ne0caaid/4UPXLqxBWMc0mqUuMo462A/1f9779e509f53259bbd32cf0d244ef52/nest-phone-pusher-3.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![nest-phone-pusher-4](//images.ctfassets.net/1es3ne0caaid/1TPXcBKK9ua4Q2OuqSI0IS/5dd742674348e92defd7ecc4aa320755/nest-phone-pusher-4.png)\n\n## Bootstrap the application\n\nUnder the hood, Nest uses the Express library and therefore, favors the popular MVC pattern.\n\nTo set this up, open up `main.ts` file and update it with the content below:\n\n``` typescript\n    // ./src/main.ts\n    \n    import { NestFactory } from '@nestjs/core';\n    import { AppModule } from './app.module';\n    \n    import * as bodyParser from 'body-parser';\n    import * as express from 'express';\n    import * as path from 'path';\n    \n    async function bootstrap() {\n      const app = await NestFactory.create(AppModule);\n      app.use(express.static(path.join(__dirname, 'public')));\n       app.set('views', __dirname + '/views');\n       // set ejs as the view engine\n       app.set('view engine', 'ejs');\n      await app.listen(3000);\n    }\n    bootstrap();\n```\n\nThis is the entry point of the application and necessary for bootstrapping Nest.js apps. I have included the Express module, path, and set up ejs as the view engine for the application.\n\n\n## Building the homepage\n\nThe `views` folder will contain all templates for this application. Go ahead and create it within the `src` folder. Once you are done, create a new file named `index.ejs` right inside the newly created `views` folder and update the content with:\n\n``` html\n    // ./src/views/index.ejs\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"/style.css\"\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.13/vue.js\"\u003e\u003c/script\u003e\n        \n        \u003ctitle\u003e Chat \u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n            \n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-3\" id=\"active-user\"\u003e                    \n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003ch3 v-if=\"username\"\u003eHello {{ username }}\u003c/h3\u003e\n                        \u003cdiv v-else\u003e\n                            \u003ch3\u003eEnter a username\u003c/h3\u003e\n                            \u003cinput type=\"text\" @Keyup.enter=\"getUser\" placeholder=\"Username\" class=\"form-control\"\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n                \u003cdiv class=\"col-md-9\" id=\"chat-room\"\u003e\n                    \u003cdiv v-if=\"username\"\u003e\n                        \u003cdiv\u003e\n                            \u003cdiv style=\"border-bottom: 1px solid black\"\u003e\n                                \u003ch2\u003e{{ username }}\u003c/h2\u003e\n                            \u003c/div\u003e\n                            \u003cdiv v-for=\"chat in chats\" id=\"chat-box\"\u003e\n                                \u003cp\u003e {{chat.mood}} \u003c/p\u003e\n                                \u003cp\u003e \u003cb\u003e{{ chat.user }}\u003c/b\u003e\u003c/p\u003e\n                                \u003cp id=\"chat-message\"\u003e {{ chat.message }} \u003c/p\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"form-group\"\u003e\n                            \u003ctextarea placeholder=\"Type a message here then hit ENTER\"  @Keyup.enter=\"postMessages\"\u003e\u003c/textarea\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.2/axios.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"/main.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nOn this page, we are simply building a basic chat room that will showcase the realtime functionality and sentiment analysis that was mentioned earlier. This will serve as the homepage for the application, hence the need for it to be well structured.\n\nFirstly, we included a link to the Bootstrap CDN file to add some default styling and layout to our application. We also added a custom stylesheet for further styling. We will create this stylesheet in the next section. Also included in a `\u003cscript\u003e` tag just before the page title is a CDN file for Vue.js. This is to ensure that Vue.js is loaded immediately the `index.ejs` file is rendered.\n\nFurthermore, on this page, we used an event handler to listen to keyboard events using key modifiers aliases made available by Vue.js. This process will be discussed later in the tutorial.\n\nFinally, we included CDN file each for `Axios`, `Pusher` and then proceeded to add a custom script file named `main.js`. To set up this file, go ahead and create a `public`  folder within the `src` folder in the application and create the `main.js` file within it.\n\n\n## Stylesheet\n\nTo set up this stylesheet, locate the  `public` folder  and create a new file named `style.css` within it. Next, open the file and paste the code below:\n\n``` css\n    // ./src/public/style.css\n    \n    html{\n        height: 100%;\n    }\n      #active-user {\n          height: 600px;\n          background: #000000;    \n          color: #ffffff;\n          min-height: 600px;\n        \n          display: flex;\n          align-items: center;\n          justify-content: center;\n      }\n      #chat-room {\n          min-height: 600px;\n          background: #f5f5f5;\n      }\n      textarea {\n          position: absolute;\n          bottom: 10px;\n          width: 600px;\n          min-height: 120px;\n          padding: 20px;\n          border: none;\n          overflow: auto;\n          outline: none;\n      }\n      #chat-box {\n          padding: 20px; \n      }\n      #chat-message {\n          background: #f8f9fa!important;\n          max-width: 40%;\n          min-height: 50px;\n          padding: 3px;\n      }\n```\n\n## Handling routes\n\nThe controller layer in Nest.js is responsible for receiving an incoming request and returning the appropriate response to the client. Nest uses a controller metadata `@Controller` to map routes to a specific controller. The starter project already contains a controller by default. We will make use of this in order to render the home for this app. Open `./src/app.controller.ts` and edit as shown below:\n\n``` typescript\n    // ./src/app.controller.ts\n    \n    import { Get, Controller, Res } from '@nestjs/common';\n    \n    @Controller()\n    export class AppController {\n      @Get()\n      root(@Res() res) {\n        res.render('index');\n      }\n    }\n```\n\nThis controller will ensure that Nest maps every `/` route to `index.ejs` file.\n\n\n## Initialize the chat room\n\nAs carefully laid out on our `index.ejs` page earlier on, the chat room will contain two separate sections that will be differentiated by the width of the column. One of the sections will contain an input field that will accept a username and the other section will be where the chat messages are properly displayed.\n\nTo initialize the chat room, we will start by creating a new Vue instance with the Vue function. Open up the `main.js` file created earlier and paste the code below in it:\n\n``` javascript\n    // ./src/public/main.js\n    \n    new Vue({\n        el: '#app',\n        data: {\n            chats: [],\n            username: \"\",\n            mood: ''\n        },\n        methods: {\n            getUser(event) {\n                this.username = event.target.value;\n            }\n            ...\n        }\n    })\n```    \n\nHere, we created a Vue instance and as part of the options, we bound Vue to a div with an id of `app` and also passed data options. Further down, we used a method `getUser()` to retrieve the username of a user.\n\n\n## Post a message\n\n``` javascript\n    // ./src/public/main.js\n    \n    new Vue({\n        el: '#app',\n        data: {\n            chats: [],\n            username: \"\",\n            mood: ''\n        }\n        methods: {\n            getUser(event) {\n                ...\n            },\n            \n            postMessages(event) {\n                const chatMessage = event.target.value;\n                \n                if(event.keyCode === 13 \u0026\u0026 !event.shiftKey) {\n                    const chat = {\n                        user: this.username,\n                        message: chatMessage\n                    };\n                    \n                    event.target.value = \"\";\n                    \n                    axios.post('/message', chat)\n                    .then( data =\u003e {\n                        console.log(data);\n                    });\n                }\n            }\n        }\n    })\n```    \n\nIn order to send the chat message to the server, we created a `postMessages()` function with the responsibility of retrieving the chat message provided by a user and sending it to the server.\n\n## Create a controller\n\nEarlier, we already configured the `app.controller.ts` to render the homepage and display the form for consumers. The next thing we need to do is build the controller that will handle the data posted to the server. Create a new folder named `chat` in the `src` folder and create a new file called `chat.controller.ts` within it.\n\n``` typescript\n    // ./src/chat/chat.controller.ts\n    \n    import { Controller, Post, Res, Body, HttpStatus } from '@nestjs/common';\n    import { ChatService } from './chat.service';\n    @Controller('message')\n    export class ChatController {\n        constructor(private chatService: ChatService){}\n      @Post()\n      postMessage(@Res() res, @Body() data ) {\n          this.chatService.addMessage(data)\n          res.status(HttpStatus.OK).send(\"Comment posted successfully\")\n      }\n    }\n```\n\nAs shown above, we imported `ChatService` and injected it into the controller through the constructor. As recommended by Nest a controller should handle only HTTP requests and abstract any complex logic to a service. \n\n\n## Realtime service with Pusher\n\nAs required within the `ChatController` above, let’s create a component as a service. This will basically receive the posted `data`  object that contains, both the username and chat messages provided by the active user and publish it to a designated channel for the client side to listen and subscribe to. \n\nFurthermore, we’ll use the [Sentiment](https://github.com/thisandagain/sentiment) javascript library for analysis. To install this library, open a terminal in the root folder of your project and run the following command.\n\n\n```\n    npm install sentiment --save\n```\n\nOnce the installation process is completed, create a new file within `chat` folder named `chat.service.ts` \n\n``` typescript\n    // ./src/chat/chat.service.ts\n    \n    import { Component } from '@nestjs/common';\n    \n    const Sentiment = require('sentiment');\n    @Component()\n    export class ChatService {\n        \n        addMessage(data) {\n            const Pusher = require('pusher');\n            const sentiment = new Sentiment();\n            const sentimentScore = sentiment.analyze(data.message).score;\n            const chat = {\n                user: data.user,\n                message: data.message,\n                sentiment: sentimentScore\n            }\n            var pusher = new Pusher({ // replace with valid credentials\n                appId: 'YOUR_APP_ID',\n                key: 'YOUR_API_KEY',\n                secret: 'YOUR_SECRET_KEY',\n                cluster: 'CLUSTER',\n                encrypted: true\n              });\n              pusher.trigger('chats', 'new-chat', chat);\n        }\n    }\n```\n\nHere we have initialized Pusher with the required credentials in order to be able to trigger an event named `new-chat` through a channel named `chats.` We also required Sentiment module, this is important, as it will help us analyze the data messages posted by a user and returned respective scores by cross-checking the words.\n\n\n## Connecting the dots\n\nTo make this work, both the `ChatController` and `ChatService` needs to be registered within the `app.module.ts` file.\n\n``` typescript\n    // ./src/app.module.ts\n    \n    import { ChatController } from './chat/chat.controller';\n    import { ChatService } from './chat/chat.service';\n    import { Module } from '@nestjs/common';\n    import { AppController } from './app.controller';\n    @Module({\n      imports: [],\n      controllers: [AppController, ChatController],\n      components: [ChatService],\n    })\n    export class AppModule {}\n```\n\n\nRestart the development server if it is currently running. Check your page on [http://localhost:3000.](http://localhost:3000.) You should see: \n\n![nest-chat-sentiment-partial](//images.ctfassets.net/1es3ne0caaid/2OBl0TAMDKCIuQI4A6kmG0/14b2cefadef3718a31d005ca15ade6a3/nest-chat-sentiment-partial.png)\n\nIf we try to send a message, nothing will happen for now. This is because we have not updated the chat room with the values of the chat posted from the server. \n\n\n## Displaying chat messages\n\nIn order to receive the chat messages in realtime, we’ll use the `subscribe()` method from Pusher to subscribe to the created `chats` channel.\n\n``` javascript\n    // ./src/public/main.js\n    \n    const SAD_EMOJI = [55357, 56864];\n    const HAPPY_EMOJI = [55357, 56832];\n    const NEUTRAL_EMOJI = [55357, 56848];\n    new Vue({\n        el: '#app',\n        data: {\n           ...\n        },\n        created() {\n            let pusher = new Pusher('YOUR_API_KEY', {\n                cluster: 'CLUSTER',\n                encrypted: true\n            });\n            \n            const channel = pusher.subscribe('chats');\n            channel.bind('new-chat', data =\u003e {\n                const expression = data.sentiment \u003e 0 ? HAPPY_EMOJI : (data.sentiment === 0 ? NEUTRAL_EMOJI : SAD_EMOJI);\n                const response = {\n                    message: data.message,\n                    user: data.user,\n                    mood: String.fromCodePoint(...expression)\n                }\n                \n                this.chats.push(response);\n            });\n        },\n        methods: {\n            getUser(event) {\n               ..\n            },\n            \n            postMessages(event) {\n              ...\n            }\n        }\n    })\n```   \n\nFirst, we added some constants of code points for a particular sentiment emoji. This will help us rendered an emoji corresponding to the mood of the user during the chat as analyzed by the Sentiment module.\n\nEnsure that you replace the `YOUR_API_KEY` placeholder with the appropriate credentials as obtained from your user’s dashboard on Pusher.\n\nYou can go ahead now and give this a try by restarting the development server:\n\n![nest-chat-sentiment-complete](//images.ctfassets.net/1es3ne0caaid/5NVh39rZ04gqYCiYo2MMak/5d6f1be380d08718efe688b42ee8335a/nest-chat-sentiment-complete.gif)\n\n## Conclusion\n\nWe have been able to build a basic chat application with realtime functionality as powered by Pusher. A lot of improvement can be introduced in order to make this application function much better. Please feel free to explore by checking the source code of this project here on [Github](https://github.com/christiannwamba/nest-pusher-chat). \n\nI hope you found this tutorial helpful.","metaTitle":"Build a chat app with sentiment analysis using Nest.js","metaDescription":"In this tutorial, use Nest.js and sentiment analysis to create a chat app with a playful feature: emoticons are added automatically, depending on key words used in messages."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SM3ghMF0QiIu0sSsKyOYa","type":"Entry","createdAt":"2018-05-06T17:30:32.559Z","updatedAt":"2018-05-06T17:32:28.856Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a comments widget with sentiment analysis using Next.js","url":"comments-sentiment-analysis-nextjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/realtime-comments-react-demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-05-05","description":"Learn to build a comments widget with Next.js. Use sentiment analysis to gauge the mood of the comments and automatically add emoticons.","prerequisite":"You will need Node and npm or Yarn installed on your machine. Some knowledge of JavaScript will be helpful when following this tutorial.","content":"With the advent of the social media and other platforms that aim at connecting people, commenting has become an integral part of online activity. As a result, it is very common to see comment sections in most of the services we tend to use daily. Virtually every service that supports commenting functionality builds it to handle comments in realtime.\n\nIn this tutorial, we’ll build a very simple realtime comments widget with sentiments. With sentiment analysis, we will be able to detect the mood of a person based on the words they use in their comments.\n\nHere is a screenshot of what we will end up building in this tutorial.\n\n![comments-next-sentiment-demo](//images.ctfassets.net/1es3ne0caaid/4c4pdXhsJqOuwiugkwioqs/993ea12fb2184d8aebf659e3e8691f41/comments-next-sentiment-demo.png)\n\n\n## Prerequisites\n\nBefore you begin, ensure that you have Node and npm or Yarn installed on your machine. Here is a run-down of the core technologies we will be using.\n\n\n1. [**Next.js**](https://learnnextjs.com/) - A framework for building server-side rendered(SSR) React applications with ease. It handles most of the challenges that come with building SSR React apps.\n\n\n2. [**Pusher**](https://pusher.com/) - Pusher is a technology for building apps with varying realtime needs like push notifications and pub/sub messaging. It is the engine behind the realtime ability of our comments widget.\n\n\n3. [**Sentiment**](https://github.com/thisandagain/sentiment) - Sentiment is a module that uses the [AFINN-165](http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010) wordlist and [Emoji Sentiment Ranking](http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0144296) to perform [sentiment analysis](http://en.wikipedia.org/wiki/Sentiment_analysis) on arbitrary blocks of input text.\n\n\n4. [**React**](https://reactjs.org/) - A very popular JavaScript DOM rendering framework for building scalable web applications using a component-based architecture.\n\nA few other libraries will be used as we will see in a moment. Also ensure that you have [Node](https://nodejs.org/) installed on your machine.\n\n\n### Installing dependencies\n\nCreate a new directory for the application and run the following command to install the required dependencies for the app.\n\n```\n    # Create a new directory\n    mkdir realtime-comments-app\n    \n    # cd into the new directory\n    cd realtime-comments-app\n    \n    # Initiate a new package and install app dependencies\n    npm init -y\n    \n    npm install react react-dom next pusher pusher-js sentiment\n    npm install express body-parser cors dotenv axios\n    npm install --save-dev cross-env npm-run-all\n```\n\n### Setting environment variables\n\nCreate a new application on your [Pusher Dashboard](https://dashboard.pusher.com/) to get your application credentials. Create a `.env` file in the root directory of your application and add your application credentials as follows. \n\n```\n    PUSHER_APP_ID=YOUR_APP_ID\n    PUSHER_APP_KEY=YOUR_APP_KEY\n    PUSHER_APP_SECRET=YOUR_APP_SECRET\n    PUSHER_APP_CLUSTER=YOUR_APP_CLUSTER\n```\n\nEnsure that you use the same variable names as specified in the above snippet. We will refer to them at several points in our code.\n\nNext create a `Next` configuration file named `next.config.js` in the root directory of your application with the following content:\n\n``` javascript\n    /* next.config.js */\n    \n    const webpack = require('webpack');\n    require('dotenv').config();\n    \n    module.exports = {\n      webpack: config =\u003e {\n        const env = Object.keys(process.env).reduce((acc, curr) =\u003e {\n          acc[`process.env.${curr}`] = JSON.stringify(process.env[curr]);\n          return acc;\n        }, {});\n        \n        config.plugins.push(new webpack.DefinePlugin(env));\n        \n        return config;\n      }\n    };\n```\n\nSince `Next.js` uses [Webpack](https://webpack.js.org/) in the background for module loading and bundling, we are simply configuring `Webpack` to be able to provide the environment variables we have defined and make them available to our React components by accessing the `process.env` object.\n\n\n## Getting started\n\n### Setting up the server\n\nWe will go ahead and setup a simple server using Next.js to wrap an [Express](https://expressjs.com/) application server. We will also load the necessary middlewares for the Express server and then we will configure Pusher using the credentials we added to our environment variables.\n\nCreate a `server.js` file in the root directory of your application and add the following code snippet to it to set up the server:\n\n``` javascript\n    /* server.js */\n    \n    const cors = require('cors');\n    const next = require('next');\n    const Pusher = require('pusher');\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const dotenv = require('dotenv').config();\n    const Sentiment = require('sentiment');\n    \n    const dev = process.env.NODE_ENV !== 'production';\n    const port = process.env.PORT || 3000;\n    \n    const app = next({ dev });\n    const handler = app.getRequestHandler();\n    const sentiment = new Sentiment();\n    \n    // Ensure that your pusher credentials are properly set in the .env file\n    // Using the specified variables\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true\n    });\n    \n    app.prepare()\n      .then(() =\u003e {\n      \n        const server = express();\n        \n        server.use(cors());\n        server.use(bodyParser.json());\n        server.use(bodyParser.urlencoded({ extended: true }));\n        \n        server.get('*', (req, res) =\u003e {\n          return handler(req, res);\n        });\n        \n        server.listen(port, err =\u003e {\n          if (err) throw err;\n          console.log(`\u003e Ready on http://localhost:${port}`);\n        });\n        \n      })\n      .catch(ex =\u003e {\n        console.error(ex.stack);\n        process.exit(1);\n      });\n\n```\n\n### Modify npm scripts\n\nFinally, we will modify the `\"scripts\"` section of the `package.json` file to look like the following snippet:\n\n``` json\n    /* package.json */\n    \n    \"scripts\": {\n      \"dev\": \"node server.js\",\n      \"build\": \"next build\",\n      \"prod:server\": \"cross-env NODE_ENV=production node server.js\",\n      \"start\": \"npm-run-all -s build prod:server\"\n    }\n```\n\nWe have gotten all we need to start building our app components. If you run the command `npm run dev` on your terminal now, it will start up the application server on port `3000` if it is available. However, nothing happens on the browser yet, because we have not built any index page component. Let's start building the app components.\n\n\n## Building the index page\n\nNext.js requires that you create the page components of your app in a `pages` directory. We will go ahead and create a `pages` directory in our app root directory and create a new `index.js` file inside it for the index page of our application.\n\nIt is considered a good practice to have a layout that can be reused across multiple pages. It gives you a form of boilerplate and saves you from unnecessary repetitions.\n\nBefore we add content to the index page, we will build a `Layout` component that can be used in our app pages as a boilerplate. Go ahead and create a `components` directory in your app root directory. Create a new `Layout.js` file inside the just created `components`  directory with the following content:\n\n``` javascript\n    /* components/Layout.js */\n    \n    import React, { Fragment } from 'react';\n    import Head from 'next/head';\n    \n    const Layout = props =\u003e (\n      \u003cFragment\u003e\n        \u003cHead\u003e\n          \u003cmeta charSet=\"utf-8\" /\u003e\n          \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" /\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossOrigin=\"anonymous\" /\u003e\n          \u003ctitle\u003e{props.pageTitle || 'Realtime Comments'}\u003c/title\u003e\n        \u003c/Head\u003e\n        {props.children}\n      \u003c/Fragment\u003e\n    );\n    \n    export default Layout;\n```\n\nHere, we try not to do so much. We are simply using the `next/head` component to add meta information to the `\u003chead\u003e` of our pages. We have also added a link to the Bootstrap CDN file to add some default styling to our app. We are also setting the page title dynamically from props and rendering the page contents using `{props.children}`.\n\nNow let's go ahead and add content to the `pages/index.js` file we created earlier:\n\n``` javascript\n    /* pages/index.js */\n    \n    import React, { Component } from 'react';\n    import axios from 'axios';\n    import Layout from '../components/Layout';\n    \n    class IndexPage extends Component {\n    \n      state = { post: null }\n      \n      componentDidMount() {\n        axios.get('https://baconipsum.com/api/?type=meat-and-filler\u0026paras=4\u0026format=text')\n          .then(response =\u003e this.setState({ post: response.data }));\n      }\n      \n      render() {\n        return (\n          \u003cLayout pageTitle=\"Realtime Comments\"\u003e\n            \u003cmain className=\"container-fluid position-absolute h-100 bg-white\"\u003e\n              \u003cdiv className=\"row position-absolute w-100 h-100\"\u003e\n              \n                \u003csection className=\"col-md-8 d-flex flex-row flex-wrap align-items-center align-content-center border-right border-gray px-0\"\u003e\n                \n                  { this.state.post \u0026\u0026 \u003cdiv className=\"position-relative h-100\"\u003e\n                  \n                    \u003cdiv className=\"px-5 mt-5 pt-5 mx-5\"\u003e\n                      \u003cspan className=\"d-block px-5 mx-5 pt-5 h5 text-uppercase text-primary font-weight-bold mb-3\"\u003eEditor's Pick\u003c/span\u003e\n                      \u003cspan className=\"d-block px-5 mx-5 pb-5 h1 text-dark border-bottom border-gray\"\u003eGetting Started with Lorem Ipsum\u003c/span\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv className=\"d-block h-50 px-5 mt-5 pt-3 mx-5 position-relative\" style={{ overflowY: 'auto' }}\u003e\n                      \u003cspan className=\"d-block px-5 mx-5 text-secondary text-justify\" style={{ fontSize: '1rem', whiteSpace: 'pre-line' }}\u003e{ this.state.post }\u003c/span\u003e\n                    \u003c/div\u003e\n                    \n                  \u003c/div\u003e }\n                  \n                \u003c/section\u003e\n                \n                \u003csection className=\"col-md-4 position-relative d-flex flex-wrap h-100 align-items-start align-content-between bg-light px-0\"\u003e\u003c/section\u003e\n                \n              \u003c/div\u003e\n            \u003c/main\u003e\n          \u003c/Layout\u003e\n        );\n      }\n    };\n    \n    export default () =\u003e (\n      \u003cIndexPage /\u003e\n    );\n```\n\nWe created a component `IndexPage` for the index page of our app. We initialized the state of the component with an empty `post` property. The `post` property will contain the post body that will be displayed.\n\nAs you can see in the `componentDidMount()` method, we are fetching a random `lorem-ipsum-style` text by calling the [**BaconIpsum JSON API**](https://baconipsum.com/json-api/) ****and setting the state `post` property to the returned text.\n\nFinally, we simply render the `post` text when it has been set on the state. If we test the app in our browser now, with `npm run dev`, we should see a screen that looks like the following screenshot.\n\n![comments-next-sentiment-part-1](//images.ctfassets.net/1es3ne0caaid/7D0GyGjEQ0SoegE02Sscoi/7e54bfa89f6d2e3e652b74cf56802b0c/comments-next-sentiment-part-1.png)\n\n## Building the CommentsWidget component\n\nWe will go ahead and build the comments widget component. Create a new `CommentsWidget.js` file inside the `components` directory and add the following content:\n\n``` javascript\n    /* components/CommentsWidget.js */\n    \n    import React, { Component, Fragment } from 'react';\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    \n    class CommentsWidget extends Component {\n    \n      state = { comments: [], person: null }\n      \n      componentDidMount() {\n      \n        this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n          cluster: process.env.PUSHER_APP_CLUSTER,\n          encrypted: true\n        });\n        \n        this.channel = this.pusher.subscribe('post-comments');\n        \n        this.channel.bind('new-comment', ({ comment = null }) =\u003e {\n          const { comments } = this.state;\n          comment \u0026\u0026 comments.push(comment);\n          this.setState({ comments });\n        });\n        \n        this.pusher.connection.bind('connected', () =\u003e {\n          axios.post('/comments')\n            .then(response =\u003e {\n              const comments = response.data.comments;\n              this.setState({ comments });\n            });\n        });\n        \n      }\n      \n      componentWillUnmount() {\n        this.pusher.disconnect();\n      }\n      \n      render() {\n        return \u003cFragment\u003e\n        \n          \u003cdiv className=\"border-bottom border-gray w-100 px-2 d-flex align-items-center bg-white justify-content-between\" style={{ height: 90 }}\u003e\n            \u003ch2 className=\"text-dark mb-0 mx-4\"\u003eComments\u003c/h2\u003e\n            \u003cspan class=\"badge badge-pill badge-primary mx-4\" style={{ fontSize: '1.2rem' }}\u003e{ this.state.comments.length }\u003c/span\u003e\n          \u003c/div\u003e\n          \n        \u003c/Fragment\u003e\n      }\n    };\n    \n    export default CommentsWidget;\n```\n\nHere is a simple break down of what we've done:\n\n\n1. We first initialized the state to contain an empty `comments` array property and a null `person` property. The `comments` property will be populated with people’s comments as they come in. The `person` property will store the name of the person about to make a comment. When the component mounts, we set up a Pusher connection and `channel` subscription inside the `componentDidMount()` lifecycle method.\n\n\n2. You can see that we are subscribing to a Pusher channel called `post-comments`. We are then binding to the `new-comment` event on the channel, which is triggered when a new comment comes in. Next, we simply populate the state `comments` property by appending the new comment.\n\n\n3. Also, on the `componentDidMount()` method, we are binding to the `connected` event on the Pusher client, when it is freshly connected, to fetch all the previous comments from history by making a `POST /comments` HTTP request using the `axios` library. Afterwards, we populate the state `comments` property with the comments received in the response.\n\nTo keep things simple, we will use a predefined list of names that a person can choose from before making a comment. Each time the `CommentsWidget` component is rendered, we will show four random personas that the user can choose from.\n\nGo ahead and make changes to the `render()` method as shown in the following snippet. Ensure that you declare the constants before the `return` statement.\n\n``` javascript\n    /* components/CommentsWidget.js */\n    \n    render() {\n    \n      const people = [ 'Stephanie', 'John', 'Steve', 'Anna', 'Margaret', 'Felix', 'Chris', 'Jamie', 'Rose', 'Bob', 'Vanessa', '9lad', 'Bridget', 'Sebastian', 'Richard' ];\n      \n      const nameBadgeStyles = {\n        fontSize: '0.8rem',\n        height: 40,\n        borderRadius: 20,\n        cursor: 'pointer'\n      };\n      \n      const choosePersona = person =\u003e evt =\u003e this.setState({ person });\n      \n      const randomPeople = count =\u003e {\n        const selected = [];\n        let i = 0;\n        \n        count = Math.max(0, Math.min(count, people.length));\n        \n        while (i \u003c count) {\n          const index = Math.floor(Math.random() * people.length);\n          if (selected.includes(index)) continue;\n          ++i \u0026\u0026 selected.push(index);\n        }\n        \n        return selected.map(index =\u003e {\n          const person = people[index];\n          const className = 'd-block d-flex align-items-center text-center text-white bg-secondary font-weight-bold py-2 px-4 mr-3';\n          \n          return \u003cspan key={index} className={className} style={nameBadgeStyles} title={person} onClick={choosePersona(person)}\u003e{person}\u003c/span\u003e\n        });\n      };\n      \n      // return statement is here ....\n    }\n```\n\n\nAs you can see, we created a list of 15 personas that we will be choosing from. The `randomPeople()` function takes a `count` as its only argument - which is the number of random personas to pick from the initial list. It then uses `.map()` to create an array of `\u003cspan\u003e` elements for each picked persona and returns the array.\n\nNotice the `onClick` event handler for each `\u003cspan\u003e`. The `choosePersona(person)` function is used as the handler. It simply sets the `person` property in the state to the name of the chosen persona.\n\nNext, we will go ahead and render the random personas. Make the following changes to the `render()` method. The `return` statement should look like the following code snippet:\n\n``` javascript\n    /* components/CommentsWidget.js*/\n    \n    return \u003cFragment\u003e\n    \n      \u003cdiv className=\"border-bottom border-gray w-100 px-2 d-flex align-items-center bg-white justify-content-between\" style={{ height: 90 }}\u003e\n        \u003ch2 className=\"text-dark mb-0 mx-4\"\u003eComments\u003c/h2\u003e\n        \u003cspan class=\"badge badge-pill badge-primary mx-4\" style={{ fontSize: '1.2rem' }}\u003e{ this.state.comments.length }\u003c/span\u003e\n      \u003c/div\u003e\n      \n      \u003cdiv className=\"border-top border-gray w-100 px-4 d-flex flex-wrap align-items-center align-content-center bg-light\" style={{ height: 160 }}\u003e\n      \n        {\n          !this.state.person \u0026\u0026\n          \u003cspan className=\"text-dark py-2\" style={{ fontSize: '1.5rem', fontWeight: 500 }}\u003eChoose your Persona\u003c/span\u003e\n        }\n        \n        \u003cdiv className=\"w-100 py-2 pb-3 d-flex justify-content-start\"\u003e\n          {\n            this.state.person\n              ? \u003cspan className=\"d-block d-flex align-items-center text-center text-white bg-primary font-weight-bold py-2 px-4 mr-3\" style={nameBadgeStyles} title={this.state.person}\u003e{this.state.person}\u003c/span\u003e\n              : randomPeople(4)\n          }\n        \u003c/div\u003e\n        \n        {\n          this.state.person \u0026\u0026\n          \u003ctextarea className=\"form-control px-3 py-2\" onKeyUp={this.handleKeyUp} placeholder=\"Make a comment\" style={{ resize: 'none' }}\u003e\u003c/textarea\u003e\n        }\n        \n      \u003c/div\u003e\n      \n    \u003c/Fragment\u003e\n```\n\nAs you can see, we are doing some conditional rendering here based on `this.state.person`. When `this.state.person` is null, we render four random personas for the user to choose from by calling `randomPeople(4)`.\n\nWhen the user chooses a persona, we render a `\u003ctextarea\u003e` element for the user to enter a comment. We added an `onKeyUp` event handler to the `\u003ctextarea\u003e` to add the comment when you press the `enter` or `return` button.\n\nLet’s add the `handleKeyUp()` event handler to the `CommentsWidget` component as shown in the following snippet:\n\n``` javascript\n    /* components/CommentsWidget.js*/\n    \n    class CommentsWidget extends Component {\n      \n      handleKeyUp = evt =\u003e {\n        const value = evt.target.value;\n        \n        if (evt.keyCode === 13 \u0026\u0026 !evt.shiftKey) {\n          const { person } = this.state;\n          const comment = { person, comment: value, timestamp: +new Date };\n          \n          evt.target.value = '';\n          this.setState({ person: null }, () =\u003e axios.post('/comment', comment));\n        }\n      }\n      \n    }\n```\n\nOn the `handleKeyUp()` event handler, we construct a `comment` object containing the `person` making the comment (the selected persona), the `comment` itself, and then the `timestamp` for when the comment was made. Finally, we clean up the `\u003ctextarea\u003e`, reset the `person` property to `null` and then make a `POST /comment` HTTP request, passing the `comment` object we created as payload.\n\nLet's add the `CommentsWidget` component to our index page. Modify the `pages/index.js` file with the following changes.\n\n``` javascript\n    /* pages/index.js */\n      \n      import React, { Component } from 'react';\n      import axios from 'axios';\n      import Layout from '../components/Layout';\n    + import CommentsWidget from '../components/CommentsWidget';\n\nNext, update the `pages/index.js` file to render the `CommentsWidget` inside the `render()` method of the `IndexPage` component. Locate the last `\u003csection\u003e` element inside the `render()` method and modify it to look like this:\n\n\n    /* pages/index.js */\n    \n    \u003csection className=\"col-md-4 position-relative d-flex flex-wrap h-100 align-items-start align-content-between bg-light px-0\"\u003e\n      { this.state.post \u0026\u0026 \u003cCommentsWidget /\u003e }\n    \u003c/section\u003e\n```\n\nYou can reload the app now in your browser to see the changes. The app should look like the following screenshot.\n\n![comments-next-sentiment-part-2](//images.ctfassets.net/1es3ne0caaid/1lWSvzQ3w84GCoI8OWYCE2/218d8862173e947a67463d1aa089db0c/comments-next-sentiment-part-2.png)\n\n![comments-next-sentiment-part-3](//images.ctfassets.net/1es3ne0caaid/6dvE2MbYAwGiEi4wwaccIO/840a75f7e7d6464e3e266d5c8fd610d9/comments-next-sentiment-part-3.png)\n\n\n\n## Defining the comment routes\n\nFor now, nothing really happens when you try to make a comment. You don't see any comment or previous comments. This is because we have not implemented the two comment routes we are making requests to.\n\nWe will go ahead and create the `/comment` and `/comments` routes. Modify the `server.js` file and add the following just before the call to `server.listen()` inside the `then()` callback function.\n\n``` javascript\n    /* server.js */\n    \n    // server.get('*') is here ...\n    \n    const commentsHistory = { comments: [] };\n    \n    server.post('/comment', (req, res, next) =\u003e {\n      const { person = null, comment = '', timestamp = (+new Date) } = req.body;\n      const sentimentScore = sentiment.analyze(comment).score;  \n      const commentObject = { person, comment, timestamp, sentiment: sentimentScore };\n      \n      commentsHistory.comments.push(commentObject);\n      pusher.trigger('post-comments', 'new-comment', { comment: commentObject });\n    });\n    \n    server.post('/comments', (req, res, next) =\u003e {\n      res.json({ ...commentsHistory, status: 'success' });\n    });\n    \n    // server.listen() is here ...\n```\n\nFirst, we created a kind of in-memory store for our comments history, to store comments in an array. This is useful for new Pusher clients to fetch previous comments. Whenever the Pusher client makes a `POST` request to the `/comments` endpoint on connection, it gets all the previous comments in the returned response.\n\nOn the `POST /comment` route, we are fetching the comment payload from `req.body` through the help of the `body-parser` middleware we added earlier. We then use the `sentiment` module to calculate the overall sentiment score of the comment. Next, we reconstruct the `commentObject`, adding the `sentiment` property containing the sentiment score.\n\nFinally, we add the comment to the `commentsHistory`, and then trigger a `new-comment` event on the `post-comments` Pusher channel, passing the `commentObject` in the event data. **This does the realtime magic**.\n\nWe are just a few steps away from completing our application. So far, we are not yet rendering the comments on the view. Let's head on to that and finish this up.\n\n\n## Displaying the comments\n\nCreate a new `Comment.js` file inside the `components` directory and add the following content to it.\n\n``` javascript\n    /* components/Comment.js */\n    \n    import React, { Component } from 'react';\n    \n    class Comment extends Component {\n      render() {\n        const { text } = this.props;\n        \n        const commentStyle = {\n          fontSize: '0.9rem',\n          fontWeight: 500,\n          lineHeight: 1.5,\n          whiteSpace: 'pre-wrap'\n        };\n        \n        return \u003cdiv className=\"w-100 mx-4 d-flex\"\u003e\n          \u003cdiv className=\"w-100 px-2\"\u003e\n            \u003cspan className=\"d-block text-secondary\" style={commentStyle}\u003e{text}\u003c/span\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      }\n    }\n    \n    export default Comment;\n```\n\nThe `Comment` component is a very simple component requiring a `text` prop for the comment text. We simply render the comment `text` in the `render()` method and that’s all.\n\nFinally, we will modify the `components/CommentsWidget.js` file to render the comments from the state. Make the following changes to the `CommentsWidget` component.\n\nFirst add the following constants before the class definition of the `CommentsWidget` component. Each constant is an array of the code points required for a particular sentiment emoji. Also ensure that you import the `Comment` component.\n\n``` javascript\n    /* components/CommentsWidget.js */\n    \n    // Module imports here ...\n    import Comment from './Comment';\n    \n    const SAD_EMOJI = [55357, 56864];\n    const HAPPY_EMOJI = [55357, 56832];\n    const NEUTRAL_EMOJI = [55357, 56848];\n    \n    // Chat component class here ...\n```\n\nThen, add the following snippet between the two child `\u003cdiv\u003e` tags of the `\u003cFragment\u003e` we created earlier in the `render()`  method of the component.\n\n``` javascript\n    /* components/CommentsWidget.js */\n    \n    {/** COMMENT HEADER \u003cDIV\u003e HERE **/}\n    \n    \u003cdiv className=\"px-4 pb-4 w-100 d-flex flex-row flex-wrap align-items-start align-content-start position-relative\" style={{ height: 'calc(100% - 250px)', overflowY: 'scroll' }}\u003e\n      {\n        this.state.comments.map((comment, index) =\u003e {\n        \n          const mood = comment.sentiment \u003e 0 ? HAPPY_EMOJI : (comment.sentiment === 0 ? NEUTRAL_EMOJI : SAD_EMOJI);\n          \n          return (\n            \u003cFragment key={index}\u003e\n            \n              \u003cdiv className={`d-flex justify-content-start align-items-center w-100 font-weight-bold text-dark mt-4 pb-1 px-1`} style={{ fontSize: '0.9rem' }}\u003e\n                \u003cspan className=\"d-inline-block pr-1\" style={{ fontSize: '1.25rem' }}\u003e{String.fromCodePoint(...mood)}\u003c/span\u003e\n                \u003cspan className=\"align-middle\" style={{ lineHeight: '1.25rem' }}\u003e{comment.person || 'Anonymous'}\u003c/span\u003e\n              \u003c/div\u003e\n              \n              \u003cComment text={comment.comment} /\u003e\n              \n            \u003c/Fragment\u003e\n          );\n          \n        })\n      }\n    \u003c/div\u003e\n    \n    {/** COMMENT BOX \u003cDIV\u003e HERE **/}\n```\n\nLet's try to understand what this code snippet is doing. First, we are going through each `comment` object in the state `comments` array property. We use the `sentiment` score of the comment object to set the mood of the person making the comment to either `happy`, `sad` or `neutral` using the earlier defined constants.\n\nAlso notice how we are using the `String.fromCodePoint()` method added in ES6 to get the emoji from the code points we defined in our constants earlier. Finally, we render the `Comment` component with the comment passed in the `text` prop.\n\n**Bravo**. If you made it to this point, then you have successfully built a realtime comments widget with sentiment using Next.js and Pusher. Test the app now in your browser to see that everything works.\n\n\n## Conclusion\n\nIn this tutorial, we have been able to build a very simple comments widget sentiment using [Next.js](https://learnnextjs.com/)([React](https://reactjs.org/)), [Pusher](https://pusher.com/) and [Sentiment Node](https://github.com/thisandagain/sentiment) module. You can check the demo source code of this tutorial on [GitHub](https://github.com/christiannwamba/realtime-comments-react-demo).\n\nDo check the documentation for each technology we used in this project to learn more about other ways of using them. I duly hope that this tutorial is of help to you.\n\n","metaTitle":"Comments widget with sentiment analysis using Next.js","metaDescription":"This tutorial takes you through building a comments widget using Next.js. It adds sentiment analysis as a fun feature to auto-assign emoticons to a comment."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2H6cJ034piSuSEQIOCiOyY","type":"Entry","createdAt":"2018-05-03T10:21:31.497Z","updatedAt":"2018-05-03T10:21:31.497Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime table with Next.js","url":"realtime-tables-nextjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/movie-listing-next","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-05-02","description":"Use Next.js, React Table and Pusher to create a movie review site, updated in realtime as users post reviews.","prerequisite":"You need Node and npm installed on your machine. A basic knowledge of JavaScript will be helpful.","content":"Realtime applications are generally applications that produce time sensitive data or updates that requires immediate attention or consumption. From flight management software to following up with the score line and commentary when your favorite football team is playing.\n\nWe’ll be building a realtime application that will show live updates on reviews about the next movie users want to watch at the cinema. All that juicy reviews from fans, viewers and critics around the world, and I’ll want them in real time. Let’s call it **Rotten pepper**.\n\n![realtime-tables-next-demo](//images.ctfassets.net/1es3ne0caaid/4JcC8viOac2cma80iwCCGG/cfd47bab350bb80c6932e4e618c90158/realtime-tables-next-demo.gif)\n\nThe application will contain a form that allows users to fill in their review easily and will also display a table showing reviews left by users world wide in realtime. This part of the application will be built with Next.js\n\nThe other important part of this application is the API, where reviews posted by the user will go to. We’ll build this using Express and Node. Pusher would be the glue that sticks both ends together.\n\n\n## Prerequisites\n\nWe’ll be using the following tools to help build this quickly.\n\n1. [Next.js](https://github.com/zeit/next.js): this is a framework for producing server rendered applications. Just as you would with PHP, but this time with React.\n2. [Pusher](https://pusher.com/): this is a framework that allows you to build realtime applications with its easy to use pub/sub messaging API.\n3. [React Table](https://react-table.js.org/): this is a lightweight table built for React for showing extensive data.\n\n\n\u003e Please ensure you have Node and npm installed before starting the tutorial.\n\u003e No knowledge of React is required, but a basic understanding of JavaScript may be helpful.\n\n\nLet’s get building.\n\n\n## App structure\n\nIf you have no idea about Next.js, I recommend you take a look [here](https://learnnextjs.com/). It’s pretty easy and in less than an hour, you’ll be able to build real applications using it.\n\nLet’s create the directory where our app will sit:\n\n```\n    # make directory and cd into it\n    mkdir movie-listing-next \u0026\u0026 cd movie-listing-next\n    \n    # make pages, components and css directory\n    mkdir pages\n    mkdir components\n    mkdir css\n```\n\nNow we can go ahead to install dependencies needed by our application. I’ll be using Yarn for my dependency management, but feel free to use npm also.\n\nInstall dependencies using Yarn:\n\n```\n    # initilize project with yarn\n    yarn init -y\n    \n    # add dependencies with yarn\n    yarn add @zeit/next-css axios next pusher-js react react-dom react-table\n```\n\nLet’s add the following to the `script` field in our `package.json`  and save. This makes running commands for our app more easier.\n\n``` json\n    // package.json\n    {\n      \"scripts\": {\n        \"dev\": \"next\",\n        \"server\": \"node server.js\"\n       }\n    }\n```\n\nFor users to submit their reviews, they’ll need a form where they can input their name, review and rating. This is a snippet from `[components/form.js](https://github.com/Robophil/movie-listing-next/blob/master/components/form.js)` , which is a simple React form that takes the `name`, `review` and `rating`. You’ll need to create yours in the `components` directory.\n\nSnippets from `[components/form.js](https://github.com/Robophil/movie-listing-next/blob/master/components/form.js)`:\n\n``` javascript\n    export default class Form extends React.Component {\n    ....\n      render () {\n        return (\n          \u003cform onSubmit={this.handleSubmit}\u003e\n            \u003cdiv\u003e\n              \u003clabel\u003e\n              Name:\n              \u003cbr /\u003e\n                \u003cinput type='text' value={this.state.name} onChange={this.handleChange.bind(this, 'name')} /\u003e\n              \u003c/label\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv\u003e\n              \u003clabel\u003e\n              Review:\n              \u003cbr /\u003e\n                \u003ctextarea rows='4' cols='50' type='text' value={this.state.review} onChange={this.handleChange.bind(this, 'review')} /\u003e\n              \u003c/label\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv\u003e\n              \u003clabel\u003e\n              Rating:\n              \u003cbr /\u003e\n                \u003cinput type='text' value={this.state.rating} onChange={this.handleChange.bind(this, 'rating')} /\u003e\n              \u003c/label\u003e\n            \u003c/div\u003e\n            \u003cinput type='submit' value='Submit' /\u003e\n          \u003c/form\u003e\n        )\n      }\n    }\n``` \n\nIf you’re a React developer, you should feel right at home here. On form submission, the data is being passed down to `this.props.handleFormSubmit(this.state)`. This `props` is passed down from a different component as we’ll soon see.\n\nNow we have our form, but we still need a page to list all the reviews submitted by users. The size of our reviews could grow rapidly and we still want this in realtime, so it’s best to consider pagination from the outset. That’s why we’ll be using `react-table`, as highlighted above this is lightweight and will give us pagination out of the box.\n\nThe snippet below is from our index page, which you’ll need to create here `[pages/index.js](https://github.com/Robophil/movie-listing-next/blob/master/pages/index.js)` .\n\n``` javascript\n    // pages/index.js\n    import React from 'react'\n    import axios from 'axios'\n    import ReactTable from 'react-table'\n    import 'react-table/react-table.css'\n    import '../css/table.css'\n    import Form from '../components/form'\n    import Pusher from 'pusher-js'\n```\n\nHere we import our dependencies which include `axios` for making http calls, our styles from `table.css` and the form component we created earlier on.\n\n``` javascript\n    // pages/index.js\n    const columns = [\n      {\n        Header: 'Name',\n        accessor: 'name'\n      },\n      {\n        Header: 'Review',\n        accessor: 'review'\n      },\n      {\n        Header: 'Rating',\n        accessor: 'rating'\n      }\n    ]\n    const data = [\n      {\n        name: 'Stan Lee',\n        review: 'This movie was awesome',\n        rating: '9.5'\n      }\n    ]\n```\n\nReact-table, which is pretty easy to set up needs a `data` and `columns` props to work. There’s a pretty easy example [here](https://react-table.js.org/#/story/readme) if you want to learn more. We’re adding a sample review to `data` to have at least one review when we start our app.\n\n``` javascript\n    // pages/index.js\n    const pusher = new Pusher('app-key', {\n      cluster: 'cluster-location',\n      encrypted: true\n    })\n    \n    const channel = pusher.subscribe('rotten-pepper')\n    \n    export default class Index extends React.Component {\n      constructor (props) {\n        super(props)\n        this.state = {\n          data: data\n        }\n      }\n    \n      render () {\n        return (\n          \u003cdiv\u003e\n            \u003ch1\u003eRotten \u003cstrike\u003etomatoes\u003c/strike\u003e pepper\u003c/h1\u003e\n            \u003cstrong\u003eMovie: Infinity wars \u003c/strong\u003e\n            \u003cForm handleFormSubmit={this.handleFormSubmit.bind(this)} /\u003e\n            \u003cReactTable\n              data={this.state.data}\n              columns={columns}\n              defaultPageSize={10}\n        /\u003e\n          \u003c/div\u003e\n        )\n      }\n    }\n```\n\nHere, we created our React component and initialize Pusher and subscribe to the `rotten-pepper` channel. Kindly get your `app-id`  from your Pusher dashboard and if you don’t have an account, kindly create one [here](https://dashboard.pusher.com/accounts/sign_in). The state value `this.data` is initialized with the sample data created above and our `render` method renders both or form and our table.\n\nAt this point, we’re still missing a few vital parts. Pusher has been initialized, but it’s currently not pulling any new reviews and updating our table.\n\nTo fix that, add the following to your react component in `pages/index.js`\n``` javascript\n    // pages/index.js\n    componentDidMount () {\n        this.receiveUpdateFromPusher()\n      }\n    \n      receiveUpdateFromPusher () {\n        channel.bind('new-movie-review', data =\u003e {\n          this.setState({\n            data: [...this.state.data, data]\n          })\n        })\n      }\n    \n      handleFormSubmit (data) {\n        axios.post('http://localhost:8080/add-review', data)\n        .then(res =\u003e {\n          console.log('received by server')\n        })\n        .catch(error =\u003e {\n          throw error\n        })\n      }\n```\n\nIn `componentDidMount`, we’re calling the method `receiveUpdateFromPusher` which would receive new reviews submitted by users and update our table. We’re calling `receiveUpdateFromPusher` in `componentDidMount` so this only get called once.\nThe `handleFormSubmit` method is responsible for sending the review submitted by users down to your endpoint. This is passed as a props to the the form component as mentioned before.\n\n``` javascript\n    // next.config.js\n    const withCSS = require('@zeit/next-css')\n    module.exports = withCSS()\n```\n\nThis should be placed in a file called `next.config.js` in your root directory `movie-listing-next`. It’s responsible for loading all `.css` files which contains our styles on app startup.\n\nNow that our app can load `.css` properly, create the file `css/form.css` which is needed by `components/form.js` to style our app’s form:\n``` css\n    form {\n      margin: 30px 0;\n    }\n    \n    form div {\n      margin: 10px 0;\n    }\n```\n\nTo keep the content of our review table center aligned, create the file `css/table.css` and add the following style snippet.\n``` css\n    .rt-td {\n      text-align: center;\n    }\n```\n\nTo set the root structure of our app, we create `pages/_document.js`. This is where the rest of our app will sit.\n\n``` javascript\n    // pages/_document.js\n    import Document, { Head, Main, NextScript } from 'next/document'\n    \n    export default class MyDocument extends Document {\n      render () {\n        return (\n          \u003chtml\u003e\n            \u003cHead\u003e\n              \u003ctitle\u003eMovie listing\u003c/title\u003e\n              \u003clink rel='stylesheet' href='/_next/static/style.css' /\u003e\n            \u003c/Head\u003e\n            \u003cbody\u003e\n              \u003cMain /\u003e\n              \u003cNextScript /\u003e\n            \u003c/body\u003e\n          \u003c/html\u003e\n        )\n      }\n    }\n```\n\nNow, let’s setup the endpoint where all reviews submitted will be received.\n\n## Rotten pepper endpoint\n\nThis is where all the magic happens. When a review gets submitted, we’ll want other users to be aware of the new data and this is where Pusher shines. Create a file `server.js` at the root of your application and add the following snippet as it’s content. Remember to visit your Pusher dashboard to get your `appId`, `appKey`, `appSecret`.\n\n``` javascript\n    // server.js\n    const pusher = new Pusher({\n      appId: 'appId',\n      key: 'appKey',\n      secret: 'appSecret',\n      cluster: 'cluster',\n      encrypted: true\n    })\n    \n    app.post('/add-review', function (req, res) {\n      pusher.trigger('rotten-pepper', 'new-movie-review', req.body)\n      res.sendStatus(200)\n    })\n```\n\nFrom above, once the user hits `/add-review` we trigger an event `new-movie-review` with pusher which clients are currently listening on. We pass it the new review that was submitted and the connected clients update themselves.\n\nThe values for `appId`, `appSecret` and `appKey` should be replaced with actual credentials. This can be gotten from your app dashboard on Pusher, and if you don’t have an account simply head down to [https://pusher.com/](https://pusher.com/) and create an account.\n\n![realtime-table-nest-keys](//images.ctfassets.net/1es3ne0caaid/3wqfVQva8Ei0eS0AgoKqMq/4b0bb636412c1d4174674c596525dade/realtime-table-nest-keys.png)\n\n\nLet’s add dependencies need by our app:\n```\n    # add dependencies needed by server.js\n    yarn add body-parser cors express pusher\n```\n\nAt this point, the `dependencies` field in our `package.json` should contain the following below:\n``` json\n    \"dependencies\": {\n        \"@zeit/next-css\": \"^0.1.5\",\n        \"axios\": \"^0.18.0\",\n        \"body-parser\": \"^1.18.2\",\n        \"cors\": \"^2.8.4\",\n        \"express\": \"^4.16.3\",\n        \"next\": \"^5.1.0\",\n        \"pusher\": \"^1.5.1\",\n        \"pusher-js\": \"^4.2.2\",\n        \"react\": \"^16.3.2\",\n        \"react-dom\": \"^16.3.2\",\n        \"react-table\": \"^6.8.2\"\n      }\n```\n\nif not, simply replace the contents of the `dependencies` field in your `package.json` and run\n\n```\n    # install dependencies from package.json\n    yarn\n```\n\nThe entire content of `server.js` is right below. The line `const port = process.env.PORT || 8080` simply picks up the preferred `port` to run our app and `app.listen(port, function () {}` starts our app on that `port`.\n\n``` javascript\n    // server.js\n    const express = require('express')\n    const app = express()\n    const bodyParser = require('body-parser')\n    const cors = require('cors')\n    const Pusher = require('pusher')\n    \n    app.use(cors())\n    app.use(bodyParser.urlencoded({ extended: true }))\n    app.use(bodyParser.json())\n    \n    const port = process.env.PORT || 8080\n    \n    const pusher = new Pusher({\n      appId: 'appId',\n      key: 'appKey',\n      secret: 'appSecret',\n      cluster: 'cluster',\n      encrypted: true\n    })\n    app.post('/add-review', function (req, res) {\n      pusher.trigger('rotten-pepper', 'new-movie-review', req.body)\n      res.sendStatus(200)\n    })\n    \n    app.listen(port, function () {\n      console.log('Node app is running at localhost:' + port)\n    })\n```\n\nNow let’s see if what we’ve done so far works.\n\nIn one bash window:\n```\n    # start next app\n    yarn run dev\n```\nand for our endpoint simply run in a new bash window:\n```\n    # start api server\n    yarn run server\n```\nYou can open `[http://localhost:3000](http://localhost:3000)` in as many tabs as possible and see if a review posted in one tab gets to the others.\n\n\n## Conclusion\n\nBuilding a realtime application can be super easy with the right tools. Pusher takes all that socket and connection work out of the way and allow us focus on the app we’re building.\nNow I can sit back and watch reviews come :-)\n\nThe repo where this was done can be found [here](https://github.com/christiannwamba/movie-listing-next). Feel free to fork and improve.\nObviously this needs some more styling. How do you think we could improve this more?\n\nHappy hacking!!","metaTitle":"Build a realtime table with Next.js","metaDescription":"This tutorial shows how to make a movie review website using Next.js, React Table and Pusher. New reviews appear in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3w7v5MGJmM86Yk026kIEqg","type":"Entry","createdAt":"2018-05-03T10:19:29.225Z","updatedAt":"2020-06-19T14:16:32.165Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an online collaborative text editor using .NET","url":"collaborative-text-editor-net","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"projectRepo":"https://github.com/dongido001/CollaText","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2zMClYDH68wMGYcoiYC8wI","type":"Entry","createdAt":"2018-02-12T14:44:37.285Z","updatedAt":"2018-02-12T14:44:37.285Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":".NET","url":"net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-05-02","description":"Learn to build an online document editing app using .NET. Featuring realtime updates for new edits.","prerequisite":"You will need the following installed on your machine: Visual Studio Code with the C# extension, ASP.NET Core and .NET Core SDK.","content":"Whether it’s realtime audio or video chats, or just collaborating on documents in realtime via Google Docs, there are many times when collaborating online in realtime is a huge time saver and a necessity to keep up with your productivity. \n\nIn this article, I’ll walk you through building a basic collaborative text editor using ASP.NET Core. A user can create any number of documents, view or update the document. I’ll reference these documents as `pen`.\n\n\n## Prerequisites\n\nThis tutorial uses the following:\n\n- JavaScript ([jQuery](http://jquery.com/)) \n- [ASP.NET Core](https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.1)\n- [Visual Studio Code](https://code.visualstudio.com/) \n- [.NET Core SDK](https://www.microsoft.com/net/download/core) (Download and install it [here](https://www.microsoft.com/net/download/core) if you don’t have it)\n- Visual Studio Code [C# extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp) (Install [C# extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp) from the Visual Studio Code Marketplace if you don’t have it installed)\n- A Pusher account\n\nVerify your setup by typing the following in your command line:\n\n```\n      dotnet --version\n```\n\nThe command should print out the version of .NET Core you have installed.\n\n\n## Setting up your Pusher app\n\nTo start utilizing Pusher’s technology, you need to create a Pusher app and get the app keys.  [Login](https://dashboard.pusher.com/accounts/sign_in) or [signup](https://dashboard.pusher.com/accounts/sign_up) (If you don’t have an account already) for a free account.\n\nOnce you are [logged in,](https://dashboard.pusher.com/) scroll down and click on **Create new Channels app**. You will see a modal, fill in the form and then click on **Create my app**.\n\n![collatext-create-pusher-app](//images.ctfassets.net/1es3ne0caaid/6Vj0ibrM52wYI0wka466YE/0384c65245dcf7929dc10cd198c1dd92/collatext-create-pusher-app.png)\n\nAfter submitting the form, the next page that appears is a getting started page with code samples. Click on **App Keys** tab to get your Pusher app details.\n\nKeep the keys handy, we’ll need them later:\n\n```\n    app_id  = \u003cPUSHER_APP_ID\u003e\n    key     = \u003cPUSHER_APP_KEY\u003e\n    secret  = \u003cPUSHER_APP_SECRET\u003e\n    cluster = \u003cPUSHER_APP_CLUSTER\u003e\n```\n\n## Creating an ASP.NET Core MVC project\n\nFirst, create a new folder on your system called `CollaText`. Then from your command line, `cd` into the folder you just created. NB:  `CollaText` can be any name you want.\n\nNext, from your command line, run the following command:\n\n```\n    dotnet new mvc\n```\n\nThis command will create a new ASP.NET Core MVC project in your current folder.\n\nNext, \n\n\n- Open the `CollaText` folder in Visual Studio Code editor and select the `Startup.cs` file.\n\n\n\u003e  💡 If your Visual Studio Code has been added to your system path, you can open the project by typing  **“code** **.****”** (without quotes) in your command prompt.\n\n\n- Select **Yes** to the **Warn** message \"Required assets to build and debug are missing from 'CollaText'. Add them?\"\n- Select **Restore** to the **Info** message \"There are unresolved dependencies\".\n\nNow, Press **Debug** (F5) to build and run the program. The address in which the project is running will open automatically if there is no error. In case it does not open automatically, navigate to [http://localhost:5000/](http://localhost:5000/) from your browser. You should see a default page.\n\nNext, update `CollaText.csproj` with the following code:\n\n``` \n    \u003cProject Sdk=\"Microsoft.NET.Sdk.Web\"\u003e\n      \u003cPropertyGroup\u003e\n        \u003cTargetFramework\u003enetcoreapp2.0\u003c/TargetFramework\u003e\n      \u003c/PropertyGroup\u003e\n      \u003cItemGroup\u003e\n        \u003cPackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" /\u003e\n        \u003cPackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.0\" /\u003e\n      \u003c/ItemGroup\u003e\n      \u003cItemGroup\u003e\n        \u003cDotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0\" /\u003e\n        \u003cDotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.1\" /\u003e\n      \u003c/ItemGroup\u003e\n    \u003c/Project\u003e\n```\n\nSave the file and select **Restore** to the **Info** message \"There are unresolved dependencies\". This will prepare the project for scaffolding.\n\n## Adding models\n\nA model is an object that represents the data in our application. For this project, we’ll create a table that holds data for created `pen` known as `Pens`.\n\nCreate a new file called `Pen.cs` in the `Models` folder and add the following code to it:\n\n``` c#\n    using System;\n    namespace CollaText.Models\n    {\n        public class Pen\n        {\n            public int ID { get; set; }\n            public string Title { get; set; }\n            public string Content { get; set; }\n        }\n    }\n```\n\n## Creating the database context\n\nThe *database context* is the main class that coordinates [Entity Framework](https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application) functionality for a given data model. We’ll derive from the  `Microsoft.EntityFrameworkCore.DbContext`  to create this class.\n\nCreate a new file called `CollaTextPenContext.cs` in the `Models` folder and add the following code to it:\n\n``` c#\n    using Microsoft.EntityFrameworkCore;\n    \n    namespace CollaText.Models\n    {\n        public class CollaTextPenContext : DbContext\n        {\n            public CollaTextPenContext (DbContextOptions\u003cCollaTextPenContext\u003e options)\n                : base(options)\n            {\n            }\n            public DbSet\u003cPen\u003e Pens { get; set; }\n        }\n    }\n```\n\n## Setting up the database and running migrations\n\nNow that we have created our models, we can easily generate a migration file that will contain code for creating and updating our table schema.\n\nIn this article, we’ll make use of SQLite for our database.\n\n### Registering the database context\n\nWe’ll register the database context with the [dependency injection](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection) container. Services (such as the DB context) that are registered with the dependency injection container are available to the controllers. \n\nUpdate the code in `ConfigureServices`  method of  `/Startup.cs`  file with the following code:\n\n``` c#\n    [...]\n    public void ConfigureServices(IServiceCollection services)\n    {\n       [...]\n          services.AddDbContext\u003cCollaTextPenContext\u003e(options =\u003e\n                  options.UseSqlite(\"Data Source=CollaText.db\"));\n       [...]\n    }\n    [...]\n```\n\nThis tells Entity Framework which model classes are included in the data model.\n\nFinally, add the following **usings** to the header of `Startup.cs` file:\n\n``` c#\n    using CollaText.Models;\n    using Microsoft.EntityFrameworkCore;\n```\n\nYou can see the database context as a database connection and a set of tables, and the Dbset as a representation of the tables themselves. The database context allows us to link our model properties to our database with a connection string (in our case, we are using SQLite)\n\n### Running the migration\n\nFrom your command line, run the following command:\n\n```\n    dotnet ef migrations add CollaText\n    dotnet ef database update\n```\n\n- The first command will create a migration script that will be used for managing our database tables.\n- The second command will execute the migration script, thereby applying the migration to the database to create the schema.\n\n\n\u003e 💡 If you got an error while running the command, stop the debugging or the server and try again.\n\n\n## Creating the controller\n\nWe’ll create a controller called `PenController.cs` for handling browser requests.\n\nCreate a new file called `PenController.cs` in the `Controllers` folder and add the following code to it:\n\n``` c#\n    using System.Linq;\n    using System.Threading.Tasks;\n    using Microsoft.AspNetCore.Mvc;\n    using Microsoft.EntityFrameworkCore;\n    using CollaText.Models;\n    using System.Net;\n    \n    namespace CollaText.Controllers\n    {\n        public class PenController : Controller\n        {\n            private readonly CollaTextPenContext _context;\n            public PenController(CollaTextPenContext context)\n            {\n                _context = context;\n            }\n            // GET: Pen\n            public async Task\u003cIActionResult\u003e Index(int? id)\n            {\n                ViewData[\"Pen\"] = _context.Pens.SingleOrDefault(d =\u003e d.ID == id);\n                return View(await _context.Pens.ToListAsync());\n            }\n        }\n    }\n```\nIn the preceding code:\n\n- The constructor uses [dependency injection](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection) to inject the database context (`CollaTextPenContext` ) into the controller. We have injected `*CollaTextPenContext*` context into the class so we can have access to the context.\n- `int? id` parameter passed in the `Index` method indicates that the `id` parameter is optional for the route.\n- Next, we fetched a single pen using the passed in `id`, which is passed to the view via `ViewData`.\n- Lastly, with `await _context.Pens.ToListAsync()`, we fetched all pens in the database and passed it down to the view.\n\nWith that, we now have a route - `localhost:xxxx/Pen/Index/{id}`.\n\n\n## Creating the app UI\n\nAdd the following styling to `wwwroot/css/site.css`:\n\n``` css\n    .vertical-center {\n       min-height: 80%;\n       min-height: 80vh;\n       display: grid;\n       align-items: center;\n    }\n    \n    .pen \u003e a:link, a:visited  {\n        display: block;\n        text-decoration: none;\n        background: gray;\n        color:azure;\n        padding: 9px;\n        border-radius: 3px;\n        margin: 4px;\n        font-weight: bolder;\n     }\n    .pen \u003e a:hover, a:active  {\n       border-left: 4px solid burlywood;\n     }\n    \n    #editor[contenteditable=true] {\n        min-height: 150px;\n        border: 1px solid lightblue;\n        border-radius: 4px;\n        padding: 3px;\n    }\n    \n    #title[contenteditable=true] {\n      min-height: 40px;\n      border: 1px solid lightblue;\n      border-radius: 4px;\n      line-height: 2.6;\n      padding: 3px;\n      margin-bottom: 6px;  \n      font-size: 16px;\n    }\n        \n    [contenteditable=true]:empty:before {\n      content: attr(placeholder);\n      display: block;\n    }\n```\n\nNext, let’s add our view file. Create a new folder called `Pen` in the `Views` folder. Then create a  `Index.cshtml` file in the `Views/Pen` folder.\n\nNow, add the following code to `Index.cshtml`:\n\n``` html\n    @model IEnumerable\u003cCollaText.Models.Pen\u003e\n    @{\n        ViewData[\"Title\"] = \"Index\";\n        Pen pen = (Pen) ViewData[\"Pen\"];\n    }\n    \u003cdiv class=\"container-fluid vertical-center\"\u003e\n       \u003ch3 class=\"text-center\"\u003e Realtime collaborative text editor \u003c/h3\u003e\n       \u003cdiv class=\"row\"\u003e \n         \u003cdiv class=\"col-md-3\"\u003e\n            \u003cdiv class=\"pen\"\u003e\n                \u003ca class=\"\" href=\"#\" data-toggle=\"modal\" data-target=\"#myModal\"\u003e\n                   Create New Pen\n                \u003c/a\u003e\n            \u003c/div\u003e \u003cbr\u003e\n            \u003cdiv id=\"Pen\"\u003e\n                @foreach (var item in Model) {\n                    \u003cdiv class=\"pen\"\u003e\n                        \u003ca class=\"\" asp-route-id=\"@item.ID\"\u003e \n                            @Html.DisplayFor(modelItem =\u003e item.Title)\n                        \u003c/a\u003e\n                    \u003c/div\u003e\n                }\n            \u003c/div\u003e\n         \u003c/div\u003e\n         @if(pen != null) {\n            \u003cdiv class=\"col-md-9\"\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003cdiv id=\"title\" contenteditable=\"true\" placeholder=\"Enter title here...\"\u003e@pen.Title\u003c/div\u003e\n                    \u003cdiv id=\"editor\" contenteditable=\"true\" placeholder=\"Enter content here...\"\u003e@pen.Content\u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e \n            \u003cinput type=\"hidden\" value=\"@pen.ID\" id=\"penId\"\u003e\n         }\n         else {\n             \u003cp class=\"text-center\"\u003e Select any pen to start editing... \u003c/p\u003e\n         }\n       \u003c/div\u003e\n    \u003c/div\u003e\n    \u003c!-- Modal --\u003e\n    \u003cdiv id=\"myModal\" class=\"modal fade\" role=\"dialog\"\u003e\n      \u003cdiv class=\"modal-dialog\"\u003e\n        \u003c!-- Modal content--\u003e\n        \u003cdiv class=\"modal-content\"\u003e\n          \u003cdiv class=\"modal-header\"\u003e\n            \u003cbutton type=\"button\" class=\"close\" data-dismiss=\"modal\"\u003e\u0026times;\u003c/button\u003e\n            \u003ch4 class=\"modal-title\"\u003eCreate new pen\u003c/h4\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"modal-body\"\u003e\n            \u003cform asp-action=\"Create\"\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003clabel for=\"pen\"\u003ePen Name\u003c/label\u003e\n                    \u003cinput type=\"text\" name=\"Title\" class=\"form-control\" id=\"Title\" placeholder=\"Pen\"\u003e\n                \u003c/div\u003e\n                \u003cbutton type=\"submit\" class=\"btn btn-primary btn-block\"\u003eSubmit\u003c/button\u003e\n            \u003c/form\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"modal-footer\"\u003e\n            \u003cbutton type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\"\u003eClose\u003c/button\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n```\n\nWhen a user visits the route - `/Pen/Index/` , The `Views/Pen/Index.chtml` file will be loaded for the user. \n\nIn the preceding code:\n\n- With `Pen pen = (Pen) ViewData[\"Pen\"]`, we are casting the data passed via ViewData to a Pen Model Object so we can easily access data in the object.\n- With `@foreach (var item in Model) { …`, we are displaying all pen in the database to the view.\n- Finally, we included Pusher JavaScript library.\n\nNow, visit `http://localhost:5000/Pen/Index`, the page should be similar to:\n\n![collatext-preview-1](//images.ctfassets.net/1es3ne0caaid/5Z1hLVyihGuIm6yqQgeAWu/dfd107426203aac7280fb78ef8b077d7/collatext-preview-1.png)\n\n## Creating new pens\n\nLet’s add a method for creating a new pen. When a user clicks on `Create New Pen`, a pop up will show up which contains a form for creating new pen. \n\nAdd the following code to the `PenController` class in `PenController.cs` :\n\n``` c#\n    [HttpPost]\n    [ValidateAntiForgeryToken]\n    public async Task\u003cIActionResult\u003e Create([Bind(\"ID,Title\")] Pen pen)\n    {\n        if (ModelState.IsValid)\n        {\n            _context.Add(pen);\n            await _context.SaveChangesAsync();\n            \n            return RedirectToAction(nameof(Index));\n        }\n        return View(pen);\n    }\n```\nWith this, we now have a POST method route - `/Pen/Create` for creating a new pen. \n\n## Making it realtime\n\nSo far, users can create a new pen, view the pen, and edit it. However other users are not aware of any changes done by other users in realtime. We’ll use Pusher to add realtime feature to our application.\n \n### Installing the Pusher library\nPusher has a .NET library that makes it easy to interact with its API. We need to add this to the project. \n\nFrom your command line, run the following command: \n\n```\n    dotnet add package PusherServer\n```\n\nNext, add the following code to the `PenController` class in `PenController.cs`:\n\n``` c#\n    public async Task\u003cIActionResult\u003e Trigger(object data, string channelName, string eventName)\n    {\n        var options = new PusherOptions\n        {\n          Cluster = \"\u003cPUSHER_APP_CLUSTER\u003e\",\n          Encrypted = true\n        };\n                \n        var pusher = new Pusher(\n            \"\u003cPUSHER_APP_ID\u003e\",\n            \"\u003cPUSHER_APP_KEY\u003e\",\n            \"\u003cPUSHER_APP_SECRET\u003e\",\n             options\n         );\n            \n        var result = await pusher.TriggerAsync(\n            channelName,\n            eventName,\n            data\n        );\n                \n        return new OkObjectResult(data);\n    }\n```\nWe’ll use this method to trigger events to Pusher. Make sure to update the code with your correct pusher Keys you have noted down.\n\nFinally, add the below **using** to the header of `PenController.cs`:\n\n``` c#\n    using PusherServer;\n```\n### Trigger an event to Pusher when a user edits a pen’s content\n\nWhen a user updates a pen’s content, we’ll trigger an event to pusher so that Pusher will broadcast the message to all other connected users.\n\nAdd the following code to to the `PenController` class in `PenController.cs`:\n\n``` c#\n    [HttpPost]\n    public async Task\u003cIActionResult\u003e ContentChange(int penId, string Content, string sessionID)\n    {\n        await Trigger(new {Content = Content, penId = penId, sessionID = sessionID}, \"coll-text-editor\", \"contentChange\");\n        \n        var pen = await _context.Pens.SingleOrDefaultAsync(m =\u003e m.ID == penId);\n        if( pen != null) {\n            pen.Content = Content;\n            _context.SaveChanges();\n         }\n         return new OkObjectResult(new { content = Content, penId = penId, sessionID = sessionID });\n    }\n```\nIn the preceding code:\n\n- We are triggering an event to Pusher using the `Trigger` method we added earlier. \n- In the `Trigger` method, we passed along the data we want to send to Pusher, the channel name - `*coll-text-editor*`, and the event name - `*contentChange*`.\n- Then we’ll save the updated content to the database.\n\n### Trigger an event to Pusher when a user adds a new pen\n\nPusher assigns all connected users a unique `sessionID`. We’ll use this ID to identify users. Update the parameter of the `Create` method in the `PenController.cs` so it includes this `sessionID`:\n\n``` c#\n    public async Task\u003cIActionResult\u003e Create([Bind(\"ID,Title\")] Pen pen, string sessionID)\n``` \n\nNext, add the following code to the `Create` method in `PenController.cs`:\n\n``` c#\n    await Trigger(new {Title = pen.Title, penId = pen.ID, sessionID = sessionID}, \"coll-text-editor\", \"newPen\");\n```\nIf you have followed closely, the `Create` method will look like this:\n\n``` c#\n    [HttpPost]\n    [ValidateAntiForgeryToken]\n    public async Task\u003cIActionResult\u003e Create([Bind(\"ID,Title\")] Pen pen, string sessionID)\n    {\n       if (ModelState.IsValid)\n       {\n          _context.Add(pen);\n          await _context.SaveChangesAsync();\n          await Trigger(new {Title = pen.Title, penId = pen.ID, sessionID = sessionID}, \"coll-text-editor\", \"newPen\");\n          \n          return RedirectToAction(nameof(Index));\n       }\n       return View(pen);\n    }\n```\nInitializing the Pusher JavaScript client library\n\nAdd the following code to `wwwroot/js/site.js`:\n\n``` javascript\n    var pusher = new Pusher('\u003cPUSHER_APP_KEY\u003e', {\n       cluster: '\u003cPUSHER_APP_CLUSTER\u003e', \n       encrypted: true\n    });\n```\nNext, let’s subscribe to a channel. Add the following code to `wwwroot/js/site.js`:\n\n``` javascript\n    let channel = pusher.subscribe('coll-text-editor');\n```\nIn this case, `coll-text-editor` is the channel name we want to subscribe to.\n\nNext, add the following code to `wwwroot/js/site.js`:\n\n``` javascript\n    let timeout = null;\n    // Sends the text to the server which in turn is sent to Pusher's server\n    $(\"#editor\").keyup(function () {\n       let content = $(\"#editor\").text();\n        clearTimeout(timeout);\n        timeout = setTimeout(function() {\n        \n        $.post(\"/Pen/ContentChange\", { content: content, penId: $(\"#penId\").val(), sessionID: pusher.sessionID})\n             }, 300);\n    });\n```\nWhen a user updates a pen’s content, we will send a request to the `ContentChange` method in `Controllers/PenContoller.cs` which in turn triggers an event to Pusher.\n\nNext, let’s listen for `contentChange` event. Add the following code to `wwwroot/js/style.js`:\n\n``` javascript\n    channel.bind('contentChange', function(data) {\n       if ( (data.sessionID != pusher.sessionID) \u0026\u0026 (data.penId == $(\"#penId\").val()) ) {\n          $(\"#editor\").text(data.Content)\n       }\n    });\n```\n\nHere, when there is a `contentChange` event, we’ll update the content of the pen for the user. The `if` condition makes sure the current user is the user that made the change to the pen. Also if the current pen the user is viewing is what is changed so we don’t bother updating the content for that particular user.\n\nFinally, let’s listen for `newPen` event. Add the following code to `wwwroot/js/site.js`:\n\n``` javascript\n    channel.bind('newPen', function(data) {\n      if (data.sessionID != pusher.sessionID) {\n          $(\"#Pen\").append(\n              `\n               \u003cdiv class=\"pen\"\u003e\n                  \u003ca class=\"\" href=\"/Pen/Index/${data.penId}\"\u003e \n                     ${data.Title}\n                  \u003c/a\u003e\n               \u003c/div\u003e\n             `\n         )\n      }\n    });\n```\n\nWhen a new pen is created, we’ll append the pen for other connected users in realtime.\n\nWell done! You have just built a realtime collaborative text editor using Pusher’s amazing technology. To test what you have built, load up the app in a different tab on your browser, then start collaborating.\n\n\n## Conclusion\n\nIn this tutorial, we discussed how to set up an ASP.NET Core application in Visual Studio Code. We’ve also built a realtime collaborative text editor using ASP.NET Core and Pusher. There is no limit of what you can do here, feel free to add new features to the application. You can get the full project on [Github](https://github.com/dongido001/CollaText.git).","metaTitle":"Build an online collaborative text editor using .NET","metaDescription":"This brief tutorial shows you how to build an online document editing app using .NET. Use Pusher Channels to communicate edits in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1t5xDkQoFKSEcG6K0ea8Me","type":"Entry","createdAt":"2018-05-03T10:23:02.317Z","updatedAt":"2019-01-02T15:31:47.504Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app with sentiment analysis using Next.js","url":"chat-sentiment-analysis-nextjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/realtime-chat-with-sentiment","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-05-02","description":"Use Next.js to build a chat app featuring sentiment analysis to track users' moods. ","prerequisite":"To follow this tutorial you will need Node and either npm or Yarn installed on your machine.","content":"Realtime applications have been around for quite a long time as we can see in contexts such as multi-player games, realtime collaboration services, instant messaging services, realtime data analytics tools, to mention a few. As a result, several technologies have been developed over the years to tackle and simplify some of the most challenging aspects of building apps that are sensitive to changes in realtime.\n\nIn this tutorial, we’ll build a very simple realtime chat application with sentiments. With sentiment analysis, we will be able to detect the mood of a person based on the words they use in their chat messages.\n\n\n## Prerequisites\n\nBefore you begin, ensure that you have Node and npm or Yarn installed on your machine. Here is a run-down of the core technologies we will be using.\n\n\n1. [**Next.js**](https://learnnextjs.com/) - A framework for building server-side rendered(SSR) React applications with ease. It handles most of the challenges that come with building SSR React apps.\n\n\n2. [**Pusher**](https://pusher.com/) - Pusher is a technology for building apps with varying realtime needs like push notifications and pub/sub messaging. It is the engine behind the realtime ability of our comments widget.\n\n\n3. [**Sentiment**](https://github.com/thisandagain/sentiment) - Sentiment is a module that uses the [AFINN-165](http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010) wordlist and [Emoji Sentiment Ranking](http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0144296) to perform [sentiment analysis](http://en.wikipedia.org/wiki/Sentiment_analysis) on arbitrary blocks of input text.\n\n\n4. [**React**](https://reactjs.org/) - A very popular JavaScript DOM rendering framework for building scalable web applications using a component-based architecture.\n\nA few other libraries will be used as we will see in a moment. Also ensure that you have [Node](https://nodejs.org/) installed on your machine.\n\n\n### Installing dependencies\n\nCreate a new directory for the application and run the following command to install the required dependencies for the app.\n\n```\n    # Create a new directory\n    mkdir realtime-chat-app\n    \n    # cd into the new directory\n    cd realtime-chat-app\n    \n    # Initiate a new package and install app dependencies\n    npm init -y\n    \n    npm install react react-dom next pusher pusher-js sentiment\n    npm install express body-parser cors dotenv axios\n```\n\n### Setting environment variables\n\nCreate a new application on your [Pusher Dashboard](https://dashboard.pusher.com/) to get your application credentials. Create a `.env` file in the root directory of your application and add your application credentials as follows.\n\n```\n    PUSHER_APP_ID=YOUR_APP_ID\n    PUSHER_APP_KEY=YOUR_APP_KEY\n    PUSHER_APP_SECRET=YOUR_APP_SECRET\n    PUSHER_APP_CLUSTER=YOUR_APP_CLUSTER\n```\n\nEnsure that you use the same variable names as specified in the above snippet. We will make reference to them at several points in our code.\n\nNext create a Next.js configuration file named `next.config.js` in the root directory of your application with the following content:\n\n``` javascript\n    /* next.config.js */\n    \n    const webpack = require('webpack');\n    require('dotenv').config();\n    \n    module.exports = {\n      webpack: config =\u003e {\n        const env = Object.keys(process.env).reduce((acc, curr) =\u003e {\n          acc[`process.env.${curr}`] = JSON.stringify(process.env[curr]);\n          return acc;\n        }, {});\n        \n        config.plugins.push(new webpack.DefinePlugin(env));\n        \n        return config;\n      }\n    };\n```\n\nSince Next.js uses [Webpack](https://webpack.js.org/) in the background for module loading and bundling, we are simply configuring Webpack to be able to provide the environment variables we have defined and make them available to our React components by accessing the `process.env` object.\n\n\n## Getting started\n\n### Setting up the server\n\nWe will go ahead to set up a simple server using Next.js to wrap an [Express](https://expressjs.com/) application server. We will also load the necessary middlewares for the Express server and then we will configure Pusher using the credentials we added to our environment variables.\n\nCreate a `server.js` file in the root directory of your application and add the following code snippet to it to set up the server:\n\n``` javascript\n    /* server.js */\n    \n    const cors = require('cors');\n    const next = require('next');\n    const Pusher = require('pusher');\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const dotenv = require('dotenv').config();\n    const Sentiment = require('sentiment');\n    \n    const dev = process.env.NODE_ENV !== 'production';\n    const port = process.env.PORT || 3000;\n    \n    const app = next({ dev });\n    const handler = app.getRequestHandler();\n    const sentiment = new Sentiment();\n    \n    // Ensure that your pusher credentials are properly set in the .env file\n    // Using the specified variables\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true\n    });\n    \n    app.prepare()\n      .then(() =\u003e {\n      \n        const server = express();\n        \n        server.use(cors());\n        server.use(bodyParser.json());\n        server.use(bodyParser.urlencoded({ extended: true }));\n        \n        server.get('*', (req, res) =\u003e {\n          return handler(req, res);\n        });\n        \n        server.listen(port, err =\u003e {\n          if (err) throw err;\n          console.log(`\u003e Ready on http://localhost:${port}`);\n        });\n        \n      })\n      .catch(ex =\u003e {\n        console.error(ex.stack);\n        process.exit(1);\n      });\n```\n\n### Modify npm scripts\n\nFinally, we will modify the `\"scripts\"` section of the `package.json` file to look like the following snippet:\n\n``` json\n    /* package.json */\n    \n    \"scripts\": {\n      \"dev\": \"node server.js\",\n      \"build\": \"next build\",\n      \"start\": \"NODE_ENV=production node server.js\"\n    }\n```\n\nWe have gotten all we need to start building our app components. If you run the command `npm run dev` on your terminal now, it will start up the application server on port `3000` if it is available. However, nothing happens on the browser yet, because we have not built any index page component. Let’s start building the app components.\n\n\n## Building the index page\n\nNext.js requires that you create the page components of your app in a `pages` directory. We will go ahead and create a `pages` directory in our app root directory and create a new `index.js` file inside it for the index page of our application.\n\nBefore we add content to the index page, we will build a `Layout` component that can be used in our app pages as a kind of template. Go ahead and create a `components` directory in your app root. Create a new `Layout.js` file inside the just created `components`  directory with the following content:\n\n``` javascript\n    /* components/Layout.js */\n    \n    import React, { Fragment } from 'react';\n    import Head from 'next/head';\n    \n    const Layout = props =\u003e (\n      \u003cFragment\u003e\n        \u003cHead\u003e\n          \u003cmeta charSet=\"utf-8\" /\u003e\n          \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" /\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossOrigin=\"anonymous\" /\u003e\n          \u003ctitle\u003e{props.pageTitle || 'Realtime Chat'}\u003c/title\u003e\n        \u003c/Head\u003e\n        {props.children}\n      \u003c/Fragment\u003e\n    );\n    \n    export default Layout;\n```\n\nHere, we try not to do so much. We are simply using the `next/head` component to add meta information to the `\u003chead\u003e` of our pages. We have also added a link to the Bootstrap CDN file to add some default styling to our app. We are also setting the page title dynamically from props and rendering the page contents using `{props.children}`.\n\nNow let's go ahead and add content to the `index.js` file we created earlier:\n\n``` javascript\n    /* pages/index.js */\n    \n    import React, { Component } from 'react';\n    import Layout from '../components/Layout';\n    \n    class IndexPage extends Component {\n    \n      state = { user: null }\n      \n      handleKeyUp = evt =\u003e {\n        if (evt.keyCode === 13) {\n          const user =  evt.target.value;\n          this.setState({ user });\n        }\n      }\n      \n      render() {\n        const { user } = this.state;\n        \n        const nameInputStyles = {\n          background: 'transparent',\n          color: '#999',\n          border: 0,\n          borderBottom: '1px solid #666',\n          borderRadius: 0,\n          fontSize: '3rem',\n          fontWeight: 500,\n          boxShadow: 'none !important'\n        };\n        \n        return (\n          \u003cLayout pageTitle=\"Realtime Chat\"\u003e\n          \n            \u003cmain className=\"container-fluid position-absolute h-100 bg-dark\"\u003e\n            \n              \u003cdiv className=\"row position-absolute w-100 h-100\"\u003e\n              \n                \u003csection className=\"col-md-8 d-flex flex-row flex-wrap align-items-center align-content-center px-5\"\u003e\n                  \u003cdiv className=\"px-5 mx-5\"\u003e\n                  \n                    \u003cspan className=\"d-block w-100 h1 text-light\" style={{marginTop: -50}}\u003e\n                      {\n                        user\n                          ? (\u003cspan\u003e\n                              \u003cspan style={{color: '#999'}}\u003eHello!\u003c/span\u003e {user}\n                            \u003c/span\u003e)\n                          : `What is your name?`\n                      }\n                    \u003c/span\u003e\n                    \n                    { !user \u0026\u0026 \u003cinput type=\"text\" className=\"form-control mt-3 px-3 py-2\" onKeyUp={this.handleKeyUp} autoComplete=\"off\" style={nameInputStyles} /\u003e }\n                    \n                  \u003c/div\u003e\n                \u003c/section\u003e\n                \n                \u003csection className=\"col-md-4 position-relative d-flex flex-wrap h-100 align-items-start align-content-between bg-white px-0\"\u003e\u003c/section\u003e\n                \n              \u003c/div\u003e\n              \n            \u003c/main\u003e\n            \n          \u003c/Layout\u003e\n        );\n      }\n      \n    }\n    \n    export default () =\u003e (\n      \u003cIndexPage /\u003e\n    );\n```\n\nWe created a component `IndexPage` for the index page of our app. We initialized the state of the component with an empty `name` property. The `name` property is meant to contain the name of the currently active user.\n\nWe also added an input field to receive the name of the user, if no user is currently active. Once the input field is filled and the `enter` or `return` key is pressed, the name supplied is stored in state.\n\nIf we test the app on our browser now, we should see a screen that looks like the following screenshot.\n\n![chat-app-next-sentiments-demo-1](//images.ctfassets.net/1es3ne0caaid/2SRn4engGQ8OIEGyeYiSY6/a7d2a8c46437edb1b0950479689d61df/chat-app-next-sentiments-demo-1.png)\n\n## Building the Chat component\n\nWe will go ahead and build the chat component. Create a new `Chat.js` file inside the `components` directory and add the following content:\n\n``` javascript\n    /* components/Chat.js */\n    \n    import React, { Component, Fragment } from 'react';\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    \n    class Chat extends Component {\n    \n      state = { chats: [] }\n      \n      componentDidMount() {\n      \n        this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n          cluster: process.env.PUSHER_APP_CLUSTER,\n          encrypted: true\n        });\n        \n        this.channel = this.pusher.subscribe('chat-room');\n        \n        this.channel.bind('new-message', ({ chat = null }) =\u003e {\n          const { chats } = this.state;\n          chat \u0026\u0026 chats.push(chat);\n          this.setState({ chats });\n        });\n        \n        this.pusher.connection.bind('connected', () =\u003e {\n          axios.post('/messages')\n            .then(response =\u003e {\n              const chats = response.data.messages;\n              this.setState({ chats });\n            });\n        });\n        \n      }\n      \n      componentWillUnmount() {\n        this.pusher.disconnect();\n      }\n      \n    }\n    \n    export default Chat;\n```\n\nHere is a simple break down of what we've done:\n\n\n1. We first initialized the state to contain an empty `chats` array property. This `chats` property will be populated with chat messages as they keep coming. When the component mounts, we set up a Pusher connection and `channel` subscription inside the `componentDidMount()` lifecycle method.\n\n2. You can see that we are subscribing to a Pusher channel called `chat-room` for our chat application. We are then binding to the `new-message` event on the channel, which is triggered when a new chat message comes in. Next, we simply populate the state `chats` property by appending the new chat.\n\n3. Also, on the `componentDidMount()` method, we are binding to the `connected` event on the Pusher client, when it is freshly connected, to fetch all the chat messages from history by making a `POST /messages` HTTP request using the `axios` library. Afterwards, we populate the state `chats` property with the chat messages received in the response.\n\nThe `Chat` component is not completed yet. We still need to add a `render()` method. Let’s do that quickly. Add the following snippet to the `Chat` component class.\n\n``` javascript\n    /* components/Chat.js */\n      \n    handleKeyUp = evt =\u003e {\n      const value = evt.target.value;\n      \n      if (evt.keyCode === 13 \u0026\u0026 !evt.shiftKey) {\n        const { activeUser: user } = this.props;\n        const chat = { user, message: value, timestamp: +new Date };\n        \n        evt.target.value = '';\n        axios.post('/message', chat);\n      }\n    }\n    \n    render() {\n      return (this.props.activeUser \u0026\u0026 \u003cFragment\u003e\n      \n        \u003cdiv className=\"border-bottom border-gray w-100 d-flex align-items-center bg-white\" style={{ height: 90 }}\u003e\n          \u003ch2 className=\"text-dark mb-0 mx-4 px-2\"\u003e{this.props.activeUser}\u003c/h2\u003e\n        \u003c/div\u003e\n        \n        \u003cdiv className=\"border-top border-gray w-100 px-4 d-flex align-items-center bg-light\" style={{ minHeight: 90 }}\u003e\n          \u003ctextarea className=\"form-control px-3 py-2\" onKeyUp={this.handleKeyUp} placeholder=\"Enter a chat message\" style={{ resize: 'none' }}\u003e\u003c/textarea\u003e\n        \u003c/div\u003e\n        \n      \u003c/Fragment\u003e )\n    }\n```\n\nAs seen in the `render()` method, we require an `activeUser` prop to identify the currently active user. We also rendered a `\u003ctextarea\u003e` element for entering a chat message. We added an `onKeyUp` event handler to the `\u003ctextarea\u003e` to send the chat message when you press the `enter` or `return` button.\n\nOn the `handleKeyUp()` event handler, we construct a `chat` object containing the `user` sending the message (currently active user), the `message` itself, and then the `timestamp` for when the message was sent. We clean up the `\u003ctextarea\u003e` and then make a `POST /message` HTTP request, passing the `chat` object we created as payload.\n\nLet's add the `Chat` component to our index page. First, add the following line to the `import` statements in the `pages/index.js` file.\n\n``` javascript\n    /* pages/index.js */\n    \n    // other import statements here ...\n    import Chat from '../components/Chat';\n```\n\nNext, locate the `render()` method of the `IndexPage` component. Render the `Chat` component in the empty `\u003csection\u003e` element. It should look like the following snippet:\n\n``` javascript\n    /* pages/index.js */\n    \n    \u003csection className=\"col-md-4 position-relative d-flex flex-wrap h-100 align-items-start align-content-between bg-white px-0\"\u003e\n      { user \u0026\u0026 \u003cChat activeUser={user} /\u003e }\n    \u003c/section\u003e\n```\n\nYou can reload the app now in your browser to see the changes.\n\n\n## Defining the messaging routes\n\nFor now, nothing really happens when you try to send a chat message. You don't see any message or any chat history. This is because we have not implemented the two routes we are making requests to.\n\nWe will go ahead and create the `/message` and `/messages` routes. Modify the `server.js` file and add the following just before the call to `server.listen()` inside the `then()` callback function.\n\n``` javascript\n    /* server.js */\n    \n    // server.get('*') is here ...\n    \n    const chatHistory = { messages: [] };\n    \n    server.post('/message', (req, res, next) =\u003e {\n      const { user = null, message = '', timestamp = +new Date } = req.body;\n      const sentimentScore = sentiment.analyze(message).score;\n      \n      const chat = { user, message, timestamp, sentiment: sentimentScore };\n      \n      chatHistory.messages.push(chat);\n      pusher.trigger('chat-room', 'new-message', { chat });\n    });\n    \n    server.post('/messages', (req, res, next) =\u003e {\n      res.json({ ...chatHistory, status: 'success' });\n    });\n    \n    // server.listen() is here ...\n```\n\nFirst, we created a kind of in-memory store for our chat history, to store chat messages in an array. This is useful for new clients that join the chat room to see previous messages. Whenever the Pusher client makes a `POST` request to the `/messages` endpoint on connection, it gets all the messages in the chat history in the returned response.\n\nOn the `POST /message` route, we are fetching the chat payload from `req.body` through the help of the `body-parser` middleware we added earlier. We then use the `sentiment` module to calculate the overall sentiment score of the chat message. Next, we reconstruct the `chat` object, adding the `sentiment` property containing the sentiment score.\n\nFinally, we add the chat to the chat history `messages`, and then trigger a `new-message` event on the `chat-room` Pusher channel, passing the `chat` object in the event data. **This does the real time magic**.\n\nWe are just a few steps away from completing our chat application. If you load the app on your browser now and try sending a chat message, you don't see any feedback yet. That's not because our app is not working. **It is working perfectly**. It's simply because we are not yet rendering the chat messages on the view. Let's head on to that and finish this up.\n\n\n## Displaying the chat messages\n\nCreate a new `ChatMessage.js` file inside the `components` directory and add the following content to it.\n\n``` javascript\n    /* components/ChatMessage.js */\n    \n    import React, { Component } from 'react';\n    \n    class ChatMessage extends Component {\n    \n      render() {\n        const { position = 'left', message } = this.props;\n        const isRight = position.toLowerCase() === 'right';\n        \n        const align = isRight ? 'text-right' : 'text-left';\n        const justify = isRight ? 'justify-content-end' : 'justify-content-start';\n        \n        const messageBoxStyles = {\n          maxWidth: '70%',\n          flexGrow: 0\n        };\n        \n        const messageStyles = {\n          fontWeight: 500,\n          lineHeight: 1.4,\n          whiteSpace: 'pre-wrap'\n        };\n        \n        return \u003cdiv className={`w-100 my-1 d-flex ${justify}`}\u003e\n          \u003cdiv className=\"bg-light rounded border border-gray p-2\" style={messageBoxStyles}\u003e\n            \u003cspan className={`d-block text-secondary ${align}`} style={messageStyles}\u003e\n              {message}\n            \u003c/span\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      }\n      \n    }\n    \n    export default ChatMessage;\n```\n\nThe `ChatMessage` component is a very simple component requiring two props: `message` for the chat message and `position` for the positioning of the message - either `right` or `left`. This is useful for positioning the messages of the active user on one side and then the messages of other users on the other side as we would do in a moment.\n\nFinally, we will modify the `components/Chat.js` file to render the chat messages from the state. Make the following changes to the `Chat` component.\n\nFirst add the following constants before the class definition of the `Chat` component. Each constant is an array of the code points required for a particular sentiment emoji. **Also ensure to import the** `ChatMessage` **component**.\n\n``` javascript\n    /* components/Chat.js */\n    \n    // Module imports here ...\n    import ChatMessage from './ChatMessage';\n    \n    const SAD_EMOJI = [55357, 56864];\n    const HAPPY_EMOJI = [55357, 56832];\n    const NEUTRAL_EMOJI = [55357, 56848];\n    \n    // Chat component class here ...\n```\n\nThen, add the following snippet between the chat header `\u003cdiv\u003e` and the chat message box `\u003cdiv\u003e` we created earlier in the `Chat` component.\n\n``` javascript\n    /* components/Chat.js */\n    \n    {/** CHAT HEADER HERE **/}\n    \n    \u003cdiv className=\"px-4 pb-4 w-100 d-flex flex-row flex-wrap align-items-start align-content-start position-relative\" style={{ height: 'calc(100% - 180px)', overflowY: 'scroll' }}\u003e\n    \n      {this.state.chats.map((chat, index) =\u003e {\n      \n        const previous = Math.max(0, index - 1);\n        const previousChat = this.state.chats[previous];\n        const position = chat.user === this.props.activeUser ? \"right\" : \"left\";\n        \n        const isFirst = previous === index;\n        const inSequence = chat.user === previousChat.user;\n        const hasDelay = Math.ceil((chat.timestamp - previousChat.timestamp) / (1000 * 60)) \u003e 1;\n        \n        const mood = chat.sentiment \u003e 0 ? HAPPY_EMOJI : (chat.sentiment === 0 ? NEUTRAL_EMOJI : SAD_EMOJI);\n        \n        return (\n          \u003cFragment key={index}\u003e\n          \n            { (isFirst || !inSequence || hasDelay) \u0026\u0026 (\n              \u003cdiv className={`d-block w-100 font-weight-bold text-dark mt-4 pb-1 px-1 text-${position}`} style={{ fontSize: '0.9rem' }}\u003e\n                \u003cspan className=\"d-block\" style={{ fontSize: '1.6rem' }}\u003e\n                  {String.fromCodePoint(...mood)}\n                \u003c/span\u003e\n                \u003cspan\u003e{chat.user || 'Anonymous'}\u003c/span\u003e\n              \u003c/div\u003e\n            ) }\n            \n            \u003cChatMessage message={chat.message} position={position} /\u003e\n            \n          \u003c/Fragment\u003e\n        );\n        \n      })}\n      \n    \u003c/div\u003e\n    \n    {/** CHAT MESSAGE BOX HERE **/}\n```\n\nLet's try to understand what this code snippet is doing. First, we are going through each `chat` object in the state `chats` array property. We check if the sender of the message is the same as the currently active user and use that to determine the position of the displayed chat message. As you can see, the active user's messages will appear on the right.\n\nWe also use the `sentiment` score in the chat object to set the mood of the user while typing the message to either `happy`, `sad` or `neutral` using the earlier defined constants.\n\nWe conditionally render the `name` of the user before the chat message based on one of the following conditions being met.\n\n\n1.  `isFirst` - the current chat message is the first in the list\n\n\n2.  `!inSequence` - the current chat message directly follows a message from another user\n\n\n3.  `hasDelay` - the current chat message has a delay of over `1 minute` from the previous message of the same user\n\nAlso notice how we are using the `[String.fromCodePoint()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)` method added in ES6 to get the emoji from the code points we defined in our constants earlier.\n\nWe are finally done with our chat app. You can go ahead to test what you have built on your browser. Here are some screenshots showing a chat between **9lad**, **Steve** and **Bob**.\n\n**9lad**\n\n![chat-app-next-sentiments-demo-2](//images.ctfassets.net/1es3ne0caaid/7evikt0WTCGmASaugyOA8G/cb5a71576ccb35609b7c4afdff2acc15/chat-app-next-sentiments-demo-2.png)\n\n**Steve**\n\n![chat-app-next-sentiments-demo-3](//images.ctfassets.net/1es3ne0caaid/54OWU9Ji2QUYSiACukiyKQ/2f74370afbfee6f9860467627657d5e0/chat-app-next-sentiments-demo-3.png)\n\n**Bob**\n\n![chat-app-next-sentiments-demo-4](//images.ctfassets.net/1es3ne0caaid/4t5dgOUOuIQ8GWc6SQWs8u/0e1464d99713409f0083210dc108b8e5/chat-app-next-sentiments-demo-4.png)\n\n\n## Conclusion\n\nIn this tutorial, we have been able to build a very simple chat application with chat sentiment using [Next.js](https://learnnextjs.com/)([React](https://reactjs.org/)), [Pusher](https://pusher.com/) and [Sentiment Node](https://github.com/thisandagain/sentiment) module. While this tutorial focuses on just the basics, there are a lot of advanced stuffs you can do to make a better chat app. You can check the source code of this tutorial on [GitHub](https://github.com/christiannwamba/realtime-chat-with-sentiment).\n\nDo check the documentation for each technology we used in this project to learn more about other ways of using them. I hope that this tutorial is of help to you.","metaTitle":"Build a chat app with sentiment analysis using Next.js","metaDescription":"This brief tutorial shows you how to build a chat app with Next.js, featuring sentiment analysis that gauges and signals users' moods."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1mDc9HOj7mEYwQ2CaoEMqQ","type":"Entry","createdAt":"2018-04-30T12:48:16.510Z","updatedAt":"2018-05-01T15:44:56.196Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime Instagram clone — Part 2: Connecting the UI with GraphQL data","url":"instagram-clone-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/instagram-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-04-27","description":"This four-part series takes you through building an Instagram clone using Node and React. In part two, connect your UI and data with GraphQL.","prerequisite":"You should have completed part one of the series.","content":"*This is part 2 of a 4 part tutorial. You can find part 1 [here](https://pusher.com/tutorials/instagram-clone-part-1), part 3 [here](https://pusher.com/tutorials/instagram-clone-part-3) and part 4 [here](https://pusher.com/tutorials/instagram-clone-part-4).*\n\nIn the last part, of this series, we set up the UI for our React Instagram clone. If you haven’t already, you can read up on it [here](https://pusher.com/tutorials/instagram-clone-part-1). In this part, we are going to take a look at how to connect the UI to GraphQL Data\n\n## Prerequisites\n- Should have read the first part of the series\n- Basic knowledge of JavaScript\n- Node installed on your machine\n- NPM installed on your machine\n\n## Set up the server\n\nTo allow us to serve data to the UI, let’s create an API server for the application. The server will be built using NodeJS and GraphQL.\n\n### What is GraphQL\nGraphQL allows you to describe how to ask for data. With GraphQL, the client specifies the exact resources it needs instead of making requests to REST Endpoints that return everything. The GraphQL API has three main building blocks which are queries, schema, and resolvers.\n\nTo get started, create a `server` directory in the project root of the `react-instagram-clone` app. Here’s a link to the [Github](https://github.com/christiannwamba/instagram-clone) repository for more reference. \n\n```\n    mkdir server\n```\n\nInitialize a new Node project and install the following modules:\n\n```\n    cd server\n    npm init \n    npm install --save express graphql express-graphql cors\n```\n\nCreate a `server.js` file in the `server/` directory:\n\n```\n    touch server.js\n```\n\nNow, edit the `server.js` file as follows. First, import the necessary node modules:\n\n``` javascript\n    // server/server.js\n    \n    let express = require(\"express\");\n    let graphqlHTTP = require(\"express-graphql\");\n    let { buildSchema } = require(\"graphql\");\n    let cors = require(\"cors\");\n    \n    [...]\n```\n\nNext thing is to construct a schema. In GraphQL, schemas are constructed using GraphQL Schema Language. \n\n``` javascript\n    // server/server.js\n    [...]\n    \n    let schema = buildSchema(`\n      type User {\n        id : String!\n        nickname : String!\n        avatar : String!\n      }\n      type Post {\n          id: String!\n          user: User!\n          caption : String!\n          image : String!\n      }\n      type Query{\n        user(id: String) : User!\n        post(user_id: String, post_id: String) : Post!\n        posts(user_id: String) : [Post]\n      }\n    `);\n    \n    [...]\n```\n\nIn specifying the schema, above, we also added a query**.** Query fields also allow you to add arguments which we will need in this case to display specific data.\n\nNext thing to do is to add some stock data for the application. Add the following to your `server.js` file:\n\n``` javascript\n    // server/server.js\n    [...]\n    // Maps id to User object\n    let userslist = {\n      a: {\n        id: \"a\",\n        nickname: \"Chris\",\n        avatar: \"https://www.laravelnigeria.com/img/chris.jpg\"\n      },\n      [...]\n    };\n    let postslist = {\n      a: {\n        a: {\n          id: \"a\",\n          user: userslist[\"a\"],\n          caption: \"Moving the community!\",\n          image: \"https://pbs.twimg.com/media/DOXI0IEXkAAkokm.jpg\"\n        },\n        b: {\n          id: \"b\",\n          user: userslist[\"a\"],\n          caption: \"Angular Book :)\",\n          image:\n            \"https://cdn-images-1.medium.com/max/1000/1*ltLfTw87lE-Dqt-BKNdj1A.jpeg\"\n        },\n        c: {\n          id: \"c\",\n          user: userslist[\"a\"],\n          caption: \"Me at Frontstack.io\",\n          image: \"https://pbs.twimg.com/media/DNNhrp6W0AAbk7Y.jpg:large\"\n        },\n        d: {\n          id: \"d\",\n          user: userslist[\"a\"],\n          caption: \"Moving the community!\",\n          image: \"https://pbs.twimg.com/media/DOXI0IEXkAAkokm.jpg\"\n        }\n      }\n    };\n    [...]\n```\n\nThe data is truncated for brevity. You can fetch the complete data from the `server.js` file on [Github](https://github.com/christiannwamba/instagram-clone/blob/master/server/server.js).\n\nNow that this is specified, the next thing to do is to specify the resolver function for the API. The resolver ****tells your server how to handle an incoming query telling it where to get the data for a given field. Add the resolver to the `server.js` file that looks like this:\n\n``` javascript\n    // server/server.js\n    [...]\n    // The root provides a resolver function for each API endpoint\n    let root = {\n      user: function({ id }) {\n        return userslist[id];\n      },\n      post: function({ user_id , post_id }) {\n        return postslist[user_id][post_id];\n      },\n      posts: function({ user_id }){\n        return Object.values(postslist[user_id]);\n      }\n    };\n    [...]\n```\n\nHere the functions `user` and `post` return data that matches the criteria specified above. `posts` returns all the posts created by a specific user. Now that this is all done, let’s create an Express app and have the server listen for incoming requests:\n\n``` javascript\n    // server/server.js\n    [...]\n    let app = express();\n    app.use(cors());\n    app.use(\n      \"/graphql\",\n      graphqlHTTP({\n        schema: schema,\n        rootValue: root,\n        graphiql: true\n      })\n    );\n    // set application port\n    app.listen(4000);\n```\n\nGraphQL also comes with an interactive console that could be displayed to allow developers get familiar with GraphQL queries. The `grapgiql: true` option specifies that this should also be mounted on the `/graphql` route of the express server.\n\nNow, when you run the `server.js` file, your server will be hosted at `http://localhost:4000/graphql`. \n\n```\n    node server\n```\n\nWhen you visit the URL in the browser,  you get the following:\n\n![instagram-clone-graphql](//images.ctfassets.net/1es3ne0caaid/3xeZYg3Ck82u2OWkIMEQCG/ec13578cf59e83d384d950101ddf3211/instagram-clone-graphql.png)\n\n\nYou can test it out by pasting this query into the GraphiQL console:\n\n``` json\n    {\n      user(id: \"a\"){\n        nickname,\n      }\n    }\n```\n\nWhen you hit the run button, you can get the result:\n\n![instagram-clone-graphql-result-1](//images.ctfassets.net/1es3ne0caaid/3kLI9o0RyogmcAKiKOAMau/936d93495403302a3f7dfa605048f68b/instagram-clone-graphql-result-1.png)\n\nThis is the query in the above screenshot, with one modification:\n\n``` json\n    {\n      user(id: \"a\"){\n        nickname,\n        avatar\n      }\n    }\n```\n\nAs you can see in the result below, all that needs to be changed is the description of what you want from the server.\n\n![instagram-clone-graphql-result-2](//images.ctfassets.net/1es3ne0caaid/3egEK130TuaayOu4muESom/83a0cd83f3636dfc10c7376fca741992/instagram-clone-graphql-result-2.png)\n\n\nFrom the screenshots above, you can see that the server only returns the data that was requested of it. Nothing more, nothing less.\n\n\n## Connect the React client to the GraphQL server\n\nNow, let’s see how to connect the server to our React UI that was created in the part of this series. To do this, we are going to make use of [Apollo](https://www.apollographql.com/client). \n\n### Getting set up with Apollo\nFirst, let’s install the necessary packages in the root folder of the react project.\n\n```\n    cd react-instagram-clone\n    npm install apollo-boost react-apollo graphql-tag graphql --save\n```\n\nNow that the installations are complete, create a new Apollo Client in the `src/app.js` file:\n\n``` javascript\n    // src/app.js\n    [...]\n    import ApolloClient from 'apollo-boost';\n    \n    const client = new ApolloClient({\n        uri : \"http://localhost:4000\"\n    })\n    [...]\n```\n\nThe `uri` used above is that of the GraphQL server that was created earlier. \n\n### Connecting the Apollo Client to React\nThen wrap the content of the App component in an `ApolloProvider` passing the created client as one of the props.\n\n``` javascript\n    // src/app.js\n    [...]\n    import { ApolloProvider } from \"react-apollo\";\n    \n    const client = new ApolloClient({\n      uri: \"http://localhost:4000/graphql\"\n    });\n    \n    const App = () =\u003e {\n      return (\n        \u003cApolloProvider client={client}\u003e\n          \u003cdiv className=\"App\"\u003e\n            \u003cHeader /\u003e\n            \u003csection className=\"App-main\"\u003e\n              \u003cPost /\u003e\n            \u003c/section\u003e\n          \u003c/div\u003e\n        \u003c/ApolloProvider\u003e\n      );\n    };\n    export default App;\n```\n\nThis allows us to use the created client all through the different components of our application without having to create a new Apollo Client every time.\n\n\n## Render server-provisioned data\n\nNow, let’s begin to make queries to render posts from the GraphQL server created earlier on. To do this, you’ll have to tweak the `src/components/Post/index.js` as follows:\n\nImport the necessary modules that would be needed to construct queries:\n\n``` javascript\n    // src/components/Post/index.js\n    import { Query } from \"react-apollo\";\n    import gql from \"graphql-tag\";\n    \n    [...]\n```\n\nNow, make query inside the `Post` component like this:\n\n``` javascript\n    // src/components/Post/index.js\n    const Post = () =\u003e {\n      return (\n        \u003cQuery\n          query={gql`\n            {\n              post(user_id: \"a\", post_id: \"a\") {\n                image\n                caption\n                user {\n                  nickname\n                  avatar\n                }\n              }\n            }\n          `}\n        \u003e\n          // handle result of the query\n          [...]\n        \u003c/Query\u003e\n      )\n    }\n```\n\nWe are going to replace the dots with the query handler but first let’s understand how query itself. The code above creates a GraphQL query that will be executed. When this query is run using the GraphiQL UI this result is obtained. \n\nYou can paste this query in your GraphiQL:\n\n``` json\n    {\n      post(user_id: \"a\", post_id: \"a\") {\n        image\n        caption\n        user {\n          nickname\n          avatar\n        }\n      }\n    }\n```\n\nWhen you run it, you get the result below:\n\n![instagram-clone-graphql-result-3](//images.ctfassets.net/1es3ne0caaid/18kOEEr6IkSckc268WAqoa/2e03f72c3fdd77ab7e6eb0e55b17b1e5/instagram-clone-graphql-result-3.png)\n\n\nNow, let’s handle the result as follows:\n\n``` javascript\n    // src/components/Post/index.js\n    [...]\n      {({ loading, error, data }) =\u003e {\n            if (loading) return \u003cp\u003eLoading Post...\u003c/p\u003e;\n            if (error) return \u003cp\u003eError loading Post:(\u003c/p\u003e;\n            let image = data.post.image;\n            let caption = data.post.caption;\n            let user = data.post.user;\n            \n            // return JSX to be rendered\n            [...]\n```\n\nChecks are made to see if the query is executed successfully. If it is, the data returned from the query is obtained and the result is handled as follows:\n        \n``` javascript\n    // src/components/Post/index.js\n            [...]\n            return (\n              \u003carticle className=\"Post\" ref=\"Post\"\u003e\n                \u003cheader\u003e\n                  \u003cdiv className=\"Post-user\"\u003e\n                    \u003cdiv className=\"Post-user-avatar\"\u003e\n                      \u003cimg src={user.avatar} alt={user.nickname} /\u003e\n                    \u003c/div\u003e\n                    \u003cdiv className=\"Post-user-nickname\"\u003e\n                      \u003cspan\u003e{user.nickname}\u003c/span\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/header\u003e\n                \u003cdiv className=\"Post-image\"\u003e\n                  \u003cdiv className=\"Post-image-bg\"\u003e\n                    \u003cimg alt={caption} src={image} /\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv className=\"Post-caption\"\u003e\n                  \u003cstrong\u003e{user.nickname}\u003c/strong\u003e {caption}\n                \u003c/div\u003e\n              \u003c/article\u003e\n            );\n          }}\n        \u003c/Query\u003e\n      );\n    };\n    \n    export default Post;\n```\n\nNow, when you run the react app using the command:\n\n```\n    yarn start # or npm start -- based on the package manager of choice\n``` \n\n\nthe application is loaded on `http://localhost:3000/` and the following view is obtained:\n\n\n\u003e Make sure that the GraphQL server is still running\n\n![instagram-clone-part-1-complete](//images.ctfassets.net/1es3ne0caaid/513bWOORAIk4k6Eo6Mgcki/bffd3206773e6ae2f91c457cf515b3fe/instagram-clone-part-1-complete.png)\n\n\n\n## Fetching and displaying multiple posts\n\nIn a real life scenario, you don’t expect to only have one post showing on your version of Instagram . What needs to be done now is that a new `Posts` component needs to be created to allow for dynamic queries and display of multiple posts. Let’s see how to do this. \n\nCreate a new `Posts` folder in the `/src/components` directory\n\n```\n    mkdir Posts \u0026\u0026 cd Posts\n```\n\nCreate an `index.js` file in the `Posts` folder:\n\n```\n    touch index.js\n```\n\nLet’s edit the `Posts/index.js` file to look like this:\n\nFirst, import the necessary node modules:\n\n``` javascript\n    // src/components/Posts/index.js\n    import React from \"react\";\n    import \"./Posts.css\";\n    import { Query } from \"react-apollo\";\n    import gql from \"graphql-tag\";\n    import Post from \"../Post\";\n    [...]\n```\n\nThen make Query for all the posts in the `Posts` component:\n\n``` javascript\n    // src/components/Posts/index.js\n    [...]\n    const Posts = () =\u003e {\n      return (\n        \u003cQuery\n          query={gql`\n            {\n              posts(user_id: \"a\"){\n                id\n                user{\n                  nickname\n                  avatar\n                }\n                image\n                caption\n              }\n            }\n          `}\n        \u003e\n        [...]\n```   \n\n Now, let’s handle the results of the Query like we did earlier on:\n \n``` javascript\n    // src/components/Posts/index.js\n        [...]\n        {({loading, error, data}) =\u003e {\n            if (loading) return \u003cp\u003eLoading Posts...\u003c/p\u003e;\n            if (error) return \u003cp\u003eError Fetching Posts...\u003c/p\u003e;\n            let posts = data.posts;\n            \n            return \u003cdiv className=\"Posts\"\u003e\n              {posts.map(post =\u003e \u003cPost nickname={post.user.nickname} avatar={post.user.avatar} image={post.image} caption={post.caption} key={post.id}/\u003e)}\n            \u003c/div\u003e;\n          }}\n        \u003c/Query\u003e\n      );\n    }\n    \n    export default Posts;\n```\n\nNotice how the `Post` component was used above. Let’s tweak the `Post` component to allow for this. Edit the `src/components/Post/index.js` to look as follows:\n\n``` javascript\n    import React, { Component } from \"react\";\n    import \"./Post.css\";\n    class Post extends Component {\n      render() {\n        const nickname = this.props.nickname;\n        const avatar = this.props.avatar;\n        const image = this.props.image;\n        const caption = this.props.caption;\n        return (\n          \u003carticle className=\"Post\" ref=\"Post\"\u003e\n            \u003cheader\u003e\n              \u003cdiv className=\"Post-user\"\u003e\n                \u003cdiv className=\"Post-user-avatar\"\u003e\n                  \u003cimg src={avatar} alt={nickname} /\u003e\n                \u003c/div\u003e\n                \u003cdiv className=\"Post-user-nickname\"\u003e\n                  \u003cspan\u003e{nickname}\u003c/span\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/header\u003e\n            \u003cdiv className=\"Post-image\"\u003e\n              \u003cdiv className=\"Post-image-bg\"\u003e\n                \u003cimg alt={caption} src={image} /\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"Post-caption\"\u003e\n              \u003cstrong\u003e{nickname}\u003c/strong\u003e {caption}\n            \u003c/div\u003e\n          \u003c/article\u003e\n        );\n      }\n    }\n    \n    export default Post;\n```\n\nAs seen above, the Post component has the `nickname`, `avatar`, `image` and `caption` which are dynamically added for each post that is fetched from the GraphQL server.\n\nRecall in the `src/components/Posts/index.js` we did this:\n\n``` javascript\n    // src/components/Posts/index.js\n    return \n      \u003cdiv className=\"Posts\"\u003e\n        {\n        posts.map(\n          post =\u003e \u003cPost nickname={post.user.nickname} avatar={post.user.avatar} image={post.image} caption={post.caption} key={post.id}/\u003e\n          )\n        }\n    \u003c/div\u003e;\n```\n\nWhat happened here is that all the posts received from the GraphQL server were mapped to Post components with the necessary data properties. \n\nCreate a `Posts.css` file in the `src/components/Posts` directory that will contain any styling you wish to add to the Posts component:\n\n```\n    touch Posts.css\n```\n\nNow, when you visit your application at `http://localhost:3000/` you get the following:\n\n\n\u003e Ensure that your GraphQL server is still running\n\n\n![instagram-clone-part-2-complete-1](//images.ctfassets.net/1es3ne0caaid/5jDZ0qWVDq0WAYyCcygS4w/6df2382517deb582ab48c0ea8bfa2387/instagram-clone-part-2-complete-1.png)\n\n![instagram-clone-part-2-complete-2](//images.ctfassets.net/1es3ne0caaid/OqquLfO3YGSUSCQCoM8gU/e53fb943de49c8bd3d06cda89be520cd/instagram-clone-part-2-complete-2.png)\n\n\n\n## Conclusion\n\nIn this part of the series, we took a look at GraphQL and how to create a GraphQL server. We also saw how to link our existing React UI to the GraphQL server using the Apollo Client. In the [next part](https://pusher.com/tutorials/instagram-clone-part-3) of the series, we are going to look at how to add realtime feed updates to the Instagram clone application using Pusher. Here’s a link to the full [Github](https://github.com/christiannwamba/instagram-clone) repository if you’re interested.","metaTitle":"Build an Instagram clone with React — Part 2: GraphQL","metaDescription":"Use React, Node and Pusher to build an Instagram clone. In part two, use GraphQL to connect your data to your UI."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6tLdzM6PXqQQIuCKIO06cg","type":"Entry","createdAt":"2018-04-30T12:49:05.311Z","updatedAt":"2018-04-30T16:41:32.703Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime Instagram clone — Part 4: Going offline with service workers","url":"instagram-clone-part-4","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/instagram-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2018-04-27","description":"This four-part series takes you through building an Instagram clone using Node and React. In part four, implement offline support with service workers.","prerequisite":"You should have completed the previous parts of the series.","content":"*This is part 4 of a 4 part tutorial. You can find part 1 [here](https://pusher.com/tutorials/instagram-clone-part-1), part 2 [here](https://pusher.com/tutorials/instagram-clone-part-2) and part 3 [here](https://pusher.com/tutorials/instagram-clone-part-3).*\n\nIn the [last part](https://pusher.com/tutorials/instagram-clone-part-3) of the series, we looked at how to add realtime functionality to our React application using Pusher to enable notifications. Sometimes, when surfing the web, you loose internet connection. In the past, all you got was the default error page decided by the browser. Now, you sometimes get custom pages even when you don’t have internet connection at all.\n\nIn this article, we are going to look at how to add this kind of functionality to our application to allow the users still engage with our application even when they are constrained by internet connections. To do accomplish this, we are going to make use of the browser’s local storage and service workers.\n\n\n## Prerequisites\n\nTo follow this article you need the following:\n\n- Should have read previous parts of the series\n- Basic knowledge of JavaScript\n- Node installed on your machine\n- NPM installed on your machine\n\n\n## Set up an app shell to show when offline\n\nThe app “shell” is the minimal HTML, CSS and JavaScript required to power the user interface. This allow us to immediately render the page while the rest of the page is being fetched. \n\n### Service workers\nService workers are scripts that the browser runs in the background to give the online effect to users by caching assets and other files. Their core features are how they’re able to intercept and handle network requests. There are three stages in the lifecycle of a service worker: registration, installation and activation.\n\nReact includes starter code that registers a service worker. In the `src/index.js` you have:\n\n``` javascript\n    // src/index.js\n    [...]\n    import registerServiceWorker from './registerServiceWorker';\n    [...]\n    registerServiceWorker();\n```\n\nThis registers a service worker for your application when your application is in production mode.\n\nNext thing to do is update your `public/manifest.json` file\n\n``` json\n    {\n      \"short_name\": \"InstaClone\",\n      \"name\": \"Simple Instagram Clone App\",\n      \"icons\": [\n        {\n          \"src\": \"favicon.ico\",\n          \"sizes\": \"64x64 32x32 24x24 16x16\",\n          \"type\": \"image/x-icon\"\n        }\n      ],\n      \"start_url\": \"./index.html\",\n      \"display\": \"standalone\",\n      \"theme_color\": \"#000000\",\n      \"background_color\": \"#ffffff\"\n    }\n```\n\n\nNow, build your application using:\n\n```\n    npm run build # or yarn build\n```\n\nAn optimized version of your application will be built in the `build/` folder of your application. Now you will want to deploy the built application. To do this, `http-server` - a node module for serving static files:\n\n```\n    npm install http-server\n    http-server build\n```\n\nWhen you visit the application at `127.0.0.1:8080`, you get your regular application. Now, head over to the `Appication` tab of your Chrome debug console. You can see the existing service worker for your application displayed there. Click the `Offline` option to simulate no network connection. When you reload your application, you get this:\n\n![instagram-clone-offline](//images.ctfassets.net/1es3ne0caaid/7pWIiEf9cI0CMauaiMm8cI/b4a7f8baffb597091dcc3f9839e62a67/instagram-clone-offline.png)\n\n## Serving stale data when offline\n\nThe current display when a user is offline is a little better than the default page shown when there’s no connection. For an application like our Instagram clone application, it’ll be nice for the users to still be able to view old posts when offline. When we fetch posts in the **Posts** component, we are going to save them in the browsers `localStorage` for future use. To do this, update the `componentDidMount` of your `src/components/Posts/index.js` as follows:\n\n``` javascript\n    // src/components/Posts/index.js\n    [...]\n    componentDidMount(){\n        [...]\n        if( !navigator.onLine){\n          this.setState({ posts: JSON.parse(localStorage.getItem(\"posts\")) });\n        }else{\n          this.props.apollo_client\n          .query(\n            // grapgl ql query\n            [...]\n          )\n          .then(response =\u003e {\n            this.setState({ posts: response.data.posts});\n            localStorage.setItem('posts', JSON.stringify(response.data.posts));\n          });\n        }\n        [...]\n      }\n```\n\nWe first check if the user is online. If they are, the `apollo_client` ****makes the request to get new posts. After the posts are obtained they’re saved using the `localStorage.setItem()` function. When the user is offline, `!navigator.onLine` will return true and then the stored posts are fetched from the localStorage using `localStorage.getItem()`.\n\n\n\u003e **Tip:** localStorage only stores strings so to work around this, you use `JSON.stringify()` and `JSON.parse()` for storage and retrieval respectfully\n\nYou can also decide to display a banner to the user letting then know that they are viewing stale data. To do this, let’s create a simple Notifier component in the `src/components`  directory like this:\n\n```\n    cd src/components\n    mkdir Notifier\n    cd Notifier \u0026\u0026 touch index.js Notifier.css\n```\n\n``` javascript\n    // src/components/Notifier/index.js\n    \n    import React, { Component } from \"react\";\n    import \"./Notifier.css\";\n    class Notifier extends Component {\n      render() {\n        return (\n          \u003cdiv className=\"notify\"\u003e\n            \u003cp\u003e\n              \u003cem\u003e{this.props.data}\u003c/em\u003e\n            \u003c/p\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default Notifier;\n```\n\nThe component has the following styling:\n\n``` css\n    // src/components/Notifier/Notifier.css\n    \n    .notify{\n        background-color: red;\n        width: 100%;\n        padding-top: 20px;\n        padding-bottom: 20px;\n        text-align: center;\n        color: white;\n        margin-bottom: 20px;\n    }\n```\n\nNow that the component is created, to use it in the Posts component, update the `src/components/Posts/index.js`:\n\n``` javascript\n    // src/components/Posts/index.js\n    \n    import React, {Component} from \"react\";\n    import \"./Posts.css\";\n    import gql from \"graphql-tag\";\n    import Post from \"../Post\";\n    import Notifier from \"../Notifier\";\n    class Posts extends Component {\n      constructor() {\n        super();\n        this.state = {\n          posts: []\n        };\n        this.offline = !navigator.onLine;\n      }\n      componentDidMount() {\n        [...]\n      }\n      render() {\n        const notify = this.offline ? \u003cNotifier data=\"Instagram Clone: Offline Mode\" /\u003e : \u003cspan /\u003e;\n        return (\n          \u003cdiv\u003e\n            {notify}\n            // display posts\n            [...]\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default Posts;\n```\n\n\nNow, build the application again using:\n\n```\n    npm run build # or yarn build\n```\n\nStart your backend server:\n \n```\n    node server\n```\n\n\u003e If you are confused about the backend server, refer to previous parts of this series\n\nAnd then serve the production build with:\n\n```\n    http-server build\n```\n\nWhen you go to the browser you get:\n\n![instagram-clone-stale-data](//images.ctfassets.net/1es3ne0caaid/5HHvxror84m2kmQEqC4guG/6d407da3d8965adf5900e9eb47e1ca22/instagram-clone-stale-data.png)\n\n\n\u003e It’s advised to test service workers in incognito/private mode so that your application behavior is not affected by previously installed service workers / caches\n\n\n## Conclusion\n\nIn this series, we have seen how to build a simple Instagram clone using react by using react, fetching dynamic data using GraphQL, adding realtime functionality using Pusher and making the application work offline with service workers. Feel free to leverage any of the concepts shared here in your web applications. Here’s a link to the [Github](https://github.com/christiannwamba/instagram-clone) repository if interested","metaTitle":"Build an Instagram clone — Part 4: Service workers","metaDescription":"Use React, Node and Pusher to build an Instagram clone. In part four,implement offline support with service workers."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1RAwp0Srr6qKOayCc8OQAa","type":"Entry","createdAt":"2018-04-30T12:48:42.775Z","updatedAt":"2018-04-30T16:41:03.503Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime Instagram clone — Part 3: Realtime feed updates with Pusher and desktop notifications","url":"instagram-clone-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/instagram-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2018-04-27","description":"This four-part series takes you through building an Instagram clone using Node and React. In part three, implement realtime feed updates with Pusher, and create desktop notifications.","prerequisite":"You should have completed the previous parts of the series.","content":"*This is part 3 of a 4 part tutorial. You can find part 1 [here](https://pusher.com/tutorials/instagram-clone-part-1), part 2 [here](https://pusher.com/tutorials/instagram-clone-part-2) and part 4 [here](https://pusher.com/tutorials/instagram-clone-part-4).*\n\nIn the [last part](https://pusher.com/tutorials/instagram-clone-part-2) of this series, we looked at how to connect the GraphQL server to our React Instagram clone allowing for dynamic posts to be viewed on the homepage. Now, to give users a seamless and fluid experience when interacting with the application, let’s add realtime functionality to it. This will update feeds as new posts are created and a notification system will also be put in place to allow for this. \n\nTo make this possible, [Pusher](https://pusher.com) is going to be integrated into the application to make it easier to bring realtime functionality without worrying about infrastructure.\n\n## Prerequisites\n- Should have read previous parts of the series\n- Basic knowledge of JavaScript\n- Node installed on your machine\n- NPM installed on your machine\n\n\n## Configure Pusher on the server\n\nTo get started with Pusher, create a [developer account](https://pusher.com/signup). Once you do this, [create your application](https://dashboard.pusher.com/#wizard-modal) and get your application keys. \n\n\n\u003e Note your application keys as you will need them later on in the article\n\n### Install the Node modules\nOnce you do that, you will need to install the Node modules needed for the application to work in the `server` directory of the application:\n\n```\n    npm install pusher connect-multiparty body-parser --save\n```\n\n- `pusher` to integrate realtime functionality\n- `body-parser` and `connect-multiparty` to handle incoming requests\n\n### Import the Node modules\nNow that the necessary modules have been installed, the next thing is to import them for use in the `server/server.js` file. Edit it to look like this:\n\n``` javascript\n    // server/server.js\n    [...]\n    \n    let Pusher = require(\"pusher\");\n    let bodyParser = require(\"body-parser\");\n    let Multipart = require(\"connect-multiparty\");\n    \n    [...]\n```\n\n### Configure the Pusher client\nYou will also need to configure your Pusher client to allow you to trigger events. To do this, add the following to the `server.js` file:\n\n``` javascript\n    // server/server.js\n    [...]\n    \n    let pusher = new Pusher({\n      appId: 'PUSHER_APP_ID',\n      key: 'PUSHER_APP_KEY',\n      secret: 'PUSHER_APP_SECRET',\n      cluster: 'PUSHER_CLUSTER',\n      encrypted: true\n    });\n    \n    // create express app\n    [...]\n```\n\n### Creating the endpoint for storing new posts\nTo simulate the effect of creating a new post, a new endpoint is added to the application as follows:\n\n``` javascript\n    // server/server.js\n    \n    // add Middleware\n    let multipartMiddleware = new Multipart();\n    \n    // trigger add a new post \n    app.post('/newpost', multipartMiddleware, (req,res) =\u003e {\n      // create a sample post\n      let post = {\n        user : {\n          nickname : req.body.name,\n          avatar : req.body.avatar\n        },\n        image : req.body.image,\n        caption : req.body.caption\n      }\n      \n      // trigger pusher event \n      pusher.trigger(\"posts-channel\", \"new-post\", { \n        post \n      });\n    \n      return res.json({status : \"Post created\"});\n    });\n    \n    // set application port\n    [...]\n```\n\nWhen a post request is made to the `/post` route, the data submitted is then used to construct a new post and then the  `new-post` event is triggered in the `post-channel` and a response is sent to the client making the request.\n\n## Configure Pusher on the client\n\nNow that the server has been configured, the next thing that needs to be done is to get Pusher working in our React application. To do this, let’s install the JavaScript Pusher module in the root of the `instagram-clone` directory:\n\n```\n    npm install pusher-js\n```\n\n### Set up the Pusher client\nNow that the module is installed, the Pusher module needs to be used. Edit the `src/App.js` like this:\n\n``` javascript\n    // src/App.js\n    \n    import React, {Component} from 'react';\n    [...]\n    // import pusher module\n    import Pusher from 'pusher-js';\n    \n    // set up graphql client\n    [...]\n    \n    // create component\n    class App extends Component{\n      constructor(){\n        super();\n        // connect to pusher\n        this.pusher = new Pusher(\"PUSHER_APP_KEY\", {\n         cluster: 'eu',\n         encrypted: true\n        });\n      }\n    \n      render(){\n        return (\n          \u003cApolloProvider client={client}\u003e\n            \u003cdiv className=\"App\"\u003e\n              \u003cHeader /\u003e\n              \u003csection className=\"App-main\"\u003e\n                {/* pass the pusher object and apollo to the posts component */}\n                \u003cPosts pusher={this.pusher} apollo_client={client}/\u003e\n              \u003c/section\u003e\n            \u003c/div\u003e\n          \u003c/ApolloProvider\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nNotice that in the snippet above, `pusher` and `apollo_client` are passed as properties for the `Posts` component.\n\nLet’s examine the Posts component.\n\n``` javascript\n    // src/components/Posts/index.js\n    \n    import React, {Component} from \"react\";\n    import \"./Posts.css\";\n    import gql from \"graphql-tag\";\n    import Post from \"../Post\";\n    \n    class Posts extends Component{\n      constructor(){\n        super();\n        this.state = {\n          posts : []\n        }\n      }\n      [...]\n```\n\nIn the constructor of the Posts component an array of posts is added to the state of the component.\n\nThen, we use the lifecycle function `componentDidMount()` to make a query to fetch the existing posts from the server and then set the posts.\n\n``` javascript\n    // src/components/Posts/index.js\n    [...]\n    \n    componentDidMount(){\n        // fetch the initial posts \n        this.props.apollo_client\n          .query({ \n            query:gql`\n              {\n                posts(user_id: \"a\"){\n                  id\n                  user{\n                    nickname\n                    avatar\n                  }\n                  image\n                  caption\n                }\n              } \n            `})\n          .then(response =\u003e {\n            this.setState({ posts: response.data.posts});\n          });\n          [...]\n```\n\n### Subscribe to realtime updates\nNext thing is to subscribe the component to the `posts-channel` and then listen for `new-post` events:\n\n``` javascript\n    // src/components/Posts/index.js\n          [...]\n          //  subscribe to posts channel\n        this.posts_channel = this.props.pusher.subscribe('posts-channel');\n    \n        // listen for a new post\n        this.posts_channel.bind(\"new-post\", data =\u003e {\n            this.setState({ posts: this.state.posts.concat(data.post) });\n          }, this);\n      }\n      [...]\n```\n\n### Displaying posts\nAfterwards, use the `render()` function to map the `posts` to the `Post` component like this:\n\n``` javascript\n    // src/components/Posts/index.js\n      [...]\n       render(){\n        return (\n          \u003cdiv className=\"Posts\"\u003e\n            {this.state.posts.map(post =\u003e \u003cPost nickname={post.user.nickname} avatar={post.user.avatar} image={post.image} caption={post.caption} key={post.id}/\u003e)}\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default Posts;\n```\n\nNow, you can go ahead and start your backend server `node server` and your frontend server `npm start`. When you navigate to `locahost:3000/` you get the following:\n\n![instagram-clone-post-creation-feed](//images.ctfassets.net/1es3ne0caaid/1oaET2U8Hyqc066Auq2Gu8/235f7e3dafcf6c1dab02e42485cae6b9/instagram-clone-post-creation-feed.gif)\n\n## Enable desktop notifications for new posts\n\nNow, sometimes users have tabs of applications open but aren’t using them. I’m sure as you’re reading this, you likely have more than one tab open in your web browser - if you’re special, you have \u003e 10. To keep the users engaged, the concepts of notifications was introduced. Developers can now send messages to users based on interaction with the application. Let’s leverage this to keep users notified when a new post has been created. \n\n### Checking if notifications are enabled in the browser\nSince this feature is fairly new, not all users of your application may have the notification feature on their browser. You need to make a check to see if notifications are enabled. To do this, tweak the `src/App.js` as follows:\n\n``` javascript\n    // src/App.js\n    \n    class App extends Component{\n      [...]\n    \n      componentDidMount(){\n        if ('actions' in Notification.prototype) {\n          alert('You can enjoy the notification feature');\n        } else {\n          alert('Sorry notifications are NOT supported on your browser');\n        }\n      }\n      \n      [...]\n    }\n    export default App;\n```\n\n### Requesting permissions\nTo get started, the first thing you will need to do is to get permission from the user to display notifications. This is put in place so that developers don’t misuse the privilege and begin to spam their users. Edit the `src/components/Posts/index.js` file as follows :\n\n``` javascript\n    // src/components/Posts/index.js\n    \n    [...]\n    \n    class Posts extends Components{\n      [...]\n      \n      componentDidMount(){\n          // request permission\n          Notification.requestPermission();\n        [...]\n```\n\nThe next thing that needs to be done is to now display the notification to the user when an event is met. This is done by tweaking the `this.posts_channel.bind()` function :\n\n``` javascript\n    // src/components/Posts/index.js\n        \n        [...]\n          //  subscribe to posts channel\n          this.posts_channel = this.props.pusher.subscribe(\"posts-channel\");\n          \n          this.posts_channel.bind(\"new-post\", data =\u003e {\n            // update states\n            this.setState({ posts: this.state.posts.concat(data.post) });\n            \n            // check if notifcations are permitted\n            if(Notification.permission === 'granted' ){\n              try{\n                // notify user of new post\n                new Notification('Pusher Instagram Clone',{ body: `New post from ${data.post.user.nickname}`});\n              }catch(e){\n                console.log('Error displaying notification');\n              }\n            }\n          }, this);\n        }\n        \n        render() {\n        return (\n          \u003cdiv\u003e\n            \u003cdiv className=\"Posts\"\u003e\n              {this.state.posts\n                .slice(0)\n                .reverse()\n                .map(post =\u003e (\n                  \u003cPost\n                    nickname={post.user.nickname}\n                    avatar={post.user.avatar}\n                    image={post.image}\n                    caption={post.caption}\n                    key={post.id}\n                  /\u003e\n                ))}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default Posts\n```\n\nNow, when you reload your application and head over to `localhost:3000/` and you get this: \n\n![instagram-clone-permission-browser](//images.ctfassets.net/1es3ne0caaid/luRPg9gZMs0OMI0CWYgmA/e41aad138d992acd5f0a3280d6151a71/instagram-clone-permission-browser.png)\n\n## Interacting with notifications\n\nTo add extra functionality, the notification could further be tweaked to allow users to interact with them. To do this, edit the `Notification` object like this:\n\n``` javascript\n    // src/components/Posts/index.js\n    \n    // check for notifications \n    if(Notification.permission === 'granted' ){\n      try{\n        // notify user of new post\n        let notification = new Notification(\n          'Pusher Instagram Clone',\n          { \n            body: `New post from ${data.post.user.nickname}`,\n            icon: 'https://img.stackshare.io/service/115/Pusher_logo.png',\n            image: `${data.post.image}`,\n          }\n        );\n        // open the website when the notification is clicked\n        notification.onclick = function(event){\n          window.open('http://localhost:3000','_blank');\n        }\n      }catch(e){\n        console.log('Error displaying notification');\n      }\n    }\n```\n\nWhen another user creates a new post, you then get a display that looks like this: \n\n![instagram-clone-notification](//images.ctfassets.net/1es3ne0caaid/t0FTrRsvE4oKC0QqEUsSQ/721ee430e7873b8a3002dab87f60b151/instagram-clone-notification.png)\n\nWhen the user clicks on the notification, they are directed to view the full post.\n\n## Conclusion\n\nIn this part of the series, we looked at how to incorporate realtime functionality into the `instagram-clone` application and also saw how to notify users when someone creates new posts using desktop notifications. In the [next](https://pusher.com/tutorials/instagram-clone-part-4) part of the series, we will see how to take our application offline using service workers. Here’s a link to the full [Github](https://github.com/christiannwamba/instagram-clone) repository if interested.","metaTitle":"Build an Instagram clone — Part 3: Feeds and notifications","metaDescription":"Use React, Node and Pusher to build an Instagram clone. In part three,implement realtime feed updates with Pusher, and create desktop notifications."}}],"defaultValue":"Channels \u0026 Social","queryType":"tag","pages":8,"route":"/tutorials","query":{"product":"Channels","tag":"Social","page":"5"}}},"page":"/tutorials","query":{"product":"Channels","tag":"Social","page":"5"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Social&page=5 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:51 GMT -->
</html>