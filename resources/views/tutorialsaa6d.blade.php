<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Angular&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:40:46 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">28</span> tutorials for “<span class="css-npldjc ehwuahf2">Angular</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsf93c.html?product=Channels&amp;tag=Angular" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialsca23.html?product=Beams&amp;tag=Angular" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Angular"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/data-visualization-angular.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a data visualization using Angular and Chart.js</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Build a live poll of user ages, with Angular, Node, Express and Chart.js.</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/angular-chat-sentiment-analysis.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Emoji suggestions in an Angular chat application using sentiment analysis</h3><p class="css-k12xad e5jrto45">Build a chat app in Angular. The app features emoji suggestions (as suggested responses) based on the users&#x27; moods. The ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-sentiment-analysis-angular.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Live comments and ratings using sentiment analysis and Angular</h3><p class="css-k12xad e5jrto45">Learn to build a live comments application using Angular, featuring sentiment analysis. Use the sentiment analysis to me...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-table-angular.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime table with Angular</h3><p class="css-k12xad e5jrto45">Create an Angular web app featuring a table interface that updates in realtime to reflect changes in the database.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-poll-angular.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime poll using Angular</h3><p class="css-k12xad e5jrto45">Build a polling application in Angular. Use Chart.js to visualize voting results in realtime.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/angular-realtime.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">TypeScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Making Angular 5 realtime with WebSockets</h3><p class="css-k12xad e5jrto45">Build an app with realtime features in Angular 5 and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/game-angular.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Multiplayer Game<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Angular</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a battleship game with Angular</h3><p class="css-k12xad e5jrto45">Build an online Battleship game with Angular and use Pusher&#x27;s realtime API to enable two players to play against each ot...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-feed-angular.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">TypeScript</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo feed using Angular</h3><p class="css-k12xad e5jrto45">Build a photo feed that will display any images it receives in realtime.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-map-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime map with Laravel</h3><p class="css-k12xad e5jrto45">Build a realtime map using Laravel and keep it updated live with new coordinates. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials595b.html?tag=Angular&amp;page=2" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials6eb0.html?tag=Angular&amp;page=1" class="css-5s6711 edg0byb1">1</a><a href="tutorials595b.html?tag=Angular&amp;page=2" class="css-5s6711 edg0byb1">2</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsaa6d.html?tag=Angular&amp;page=3" class="css-2wakph edg0byb1">3</a><a href="tutorials970c.html?tag=Angular&amp;page=4" class="css-5s6711 edg0byb1">4</a><a href="tutorials970c.html?tag=Angular&amp;page=4" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":28,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5qEUPHIZVeWEQqQUECSoIe","type":"Entry","createdAt":"2018-05-14T09:35:22.610Z","updatedAt":"2018-05-14T09:35:22.610Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a data visualization using Angular and Chart.js","url":"data-visualization-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/angular-demographics","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}}],"reviewDate":"2018-05-13","description":"Build a live poll of user ages, with Angular, Node, Express and Chart.js.","prerequisite":"A basic understanding of Angular and Node is required. You will need to have Node and npm installed on your machine.","content":"\u003e **Data visualization** is viewed by many disciplines as a modern equivalent of visual communication. It involves the creation and study of the visual representation of data. - [Wikipedia](https://en.wikipedia.org/wiki/Data_visualization)\n\n An important advantage of data visualization is how it enables users to more effectively see connections as they are occurring between operating conditions and business performance. Adding realtime functionality using [Pusher](https://pusher.com) improves this experience as data changes are witnessed in realtime.\n\nUsing [Angular](https://angular.io) you can extend the template language with your own components and use a wide array of existing components. \n\nTo follow this tutorial a basic understanding of Angular and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nIf you have no prior knowledge of Angular, kindly follow the tutorial [here](https://angular.io/tutorial). Come back and finish the tutorial when you’re done.\n\nWe’ll be using these tools to build our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Angular](https://angular.io)\n- [Chart.js](http://www.chartjs.org/)\n\nWe’ll be creating an application that will present data about the age demographics of a given population. Using our application, users will complete a poll and then see the data from the polls in realtime.\n\nHere’s a screenshot of the final product:\n\n![angular-data-visualization-preview](//images.ctfassets.net/1es3ne0caaid/2pLq90Q6FKCoIM640YKww8/ce513a337fbfcb2e2dbb55bb1daa30d2/angular-data-visualization-preview.png)\n\n## Initializing application and installing dependencies\n\nTo get started, we will use the [CLI](https://cli.angular.io/) (command line interface) provided by the Angular team to initialize our project.\n\nFirst, install the CLI by running `npm install -g @angular/cli`. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/en/) installed.\n\nTo create a new Angular project using the CLI, open a terminal and run:  \n`ng new angular-data-visualization --style=scss`\n\nThis command is used to initialize a new Angular project; the project will make use of SCSS for styling.\n\nNext run the following command in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher\n    \n    // front-end dependencies\n    npm install chart.js ng2-charts pusher-js\n```\nStart the Angular development server by running `ng serve` in a terminal in the root folder of your project.\n\n## Building our server\n\nWe’ll build our server using [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/).\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: 'eu',\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nThe calls to our endpoint will be coming in from a different origin. Therefore, we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nThis is a standard Node application configuration, nothing specific to our app.\n\nCreate a Pusher account and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`. Create a file in the root folder of the project and name it `.env`. Copy the the following snippet into the `.env` file and ensure to replace the placeholder values with your Pusher credentials.\n\n```\n    // .env\n    \n    // Replace the placeholder values with your actual pusher credentials\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n```\nWe’ll make use of the `dotenv` library to load the variables contained in the `.env` file into the Node environment. The `dotenv` library should be initalized as early as possible in the application.\n\n### Send votes\n\nTo let users send requests to the server, we’ll create a route to handle incoming requests. Update your `server.js`  file with the code below. \n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      ...\n    });\n    \n    \n    app.post('/vote', (req, res) =\u003e {\n      const {body} = req;\n      const data = {\n        ...body,\n        // set the selected property of the body to true\n        selected: true,\n      };\n      // trigger a new-entry event on the vote-channel\n      pusher.trigger('vote-channel', 'new-entry', data);\n      res.json(data);\n    });\n    \n     ...\n```\n\n- We added a POST route(`/vote`) to handle incoming requests.\n- Using [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment), we got the body of the request.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`vote-channel`), an event name (`new-entry`), and a payload.\n- The payload being sent contains the body of the request sent in. The `selected` property of the payload is set to `true`.\n\n\n## Home view\n\nThe home view of the project will house both the polling area and the area where the data is visualized. Both views will appear side by side.\n\nOpen the `app.component.html` file and replace it with the content below.\n\n``` html\n    // app.component.html\n    \n    \u003cdiv class=\"main\"\u003e\n      \u003cdiv class=\"section census\"\u003e\n        \u003ch4\u003eAge Demographics\u003c/h4\u003e\n        \u003cp\u003eSelect your age range\u003c/p\u003e\n    \n        \u003cdiv class=\"option-list\"\u003e\n          \u003cbutton class=\"option\" *ngFor=\"let option of options; index as i\" (click)=\"takeVote(i)\" [ngClass]=\"{selected: option.selected}\"\n          \n                  [disabled]=\"selectedOption \u0026\u0026 selectedOption !== option.value\"\u003e\n            \u003ci class=\"fas fa-check\" *ngIf=\"option.selected\"\u003e\u003c/i\u003e\n            {{option.label}}\n          \u003c/button\u003e\n        \u003c/div\u003e\n        \u003cp class=\"error\"\u003e{{message}}\u003c/p\u003e\n      \u003c/div\u003e\n    \n      \u003cdiv class=\"section data\"\u003e\n        \u003c!-- Include the chart component here --\u003e\n      \u003c/div\u003e\n    \n    \u003c/div\u003e\n```    \n\n\n- In the code snippet above, we looped through `options` to create a view based on the player’s information. \n- The `takeVote` method will make use of the `HttpClient`  to send the user’s selection as a request to the server.\n- We append a `selected` class if the `option`'s selected property is true.\n- Options are disabled if the current `selectedOption` isn’t equal to the option’s `value`.\n\nVariables used will be defined in the component’s Typescript file.\n\n### Styling\n\n``` scss\n    // app.component.scss\n    \n    $buttonShadow: #ca6eca + 120;\n    .main {\n      display: flex;\n      padding-top: 5%;\n      .section {\n        padding: 20px;\n      }\n      .section.census {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      }\n      .data{\n        flex: 2;\n      }\n    }\n    p.error{\n      font-size: 13px;\n      color: red + 100;\n      margin: 5px 0;\n    }\n    h4 {\n      margin-bottom: 8px;\n      font-size: 13px;\n      text-transform: uppercase;\n      color: #ca6eca;\n      font-weight: bold;\n      letter-spacing: 0.4px;\n    }\n    p {\n      margin: 5px 0;\n    }\n    div.option-list {\n      padding-left: 0;\n      width: 200px;\n      display: flex;\n      flex-direction: column;\n      button.option {\n        padding: 15px;\n        box-shadow: 0 2px 4px 0 $buttonShadow;\n        margin: 7px 0;\n        background: #ca6eca;\n        color: white;\n        border-radius: 5px;\n        cursor: pointer;\n        font-size: 12px;\n        text-transform: uppercase;\n        font-weight: bold;\n        .fas {\n          font-size: 1.2em;\n          margin-right: 10px;\n        }\n      }\n      button[disabled] {\n        background: #ca6eca;\n        box-shadow: none;\n        cursor: default;\n      }\n      button.selected {\n        background: #ca6eca + 50;\n      }\n      button:focus {\n        background: #ca6eca + 50;\n        outline: none;\n      }\n    }\n```    \n    \n\nThese styles are meant to add a bit of life to our application. It also helps distinguish between states during application use. \n\nAlso, we’ll be using the FontAwesome icon set for our project and the Roboto font. Include a link to their respective stylesheets in the `index.html`  file.\n\n``` html\n    // index.html\n    \n    \u003chead\u003e\n      ...\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n      \u003clink href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700\" rel=\"stylesheet\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.0.12/css/all.css\" integrity=\"sha384-G0fIWCsCzJIMAVNQPfjH08cyYaUtMwjJwqiRKxxE/rx96Uroj1BtIQ6MLJuheaO9\" crossorigin=\"anonymous\"\u003e\n      ...\n    \u003c/head\u003e\n    ...\n```      \n\nThen we’ll select Roboto as our default font family. Open the `styles.scss` file and update it with the following content: \n\n``` scss\n    // styles.scss\n    \n    body{\n      font-family: 'Roboto', sans-serif;\n    }\n```    \n\n### App component\n\nIn the html snippet, we made reference to some variables that weren’t yet defined, we’ll create the variables here with the logic behind our application. \n\n``` typescript\n    // app.component.ts\n    \n    import {Component, OnInit} from '@angular/core';\n    import {HttpClient} from '@angular/common/http';\n    export interface Option {\n      label: string;\n      selected: boolean;\n      value: string;\n    }\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.scss']\n    })\n    export class AppComponent implements OnInit {\n      constructor(private http: HttpClient) {\n      }\n      selectedOption = null;\n      message: string = '';\n      options: Option[] = [\n        {\n          label: '14 - 25',\n          selected: false,\n          value: '14-25'\n        },\n        {\n          label: '25 - 35', \n          selected: false, \n          value: '25-35'\n        },\n        {\n          label: '35 - 45',\n          selected: false,\n          value: '35-45'\n        },\n        {\n          label: '45 - 60',\n          selected: false,\n          value: '45-60'\n        },\n        {\n          label: '60 and above', \n          selected: false, \n          value: '60+'\n        }\n      ];\n      censusData = {\n        '14-25': 0,\n        '25-35': 0,\n        '35-45': 0,\n        '45-60': 0,\n        '60+': 0\n      };\n      takeVote(index) {\n        const selectedOption = this.options[index];\n        if (!selectedOption.selected) {\n          this.http\n            .post('http://localhost:4000/vote', selectedOption)\n            .subscribe((res: Option) =\u003e {\n              const options = this.options.map(\n                (option, i) =\u003e (index === i ? { ...res } : { ...option })\n              );\n              this.options = [...options];\n              this.selectedOption = res.value;\n            });\n        }\n        else{\n          this.message = \"You've already placed a vote\";\n        }\n      }\n      onNewEntry(data) {\n        this.censusData[data.value] += 1;\n      }\n      ngOnInit() {\n      }\n    }\n```\n\n- `takeVote`: this method makes use of the native HttpClient service to make requests to our server. A request is sent, only if the user hasn’t made a previous selection. When a response is returned, it loops through the available `options` and replaces the selected option with the data returned from the request. The `selectedOption` property is then set to the value of the response.\n\n\n- `censusData`:  this will be used when we create the charts view. \n\n\n- `onNewEntry`: this method will be used to update the `censusData` whenever there’s a new Pusher event. We’ll use this method after we’ve created the chart component.\n\nTo make use of the HttpClient service, we’ll need to import the `HttpClientModule` into the `app.module.ts` file. Update your app module file as follows:\n\n``` typescript\n    // app.module.ts\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule } from '@angular/core';\n    import { AppComponent } from './app.component';\n    import {HttpClientModule} from '@angular/common/http';\n    \n    ....\n    @NgModule({\n      declarations: [AppComponent],\n      imports: [BrowserModule, HttpClientModule],\n      providers: [],\n      bootstrap: [AppComponent],\n    })\n      ....\n```\n\nLet’s check how our application looks at this point. Make sure the server(`node server`) and Angular’s dev server(`ng serve`) are both running.\n\n![angular-data-visualization-stage-1](//images.ctfassets.net/1es3ne0caaid/5ghTCbycXYE4UY4wAQsAEq/09fc04236c8afaa93e808aaf73d42801/angular-data-visualization-stage-1.png)\n\n## Introducing Pusher\n\nSo far we have an application that allows users be a part of the polling process but data updates aren’t happening in realtime.  Let’s create a service that will make it easier to include Pusher in our components.\n\nTo make the pusher library available in our project, add the library as a third party script to be loaded by Angular CLI. All CLI config is stored in `.angular-cli.json` file. Modify the `scripts` property to include the link to `pusher.min.js`.\n\n``` json\n    // .angular-cli.json\n    ...\n    \"scripts\": [\n      \"../node_modules/pusher-js/dist/web/pusher.min.js\",\n    ]\n     ...\n```          \n\nAfter updating this file, you’ll need to restart the angular server so that the CLI compiles the new script files added.\n\nNow we’ll create a Pusher service to be used application wide. The Angular CLI can aid in the service creation.  Open a terminal in your project’s root folder and run the following command.\n\n```\nng generate service pusher\n```\n\nThis command simply tells the CLI to generate a service named `pusher`. Now open the `pusher.service.ts` file and update it with the code below.\n\n``` typescript\n    // pusher.service.ts\n    import { Injectable } from '@angular/core';\n    declare const Pusher: any;\n    \n    @Injectable()\n    export class PusherService {\n      constructor() {\n        const pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'eu',\n        });\n        this.channel = pusher.subscribe('vote-channel');\n      }\n      channel;\n      public init() {\n        return this.channel;\n      }\n    }\n```\n\n- First, we initialize Pusher in the constructor. \n- The  `init` method returns the Pusher property we created. \n\n\n\u003e **Note**: ensure you replace the `PUSHER_KEY` string with your actual Pusher key.\n  \n\nTo make the service available application wide, import it into the `app.module.ts` file.\n\n``` typescript\n    // app.module.ts\n    import {PusherService} from './pusher.service'\n    ...\n    \n    @NgModule({\n       ....\n       providers: [PusherService],\n       ....\n     })\n```\n \n\n## Charts component\n\nTo visualize the data in our application, we’ll be making use of [Chart.js](http://www.chartjs.org/) to create charts and present the data in a graphical format. Let’s create the charts component using the CLI by running the following command:\n\n```\n    ng generate component charts\n```\nOpen the `charts.component.html` file and update it with the contents below:\n\n``` html\n    // charts.component.html\n    \n    \u003cdiv\u003e\n      \u003ccanvas baseChart [chartType]=\"chartType\" [labels]=\"chartLabels\" [data]=\"chartData\"\u003e\n      \u003c/canvas\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"stats\"\u003e\n      \u003cdiv class=\"stat\"\u003e\n        \u003cdiv class=\"header\"\u003e\n          \u003cp\u003eTotal Pop.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"body\"\u003e\u003ch4\u003e{{totalPopulation}}\u003c/h4\u003e\u003c/div\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"stat\"\u003e\n        \u003cdiv class=\"header\"\u003e\n          \u003cp\u003ePop. under 35\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"body\"\u003e\n          \u003ch4\u003e{{under35 || 0}}\u003c/h4\u003e\n          \u003cspan class=\"percent\"\u003e%\u003c/span\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"stat\"\u003e\n        \u003cdiv class=\"header\"\u003e\n          \u003cp\u003ePop. between 35 and 60\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"body\"\u003e\n          \u003ch4\u003e{{between35and60 || 0}}\u003c/h4\u003e\n          \u003cspan class=\"percent\"\u003e%\u003c/span\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"stat\"\u003e\n        \u003cdiv class=\"header\"\u003e\n          \u003cp\u003ePop. above 60\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"body\"\u003e\n          \u003ch4\u003e{{above60 || 0}}\u003c/h4\u003e\n          \u003cspan class=\"percent\"\u003e%\u003c/span\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\nStyle up the component by adding the following styles to the `charts.component.scss` file:\n\n``` scss\n    // charts.component.scss\n    \n    .stats {\n      display: flex;\n      margin-top: 30px;\n      .stat {\n        flex: 1;\n        box-shadow: 0 2px 4px 0 rgba(0,0,0,0.10);\n        margin: 0 15px;\n        background: rgba(0, 0, 0, 0.05);\n        .header {\n          background: white;\n          padding: 10px 5px;\n          p {\n            font-size: 12px;\n            margin: 0;\n            font-weight: bold;\n            text-transform: uppercase;\n            letter-spacing: -.4px;\n            text-align: center;\n            opacity: .7;\n          }\n        }\n        .body {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          padding: 15px;\n          h4 {\n            text-align: center;\n            font-size: 30px;\n            font-weight: 300;\n            opacity: 0.8;\n          }\n          .percent{\n            font-size: 32px;\n          }\n        }\n      }\n    }\n```\n\n\nAdd the following content to the `charts.component.ts` file:\n\n``` typescript\n    // charts.component.ts\n    \n    import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n    import {PusherService} from '../pusher.service';\n    import {Option} from '../app.component';\n    @Component({\n      selector: 'app-charts',\n      templateUrl: './charts.component.html',\n      styleUrls: ['./charts.component.scss']\n    })\n    export class ChartsComponent implements OnInit {\n      constructor(private pusher: PusherService) {\n      }\n      @Input() censusData = {};\n      @Output() newEntry: EventEmitter\u003cOption\u003e = new EventEmitter();\n      chartType = 'pie';\n      chartData = [];\n      chartLabels = [];\n      totalPopulation = 0;\n      under35 = 0;\n      between35and60 = 0;\n      above60 = 0;\n      \n      computeData() {\n        this.chartData = Object.values(this.censusData);\n        this.chartLabels = Object.keys(this.censusData);\n        this.totalPopulation = this.getTotalPopulation();\n        this.under35 = Math.round(this.getPopulationUnder35());\n        this.between35and60 = Math.round(this.getPopulationBetween35and60());\n        this.above60 = Math.round(this.getPopulationAbove60());\n      }\n      \n      getTotalPopulation() {\n        const values: number[] = Object.values(this.censusData);\n        return values.reduce((defaultValue, val) =\u003e defaultValue + val, 0);\n      }\n      \n      getPopulationUnder35() {\n        const total = this.getTotalPopulation();\n        const populationUnder35 = Object.keys(this.censusData).reduce(\n          (initVal, val) =\u003e {\n            if (val === '14-25' || val === '25-35') {\n              return initVal + this.censusData[val];\n            }\n            return initVal;\n          },\n          0\n        );\n        return populationUnder35 / total * 100;\n      }\n      \n      getPopulationBetween35and60() {\n        const total = this.getTotalPopulation();\n        const populationBetween35and60 = Object.keys(this.censusData).reduce(\n          (initVal, val) =\u003e {\n            if (val === '35-45' || val === '45-60') {\n              return initVal + this.censusData[val];\n            }\n            return initVal;\n          },\n          0\n        );\n        return populationBetween35and60 / total * 100;\n      }\n      \n      getPopulationAbove60() {\n        const total = this.getTotalPopulation();\n        const above60 = Object.keys(this.censusData).reduce((initVal, val) =\u003e {\n          if (val === '60+') {\n            return initVal + this.censusData[val];\n          }\n          return initVal;\n        }, 0);\n        return above60 / total * 100;\n      }\n      \n      ngOnInit() {\n        this.computeData();\n        const channel = this.pusher.init();\n        channel.bind('new-entry', (data: Option) =\u003e {\n          this.newEntry.emit(data);\n          this.computeData();\n        });\n      }\n    }\n```\n\n\nWe’ve defined a few methods for computing the data to be used in the view:\n\n- `getPopulation`: this method maps the values to an array and gets the total amount of people that took part in the polls.\n\n\n- `getPopulationUnder35`: this method checks for the percentage of the people under the age of 35 taking part in the polls.\n\n\n- `getPopulationBetween35and60`: in this method, we loop through the data and check for the percentage of users between the age of 35 and 60.\n\n\n- `getPopulationAbove60`: using this method we get the percentage of people over the age of 60.\n\n\n- Finally, in the `computeData` method, we run the different methods to get the required data for the view.\n\n\n- In the `ngOnInit` lifecycle, we call the `computeData` method. Also, we listen for the `new-entry`  event on the Pusher channel.\n\nTo make use of the `ng2-charts` package, we’ll have to import the `ChartsModule` into our module file. Also, we’ll have to load the `chart.js` into our application by including it into the `.angular-cli.json` file.\n\nUpdate the `app.module.ts` file like so:\n\n``` typescript\n    // app.module.ts\n    ...\n    import { ChartsComponent } from './charts/charts.component';\n    import {ChartsModule} from 'ng2-charts';\n    \n    @NgModule({\n      declarations: [\n        ...\n      ],\n      imports: [\n        BrowserModule,\n        HttpClientModule,\n        ChartsModule\n      ],\n      ...\n    })\n    ...\n```\nInclude the `chart.js` file in the `.angular-cli.json` file. Update the CLI file like so:\n\n``` json\n     // .angular-cli.json\n     ...\n      \"scripts\": [\n        \"../node_modules/pusher-js/dist/web/pusher.min.js\",\n        \"../node_modules/chart.js/dist/Chart.min.js\"\n      ],\n    ...\n```\n\nUpdate the `app.component.html` file to include the Charts component. \n\n``` html\n    // app.component.html\n    \u003cdiv class=\"main\"\u003e\n      \u003cdiv class=\"section census\"\n        ...\n      \u003c/div\u003e\n      \n      \u003cdiv class=\"section data\"\u003e\n        // include the charts component here\n        \u003capp-charts [censusData]=\"censusData\" (newEntry)=\"onNewEntry($event)\"\u003e\n        \u003c/app-charts\u003e\n      \u003c/div\n```\n\n\n At this point, your application should have realtime updates when votes are placed. Ensure that the server is running alongside the Angular development server. If not, run `node server` and `ng serve` in two separate terminals. Both terminals should be opened in the root folder of your project.\n \n![angular-data-visualization-preview](//images.ctfassets.net/1es3ne0caaid/2pLq90Q6FKCoIM640YKww8/ce513a337fbfcb2e2dbb55bb1daa30d2/angular-data-visualization-preview.png)\n\n \nTo test the realtime functionality of the application, open two browsers side-by-side and engage the application. Data updates should be in realtime.\n\n\n## Conclusion\n\nUsing Pusher,  we’ve built out an application using the pub/sub pattern to recieve realtime updates. With the help of Chart.js, our data was well presented using charts. You can check out the repo containing the demo on [GitHub](https://github.com/christiannwamba/angular-demographics).","metaTitle":"Build a data visualization using Angular and Chart.js","metaDescription":"This tutorial will guide you through building a simple web app with Angular, Node, Express and Chart.js. The app polls user ages and displays the results in a live graph."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1zpEddTbRC2AQEoAyCqGie","type":"Entry","createdAt":"2018-05-14T09:36:28.189Z","updatedAt":"2018-05-14T09:36:28.189Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Emoji suggestions in an Angular chat application using sentiment analysis","url":"angular-chat-sentiment-analysis","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/angular-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-05-09","description":"Build a chat app in Angular. The app features emoji suggestions (as suggested responses) based on the users' moods. The mood is evaluated using the sentiment analysis library.","prerequisite":"You should have Node and npm installed on your machine. A basic understanding of Angular and Node is required.","content":"## Introduction\n\nSentiment analysis is the process of computationally identifying and categorizing opinions expressed in a piece of text, especially to determine whether the writer's attitude towards a particular topic, product, etc. is positive, negative, or neutral. Using sentiment analysis, we can suggest emojis to be used as replies to messages based on the context of the received message. \n\nUsing [Angular](https://angular.io), you can extend the template language with your components and use a wide array of existing components, and with [Pusher](https://pusher.com) we can enable realtime messaging in the chat using pusher’s pub/sub pattern. \n\nWe’ll be building a realtime chat application using Pusher, Angular and the [sentiment](https://github.com/thisandagain/sentiment) library for emoji suggestions based on the context of messages received.\n\nUsing our application users can get emoji suggestions as replies to received messages while engaging in a chat with a third party\n\nHere’s a demo of the final product:\n\n![emoji-suggestions-angular-demo](//images.ctfassets.net/1es3ne0caaid/331wY6ohiMCQqOcGacagG4/3e191b7b6fc94acbfa2a59bafd519263/emoji-suggestions-angular-demo.gif)\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of Angular and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nWe’ll be using these tools to build out our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Angular](https://angular.io)\n- [Sentiment](https://github.com/thisandagain/sentiment)\n\nWe’ll be sending messages to the server and using [Pusher’s](https://pusher.com) pub/sub pattern, we’ll listen to and receive messages in realtime. To make use of Pusher you’ll have to create an account [here](https://pusher.com). \n\nAfter account creation, visit the dashboard. Click **Create new Channels app**, fill out the details, click **Create my app**, and make a note of the details on the **App Keys** tab.\n\n\nLet’s build!\n\n## Setup and folder structure\n\nUsing the Angular [CLI](https://cli.angular.io/) (command line interface) provided by the Angular team, we’ll initialize our project. To initialize the project, first, install the CLI by running `npm install @angular/cli` in your terminal. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/) installed.\n\nTo create a new Angular project using the CLI, open a terminal and run:   \n```\n    ng new angular-pusher-chat --style=scss\n```\nThe command is simply telling the CLI to create a new project called `angular-pusher-chat` and it should make use of the CSS pre-processor SCSS rather than CSS for styling.\n\nOpen the newly created folder `angular-pusher-chat`, and your folder structure should look something like this:\n\n```\n    angular-pusher-chat/\n      e2e/\n      node_modules/\n      src/\n        app/\n          app.component.html\n          app.component.ts\n          app.component.css\n          ...\n```\nOpen a terminal inside the project folder and start the application by running `ng serve` or `npm start`. If you open your browser and visit the link `http://localhost:4200` you should see the screenshot below if everything went well.\n\n![tables-angular-welcome-screen](//images.ctfassets.net/1es3ne0caaid/7Cw6E4WHFmaOogyKkK0MA/a660fc968171c614fd566c33c5e00d7d/tables-angular-welcome-screen.png)\n\n##  Building our server\n\nNow that we have our Angular application running, let’s build out a basic part of our server.\n\nTo do this we’ll need to install [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/). We’ll use this to receive requests from our Angular application.\n\nTo install express, run `npm install express` in a terminal in the root folder of your project.\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```\n\nWe referenced three packages that haven’t been installed, `body-parser`, `pusher` and `dotenv`. Install these packages by running the following command in your terminal.\n\n```\n    npm i body-parser pusher dotenv\n```\n\n-  body-parser is a package used to parse incoming request bodies in a middleware before your handlers, available under the `req.body` property.\n- dotenv is a zero-dependency module that loads environment variables from a `.env` file into [process.env](https://nodejs.org/docs/latest/api/process.html#process_process_env). This package is used so sensitive information like the `appId` and `secret` aren’t added to our codebase directly. \n- The dotenv package will load the variables provided in our `.env` file into our environment.\n- CORS: The calls to our endpoint will be coming in from a different origin, therefore we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nIf you noticed, I added the `dotenv` package at the start of our file. This is because we need to load the variables as early as possible to make them available throughout the application.\n\nAlso, you’ll notice that we installed [Pusher](https://pusher.com) library as a dependency. Follow the steps above to create a Pusher account if you haven’t done so already\n\nLet’s create a `.env` file to load the variables we’ll be needing into the Node environment. Create the file in the root folder of your project and update it with the code below.\n\n```\n    // .env\n    \n    PUSHER_APP_ID=\u003cAPP_ID\u003e\n    PUSHER_KEY=\u003cPUSHER_KEY\u003e\n    PUSHER_SECRET=\u003cPUSHER_SECRET\u003e\n```\nPlease ensure you replace the placeholder values above with your Pusher `appId`, `key` and `secret`.\n\n\nThis is a standard Node application configuration, nothing specific to our app.\n\n### Sending messages\n\nTo enable users send and receive messages, we’ll create a route to handle incoming requests. Update your `server.js`  file with the code below.\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: 'eu',\n      encrypted: true,\n    });\n    \n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.post('/messages', (req, res) =\u003e {\n      const { body } = req;\n      const { text, id } = body;\n      const data = {\n        text,\n        id,\n        timeStamp: new Date(),\n      };\n      \n      pusher.trigger('chat', 'message', data);\n      res.json(data);\n    });\n     ...\n```\n\n- We created a `POST /messages` route which, when hit, triggers a Pusher event.\n- We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the body of the request, we also got the `text` and `id` in the request body sent by the user.\n- The `data` object contains the `text` and `id` sent by the user. We’ll also added a timestamp to the it. \n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`chat`), an event name (`message`), and a payload(`data`).\n- The payload can be any value, but in this case, we have a JS object. \n- We still go ahead to respond with an object containing the `data` variable we created. \n\n\n### Sentiment analysis\n\n\n\u003e Sentiment analysis refers to the use of [natural language processing](https://en.wikipedia.org/wiki/Natural_language_processing), [text analysis](https://en.wikipedia.org/wiki/Text_analytics), [computational linguistics](https://en.wikipedia.org/wiki/Computational_linguistics), and [biometrics](https://en.wikipedia.org/wiki/Biometrics) to systematically identify, extract, quantify, and study effective states and subjective information. - [Wikipedia](https://en.wikipedia.org/wiki/Sentiment_analysis)\n\nYou can read up a bit about sentiment analysis using the following links below:\n\n\n- [Brandwatch](https://www.brandwatch.com/blog/understanding-sentiment-analysis/)\n- [TowardsDataScience](https://towardsdatascience.com/sentiment-analysis-concept-analysis-and-applications-6c94d6f58c17)\n\nUsing sentiment analysis, we’ll analyse the messages sent to determine the attitude of the sender. With the data gotten from the analysis, we’ll determine the emojis to suggest to the user. \n\nWe’ll use the [Sentiment](https://github.com/thisandagain/sentiment) JavaScript library for analysis. To install this library, open a terminal in the root folder of your project and run the following command. \n\n\n    npm install sentiment\n\nWe’ll update our `POST /messages` route to include analysis of the messages being sent in. Update your `server.js` with the code below.\n\n\n    // server.js\n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const Sentiment = require('sentiment');\n    const sentiment = new Sentiment();\n    \n    ...\n    \n    app.post('/messages', (req, res) =\u003e {\n      const { body } = req;\n      const { text, id } = body;\n      const result = sentiment.analyze(text);\n      const comparative = result.comparative;\n      const tone =\n        comparative \u003e= 0 ? (comparative \u003e= 1 ? 'positive' : 'neutral') : 'negative';\n      const data = {\n        text,\n        id,\n        timeStamp: new Date(),\n        sentiment: {\n          tone,\n          score: result.score,\n        },\n      };\n      pusher.trigger('chat', 'message', data);\n      res.json(data);\n    });\n    \n    ...\n    \n\n\n- Include the sentiment library in the project\n- `result`: here, we analyze the message sent in by the user to determine the context of the message.\n- `comparative`: this is the comparative score gotten after analyzing the message. This score is used to determine if a message is `positive`, `negative` or `neutral`.\n- `tone`: the `tone` variable is the context of the message gotten after analysis. This will be `negative` if the comparative score is below `0`, `neutral` if the score is above `0` but below `1`. The tone is `positive` if the comparative score is `1` and above.\n- A new object(`sentiment`) property is added to the response data containing the message’s tone and score.\n\nYou can now start the server by running `node server.js` in the terminal in the root folder of the project.\n\n\n## Chat view\n\nLet’s begin to build out our chat interface. We’ll create a `chat` component to hold the chat interface. We’ll create this using the CLI. Run `ng generate component chat` in a terminal in the root folder of your project. \n\nUpdate the recently created files as follows: \n\n``` html\n    // chat.component.html\n    \n    \u003cdiv class=\"main\"\u003e\n      \u003cdiv class=\"chat-box\"\u003e\n        \u003cdiv class=\"message-area\"\u003e\n          \u003cdiv class=\"message\" \n          *ngFor=\"let message of messages\" \n          [ngClass]=\"getClasses(message.type)\"\u003e\n            \u003cp\u003e{{message.text}}\u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"input-area\"\u003e\n          \u003cform (submit)=\"sendMessage()\" name=\"messageForm\" #messageForm=\"ngForm\"\u003e\n            \u003cinput type=\"text\" name=\"message\" id=\"message\" [(ngModel)]=\"message\"\u003e\n            \u003cbutton\u003e\n              \u003cspan data-feather=\"send\"\u003e\u003c/span\u003e \n            \u003c/button\u003e\n          \u003c/form\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n\nIn the code snippet above:\n\n- We loop through the available `messages` in the `.message-area`. \n- We have a form containing an input element and a submit button.\n- We using an icon-set called [feather-icons](https://feathericons.com) in our project. To include feather-icons in your project, simply add the cdn link in your `index.html` file.\n\n``` html\n    // index.html\n    ...\n    \u003cscript src=\"https://unpkg.com/feather-icons/dist/feather.min.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    ...\n```\n\nOpen the `chat.component.ts` file and update with the code below:\n\n``` typescript\n    // chat.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    import { v4 } from 'uuid';\n    \n    declare const feather: any;\n    interface Message {\n      id: string;\n      text: string;\n      timeStamp: Date;\n      type: string;\n    }\n    \n    @Component({\n      selector: 'app-chat',\n      templateUrl: './chat.component.html',\n      styleUrls: ['./chat.component.scss'],\n    })\n    \n    export class ChatComponent implements OnInit {\n      constructor(private http: HttpClient) {}\n      \n      messages: Array\u003cMessage\u003e = [];\n      message: string = '';\n      lastMessageId;\n      \n      sendMessage() {\n        if (this.message !== '') {\n          // Assign an id to each outgoing message. It aids in the process of differentiat .     ing between outgoing and incoming messages\n          this.lastMessageId = v4();\n          const data = {\n            id: this.lastMessageId,\n            text: this.message,\n          };\n          \n          this.http\n            .post(`http://localhost:4000/messages`, data)\n            .subscribe((res: Message) =\u003e {\n              const message = {\n                ...res,\n                // The message type is added to distinguish between incoming and outgoing             messages. It also aids with styling of each message type\n                type: 'outgoing',\n              };\n              this.messages = this.messages.concat(message);\n              this.message = '';\n            });\n            \n        }\n      }\n      \n      // This method adds classes to the element based on the message type\n      getClasses(messageType) {\n        return {\n          incoming: messageType === 'incoming',\n          outgoing: messageType === 'outgoing',\n        };\n      }\n      \n      ngOnInit() {\n        // Initialize feather icons\n        feather.replace();\n      }\n    }\n```\n\n\n`sendMessage`: this method uses the native `HttpClient` to make requests to the server. The `POST` method takes a URL and the request `body` as parameters. We then append the data returned to the array of messages. We make use of a package called [uuid](https://www.npmjs.com/package/uuid) to give each message a unique `id`. \n\nRun `npm install uuid` in a terminal inside your project’s root folder to install this package.\n\n`getClasses` : this method generates classes for a message element based on the `messageType`\nIn the `ngOnInit` lifecycle, we initialize `[feather](https://feathericons.com)`, our chosen icon set. \n\nTo make use of the `HttpClient` service, we’ll need to import the `HttpClientModule` into the `app.module.ts` file. Also to make use of form-related directives, we’ll need to import the `FormsModule`. So update your app module file as follows:\n\n``` typescript\n    // app.module.ts\n    ...\n    import { ChatComponent } from './chat/chat-component';\n    import {HttpClientModule} from '@angular/common/http';\n    import {FormsModule} from \"@angular/forms\";\n    \n    ...\n    @NgModule({\n      declarations: [AppComponent, ChatComponent],\n      imports: [BrowserModule, HttpClientModule, FormsModule],\n      providers: [],\n      bootstrap: [AppComponent],\n    })\n      ...\n```\n\n### Styling\n\nOpen the `chat.component.scss` file and update it with the styles below: \n\n``` scss\n    // chat.component.scss\n    \n    .main {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      min-height: 90vh;\n      .chat-box {\n        width: 300px;\n        max-height: 500px;\n        height: 500px;\n        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.12), 0 2px 4px 0 rgba(0, 0, 0, 0.08);\n        border-radius: 3% 3% 0 0;\n        position: relative;\n        padding-bottom: 40px;\n        .message-area {\n          max-height: 450px;\n          height: 450px;\n          overflow: auto;\n          padding: 20px 20px;\n          .message {\n            p {\n              color: white;\n              font-size: 13px;\n              font-weight: bold;\n              margin: 0px;\n              width: 45%;\n              box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1);\n              padding: 7px 10px;\n              margin: 5px 0;\n            }\n          }\n          .message.incoming {\n            display: flex;\n            flex-direction: column;\n            justify-content: flex-start;\n            align-items: flex-start;\n            p {\n              border-radius: 0 11px 11px 11px;\n              background: goldenrod;\n            }\n          }\n          .message.outgoing {\n            display: flex;\n            flex-direction: column;\n            justify-content: flex-end;\n            align-items: flex-end;\n            p {\n              border-radius: 11px 11px 0 11px;\n              background: darkgrey;\n            }\n          }\n        }\n      }\n    }\n```\n\nThis first SCSS snippet styles the `.chat-area`. Including how messages should look. The next snippet will style the input area and the send button.\n\n``` scss\n    // chat.component.scss\n    \n    .input-area {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      width: 100%;\n      height: 40px;\n      form {\n        display: flex;\n        height: 100%;\n        input {\n          width: 85%;\n          border: none;\n          background: rgba(0, 0, 0, 0.08);\n          padding: 5px 10px;\n          color: rgba(0, 0, 0, 0.3);\n          font-size: 14px;\n          font-weight: bold;\n          font-family: 'Titillium Web', sans-serif;\n          \u0026:focus {\n            outline: none;\n          }\n        }\n        button {\n          width: 15%;\n          border: none;\n          background: darkslategray;\n          color: white;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          cursor: pointer;\n        }\n      }\n    }\n```\n\n### Introducing Pusher and sending messages\n\nSo far we have an application that allows users send messages but the messages aren’t delivered in realtime. To solve this problem, we’ll include the [Pusher](https://pusher.com) library.\n\nOpen a terminal in the root folder of the project and install the package by running the following command:\n\n```\n    npm install pusher-js\n```\nTo make the Pusher library available in our application, we’ll add the library as a third party script to be loaded by Angular CLI. All CLI config is stored in `.angular-cli.json` file. Modify the `scripts` property to include the link to `pusher.min.js`.\n\n``` json\n    // .angular-cli.json\n    ...\n    \n    \"scripts\": [\n      \"../node_modules/pusher-js/dist/web/pusher.min.js\"\n    ]\n     ...\n```          \n\nNow that Pusher has been made available in our project, we’ll create a Pusher service to be used application wide. The Angular CLI can aid in the service creation.  Open a terminal in your project’s root folder and run the following command.\n\n```\n    ng generate service pusher\n```\n\nThis command simply tells the CLI to generate a service named `pusher` . Now open the `pusher.service.ts` file and update it with the code below.\n\n``` typescript\n    // pusher.service.ts\n    \n    import { Injectable } from '@angular/core';\n    \n    declare const Pusher: any;\n    \n    @Injectable()\n    export class PusherService {\n      constructor() {\n        var pusher = new Pusher('\u003cPUSHER_KEY\u003e', {\n          cluster: 'eu',\n          encrypted: true,\n        });\n        this.channel = pusher.subscribe('chat');\n      }\n      channel;\n      \n      public init() {\n        return this.channel;\n      }\n    }\n```\n\n\n- First, we initialize Pusher in the constructor. \n- The  `init` method returns the Pusher property we created. \n\n\n\u003e **Note:** Ensure you replace the `PUSHER_KEY` string with your actual Pusher key.\n  \n\nTo make the service available application wide, import it into the module file.\n\n``` typescript\n    // app.module.ts\n    import {PusherService} from './pusher.service'\n    ...\n    \n    @NgModule({\n       ....\n       providers: [PusherService],\n       ....\n     })\n```\n \n We’ll make use of this service in our component, by binding to the message event and appending the returned message into the list of messages. This will be done in the `ngOnInit` lifecycle.\n\n``` typescript\n    // chat.component.ts\n    import { PusherService } from '../pusher.service';\n    \n    ...\n    // Include the PusherService in the component's constructor\n    constructor(private http: HttpClient, private pusher: PusherService){}\n      ...\n      \n      ngOnInit() {\n        feather.replace();\n        const channel = this.pusher.init();\n        channel.bind('message', (data) =\u003e {\n          if (data.id !== this.lastMessageId) {\n            const message: Message = {\n              ...data,\n              type: 'incoming',\n            };\n            this.messages = this.messages.concat(message);\n          }\n        });\n      }\n    }\n```\n\nTo test the realtime functionality of the application, open two browsers side-by-side and send messages. You should be able to receive a message sent from one browser on the other.\n\nNow let’s place the chat component in the `app.component.html` file. This will make our chat component available for viewing. Replace the contents of the file with the code below.\n\n``` html\n    // app.component.html\n    \u003cdiv\u003e\n      \u003capp-chat\u003e\u003c/app-chat\u003e\n    \u003c/div\u003e\n```\n\nNow we can view our application for the first time, it should currently be able to send messages back and forth in realtime. \n\n![emoji-suggestions-angular-messaging](//images.ctfassets.net/1es3ne0caaid/7qBC1aQeYgG4ayi0iigKQK/29883810d3217e4e773226c1421bad1b/emoji-suggestions-angular-messaging.png)\n\n### Emoji suggestions\n\nTo display emoji suggestions during a chat session, we’ll make use of the `sentiment` param being sent from the server as a response for each message request. The data being sent from the server should be similar to the snippet below.\n\n``` json\n    {\n      id: '83d3dd57-6cf0-42dc-aa5b-2d997a562b7c',\n      text: 'i love pusher',\n      timeStamp: '2018-04-27T15:04:24.574Z'\n      sentiment: {\n        tone: 'positive',\n        score: 3\n      }\n    }\n```      \n\nGenerate an `emoji` component that will hold the emoji section. This component will handle the display of emojis based on the tone of each message received. We’ll generate a new component using the CLI by running the following command in the terminal.\n\n```\n    ng generate component emoji-panel\n```\n\nReplace the contents of the `emoji-panel.component.html` file with the code snippet below.\n\n``` html\n    // emoji-panel.component.html\n    \n    \u003cdiv class=\"emojis\" [hidden]=\"!showEmojis\" [attr.aria-hidden]=\"!showEmojis\"\u003e\n      \u003cdiv class=\"emoji-list positive\" *ngIf=\"result.tone === 'positive'\"\u003e\n        \u003cspan class=\"emoji\" *ngFor=\"let emoji of emojiList.positive; let i = index;\" (click)=\"onClick('positive', i)\"\u003e\n          {{codePoint(emoji)}}\n        \u003c/span\u003e\n      \u003c/div\u003e\n      \n      \u003cdiv class=\"emoji-list neutral\" *ngIf=\"result.tone === 'neutral'\"\u003e\n        \u003cspan class=\"emoji\" *ngFor=\"let emoji of emojiList.neutral; let j = index;\" (click)=\"onClick('neutral', j)\"\u003e\n          {{codePoint(emoji)}}\n        \u003c/span\u003e\n      \u003c/div\u003e\n      \n      \u003cdiv class=\"emoji-list negative\" *ngIf=\"result.tone === 'negative'\"\u003e\n        \u003cspan class=\"emoji\" *ngFor=\"let emoji of emojiList.negative; let k = index;\" (click)=\"onClick('negative', k)\"\u003e\n          {{codePoint(emoji)}}\n        \u003c/span\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n\n`attr.aria-hidden`: here we set the accessibility attribute of the element to either `true` or `false` based on the `showEmojis` variable.\n\n``` typescript\n    // emoji-panel.component.ts\n    import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n    \n    @Component({\n      selector: 'app-emoji-panel',\n      templateUrl: './emoji-panel.component.html',\n      styleUrls: ['./emoji-panel.component.scss'],\n    })\n    \n    export class EmojiPanelComponent implements OnInit {\n      constructor() {}\n      @Input() result = {};\n      @Input() showEmojis: boolean = false;\n      @Output() onEmojiSelect: EventEmitter\u003cstring\u003e = new EventEmitter();\n    \n      emojiList = {\n       positive: [128512, 128513, 128536, 128516],\n       neutral: [128528, 128529, 128566, 129300],\n       negative: [128543, 128577, 128546, 128542],\n      };\n    \n      codePoint(emojiCodePoint) {\n        return String.fromCodePoint(emojiCodePoint);\n      }\n      onClick(reaction, index) {\n        const emoji = this.emojiList[reaction][index];\n        this.onEmojiSelect.emit(emoji);\n      }\n    \n      ngOnInit() {}\n    }\n```\n\n\n`emojiList`:  this is an object containing a list of emojis that’ll be suggested. There’s a list for each message tone. \n`showEmojis`**:** an input variable from the parent component(`chat`) to determine the visibility of the emoji panel\n`onClick`**:**  this method takes to parameters. The `reaction` param is used to select the list of emojis to check for the provided `index`. The selected emoji is then emitted to the parent component.\n\n``` scss\n    // emoji-panel.component.scss\n    \n    .emojis {\n      \u0026[aria-hidden='true'] {\n        animation: slideOutDown 0.7s;\n      }\n      \u0026[aria-hidden='false'] {\n        animation: slideInUp 0.7s;\n      }\n      .emoji-list {\n        display: flex;\n        .emoji {\n          margin: 0 5px;\n          cursor: pointer;\n        }\n      }\n    }\n    @keyframes slideInUp {\n      from {\n        transform: translate3d(0, 100%, 0);\n        visibility: visible;\n      }\n      to {\n        transform: translate3d(0, 0, 0);\n      }\n    }\n    @keyframes slideOutDown {\n      from {\n        transform: translate3d(0, 0, 0);\n      }\n      to {\n        visibility: hidden;\n        transform: translate3d(0, 100%, 0);\n      }\n    }\n```\n\n\nAfter creating the `emoji-panel` component, the next step is to add it to our `chat` component. Update the chat component with the code snippets below.\n\n``` html\n    // chat.component.html\n    ...\n    \u003cdiv\u003e\n      ...\n      \u003cdiv class=\"emo-area\"\u003e\n        \u003capp-emoji-panel [showEmojis]=\"showEmojis\" [result]=\"score\" (onEmojiSelect)=\"selectEmoji($event)\"\u003e\u003c/app-emoji-panel\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"input-area\"\u003e\n        \u003cform (submit)=\"sendMessage()\" name=\"messageForm\" #messageForm=\"ngForm\"\u003e\n          \u003cinput type=\"text\" name=\"message\" id=\"message\" [(ngModel)]=\"message\"\u003e\n          \u003cbutton\u003e\n            \u003cspan data-feather=\"send\"\u003e\u003c/span\u003e\n          \u003c/button\u003e\n        \u003c/form\u003e\n      \u003c/div\u003e  \n    \u003c/div\u003e\n```\n\n\nUpdate the `chat.component.scss` with the following styles:\n\n``` scss\n    .main{\n      ...\n      .chat-box{\n        ...\n      }\n      .emo-area{\n        position: absolute;\n        bottom: 40px;\n        left: 0;\n        width: 100%;\n        padding: 3px 10px;\n      }\n      .input-area{\n        ...\n      }\n    }\n```\nOpen the `chat.component.ts` file and update it like so:\n\n``` typescript\n    // chat.component.ts\n    \n    ...\n      messages: Array\u003cMessage\u003e = [];\n      message: string = '';\n      lastMessageId;  \n      showEmojis = false;\n      score = {\n        tone: '',\n        score: 0,\n      };\n      \n      sendMessage() {\n        if (this.message !== '') {\n          this.lastMessageId = v4();\n          this.showEmojis = false;\n          ...\n        }\n      }\n      \n      selectEmoji(e) {\n        const emoji = String.fromCodePoint(e);\n        this.message += ` ${e}`;\n        this.showEmojis = false;\n      }\n      ...\n      \n      ngOnInit() {\n        feather.replace();\n        const channel = this.pusher.init();\n        channel.bind('message', (data) =\u003e {\n          if (data.id !== this.lastMessageId) {\n            const message: Message = {\n              ...data,\n              type: 'incoming',\n            };\n            this.showEmojis = true;\n            this.score = data.sentiment;\n            this.messages = this.messages.concat(message);\n          }\n        });\n      }\n    ...\n```\n    \n\n \n`selectEmoji` : this method appends the selected emoji to the current message and then hides the emoji panel. \nIn the Pusher event callback, we set the `showEmojis` property to `true`. In the same callback, we assign the `datas` sentiment property to the `score` variable.\n\nBy now our application should provide emoji suggestions for received messages.\n\n![emoji-suggestions-angular-complete](//images.ctfassets.net/1es3ne0caaid/2hLgA0e4OksyE8QE06qieo/179b838e07d540a23dbff82963f8bab1/emoji-suggestions-angular-complete.png)\n\n\n\u003e **Note:** Both the server(`node server`) and the Angular dev server(`ng serve`) must be running to get the application working. Run both command in two separate terminal sessions if you haven’t done so already.\n\n\n## Conclusion\n\nUsing sentiment analysis library, we’ve been able to suggest emojis as replies for received messages and with the help of [Pusher](https://pusher.com) our application can send messages back and forth in realtime. You can view the source code for the demo [here](https://github.com/christiannwamba/angular-chat).","metaTitle":"Emoji suggestions in an Angular app with sentiment analysis","metaDescription":"This tutorial shows how to build a chat app using Angular and Node. The app measures users' moods with the sentiment analysis library, and provides emoji suggestions based on this data."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3DkeuCPVMQ4cKIEckycsaO","type":"Entry","createdAt":"2018-05-09T09:36:10.483Z","updatedAt":"2018-05-09T09:36:10.483Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Live comments and ratings using sentiment analysis and Angular","url":"live-comments-sentiment-analysis-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/angular-live-comment","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-05-08","description":"Learn to build a live comments application using Angular, featuring sentiment analysis. Use the sentiment analysis to measure whether comments are positive or negative, and display this information on an admin panel.","prerequisite":"You should have Node and npm installed on your machine. A basic understanding of Angular and Node is required.","content":"## Introduction\n\nSentiment analysis is a way to evaluate written or spoken language to determine if the expression is favorable, unfavorable, or neutral, and to what degree. You can read up about it [here](https://www.clarabridge.com/sentiment-analysis/).\n\nLive comments offer a realtime comment experience that doesn’t require a page refresh. You see comments when they’re posted.\n\nUsing [Angular](https://angular.io), you can extend the template language with your components and use a wide array of existing components. With [Pusher](https://pusher.com) we can enable realtime messaging in the chat using Pusher’s pub/sub pattern. \n\nWe’ll be building a live comments application using Pusher, Angular and the [sentiment](https://github.com/thisandagain/sentiment) library for emoji suggestions based on the context of messages received.\n\nUsing our application, admin users can view how videos are rated based on the analysis of the messages sent in the live comments section.\n\nHere’s a demo of the final product:\n\n![angular-comments-sentiment-demo](//images.ctfassets.net/1es3ne0caaid/3rWNv9JECI8O8ygySuAgaY/28000959a9534d3bd6c97a34afb5d525/angular-comments-sentiment-demo.gif)\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of Angular and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nWe’ll be using these tools to build out our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Angular](https://angular.io)\n- [Sentiment](https://github.com/thisandagain/sentiment)\n\nWe’ll be sending messages to the server, then using [Pusher’s](https://pusher.com) pub/sub pattern, we’ll listen and receive messages in realtime. To make use of Pusher you’ll have to create an account [here](https://pusher.com). \n\nAfter account creation, visit the dashboard. Click **Create new Channels** **app**, fill out the details, click **Create my app**, and make a note of the details on the **App Keys** tab.\n\nLet’s build!\n\n## Setup and folder structure\n\nUsing the Angular [CLI](https://cli.angular.io/) (command line interface) provided by the Angular team, we’ll initialize our project. To initialize the project, first, install the CLI by running `npm install @angular/cli` in your terminal. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/) installed.\n\nTo create a new Angular project using the CLI, open a terminal and run:   \n```\n    ng new angular-live-comments --style=scss --routing\n```\nThe command tells the CLI to create a new project called `angular-live-comments`, use the CSS pre-processor SCSS rather than CSS for styling and set up routing for the application.\n\nOpen the newly created folder `angular-live-comments`, your folder structure should be identical to this:\n\n```\n    angular-live-comments/\n      e2e/\n      node_modules/\n      src/\n        app/\n          app.component.html\n          app.component.ts\n          app.component.css\n          ...\n```\nOpen a terminal inside the project folder and start the application by running `ng serve` or `npm start`. Open your browser and visit http://localhost:4200.  What you see should be identical to the screenshot below.\n\n![angular-welcome-screen](//images.ctfassets.net/1es3ne0caaid/7Cw6E4WHFmaOogyKkK0MA/a660fc968171c614fd566c33c5e00d7d/tables-angular-welcome-screen.png)\n\n##  Building our server\n\nNow that we have our Angular application running, let’s build out a part of our server.\n\nTo do this we’ll need to install [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/). We’ll use this to receive requests from our Angular application.\n\nTo install express, run `npm install express` in a terminal in the root folder of your project.\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nWe referenced three packages that haven’t been installed, `body-parser`, `pusher` and `dotenv`. Install these packages by running the following command in your terminal.\n\n```\n    npm i body-parser pusher dotenv\n```\n\n- body-parser is a package used to parse incoming request bodies in a middleware before your handlers, available under the `req.body` property.\n- dotenv is a zero-dependency module that loads environment variables from a `.env` file into `[process.env](https://nodejs.org/docs/latest/api/process.html#process_process_env)`. This package is used to avoid adding sensitive information like the `appId` and `secret` into our codebase directly. \n- The dotenv package will load the variables provided in our `.env` file into our environment.\n- CORS: The calls to our endpoint will be coming in from a different origin. Therefore we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\n The `dotenv` library should always be initialized at the start of our file because we need to load the variables as early as possible to make them available throughout the application.\n\nWe also installed the [Pusher](https://pusher.com) library as a dependency. Follow the steps above to create a Pusher account if you haven’t done so already\n\nLet’s create a `.env` file to load the variables we’ll be needing into the Node environment. Create the file in the root folder of your project and update it with the code below.\n\n```\n    // .env\n    \n    PUSHER_APP_ID=APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n```\nPlease ensure you replace the placeholder values above with your Pusher `appId`, `key` and `secret`.\n\nThis is a standard Node application configuration, nothing specific to our app.\n\n### Sending messages\n\nTo enable users to send and receive messages, we’ll create a route to handle incoming requests. Update your `server.js`  file with the code below.\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: 'eu',\n      encrypted: true,\n    });\n    \n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.post('/messages', (req, res) =\u003e {\n      const { body } = req;\n      const { text, name } = body;\n      const data = {\n        text,\n        name,\n        timeStamp: new Date(),\n      };\n      \n      try {\n        pusher.trigger(['chat', 'rate'], 'message', data);\n      } catch (e) {}\n      res.json(data);\n    });\n    \n     ...\n```\n\n- We created a `POST /messages` route which, when hit, triggers a Pusher event.\n- We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the body of the request, we also got the `text` and `name` in the request body sent by the user.\n- The `data` object contains the `text` and `name` sent by the user. It also includes a timestamp. \n-  The `trigger` method which takes a trigger identifier, we included a list of channels because we wish to dispatch the event across two channels(`chat`,  `rate`). \n- The trigger function also takes a second argument, the event name (`message`), and a payload(`data`).\n- We still go ahead to respond with an object containing the `data` variable we created. \n\n\n### Sentiment analysis\n\n\n\u003e Sentiment analysis uses data mining processes and techniques to extract and capture data for analysis in order to discern the subjective opinion of a document or collection of documents, like blog posts, reviews, news articles and social media feeds like tweets and status updates.                - [Technopedia](https://www.techopedia.com/definition/29695/sentiment-analysis)\n\n\nUsing sentiment analysis, we’ll analyze the messages sent to determine the attitude of the sender. With the data gotten from the analysis, we’ll determine the emojis to suggest to the user. \n\nWe’ll use the [Sentiment](https://github.com/thisandagain/sentiment) JavaScript library for analysis. To install this library, open a terminal in the root folder of your project and run the following command. \n\n```\n    npm install sentiment\n```\nWe’ll update our `POST /messages` route to include analysis of the messages being sent in. Update your `server.js` with the code below.\n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const Sentiment = require('sentiment');\n    const sentiment = new Sentiment();\n    \n    ...\n    \n    app.post('/messages', (req, res) =\u003e {\n      const { body } = req;\n      const { text, name } = body;\n      const result = sentiment.analyze(text);\n      const comparative = result.comparative;\n      \n      const data = {\n        text,\n        name,\n        timeStamp: new Date(),\n        score: result.score,\n      };\n      try {\n        pusher.trigger(['chat', 'rate'], 'message', data);\n      } catch (e) {}\n      res.json(data);\n    });\n    \n    ...\n```    \n\n\n- Include the sentiment library in the project.\n- `result`: here, we analyze the message sent in by the user to determine the context of the message.\n- `comparative`: this is the comparative score gotten after analyzing the message. \n- A new property (`score`) is added to the response data containing the message’s score after analysis.\n\nYou can now start the server by running `node server.js` in a terminal in the root folder of the project.\n\n\n## Chat view\n\nLet’s begin to build out our chat interface. We’ll create a `chat` component to hold the chat interface. We’ll create this using the CLI. Run `ng generate component chat` in a terminal in the root folder of your project. \n\nUpdate the recently created files as follows: \n\n``` html\n    // chat.component.html\n    \n    \u003cdiv\u003e\n      \u003cdiv class=\"input-area\"\u003e\n        \u003cform (submit)=\"sendMessage()\" name=\"messageForm\" #messageForm=\"ngForm\"\u003e\n          \u003cdiv\u003e\n            \u003cinput type=\"text\" placeholder=\"Your name\" name=\"name\" id=\"name\" [(ngModel)]=\"message.name\"\u003e\n            \u003ctextarea type=\"text\" placeholder=\"Your message\" name=\"message\" id=\"message\" [(ngModel)]=\"message.text\" rows=\"5\"\u003e\u003c/textarea\u003e\n          \u003c/div\u003e\n          \u003cbutton\u003e\n            \u003cspan data-feather=\"send\"\u003e\u003c/span\u003e\n          \u003c/button\u003e\n        \u003c/form\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```    \n\nIn the code snippet above:\n\n- We have a form containing an input element, a textarea and a submit button.\n- We are using an icon-set called [feather-icons](https://feathericons.com) in our project. To include feather-icons in your project, simply add the cdn link in your `index.html` file.\n\n``` html\n    // index.html\n    ...\n    \u003cscript src=\"https://unpkg.com/feather-icons/dist/feather.min.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    ...\n```\n\nOpen the `chat.component.ts` file and update with the code below:\n\n``` typescript\n    // chat.component.ts\n    \n    import { Component, OnInit, Output, EventEmitter } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    declare const feather: any;\n    export interface Message {\n      text: string;\n      name: string;\n    }\n    @Component({\n      selector: 'app-chat',\n      templateUrl: './chat.component.html',\n      styleUrls: ['./chat.component.scss'],\n    })\n    export class ChatComponent implements OnInit {\n      constructor(private http: HttpClient) {}\n      @Output() onSendMessage: EventEmitter\u003cMessage\u003e = new EventEmitter();\n      message = {\n        name: '',\n        text: '',\n      };\n      sendMessage() {\n        if (this.message.text !== '' \u0026\u0026 this.message.name !== '') {\n          this.http\n            .post(`http://localhost:4000/messages`, this.message)\n            .subscribe((res: Message) =\u003e {\n              this.onSendMessage.emit(res);\n              this.message = {\n                name: '',\n                text: '',\n              };\n            });\n        }\n      }\n      ngOnInit() {\n        feather.replace(); \n      }\n    }\n```\n\n`sendMessage`: this method uses the native `HttpClient` to make requests to the server. The `POST` method takes a URL and the request `body` as parameters. We then append the data returned to the array of messages. \n\nIn the `ngOnInit` lifecycle, we initialize `[feather](https://feathericons.com)`, our chosen icon set. \n\nTo make use of the `HttpClient` service, we’ll need to import the `HttpClientModule` into the `app.module.ts` file. Also to make use of form-related directives, we’ll need to import the `FormsModule`. Update your app module file as follows:\n\n``` typescript\n    // app.module.ts\n    ...\n    import { ChatComponent } from './chat/chat.component';\n    import {HttpClientModule} from '@angular/common/http';\n    import {FormsModule} from \"@angular/forms\";\n    \n    @NgModule({\n      declarations: [AppComponent, ChatComponent],\n      imports: [BrowserModule, AppRoutingModule, HttpClientModule, FormsModule],\n      providers: [],\n      bootstrap: [AppComponent],\n    })\n      ...\n```\n\n### Styling\n\nOpen the `chat.component.scss` file and update it with the following styles below: \n\n``` scss\n    // chat.component.scss\n    \n    %input {\n      width: 100%;\n      border: none;\n      background: rgba(0, 0, 0, 0.08);\n      padding: 10px;\n      color: rgba(0, 0, 0, 0.3);\n      font-size: 14px;\n      font-weight: bold;\n      font-family: 'Roboto Condensed', sans-serif;\n      border-radius: 15px;\n      \u0026:focus{\n        outline: none;\n      }\n    }\n    .input-area {\n      width: 100%;\n      form {\n        display: flex;\n        flex-direction: column;\n        div {\n          display: flex;\n          flex-direction: column;\n          max-width: 450px;\n          input {\n            @extend %input;\n            margin: 0 0 10px 0;\n          }\n          textarea {\n            @extend %input;\n          }\n        }\n        button {\n          width: 25%;\n          border: none;\n          background: darkslategray;\n          color: white;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          cursor: pointer;\n          margin-top: 10px;\n          padding: 5px 20px;\n          border-radius: 27px;\n          box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.12),\n            0 2px 4px 0 rgba(0, 0, 0, 0.08);\n        }\n      }\n    }\n```\n\n## Home view \n\nLet’s create the home component, this will house (pun intended) our `chat` component, video and list of messages. Run `ng generate component home` in a terminal in the root folder of your project.\n\nOpen the `home.component.html` file and replace the contents with the snippet below.\n\n``` html\n    // home.component.html\n    \n    \u003cdiv\u003e\n      \u003cdiv class=\"video\"\u003e\n        \u003ciframe width=\"500\" height=\"300\" src=\"https://www.youtube.com/embed/7CVtTOpgSyY\" frameborder=\"0\" allow=\"autoplay; encrypted-media\"\n          allowfullscreen\u003e\u003c/iframe\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"messages\"\u003e\n        \u003ch4\u003eMessages\u003c/h4\u003e\n        \u003cdiv class=\"message\" *ngFor=\"let message of messages\"\u003e\n          \u003cdiv class=\"pic\"\u003e\n            \u003cimg src=\"/assets/man.svg\" alt=\"profile-img\"\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"message-text\"\u003e\n            \u003cspan\u003e{{message.name}}\u003c/span\u003e\n            \u003cp\u003e{{message.text}}\u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \u003capp-chat\u003e\u003c/app-chat\u003e\n    \u003c/div\u003e\n```\n\n\u003e **Note:** you can find the assets used throughout the article in the GitHub [repo](https://github.com/christiannwamba/angular-live-comment).\n\nOpen the `home.component.ts` file and update it with the following snippet:\n\n``` typescript\n    // home.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { Message } from '../chat/chat.component';\n    \n    @Component({\n      selector: 'app-home',\n      templateUrl: './home.component.html',\n      styleUrls: ['./home.component.scss'],\n    })\n    \n    export class HomeComponent implements OnInit {\n      constructor() {}\n      messages: Array\u003cMessage\u003e = [];\n      ngOnInit() {\n      }\n    }\n```    \n\n### Styling\n\nOpen the `home.component.scss` file and update it with the styles below:\n\n``` scss\n    .video {\n      width: 500px;\n      height: 300px;\n      background: rgba(0, 0, 0, 0.2);\n      margin-bottom: 20px;\n    }\n    .messages {\n      margin-bottom: 30px;\n      border-bottom: 2px solid rgba(0, 0, 0, 0.2);\n      max-width: 500px;\n      h4 {\n        margin: 10px 0;\n      }\n      .message {\n        display: flex;\n        .pic {\n          display: flex;\n          align-items: center;\n          img {\n            height: 40px;\n            width: 40px;\n            border-radius: 50%;\n          }\n        }\n        .message-text {\n          padding: 10px;\n          span {\n            font-size: 11px;\n            opacity: 0.8;\n            font-weight: bold;\n          }\n          p {\n            font-size: 15px;\n            opacity: 0.6;\n            margin: 2px 0;\n          }\n        }\n      }\n    }\n```\n\n\n\n## Introducing Pusher\n\nSo far we have an application that allows users send in comments, but these comments are only visible to the sender. We’ll include the [Pusher](https://pusher.com) library in our application to enable realtime features like seeing comments as they come in without having to refresh the page.\n\nOpen a terminal in the root folder of the project and install the package by running the following command:\n\n```\n    npm install pusher-js\n```\n\nWe’ll add the library as a third party script to be loaded by Angular CLI. CLI config is always stored in the `.angular-cli.json` file. Modify the `scripts` property to include the link to `pusher.min.js`.\n\n``` json\n    // .angular-cli.json\n    ...\n    \n    \"scripts\": [\n      \"../node_modules/pusher-js/dist/web/pusher.min.js\"\n    ]\n     ...\n```          \n\nNow that Pusher has been made available in our project, we’ll create a Pusher service to be used application wide. The Angular CLI can aid in the service creation.  Open a terminal in your project’s root folder and run the following command.\n\n```\n    ng generate service pusher\n```\n\nThis command simply tells the CLI to generate a service named `pusher`. Now open the `pusher.service.ts` file and update it with the code below.\n\n``` typescript\n    // pusher.service.ts\n    \n    import { Injectable } from '@angular/core';\n    declare const Pusher: any;\n    @Injectable()\n    export class PusherService {\n      constructor() {\n      // Replace this with your pusher key    \n        this.pusher = new Pusher('\u003cPUSHER_KEY\u003e', {\n          cluster: 'eu',\n          encrypted: true,\n        });\n      }\n      pusher;\n      public init(channel) {\n        return this.pusher.subscribe(channel);\n      }\n    }\n```\n\n\n\n- First, we initialize Pusher in the constructor. \n- The  `init` subscribes to the channel passed as a parameter. \n\n\n\u003e **Note:** ensure you replace the `PUSHER_KEY` string with your actual Pusher key.\n\nTo make the service available application wide, import it into the module file.\n\n``` typescript\n    // app.module.ts\n    ...\n    import { HttpClientModule } from '@angular/common/http';\n    import {PusherService} from './pusher.service';\n    \n    @NgModule({\n       ....\n       providers: [PusherService],\n       ....\n     })\n```\n \n We’ll make use of this service in our component, by binding to the message event and appending the returned message into the list of messages. This will be done in the `ngOnInit` lifecycle in the `home.component.ts` file.\n\n``` typescript\n    // home.component.ts\n    import { Component, OnInit } from '@angular/core';\n    import { Message } from '../chat/chat.component';\n    import { PusherService } from '../pusher.service';\n    ...\n    \n      constructor(private pusher: PusherService){}\n      messages: Array\u003cMessage\u003e = [];\n    \n      ngOnInit() {\n        const channel = this.pusher.init('chat');\n        channel.bind('message', (data) =\u003e {\n          this.messages = this.messages.concat(data);\n        });\n      }\n    }\n```\n\n\n\n## Routing\n\nTo enable routing between the `home` and `admin` page, we’ll define routes for each component in the `app-routing.module.ts` file.\n\n``` typescript\n    // app-routing.module.ts\n    \n    import { NgModule } from '@angular/core';\n    import { Routes, RouterModule } from '@angular/router';\n    import { HomeComponent } from './home/home.component';\n    \n    const routes: Routes = [\n      {\n        component: HomeComponent,\n        path: '',\n      },\n    ];\n    \n    @NgModule({\n      imports: [RouterModule.forRoot(routes)],\n      exports: [RouterModule],\n    })\n    \n    export class AppRoutingModule {}\n```\n\n\n`routes`: previously, the `routes` variable was an empty array, but we’ve updated it to include two objects containing our route `component` and `path`.\n\n\nNext we’ll replace all the contents in your `app.component.html` file leaving just the `router-outlet`. Your `app.component.html` file should look like the snippet below:\n\n``` html\n    // app.component.html\n    \n    \u003cdiv class=\"main\"\u003e\n      \u003crouter-outlet\u003e\u003c/router-outlet\u003e\n    \u003c/div\u003e\n```\n\nLet’s have a look at what our home page looks like after the updates. Navigate to http://localhost:4200\n\n![angular-comments-sentiment-home](//images.ctfassets.net/1es3ne0caaid/6rLqKZoZBC6cqIUCW0KaUQ/56a695bb4a6e5ec9302a9d795fcccec2/angular-comments-sentiment-home.png)\n\n## Admin page\n\nWhenever we post a video, we want to be able to tell how the video was perceived by users using their comments on the video. Sentiment analysis is used to achieve this. All comments under the video will be analyzed to determine the user’s attitude towards the video. All videos posted will be rated based on the tone of every comment posted.\n\nIf the comments under a video are mostly negative, the video will get a simple thumbs down(👎🏼) and a thumbs up(👍🏼) if the comments are positive. \n\nTo create the admin page, run `ng generate component admin` in a terminal in the root folder of your project.\n\nReplace the contents of the `admin.component.html` file with the snippet below.\n\n``` html\n    // admin.component.html\n    \n    \u003cdiv class=\"admin\"\u003e\n      \u003ch3\u003eAdmin\u003c/h3\u003e\n      \u003cdiv\u003e\n        \u003ch4\u003eVideos List\u003c/h4\u003e\n        \u003cdiv class=\"video\"\u003e\n          \u003cdiv class=\"vid-thumbnail\"\u003e\n            \u003cimg src=\"/assets/vid-thumbnail.png\" alt=\"video thumbnail\"\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"vid-desc\"\u003e\n            \u003cspan\u003ePixar\u003c/span\u003e\n            \u003cp\u003eShooting Star Clip\u003c/p\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"vid-rating\"\u003e\n            \u003cspan class=\"header\"\u003e\n              Rating\n            \u003c/span\u003e\n            \u003cdiv [hidden]=\"rating \u003c 1\"\u003e\n              \u003cspan data-feather=\"thumbs-up\" class=\"positive\"\u003e\u003c/span\u003e\n            \u003c/div\u003e\n            \u003cdiv [hidden]=\"rating \u003e= 1\"\u003e\n              \u003cspan data-feather=\"thumbs-down\" class=\"negative\"\u003e\u003c/span\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n\n\n\u003e **Note:** all assets used are available in the repo [here](https://github.com/christiannwamba/angular-live-comment).\n\nWe have the thumbs up and thumbs down icons, we display thumbs up if the rating is one and above. Thumbs down is displayed when the video rating is below one. The `rating` property will be defined in the `admin.component.ts` file below.\n\n### Styling\n\nAdd the styles below to the `admin.component.scss` file.\n\n``` scss\n    // admin.component.scss\n    \n    .admin {\n      width: 500px;\n      .video {\n        display: flex;\n        box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.2);\n        padding: 10px;\n        .vid-thumbnail {\n          flex: 1;\n          img {\n            height: 70px;\n            width: 120px;\n          }\n        }\n        .vid-desc {\n          flex: 4;\n          padding: 0 8px;\n          span {\n            font-size: 15px;\n            font-weight: bold;\n            opacity: 0.8;\n          }\n          p {\n            margin: 3px;\n            font-size: 17px;\n            opacity: 0.6;\n          }\n        }\n        .vid-rating {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          .header{\n            font-size: 12px;\n            margin: 0 0 5px;\n            opacity: 0.6;\n          }\n          .positive {\n            color: #40a940;\n          }\n          .negative {\n            color: rgb(196, 64, 64);\n          }\n        }\n      }\n    }\n```\n\n\nOpen the `admin.component.ts` file and update it as so:\n\n``` typescript\n    // admin.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { PusherService } from '../pusher.service';\n    \n    declare const feather: any;\n    \n    @Component({\n      selector: 'app-admin',\n      templateUrl: './admin.component.html',\n      styleUrls: ['./admin.component.scss'],\n    })\n    \n    export class AdminComponent implements OnInit {\n      constructor(private pusher: PusherService) {}\n      rating = 1;\n      \n      ngOnInit() {\n        feather.replace();\n        const channel = this.pusher.init('rate');\n        channel.bind('message', (data) =\u003e {\n          this.rating += data.score;\n        });\n      }\n    }\n```\n\n- `rating`: starting out, every video has a rating of 1.\n- In the `ngOnInit` lifecycle, we initialize feather and subscribe to the `rate` channel. We then listen for a `message` event. In the callback, the `score`  property of the data returned is added to the `rating` property.\n\n\nNow let’s define the route for the admin page. Open the `app-routing.module.ts` file and update the `routes` array like so:\n\n``` typescript\n    // app-routing.module.ts\n    import { NgModule } from '@angular/core';\n    import { Routes, RouterModule } from '@angular/router';\n    import { HomeComponent } from './home/home.component';\n    import { AdminComponent } from './admin/admin.component';\n    \n    const routes: Routes = [\n      {\n        component: HomeComponent,\n        path: '',\n      },\n      {\n        component: AdminComponent,\n        path: 'admin',\n      },\n    ];\n    ...\n```\n\nNavigate to http://localhost:4200/admin to view the admin page. Here’s a screenshot of what it looks like:\n\n![angular-comments-sentiment-admin](//images.ctfassets.net/1es3ne0caaid/zpnyoDkAfYMwQ6m6OewY6/191a5054646bfc39b847213f5db0ef6b/angular-comments-sentiment-admin.png)\n\nThere’s not much going on here, but now our admin page rates videos in realtime whenever there’s a new comment. \n\nHere’s a screenshot of both pages side by side.\n\n![angular-comments-sentiment-both-views](//images.ctfassets.net/1es3ne0caaid/wpeiNFaL0yy8KSegKOugQ/2390d72d67eadf6289ccd55dba1e12fd/angular-comments-sentiment-both-views.png)\n\n## Conclusion\n\nUsing the sentiment analysis library, we can rate videos on our site by analyzing the comments posted under the videos. Using [Pusher Channels](https://pusher.com/channels), we were able to implement live comments functionality in our application. You can view the source code for the demo [here](https://github.com/christiannwamba/angular-live-comment).","metaTitle":"Build live comments and ratings using sentiment and Angular","metaDescription":"This tutorial shows you how to build a live comments application, featuring sentiment analysis. Use Angular and Node.js with a sentiment analysis library to measure whether comments are positive or negative, and display this information on an admin panel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"73w2yjT0nmQgUQISKoSuuA","type":"Entry","createdAt":"2018-05-08T07:23:31.792Z","updatedAt":"2020-06-19T13:20:48.240Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime table with Angular","url":"realtime-table-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/realtime-ng-table","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-05-07","description":"Create an Angular web app featuring a table interface that updates in realtime to reflect changes in the database.","prerequisite":"You will need Node and npm installed on your machine. A basic understanding of JavaScript will be helpful.","content":"## Introduction\n\nIn a traditional web app, the clients (browser) has no idea when the state of the server may have changed. It either polls for changes at a particular interval or waits for the user to initiate the change. With realtime features, information is transmitted (almost) instantaneously between the users and the server. Pusher helps to bring realtime apps to the masses with their simple APIs from the client end down to the server.\n\nIn this tutorial, we’ll demonstrate how to integrate [Pusher](https://pusher.com/) with an [Angular](http://angular.io/) application. We will  create a realtime table, where we don’t need to refresh our page or component anytime there’s a change to our table’s data, our table should immediately update based on the current state of the data.\n\n![tables-angular-demo](//images.ctfassets.net/1es3ne0caaid/1qlaJYq8G0U26I464gIeCM/705d08d6b78ac01afec901b3e34a7ac8/tables-angular-demo.gif)\n\n## Prerequisites\n\nWe are going to make use of the following dependencies: \n\n- [Angular 4+](http://angular.io/): a platform that makes it easy to build applications with the web. Angular combines declarative templates, dependency injection, end to end tooling, and integrated best practices to solve development challenges. \n\n\n- [Pusher](https://github.com/pusher/pusher-js): a hosted service that makes it super-easy to add realtime data and functionality to web and mobile applications. It has different products based on the need of your application. \n\n\n- [Bootstrap 4](http://getbootstrap.com/): an open source toolkit for developing with HTML and CSS. It includes HTML and CSS based design templates for typography, forms, buttons, tables, navigation, modals, image carousels and many other, as well as optional JavaScript plugins.\n\n\n- [open-iconic](https://useiconic.com/open): an open source icon set with 223 marks in SVG, webfont and raster formats\n\n\u003e Please ensure you have Node and npm installed before starting the tutorial.\n\u003e No knowledge of Angular is required, but a basic understanding of Javascript (not necessarily Typescript) may be helpful.\n\n## Let’s build our realtime application\n\nBootstrapping with [A](https://github.com/angular/angular-cli)[ngular-cli](https://github.com/angular/angular-cli): \n```\n    npm install -g @angular/cli\n    ng new realtimeNgTable\n    cd realtimeNgTable\n```\nWe installed a command line interface to scaffold and build Angular apps globally. It exposes `ng` in our terminal for us to make use of the [commands](https://github.com/angular/angular-cli#generating-and-serving-an-angular-project-via-a-development-server) available. To confirm everything went well, run the below command on your terminal within the newly created app folder `/realtimeNgTable`.\n\n```\n    ng serve\n```\nYou should see this:\n\n![tables-angular-welcome-screen](//images.ctfassets.net/1es3ne0caaid/7Cw6E4WHFmaOogyKkK0MA/a660fc968171c614fd566c33c5e00d7d/tables-angular-welcome-screen.png)\n\nInstalling dependencies:\n```\n    npm install bootstrap open-iconic @theo4u/ng-alert pusher-js\n```\nOpen `.angular-cli.json` within our application root folder and update the `styles` field to look like so:\n```\n    \"styles\": [\n      \"../node_modules/bootstrap/dist/css/bootstrap.css\",\n      \"../node_modules/open-iconic/font/css/open-iconic-bootstrap.css\",\n      \"../node_modules/@theo4u/ng-alert/style.css\",\n      \"styles.css\"\n    ]\n```\nOpen `src/styles.css` and add the below CSS to it:\n\n``` css\n    /* You can add global styles to this file, and also import other style files */\n    .box-shadow { box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05); }\n    \n    /* ngAlert customization */\n    .app-level-alert {\n      padding-top: 10px;\n    }\n```\nWe added a utility style for adding shadows to our div and also for making our alert align later on.\n\nFinally, open `src/app/app.module.ts` to add `NgAlertModule` to the `imports` array: \n\n``` typescript\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule } from '@angular/core';\n    import { NgAlertModule } from '@theo4u/ng-alert';\n    import { AppComponent } from './app.component'; \n    \n    @NgModule({\n      declarations: [\n        AppComponent\n      ],\n      imports: [\n        BrowserModule,\n        NgAlertModule\n      ],\n      providers: [],\n      bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n```\nAt this point, we have successfully fixed our app dependencies and styling.\n\nNext, we need to create two services to manage our Pusher instance (we don’t have to always create a new instance of Pusher anytime we want to use it, we can use just one instance of it throughout the entire app) and our employees (interaction with the remote server and vice versa for employee’s data):\n\n```\n    ng g s services/pusher --spec false\n    ng g s services/employee --spec false\n    ng g i interfaces/iemployee\n```\nWe used another command of Angular CLI, which in full is `ng generate service path/name`. This creates a folder if not existing called `services/` and place our service files there. We also used `--spec false`  to let the Angular CLI know we don’t need to generate test file for the service file. The last comand generates an employee interface to help give an idea of what an employee object should have.\n\nOpen `src/app/services/pusher.service.ts` and update it to look like the one below:\n\n``` typescript\n    import { Injectable } from '@angular/core';\n    import * as Pusher from 'pusher-js';\n    \n    // this is here to discourage the instantianting of pusher any where its\n    // needed, better to reference it from one place\n    @Injectable()\n    export class PusherService {\n    private _pusher: any;\n    \n    constructor() {\n      this._pusher = new Pusher(API_KEY, {\n        cluster: CLUSTER,\n        encrypted: true\n      });\n    }\n    // any time it is needed we simply call this method\n    getPusher() {\n      return this._pusher;\n    }\n    \n    }\n```\nWe insert the free `API_KEY` and `CLUSTER` we get after [signing up](https://dashboard.pusher.com/accounts/sign_up) and creating a channel app with Pusher.\n\n\n\u003e After creating an app from Pusher’s dashboard, navigate to `App Keys` tab to see your app credentials \n\nTo ensure that connection traffic is encrypted, we set `encrypted` to the Boolean `true` in our app. Read more about client configuration [here](https://pusher.com/docs/client_api_guide).\n\nOpen `src/app/interfaces/iemployee.ts` and update it to look like so:\n``` typescript\n    export interface IEmployee {\n      id?: number;\n      name: string;\n      position: string;\n      salary: string;\n      createdAt?: string;\n    }\n```\nLet’s now move over to our `src/app/services/employee.service.ts`. This file will manage everything relating to employee and our server: \n``` typescript\n    // src/app/services/employee.service.ts\n    import { Injectable } from '@angular/core';\n    import { Observable } from 'rxjs/Observable';\n    import { HttpClient } from '@angular/common/http';\n    import { IEmployee } from '../interfaces/iemployee';\n    import 'rxjs/add/operator/map'; \n    import 'rxjs/add/operator/mapTo'; \n    import { PusherService } from './pusher.service';\n    \n    @Injectable()\n    export class EmployeeService {\n    private _endPoint = 'http://localhost:2000/employee'\n    private _channel: any;\n    \n    constructor(private _http: HttpClient, private _pusherService: PusherService) {\n      this._channel = this._pusherService.getPusher().subscribe('employee');\n    }\n    \n    /**\n     * @return employee's channel for the different event available under employee\n     */\n    getChannel () {\n      return this._channel;\n    }\n    \n    list (): Observable\u003cIEmployee[]\u003e {\n      return this._http.get(this._endPoint)\n      .map(res =\u003e \u003cIEmployee[]\u003e res);\n    }\n    \n    /**\n     * Create new employee\n     * @param param\n     * @return Observable\u003cIEmployee\u003e with the id\n     */\n    create(param: IEmployee): Observable\u003cIEmployee\u003e {\n      return this._http.post(this._endPoint, param)\n      .map(res =\u003e \u003cIEmployee\u003e res);\n    }\n    \n    /**\n     * Remove an employee\n     * @param employee to remove\n     * @return Observable\u003cIEmployee\u003e the employee just removed\n     */\n    delete(employee: IEmployee): Observable\u003cIEmployee\u003e {\n      return this._http.delete(`${this._endPoint}/${employee.id}`)\n      .mapTo(employee);\n    }\n    \n    }\n```\nObserve that we attached this service to the employee’s channel, which means anything that has to do with an employee and Pusher is within our employee’s service file.\n\nLet’s make our services available to be used by others from our `app.module.ts` by providing them also adding [HTTPClientModule](https://angular.io/guide/http) since it was used within `employee.service.ts` for http requests:\n``` typescript\n    // src/app/app.module.ts\n    import { EmployeeService } from './services/employee.service';\n    import { PusherService } from './services/pusher.service';\n    import { HttpClientModule } from '@angular/common/http'; \n    ...\n    imports: [\n      ...,\n      HttpClientModule\n      ],\n    providers:[EmployeeService, PusherService]\n```\n\n## Angular components to manage employees\n\nWe’ll now create two more components to list employees and create employees:\n\n```\n    ng g c listEmployee -is --spec false\n    ng g c createEmployee -is --spec false\n```\nUsing the Angular CLI, we generated a component with no test attached as explained earlier. It will create a folder for each containing a `.ts` and a `.html`. The `-is` command means don’t create a `.css` file instead use inline styling within our `.ts`. Since, we are not going to do alot or no styling within each component.\n\nLet’s start with the list employee component, it should look like our gif above. \nOpen `list-employee.component.html` and update it to look like so:\n\n``` html\n    \u003c!-- src/app/list-employee/list-employee.component.html --\u003e\n    \n    \u003ch6 class=\"pb-2 mb-0\"\u003eEmployees\u003c/h6\u003e\n    \u003ctable class=\"table\"\u003e\n      \u003cthead\u003e\n        \u003ctr\u003e\n          \u003cth scope=\"col\"\u003eName\u003c/th\u003e\n          \u003cth scope=\"col\"\u003ePosition\u003c/th\u003e\n          \u003cth scope=\"col\"\u003eSalary\u003c/th\u003e\n          \u003cth scope=\"col\"\u003eCreated At\u003c/th\u003e\n          \u003cth scope=\"col\"\u003eActions\u003c/th\u003e\n        \u003c/tr\u003e\n      \u003c/thead\u003e\n      \u003ctbody\u003e\n        \u003ctr *ngFor=\"let employee of employees\"\u003e\n          \u003ctd\u003e\n           \u003cspan *ngIf=\"employee.new\" class=\"badge badge-primary\"\u003enew\u003c/span\u003e\n           {{employee.name}}\n          \u003c/td\u003e\n          \u003ctd\u003e{{employee.position}}\u003c/td\u003e\n          \u003ctd\u003e{{employee.salary}}\u003c/td\u003e\n          \u003ctd\u003e{{employee.createdAt | date:'yyyy/MM/dd'}}\u003c/td\u003e\n          \u003ctd\u003e\n            \u003cbutton (click)=\"delete(employee)\" class=\"btn btn-danger btn-sm\"\u003e\n              \u003cspan class=\"oi oi-trash\"\u003e\u003c/span\u003e\n            \u003c/button\u003e\n          \u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr *ngIf=\"loading\"\u003e\n         \u003ctd colspan=\"5\" align=\"center\"\u003eFetching Employees\u003c/td\u003e\n        \u003c/tr\u003e\n      \u003c/tbody\u003e\n    \u003c/table\u003e\n```\nNext open `list-employee.component.ts` and update it with the code below:\n\n``` typescript\n    // src/app/list-employee/list-employee.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { EmployeeService } from '../services/employee.service';\n    import { IEmployee } from '../interfaces/iemployee';\n    import { NgAlertService, MessageType } from '@theo4u/ng-alert';\n    \n    @Component({\n      selector: 'app-list-employee',\n      templateUrl: './list-employee.component.html',\n      styles: []\n    })\n    export class ListEmployeeComponent implements OnInit {\n      employees: IEmployee[] = [];\n      loading = true;\n    \n      constructor(private _employeeService: EmployeeService, private _ngAlert: NgAlertService) { }\n    \n      ngOnInit() {\n        this.loading = true;\n        this._employeeService.list()\n          .subscribe(employees =\u003e {\n            this.loading = false;\n            this.employees = employees;\n          });\n      }\n    \n      delete(employee: IEmployee) {\n       // show delete confirmation with ngAlert\n        this._ngAlert.push({\n          message: `\u003cstrong\u003eAre you sure!\u003c/strong\u003e you want to delele this employee with name \u003cstrong\u003e${employee.name}\u003c/strong\u003e`,\n          type: MessageType.warning,\n          buttons: [\n            {\n              label: 'Continue',\n              action: () =\u003e {\n                this._actualDelete(employee);\n              },\n              css: 'btn btn-danger'\n            }\n          ]\n        });\n      }\n    \n      private _actualDelete (employee: IEmployee) {\n        this._employeeService.delete(employee)\n          .subscribe(() =\u003e {\n            // remove the employee if removed successfully\n            this.employees = this.employees.filter(item =\u003e item !== employee);\n            this._ngAlert.push({\n              message: `${employee.name} removed`,\n              type: MessageType.success\n            });\n          });\n      }\n    \n    }\n```\nHere, we are simply performing a normal loading and deleting of employees from our remote server via `EmployeeService`. \n\nLet’s go into our `create-employee.component.html`. Here, we’ll make use of [A](https://angular.io/api/forms/ReactiveFormsModule)[ngular’s reactive](https://angular.io/api/forms/ReactiveFormsModule) [form](https://angular.io/api/forms/ReactiveFormsModule): \n``` html\n    \u003c!-- src/app/create-employee/create-employee.component.html  --\u003e\n    \n    \u003ch6 class=\"pb-2 mb-0\"\u003eCreate Employees\u003c/h6\u003e\n    \n    \u003cform [formGroup]=\"employeeForm\" (ngSubmit)=\"onSubmit()\" novalidate\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"name\"\u003eName\u003c/label\u003e\n        \u003cinput formControlName=\"name\" type=\"text\" class=\"form-control\" id=\"name\" placeholder=\"Christian Nwamba\"\u003e\n         \u003csmall *ngIf=\"employeeForm.get('name').hasError('required')\" class=\"form-text text-danger\"\u003eName is required.\u003c/small\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"position\"\u003ePosition\u003c/label\u003e\n        \u003cselect formControlName=\"position\" class=\"form-control\" id=\"position\"\u003e\n          \u003coption\u003eManager\u003c/option\u003e\n          \u003coption\u003eHr\u003c/option\u003e\n          \u003coption\u003eDeveloper\u003c/option\u003e\n        \u003c/select\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"salary\"\u003eSalary\u003c/label\u003e\n        \u003cinput formControlName=\"salary\" type=\"text\" class=\"form-control\" id=\"salary\" placeholder=\"$12,000\"\u003e\n        \u003csmall *ngIf=\"employeeForm.get('salary').hasError('required')\" class=\"form-text text-danger\"\u003eSalary is required.\u003c/small\u003e\n      \u003c/div\u003e\n      \u003cbutton type=\"submit\" [disabled]=\"loader || employeeForm.invalid\" class=\"btn btn-primary\"\u003e{{loader?'Adding':'Add'}}\u003c/button\u003e\n    \u003c/form\u003e \n```\nOpen  `create-employee.component.ts` to manage our HTML template above. We are making use of the `.create` method in our employee’s service with reactive forms to validate entries easily under the `_createForm` method.\n\n``` typescript\n    // src/app/create-employee/create-employee.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { FormGroup, FormBuilder, Validators } from '@angular/forms';\n    import { EmployeeService } from '../services/employee.service';\n    import { IEmployee } from '../interfaces/iemployee';\n    \n    @Component({\n      selector: 'app-create-employee',\n      templateUrl: './create-employee.component.html',\n      styles: []\n    })\n    export class CreateEmployeeComponent implements OnInit {\n       employeeForm: FormGroup;\n       loader: boolean;\n    \n      constructor(private _fb: FormBuilder, private _employeeService: EmployeeService) { }\n    \n      ngOnInit() {\n        this._createForm();\n      }\n    \n      /**\n       * create our reactive form here\n       */\n      private _createForm() {\n        this.employeeForm = this._fb.group({\n          name: ['', Validators.required],\n          position: ['Manager', Validators.required],\n          salary: ['', Validators.required]\n        });\n      }\n    \n      /**\n       * submit new employee to server\n       */\n      onSubmit() {\n        const param = this.employeeForm.value;\n        this._employeeService.create(param)\n          .subscribe((employee: IEmployee) =\u003e {\n             this.loader = false;\n             this.employeeForm.reset({position: 'Manager'});\n          },\n            (error) =\u003e {\n              console.error(error);\n              this.loader = false;\n            });\n      }\n    \n    }\n```\n\n## Making use of our components\n\nLet’s call our component so we can test easily with our browser, open up `app.component.ts` and update it to look like so:\n``` typescript\n    // src/app/app.component.ts\n    \n    import { Component, OnInit, OnDestroy } from '@angular/core';\n    import { IMessage, MessageType, CloseType, NgAlertService } from '@theo4u/ng-alert';\n    import { Subscription } from 'rxjs/Subscription';\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent implements OnInit, OnDestroy {\n      message: IMessage;\n      closeTypes = CloseType;\n      private _alertSub: Subscription;\n    \n      constructor(private _ngAlert: NgAlertService) {\n      }\n    \n      ngOnInit () {\n         this._alertSub = this._ngAlert.getSource().subscribe(message =\u003e {\n          this.message = message;\n        });\n      }\n    \n      ngOnDestroy () {\n        this._alertSub.unsubscribe();\n      }\n    \n    }\n```\nMost of what is going on here is about managing our app level alerts. Anytime an alert is triggered from any component, we can easily get it here and we can also unsubscribe from it once we are done with the component.  Check the `delete` method in `list-employee.component.ts` to see where we push a confirmation message before deleting any employee.\n\nOpen `app.components.html` and let’s call our components side by side:\n\n``` html\n    \u003cdiv class=\"container\"\u003e\n      \u003c!-- Alert here --\u003e\n     \u003cdiv class=\"app-level-alert\"\u003e\n        \u003cng-alert [(message)]=\"message\" [dismissable]=\"true\" [closeType]=\"closeTypes.TIMES\"\u003e\u003c/ng-alert\u003e\n     \u003c/div\u003e\n      \u003c!-- /Alert here --\u003e\n      \n      \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-8\"\u003e\n          \u003cdiv class=\"my-3 p-3 bg-white rounded box-shadow\"\u003e\n            \u003capp-list-employee\u003e\u003c/app-list-employee\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"col-md-4\"\u003e\n          \u003cdiv class=\"my-3 p-3 bg-white rounded box-shadow\"\u003e\n            \u003capp-create-employee\u003e\u003c/app-create-employee\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \n    \u003c/div\u003e\n```\nOur final `app.module.ts` should now be like this:\n``` typescript\n    // src/app/app.module.ts\n    \n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule } from '@angular/core';\n    import { NgAlertModule } from '@theo4u/ng-alert';\n    import { AppComponent } from './app.component';\n    import { CreateEmployeeComponent } from './create-employee/create-employee.component';\n    import { ListEmployeeComponent } from './list-employee/list-employee.component';\n    import { EmployeeService } from './services/employee.service';\n    import { ReactiveFormsModule } from '@angular/forms';\n    import { HttpClientModule } from '@angular/common/http';\n    import { PusherService } from './services/pusher.service';\n    \n    @NgModule({\n      declarations: [\n        AppComponent,\n        CreateEmployeeComponent,\n        ListEmployeeComponent\n      ],\n      imports: [\n        BrowserModule,\n        ReactiveFormsModule,\n        NgAlertModule,\n        HttpClientModule\n      ],\n      providers: [EmployeeService, PusherService],\n      bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n```\nOur app behaviour should now look like this:\n\n![tables-angular-stage-1](//images.ctfassets.net/1es3ne0caaid/4J8haYXbrWI0y6M4KqW0GI/fa2c60b9866a4d83afceeeef3b5ef16f/tables-angular-stage-1.gif)\n\n\nWe have to always refresh our page to get newly added employees or deleted employees, next section will handle this.\n\n\n## Integrating Pusher for realtime table updates\n\nPusher is a hosted service that makes it super-easy to add realtime data and functionality to web and mobile applications. Pusher sits as a realtime layer between your servers and your clients. Pusher also maintains persistent connections to the clients over WebSocket if possible and falling back to HTTP-based connectivity so that as soon as your servers have new data that they want to push to the clients they can do, instantly via Pusher.\n\nWe’ll use Pusher’s event based API know as [**Pusher Channels**](https://pusher.com/channels). All we need to do is to subscribe to a particular channel like `employee` ( `employee.service.ts` `getChannel()` method) and watch for any event type (new, deleted) emitted and know how to handle the data coming along with the event. \n\nOpen `list-employee.component.ts` to spice it up with Pusher. We are watching for *new* and *deleted* employees, add the following to `ngOnInit` method:\n``` typescript\n      // subscribe to pusher's event\n        this._employeeService.getChannel().bind('new', data =\u003e {\n          data.new = true;\n          this.employees.push(data);\n        });\n    \n        this._employeeService.getChannel().bind('deleted', data =\u003e {\n          this.employees = this.employees.filter(emp =\u003e emp.id !== data.id);\n        });\n```\nAnytime a new/deleted record is received we get the data as well and then manipulate our array of employees. When a record is added we need to let the user know that this record just came in using `data.new=true` , which was used in our `list-employee.component.html` to show a new label.\nNow, try deleting or adding a record from another browser window, the current one should be updated. \n\n## Integrating Pusher to our Node server\n\nOur server is simply going to simulate an actual DB and routes to create, delete and get employees from a mock array object as our DB. Also, obeying the [twelve-factor](https://12factor.net/) approach to handling configurations for our server. Open your terminal within our application folder `/realtimeNgTable` and run the following commands:\n\n```\n    npm install express body-parser cors pusher dotenv shortid\n    touch server.js\n    touch mocks.js\n    touch .env\n```\nMock is simply going to export our initial list of employees, like so:\n``` javascript\n    // src/mocks.js\n    module.exports = [\n      {\n        id: 'S1234X',\n        name: 'Christian Nwamba',\n        position: 'Manager',\n        salary: '$13,000',\n        createdAt: new Date().toISOString()\n      },\n      {\n        id: 'S1234Y',\n        name: 'Prosper Otemuyiwa',\n        position: 'Hr',\n        salary: '$12,500',\n        createdAt: new Date().toISOString()\n      },\n      {\n        id: 'S1234Z',\n        name: 'Theophilus Omoregbee',\n        position: 'Developer',\n        salary: '$10,500',\n        createdAt: new Date().toISOString()\n      }\n    ]\n```\nLet’s setup our server in `server.js`: \n``` javascript\n    //server.js\n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const Pusher = require('pusher')\n    const cors = require('cors')\n    const dotenv = require('dotenv').config()\n    const shortId = require('shortid')\n    let mocks = require('./mocks')\n    \n    const app = express()\n    app.use(cors())\n    app.use(bodyParser.urlencoded({ extended: false }))\n    app.use(bodyParser.json())\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APPID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.PUSHER_CLUSTER,\n      encrypted: true\n    })\n    \n    app.post('/employee', (req, res) =\u003e {\n      // simulate actual db save with id (using shortId) and createdAt added\n      const employee = {\n        id: shortId.generate(),\n        createdAt: new Date().toISOString(),\n        ...req.body\n      }\n      mocks.push(employee) // like our db\n      // trigger this update to our pushers listeners\n      pusher.trigger('employee', 'new', employee)\n      res.send(employee)\n    })\n    \n    app.delete('/employee/:id', (req, res) =\u003e {\n      const employee = mocks.find(emp =\u003e emp.id === req.params.id)\n      mocks = mocks.filter(emp =\u003e emp.id !== employee.id)\n      pusher.trigger('employee', 'deleted', employee)\n      res.send(employee)\n    })\n    \n    app.get('/employee', (req, res) =\u003e {\n      res.send(mocks)\n    })\n    \n    app.listen(2000, () =\u003e console.log('Listening at 2000'))\n```\nWe instantiated Pusher with environment parameters, as said earlier on we are sticking with the twelve-factor approach, where we use `.env` file to pass environment variables to our `server.js`.\n\nLet’s populate our `.env`  file with our Pusher credentials\n```\n    PUSHER_APPID=YOUR_APP_ID\n    PUSHER_KEY=YOUR_APP_KEY\n    PUSHER_SECRET=YOUR_APP_SECRET\n    PUSHER_CLUSTER=YOUR_APP_CLUSTER\n```\nFinally, running the below command in our terminal should start the node server\n```\n    node server.js\n```\nAny time a new record is created we trigger the event to everyone who subscribed to the channel with the event type and additional data to pass across.\n\n\n## Conclusion\n\nWith this sample realtime Angular table, we can definitely build more with Pusher’s [channel](https://pusher.com/channels) event-based APIs to handle any form of realtime update needed in our [Angular](https://angular.io/) application. You can extend this sample application to handle edit by triggering another type of event and the data as `{id, data}`. With the `id` of the record that got updated from the server and the `data` as the changes.  Source code for both the frontend and the backend node server is located on [Github](https://github.com/christiannwamba/realtime-ng-table).","metaTitle":"Build a realtime table with Angular","metaDescription":"This tutorial takes you through building an Angular web app. The app displays a table designed to update in realtime to reflect changes in the database."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5apY2048FqkwOw2Kssywyo","type":"Entry","createdAt":"2018-05-08T07:24:27.718Z","updatedAt":"2018-05-08T08:44:50.671Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime poll using Angular","url":"live-poll-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/angular-pusher-polls","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-05-07","description":"Build a polling application in Angular. Use Chart.js to visualize voting results in realtime.","prerequisite":"You will need Node and npm or Yarn installed on your machine. A basic knowledge of Angular and Node is required.","content":"An electronic polling system allows users cast their votes with ease without the hassle and stress of visiting a polling booth. This makes it easily accessible as it can be used by users anywhere in the world. Adding realtime functionality to the application improves the user experience as votes are seen in realtime. \n\nUsing [Angular](https://angular.io) you can extend the template language with your own components and use a wide array of existing components. \n\nTo follow this tutorial a basic understanding of Angular and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nIf you have no prior knowledge of Angular, kindly follow the tutorial [here](https://angular.io/tutorial). Come back and finish the tutorial when you’re done.\n\nWe’ll be using these tools to build out our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Angular](https://angular.io)\n- [Charts.js](http://www.chartjs.org/)\n\nWe’ll build a realtime polling application using Pusher , Angular and charts.js for data visualization.\n\nUsing our application users will get to vote for their favourite soccer player in the English Premier League.\n\nHere’s a demo of the final product:\n\n![angular-football-poll-demo](//images.ctfassets.net/1es3ne0caaid/40eDTb6o120IccY2CYEkym/3dfde317705621dccbdabdcb2b97a90d/angular-football-poll-demo.gif)\n\nWe’ll send our votes to the server and with the help of Pusher, update our polls in realtime. To make use of Pusher you’ll have to create an account [here](https://pusher.com). \n\nLet’s build!\n\n\n## Setup and folder structure\n\nTo get started, we will use the [CLI](https://cli.angular.io/) (command line interface) provided by the Angular team to initialize our project.\n\nFirst, install the CLI by running `npm install -g @angular/cli`. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [N](https://nodejs.org/en/)[ode](https://nodejs.org/en/) installed.\n\nTo create a new Angular project using the CLI, open a terminal and run  \n`ng new angular-realtime-polling` `--``style=scss`\n\nThe command is simply telling the CLI to create a new project called `angular-realtime-polling` and it should make use of the CSS pre-processor SCSS rather than CSS for styling.\n\nOpen the newly created `angular-realtime-polling`. Your folder structure should look something like this:\n\n```\n    angular-realtime-polling/\n      e2e/\n      node_modules/\n      src/\n        app/\n          app.component.html\n          app.component.ts\n          app.component.css\n          ...\n```\nOpen a terminal inside the project folder and start the application by running `ng serve` . If you open your browser and visit the link `http://localhost:4200` you should see the screenshot below if everything went well.\n\n![tables-angular-welcome-screen](//images.ctfassets.net/1es3ne0caaid/7Cw6E4WHFmaOogyKkK0MA/a660fc968171c614fd566c33c5e00d7d/tables-angular-welcome-screen.png)\n\n##  Building our server\n\nNow that we have our Angular application running, let’s build our server.\n\nTo do this we’ll need to install [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/). We’ll use this to receive requests from our Angular application.\n\nRun `npm install express` on a terminal inside the root folder of your project to install Express.\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: 'eu',\n      encrypted: true,\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nWe referenced three packages that haven’t been installed, `body-parser`,  `pusher`  and `dotenv`. Install these packages by running `npm i body-parser pusher dotenv` in your terminal.\n\nThe `body-parser` package is used to parse incoming request bodies in a middleware before your handlers, available under the `req.body` property.\n\nThe calls to our endpoint will be coming in from a different origin, therefore we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nThis is a standard Node application configuration, nothing specific to our app.\n\nAlso you’ll notice that we installed [Pusher](https://pusher.com) library as a dependency.  Create a Pusher account and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`.\n\nThe last package, [dotenv](https://www.npmjs.com/package/dotenv) is a zero-dependency module that loads environment variables from a `.env` file into [process.env](https://nodejs.org/docs/latest/api/process.html#process_process_env). \n\nWe use this package so we don’t add sensitive information like our `appId` and `secret` directly into our code. To get these values loaded into our environment, we'll create a `.env` file in the root of our project. \n\nYour `.env` file should look something like the snippet below. We’ll add our Pusher `appId`, `key` and `secret` provided here.\n\n```\n    PUSHER_APP_ID=\u003cAPP_ID\u003e\n    PUSHER_KEY=\u003cPUSHER_KEY\u003e\n    PUSHER_SECRET=\u003cPUSHER_SECRET\u003e\n```\n\nIf you noticed, I added the `dotenv` package at the start of our file. This is done because we need to make the variables available throughout the file.\n\nPlease ensure you replace the following placeholder values above with your Pusher `appId`, `key` and `secret`.\n\n\n## Send votes\n\nTo enable users send requests to the server, we’ll create a route to handle incoming requests. Update your `server.js`  file with the code below. \n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    \n    app.post('/vote', (req, res) =\u003e {\n      const { body } = req;\n      const { player } = body;\n      pusher.trigger('vote-channel', 'vote', {\n        player,\n      });\n      res.json({ player });\n    });\n    \n     ...\n```\n\n- We created a `POST /vote` route which, when hit, triggers a Pusher event.\n- We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the body of the request and also the player info sent by the user.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`vote-channel`), an event name (`vote`), and a payload.\n- The payload can be any value, but in this case we have a JS object. This object contains the name of the player being voted for\n- We still go ahead to respond with an object containing the voted player string so we can update the frontend with the data\n\n\n## Polling view\n\nOpen the `app.component.html` file and replace it with the content below.\n\n``` html\n    // app.component.html\n    \n    \u003cdiv\u003e\n      \u003ch2\u003eVote for your player of the season\u003c/h2\u003e\n      \u003cul\u003e\n        \u003cli *ngFor=\"let player of playerData\"\u003e\n          \u003cimg [src]=\"player.image\" [alt]=\"player.name\" (click)=\"castVote(player.shortName)\" [ngClass]=\"getVoteClasses(player.shortName)\"\u003e\n          \u003ch4\u003e{{player.name}}\u003c/h4\u003e\n          \u003cp\u003e{{player.goals}} goals\u003c/p\u003e\n          \u003cp\u003e{{player.assists}} assists\u003c/p\u003e\n        \u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/div\u003e\n```    \n\nIn the code snippet above, we looped through `playerData` to create a view based on the player’s information. \n\nThere are some undefined variables in code snippet above, don’t panic yet, we’ll define them in our component file below.\n\n### Styling\n\n``` scss\n    // app.component.scss\n    \n    div {\n      width: 60%;\n      margin: auto;\n      text-align: center;\n      ul {\n        list-style: none;\n        padding-left: 0;\n        display: flex;\n        justify-content: center;\n        li {\n          padding: 20px;\n          img {\n            width: 100px;\n            height: 100px;\n            border-radius: 50%;\n            box-shadow: 0 3px 4px 1px rgba(0, 0, 0, 0.1);\n            filter: grayscale(1);\n            border: 4px solid rgba(0, 0, 0, 0.2);\n            cursor: pointer;\n            \u0026.elect {\n              border: 3px solid rgb(204, 54, 54);\n              box-shadow: 0 4px 7px 1px rgba(0, 0, 0, 0.1);\n              filter: grayscale(0);\n              cursor: default;\n            }\n            \u0026.lost {\n              box-shadow: unset;\n              border: 4px solid rgba(0, 0, 0, 0.1);\n              \u0026:hover {\n                filter: grayscale(1);\n                cursor: default;\n              }\n            }\n            \u0026:hover {\n              filter: grayscale(0);\n            }\n          }\n          h4 {\n            font-size: 16px;\n            opacity: 0.9;\n            margin-bottom: 8px;\n            font-weight: lighter;\n          }\n          p {\n            font-size: 14px;\n            opacity: 0.6;\n            font-weight: bold;\n            margin: 4px 0;\n          }\n        }\n      }\n    }\n```    \n\nThese styles are meant to add a bit of life to our application. It also helps distinguish between states during application use. For example: the voted player is highlighted with a red border\n\n### App component\n\nIn the HTML snippet we made reference to some variables that weren’t yet defined, we’ll create the variables here with the logic behind our application. \n\n``` typescript\n    // app.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.scss'],\n    })\n    export class AppComponent implements OnInit {\n      constructor(private http: HttpClient) {}\n      event = 'vote';\n      vote = '';\n      voted = false;\n      playerData = [\n        {\n          name: 'Mo. Salah',\n          goals: 30,\n          assists: 12,\n          shortName: 'salah',\n          image: 'https://platform-static-files.s3.amazonaws.com/premierleague/photos/players/250x250/p118748.png'\n        },\n        {\n          name: 'Christian Eriksen',\n          goals: 8,\n          assists: 13,\n          shortName: 'eriksen',\n          image: 'https://platform-static-files.s3.amazonaws.com/premierleague/photos/players/250x250/p80607.png',\n        },\n        {\n          name: 'Harry Kane',\n          goals: 26,\n          assists: 5,\n          shortName: 'kane',\n          image:\n            'https://platform-static-files.s3.amazonaws.com/premierleague/photos/players/40x40/p78830.png',\n        },\n        {\n          name: \"Kevin De'bruyne\",\n          goals: 10,\n          assists: 17,\n          shortName: 'kevin',\n          image: 'https://platform-static-files.s3.amazonaws.com/premierleague/photos/players/40x40/p61366.png',\n        },\n      ];\n      voteCount = {\n        salah: 0,\n        kane: 0,\n        eriksen: 0,\n        kevin: 0,\n      };\n      \n      castVote(player) {\n        this.http\n          .post(`http://localhost:4000/vote`, { player })\n          .subscribe((res: any) =\u003e {\n            this.vote = res.player;\n            this.voted = true;\n          });\n      }\n      \n      getVoteClasses(player) {\n        return {\n          elect: this.voted \u0026\u0026 this.vote === player,\n          lost: this.voted \u0026\u0026 this.vote !== player,\n        };\n      }\n      \n      ngOnInit() {\n      }\n    }\n```    \n\n\n- **castVote:** this method makes use of the native httpClient service to make requests to our server. It sends the name of the player being voted for in a POST request to the server. When a response is returned, it sets the `voted` property to `true` signifying that the user has placed a vote. Also, it sets the `vote` property to the name of the player being voted.\n- **getVoteClasses:**  this method sets classNames on each player element based on if a player was voted for or not.\n\nTo make use of the `HttpClient` service, we’ll need to import the `HttpClientModule` into the `app.module.ts` file. Update your app module file as follows:\n\n``` typescript\n    // app.module.ts\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule } from '@angular/core';\n    import { AppComponent } from './app.component';\n    import {HttpClientModule} from '@angular/common/http';\n    \n    ....\n    @NgModule({\n      declarations: [AppComponent],\n      imports: [BrowserModule, HttpClientModule],\n      providers: [],\n      bootstrap: [AppComponent],\n    })\n      ....\n```\n\nBy now our application should look like this:\n\n![angular-football-poll-stage-1](//images.ctfassets.net/1es3ne0caaid/4DICk1XDSU26iq0CAMcgy6/5ac4b4f82450b5328b9d6ab0cc965411/angular-football-poll-stage-1.png)\n\n## Introducing Pusher\n\nSo far we have an application that enables users to cast votes but we have no way of keeping track of how others voted in realtime. We also have no way of visualizing the polling data. To solve both these problems, we’ll include the [Pusher](https://pusher.com) library and [Chart.js](http://www.chartjs.org/) for data visualization. \n\nOpen a terminal in the root folder of the project and install these packages by running the following command:\n\n `npm install pusher-js chart.js ng2-charts`\n\nTo make both libraries available in our project we’ll add the libraries as third party scripts to be loaded by Angular CLI. All CLI config is stored in `.angular-cli.json` file. Modify the `scripts` property to include the link to `pusher.min.js`. and `chart.js` files.\n\n``` json\n    // .angular-cli.json\n    ...\n    \n    \"scripts\": [\n      \"../node_modules/pusher-js/dist/web/pusher.min.js\",\n      \"../node_modules/chart.js/src/chart.js\"\n    ]\n     ...\n```         \n\nAfter updating this file, you’ll need to restart the angular server so that the CLI compiles the new script files we’ve just added.\n\nNow that Pusher has been made available in our project, we’ll create a Pusher service to be used application wide. The Angular CLI can aid in the service creation.  Open a terminal in your project’s root folder and run the following command.\n```\nng generate service pusher\n```\nThis command simply tells the CLI to generate a service named `pusher`. Now open the `pusher.service.ts` file and update it with the code below.\n\n``` typescript\n    // pusher.service.ts\n    \n    import { Injectable } from '@angular/core';\n    \n    declare const Pusher: any;\n    \n    @Injectable()\n    export class PusherService {\n      constructor() {\n        var pusher = new Pusher('\u003cPUSHER_KEY\u003e', {\n          cluster: 'eu',\n          encrypted: true,\n        });\n        this.channel = pusher.subscribe('vote-channel');\n      }\n      channel;\n      \n      public init() {\n        return this.channel;\n      }\n    }\n```    \n\n\n- First, we initialize Pusher in the constructor. \n- The  `init` method returns the Pusher property we created. \n- Ensure you replace the `PUSHER_KEY` string with your actual Pusher key.\n  \n\nTo make the service available application wide, import it into the module file.\n\n``` typescript\n    // app.module.ts\n    import {PusherService} from './pusher.service'\n    ...\n    \n    @NgModule({\n       ....\n       providers: [PusherService],\n       ....\n     })\n```\n \n We’ll make use of this service in our component, by binding to the vote event and incrementing the votes of the voted player returned in the event. This will be done in the `ngOnInit` lifecycle.\n\n``` typescript\n    // app.component.ts\n    import { Component, OnInit } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    import { PusherService } from './pusher.service';\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.scss'],\n    })\n    export class AppComponent implements OnInit {\n      constructor(private pusher: PusherService, private http: HttpClient) {}\n      ...\n      \n      ngOnInit() {\n        const channel = this.pusher.init();\n        channel.bind('vote', ({ player }) =\u003e {\n          this.voteCount[player] += 1;\n        });\n      }\n    }\n```\n\n## Data visualization\n\nNow that our application has been built out, we’ll need to visualize the voting process using charts. This is vital because we need a way to determine the winner of the polls and how each person voted.\n\nTo make use of charts in our application, we’ll import the `ChartsModule` into our `app.module.ts` file.\n\n``` typescript\n    // app.module.ts\n    import {ChartsModule} from 'ng2-Charts';\n    ....\n    \n    @NgModule({\n      declarations: [AppComponent],\n      imports: [BrowserModule, HttpClientModule, ChartsModule],\n      providers: [PusherService],\n      bootstrap: [AppComponent],\n    })\n      ....\n```\n\nWe can then use the `canvas` component to provide visualization. Make the following changes to your `app.component.ts`, html and css files.\n\n``` typescript\n    // app.component.ts\n    ...\n    \n    playerData = [\n        {\n          name: 'Mo. Salah',\n          goals: 30,\n          assists: 12,\n          shortName: 'salah',\n          image:\n            'https://platform-static-files.s3.amazonaws.com/premierleague/photos/players/250x250/p118748.png',\n        }\n        ...\n      ];\n     voteCount = {\n        salah: 0,\n        kane: 0,\n        eriksen: 0,\n        kevin: 0,\n      };\n     chartLabels: string[] = Object.keys(this.voteCount);\n     chartData: number[] = Object.values(this.voteCount);\n     chartType = 'doughnut';\n    \n     ...\n     \n     ngOnInit() {\n        const channel = this.pusher.init();\n        channel.bind('vote', ({ player }) =\u003e {\n          this.voteCount[player] += 1;\n          // Update the chartData whenever there's a new vote\n          this.chartData = Object.values(this.voteCount);\n        });\n       }\n     } \n```\n    \n\n**chartLabels**:  we provide labels for our chart using the keys of the `voteCount` object.\n**chartData:**  the chart data will make use of the values of the `voteCount` object which signifies the vote count of each player.\n**chartType**: we specify the chart type we’ll use.\n\nWe also made a few changes to the `ngOnInit` lifecycle. We update the chartData values whenever there’s a new vote event.\n\n``` html\n    // app.component.html\n    \n    \u003cdiv\u003e\n        ...\n        \u003c/li\u003e\n      \u003c/ul\u003e\n      \n      \u003cdiv class=\"chart-box\" *ngIf=\"voted\"\u003e\n        \u003ch2\u003eHow others voted\u003c/h2\u003e\n        \u003ccanvas baseChart [data]=\"chartData\"\n        [labels]=\"chartLabels\" [chartType]=\"chartType\"\u003e\n        \u003c/canvas\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n\n\n    // app.component.scss\n    ...\n    \n    .chart-box{\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n    }\n```\n\n At this point, your application should have realtime updates when votes are placed. Ensure that the server is running alongside the Angular development server. If not, run `node server` and `ng serve` in two separate terminals. Both terminals should be opened in the root folder of your project.\n \n![angular-football-poll-complete](//images.ctfassets.net/1es3ne0caaid/3T73HIMEvCmmQwOCy4aMg6/d284da771bc3d8794939971c84bbfbf5/angular-football-poll-complete.png)\n \nTo test the realtime functionality of the application, open two browsers side-by-side and place votes. You’ll notice that votes placed on one reflect on the other browser.\n\n\n## Conclusion\n\nUsing Pusher,  we’ve built out an application using the pub/sub pattern without having to set up a WebSocket server. This shows how powerful Pusher is and how easy it is to set up. You can find the demo for this article on [Github](https://github.com/christiannwamba/angular-pusher-polls).","metaTitle":"Build a realtime poll using Angular","metaDescription":"This tutorial will show you how to build a polling web application with Angular and Node. You will use Chart.js to display the voting results in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2uXH4790aAKiQUMswwWcmm","type":"Entry","createdAt":"2018-02-28T12:22:30.031Z","updatedAt":"2018-02-28T16:26:48.079Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Making Angular 5 realtime with WebSockets","url":"angular-realtime","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/angular5-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}}],"reviewDate":"2018-02-23","description":"Build an app with realtime features in Angular 5 and Pusher.","prerequisite":"A basic understanding of Angular 5 and Node.js is needed to follow this tutorial.","content":"The demand for realtime functionality in applications these days has grown tremendously. People want to see how users interact with their applications in realtime. Here comes Pusher, allowing you to add realtime functionality to your application by using concepts such as events and channels. In this article, we are going to look at how to add realtime functionality to your Angular 5 application. \n\n\n## Introduction\n\nWe are going to make an application that gives realtime feedback when a picture is liked. In other words, you get to see in realtime when users like a picture - interesting, right? To do this, we will be using [Angular](https://angular.io) 5 and [Pusher](https://pusher.com) API. \n\n![angular-realtime-likes](//images.contentful.com/1es3ne0caaid/6DOzL2ede8i4E6KMYUA8sy/3b027d45e96b87e142bcb45b3b973c0a/angular-realtime-likes.png)\n\n## Getting started\n\nTo get started, you need to make sure your have [Node](https://nodejs.org) and [NPM](https://npmjs.com) installed on your machine. You can confirm you installation by running:\n\n```\n    npm --version\n    node --version\n```\n\nIf you get version numbers as results then you have them installed. Node 6+ and NPM 4+ should be your target.\n\n## Building the Angular 5 application\n\nNow we are not going to dwell too much on the intricacies of building an Angular application, rather, we will be more concerned about adding realtime functionality to the application itself.\n\nTo create your Angular application, you need to ensure that you have Angular 5 installed on your machine. You can confirm your installation by running:\n\n```\n    ng --version\n```\n\nIf you don’t have Angular installed or your version is less than 1.2, run this command in your terminal:\n\n```\n    npm install -g @angular/cli\n```\n\nFor more information about Angular basics, head [here](https://angular.io).\n\nWe can now create our application by running: \n\n```\n    ng new angular5-pusher\n```\n\nAfter running this, we get a basic Angular starter project which we are going to build upon.\n\n\n## App component \n\nNow the view of the application is pretty simple. We have an image, a button to like the image and the count of images that have been liked. The `app.component.html` file looks like this:\n\n```\n    \u003cdiv class=\"main-app\"\u003e\n      \u003ch1\u003e\n        {{ title }}!\n      \u003c/h1\u003e\n      \u003cimg width=\"300\" alt=\"Pusher Logo\" src=\"../assets/pusher.svg\" /\u003e\n      \u003cdiv class=\"like\"\u003e\n        \u003cdiv style=\"margin-right: 1rem\"\u003e\n          \u003ch2\u003e{{ likes }} likes\u003c/h2\u003e\n        \u003c/div\u003e\n        \u003cbutton class=\"btn btn-lg btn-success\" (click)=\"liked()\"\u003eLike Image\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nWe can see from the above that the `buttonClick` event has been tied to a function called `liked()` which we will take a look at now.\n\nIn our `app.component.ts` file, we have the following: \n\n```\n    import { Component, OnInit } from '@angular/core';\n    //..\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    \n    export class AppComponent implements OnInit {\n      title = 'Pusher Liker';\n      likes: any =  10;\n      \n      constructor() {\n        // the pusher service will be injected as part of the constructor later\n      }\n      ngOnInit() {\n        // ..\n      }\n      // add to the number of likes to the server\n      liked() {\n        this.likes = parseInt(this.likes, 10) + 1;\n        // ..\n      }\n    }\n```\n\nNow we can see when we examine the component that we specify the `title` and the number of `likes` for starters. \n\n**NB:** In a real world application, you will want to make a request to your backend server to get the actual number of likes instead of  using static data.\n\nWe can also see that we plan on injecting a `pusherService` in the constructor of our app component. We are going to explain more about this in the next section.\n\n## Adding Pusher to your application\n\nAt this point, we have our application that allows us to like pictures, but other users don’t get realtime feedback as to the number of likes the picture actually has. In comes [Pusher](https://pusher.com) to save the day. Pusher allows you to add realtime functionality to your application without you having to stress so much about the logic of making this work.\n\nAll you need to do is to  `subscribe` to a channel and then `listen` for `events` - in simpler terms it’s like turning on a TV to a football match (channel ) and then waiting for a team to score a goal ( event ).\n\nNow lets see how to add this to our existing Pusher Liker Application .To use Pusher with Angular, we first need to install and load Pusher’s client library:\n\n```\n    npm install --save pusher-js\n```\n\nNow that we have successfully installed the library, the next thing we need to do is to add it as one of the third party scripts that will be loaded by Angular when our page is being loaded.\n\nIn the `.angular-cli.json` we include the following:\n\n\n    //...\n    \n    \"scripts\": [\"../node_modules/pusher-js/dist/web/pusher.min.js\"]\n    \n    //...\n\nNow lets get to using the pusher client.\n\nEarlier on, we spoke about the `PusherService` and now we are going to see how it works. In angular, there is a concept called `services` - which, as the name suggests,  helps you to do one thing really well. \n\nWe create our `PusherService` by running the command:\n\n```\n    ng generate service Pusher\n```\n\nThis creates the `pusher.service.ts`  and `pusher.service.spec.``ts` files. We are only going to be concerned with the `pusher.service.ts`\n\nAt he top of the `pusher.service.``ts` file we declare our Pusher constant so that Angular knows that we know what we are doing, and we are going to use the `Pusher` class from an external script which we loaded earlier:\n\n```\n    // pusher.service.ts \n    declare const Pusher: any;\n    // ...\n```\n\n \n Then, we import the necessary classes we are going to need:\n \n```\n    // .... pusher.service.ts\n    import { Injectable } from '@angular/core';\n    import { environment } from '../environments/environment';\n    import { HttpClient } from '@angular/common/http';\n    // .....\n```\n \nIf you used older versions of Angular, the new `HttpClient` may seem strange to you because it was just introduced with this new version to make life easier for Angular developers. With this new `HttpClient`, responses are defaulted to `JSON` and interceptors are now being used for easier error handling. You can read more about it [here](https://angular.io/api/common/http/HttpClient).\n\nWe also included the `environment` class, which contains some enviroment variables for pusher to work. The `enviroment.ts` file looks like this:\n\n```\n    // ... environment.ts \n    export const environment = {\n      production: false,\n      pusher: {\n        key: 'PUSHER_API_KEY',\n        cluster: 'PUSHER_CLUSTER',\n      }\n    };\n```\n\nThese details can be obtained from your Pusher app [dashboard](https://dashboard.pusher.com/).\n\nTo create a new app:\n1. Click “Create New App” from the left sidebar.\n2. Configure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n  \n![angular-realtime-create-app](//images.contentful.com/1es3ne0caaid/4xyhbHkzOEWwYACWQMUsy8/77b6407f347fd38dd348ec6e9478c4b1/angular-realtime-create-app.png)\n \n Now, back to our `pusher.service.``ts` file:\n \n```\n    //...pusher.service.ts\n    @Injectable()\n    export class PusherService {\n      pusher: any;\n      channel: any;\n      constructor(private http: HttpClient) {\n        this.pusher = new Pusher(environment.pusher.key, {\n          cluster: environment.pusher.cluster,\n          encrypted: true\n        });\n        this.channel = this.pusher.subscribe('events-channel');\n      }\n      \n      like( num_likes ) {\n        his.http.post('http://localhost:3120/update', {'likes': num_likes})\n        .subscribe(data =\u003e {});\n      }\n    }\n```\n \nIn the constructor for the `PusherService` , we included the `HttpClient` and  then `subscribed` to the `events-channel` . We also have another function that makes a `POST` request to our backend server with the number of likes as part of the `body`  of the request when the `like` button is clicked. \n\n\u003e NB : The implementation details of our  backend server will be built later in the article\n\nNow we will go back to our `app.component.``ts` file to see how we factor in the new Pusher service:\n\n```\n    //-- app.component.ts\n    import { Component, OnInit } from '@angular/core';\n    import { PusherService } from './pusher.service';\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent implements OnInit {\n      title = 'Pusher Liker';\n      likes: any =  10;\n      constructor(private pusherService: PusherService) {\n      }\n      ngOnInit() {\n        this.pusherService.channel.bind('new-like', data =\u003e {\n          this.likes = data.likes ;\n        });\n      }\n      // add to the number of likes to the server\n      liked() {\n        this.likes = parseInt(this.likes, 10) + 1;\n        this.pusherService.like( this.likes );\n      }\n    }\n```\n\nIn the above, we import the `pusherService` and then add it to our constructor. Now, when the component is created, we then bind the `pusherService` to the `new-like` event and we update the number of likes with the new number of likes that we get.\n\nNow you may be wondering, “it’s cool that we can now tell when the number of likes have increased and the update them, but what when someone actually clicks the button, what triggers the event?”\n\nAs we can see in the `liked()` function above, the `pusherService.like()` is also called to help make the request to the backend server to actually trigger the like event. \n\nNow that our front-end is ready, we can run the application by running:\n\n```\n    npm start\n```\n\n![angular-realtime-demo](//images.contentful.com/1es3ne0caaid/zuNaz7pMFaK8oeuey4As8/ef9d1369c3af410d0afc5d88a2e0be5f/angular-realtime-demo.gif)\n\n## Building the backend Server\n\nNow, we’ll take a quick look at the backend server that triggers the event and how it works. In the project directory we create a folder called `server` and in there is where we do all the work:\n\n```\n    mkdir server\n```\n\nIn the `server` directory, we run:\n\n```\n    npm init\n```\n\nAnd then we install the necessary modules we are going to need:\n\n```\n    npm install --save cors pusher express body-parser dotenv\n```\n\nOnce that’s done, we can now create our `server.js` in the same directory \n\nIn our `server.js` file, we do the following: \n\n### Import Node modules\n\n```\n    // -------------------------------\n    // Import Node Modules\n    // -------------------------------\n    require(\"dotenv\").config();\n    const cors = require(\"cors\");\n    const Pusher = require(\"pusher\");\n    const express = require(\"express\");\n    const bodyParser = require(\"body-parser\");\n```\n\n### Create app and load Middlewares\n\n```\n    // ------------------------------\n    // Create express app\n    // ------------------------------\n    const app = express();\n    // ------------------------------\n    // Load the middlewares\n    // ------------------------------\n    app.use(cors());\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n```\n\n### Create Pusher client\n\n```\n    // ....\n    const pusher = new Pusher({\n        appId: `${process.env.PUSHER_APP_ID}`,\n        key: `${process.env.PUSHER_API_KEY}`,\n        secret: `${process.env.PUSHER_API_SECRET}`,\n        cluster: `${process.env.PUSHER_APP_CLUSTER}`,\n        encrypted: true\n    });\n```\n\nNow add a `.env` file at the root of the `server`  folder with the following lines:\n\n```\n    PUSHER_APP_ID=[PUSHER_APP_ID]\n    PUSHER_API_KEY=[PUSHER_API_KEY]\n    PUSHER_API_SECRET=[PUSHER_API_SECRET]\n    PUSHER_APP_CLUSTER=[PUSHER_APP_CLUSTER]\n```\n\nThese details for the Pusher client can be obtained from your [Pusher dashboard](https://dashboard.pusher.com/).\n\n### Create application routes\n\n```\n    // -------------------------------\n    // Create app routes\n    // -------------------------------\n    app.post(\"/update\", function(req, res) {\n        // -------------------------------\n        // Trigger pusher event\n        // ------------------------------\n        pusher.trigger(\"events-channel\", \"new-like\", {\n          likes : `${req.body.likes}`\n        });\n    });\n```\nThis application only has one route that triggers the `new-like` event to the `events-channel` which our Angular frontend listens for and then updates accordingly.\n\n### Assign application\n\n```\n    app.listen(\"3120\");\n    console.log(\"Listening on localhost:3120\");\n```\n\nNow, the backend server will be run at `localhost:3120`.\n\n## Conclusion\n\nIn this article we have seen how to add realtime functionality to an Angular 5 application. The use cases for this are endless. You can give users realtime feedback as they interact with your applications — Twitter has a feature similar to this where you can actually see the number of likes, replies and retweets in realtime. \n\nThe ball is in your court now to implement that realtime feature you know your users will love to have.","metaTitle":"Making Angular 5 realtime with WebSockets","metaDescription":"Build an application that gives realtime feedback when a picture is liked with Angular 5 and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6oDIQjSLioGEKmYAg4GkS6","type":"Entry","createdAt":"2018-02-22T15:02:45.002Z","updatedAt":"2020-06-19T11:05:31.105Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a battleship game with Angular","url":"game-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3sixk7zsAoQqqSsUWM8I8y","type":"Entry","createdAt":"2018-02-13T18:06:00.483Z","updatedAt":"2018-02-14T10:08:13.372Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Olayinka Omole","url":"olayinka-omole","email":"olayinka.omole@gmail.com","twitter":"https://twitter.com/olayinkaos","github":"https://github.com/olayinkaos","guestWriter":true}}],"projectRepo":"https://github.com/olayinkaos/ng-battleship","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-08-25","description":"Build an online Battleship game with Angular and use Pusher's realtime API to enable two players to play against each other.\n","prerequisite":"A basic understanding of TypeScript and JavaScript is needed to follow this tutorial.","content":"Angular is a great framework for building modern JavaScript applications. In this article, we will be building a simple [Battleship game](https://en.wikipedia.org/wiki/Battleship_(game)) with Angular and will make use of the realtime capabilities of [Pusher](https://pusher.com/) to enable two players to play against each other.\n\nIn this article, you will learn how to:\n\n1. Start an Angular app from scratch with Angular CLI\n2. Generate and make use of Angular classes and services\n3. Create a game view using the main App Component\n4. Connect an Angular app to Pusher and trigger and listen for realtime events.\n\nTo follow along properly, you’ll need some knowledge of TypeScript. I will also be using the ES6 syntax. We will keep things really simple and at the end of the tutorial, we will have learned how to work with both Angular and Pusher to build modern realtime JavaScript applications.\n\nThe final app will look like this:\n\n![game-angular-demo](//images.contentful.com/1es3ne0caaid/343LzrovBeAukWeqWWqQOY/e3ae4f5d8e8f6326a0b6a7b1a88cba4c/game-angular-demo.gif)\n\nThe code for the completed app can be [found on GitHub](https://github.com/olayinkaos/ng-battleship).\n\n## Setting up the application with Angular CLI\n\nFirst, we will install Angular to our game app with Angular CLI.\n\nTo install Angular CLI:\n\n```\n    npm install -g angular-cli\n```\n\nNow we can install Angular to our app (named `ng-battleship`):\n\n```\n    ng new ng-battleship\n```\n\nYou can now navigate to the new directory and start the app on an Angular development server to verify that everything works properly:\n\n```\n    cd ng-battleship\n    ng serve\n```\n\nYou can view the app on http://localhost:4200/. This includes live-reload support, so when a source file changes, your browser automatically reloads the application. This means that you don’t have to restart the app when making changes and adding features during development. Pretty neat.\n\n\n## Importing external libraries\n\nWe will be using a couple of libraries to make our development smoother. We can pull them in with npm:\n\n```\n    npm install -S pusher-js bulma ng2-toastr\n```\n\nThe Pusher JavaScript library is pulled in for interacting with the Pusher service. We also optionally pull in [Bulma](http://bulma.io/), my CSS framework of choice, to take advantage of some quick styles.\n\nWe can now include these libraries in `angular-cli.json`, in the `styles` and `scripts` keys, so they can be loaded for our app:\n\n```\n    {\n      // ...\n      \"apps\": [\n        {\n          // ...\n          \"styles\": [\n            // ...\n            \"../node_modules/bulma/css/bulma.css\",\n            \"../node_modules/ng2-toastr/bundles/ng2-toastr.min.css\"\n          ],\n          \"scripts\": [\n            \"../node_modules/pusher-js/dist/web/pusher.min.js\"\n          ],\n          // ...\n      ],\n      // ...\n    }\n```\n\n### Configuring Toastr\nWe need to add the following lines to `app.module.ts` so we can use Toastr:\n\n```\n    // ./src/app/app.module.ts\n    \n    import { ToastModule } from 'ng2-toastr/ng2-toastr';\n    \n    @NgModule({\n      // ...\n      imports: [\n        // ...\n        ToastModule.forRoot()\n      ],\n      // ...\n    })\n```\n\n## Creating the player boards\n\n### Generating player and board classes\nAngular creates TypeScript files so we can use classes to represent players and the boards for each player. Using Angular CLI to generate the `player` and `board` classes:\n\n```\n    ng generate class Player\n    ng generate class Board\n```\n\nWe can now update the logic for both classes. We will update our `Player` class first, as the `Board` class will depend on it:\n\n```\n    // ./src/app/player.ts\n    \n    export class Player {\n      id: number;\n      score: number = 0;\n    \n      constructor(values: Object = {}) {\n        Object.assign(this, values);\n      }\n    }\n```\n\nIn the `Player` class, we specify two properties: the player `id` and `score`. The `id` is a unique identifier for the player, while the `score` property holds the values of the player’s score in the game (both properties have a type of `number`). We also provide constructor logic that will allow us to create an instance of the class like this:\n\n```\n    let player = Player({\n      id: 1,\n      score: 15\n    })\n```\n\nNow we can update the `Board` class with the appropriate attributes and constructor logic, as we did in the `Player` class:\n\n```\n    // ./src/app/board.ts\n    \n    import { Player } from './player'\n    export class Board {\n      player: Player;\n      tiles: Object[];\n    \n      constructor(values: Object = {}) {\n        Object.assign(this, values);\n      }\n    }\n```\n\nThe `Board` class has two attributes: the `player` attribute which is an instance of the `Player` class, and `tiles` which is an array of objects making up the tiles in the board, each tile being represented by an object.\n\nNow we have separate testable entities for both players and boards and we can begin to build our game’s functionality around these entities.\n\n### Creating the board service\n\nNext, we will create a service to manage the core operations for our board:\n\n```\n    ng generate service Board\n```\n\nThis generates the service and a corresponding unit test file in the `src/app` directory. The generated service will look like this:\n\n```\n    // ./src/app/board.service.ts\n    \n    import { Injectable } from '@angular/core';\n    \n    @Injectable()\n    export class BoardService {\n      constructor() { }\n    }\n```\n\nNow we can update the service with the logic needed for working with the boards:\n\n```\n    // ./src/app/board.service.ts\n    \n    import { Injectable } from '@angular/core';\n    import { Board } from './board'\n    import { Player } from './player'\n    \n    @Injectable()\n    export class BoardService {\n    \n      playerId: number = 1;\n      boards: Board[] = [];\n    \n      constructor() { }\n    \n      // method for creating a board which takes\n      // an optional size parameter that defaults to 5\n      createBoard(size:number = 5) : BoardService {\n        // create tiles for board\n        let tiles = [];\n        for(let i=0; i \u003c size; i++) {\n          tiles[i] = [];\n          for(let j=0; j\u003c size; j++) {\n            tiles[i][j] = { used: false, value: 0, status: '' };\n          }\n        }\n        // generate random ships for the board\n        for (let i = 0; i \u003c size * 2; i++) {\n          tiles = this.randomShips(tiles, size);\n        }\n        // create board\n        let board = new Board({\n          player: new Player({ id: this.playerId++ }),\n          tiles: tiles\n        });\n        // append created board to `boards` property\n        this.boards.push(board);\n        return this;\n      }\n    \n      // function to return the tiles after a value\n      // of 1 (a ship) is inserted into a random tile  \n      // in the array of tiles\n      randomShips(tiles: Object[], len: number) : Object[] {\n        len = len - 1;\n        let ranRow = this.getRandomInt(0, len),\n            ranCol = this.getRandomInt(0, len);\n        if (tiles[ranRow][ranCol].value == 1) {\n          return this.randomShips(tiles, len);\n        } else {\n          tiles[ranRow][ranCol].value = 1;\n          return tiles;\n        }\n      }\n    \n      // helper function to return a random\n      // integer between ${min} and ${max}\n      getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n      }\n    \n      // returns all created boards\n      getBoards() : Board[] {\n        return this.boards;\n      }\n    }\n```\n\nThe service contains various methods which help us create and use our battleship boards. The `createBoard()` method creates a board for each player. We can specify the size of the board by passing in the `size` parameter when calling the method. The default size of the board is specified as 5.\n\nWe also define the `randomShips()` and `getRandomInt()` methods to help in creating the boards. The `randomShips()` method is used to assign ships (represented by a value of 1) randomly to the board. The `getRandomInt()` is a helper method used to generate a random integer value between the specified min and max values — ideally this can be moved to a helper service.\n\nFinally, the `getBoards()` method returns all the boards created by the service.\n\nNow that we have created the service to interact with our boards, we can go ahead with building the core game functionality.\n\n\n## Adding core game functionality and views\n\n### Adding the game view\nWe will start by updating our app view. We will add some HTML and CSS, with some Angular directives to display the player boards:\n\n```\n    \u003c!-- ./src/app/app.component.html --\u003e\n    \u003cdiv class=\"section\"\u003e\n      \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"content\"\u003e\n          \u003ch1 class=\"title\"\u003eReady to sink some battleships?\u003c/h1\u003e\n          \u003ch6 class=\"subtitle is-6\"\u003e\u003cstrong\u003ePusher Battleship\u003c/strong\u003e\u003c/h6\u003e\n          \u003chr\u003e\n          \n          \u003c!-- shows when a player has won the game --\u003e\n          \u003csection *ngIf=\"winner\" class=\"notification is-success has-text-centered\" style=\"color:white\"\u003e\n            \u003ch1\u003ePlayer {{ winner.player.id }} has won the game!\u003c/h1\u003e\n            \u003ch5\u003eClick \u003ca href=\"{{ gameUrl }}\"\u003ehere\u003c/a\u003e to start a new game.\u003c/h5\u003e\n          \u003c/section\u003e\n    \n          \u003c!-- shows while waiting for 2nd user to join --\u003e\n          \u003cdiv *ngIf=\"players \u003c 2\"\u003e\n            \u003ch2\u003eWaiting for 2nd user to join...\u003c/h2\u003e\n            \u003ch3 class=\"subtitle is-6\"\u003eYou can invite them with this link: {{ gameUrl }}?id={{ gameId }}. You can also open \u003ca href=\"{{ gameUrl }}?id={{ gameId }}\" target=\"_blank\"\u003ethis link\u003c/a\u003e in a new browser, to play all by yourself.\u003c/h3\u003e\n          \u003c/div\u003e\n    \n          \u003c!-- loops through the boards array and displays the player and board tiles --\u003e\n          \u003cdiv class=\"columns\" *ngIf=\"validPlayer\"\u003e\n            \u003cdiv class=\"column has-text-centered\" *ngFor=\"let board of boards; let i = index\"\u003e\n              \u003ch5\u003e\n                PLAYER {{ board.player.id }} \u003cspan class=\"tag is-info\" *ngIf=\"i == player\"\u003eYou\u003c/span\u003e\n                // \u003cstrong\u003eSCORE: {{ board.player.score }}\u003c/strong\u003e\n              \u003c/h5\u003e\n              \u003ctable class=\"is-bordered\" [style.opacity] = \"i == player ? 0.5 : 1\"\u003e\n                \u003ctr *ngFor=\"let row of board.tiles; let j = index\"\u003e\n                  \u003ctd *ngFor=\"let col of row; let k = index\"\n                  (click) = \"fireTorpedo($event)\"\n                  [style.background-color] = \"col.used ? '' : 'transparent'\"\n                  [class.win] = \"col.status == 'win'\" [class.fail] = \"col.status !== 'win'\"\n                  class=\"battleship-tile\" id=\"t{{i}}{{j}}{{k}}\"\u003e\n                  {{ col.value == \"X\" ? \"X\" : \"💀\" }}\n                \u003c/td\u003e\n              \u003c/tr\u003e\n            \u003c/table\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cdiv class=\"has-text-centered\"\u003e\n          \u003cspan class=\"tag is-warning\" *ngIf=\"canPlay\"\u003eYour turn!\u003c/span\u003e\n          \u003cspan class=\"tag is-danger\" *ngIf=\"!canPlay\"\u003eOther player's turn.\u003c/span\u003e\n          \u003ch5 class=\"title\"\u003e\u003csmall\u003e{{ players }} player(s) in game\u003c/small\u003e\u003c/h5\u003e\n        \u003c/div\u003e\n        \n      \u003c/div\u003e\n    \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nTake note of the `*ngFor` directive which we use to loop through the boards for each player to display the board’s tiles and player properties. We also specify a `fireTorpedo()`  event handler for click events on each tile.\n\nDon’t worry, most of the properties referred to in the code above have not been defined yet. We will define them below as we add more functionality to our game.\n\n\u003e **Note:** You should check out the [official Angular guide](https://angular.io/guide/template-syntax) to have a better understanding of its template syntax.\n\nAdding some optional styles:\n\n```\n    /* ./src/styles.css */\n    \n    .container {\n      padding: 50px;\n    }\n    .battleship-tile {\n      color: black;\n    }\n    .win {\n      background-color: #23d160;\n      color: #fff;\n    }\n    .fail {\n      background-color: #ff3860;\n      color: #fff;\n    }\n    .content table td, .content table th {\n        border: 1px solid #dbdbdb;\n        padding: 0.5em 0.75em;\n        vertical-align: middle;\n        height: 50px;\n        text-align: center;\n    }\n    .content table {\n      width: 80%;\n      margin: 0 auto;\n    }\n    .content table tr:hover {\n        background-color: transparent;\n    }\n    .battleship-tile:hover {\n      cursor: pointer;\n    }\n```\n\n### Game functionality\n\nNext, we will update our main app component with some logic for the game:\n\n```\n    // ./src/app/app.component.ts\n    \n    // import needed classes and services\n    import { Component, ViewContainerRef } from '@angular/core';\n    import { ToastsManager } from 'ng2-toastr/ng2-toastr';\n    import { BoardService } from './board.service'\n    import { Board } from './board'\n    \n    // set game constants\n    const NUM_PLAYERS: number = 2;\n    const BOARD_SIZE: number = 6;\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css'],\n      providers: [BoardService]\n    })\n    \n    export class AppComponent {\n      canPlay: boolean = true;\n      player: number = 0;\n      players: number = 0;\n      gameId: string;\n      gameUrl: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port: '');\n    \n      constructor(\n        private toastr: ToastsManager,\n        private _vcr: ViewContainerRef,\n        private boardService: BoardService\n      ) {\n        this.toastr.setRootViewContainerRef(_vcr);\n        this.createBoards();\n      }\n    \n      // event handler for click event on\n      // each tile - fires torpedo at selected tile\n      fireTorpedo(e:any) : AppComponent {\n        let id = e.target.id,\n          boardId = id.substring(1,2),\n          row = id.substring(2,3), col = id.substring(3,4),\n          tile = this.boards[boardId].tiles[row][col];\n        if (!this.checkValidHit(boardId, tile)) {\n          return;\n        }\n    \n        if (tile.value == 1) {\n          this.toastr.success(\"You got this.\", \"HURRAAA! YOU SANK A SHIP!\");\n          this.boards[boardId].tiles[row][col].status = 'win';\n          this.boards[this.player].player.score++;\n        } else {\n          this.toastr.info(\"Keep trying.\", \"OOPS! YOU MISSED THIS TIME\");\n          this.boards[boardId].tiles[row][col].status = 'fail'\n        }\n        this.canPlay = false;\n        this.boards[boardId].tiles[row][col].used = true;\n        this.boards[boardId].tiles[row][col].value = \"X\";\n        return this;\n      }\n    \n      checkValidHit(boardId: number, tile: any) : boolean {\n        if (boardId == this.player) {\n          this.toastr.error(\"Don't commit suicide.\", \"You can't hit your own board.\")\n          return false;\n        }\n        if (this.winner) {\n          this.toastr.error(\"Game is over\");\n          return false;\n        }\n        if (!this.canPlay) {\n          this.toastr.error(\"A bit too eager.\", \"It's not your turn to play.\");\n          return false;\n        }\n        if(tile.value == \"X\") {\n          this.toastr.error(\"Don't waste your torpedos.\", \"You already shot here.\");\n          return false;\n        }\n        return true;\n      }\n      \n      createBoards() : AppComponent {\n        for (let i = 0; i \u003c NUM_PLAYERS; i++)\n          this.boardService.createBoard(BOARD_SIZE);\n        return this;\n      }\n      \n      // winner property to determine if a user has won the game.\n      // once a user gets a score higher than the size of the game\n      // board, he has won.\n      get winner () : Board {\n        return this.boards.find(board =\u003e board.player.score \u003e= BOARD_SIZE);\n      }\n    \n      // get all boards and assign to boards property\n      get boards () : Board[] {\n        return this.boardService.getBoards()\n      }\n    }\n```\n\nIn the code above, first we import the required objects and declare the game constants. Then, we initialize the component and define some of the properties and functions needed for the game view.\n\nThe `createBoards()` function creates boards for the game using the board service, based on the number of users and the game board size defined by the `NUM_PLAYERS` and `BOARD_SIZE` constants respectively.\n\nThe `fireTorpedo()` function handles every click event on any tile in the game view. It checks if a hit is valid first, using the `checkValidHit()` function, then determines if it was a hit or miss, and provides feedback to the user. \n\n\n## Adding multiplayer functionality using Pusher\n\n### What is Pusher?\nPusher is a service that makes it very easy to add realtime functionality to mobile and web applications. We will be making use of it to provide realtime updates between the two players in our game.\n\n### Pusher setup\nHead over to Pusher and [register for a free account](https://pusher.com/signup?plan=sandbox), if you don’t already have one. Then create an app on the [dashboard](https://dashboard.pusher.com/), and copy out the app credentials (App ID, Key, Secret and Cluster). It is super straight-forward.\n\nYou also need to **enable** [**client events**](https://pusher.com/docs/client_api_guide/client_events) in the Pusher dashboard for the app you created. This is super important, as we will be using client events for communication.\n\n### Creating the game backend\nTo make use of [presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels) in Pusher, we will be need to implement a backend (in our case, we will use [Node.js](https://nodejs.org/en/)). This is as a result of presence channels needing authentication. There are other types of channels in Pusher (Public, Private) — You can read more about them [here](https://pusher.com/docs/client_api_guide/client_channels).\n\nFirst we pull in the required packages for our server:\n\n```\n    npm install -S express body-parser pusher\n```\n\nCreating the server file in the app root folder:\n\n```\n    touch server.js\n```\n\nUpdating with the required logic:\n\n``` language-javascript\n    // ./server.js\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const path = require('path');\n    const Pusher = require('pusher');\n    const crypto = require(\"crypto\");\n    \n    const app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // initialise Pusher.\n    // Replace with your credentials from the Pusher Dashboard\n    const pusher = new Pusher({\n      appId: 'YOUR_APP_ID',\n      key: 'YOUR_APP_KEY',\n      secret: 'YOUR_APP_SECRET',\n      cluster: 'YOUR_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    // to serve our JavaScript, CSS and index.html\n    app.use(express.static('./dist/'));\n    \n    // CORS\n    app.all('/*', function(req, res, next) {\n      res.header(\"Access-Control-Allow-Origin\", \"*\");\n      res.header(\"Access-Control-Allow-Headers\", \"*\");\n      next();\n    });\n    \n    // endpoint for authenticating client\n    app.post('/pusher/auth', function(req, res) {\n      let socketId = req.body.socket_id;\n      let channel = req.body.channel_name;\n      let presenceData = {\n        user_id: crypto.randomBytes(16).toString(\"hex\")\n      };\n      let auth = pusher.authenticate(socketId, channel, presenceData);\n      res.send(auth);\n    });\n    \n    // direct all other requests to the built app view\n    app.get('*', (req, res) =\u003e {\n      res.sendFile(path.join(__dirname, './dist/index.html'));\n    });\n    \n    // start server\n    var port = process.env.PORT || 3000;\n    app.listen(port, () =\u003e console.log('Listening at http://localhost:3000'));\n```\n\nIn the code above, we simply define an endpoint (`/pusher/auth`) for authenticating clients with Pusher, we then serve the app `index.html` file for every other request. See the [Pusher ‘authenticating users’ guide](https://pusher.com/docs/authenticating_users) for more information on the auth process.\n\n\n### Initialising Pusher and listening for changes\nAs a last step, we will initialise Pusher and listen for changes in our game:\n\n``` language-typescript\n    // ./src/app/app.component.ts\n    \n    // declare Pusher const for use\n    declare const Pusher: any;\n    \n    export class AppComponent {\n      pusherChannel: any;\n      //...\n    \n      constructor(\n        private toastr: ToastsManager,\n        private _vcr: ViewContainerRef,\n        private boardService: BoardService,\n      ) {\n        //...\n        this.initPusher();\n        this.listenForChanges();\n      }\n    \n      // initialise Pusher and bind to presence channel\n      initPusher() : AppComponent {\n        // findOrCreate unique channel ID\n        let id = this.getQueryParam('id');\n        if (!id) {\n          id = this.getUniqueId();\n          location.search = location.search ? '\u0026id=' + id : 'id=' + id;\n        }\n        this.gameId = id;\n    \n        // init pusher\n        const pusher = new Pusher('PUSHER_APP_KEY', {\n          authEndpoint: '/pusher/auth',\n          cluster: 'eu'\n        });\n    \n        // bind to relevant Pusher presence channel\n        this.pusherChannel = pusher.subscribe(this.gameId);\n        this.pusherChannel.bind('pusher:member_added', member =\u003e { this.players++ })\n        this.pusherChannel.bind('pusher:subscription_succeeded', members =\u003e {\n          this.players = members.count;\n          this.setPlayer(this.players);\n          this.toastr.success(\"Success\", 'Connected!');\n        })\n        this.pusherChannel.bind('pusher:member_removed', member =\u003e { this.players-- });\n    \n        return this;\n      }\n    \n      // Listen for `client-fire` events.\n      // Update the board object and other properties when \n      // event triggered\n      listenForChanges() : AppComponent {\n        this.pusherChannel.bind('client-fire', (obj) =\u003e {\n          this.canPlay = !this.canPlay;\n          this.boards[obj.boardId] = obj.board;\n          this.boards[obj.player].player.score = obj.score;\n        });\n        return this;\n      }\n    \n      // initialise player and set turn\n      setPlayer(players:number = 0) : AppComponent {\n        this.player = players - 1;\n        if (players == 1) {\n          this.canPlay = true;\n        } else if (players == 2) {\n          this.canPlay = false;\n        }\n        return this;\n      }\n      \n      fireTorpedo(e:any) : AppComponent {\n        // ...\n        \n        // trigger `client-fire` event once a torpedo\n        // is successfully fired\n        this.pusherChannel.trigger('client-fire', {\n          player: this.player,\n          score: this.boards[this.player].player.score,\n          boardId: boardId,\n          board: this.boards[boardId]\n        });\n        return this;\n      }\n      \n      // helper function to get a query param\n      getQueryParam(name) {\n        var match = RegExp('[?\u0026]' + name + '=([^\u0026]*)').exec(window.location.search);\n        return match \u0026\u0026 decodeURIComponent(match[1].replace(/\\+/g, ' '));\n      }\n    \n      // helper function to create a unique presence channel\n      // name for each game\n      getUniqueId () {\n        return 'presence-' + Math.random().toString(36).substr(2, 8);\n      }\n    \n      // check if player is a valid player for the game\n      get validPlayer(): boolean {\n        return (this.players \u003e= NUM_PLAYERS) \u0026\u0026 (this.player \u003c NUM_PLAYERS);\n      }\n      \n      // ...\n    }\n```\n\nThe `initPusher()` function initialises Pusher on the client side and subscribes to the presence channel created by the `getUniqueId()` method. We also make use of some functionality provided by the Pusher presence channel (`member_added`, `subscription_succeeded` and `member_removed` events) to update the players count and set turns.\n\nThe `listenForChanges()` is used to listen for the `client-fire` [client event](https://pusher.com/docs/client_api_guide/client_events), and update the game once it is triggered. The `client-fire` event is triggered in the `fireTorpedo()` function once a torpedo has been fired successfully. The event is broadcast with some data which will be used when updating the game view. The syntax for triggering an event with Pusher is `channelObject.``trigger(eventName, data)` — You can read more about it [here](https://pusher.com/docs/client_api_guide/client_events#trigger-events).\n\n\n## Generating static files and starting the game\n\nFinally, we can build the app and start the server for the game:\n\n```\n    ng build\n    node server.js\n```\n\nAngular CLI generates the static files to the `./dist` folder, and we can view the game on http://localhost:8000 once the server starts!\n\n\n## Conclusion\n\nIn this tutorial, we have learned how to build a realtime Angular app from scratch, taking advantage of the awesome realtime capabilities of Pusher. There are a lot of improvements that could be made to the base game — the entire code for it is [hosted on Github](https://github.com/olayinkaos/ng-battleship), you’re welcome to make contributions and ask questions.","metaTitle":"Build a battleship game with Angular","metaDescription":"Build an online Battleship game with Angular and use Pusher's realtime API to enable two players to play against each other.Angular, Node.js and Pusher for the realtime features."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1l0hfd7qAAWMI028uqYAsy","type":"Entry","createdAt":"2018-02-28T14:56:05.584Z","updatedAt":"2018-02-28T14:56:05.584Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo feed using Angular","url":"photo-feed-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6hNNk2LcVUYo8sQGKaISEc","type":"Entry","createdAt":"2018-02-16T15:14:51.094Z","updatedAt":"2018-02-16T15:14:51.094Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Kirils Ladovs","url":"kirils-ladovs","email":"kirilsladovs@gmail.com","twitter":"https://twitter.com/kirjai","github":"https://github.com/kirjai","guestWriter":true}}],"projectRepo":"https://github.com/kirjai/pusher-photo-feed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2017-05-24","description":"Build a photo feed that will display any images it receives in realtime.","prerequisite":"A basic understanding of TypeScript is needed to follow this tutorial.","content":"In this tutorial, we will build a simple web app that will display any images it receives using Pusher. More specifically, to build this realtime photo feed we will use the [Pusher Realtime Reddit API](https://blog.pusher.com/pusher-realtime-reddit-api/) to subscribe to new post in a specific subreddit and in realtime display each new post's image. Let's start by scaffolding our Angular web app.\n\n## Angular application scaffolding\n\nWe will be using [Angular CLI](https://github.com/angular/angular-cli), a command line tool maintained by Angular, to initialize our application.\n\nFirst, you need to install Angular CLI globally on your machine. You can follow the [official installation instructions](https://github.com/angular/angular-cli#installation) on how to do that. Once you have installed Angular CLI, it is time to scaffold your application.\n\nNavigate to a local directory where you want your application code to live, and within that directory, let's run a CLI command to generate a new Angular application.\n\n``` \n$ ng new photo-feed --skip-tests\n```\n\n\u003e In the command above, `photo-feed` is the name of the app we are creating (feel free to use whatever name you like). Most CLI commands come with multiple flags and options, like `--skip-tests` above, which tells CLI not to create any test files for our application. You can type `$ ng help` to see what other options are there.\n\nOnce CLI is done generating files and installing dependencies, we can `cd` into the newly created directory that holds our application code. From within the root directory of our application, we can now run our application by typing `$ ng serve`. This command will boot up a development server and serve our application on `localhost:4200` by default. Leave the server running, as it will be reloaded automatically once we make any changes to our application code. You can now navigate to `localhost:4200` in your browser and you should see a message \"app works!\".\n\n![photo-feed-angular-app-works](//images.contentful.com/1es3ne0caaid/2P9maDTAtqisAOyUoseiKC/c6ad90895879d553d791c8323343337d/photo-feed-angular-app-works.png)\n\n## Application structure\n\nBefore we jump into writing code, let's consider the structure of our application. Even though our application is small, we still want to use best practice.\n\nBe default, our Angular application already has one main root component: `AppComponent`. On top of that, our application will only have one default route, where images will be displayed. Also, as we previously discussed, we will use Pusher to receive realtime data. Considering the features, a potential structure would be to create a new `PhotoFeedComponent` that will hold an array of images and display them, as well as a `PusherService`, whose responsibility would be to instantiate and hold a reference to an instance of Pusher.\n\n## Pusher\n\nBecause we're about to start using Pusher within our application, we need to install the `pusher-js` front end package as a dependency.\n\nFirst sign up for a Pusher account [here](https://dashboard.pusher.com/accounts/sign_up)\n\n``` \n$ npm i --save pusher-js\n```\nOn top of installing and saving `pusher-js` as a dependency, we need to make sure it's loaded into the browser at runtime. We can easily do that by modifying the `.angular-cli.json` file and telling Angular CLI to take the `pusher.min.js` file from the `node_modules` and bundle it up with the rest of the code.\n\n```\n// .angular-cli.json\n...\n  \"scripts\": [\n    \"../node_modules/pusher-js/dist/web/pusher.min.js\"\n  ],\n...\n```\n\n\u003e Angular CLI development server only listens for changes in the application code files, so you might need to restart the server for these changes to take effect. To restart the server simply stop the current process with CTRL + C and start it again with `ng serve`.\n\n## Pusher service\n\nAngular CLI isn't just good for scaffolding the application boilerplate; it can also generate new components, services and other Angular entities whenever you need. Let's create a new `PusherService` with CLI.\n\n```\n$ ng generate service pusher\n```\n\n\u003e `generate` has an alias of `g` and `service` has an alias of `s`, therefore the command above could have also been written as `ng g s pusher`\n\nNow that the `PusherService` is created, as with any other service we need to add it to our application providers. If we don't do this, we can't inject the service as a dependency anywhere in our application. Angular services need to be provided at a module level, so considering that our application only has one module at the moment - the `AppModule`, we need to add `PusherService` to the `AppModule`'s providers.\n\n```\n// app.module.ts\n\nimport { PusherService } from './pusher.service';\n...\n@NgModule({\n  ...\n  providers: [PusherService],\n})\nexport class AppModule {}\n```\n\nThe `PusherService`'s responsibility will be to create a new instance of Pusher and make it available for anyone to get hold of.\n\nOn our `PusherService` class we will have a public `pusher` property, which will hold the Pusher instance. Pusher instantiation will happen in the class's constructor.\n\n```\n// pusher.service.ts\n...\nexport class PusherService {\n  pusher: any;\n\n  constructor() {\n    this.pusher = new Pusher();\n  }\n}\n```\n\nAt this point, the Typescript compiler will probably scream at you in a way of throwing an error, because it doesn't know what `Pusher` in `new Pusher()` is, as we haven't imported or declared it. The `pusher-js` library doesn't have typings, therefore we can't import it into our code. Instead, what we can do is declare a constant named `Pusher` at the top of the file, so that Typescript thinks we're referring to that. In reality, however, because `pusher-js` library is loaded into the browser, it attaches `Pusher` to the window and that's how we can use it in our code. So at the top of the `pusher.service.ts` file, just add the following.\n\n```\ndeclare const Pusher;\n```\n\nWhen instantiating Pusher, we need to pass in the [Pusher application key](http://pusher.com/docs/client_api_guide/client_connect) of a specific Pusher application that we want to connect to. In our case, since we are connecting to a public Reddit API, their application key is known and is: `50ed18dd967b455393ed`. So our Pusher instantiation logic evolves into:\n\n```\n// pusher.service.ts\n...\nthis.pusher = new Pusher('50ed18dd967b455393ed');\n...\n```\n\nFrom now on, any other component and service that needs to get access to the Pusher instance can use the `PusherService.pusher` property to do so.\n\n## Photo feed component\n\nAs per our application structure, we have decided that the `PhotoFeedComponent` will have an array of image URLs. In the view, we will loop over that array and display the individual images.\n\nLet us start by generating the new component with CLI.\n\n```\nng generate component photo-feed\n```\n\nFirst of all, we should create a property where we will be storing the images. Since all we will be storing are image URLs, we can use an array of strings as the data type for our property.\n\n```\n// photo-feed.component.ts\n...\nexport class PhotoFeedComponent implements OnInit {\n  images: Array\u003cstring\u003e = [];\n\n  ...\n}\n```\n\nThe images array will be populated over time whenever a new image is received, so we start with a blank array.\n\nNow that we have a place to store the images, let's write out how we are going to be receiving these images. We need to get ahold of the Pusher instance that we have in the `PusherService`. We do that by injecting the `PusherService` as a dependency inside our `PhotoFeedComponent` class. As with any other dependency, we do that in the constructor.\n\n```\n// photo-feed.component.ts\n...\nexport class PhotoFeedComponent implements OnInit {\n  images: Array\u003cstring\u003e = [];\n\n  constructor(private pusherService: PusherService) {}\n\n  ...\n}\n```\n\nFinally, we can subscribe to a Pusher channel and start receiving images. All we need to subscribe, is the name of the channel. In the Pusher Realtime Reddit API, each subreddit is a separate channel. Considering that we are after some good looking images, we should subscribe to a suitable subreddit, where most posts come with images, like `\"r/pics\"`, for example.\n\nBecause we want to subscribe to a subreddit on startup, or whenever our component is created, we will use one of [Angular component's lifecycle hooks](https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html), called `ngOnInit`. As you might have guessed from its name, `ngOnInit` is run on component initialization, which is exactly when we want to subscribe.\n\n```\n// photo-feed.component.ts\n...\nexport class PhotoFeedComponent implements OnInit {\n  ...\n\n  ngOnInit() {\n    const channel = this.pusherService.pusher.subscribe('pics');\n  }\n}\n```\n\nPusher's `subscribe()` method returns a channel that we store in a variable.\n\nNow that we have subscribed to `\"r/pics\"`, we can start listening for specific events on that channel. In our case, since we want a constant feed of new images, we can use the `new-listing` event. `new-listing` signifies a new post in a subreddit.\n\nUsing the `channel` variable, let's start listening to the `new-listing` event.\n\n```\n// photo-feed.component.ts\n...\nexport class PhotoFeedComponent implements OnInit {\n  ...\n  ngOnInit() {\n    const channel = this.pusherService.pusher.subscribe('pics');\n    channel.bind('new-listing', (listing) =\u003e {});\n  }\n}\n```\n\nThe second parameter to the `bind` method is a callback function, that will be called whenever the `new-listing` event is received with the payload of the received event.\n\nNow that we receive every new listing in a subreddit, we can extract images out of each post and add them to our images array. And since we want to do that on every new listing, we want to do it in the callback function.\n\n```\n// photo-feed.component.ts\n...\nexport class PhotoFeedComponent implements OnInit {\n  images: Array\u003cstring\u003e = [];\n  ...\n  ngOnInit() {\n    ...\n    channel.bind('new-listing', (listing) =\u003e {\n      const image = listing.url;\n      this.images = [image, ...this.images];\n    });\n  }\n}\n```\n\n\u003e Note that sometimes there aren't that many new posts, so it might take a minute or two between the `new-listing` events.\n\nThe final step is to loop over and display the images in the HTML. We can easily do that with Angular's `ngFor` directive.\n\n```\n// photo-feed.component.html\n\u003cdiv *ngFor=\"let image of images\"\u003e\n  \u003cimg [src]=\"image\"\u003e\n\u003c/div\u003e\n```\n\nUsing the `ngFor` syntax we are telling Angular, that we want to loop over the `images` array, assigning each individual item in that array to an `image` variable. We then use the `image` variable to feed into the `src` of the HTML image tag.\n\nOur code is complete! So if your development server is still running, you can navigate to `localhost:4200` and see the final result.\n\n\u003e Reminder: you can start the development server by running `$ ng serve` in your terminal.\n\n![photo-feed-angular-demo](//images.contentful.com/1es3ne0caaid/1cl6YfXRx8yo2IwimUgoas/a21e15ad8b0e7e21f2d246f2c820e5d6/photo-feed-angular-demo.gif)\n\nCongratulations on your working realtime photo feed!","metaTitle":"Build a photo feed using Angular","metaDescription":"Build a photo feed that will display any images it receives in realtime with Angular CLI."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1WRJru0fCocqY46ewmewmI","type":"Entry","createdAt":"2018-02-22T15:04:12.040Z","updatedAt":"2018-02-28T14:43:49.550Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime map with Laravel","url":"realtime-map-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5HjouOQyOIwCcyuswYcIuc","type":"Entry","createdAt":"2018-02-16T18:20:46.412Z","updatedAt":"2018-04-23T13:19:32.814Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Perfect Makanju","url":"perfect-makanju","email":"damiperfect@gmail.com","twitter":"https://twitter.com/perfectmak","github":"https://github.com/perfectmak","guestWriter":true}}],"projectRepo":"https://github.com/perfectmak/laravel-realtime-map","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}}],"reviewDate":"2017-05-10","description":"Build a realtime map using Laravel and keep it updated live with new coordinates. ","prerequisite":"A basic understanding of Laravel and Angular are needed to follow this tutorial.","content":"Realtime maps have become very popular with more and more couriers, delivery and transportation services apps using them to show realtime tracking of your order or available vehicles around you. Today we will learn how to build a realtime map using Laravel and Pusher.\n\n## What you'll be using\n\n- Pusher\n- Google Maps\n- Laravel\n- Angular\n \n## Set up Pusher\n\nTo get started you need to sign up to a free Pusher account [here](https://dashboard.pusher.com/accounts/sign_in). After you have created your account and are logged into the Pusher dashboard, click the `Create new App` button. Name your new app \"Laravel-Map\" and select a cluster. A cluster represents the physical location of the servers that handle requests from your app, therefore selecting a cluster closer to your location will mean faster response.\n\nNext select the frontend and backend technologies - in this case, Angular and Laravel. (If you want, you can also give a short description of what app you're building.)\n\n![realtime-map-laravel-create-app](//images.contentful.com/1es3ne0caaid/1AFYxPlVcwAEAgiwaGkKKA/bf8e90962701acda5f785ee00663cefd/realtime-map-laravel-create-app.png)\n\nWhen you've done, click the \"Create my app\" button.\n\nNext, navigate to the \"App Keys\" tab on the dashboard to see your application keys. Note your application keys because we will be using them later in this tutorial.\n\n## Creating the Laravel Project\n\nNavigate into the directory where you would like your apps to be and install Laravel via composer by running the following command in your terminal.\n\n```\ncomposer create-project --prefer-dist laravel/laravel laravel-map\n```\nAdd pusher-php-server to the required dependencies of your composer.json file so that it looks similar to this.\n\n```\n\"require\": {\n        \"php\": \"\u003e=5.6.4\",\n        \"laravel/framework\": \"5.4.*\",\n        \"laravel/tinker\": \"~1.0\",\n        \"pusher/pusher-php-server\": \"^2.2\"\n    },\n```\nThe pusher-php-server is a PHP library which will help us broadcast events to Pusher which will then be listened to by our client side. To install it, run the following command\n\n```\ncomposer install\n```\nAfter installation completes, rename the `.env.example` file to `.env` and add the keys you got from Pusher to their respective places in the file. Also set the `BROADCAST_DRIVER` to `pusher` and add a `PUSHER_APP_CLUSTER` key with its value set to your Pusher apps cluster. It should look similar to the following:\n\n```\nBROADCAST_DRIVER=pusher\nPUSHER_APP_ID=XXXXX\nPUSHER_APP_KEY=XXXXXXXXXXXXXXXXX\nPUSHER_APP_SECRET=XXXXXXXXXXXXXXXXXX\nPUSHER_APP_CLUSTER=XXXXXXXXXX\n```\nNext, open the `config/broadcasting.php` file and set the Pusher cluster option like this:\n\n```\n\u003c?php\n\nreturn [\n\n   ...\n\n    'connections' =\u003e [\n\n        'pusher' =\u003e [\n            'driver' =\u003e 'pusher',\n            'key' =\u003e env('PUSHER_APP_KEY'),\n            'secret' =\u003e env('PUSHER_APP_SECRET'),\n            'app_id' =\u003e env('PUSHER_APP_ID'),\n            'options' =\u003e [\n                //add this line\n                'cluster' =\u003e env('PUSHER_APP_CLUSTER'),\n            ],\n        ],\n\n   ...\n```\nNext, run the following command to generate a Laravel secret key.\n\n```\nphp artisan key:generate \n```\nWe will be using a public channel to make this tutorial as simple as possible, so we won't be changing anything else.\n\nNext, let us create a SendLocation event. To do this, run the following Laravel command:\n\n``` language-php\nphp artisan make:event SendLocation\n```\nYou should see a PHP file in your `app/Events` directory named `SendLocation.php` . The only thing we will be changing in the file is the channel-name. We will also implement the ShouldBroadcast interface and add a public variable to it. The complete code should look similar to the following:\n\n```\n\u003c?php\n\nnamespace App\\Events;\n\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Queue\\SerializesModels;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n\nclass SendLocation implements ShouldBroadcast\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    /**\n     * Create a new event instance.\n     *\n     * @return void\n     */\n    public $location;\n\n    public function __construct($location)\n    {\n        $this-\u003elocation = $location;\n    }\n\n    /**\n     * Get the channels the event should broadcast on.\n     *\n     * @return Channel|array\n     */\n    public function broadcastOn()\n    {\n        return new Channel('location');\n    }\n}\n\n```\nFinally, create an endpoint where coordinates will be sent. When requests are made to the endpoint, the `SendLocation` event will be triggered and the coordinates will be sent to Pusher. We'll do that in our web.php file located in the `routes` folder. Add the code below the file:\n\n```\nRoute::post('/map', function (Request $request) {\n    $lat = $request-\u003einput('lat');\n    $long = $request-\u003einput('long');\n    $location = [\"lat\"=\u003e$lat, \"long\"=\u003e$long];\n    event(new SendLocation($location));\n    return response()-\u003ejson(['status'=\u003e'success', 'data'=\u003e$location]);\n});\n\n```\n\n## Set up a Google Map project\n\nWe will be using Google Maps to implement our realtime map. [This guide](https://developers.google.com/maps/documentation/javascript/get-api-key) will run you through registering a project in the Google API Console and activating the Google Maps JavaScript API. Remember to grab the API key that will be generated for you after registering.\n\n## Working with Angular\n\nWe'll be using Angular for our frontend. If you don't have angular installed, run the following command:\n\n```\nnpm install -g @angular/cli\n```\nNow create an Angular app with the following command:\n\n```\nng new angular-map\n```\nNext we will install dependencies to listen to events sent to Pusher by our server. Pusher has a JavaScript library for frontend technologies which we'll be using to listen for events from Pusher.\n\nWe'll also be installing Laravel Echo. To do this, navigate into the \"angular-map\" project and run the following command:\n\n```\nnpm install --save laravel-echo pusher-js\n```\nNow that we have installed the dependencies, let's get to the code. In your index.html file, add Pusher and Google Maps scripts. Your index.html file should look similar to the code snippet below:\n\n```\n\u003c!doctype html\u003e\n\u003chtml\u003e\n\u003chead\u003e\n  \u003ctitle\u003eSimple Map\u003c/title\u003e\n  \u003cmeta name=\"viewport\" content=\"initial-scale=1.0\"\u003e\n  \u003cmeta charset=\"utf-8\"\u003e\n\n\u003c/head\u003e\n\u003cbody style=\"margin: 0\"\u003e\n\n\u003cscript src=\"https://js.pusher.com/3.0/pusher.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_APP_KEY\"\u003e\u003c/script\u003e\n  \u003capp-root\u003eLoading...\u003c/app-root\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n\n```\nWe need somewhere to render the map, so add the following line to your app.component.html file:\n\n```\n\u003cdiv id=\"map\"\u003e\u003c/div\u003e\n```\nFinally, we move over to our app.component.ts file to add the code which will render Google Maps on our HTML page.\n\n```\nimport { Component, OnInit } from '@angular/core'\nimport * as Echo from 'laravel-echo';\n\ndeclare var google:any;\n\nconst PUSHER_API_KEY = 'YOUR_PUSHER_KEY';\nconst PUSHER_CLUSTER = 'YOUR_PUSHER_CLUSTER';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent implements OnInit{\n\n  lat : number = 9.0820;\n  long : number = 8.6753;\n\n  ngOnInit() {\n\n    this.launchMap(this.lat, this.long);\n\n  }\n\n\n  launchMap(lat, lng){\n    var nigeria= {lat: lat, lng: lng};\n    this.map = new google.maps.Map(document.getElementById('map'), {\n      zoom: 8,\n      center: nigeria\n    });\n    this.marker = new google.maps.Marker({\n      map: this.map,\n      animation:\"bounce\",\n    });\n    this.lineCoordinates.push(new google.maps.LatLng(this.lat, this.long));\n  }\n}\n\n```\nNext we add the code which listens to the event and updates the map when the coordinates change.\n\n```\nsubscribe(){\n    var echo = new Echo({\n      broadcaster: 'pusher',\n      key: PUSHER_API_KEY,\n      cluster: PUSHER_CLUSTER\n    });\n    echo.channel('location')\n      .listen('SendLocation', (e)=\u003e{\n         this.data = e.location;\n          this.updateMap(this.data);\n      });\n  }\n\nupdateMap(data){\n    this.lat = parseFloat(data.lat);\n    this.long = parseFloat(data.long);\n\n    this.map.setCenter({lat:this.lat, lng:this.long, alt:0});\n    this.marker.setPosition({lat:this.lat, lng:this.long, alt:0});\n\n    this.lineCoordinates.push(new google.maps.LatLng(this.lat, this.long));\n\n    var lineCoordinatesPath = new google.maps.Polyline({\n      path: this.lineCoordinates,\n      geodesic: true,\n      map: this.map,\n      strokeColor: '#FF0000',\n      strokeOpacity: 1.0,\n      strokeWeight: 2\n    });\n\n```\nThe complete code snippet for the app.component.ts file:\n\n```\nimport { Component, OnInit } from '@angular/core';\nimport * as Echo from 'laravel-echo';\nimport * as Pusher from 'pusher-js';\n\ndeclare let google:any;\n\nconst PUSHER_API_KEY = 'YOUR_PUSHER_KEY';\nconst PUSHER_CLUSTER = 'YOUR_PUSHER_CLUSTER';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent implements OnInit{\n  data : any;\n  map : any;\n  lat : number = 9.0820;\n  long : number = 8.6753;\n  marker : any;\n  lineCoordinates = [];\n\n  ngOnInit() {\n\n    this.subscribe();\n    this.launchMap(this.lat, this.long);\n\n  }\n\n\n  subscribe(){\n    let echo = new Echo({\n      broadcaster: 'pusher',\n      key: PUSHER_API_KEY,\n      cluster: PUSHER_CLUSTER\n    });\n    echo.channel('location')\n      .listen('SendLocation', (e)=\u003e{\n         this.data = e.location;\n          this.updateMap(this.data);\n      });\n  }\n\n  launchMap(lat, lng){\n    let nigeria= {lat: lat, lng: lng};\n    this.map = new google.maps.Map(document.getElementById('map'), {\n      zoom: 14,\n      center: nigeria\n    });\n    this.marker = new google.maps.Marker({\n      map: this.map,\n      animation:\"bounce\",\n    });\n    this.lineCoordinates.push(new google.maps.LatLng(this.lat, this.long));\n  }\n\n  updateMap(data){\n    this.lat = parseFloat(data.lat);\n    this.long = parseFloat(data.long);\n\n    this.map.setCenter({lat:this.lat, lng:this.long, alt:0});\n    this.marker.setPosition({lat:this.lat, lng:this.long, alt:0});\n\n    this.lineCoordinates.push(new google.maps.LatLng(this.lat, this.long));\n\n    let lineCoordinatesPath = new google.maps.Polyline({\n      path: this.lineCoordinates,\n      geodesic: true,\n      map: this.map,\n      strokeColor: '#FF0000',\n      strokeOpacity: 1.0,\n      strokeWeight: 2\n    });\n  }\n}\n```\n## Realtime map demo\n\nHere is a gif showing the map being updated in realtime:\n\n![realtime-map-laravel-demo](//images.contentful.com/1es3ne0caaid/e4zwbgQW4w84WCEawSum8/bf8e90962701acda5f785ee00663cefd/realtime-map-laravel-demo.gif)\n\nIn order to see the marker move on the map, you will need to send `App\\Events\\SendLocation` events to the `location` channel. The easiest way to do this is by using the event creator on the [Pusher Debug Console](https://dashboard.pusher.com). Here is a sample data format that can be used to trigger an update:\n\n```\n{\n  \"location\": {\n    \"lat\": \"9.084999999999999\",\n    \"long\": \"8.678299999999998\"\n  }\n}\n```\nHere is an image of how the event would look on the Pusher event creator:\n\n![ealtime-map-laravel-send-event](//images.contentful.com/1es3ne0caaid/gNFNIDp6z6C42q488CAOI/bf8e90962701acda5f785ee00663cefd/ealtime-map-laravel-send-event.png)\n\nAlternatively, location updates can also be triggered by sending web requests to the Laravel application. Here is an Angular function that can be used to send location update requests:\n\n```\nsendLocation(lat: string, long: string) {\n  const serverUrl = 'http://localhost:8000';\n  const params = new URLSearchParams();\n  params.set(\"lat\", lat);\n  params.set(\"long\", long);\n\n  return this.http.post(serverUrl + '/map', params);\n}\n```\nNote that the above function is assuming that the Laravel application is accessible via 'http://localhost:8000', you can update the `serverUrl` to your own configuration.\n\n## Conclusion\n\nWe have successfully created a real time map which will be updated when new coordinates are sent to the endpoint on our server. You could use this to track the location of almost anything - but remember, if you are using this in production, you should consider privacy needs and build that functionality in.\n\nYou can find the complete project in these repositories [angular app](https://github.com/perfectmak/angular-realtime-map) and [laravel app](https://github.com/perfectmak/laravel-realtime-map).","metaTitle":"Build a realtime map with Laravel","metaDescription":"Build a realtime map using  Laravel and Angular and keep it updated live with new coordinates. "}}],"defaultValue":"Angular","queryType":"tag","pages":4,"route":"/tutorials","query":{"tag":"Angular","page":"3"}}},"page":"/tutorials","query":{"tag":"Angular","page":"3"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Angular&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:40:47 GMT -->
</html>