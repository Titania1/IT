<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Chat&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:37:45 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">33</span> tutorials for “<span class="css-npldjc ehwuahf2">Chat</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials7244.html?product=Channels&amp;tag=Chat" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialsaa59.html?product=Beams&amp;tag=Chat" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Chat"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/chat-app-framework7.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app using Framework7</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Build a chat app for iOS and Android using Framework7 and Vue.js, with a simple Node.js backend. Framework7 is a free an...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/ios-chat-app-swift-chatkit-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an iOS chat app using Swift and Chatkit - Part 3: Building the iOS app</h3><p class="css-k12xad e5jrto45">Build a chat app for iOS, with a Laravel API backend. In part three, build the iOS application. By the end of this secti...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-gatsby.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Add a chat widget to your Gatsby blog</h3><p class="css-k12xad e5jrto45">In this tutorial, we’re going to take a look at how we can add a realtime chat feature to a Gatsby blog using Pusher, us...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/group-chat-angular-dialogflow.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a group chat app with Angular and Dialogflow</h3><p class="css-k12xad e5jrto45">Build an Angular group chat app, and integrate a chatbot using Dialogflow. Users will be able to talk to each other, or ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-chat-ruby.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Ruby<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Ruby on Rails</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live chat widget with Ruby and PostgreSQL</h3><p class="css-k12xad e5jrto45">Build a chat widget and admin dashboard using Ruby on Rails and PostgreSQL. The application provides the basic functiona...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/angular-chat-sentiment-analysis.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Emoji suggestions in an Angular chat application using sentiment analysis</h3><p class="css-k12xad e5jrto45">Build a chat app in Angular. The app features emoji suggestions (as suggested responses) based on the users&#x27; moods. The ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-sentiment-analysis-nestjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build live comments with sentiment analysis using Nest.js</h3><p class="css-k12xad e5jrto45">Learn to build a live comments application using Nest.js, featuring sentiment analysis. Use the sentiment analysis to me...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-kotlin-android.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building a chat app with Kotlin for Android</h3><p class="css-k12xad e5jrto45">Learn to build a chat app for Android. Use Kotlin and Springboot to construct the endpoint for the API, and Kotlin for y...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-sentiment-analysis-nestjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Nest.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app with sentiment analysis using Nest.js</h3><p class="css-k12xad e5jrto45">Learn to build a chat app with Nest.js. Add a fun element with sentiment analysis, automatically attaching emoticons bas...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsf312.html?tag=Chat&amp;page=1" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialsf312.html?tag=Chat&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials0693.html?tag=Chat&amp;page=2" class="css-2wakph edg0byb1">2</a><a href="tutorials94e2.html?tag=Chat&amp;page=3" class="css-5s6711 edg0byb1">3</a><a href="tutorials5798.html?tag=Chat&amp;page=4" class="css-5s6711 edg0byb1">4</a><a href="tutorials94e2.html?tag=Chat&amp;page=3" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":33,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5iJKA5uH6oMMw8GSGM2ko8","type":"Entry","createdAt":"2018-07-12T21:02:54.294Z","updatedAt":"2020-06-19T13:46:49.924Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app using Framework7","url":"chat-app-framework7","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/Kennypee/pusher-framework7-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-07-09","description":"Build a chat app for iOS and Android using Framework7 and Vue.js, with a simple Node.js backend. Framework7 is a free and open source mobile HTML framework to develop hybrid mobile apps or web apps with iOS \u0026 Android native look and feel.","prerequisite":"You will need Node and npm or Yarn installed on your machine.","content":"## Introduction\n\nRealtime chat functionality has revitalized the way we communicate over the years. In recent times, customers can speak directly with business owners from their mobile applications and websites. This is a huge plus in technology considering how difficult it was in the past.\n\nFramework7 is a free and open source mobile HTML framework to develop hybrid mobile apps with iOS and Android native look and feel. In this tutorial, we'll build a realtime chat application with Framework7 using Pusher channels. Here’s a preview of what we’ll be building. \n\n![framework7-chat-app-demo](//images.ctfassets.net/1es3ne0caaid/5ksbxBpdDyueuymA0OMEae/45c761be2e92c8b19f8eb55ca8a3a9d9/framework7-chat-app-demo.jpeg)\n\n## Prerequisites\n\nBefore you begin, ensure that you have Node and npm or Yarn installed on your machine. Here is a run-down of the core technologies we will be using.\n\n\n1. [**Framework7**](http://framework7.io) ****- a framework for building native-like mobile applications with HTML\n\n\n2. [**Pusher**](https://pusher.com/) - Pusher is a technology for building apps with varying realtime needs like push notifications and pub/sub messaging. It is the engine behind the realtime ability of our chat app.\n\n\n3. [**Vue.js**](https://vuejs.org/) - an open-source JavaScript framework for building user interfaces\n\n\n4. [**Phonegap**](http://phonegap.com/) - an application framework that enables you to build natively installed applications using HTML and JavaScript. \n\n\n## Setting up the project\n\nThe simplest way to set up a Phonegap project is through the command line interface (CLI). Before we create a Phonegap project, ensure that you have Phonegap installed on your machine. To install Phonegap, run:\n\n```\n    $ npm install -g phonegap\n```\n\nThis will install phonegap on your machine and you can confirm the installation by running the command:\n\n```\n    $ phonegap -v\n```\n\nThis should print the version of the currently installed Phonegap. Now that we have that installed let’s create a Phonegap project. Run:\n\n\n```    \n    // create a phonegap project with the framework7 vue template\n    $ phonegap create pusher-chat --template https://github.com/hollyschinsky/phonegap-template-framework7-vue\n    $ cd pusher-chat\n    //start the server\n    $ phonegap serve\n```\n\n\nIf you get any prompts in the process, it is always safe to say yes within the scope of this demo. The `phonegap serve` command will start your project on `localhost:3000`. If you navigate to it on your browser, you should see this.\n\n![framework7-default-page](//images.ctfassets.net/1es3ne0caaid/6peL2Lzl7imkwesSOiAKuM/3d2898faf0d1debba50b40bd9c0ae337/framework7-default-page.jpeg)\n\n## Setting up Pusher\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![framework7-create-pusher](//images.ctfassets.net/1es3ne0caaid/2X2s4DWEt2cQEmAG6iui4k/a4bd9f45baaa63a44ea6c85c8f2cf22f/framework7-create-pusher.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![framework7-create-channels](//images.ctfassets.net/1es3ne0caaid/2reyE709jys2EO6eOIQKgw/12d2a1d82bd74a28a017eba7a441a6cc/framework7-create-channels.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with to be provided with some boilerplate code:\n\n![framework7-pusher-app-config](//images.ctfassets.net/1es3ne0caaid/55C390SQikyEYaY8uwW4Uc/3ddd7e19bd5134635da595a617e22cf1/framework7-pusher-app-config.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![framework7-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/3zxbKtLyysGEWyko8I2MOq/292dc1a265982eee46b7236043cfb6cb/framework7-pusher-app-keys.png)\n\nSave your Pusher credentials somewhere in your editor where you can quickly retrieve it as we’ll be needing it soon.\n\n\n## Server configurations\n\nWe’ll be using a local Node server to establish communications with the client so as to render messages in realtime. Before we create our server, let’s install the packages it’ll need to run effectively. Back in your project root, run:\n\n```\n    $ npm install --save axios body-parser cors express pusher pusher-js\n```\n\nThen in your code editor, create a new file `server.js` and set it up like so:\n\n``` javascript\n        //server.js\n        const Pusher = require('pusher');\n        const express = require('express');\n        const bodyParser = require('body-parser');\n        const cors = require('cors');\n        const app = express();\n        app.use(cors());\n        app.use(bodyParser.urlencoded({extended: false}));\n        app.use(bodyParser.json());\n        \n        var pusher = new Pusher({\n            appId: 'Your-app-Id',\n            key: 'Your-app-Key',\n            secret: 'Your-app-secret',\n            cluster: 'Your-app-cluster',\n            encrypted: true\n          });\n        app.set('PORT', process.env.PORT || 6000);\n        app.post('/message', (req, res) =\u003e {\n          const message = req.body;\n          pusher.trigger('chat', 'message', message);\n          res.send(message)\n      \n        });\n        app.listen(app.get('PORT'), () =\u003e \n          console.log('Listening at ' + app.get('PORT')))\n```\n\n\u003e Do not forget to replace the placeholder values here with your unique keys from Pusher.\n\nHere we loaded all the necessary middlewares for the Express server and then configured Pusher using the credentials we got from our Pusher dashboard.\n\nWe also created the `/``message` endpoint that will receive and process messages sent in from our app. Finally, we trigger an event named `message` to Pusher Channels on a channel called `chat`. The `chat` channel holds a message payload that contains the `message` sent by the user.\n\nTo start the server, run:\n\n```\n    $ node server\n```\n\nThe above command should output this message in your terminal:\n\n\n```    \n    Listening on port 6000\n``` \n\n## Application layout\n\nNow let’s open the `index.html` file and set it up. This is the entrance to our app and we’ll place a form to collect the user’s name and a button to take them to the chat page. Open the `index.html` file, delete all the code in it and update it with this:\n\n``` html\n    // www/index.html\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e \n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui\"\u003e\n      \u003cmeta name=\"apple-mobile-web-app-capable\" content=\"yes\"\u003e\n      \u003cmeta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\"\u003e\n      \u003ctitle\u003eMy App\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" href=\"css/framework7.ios.min.css\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"css/framework7.ios.colors.min.css\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"css/app.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cf7-statusbar\u003e\u003c/f7-statusbar\u003e\n        \u003cf7-views\u003e\n          \u003cf7-view id=\"main-view\" navbar-through :dynamic-navbar=\"true\" main\u003e\n            \u003cf7-navbar back-link=\"Back\" sliding\u003e\n              \u003cf7-nav-center sliding\u003ePusher-Framework7 App \u003c/f7-nav-center\u003e\n            \u003c/f7-navbar\u003e\n      \n            \u003cf7-pages\u003e\n              \u003cf7-page\u003e\n                \u003cf7-list\u003e\n                  \u003c/f7-list-item\u003e\n                        \u003cf7-list-item\u003e    \n                          \u003cf7-input type=\"text\" v-model:value=\"name\" placeholder=\"Your name\" clear-button\u003e\u003c/f7-input\u003e\n                        \u003c/f7-list-item\u003e\n                  \u003c/f7-list-item\u003e\n                  \u003cf7-list-button v-on:click=\"enterChat\"\u003eEnter Chat\u003c/f7-list-button\u003e\n                \u003c/f7-list\u003e\n              \u003c/f7-page\u003e\n            \u003c/f7-pages\u003e\n          \u003c/f7-view\u003e\n        \u003c/f7-views\u003e\n      \u003c/div\u003e\n      \u003ctemplate id=\"page-chat\"\u003e\n        \u003cf7-page\u003e\n    \u003c!-- chat page goes here ... --\u003e\n        \u003c/f7-page\u003e\n      \u003c/template\u003e\n      \n    \u003c!-- Add CDN for Pusher and Axios --\u003e\n      \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e \n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \n      \u003cscript src=\"cordova.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/framework7.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/vue.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/framework7-vue.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/app.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNotice we added the CDN for both Pusher and Axios in the scripts above. Next, open the `app.js` file and  replace the code there in it with this:\n\n``` javascript\n    // www/js/app.js\n    \n    (function(){\n    function init(){\n    Vue.use(Framework7Vue)\n    Vue.component('page-chat', {\n      template: '#page-chat',\n    \n    });\n      // Init App\n    new Vue({\n      el: '#app',\n      methods: {\n        enterChat: function(){\n          if(this.name.trim().length === 0 ){\n            alert(\" Enter your name ...\")\n            return false;\n          }\n        }\n      },\n      framework7: {\n        root: '#app',\n        // material: true,\n        routes: [\n          {\n            path: '/chat/',\n            component: 'page-chat'\n          }\n        ],\n      }\n    });\n    }  \n    // Handle device ready event\n    document.addEventListener('deviceready', init, false)\n    })();\n```    \n    \n\nAt this point, if you save both edited files and check back on your browser, you should now get this look:\n\n![framework7-chat-app-stage-1](//images.ctfassets.net/1es3ne0caaid/3CjVXRcJT2Q268I2QyiwCG/4da71e4c5139bcf6a0c6470879a578b5/framework7-chat-app-stage-1.jpeg)\n\nHere we can supply a name and click the **Enter Chat** button to enter the chat page, but at this point it won’t work. That is expected, given that we’ve not defined a function to handle the button click event. To fix that, let’s go ahead and do some data binding between our component and our states. Update the `app.js` file like so:\n\n``` javascript\n    // www/js/app.js\n    \n    // init states\n    var states = {\n        name: '',\n        msgs: []\n    };\n      \n    (function(){\n    function init(){\n    \n    Vue.use(Framework7Vue)\n    \n    Vue.component('page-chat', {\n      template: '#page-chat',\n      data: function(){\n        return states;\n      },\n      // handle onSend\n      methods: {\n        onSend: function(text, clear){\n             console.log(\"clicked\") \n          if( typeof clear == 'function' ) clear()\n        }\n      }\n    });\n      // Init App\n    new Vue({\n      el: '#app',\n      data: function(){\n        return states;\n      },\n      // handle enterChat button\n      methods: {\n        enterChat: function(){\n          if(this.name.trim().length === 0 ){\n            alert(\" Enter your name ...\")\n            return false;\n          }\n          this.msgs.length = 0;\n          this.$f7.mainView.router.load({url:'/chat/'});\n        }\n      },\n      framework7: {\n        root: '#app',\n        /* Uncomment to enable Material theme: */\n        // material: true,\n        routes: [\n          {\n            path: '/chat/',\n            component: 'page-chat'\n          }\n        ],\n      }\n    });\n    }  \n    // Handle device ready event\n    \n    document.addEventListener('deviceready', init, false)\n    })();\n```\n\nHere we defined a states object to hold the name of the user and an array of messages. Then we added the missing callbacks that we defined in our HTML file to handle the click events on the buttons. \n\nIf the user supplies a name and clicks the **Enter Chat** button, it’ll open up the chat page, but if that is not the case, it’ll alert the user to a name. Update your `app.js` file with the snippet above and save. Now go back to the browser, enter a name and click **Enter Chat.** This should now open up the empty chat page.\n\nNext, we’ll set up the chat page to have a simple chat form with an input to collect the message and a button to send it. Open the `index.html` file and update the chat page template section with this code:\n\n``` html\n    // www/index.html\n    // ...\n    \u003cf7-messages\u003e\n      \u003cf7-message v-for=\"msg in msgs\" :name=\"msg.name\" :text=\"msg.text\" :type=\"msg.type\"\u003e\n    \u003c/f7-message\u003e\n    \u003c/f7-messages\u003e\n      \u003cf7-messagebar placeholder=\"type message\" send-link=\"Send\" v-on:submit=\"onSend\" \u003e\n    \u003c/f7-messagebar\u003e\n    // ...\n```    \n\nAdd this code in the section where we left a comment to add chat page. Save the `index.html` file and check back on your browser. The chat page should look like this:\n\n![framework7-chat-app-stage-2](//images.ctfassets.net/1es3ne0caaid/5hX0MmKXSEE2KYKo20kUoM/6a2fb2c3fbf42ac5aef29d016d50e115/framework7-chat-app-stage-2.jpeg)\n\n## Realtime updates\n\nAt this point, we can type messages, but nothing happens when you try to send. This is because we haven’t integrated Pusher. At the beginning we set up Pusher and retrieved our app keys, we’ll now use it to configure our project. Open the `app.js`  file and add this code:\n\n``` javascript\n      // www/js/app.js\n      \n       const pusher = new Pusher('YOUR_PUSHER_KEY', {\n        cluster: 'YOUR_CLUSTER',\n        encrypted: true,\n      });\n      const channel = pusher.subscribe('chat');\n      channel.bind('message', data =\u003e {\n          console.log(data)\n        var type = data.name == states.name ? 'sent':'received'\n        var name = type == 'sent'? states.name : data.name;\n        states.msgs.push({name:name, text:data.text, type:type});\n      });\n      \n      // ...\n```\n\nThis sets up Pusher in our client with the credentials from our dashboard. We subscribe to the `chat` channel we defined on the server and bind our response data to the appropriate view objects to display them on screen.\n\nNow to send the chat to the server when the user clicks the **Send button**, let’s update the onSend function in the `app.js`  file:\n\n``` javascript\n      // www/js/app.js\n      ...\n      \n      // Init Page Components\n    Vue.component('page-chat', {\n      template: '#page-chat',\n      data: function(){\n        return states;\n      },\n      \n      methods: {\n        onSend: function(text, clear){\n             console.log(\"clicked\") \n            var message = {\n                name: this.name,\n                text: text \n            }\n            axios.post('http://localhost:6000/message', message);\n          if( typeof clear == 'function' ) clear()\n          }\n        }\n      });\n      \n      // Init App\n    new Vue({\n      el: '#app',\n      data: function(){\n        return states;\n      },\n      methods: {\n        enterChat: function(){\n          if(this.name.trim().length === 0 ){\n            alert(\" Enter your name ...\")\n            return false;\n          }\n          this.msgs.length = 0;\n          this.$f7.mainView.router.load({url:'/chat/'});\n          \n        }\n      },\n      ...\n```\n\nHere we define a message object that takes the name of the user and text message to send. Then we use Axios to post the message object to the `/messages` endpoint we defined on the server.\n\n\n## Testing\n\nTo test out the application, ensure that both Phonegap server and the Node server is running. If that’s not the case, you can start the Phonegap server in project root with `phonegap serve` and the Node server with `node server`. \n\nBefore testing your application, I recommend you compare your codes with mine to ensure that you did everything right so as not to encounter any blockers. Compare your `index.html`, `server.js` and `app.js`. If everything looks alright, now go ahead and test the application.\n\nOpen two browser windows to `localhost:3000` and send messages:\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/8xB4rlOXW-A?rel=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen\u003e\u003c/iframe\u003e\n\n\n\n## Conclusion\n\nThe importance of realtime engagement of users on any platform cannot be overemphasized. As seen in this tutorial, we were able to implement a realtime chat system with Framework7 and Pusher. I hope you found this tutorial helpful.\n\nFeel free to explore the code for this tutorial on [GitHub](https://github.com/Kennypee/pusher-framework7-chat) and add more features as you deem fit.  ","metaTitle":"Build a chat app using Framework7","metaDescription":"Use Framework7, Vue.js and Node.js to build a simple chat app for Android and iOS. Framework7 is a free and open source mobile HTML framework to develop hybrid mobile apps or web apps with iOS \u0026 Android native look and feel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5aeEXGAZZeeAQGmMc4mggo","type":"Entry","createdAt":"2018-06-05T12:52:45.191Z","updatedAt":"2020-06-19T14:25:43.622Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an iOS chat app using Swift and Chatkit - Part 3: Building the iOS app","url":"ios-chat-app-swift-chatkit-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/pusher/sample-chatroom-ios-chatkit","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2018-06-05","description":"Build a chat app for iOS, with a Laravel API backend. In part three, build the iOS application. By the end of this section you will have a working app with instant chat functionality.","prerequisite":"To follow this series you will need Xcode, Cocoapods, PHP and Laravel installed on your machine. Some knowledge of Xcode and Swift will be helpful.","content":"We previously created the API backend we need our iOS application to connect to. In this part, we will create the application itself using Xcode and Swift. We will be building out the application based on the prototypes we created in the first part of the series.\n\nHere are the prototypes we made using our prototyping tool:\n\n![Create-iOS-Chat-App-Using-Chatkit-prototype](//images.ctfassets.net/1es3ne0caaid/2OGOxROMGsikAgIMAksa66/810bd07140a87a274ee6f983235342c4/Create-iOS-Chat-App-Using-Chatkit-prototype.png)\n\n Let’s go through some requirements you need to have to follow this part of the article.\n\n## Creating our app’s storyboard in Xcode\n\nWe previously created the scenes of our application in Xcode using the Clean Swift templates. Now we are going to work on creating our storyboards and linking them to the view controllers we created.\n\n### Creating the launch scene\n\nFirst add a Navigation View Controller and a View Controller to the storyboard as seen below. The Navigation Controller will be the entry point to our application. Set the custom class for the second View Controller as the `LaunchViewController` we created in the first part of the article.\n\n![Create-iOS-Chat-App-Using-Chatkit-launch-scene-controller](//images.ctfassets.net/1es3ne0caaid/xgFRNtuy3YGiiSUMWsAYW/3e22912c68e4bcd6f09012d0c38d7ee0/Create-iOS-Chat-App-Using-Chatkit-launch-scene-controller.png)\n\nWe will use the `LaunchViewController` to determine which initial screen to present to the user when the app is launched. If the user is logged in we’ll present the contacts list, if not, we’ll present the Welcome scene so the user can log in or sign up.\n\n### Creating the welcome scene\nThe next scene we will create is the welcome scene. When a user is not logged in, they will be redirected to this scene. From here they can sign up or log in to their account. In the `Main.storyboard` add the View Controller and create a “Present Modally” manual segue from the launch controller to the controller you just created.\n\n![Create-iOS-Chat-App-Using-Chatkit-welcome-scene](//images.ctfassets.net/1es3ne0caaid/P1C4QxlOgKmQOwEkckUqs/31f6d0f2a15493825d2d33af23caaabe/Create-iOS-Chat-App-Using-Chatkit-welcome-scene.png)\n\nAfter creating the welcome view controller, you can start designing it to look like the prototype using a combination of `UILabel`s, `UIButton`s, and `UIView`s. Then set the name of the manual segue to **Welcome**. Finally, set the custom class for the view controller to `WelcomeViewController`\n\n### Creating the signup and login scene\n\nNext create two new View Controllers. The first will be for login and the second will be for sign up. Set theView Controller for the Signup controller to `SignupViewController` and the custom class for the login View Controller to `LoginViewController`.\n\nCreate a “Present Modally” segue from the **Sign In** button to the `LoginViewController` and from the **Don’t have an account? Sign up here** button to the `SignupViewController`. Name the segues **Login** and **Signup**.\n\n![Create-iOS-Chat-App-Using-Chatkit-signup-login-scene](//images.ctfassets.net/1es3ne0caaid/3Yp5Dp0gNaEG24i0aAWKcE/bddb6f073a6c86d080affba594de08be/Create-iOS-Chat-App-Using-Chatkit-signup-login-scene.png)\n\nIn the Signup view create three input fields and create an `@IBOutlet` for them in the `SignupViewController`, we named ours `emailTextField`, `nameTextField` and `passwordTextField`. Create an `@IBAction` called `cancelButtonWasPressed` for the cancel button and `signupButtonWasPressed`  for the sign up button.\n\nIn the login view, we will follow almost the same steps as the sign up controller, but, this time the  `@IBAction` will be named `loginButtonWasPressed` and there will be no `nameTextField`.\n\n### Creating the ListContacts and Chatroom scenes\n\nNext, create a Navigation controller and make sure the root controller for it is a `UITableViewController`. Create a manual segue named **ListMessages** from the `LaunchViewController` to the navigation controller and set the custom class of the `UITableViewController` to `ListContactsViewController`.\n\nCreate a “Present Modally” manual segue named **MainNavigator** between the navigation controller and the Login and Signup scenes. \n\nLastly, create a new `UIViewController` and create a segue named **Chatroom** from the Prototype Cells to the new View Controller, then set the custom class of the View Controller to `ChatroomViewController`.\n\nHere is a screenshot of our entire storyboard:\n\n![Create-iOS-Chat-App-Using-Chatkit-storyboard](//images.ctfassets.net/1es3ne0caaid/4bUz80F2Io4CSKSWA60mY0/131de2d7b16dd933cedd7b68eff1fd26/Create-iOS-Chat-App-Using-Chatkit-storyboard.png)\n\n## Adding functionality to our scenes\n\nNow that we have our scenes in place and hooked up to our View Controllers, let’s start adding the functionality to them. We will start at the very first piece of code that gets called when the application is launched: `AppDelegate`.\n\nIn the `AppDelegate` file, right below the `import` statement add the code block below:\n\n``` swift\n    struct AppConstants {\n        static let ENDPOINT: String = \"http://127.0.0.1:8000\"\n        static let CLIENT_ID: Int = API_CLIENT_ID\n        static let CLIENT_SECRET: String = \"API_CLIENT_SECRET\"\n        static let CHATKIT_INSTANCE_LOCATOR: String = \"CHATKIT_INSTANCE_LOCATOR\"\n    }\n```\n\nIn the `struct` above, we define some constants for our application. We will use this as some configuration value handler for our application. Replace the values for the `API_CLIENT_ID`, `API_CLIENT_SECRET` and `CHATKIT_INSTANCE_``LOCATOR` with the actual values.\n\n\n\u003e 💡  You can get the `API_CLIENT_*` key values from when you were setting up Passport in the previous part of the tutorial, and you can get the `CHATKIT_INSTANCE_``LOCATOR` from the Chatkit dashboard.\n\n### Launch scene\n\nOpen the `Scenes/Launch/LaunchSceneController` file and let us start adding some functionality to the class.\n\nIn the file, replace the code with [this](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Launch/LaunchViewController.swift)\n\nWe have simplified most of the code that comes with the Clean Swift template. In the `viewDidLoad` method, we check to see if the user is logged in using an `Authenticator` class, which we will create later. If the user is logged in then we route the user to the list messages page else we go to the welcome page.\n\nNext, open the `LaunchRouter` class and in the file paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Launch/LaunchRouter.swift)\n\nIn the router we have defined the `routeToWelcome` and `routeToListContacts` methods. Both methods do what is necessary to route the user to either the **Welcome** or **MainNavigator** segue.\n\nThis is all we need to do for the Launch scene. You can delete the other template files in the `Scenes/Launch` directory as we will not be using them.\n\n### Welcome scene\n\nFor our Welcome scene we do not need to do anything actually as the scene has no logic. In the `WelcomeViewController` you can just paste the code below:\n\n``` swift\n    import UIKit\n    \n    class WelcomeViewController: UIViewController {\n    }\n```\n\nYou can delete the other template files in the Welcome scene as we will not be needing them and they serve no purpose.\n\n### Login scene\n\nFor our Login scene we will start by adding the logic to our `LoginModels` class. The models will help us format the response from the API to what our application will be able to consume.\n\nIn the `LoginModels` file paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Login/LoginModels.swift). \n\nIn the code above we have defined a series of `struct`s and in them we have `Request` and `Response`. The `Request` standardises the parameters required for the request to the login endpoint while the `Response` takes the raw response from the API and saves them as either a  `ChatkitToken` or `UserToken` object. We will define the `ChatToken` and the `UserToken` object later in the article\n\nNext open the `LoginInteractor` and paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Login/LoginInteractor.swift) into the file.\n\nIn this class we have a `login` method that just calls a `login` method on the `UsersWorker` class. Depending on the response from that call, we either show a login error or we route to the contacts list.\n\nNext, open the `LoginRouter` class and in the file paste the following code:\n\n``` swift\n    import UIKit\n    \n    @objc protocol LoginRoutingLogic {\n        func routeToListContacts()\n    }\n    \n    class LoginRouter: NSObject, LoginRoutingLogic {\n        weak var viewController: LoginViewController?\n    \n        func routeToListContacts() {\n            let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n            let destinationVC = storyboard.instantiateViewController(withIdentifier: \"MainNavigator\") as! UINavigationController\n            \n            viewController!.show(destinationVC, sender: nil)\n        }\n    }\n```\n\nThe router above has just one method. This method routes the app to the list contacts page when called.\n\nThe last class we want to edit for this scene is the `LoginViewController`. This is the class that pieces the other classes above. Open the file and paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Login/LoginViewController.swift) into the file.\n\nIn the view controller we have the usual set up methods used by Clean Swift but we also have the `@IBAction`s and `@IBOutlet`s we created when we were creating our storyboards. \n\nIn the `cancelButtonPressed` method we just dismiss the login screen modal, in the `loginButtonPressed` method we call the `login` method on the interactor, and in the `showValidationError` method we show an alert with an error message.\n\n### Signup scene\n\nFor the Login scene functionality we will start with the models. Open the `SignupModels` file in the `Scene/Signup` directory and paste the code below into it:\n\n``` swift\n    import Foundation\n    \n    enum Signup {    \n        struct Request {\n            var name: String\n            var email: String\n            var password: String\n        }\n    \n        struct Response {\n            var user: User?\n            \n            init(data: [String:Any]) {\n                self.user = User(\n                    id: data[\"id\"] as! Int,\n                    name: data[\"name\"] as! String,\n                    email: data[\"email\"] as! String,\n                    chatkit_id: data[\"chatkit_id\"] as! String\n                )\n            }\n        }\n    }\n```\n\nIn the models we have Request and Response structs. Their functionality was described above.\n\nNext, paste the code below into the `SignupInteractor` class in the same directory:\n\n``` swift\n    import Foundation\n    \n    protocol SignupBusinessLogic {\n        func createAccount(request: Signup.Request)\n    }\n    \n    class SignupInteractor: SignupBusinessLogic {\n        var viewController: SignupFormErrorLogic?\n        var router: (NSObjectProtocol \u0026 SignupRoutingLogic)?\n        var worker = UsersWorker()\n    \n        func createAccount(request: Signup.Request) -\u003e Void {\n            self.worker.signup(request: request) { user, error in\n                guard error == nil else {\n                    self.viewController?.showValidationError(\"Error creating account!\")\n                    return\n                }\n                \n                self.router?.routeToListContacts()\n            }\n        }\n    }\n```\n\nIn the `createAccount` method, we call the `signup` method on the `UsersWorker` and then depending on the response we either route to the contacts list or show an error.\n\nNext, open the router class `SignupRouter` and paste the code below into it:\n\n``` swift\n    import UIKit\n    \n    @objc protocol SignupRoutingLogic {\n        func routeToListContacts()\n    }\n    \n    class SignupRouter: NSObject, SignupRoutingLogic {\n        weak var viewController: SignupViewController?\n        \n        func routeToListContacts() {\n            let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n            let destinationVC = storyboard.instantiateViewController(withIdentifier: \"MainNavigator\") as! UINavigationController\n            \n            viewController!.show(destinationVC, sender: nil)\n        }\n    }\n```\n\nAs in the login router, this method just routes the user to the contacts screen using the `MainNavigator` segue.\n\nFor the `SignupViewController`, use [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Signup/SignupViewController.swift).\n\nIn this view controller, we set up the Clean Swift components then in the `cancelButtonPressed` method we dismiss the signup modal and in the `signupButtonPressed` method we create the account using the interactor. The `showValidationError` shows an alert when it is called, usually when there is an error signing up.\n\n### ListContacts scene\n\nThe ListContacts scene is supposed to show a list of the contacts available to chat with. Open the `ListContactsModels` file and paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/ListContacts/ListContactsModels.swift) into the file.\n\nIn the code above we have the usual `Request` and `Response` (explained above). We also have a `ParseContact` struct that takes the raw data and an array of `rooms`. It parses it into a `Contact` model object with `User` and `PCRoom` object. We reference this in the `Response`s above so as to avoid duplication.\n\nWe also have a `ViewModel` struct that we use to format the data in a way the presenter needs to display the data to the user.\n\nNext open the `ListContactsInteractor` class and paste the code below into it: https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/ListContacts/ListContactsInteractor.swift\n\nIn the method above, we have `fetchContacts`, which uses the `UsersWorker` class to fetch the contacts from the API and also the `addContact` class, which also uses the same worker to add contacts.\n\nAfter a successful call, in both methods we call the presenter, which formats the data and makes a call to the View Controller and displays the content. \n\nLet’s update the code for the `ListContactsPresenter`. Open the file and paste the code below into the file:\n\n``` swift\n    import Foundation\n    \n    protocol ListContactsPresentationLogic {\n        func presentContacts(_ contacts: [Contact])\n        func presentAddedContact(_ contact: Contact)\n    }\n    \n    class ListContactsPresenter: ListContactsPresentationLogic {\n        weak var viewController: ListContactsDisplayLogic?\n        var displayedContacts: [ListContacts.Fetch.ViewModel.DisplayedContact] = []\n    \n        func presentContacts(_ contacts: [Contact]) {\n            displayedContacts = []        \n            for contact in contacts {\n                displayedContacts.append(ListContacts.Fetch.ViewModel.DisplayedContact(\n                    id: contact.user.chatkit_id,\n                    name: contact.user.name, \n                    isOnline: false\n                ))\n            }\n            displayContacts()\n        }\n        \n        func presentAddedContact(_ contact: Contact) {\n            displayedContacts.append(ListContacts.Fetch.ViewModel.DisplayedContact(\n                id: contact.user.chatkit_id,\n                name: contact.user.name, \n                isOnline: false\n            ))\n            displayContacts()\n        }\n        \n        private func displayContacts() {\n            let vm = ListContacts.Fetch.ViewModel(displayedContacts: displayedContacts)\n            viewController?.displayFetchedContacts(viewModel: vm)\n        }\n    }\n```\n\nThe code above has three methods. `presentContacts` and `presentAddedContact` do pretty much the same thing: format the contacts, append it to the `displayedContacts` array, and call the `displayContacts` method. The `displayContacts` method just calls `displayFetchedContacts` on the View Controller.\n\nLet us update the code for the `ListContactsViewController`. Paste the following into the controller:\n\n``` swift\n    import UIKit\n    import PusherChatkit\n    \n    protocol ListContactsDisplayLogic: class {\n        func displayFetchedContacts(viewModel: ListContacts.Fetch.ViewModel)\n    }\n    \n    class ListContactsViewController: UITableViewController, ListContactsDisplayLogic {\n        var interactor: ListContactsBusinessLogic?\n        var displayedContacts: [ListContacts.Fetch.ViewModel.DisplayedContact] = []\n        var router: (NSObjectProtocol \u0026 ListContactsRoutingLogic \u0026 ListContactsDataPassing)?\n      \n        override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {\n            super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)\n            setup()\n        }\n      \n        required init?(coder aDecoder: NSCoder) {\n            super.init(coder: aDecoder)\n            setup()\n        }\n      \n        private func setup() {\n            let viewController = self\n            let interactor = ListContactsInteractor()\n            let presenter = ListContactsPresenter()\n            let router = ListContactsRouter()        \n            viewController.interactor = interactor\n            viewController.router = router\n            interactor.presenter = presenter\n            presenter.viewController = viewController\n            router.viewController = viewController\n            router.dataStore = interactor\n        }\n          \n        override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n            if let scene = segue.identifier {\n                let selector = NSSelectorFromString(\"routeTo\\(scene)WithSegue:\")\n                if let router = router, router.responds(to: selector) {\n                    router.perform(selector, with: segue)\n                }\n            }\n        }\n    }\n```\n\nThis is the basic set up that comes with the Clean Swift templates. It just sets up the connections between all the **ListContacts** scene classes. Next, let’s add the methods below to the class. These are specific to our implementation:\n\n``` swift\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        navigationItem.title = \"Contacts\"\n        navigationController?.navigationBar.prefersLargeTitles = true\n        navigationItem.rightBarButtonItem = UIBarButtonItem(\n            title: \"Add\", \n            style: .plain, \n            target: self, \n            action: #selector(showAddContactPopup)\n        )\n                \n        initialiseChatkit()\n    }\n        \n    private func initialiseChatkit() {\n        let userId = CurrentUserIDDataStore().getID()\n    \n        let chatManager = ChatManager(\n            instanceLocator: AppConstants.CHATKIT_INSTANCE_LOCATOR,\n            tokenProvider: ChatkitTokenDataStore(),\n            userID: userId.id!\n        )\n        \n        chatManager.connect(delegate: self) { user, error in\n            guard error == nil else { return }\n            self.interactor?.currentUser = user\n            self.fetchContacts()\n        }\n    }\n    \n    var emailTextField: UITextField?\n    \n    @objc func showAddContactPopup(_ sender: Any) {\n        let alert = UIAlertController(\n            title: \"Add\",\n            message: \"Enter the users email address\",\n            preferredStyle: .alert\n        )\n    \n        alert.addTextField { emailTextField in\n            emailTextField.placeholder = \"Enter email address\"\n            self.emailTextField = emailTextField\n        }\n        \n        alert.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n        alert.addAction(UIAlertAction(title: \"Add Contact\", style: .default) { action in\n            let request = ListContacts.Create.Request(user_id: self.emailTextField!.text!)\n            self.interactor?.addContact(request: request)\n        })\n        \n        present(alert, animated: true, completion: nil)\n    }\n    \n    private func fetchContacts() {\n        interactor?.fetchContacts(request: ListContacts.Fetch.Request())\n    }\n    \n    func displayFetchedContacts(viewModel: ListContacts.Fetch.ViewModel) {\n        displayedContacts = viewModel.displayedContacts\n        tableView.reloadData()\n    }\n```\n\nIn the `viewDidLoad` method, we configure the navigation bar and add an “Add” button to it. We also set the title to “Contacts”. The `showAddContactPopup` method shows an alert controller with a text field for the contact you want to add. When you click add, the contact will be added. \n\nThe `initialiseChatkit` method connects to Chatkit and stores the `currentUser` in the interactor while the `fetchContacts` method gets all the contacts from the API while the `displayFetchedContacts` method simply displays them.\n\nNext we will add the class extension of `ListContactsViewController` that implements the `UITableViewDelegate` protocol. At the bottom of the `ListContactsViewController` paste the following:\n\n``` swift\n    extension ListContactsViewController {    \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n        \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return displayedContacts.count\n        }\n        \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            var cell = tableView.dequeueReusableCell(withIdentifier: \"ContactTableViewCell\")        \n            if cell == nil {\n                cell = UITableViewCell(style: .subtitle, reuseIdentifier: \"ContactTableViewCell\")\n            }\n    \n            let contact = displayedContacts[indexPath.row]\n            cell?.textLabel?.text = contact.name\n            cell?.detailTextLabel?.text = contact.isOnline ? \"online\" : \"Seen recently\"\n    \n            return cell!\n        }\n    }\n```\n\nThe method should be familiar to you as it just helps us feed data to the `UITableView` so our contacts display properly on the table.\n\nThe last bit of code for the ListContacts scene is the `ListContactsRouter`. This will manage the routing to the Chatroom scene. Open the `ListContactsRouter` class and add the following code:\n\n``` swift\n    import UIKit\n    \n    @objc protocol ListContactsRoutingLogic {\n        func routeToChatroom(segue: UIStoryboardSegue)\n    }\n    \n    protocol ListContactsDataPassing {\n        var dataStore: ListContactsDataStore? { get }\n    }\n    \n    class ListContactsRouter: NSObject, ListContactsRoutingLogic, ListContactsDataPassing {\n        var dataStore: ListContactsDataStore?\n        weak var viewController: ListContactsViewController?\n    \n        func routeToChatroom(segue: UIStoryboardSegue) {\n            let destinationVC = segue.destination as! ChatroomViewController\n            var destinationDS = destinationVC.router!.dataStore!\n            passDataToChatroom(source: dataStore!, destination: \u0026destinationDS)\n        }\n        \n        func passDataToChatroom(source: ListContactsDataStore, destination: inout ChatroomDataStore) {\n            let selectedRow = viewController?.tableView.indexPathForSelectedRow?.row\n            destination.contact = source.contacts?[selectedRow!]\n            destination.currentUser = source.currentUser\n        }\n    } \n```\n\nIn the `routeToChatroom` method we call `passDataToChatroom` which passes data (the `Contact` object and the current user) to the `ListContactsViewController` for usage.\n\n### Chatroom scene\nIn the Chatroom scene we will start with the `ChatroomModels`. Open the file and paste the following code:\n\n``` swift\n    import Foundation\n    import MessageKit\n    import PusherChatkit\n    \n    enum Chatroom {\n        struct Messages {        \n            struct Fetch {\n                struct Request {\n                    var room: PCRoom\n                }\n                \n                struct Response {\n                    var messages: [Message] = []                \n                    init(messages: [PCMessage]) {\n                        for message in messages {\n                            let res = Chatroom.Messages.Create.Response(message: message)\n                            self.messages.append(res.message)\n                        }\n                    }\n                }\n            }\n            \n            struct Create {\n                struct Request {\n                    var text: String\n                    var sender: Sender\n                    var room: PCRoom\n                }\n                \n                struct Response {\n                    var message: Message                \n                    init(message: PCMessage) {\n                        self.message = Message(\n                            text: message.text,\n                            sender: Sender(id: message.sender.id, displayName: message.sender.displayName),\n                            messageId: String(describing: message.id),\n                            date: ISO8601DateFormatter().date(from: message.createdAt)!\n                        )\n                    }\n                }\n            }\n        }\n    }\n```\n\nLike the other methods, we have the usual `Request` and `Response` struct (explained above).\n\nIn the `ChatroomInteractor.swift` file paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Chatroom/ChatroomInteractor.swift).\n\n\n\nIn the `subscribeToRoom` method, we subscribe the `currentUser` to a room. We also set the `PCRoomDelegate` to the interactor which means we can implement methods that handle events on the interactor.\n\nIn the `addChatMessage` method we add a new message to the room as the `currentUser`. When the user is added we pass the `messageId` to the completion handler.\n\nIn the extension class, we implement the `newMessage` method of the `PCRoomDelegate`. The method is fired automatically anytime there is a new message in the room. So we handle the new message by presenting it to the controller using the `ChatroomPresenter`s `presentMessages` method.\n\nNext, open the `ChatPresenter.swift` file and paste the code below into it:\n\n``` swift\n    import Foundation\n    \n    protocol ChatroomPresentationLogic {\n        func presentMessages(response: Chatroom.Messages.Fetch.Response)\n    }\n    \n    class ChatroomPresenter: ChatroomPresentationLogic {\n        weak var viewController: ChatroomDisplayLogic?\n        \n        func presentMessages(response: Chatroom.Messages.Fetch.Response) {\n            viewController?.displayChatMessages(response: response)\n        }\n    }\n```\n\nThe only method there is the `presentMessages` method. It just calls the `displayChatMessages` method on the view controller.\n\nNext, in the `ChatroomRouter` just paste in the following code:\n\n``` swift\n    import Foundation\n    \n    protocol ChatroomDataPassing {\n        var dataStore: ChatroomDataStore? { get }\n    }\n    \n    class ChatroomRouter: NSObject, ChatroomDataPassing {\n        weak var viewController: ChatroomViewController?\n        var dataStore: ChatroomDataStore?\n    }\n```\n\nThen in the `ChatroomViewController` we are going to split the controller into extensions as the code is lengthy. First paste the Clean Swift set up code into the file:\n\n``` swift\n    import UIKit\n    import MessageKit\n    import PusherChatkit\n    import MessageInputBar\n    \n    protocol ChatroomDisplayLogic: class {\n        func displayChatMessages(response: Chatroom.Messages.Fetch.Response)\n    }\n    \n    class ChatroomViewController: MessagesViewController, ChatroomDisplayLogic {\n        var messages: [Message] = []\n        var interactor: ChatroomBusinessLogic?\n        var router: (NSObjectProtocol \u0026 ChatroomDataPassing)?\n      \n        override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {\n            super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)\n            setup()\n        }\n      \n        required init?(coder aDecoder: NSCoder) {\n            super.init(coder: aDecoder)\n            setup()\n        }\n      \n        private func setup() {\n            let viewController = self\n            let interactor = ChatroomInteractor()\n            let presenter = ChatroomPresenter()\n            let router = ChatroomRouter()\n      \n            viewController.interactor = interactor\n            viewController.router = router\n            interactor.presenter = presenter\n            presenter.viewController = viewController\n            router.viewController = viewController\n            router.dataStore = interactor\n        }\n    }\n```\n\nNext, we will paste the class extension that handles the loading of the chat messages, and configures [MessageKit](https://messagekit.github.io/) and [Chatkit](https://pusher.com/chatkit) as the view is loaded:\n\n``` swift\n    extension ChatroomViewController {\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            self.initialiseChatkit()\n            self.configureMessageKit()\n            self.navigationItem.title = router?.dataStore?.contact?.user.name\n        }\n        \n        private func initialiseChatkit() {\n            guard let room = router?.dataStore?.contact?.room else { return }\n            guard let currentUser = router?.dataStore?.currentUser else { return }\n            self.interactor?.currentUser = currentUser\n            self.interactor?.subscribeToRoom(room: room)\n        }\n        \n        private func configureMessageKit() {\n            messageInputBar.delegate = self\n            messagesCollectionView.messagesDataSource = self\n            messagesCollectionView.messagesLayoutDelegate = self\n            messagesCollectionView.messagesDisplayDelegate = self\n            scrollsToBottomOnKeyboardBeginsEditing = true\n            maintainPositionOnKeyboardFrameChanged = true\n        }\n        \n        func displayChatMessages(response: Chatroom.Messages.Fetch.Response) {\n            self.messages = response.messages\n            self.messagesCollectionView.reloadData()\n            self.messagesCollectionView.scrollToBottom()\n        }\n    }\n```\n\nIn the extension above we have the `initialiseChatkit` method. It takes the current user passed on from the ListContacts scene and saves it to the interactor. Then the next method is the `configureMessageKit` where we configure MessageKit. Lastly, we have the `displayChatMessages` method that displays the messages.\n\nNext, paste the extension below the previous class:\n\n``` swift\n    extension ChatroomViewController: MessagesDataSource {    \n        func isFromCurrentSender(message: MessageType) -\u003e Bool {\n            return message.sender == currentSender()\n        }\n    \n        func currentSender() -\u003e Sender {\n            return Sender(id: (interactor?.currentUser?.id)!, displayName: (interactor?.currentUser?.name)!)\n        }\n    \n        func numberOfSections(in messagesCollectionView: MessagesCollectionView) -\u003e Int {\n            return self.messages.count\n        }\n        \n        func messageForItem(at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e MessageType {\n            return self.messages[indexPath.section]\n        }\n    \n        func configureAvatarView(_ avatarView: AvatarView, for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) {\n            avatarView.initials = self.initials(fromName: message.sender.displayName)\n        }\n    \n        func messageTopLabelAttributedText(for message: MessageType, at indexPath: IndexPath) -\u003e NSAttributedString? {\n    \n            return NSAttributedString(\n                string: message.sender.displayName,\n                attributes: [NSAttributedString.Key.font: UIFont.preferredFont(forTextStyle: .caption1)]\n            )\n        }\n    \n        func messageBottomLabelAttributedText(for message: MessageType, at indexPath: IndexPath) -\u003e NSAttributedString? {\n    \n            struct ConversationDateFormatter {\n                static let formatter: DateFormatter = {\n                    let formatter = DateFormatter()\n                    formatter.dateStyle = .medium\n                    return formatter\n                }()\n            }\n    \n            return NSAttributedString(\n                string: ConversationDateFormatter.formatter.string(from: message.sentDate),\n                attributes: [NSAttributedStringKey.font: UIFont.preferredFont(forTextStyle: .caption2)]\n            )\n        }\n    }\n    \n    extension ChatroomViewController: MessagesLayoutDelegate {\n        func messageBottomLabelHeight(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e CGFloat {\n            return 16\n        }\n    \n        func messageTopLabelHeight(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e CGFloat {\n            return 16\n        }\n    \n        func avatarPosition(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e AvatarPosition {\n            return AvatarPosition(horizontal: .natural, vertical: .messageBottom)\n        }\n    \n        func messagePadding(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e UIEdgeInsets {\n            return isFromCurrentSender(message: message)\n                ? UIEdgeInsets(top: 0, left: 30, bottom: 0, right: 4)\n                : UIEdgeInsets(top: 0, left: 4, bottom: 0, right: 30)\n        }\n    \n        func footerViewSize(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e CGSize {\n            return CGSize(width: messagesCollectionView.bounds.width, height: 10)\n        }\n    \n        func heightForLocation(message: MessageType, at indexPath: IndexPath, with maxWidth: CGFloat, in messagesCollectionView: MessagesCollectionView) -\u003e CGFloat {\n            return 200\n        }\n    }\n    \n    extension ChatroomViewController: MessagesDisplayDelegate {\n    }\n    \n    extension ChatroomViewController: MessageInputBarDelegate {\n        func messageInputBar(_ inputBar: MessageInputBar, didPressSendButtonWith text: String) {\n            guard interactor?.currentUser != nil else { return }\n            guard let room = router?.dataStore?.contact?.room else { return }\n     \n            let request = Chatroom.Messages.Create.Request(text: text, sender: currentSender(), room: room)\n    \n            self.interactor?.addChatMessage(request: request) { id, error in\n                guard error == nil else { return }\n                inputBar.inputTextView.text = String()\n            }\n        }\n    }\n```\n\nThe first extension above extends the `[MessagesDataSource](https://messagekit.github.io/Protocols/MessagesDataSource.html)` protocol and has to conform to some of its methods. Here we implement `currentSender`, `numberOfMessages` and `messageForItem`, all self explanatory.\n\nThe next extension on the list is for the `[MessagesLayoutDelegate](https://messagekit.github.io/Protocols/MessagesLayoutDelegate.html)` protocol and it implements some of the methods but there are other methods you can implement to change the layouts display. There is also the implementation of `[MessagesDisplayDelegate](https://messagekit.github.io/Protocols/MessagesDisplayDelegate.html)`, which is empty but you can look through the documentation to see methods you can implement.\n\nLastly, we implement  `[MessageInputBarDelegate](https://messagekit.github.io/Protocols/MessageInputBarDelegate.html)` and in there we have the `messageInputBar` method, which is called after the send button is clicked on the chat screen. In this method we send the message using the interactor and then empty the input.\n\nWith this we are done with our scenes. Next, we will add the code for our supporting classes used in the scenes.\n\n\n## Implementing supporting classes for our application\n\nThe first set of supporting classes we will implement are the models. The models we want to implement are `User`, `Message`, `Contact`, `Room`, `UserToken`, and `ChatToken`. Here are the class contents:\n\n### Implementing the models\n\nTo implement the models, create a new folder/group in the root directory called **Models** and start creating the model files below in them. Get the code from the GitHub links.\n\n[The code for the `Message.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/Message.swift)\n\n[The code for the `Contact.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/Contact.swift) \n\n[The code for the `User.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/User.swift)\n\n[The code for `UserToken` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/UserToken.swift)\n\nIn the `UserToken` class above we implement the `NSCoding` protocol, we need this so we can save the `UserToken` object to UserDefaults.\n\n[The code to the `ChatToken.swift` model]( https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/ChatkitToken.swift)\n\nLike the `UserToken` model, the `ChatToken` does the same thing with the `NSCoding` protocol.\n\nWhen we have received a `chatkit_id` back from the server we want to store that in `UserDefaults` so that we can use it to connect to Chatkit.\n\n[The code to the `CurrentUserID.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/CurrentUserID.swift)\n\n### Implementing the services\nCreate a new folder/group in the root directory for the project on Xcode and name it **Services** and in there add the following files:\n\n`Authenticator.swift` class:\n\n``` swift\n    import Foundation\n    \n    class Authenticator {\n        func isLoggedIn() -\u003e Bool {\n            return getAccessToken().count \u003e 0\n        }\n    \n        private func getAccessToken() -\u003e String {\n            guard let token = ChatkitTokenDataStore().getToken().access_token, token.count \u003e 0 else {\n                return \"\"\n            }\n    \n            return token\n        }\n    } \n```\n\nThis `Authenticator` class checks if the user is logged in. It does this by checking if the token from the API is saved in UserDefaults.\n\n`UserTokenDataStore.swift` class:\n\n``` swift\n    import Foundation\n    \n    class UserTokenDataStore {\n        static var DATA_KEY = \"WORDS_API_TOKEN\"\n        \n        func getToken() -\u003e UserToken {\n            if let token = UserDefaults.standard.object(forKey: type(of: self).DATA_KEY) as! Data? {\n                return NSKeyedUnarchiver.unarchiveObject(with: token) as! UserToken\n            }\n    \n            return UserToken(token_type: nil, access_token: nil, expires_in: nil)\n        }\n        \n        func setToken(_ token: UserToken) {\n            let encodedData = NSKeyedArchiver.archivedData(withRootObject: token)\n            UserDefaults.standard.set(encodedData, forKey: type(of: self).DATA_KEY)\n        }\n    }\n```\n\nThe `UserDataTokenStore` class saves and fetches the token required to make calls to our backend API.\n\nAdd the `ChatTokenDataStore.swift` class with [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Services/ChatkitTokenDataStore.swift)\n\nThe class above does the same as the `UserTokenDataStore`, however it checks for the token required to make calls to the Chatkit API. It also extends the `[PCTokenProvider](https://github.com/pusher/chatkit-swift/blob/master/Source/PCTokenProvider.swift)` and thus we have the `fetchToken` method that fetches the token from the UserDefaults.\n\nAdd the `CurrentUserIDDataStore.swift` class with [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Services/CurrentUserIDDataStore.swift)\n\nThe class above does the same as the two token data stores. It takes some information, in this case the user’s Chatkit ID, and fetches and stores it in `UserDefaults`.\n\n### Implementing the global worker\nThe last class we want to implement is the `UsersWorker`. Create a `UsersWorker` class and paste the following into the file:\n\n``` swift\n    import UIKit\n    import Alamofire\n    \n    class UsersWorker {\n    }\n    \n    // MARK: Errors\n    \n    enum ContactsError: Error {\n        case CannotAdd\n        case CannotFetch\n    }\n    \n    enum UsersStoreError: Error {\n        case CannotLogin\n        case CannotSignup\n        case CannotFetchChatkitToken\n    }\n```\n\nNow we will start adding methods to the `UsersWorker` class. The first method is the `fetchContacts` method, which calls the API, using [Alamofire](https://github.com/Alamofire/Alamofire), to get a list of contacts for display:\n\n``` swift\n    func fetchContacts(currentUser: PCCurrentUser, completionHandler: @escaping ([Contact]?, ContactsError?) -\u003e Void){\n        let enc = JSONEncoding.default\n        let url = AppConstants.ENDPOINT + \"/api/contacts\"\n        let headers = authorizationHeader(token: nil)\n        \n        Alamofire\n            .request(url, method: .get, parameters: nil, encoding: enc, headers: headers)\n            .validate()\n            .responseJSON { response in\n                switch (response.result) {\n                case .success(let data):                \n                    DispatchQueue.main.async {\n                        let data = data as! [[String:Any]?]\n                        let res = ListContacts.Fetch.Response(for: currentUser, data:data)\n                        completionHandler(res.contacts, nil)\n                    }\n                case .failure(_):\n                    completionHandler(nil, ContactsError.CannotFetch)\n            }\n        }\n    }\n```\n\nThe next method to add to the class is the `addContact` method. The method makes the call to the API to add a contact:\n\n``` swift\n    func addContact(currentUser: PCCurrentUser, request: ListContacts.Create.Request, completionHandler: @escaping (Contact?, ContactsError?) -\u003e Void) {\n        let params = [\"user_id\": request.user_id]\n        let headers = authorizationHeader(token: nil)\n        \n        postRequest(\"/api/contacts\", params: params, headers: headers) { data in\n            guard data != nil else {\n                return completionHandler(nil, ContactsError.CannotAdd)\n            }\n            \n            DispatchQueue.main.async {\n                let response = ListContacts.Create.Response(for: currentUser, data: data!)\n                completionHandler(response.contact, nil)\n            }\n        }\n    }\n```\n\nThe next method to add to the class is the `login` method. The method makes a call to the API to login. The API returns the token for the API as the response. We make an additional call to the API to get the Chatkit token for the user so we can make calls to the Chatkit API on behalf of the user:\n\n``` swift\n    func login(request: Login.Account.Request, completionHandler: @escaping (UserToken?, UsersStoreError?) -\u003e Void) {\n        let params: Parameters = [\n            \"grant_type\": \"password\",\n            \"username\": request.email,\n            \"password\": request.password,\n            \"client_id\": AppConstants.CLIENT_ID,\n            \"client_secret\": AppConstants.CLIENT_SECRET,\n        ]\n        \n        postRequest(\"/oauth/token\", params: params, headers: nil) { data in\n            guard data != nil else {\n                return completionHandler(nil, UsersStoreError.CannotLogin)\n            }\n            \n            let response = Login.Account.Response(data: data!)\n            \n            let request = Login.Chatkit.Request(\n                username: request.email, \n                password: request.password, \n                token: response.userToken\n            )\n            \n            self.fetchChatkitToken(request: request) { token, error in\n                guard error == nil else {\n                    return completionHandler(nil, UsersStoreError.CannotFetchChatkitToken)\n                }\n                \n                ChatkitTokenDataStore().setToken(token!)\n                UserTokenDataStore().setToken(response.userToken)\n                \n                DispatchQueue.main.async {\n                    completionHandler(response.userToken, nil)\n                }\n            }\n        }\n    }\n```\n\nNext we will add the `signup` method, this will call the API to create a user and then it will log the user in and fetch the Chatkit token for that user:\n\n``` swift\n    func signup(request: Signup.Request, completionHandler: @escaping (User?, UsersStoreError?) -\u003e Void) {\n        let params: Parameters = [\n            \"name\": request.name,\n            \"email\": request.email,\n            \"password\": request.password\n        ]\n        \n        postRequest(\"/api/users/signup\", params: params, headers: nil) { data in\n            guard data != nil else {\n                return completionHandler(nil, UsersStoreError.CannotSignup)\n            }\n            \n            let response = Signup.Response(data: data!)\n            CurrentUserIDDataStore().setID(CurrentUserID(id: response.user?.chatkit_id))\n            \n            let request = Login.Account.Request(\n                email: request.email, \n                password: request.password\n            )\n            \n            self.login(request: request) { token, error in\n                guard error == nil else {\n                    return completionHandler(nil, UsersStoreError.CannotLogin)\n                }\n                \n                DispatchQueue.main.async {\n                    completionHandler(response.user, nil)\n                }\n            }\n        }\n    }\n```\n\nThe next method to add is the `fetchChatkitToken`. It fetches the Chatkit token from the API:\n\n``` swift\n    func fetchChatkitToken(request: Login.Chatkit.Request, completionHandler: @escaping (ChatkitToken?, UsersStoreError?) -\u003e Void) {\n        let headers = authorizationHeader(token: request.token.access_token!)\n        \n        postRequest(\"/api/chatkit/token\", params: nil, headers: headers) { data in\n            guard data != nil else {\n                return completionHandler(nil, UsersStoreError.CannotFetchChatkitToken)\n            }\n            \n            DispatchQueue.main.async {\n                let response = Login.Chatkit.Response(data: data!)\n                completionHandler(response.token, nil)\n            }\n        }\n    }\n```\n\nThe last two methods to add will be helpers, the `postRequest` and `authorizationHeader` methods:\n\n``` swift\n    private func postRequest(_ url: String, params: Parameters?, headers: HTTPHeaders?, completion: @escaping([String:Any]?) -\u003e Void) {\n        let enc = JSONEncoding.default\n        let url = AppConstants.ENDPOINT + url\n        \n        Alamofire\n            .request(url, method: .post, parameters:params, encoding:enc, headers:headers)\n            .validate()\n            .responseJSON { response in\n                switch (response.result) {\n                case .success(let data): completion((data as! [String:Any]))\n                case .failure(_): completion(nil)\n            }\n        }\n    }\n    \n    private func authorizationHeader(token: String?) -\u003e HTTPHeaders {\n        let accessToken = (token == nil) \n            ? UserTokenDataStore().getToken().access_token \n            : token\n        \n        return [\"Authorization\": \"Bearer \\(accessToken!)\"]\n    }\n```\n\nThe first method is a wrapper around Alamofire and the second method generates a HTTPHeaders array where we specify the token to send along with requests to the API.\n\nNow you can run the application in the emulator and it should work.\n\nIf you are running the API server locally XCode might not allow you to make requests to the local server. You can get around this by adding `App Transport Security Settings` to your `Info.plist` file and set `Allow Artibrary Loads` to `YES`.\n\n![Create-iOS-Chat-App-Using-Chatkit-allow-arbitrary-loads](//images.ctfassets.net/1es3ne0caaid/4ZHA4yRh4ss2SEY4GeMKSm/0d2667e4f46fb35c26aff64b96aab1a8/Create-iOS-Chat-App-Using-Chatkit-allow-arbitrary-loads.png)\n\n## Conclusion\n\nIn this part we were able to create the iOS application. \n\nThe source code to the application built in this series is available on [GitHub](https://github.com/neoighodaro/sample-chatroom-ios-chatkit).","metaTitle":"Build an iOS chat app using Swift and Chatkit - Part 3","metaDescription":"This tutorial series provides a detailed walkthrough of how to create a chat app for iOS, with a Laravel API backend. In this article you will create the iOS app. By the end of this section you will have a working chat app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"vduceSq8dEe6MO4sgiis4","type":"Entry","createdAt":"2018-06-01T11:22:55.789Z","updatedAt":"2020-06-19T10:18:58.883Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Add a chat widget to your Gatsby blog","url":"chat-gatsby","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/gatsby-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-06-01","description":"In this tutorial, we’re going to take a look at how we can add a realtime chat feature to a Gatsby blog using Pusher, using React.","prerequisite":"Some knowledge of React will be helpful when following this tutorial.","content":"Gatsby is a static-site generator which uses modern web technologies such as React and Webpack. It can generate blazing-fast static sites from Markdown, JSON, APIs, and CMSs like Wordpress and Drupal. \n\nIn this tutorial, we’re going to take a look at how we can add a realtime chat feature to a Gatsby blog using Pusher. This tutorial assumes that you’re new to Gatsby but have a little bit of knowledge on React.\n\n## What you’ll create\n\nYou’ll be creating a realtime chat component using React and Pusher. This allows visitors of your blog to chat with each other. Each blog post will serve as a unique chat room. This means that messages sent from “blog post A” will only be viewable from that page. Here’s what the final output will look like:\n\n![add-realtime-chat-gatsby-blog-pusher-chat-component](//images.ctfassets.net/1es3ne0caaid/2pKH6jgECs2EQCK2aCMIC6/8bf070a10263637ecb0664062db5f2c5/add-realtime-chat-gatsby-blog-pusher-chat-component.png)\n\nYou can find the source code for this tutorial on this [Github repo](https://github.com/anchetaWern/gatsby-chat).\n\n## Install Gatsby\n\nThe first thing that you need to do is to install the Gatsby command line tool:\n\n```\n    npm install -g gatsby-cli\n```\n\nThis allows you to create a Gatsby site from the command line. \n\nThe gatsby-cli comes with a default template for starting out a Gatsby site, but we’re going to use the [Gatsby starter blog](https://github.com/gatsbyjs/gatsby-starter-blog) instead. This is because the default template doesn’t really come with the plugins that will allow us to build a blog from markdown files. We’re using Markdown since it is the most common format for building static sites.\n\nHere’s how you can tell Gatsby to use the “Gatsby starter blog” as the template:\n\n```\n    gatsby new gatsby-blog https://github.com/gatsbyjs/gatsby-starter-blog\n```\n\nOnce that’s done, you can now start developing using the `develop` command:\n\n```\n    gatsby develop\n```\n\nThis spins up a local server which you can access at `http://localhost:8000` from your browser. This automatically reloads as you make changes to the files in the `src` directory or the config file (`gatsby-config.js`).  \n\n\n## Create a Pusher app\n\nIn order to use Pusher, you first need to create a new Pusher app. Select React as the front-end tech and Node.js as the back-end tech.\n\n![add-realtime-chat-gatsby-blog-pusher-create-pusher-app](//images.ctfassets.net/1es3ne0caaid/DnpnIFLKH60cQEG2MSKcC/25b8e80c5303e66811c2aecd050a74cb/add-realtime-chat-gatsby-blog-pusher-create-pusher-app.png)\n\nIf you don’t have a Pusher account yet, you can [sign up here](https://pusher.com/signup). Pusher's sandbox plan is free and is [very generous](https://dashboard.pusher.com/plans) when it comes to the number of messages you can send. \n\nOnce created, go to the app settings page and enable client events:\n\n![add-realtime-chat-gatsby-blog-pusher-enable-client-events](//images.ctfassets.net/1es3ne0caaid/29xLMdzI8sGAO4C0eoSiYo/1014cbe581653744e62558424d7c8063/add-realtime-chat-gatsby-blog-pusher-enable-client-events.png)\n\nThis allows us to directly send messages from the client-side without server intervention, though Pusher requires an authentication server before client events can be sent. This is a security feature in order to ensure that the users who are sending messages are really genuine users of the app. In the next section, you’ll learn how to create the server.\n\n## Create the auth server\n\nTo create an auth server, start by creating a new folder outside of your Gatsby blog. Once created, navigate inside that directory and install the following packages:\n\n```\n    npm install express body-parser pusher\n```\n\nNext, create a `server.js` file and import the packages you just installed:\n\n``` language-javascript\n    var express = require('express');\n    var bodyParser = require('body-parser');\n    var Pusher = require('pusher');\n    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n```\n\nSince the blog will be on a different domain from the auth server, we need to enable CORS so that it can accept connection from any domain:\n\n``` language-javascript\n    // enable cross-origin resource sharing\n    app.use(function(req, res, next) {\n      res.header(\"Access-Control-Allow-Origin\", \"*\");\n      res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n      next();\n    });\n```\n\nNext, add the code for connecting to Pusher. I’ll explain later how the values for the configuration options are supplied. For now, just know that they’re being loaded as environment variables:\n\n``` language-javascript\n    var pusher = new Pusher({ // connect to pusher\n      appId: process.env.APP_ID, \n      key: process.env.APP_KEY, \n      secret:  process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER, \n    });\n```\n\nNext, add a route for checking if the server is running:\n\n``` language-javascript\n    app.get('/', function(req, res){ // to test if the server is running\n      res.send('all green');\n    });\n```\n\nLastly, add the routes for authenticating users. Later on, the Chat component will hit this route every time a visitor views a blog post:\n\n``` language-javascript\n    // to authenticate users\n    app.post('/pusher/auth', function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n    \n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\nAs you have seen, there’s really no authentication going on. This exposes your Pusher app to potential misuse because anyone can just use your Pusher App ID and it won’t be verified that the request came from your blog.  Here’s some code that will allow you to verify where the request originated from. Add this to your Pusher auth handler, right before the `pusher.authenticate` call to check if the request is valid or not.\n\n``` language-javascript\n    var origin = req.get('origin');\n    if(origin == 'YOUR BLOG DOMAIN NAME OR IP'){\n      // authenticate the request\n    }\n```\n\n## Deploy the auth server\n\nWe’ll be using [*Now*](https://zeit.co/now) to deploy the auth server. You can install it with the following command:\n\n```\n    npm install -g now\n```\n\nNavigate to the folder where you have the `server.js` file and execute `now`. This will ask you to enter and verify your email.\n\nOnce verified, you can add the Pusher app config to [*now’s*](https://zeit.co/blog/environment-variables-secrets) [secrets](https://zeit.co/blog/environment-variables-secrets). Be sure to replace the values on the right side with the actual Pusher app config.\n\n```\n    now secret add gatsby_app_id YOUR_PUSHER_APP_ID\n    now secret add gatsby_app_key YOUR_PUSHER_APP_KEY\n    now secret add gatsby_app_secret YOUR_PUSHER_APP_SECRET\n    now secret add gatsby_app_cluster YOUR_PUSHER_APP_CLUSTER\n```\n\nAfter that, you can already deploy the auth server:\n\n```\n    now -e APP_ID=@gatsby_app_id -e APP_KEY=@gatsby_app_key -e APP_SECRET=@gatsby_app_secret APP_CLUSTER=@gatsby_app_cluster\n```\n\nThe values on the left side (e.g. `APP_ID`) are the names for the environment variable and the values on the right side are the names you gave to the secret (e.g `gatsby_app_id`) earlier. This allows the auth server to access it via  `process.env.APP_ID`.\n\nOnce deployed, you should be able to access the URL returned by *now*. \n\n\n## Create the chat component\n\nNow you’re ready to work with the Chat component. First, navigate inside the Gatsby blog folder and install the dependencies:\n\n```\n    npm install --save pusher-js slugify random-animal-name-generator react-timeago\n```\n\nHere’s a summary of what each one does:\n\n- `pusher-js` - for communicating with Pusher.\n- `slugify` - for creating a machine-friendly channel name for Pusher. \n- `random-animal-name-generator` - for generating a random animal username for each user in the chat room.\n- `react-timeago` - for creating human-friendly timestamps (e.g 3 minutes ago).\n\nOnce everything is installed, create an `index.js` file in the `src/components/Chat` directory. This will serve as the main file for the Chat component. \n\nStart by importing the packages you just installed, as well as the `MessageList` component which we’ll be creating later:\n\n``` javascript\n    import React from 'react';\n    import PropTypes from 'prop-types';\n    \n    import Pusher from 'pusher-js';\n    import slugify from 'slugify';\n    import randomAnimal from 'random-animal-name-generator';\n    \n    import MessageList from './MessageList'; // the component for listing messages\n    import './style.css';\n```\n\nNext, create the Chat component:\n\n``` javascript\n    class Chat extends React.Component {\n    \n      constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this); // for updating the message being typed by the user\n        this.onSubmit = this.onSubmit.bind(this);\n        this.state = {\n          message: '', // the message being typed by the user\n          messages: [] // the messages that will be displayed by the MessageList component\n        }\n    \n        this.user = randomAnimal(); // generate random animal name\n      }\n      // next: add code for componentWillMount()\n    }\n```\n\nJust before the component mounts, connect to Pusher and subscribe to the channel for the current blog post in which the component is used. Later on, we’ll be importing this component in the template used for rendering blog posts. It will then use the title of the blog post as the channel name, which means that each blog post will be a separate chat room. Only those who are currently accessing a specific blog post can send and receive messages on it.\n\n``` javascript\n    componentWillMount() {\n      this.pusher = new Pusher('YOUR-PUSHER-APP-KEY', {\n        authEndpoint: 'https://YOUR-AUTH-SERVER-ENDPOINT',\n        cluster: 'YOUR APP CLUSTER',\n        encrypted: true // whether the connection is encrypted or not\n      });\n      \n      // subscribe to the channel for this specific blog post\n      var channel = 'private-' + slugify(this.props.title);\n      this.post_channel = this.pusher.subscribe(channel);\n    }\n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we want to listen for when a message is sent to the channel we just subscribed to. The function specified as the second argument gets executed every time someone viewing the same blog post sends a message.  When this happens, we update the state so the UI is updated.\n\n``` javascript\n    componentDidMount() {\n      this.post_channel.bind('client-on-message', (message) =\u003e {\n        message.time = new Date(message.time); // convert to a date object since its converted to a string when sending the message\n        // update the state to include the new message\n        this.setState({\n          messages: this.state.messages.concat(message)\n        });\n      });\n    }\n    // next: add render()\n```\n\nNext, render the actual component:\n\n``` javascript\n    render() {  \n      return (\n        \u003cdiv className=\"chatbox\"\u003e\n          \u003cdiv className=\"post-single\"\u003e\n            \n            \u003cdiv className=\"post-single__inner\"\u003e\n              \u003ch1\u003eChat Component\u003c/h1\u003e\n              \u003cform onSubmit={this.onSubmit}\u003e\n                \u003cinput type=\"text\" className=\"text-input\" placeholder=\"Type your message here..\" \n                value={this.state.message} \n                onChange={this.handleChange} /\u003e\n              \u003c/form\u003e\n              {\n                  this.state.messages \u0026\u0026\n                  \u003cMessageList messages={this.state.messages} /\u003e\n              }\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      );\n    }\n    \n    // next: add handleChange() function\n```\n\nUpdate the state when the value of the text field for entering the message changes:\n\n``` javascript\n    handleChange(e) {\n      var message = e.target.value;\n      this.setState({\n        message: message\n      });\n    }\n```\n\nWhen the user presses the *enter* key, get the current value of the text field then create an object containing the name of the user, the message and the time it was sent. Once created, send it using the `trigger` function. This will then cause the event listeners on any other browser tab with the same blog post open to be triggered.\n\n``` javascript\n    onSubmit(e) {\n      e.preventDefault();\n      let text = this.state.message;\n      let message = {\n        by: this.user,\n        body: text,\n        time: new Date()\n      };\n    \n      this.post_channel.trigger('client-on-message', message);\n      this.setState({\n        message: '',\n        messages: this.state.messages.concat(message)\n      });\n    }\n    \n    // next: add prop types\n```\nDon’t forget to specify the required props for this component:\n\n``` javascript\n    Chat.propTypes = {\n      title: PropTypes.string.isRequired\n    };\n    \n    export default Chat;\n```\n\nNext, create the MessageList component. This displays the list of messages sent by the users within a specific blog post:\n\n``` javascript\n    import React from 'react';\n    import ReactDOM from 'react-dom'; // for working with the DOM\n    import PropTypes from 'prop-types';\n    import TimeAgo from 'react-timeago'; // for displaying human-friendly time\n    \n    class MessageList extends React.Component {\n        \n      constructor(props) {\n        super(props);\n        this.renderMessages = this.renderMessages.bind(this);\n      }       \n      // next: add the render() method \n    }\n```\n\nThe `render()` method calls the method for rendering the messages. Below it is a div which acts as the anchor for scrolling to the bottom of the chat component. We’re setting its `ref` to `this.messagesEnd` so we can refer to this particular div whenever we need to scroll to the bottom of the component.\n\n``` javascript\n    render() {\n      \n      return (\n        \u003cdiv className=\"messages\"\u003e\n          { this.renderMessages() }\n          \u003cdiv ref={(el) =\u003e { this.messagesEnd = el; }}\u003e\u003c/div\u003e\n        \u003c/div\u003e\n      );\n      \n    }\n    // next: add the renderMessages() function\n```\n\nThe `renderMessages()` function loops through the array of messages and displays them one by one:\n\n``` javascript\n    renderMessages(){\n      return this.props.messages.map((msg, index) =\u003e {\n        return (\n          \u003cdiv className=\"msg\" key={index}\u003e\n            \u003cdiv className=\"msg-from\"\u003e{msg.by}\u003c/div\u003e\n            \u003cdiv className=\"msg-body\"\u003e{msg.body}\u003c/div\u003e\n            \u003cdiv className=\"msg-time\"\u003e\n               \u003cTimeAgo date={msg.time} minPeriod={60} /\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      });\n    }\n    // next: add the scrollToBottom() function\n```\n\nThe `scrollToBottom()` function selects the div at the bottom of the Chat component and scrolls down to it:\n\n``` javascript\n    scrollToBottom() {\n      const node = ReactDOM.findDOMNode(this.messagesEnd);\n      node.scrollIntoView({ behavior: \"smooth\" });\n    }\n```\n\nEverytime the component is updated, we want to scroll to the bottom of it. This way the latest message is always visible:\n\n``` javascript\n    componentDidUpdate() {\n      this.scrollToBottom();\n    }\n    // next: add prop types\n```\n\nAgain, don’t forget to include the prop types:\n\n``` javascript\n    MessageList.propTypes = {\n      messages: PropTypes.arrayOf(\n        React.PropTypes.shape({\n          by: PropTypes.string.isRequired,\n          body: PropTypes.string.isRequired,\n          time: PropTypes.instanceOf(Date).isRequired\n        })\n      )\n    };\n    \n    export default MessageList;\n```\n\nLastly, create a `style.css` file and add the following:\n\n``` css\n    .chatbox {\n        width: 500px;\n        padding-bottom: 50px;\n        margin: 0 auto;\n    }\n    \n    .text-input {\n        padding: 10px;\n        width: 100%;\n    }\n    \n    .msg {\n        padding: 10px 0;\n        border-bottom: 1px solid #f7f7f7;\n    }\n    \n    .msg-from {\n        font-weight: bold;\n    }\n    \n    .msg-time {\n        font-size: 13px;\n    }\n    \n    .msg-body {\n        font-size: 18px;\n    }\n    \n    .messages {\n        min-height: 0;\n        max-height: 400px;\n        margin-top: 30px;\n        overflow: auto;\n    }\n```\n\n## Add the chat component to blog posts\n\nNow you’re ready to actually add the component to the blog post page. For this particular starter theme, the file you need to edit is `src/templates/blog-post.js`.\n\nAt the top of the file, include the Chat component:\n\n```\n    import Chat from '../components/Chat';\n```\n\nThen render it right after the Bio component, passing in the title of the blog post as a prop:\n\n```\n    \u003cChat title={post.frontmatter.title} /\u003e\n```\n\n## Deploying the blog \n\nWe’re going to use [surge.sh](http://surge.sh/). Surge is a service specifically created for hosting static websites for free. All you have to do is install the Surge command line tool:\n\n```\n    npm install -g surge\n```\n\nNext, tell Gatsby to build the static site:\n\n```\n    gatsby build\n```\n\nOnce it’s done building the site, you can now deploy it using surge:\n\n```\n    surge public your-blogs-name.surge.sh\n```\n\nThe `surge`  command accepts the name of the folder in which the static files are stored, and the domain name as its options. Note that by default you’re stuck in the  `surge.sh` subdomain.\nIf you want to [use a custom domain](http://surge.sh/help/adding-a-custom-domain), you can simply add a CNAME file which contains the custom domain name inside the `public` directory.\n\nOnce it’s done uploading, you may now access the site on the URL that you specified.\n\n## Conclusion\n\nThat’s it! In this tutorial you’ve learned how to create a realtime chat component for your Gatsby blog. As you have seen, adding realtime features to your Gatsby blog is really made simple by using Pusher.","metaTitle":"Add a chat widget to your Gatsby blog","metaDescription":"This tutorial uses React and Pusher to add a realtime chat feature to a Gatsby blog. Gatsby is a static site generator, built with React."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"16T0HdkJrAygmwwuuuUCss","type":"Entry","createdAt":"2018-05-23T07:17:23.863Z","updatedAt":"2020-06-19T12:27:14.330Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a group chat app with Angular and Dialogflow","url":"group-chat-angular-dialogflow","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/theo4u/botAndPusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-05-22","description":"Build an Angular group chat app, and integrate a chatbot using Dialogflow. Users will be able to talk to each other, or to the bot.","prerequisite":"You will need Node and npm installed on your machine. A basic understanding of JavaScript will be helpful. This tutorial requires Angular 6+.","content":"## Introduction\n\nOver the past few years, advances in machine learning, especially natural language processing (NLP), have made it easy for computers to analyse and derive meaning from human language in a smart way. With this, developers can now create smaller, simpler and more intuitive natural language processing software.\n\nIn this tutorial, we’ll demonstrate how to build a group chat using [Pusher](https://pusher.com/) with an [Angular](http://angular.io/) application. We will also build a basic chatbot using the [Dialogflow conversation platform](https://dialogflow.com/) formerly know as api.ai by Google. This bot will engage in a simple conversation with any user within the group chat.\n\n![chatbot-angular-demo](//images.ctfassets.net/1es3ne0caaid/yOYSKR8lfUsSeioGcok2C/9f71fb07746d9535ce897ec8e5ee84fb/chatbot-angular-demo.gif)\n\n## Prerequisites\n\nWe are going to make use of the following dependencies: \n\n- [Angular 6+](http://angular.io/): a platform that makes it easy to build applications with the web. Angular combines declarative templates, dependency injection, end to end tooling, and integrated best practices to solve development challenges. \n\n\n- [Pusher](https://github.com/pusher/pusher-js): a hosted service that makes it super-easy to add realtime data and functionality to web and mobile applications. It has different products based on the need of your application. \n\n\n- [Bootstrap 4](http://getbootstrap.com/): an open source toolkit for developing with HTML and CSS. It includes HTML and CSS based design templates for typography, forms, buttons, tables, navigation, modals, image carousels and many other, as well as optional JavaScript plugins.\n\n\n- [Dialogflow](https://dialogflow.com/): an engine for building conversational experiences. It leverages Google’s machine learning and natural language processing technology, thereby giving developers the ability to utilize a user-friendly interface to build chatbots and deploy them to any platform.\n\n\n\u003e Please ensure you have Node and npm installed before starting the tutorial.\n\u003e No knowledge of Angular is required, but a basic understanding of Javascript (not necessarily Typescript) may be helpful.\n\n\n## Let’s build our group chat\n\nBootstrapping with [A](https://github.com/angular/angular-cli)[ngular-cli](https://github.com/angular/angular-cli): \n\n```\n    npm install -g @angular/cli\n    ng new botAndPusher\n    cd botAndPusher\n```\nWe installed a command line interface to scaffold and build Angular apps globally. It exposes `ng` in our terminal for us to make use of the [commands](https://github.com/angular/angular-cli#generating-and-serving-an-angular-project-via-a-development-server) available. To confirm everything went well, run the below command on your terminal within the newly created app folder `/botAndPusher`.\n\n```\n    ng serve\n```\nYou should see this:\n\n![angular-welcome-screen](//images.ctfassets.net/1es3ne0caaid/7Cw6E4WHFmaOogyKkK0MA/a660fc968171c614fd566c33c5e00d7d/tables-angular-welcome-screen.png)\n\nInstalling dependencies:\n```\n    npm install bootstrap pusher-js\n```\nOpen `angular.json` within our application root folder and update the `projects.botAndPusher.architect.build.styles` field to look like so:\n\n``` json\n    \"styles\": [\n      \"../node_modules/bootstrap/dist/css/bootstrap.css\",\n      \"styles.css\"\n    ]\n```\n\nOpen `src/styles.css` and add the below CSS to it:\n\n```css\n    /* You can add global styles to this file, and also import other style files */\n    .box-shadow { box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05); }\n```\nWe added a utility style for adding shadows to our div.\n\nNext, we need to create two services to manage our Pusher instance (we don’t have to always create a new instance of Pusher anytime we want to use it, we can use just one instance of it throughout the entire app) and our chat (interaction with the remote server and vice versa for chat messages):\n\n```\n    ng g s services/pusher --spec false\n    ng g s services/chat --spec false\n    ng g i interfaces/ichat\n```\nWe used another command of Angular CLI, which in full is `ng generate service path/name`. This creates a folder if it doesn’t already exist called `services/` and place our service files there. We also used `--spec false`  to let the Angular CLI know we don’t need to generate a test file for the service file. The last comand generates an employee interface to help give an idea of what an employee object should have.\n\nOpen `src/app/services/pusher.service.ts` and update it to look like the one below:\n\n``` typescript\n    import { Injectable } from '@angular/core';\n    import * as Pusher from 'pusher-js';\n    \n    // this is here to discourage the instantiating of pusher any where its\n    // needed, better to reference it from one place\n    @Injectable()\n    export class PusherService {\n    private _pusher: any;\n    \n    constructor() {\n      this._pusher = new Pusher('API_KEY', {\n        cluster: 'CLUSTER',\n        encrypted: true\n      });\n    }\n    // any time it is needed we simply call this method\n    getPusher() {\n      return this._pusher;\n    }\n    \n    }\n```\nWe insert the free `API_KEY` and `CLUSTER` we get after [signing up](https://dashboard.pusher.com/accounts/sign_up) and creating a channel app with Pusher.\n\n\n\u003e After creating an app from Pusher’s dashboard, navigate to **App Keys** tab to see your app credentials \n\nTo ensure that connection traffic is encrypted, we set `encrypted` to the Boolean `true` in our app. Read more about client configuration [here](https://pusher.com/docs/client_api_guide).\n\nOpen `src/app/interfaces/ichat.ts` and update it to look like so:\n\n``` typescript\n    export interface IChat {\n      id: string;\n      displayName: string;\n      email: string;\n      type: 'human' | 'joined';\n      message: string;\n      createdAt: string;\n      isMe: boolean;\n    }\n```\nFrom the above interface, every chat message must contain an ID, display name (used to display who sent the message), and a type (whether not the speaker is human).\n\nLet’s create our chat service to help send messages to others, connect to Pusher’s channel and to join the group.\n\n``` typescript\n    // src/app/services/chat.service.ts\n    import { Injectable } from '@angular/core';\n    import { PusherService } from './pusher.service';\n    import { HttpClient } from '@angular/common/http';\n    import { Observable } from 'rxjs';\n    import {tap} from 'rxjs/operators';\n    \n    @Injectable({\n      providedIn: 'root'\n    })\n    export class ChatService {\n      user: {displayName: string, email: string};\n      private _endPoint = 'http://localhost:2000'; // normally you use environment.ts\n      private _channel: any;\n    \n      constructor(private _pusherService: PusherService, private _http: HttpClient) {\n        this._channel = this._pusherService.getPusher().subscribe('chat-group');\n      }\n    \n      join(param): Observable\u003cany\u003e {\n        return this._http.post(`${this._endPoint}/join`, param)\n        .pipe(tap(data =\u003e {\n          this.user = param;\n        }));\n      }\n    \n      sendMessage(message: string): Observable\u003cany\u003e {\n        const param = {\n          message,\n          type: 'human',\n          ...this.user\n        };\n        return this._http.post(`${this._endPoint}/message`, param);\n      }\n    \n      getChannel() {\n        return this._channel;\n      }\n    }\n```\n\n\nWe’ve created three different methods to help us interact with others within our service file.\n\n- `join`: this is like registration of new users to get their display name and email address which we are going to be using to send messages to others within the group. If you observe, anytime we join, we automatically use RxJs [tap](https://github.com/ReactiveX/rxjs/blob/master/MIGRATION.md#howto-convert-to-pipe-syntax) (formerly called do) to pipe the response and do something with the response before sending it to the caller (save our user information for later usage). \n- `sendMessage`: this attaches the user object we saved after joining to the message before sending it to our server.\n- `getChannel`: is returning our Pusher’s channel so we can easily subscribe to any message coming from `chat-group` channel\n\nLet’s make our services available in the app. Add them to  `app.module.ts`, along with the `[HTTPClientModule](https://angular.io/guide/http)` since it was used within `chat.service.ts` for http requests. [ReactiveFormsModule](https://angular.io/api/forms/ReactiveFormsModule) and [FormsModule](https://angular.io/api/forms/FormsModule) are going to be used later to build our forms :\n\n``` typescript\n    // src/app/app.module.ts\n    import { ChatService } from './services/chat.service';\n    import { PusherService } from './services/pusher.service';\n    import { HttpClientModule } from '@angular/common/http'; \n    import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n    \n    ...\n    imports: [\n      ...,\n      HttpClientModule,\n      FormsModule,\n      ReactiveFormsModule\n      ],\n    providers:[ChatService, PusherService]\n```\n\n## Angular components to join and chat with others\n\nWe’ll now create two more components to join and chat with others in the group chat:\n\n```\n    ng g c myDetails -is --spec false\n    ng g c chat --spec false\n```\nUsing the Angular CLI, we generated a component with no test attached as explained earlier. It will create a folder for each containing a `.ts` and a `.html`. The `-is` command means don’t create a `.css` file.  We will use inline styling within our `.ts`.\n\nLet’s begin with my details component, it should look like our gif above. Open `my-details/my-details.component.html` and update it to look like so:\n\n``` html\n    \u003c!-- src/app/my-details/my-details.component.html --\u003e\n    \n    \u003ch6 class=\"pb-2 mb-0\"\u003eMy Details\u003c/h6\u003e\n    \n    \u003cform [formGroup]=\"detailsForm\" (ngSubmit)=\"onSubmit()\" novalidate\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"name\"\u003eDisplay Name\u003c/label\u003e\n        \u003cinput formControlName=\"displayName\" type=\"text\" class=\"form-control\" id=\"name\" placeholder=\"Alien\"\u003e\n         \u003csmall *ngIf=\"detailsForm.get('displayName').hasError('required')\" class=\"form-text text-danger\"\u003eDisplay name is required.\u003c/small\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"email\"\u003eEmail\u003c/label\u003e\n        \u003cinput formControlName=\"email\" type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"test@example.com\"\u003e\n        \u003csmall *ngIf=\"detailsForm.get('email').hasError('required')\" class=\"form-text text-danger\"\u003eEmail is required.\u003c/small\u003e\n        \u003csmall *ngIf=\"detailsForm.get('email').hasError('email')\" class=\"form-text text-danger\"\u003eEmail is invalid.\u003c/small\u003e\n      \u003c/div\u003e\n      \u003cbutton type=\"submit\" [disabled]=\"loader || detailsForm.invalid\" class=\"btn btn-primary\"\u003e{{loader?'Joining':'Join Group'}}\u003c/button\u003e\n    \u003c/form\u003e\n```\nWe have created our template using [Bootrap](http://getbootstrap.com/docs/4.1/components/forms/)’[s forms](http://getbootstrap.com/docs/4.1/components/forms/) with [A](https://angular.io/api/forms/ReactiveFormsModule)[ngular’s reactive form](https://angular.io/api/forms/ReactiveFormsModule) directives such as `formControlName` and `[formGroup]` which allows us to easily validate the form.\n\nLet’s wire the template above to be functional, open `my-details/my-details.component.ts` \n\n``` typescript\n    // src/app/my-details/my-details.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { FormGroup, FormBuilder, Validators } from '@angular/forms';\n    import { ChatService } from '../services/chat.service';\n    \n    @Component({\n      selector: 'app-my-details',\n      templateUrl: './my-details.component.html',\n      styles: []\n    })\n    export class MyDetailsComponent implements OnInit {\n      detailsForm: FormGroup;\n      loader;\n    \n      constructor(private _fb: FormBuilder, private _chatService: ChatService) { }\n    \n      ngOnInit() {\n         this._createForm();\n      }\n    \n      /**\n       * create our reactive form here\n       */\n      private _createForm() {\n        this.detailsForm = this._fb.group({\n          displayName: ['', Validators.required],\n          email: ['', [Validators.required, Validators.email]]\n        });\n      }\n    \n      /**\n       * Join the fun\n       */\n      onSubmit() {\n        const param = this.detailsForm.value;\n        this._chatService.join(param)\n          .subscribe((resp) =\u003e {\n            this.loader = false;\n          },\n            (error) =\u003e {\n              console.error(error);\n              this.loader = false;\n            });\n      }\n    }\n```\nWe used the `_createForm` method to instantiate our reactive form and set the validations needed. On submit of our form we call the `onSubmit` method, which was used (`(ngSubmit)=\"onSubmit()\"` ) within our `my-details.component.html`.\n\nLet’s make use of our just created component within our `app.component.html` . \n\n```html\n    \u003c!-- src/app/app.component.html --\u003e\n    \n    \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-primary\"\u003e\n      \u003ca class=\"navbar-brand\" href=\"#\"\u003e\n        \u003cimg src=\"assets/angular.svg\" width=\"30\" height=\"30\" class=\"d-inline-block align-top\" alt=\"\"\u003e\n        Angular Group Chat with Pusher And Dialogflow Chat Bot\n      \u003c/a\u003e\n    \u003c/nav\u003e\n    \n    \u003cdiv class=\"container\"\u003e\n    \n      \u003cp align=\"center\"\u003e\n        \u003cimg src=\"assets/pusher.svg\" width=\"30\" height=\"100\" width=\"60\"  alt=\"Pusher\"\u003e\n      \u003c/p\u003e\n    \n      \u003cdiv class=\"row justify-content-center\"\u003e \n        \u003cdiv class=\"col-md-4\"\u003e\n          \u003cdiv class=\"my-3 p-3 bg-white rounded box-shadow\"\u003e\n            \u003capp-my-details\u003e\u003c/app-my-details\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \n    \u003c/div\u003e\n```\nRun `ng serve` on your terminal to see our component in action,  we should get something like so:\n\n![chatbot-angular-stage-1](//images.ctfassets.net/1es3ne0caaid/3j8HNjFziEEcIQGKsI2e4K/b2d50cb500b250db0321b2c319a1f767/chatbot-angular-stage-1.png)\n\nYou can join the group, but we need a screen to see who joined and also to chat with others within the group.\n\nOpen `chat.component.html` and update it to look like so: \n\n``` html\n    \u003c!-- src/app/chat/chat.component.html --\u003e\n    \n    \u003ch6 class=\"pb-2 mb-0\"\u003eGroup Chat \u003cbutton class=\"btn btn-sm btn-primary\"\u003einvite others\u003c/button\u003e\u003c/h6\u003e\n    \n    \u003cdiv class=\"chats\"\u003e\n      \u003cdiv class=\"chatbox\"\u003e\n        \u003cdiv *ngFor=\"let chat of chats\"\u003e\n          \u003cdiv class=\"message sent\" *ngIf=\"chat.type!=='joined' \u0026\u0026 chat.isMe\"\u003e\n            {{chat.message}}\n            \u003cspan class=\"metadata\"\u003e\n              \u003cspan class=\"time\"\u003e{{chat.createdAt | date: 'HH:mm aaa'}}\u003c/span\u003e\n            \u003c/span\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"message received\"  *ngIf=\"chat.type!=='joined' \u0026\u0026 !chat.isMe\"\u003e\n            \u003cstrong\u003e{{chat.displayName}}\u003c/strong\u003e \u003cbr\u003e\n            {{chat.message}}\n            \u003cspan class=\"metadata\"\u003e\n              \u003cspan class=\"time\"\u003e{{chat.createdAt | date: 'HH:mm aaa'}}\u003c/span\u003e\n            \u003c/span\u003e\n          \u003c/div\u003e\n          \u003cp align=\"center\" class=\"joined\"  *ngIf=\"chat.type==='joined'\"\u003e\n          \u003cspan class=\"rounded bg-primary text-white\"\u003e{{chat.displayName}} Joined\u003c/span\u003e\n          \u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \n      \u003cdiv class=\"d-flex flex-row\"\u003e\n        \u003cinput [(ngModel)]=\"message\" type=\"text\" class=\"form-control\" placeholder=\"Enter message\" style=\"margin-right: 10px\"\u003e\n        \u003cbutton [disabled]=\"!message || sending\" (click)=\"sendMessage(message)\" class=\"btn btn-primary\"\u003e {{sending ? 'Sending' : 'Send'}}\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n\nFrom the above template, we are making use of the `*ngFor` directive to loop through our chats and display them based on the type of chat message. We have three types of chat messages:\n\n1. Joined: once you join a chat from my details component, we receive a chat message of type `joined`. Doing this gives us the privilege to style it or handle how to display who just joined the chat to others.\n2. From me: if the chat message is from me which means my email address from my details matches with the email address within the chat message. Here, you observe we didn’t show the name of the person sending the message since it’s me, and the styling we used `message sent` class.\n3. Not me: if the chat message is not from me and it’s not joined, which means another user from the group sent a message. Here, we added the user display name, so we can easily identify who sent the message.\n\nNow, let’s add styling to our chat component, to differentiate the three types of chat messages. Open `chat.component.css` and update it to look like so:\n\n``` css\n    /* src/app/chat/chat.component.css */\n    \n    .chats {\n        height: calc(100% - 12px);\n        position: relative;\n        z-index: 0;\n    }\n    \n    .chats .chatbox {\n        height: calc(100% - 68px);\n        overflow-x: hidden;\n        padding: 0 16px;\n        margin-bottom: 5px;\n    }\n    \n    .joined {\n      clear: both;\n      line-height: 18px;\n      font-size: 15px;\n      margin: 8px 0;\n      padding: 8px;\n    }\n    .joined span {\n      padding: 5px\n    }\n    \n    /* Messages*/\n    \n    .message {\n      color: #000;\n      clear: both;\n      line-height: 18px;\n      font-size: 15px;\n      padding: 8px;\n      position: relative;\n      margin: 8px 0;\n      max-width: 85%;\n      word-wrap: break-word;\n      z-index: -1;\n    }\n    \n    .message:after {\n      position: absolute;\n      content: \"\";\n      width: 0;\n      height: 0;\n      border-style: solid;\n    }\n    \n    .metadata {\n      display: inline-block;\n      float: right;\n      padding: 0 0 0 7px;\n      position: relative;\n      bottom: -4px;\n    }\n    \n    .metadata .time {\n      color: rgba(0, 0, 0, .45);\n      font-size: 11px;\n      display: inline-block;\n    }\n    \n    \n    .message:first-child {\n      margin: 16px 0 8px;\n    }\n    \n    .message.received {\n      background: #ccc;\n      border-radius: 0px 5px 5px 5px;\n      float: left;\n    }\n    \n    \n    .message.received:after {\n      border-width: 0px 10px 10px 0;\n      border-color: transparent #ccc transparent transparent;\n      top: 0;\n      left: -10px;\n    }\n    \n    .message.sent {\n      background: #e1ffc7;\n      border-radius: 5px 0px 5px 5px;\n      float: right;\n    }\n    \n    .message.sent:after {\n      border-width: 0px 0 10px 10px;\n      border-color: transparent transparent transparent #e1ffc7;\n      top: 0;\n      right: -10px;\n    }\n    \n    \n    .metadata {\n      display: inline-block;\n      float: right;\n      padding: 0 0 0 7px;\n      position: relative;\n      bottom: -4px;\n    }\n    \n    .metadata .time {\n      color: rgba(0, 0, 0, .45);\n      font-size: 11px;\n      display: inline-block;\n    }\n```\nBefore we try out our chat component, let’s incorporate Pusher and connect to our server to send messages to others.\n\n\n## Integrating Pusher and message sending to server\n\nPusher is going to listen to the channel we created above for chat and give us realtime updates of any triggered event related to our chat group. \nOpen `chat.component.ts` and update it to look like so:\n\n``` typescript\n    // src/app/chat/chat.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { IChat } from '../interfaces/ichat';\n    import { ChatService } from '../services/chat.service';\n    \n    @Component({\n      selector: 'app-chat',\n      templateUrl: './chat.component.html',\n      styleUrls: ['./chat.component.css']\n    })\n    export class ChatComponent implements OnInit {\n      chats: IChat[] = [];\n      message: string;\n      sending: boolean;\n    \n      constructor(private _chatService: ChatService) { }\n    \n      ngOnInit() {\n        // subscribe to pusher's event\n        this._chatService.getChannel().bind('chat', data =\u003e {\n          if (data.email === this._chatService.user.email) {\n            data.isMe = true;\n          }\n          this.chats.push(data);\n        });\n      }\n    \n      sendMessage(message: string) {\n        this.sending = true;\n        this._chatService.sendMessage(message)\n          .subscribe(resp =\u003e {\n            this.message = undefined;\n            this.sending = false;\n          }, err =\u003e {\n            this.sending = false;\n          } );\n      }\n    \n    }\n```\nFrom the above code, we subscribed to our Pusher channel for `chat-group` when the component is being called by Angular ([ngOnInit](https://angular.io/guide/lifecycle-hooks#lifecycle-sequence)). We also check if the message that is coming from Pusher contains the same email as the one we used in joining the chat group. If so we add an extra key called `isMe:boolean`, which is going to be true when it matches.\nWe used `sendMessage` method to send messages to our server and toggling a variable called `sending` to notify our template to show what is going on to the users. Then we reset the message to undefined to clear the message input field on our `chat.component.html`.\n\n\n## Finalizing our Angular application\n\nWe need to toggle the chat component only when the user joined our group. So, initially, any new user sees my details component, which is going to get the display name and email address before entering the chat component to chat with others. \n\nOpen `app.component.ts` and update it to look like so:\n\n``` typescript\n    import { Component } from '@angular/core';\n    import { ChatService } from './services/chat.service';\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n    \n      constructor(public chatService: ChatService) {\n      }\n    }\n```\nWhat we simply did above, is just to make use of our chat service, which contains the `user` object. This `user` object is gotten anytime a user joins our chat group. If it is `undefined` it means the current user trying to use our group chat is not registered or hasn’t joined. Let’s make use of it to toggle which view/component a user is going to see. \n\nOpen `app.component.html` and update it to look like so:\n\n``` html\n    \u003c!-- src/app/app.component.html --\u003e\n    \n    \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-primary\"\u003e\n      \u003ca class=\"navbar-brand\" href=\"#\"\u003e\n        \u003cimg src=\"assets/angular.svg\" width=\"30\" height=\"30\" class=\"d-inline-block align-top\" alt=\"\"\u003e\n        Angular Group Chat with Pusher And Dialogflow Chat Bot\n      \u003c/a\u003e\n    \u003c/nav\u003e\n    \n    \u003cdiv class=\"container\"\u003e\n    \n      \u003cp align=\"center\"\u003e\n        \u003cimg src=\"assets/pusher.svg\" width=\"30\" height=\"100\" width=\"60\"  alt=\"Pusher\"\u003e\n      \u003c/p\u003e\n    \n      \u003cdiv class=\"row justify-content-center\"\u003e\n        \u003cdiv class=\"col-md-8\" [hidden]=\"!chatService.user\"\u003e\n          \u003cdiv class=\"my-3 p-3 bg-white rounded box-shadow\"\u003e\n            \u003capp-chat\u003e\u003c/app-chat\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"col-md-4\" [hidden]=\"chatService.user\"\u003e\n          \u003cdiv class=\"my-3 p-3 bg-white rounded box-shadow\"\u003e\n            \u003capp-my-details\u003e\u003c/app-my-details\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \n    \u003c/div\u003e\n```\nWe’ve used the `user` within our `chatService`  to handle what the user sees using angular’s `hidden` directive. If the user is defined we hide our `my-details` component. Else, we show it to get details of the new user. If there is no user, we hide our `chat` component and wait for registration through the my-details component. \nRun `ng serve`. You should get something like this:\n\n![chatbot-angular-stage-2](//images.ctfassets.net/1es3ne0caaid/74PKQz1sqIoouSGUKac6UK/0a9faa40b07a5e63dd8d88f93bc46353/chatbot-angular-stage-2.gif)\n\nObserve our above result, we were unable to join our chat group because the server specified in our `chatService._endPoint` does not exist. Let’s go over to setting up our server.\n\n## Setting up our Node server with Pusher\n\nOur Node server is going to handle when a new message is sent from our frontend Angular application and also when a new user is joining the chat group.\nOpen your terminal and run the below commands:\n\n```\n    npm install express body-parser cors pusher dotenv shortid\n    touch server.js \n    touch .env\n```\nWhat we have done above is to install our node dependencies, creating our server file which is going to hold our APIs using [Express](http://expressjs.com/) and `.env` to help manage our environment variables using the [dotenv](https://github.com/motdotla/dotenv) module.\nOpen `server.js`  and update it to look like so: \n\n``` javascript\n    // server.js\n    \n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const Pusher = require('pusher')\n    const cors = require('cors')\n    require('dotenv').config()\n    const shortId = require('shortid')\n    \n    const app = express()\n    app.use(cors())\n    app.use(bodyParser.urlencoded({ extended: false }))\n    app.use(bodyParser.json())\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: 'eu',\n      encrypted: true\n    })\n    \n    app.post('/message', async (req, res) =\u003e {\n      // simulate actual db save with id and createdAt added\n      const chat = {\n        ...req.body,\n        id: shortId.generate(),\n        createdAt: new Date().toISOString()\n      } \n      // trigger this update to our pushers listeners\n      pusher.trigger('chat-group', 'chat', chat)\n      res.send(chat)\n    })\n    \n    app.post('/join', (req, res) =\u003e {\n      const chat = {\n        ...req.body,\n        id: shortId.generate(),\n        type: 'joined',\n        createdAt: new Date().toISOString()\n      }\n      // trigger this update to our pushers listeners\n      pusher.trigger('chat-group', 'chat', chat)\n      res.send(chat)\n    })\n    \n    app.listen(process.env.PORT || 2000, () =\u003e console.log('Listening at 2000'))\n```    \n\nWe have created two APIs: \n\n1. `POST /messsage`: send a message to others in the group by triggering an event with Pusher so our chat component (which subscribed to it earlier on) can receive the message.\n2. `POST /join`: anytime a new user wants to join our chat we send a trigger to the others that a user just joined the chat with a `type:'joined``'` and the `req.body` which contains `email` and `displayName`.\n\nBefore running our server to test our group chat, we need to set our `.env` variables used in our `server.js`. Open `.env` and make it look like so:\n\n```\n    PUSHER_APP_ID=\"APP_ID\"\n    PUSHER_APP_KEY=\"APP_KEY\"\n    PUSHER_APP_SECRET=\"APP_SECRET\"\n```\n\nYou can get your own `.env` config within your Pusher’s channel application dashboard. Navigate to the **Getting Started** tab, under  **Add this to your server** column, select `.env` to copy, then paste in your `.env` file.\n\nLet’s run our server. Start the frontend if it is not already running. Open your terminal and run this:\n\n```\n    node server.js\n```\n\nNow, let’s go over to our application to test it out:\n\n![chatbot-angular-stage-3](//images.ctfassets.net/1es3ne0caaid/3rCkmJC4Fy0MmmeKq4KEUq/a4876481427843e205c3d1a53ace5414/chatbot-angular-stage-3.gif)\n\nOur application is working as it should 😊, but we are not done yet. The next section is going to show how to add a chatbot user to our group.\n\n\n## Integrating Dialogflow with our server\n\nWe are going to add a chatbot to our group chat to help with getting live scores of football matches. We can easily trigger our bot or call out our bot with the below command:\n\n```\n    /bot message-here\n```\n\nFor example:  `/bot who are you ?` \n\nLet’s head over to [Dialogflow](https://console.dialogflow.com/api-client/#/editAgent/dbe8a515-e82c-4fbc-bb6b-978a24b8ff59/)  to setup our chatbot. Open your Dialogflow dashboard after [creat](https://console.dialogflow.com/api-client/#/login)[ing](https://console.dialogflow.com/api-client/#/login) [a free account](https://console.dialogflow.com/api-client/#/login):\n\n![dialogflow-welcome](//images.ctfassets.net/1es3ne0caaid/17wY4avnWO4g4OE2UsqSUE/f86e28cfc20567a747685b667dd24e5e/chat-bot-nest-dialogflow-welcome.png)\n\nClick on **Create Agent** button to create our chatbot. We are going to name our agent `Pusher-chatbot` \n\n![dialogflow-create-bot](//images.ctfassets.net/1es3ne0caaid/2lm6GmNL0g6I68AeI40asO/f830537f0ed3ea7a6c68881a96e889d6/chat-bot-nest-dialogflow-create-bot.png)\n\n### Creating small talk\nFor a quick start, we can easily program our chatbot for common chat style questions in the small talk panel. This will give our bot a basic level of interactivity with the users. By default, there are responses with predefined phrases within the small talk panel. Go ahead and customize the response as you deem fit. For now, we are going to keep it simple and respond to few questions:\n\n![dialogflow-enable-smalltalk](//images.ctfassets.net/1es3ne0caaid/4wDUh0JEAESOKGG2IKcmsw/65b3e063025111512a59b52ec716ce6e/chat-bot-nest-dialogflow-enable-smalltalk.jpeg)\n\nEnable and save it. You can use the **Try it now** by your right to test our chatbot responses. Let’s get our access token for connecting to our chatbot from our Node server: \n\n![dialogflow-access-keys](//images.ctfassets.net/1es3ne0caaid/3YIKAdn5aUsS2gqkeUkAOi/bddd599ef0eadea32ad12d96feacefee/dialogflow-access-keys.png)\n\nClick on the icon within the red circle to view our agent settings where we can locate our API keys. Open our `.env` and add our client access token not the developer token, as our use case we are going to be doing more of querying of our chatbot via APIs. [Read more](https://dialogflow.com/docs/reference/agent/).\n\n```\n    PUSHER_APP_ID=\"APP_ID\"\n    PUSHER_APP_KEY=\"APP_KEY\"\n    PUSHER_APP_SECRET=\"APP_SECRET\"\n    DIALOG_ACCESS_TOKEN=\"CLIENT_ACCESS_TOKEN\"\n```\nLet’s install [Axios](https://github.com/axios/axios) for sending HTTP request from our Node server to Dialogflow endpoints:\n```\n    npm install axios\n    touch dialogFlow.js\n```\nOpen `dialogFlow.js` and update it to look like so:\n``` javascript\n    // dialogFlow.js\n    \n    const axios = require('axios')\n    \n    const accessToken = process.env.DIALOG_ACCESS_TOKEN\n    const baseURL = 'https://api.dialogflow.com/v1/query?v=20150910'\n    \n    module.exports = {\n      send (message) {\n        const data = {\n          query: message,\n          lang: 'en',\n          sessionId: '123456789!@#$%'\n        }\n    \n        return axios.post(baseURL, data, {\n          headers: { Authorization: `Bearer ${accessToken}` }\n        })\n      }\n    }\n```\nWe used Axios to send a post request to Dialogflow, passing our message to the bot as `query`. Let’s make use of our utility function above to communicate with out chatbot. Open `server.js` \nand update it to look like so:\n``` javascript\n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const Pusher = require('pusher')\n    const cors = require('cors')\n    require('dotenv').config()\n    const shortId = require('shortid') \n    const dialogFlow = require('./dialogFlow')\n    \n    const app = express()\n    app.use(cors())\n    app.use(bodyParser.urlencoded({ extended: false }))\n    app.use(bodyParser.json())\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: 'eu',\n      encrypted: true\n    })\n    \n    app.post('/message', async (req, res) =\u003e {\n      // simulate actual db save with id and createdAt added\n      const chat = {\n        ...req.body,\n        id: shortId.generate(),\n        createdAt: new Date().toISOString()\n      }\n      // trigger this update to our pushers listeners\n      pusher.trigger('chat-group', 'chat', chat)\n    \n      // check if this message was invoking our bot, /bot\n      if (chat.message.startsWith('/bot')) {\n        const message = chat.message.split('/bot')[1]\n        const response = await dialogFlow.send(message)\n        pusher.trigger('chat-group', 'chat', {\n          message: `@${chat.displayName} ${\n            response.data.result.fulfillment.speech\n          }`,\n          displayName: 'Bot User',\n          email: 'bot@we.com',\n          createdAt: new Date().toISOString(),\n          id: shortId.generate()\n        })\n      }\n    \n      res.send(chat)\n    })\n    \n    app.post('/join', (req, res) =\u003e {\n      const chat = {\n        ...req.body,\n        id: shortId.generate(),\n        type: 'joined',\n        createdAt: new Date().toISOString()\n      }\n      // trigger this update to our pushers listeners\n      pusher.trigger('chat-group', 'chat', chat)\n      res.send(chat)\n    })\n    \n    app.listen(process.env.PORT || 2000, () =\u003e console.log('Listening at 2000'))\n```\nWhat we have done is to update the `POST /message` endpoint to handle any message sent from our angular application. The goal is to check where `/bot` is used to begin a message, then intercept those type of messages after sending a Pusher event to others that a user just called a bot. The code within our `POST /message` checks if the message starts with `/bot`. If so we take the second part of the message as what the user is trying to ask the bot to do. After getting the main message we send it to Dialogflow through our utility function. Dialogflow returns a response containing what our bot processed from the message. Then we triggered Pusher’s event to send a message to our group as a bot user using the response from Dialogflow.\n\nLet’s re-run our server like so:\n```\n    node server.js\n```\nOpen our angular app and try sending this message:\n```\n    /bot who are you?\n```\n\n![chatbot-angular-complete](//images.ctfassets.net/1es3ne0caaid/7LhcyXw5l62UwmMmAKkwkm/e882eb2f52140a51a4689e054801e862/chatbot-angular-complete.gif)\n\n## Conclusion\n\nHere, we have been able to build a group chat with a chatbot user. The intention was to give you a general building block that can be built on, explored, and improved to build an amazing chatbot that can do much more with group chats.\n\nI hope this tutorial was helpful and gave you enough information required to start building bots tailored for other use cases, as you deem fit in your organization. \n\nThe source code for this tutorial can be found on [GitHub](https://github.com/theo4u/botAndPusher). Feel free to explore and add more features. ","metaTitle":"Build a group chat app with Angular and Dialogflow","metaDescription":"This tutorial shows you how to build a group chat app in Angular. You will integrate a chatbot, provided by Dialogflow. Users will be able to talk to each other, or to the bot."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2h8nFMJzZiUw0kq8giIymy","type":"Entry","createdAt":"2018-05-22T07:28:18.179Z","updatedAt":"2018-05-22T07:28:18.179Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live chat widget with Ruby and PostgreSQL","url":"live-chat-ruby","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/9jaswag/pusher-chat-widget","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6S5luSjtlYk4i8eM8AyO4I","type":"Entry","createdAt":"2018-02-02T13:39:48.331Z","updatedAt":"2018-02-12T14:41:19.307Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby","url":"ruby","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"hPWAADkjVmomS68E6seqQ","type":"Entry","createdAt":"2018-02-12T14:48:52.613Z","updatedAt":"2018-02-12T14:48:52.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby on Rails","url":"ruby-on-rails","type":"framework"}}],"reviewDate":"2018-05-21","description":"Build a chat widget and admin dashboard using Ruby on Rails and PostgreSQL. The application provides the basic functionality for a business help or sales chat widget.","prerequisite":"To follow this tutorial, you need to have Ruby, Rails and PostgreSQL installed on your machine. Basic knowledge of Ruby and CoffeeScript will be helpful.","content":"## Introduction\n\nIn this age of full online shopping experience, customer retention is key. Customers want answers to their questions in realtime with precision. Whenever this is unavailable, they tend to click away to other sites.\n\nOne of the most effective ways for businesses to attend to their customers is through the use of a live chat system. With it, businesses have been able to provide convenient answers to their customers while at the same time, also increase sales.\n\nIn this tutorial, we’ll explore how to create a live chat system in Ruby while leveraging on the awesome features of Pusher.\nWhen we’re done, we should have built something like this:\n\n![ruby-chat-widget-demo](//images.ctfassets.net/1es3ne0caaid/4nmtCUTpZ6SOgOwwSog00q/48404d5f33fea5e13bb04b561ce11946/ruby-chat-widget-demo.gif)\n\n## Prerequisites\n\nA basic understanding of Ruby, CoffeeScript and PostgreSQL will help you with this tutorial. You should also have PostgreSQL installed. Kindly check the [PostgreSQL](https://www.postgresql.org/download/), [Ruby](https://www.ruby-lang.org/en/downloads/) and [Rails](http://guides.rubyonrails.org/getting_started.html) documentation for further installation steps. You also need to have a [Pusher account](https://dashboard.pusher.com/accounts/sign_up).\n\n\n## Setting up the application\n\nOpen your terminal and run the following commands to create our demo application:\n```\n    # create a new Rails application\n    $ rails new pusher-widget -T --database=postgresql\n```\nGo ahead and change directory into the newly created folder:\n```\n    # change directory\n    $ cd pusher-widget\n```\nIn the root of your `pusher-widget` directory, open your `Gemfile` and add the following gems:\n\n```\n    # Gemfile\n    \n    gem 'bootstrap', '~\u003e 4.1.0'\n    gem 'jquery-rails'\n    gem 'pusher'\n    gem 'figaro'\n```\nIn your terminal, ensure you are in the project directory and install the gems by running:\n\n```\n    $ bundle install\n```\nNext, we set up a database for our demo application. Check out this [article](https://www.digitalocean.com/community/tutorials/how-to-setup-ruby-on-rails-with-postgres) on how to create a Postgres database and an associated user and password.\n\nOnce you have your database details, in your `database.yml` file, under the `development` key, add the following code:\n``` yaml\n    # config/database.yml\n    \n    ...\n    development:\n      \u003c\u003c: *default\n      database: pusher-widget_development // add this line if it isn't already there\n      username: database_user // add this line\n      password: user_password // add this line\n    ...\n```\nThe username and password in the code above should have access to the `pusher-widget_development` database. After that, run the following code to setup the database:\n\n```\n    # setup database\n    $ rails db:setup\n```\n\n\n## Bootstrap the application\n\nWith our database set up, we’ll go ahead and create our models and controllers. In your terminal, while in the project’s directory, run the following code:\n```\n    # generate a chatroom model\n    $ rails g model chatroom email:string name:string\n    \n    # generate a chat model\n    $ rails g model chat message:string name:string chatroom:references\n    \n    # run database migrations\n    $ rails db:migrate\n    \n    # generate chatrooms controller with views\n    $ rails g controller chatrooms index new create show\n    \n    # generate chats controller with views\n    $ rails g controller chats index new create show\n```\n\n## Start the application\n\nAfter setting up the models and controllers, in your terminal, start the development server by running `rails s`. Visit http://localhost:3000 in your browser to see your brand new application:\n\n![youre-on-rails](//images.ctfassets.net/1es3ne0caaid/3sOsgC4S80gOKM8Waqkgui/87c5c9e64375cbb2f8f2516223f4e515/youre-on-rails.png)\n\n## Pusher account setup\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up).\n\n![ruby-create-pusher-account](//images.ctfassets.net/1es3ne0caaid/6uDbn5kOyIOiKyeSeOKqeS/6136b86bc4d9b6ceff7fcf8458375a19/ruby-create-pusher-account.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![ruby-channels-dashboard](//images.ctfassets.net/1es3ne0caaid/5IDtPf0HhC4aKg66gguYq8/183e0b23ec44fdfc23a38921e11fe9e3/ruby-channels-dashboard.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n\n![ruby-new-pusher-app](//images.ctfassets.net/1es3ne0caaid/3qnLmThfu8ue2ImYKKSw8a/2e4f39b15b8787e0f6d3b4f2ea022d95/ruby-new-pusher-app.png)\n\nClick the **App Keys** tab to retrieve your keys\n\n![ruby-app-keys](//images.ctfassets.net/1es3ne0caaid/1XHWE3GCeoCeqsMCO8uM2q/52523148497d08f6e9ba4f52fe0750f6/ruby-app-keys.png)\n\n## Building the homepage\n\nNow that we have our Pusher credential and our models and controllers have been set up, we will go ahead and build our homepage.\n\nReplace the code in your routes file with the following:\n``` ruby\n    # config/routes.rb\n    \n    Rails.application.routes.draw do\n      resources :chatrooms\n      resources :chats\n      get '/dashboard', to: 'chats#index'\n      root 'chatrooms#index'\n    end\n```\nNext, we hook up Bootstrap and add some styles. In your `application.js` file, add the following code just before the last line:\n``` javascript\n    // app/assets/javascripts/application.js\n    \n    .....\n    //= require jquery3 # add this line\n    //= require popper # add this line\n    //= require bootstrap # add this line\n    //= require_tree .\n```\nRename your `application.css` file to `application.scss` and add the following code:\n``` scss\n     # app/assets/stylesheets/application.scss\n     \n     @import \"bootstrap\";\n     @import url('https://fonts.googleapis.com/css?family=Tajawal');\n     body {\n      font-family: 'Tajawal', sans-serif;\n     }\n     .full-page {\n       height: 100vh;\n       width: 100vw;\n       overflow: hidden;\n     }\n     .jumbotron {\n       margin-top: 8rem;\n     }\n     .popup-wrapper {\n       height: 20rem;\n       position: fixed;\n       right: 1rem;\n       bottom: 0;\n       border-top-left-radius: 15px;\n       border-top-right-radius: 15px;\n     }\n     .popup-head {\n      border-top-left-radius: 15px;\n      border-top-right-radius: 15px;\n      text-align: center;\n      cursor: pointer;\n        p {\n          margin: 0;\n        }\n     }\n     .popup-trigger {\n      height: 2rem;\n      border-top-left-radius: 15px;\n      border-top-right-radius: 15px;\n      position: fixed;\n      bottom: 0;\n      right: 1rem;\n      cursor: pointer;\n      text-align: center;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n        p {\n          margin: 0;\n          font-weight: 900;\n        }\n      }\n      .chat-bubble {\n        border-radius: 3px;\n      }\n      .chats {\n        height: 23vh;\n        overflow: scroll;\n      }\n      .dashboard-sidebar-chat {\n        border-radius: 3px;\n        margin: 1rem 0;\n        padding: 0.2rem .5rem;\n        cursor: pointer;\n        a {\n          text-decoration: none;\n          color: unset;\n        }\n      }\n      .admin-chats {\n        height: 70vh;\n        overflow: scroll;\n      }\n```\nAdd the markup for our homepage in the chatrooms `index.html.erb` file\n``` html\n    # app/views/chatrooms/index.html.erb\n    \n    \u003cdiv class=\"container-fluid full-page bg-dark position-relative\"\u003e\n      \u003cdiv class=\"jumbotron jumbotron-fluid bg-transparent text-white\"\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003ch1 class=\"display-4\"\u003ePusher Chat Widget\u003c/h1\u003e\n          \u003cp class=\"lead\"\u003eRealtime chat.\u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"popup-trigger bg-info text-white col-3\"\u003e\n        \u003cp\u003eChat with support\u003c/p\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"popup-wrapper bg-white col-3 p-0 collapse\"\u003e\n        \u003cdiv class=\"popup-head bg-info p-1\"\u003e\n          \u003cp\u003eClose chat window\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"start-chat-wrapper bg-light px-1 mt-5\"\u003e\n          \u003c%= form_with(model: @chatroom, format: :json, id: 'start-chat-form') do |form| %\u003e\n            \u003cdiv class=\"field\"\u003e\n              \u003c%= form.text_field :name, id: :name, class: \"form-control\", required: true, placeholder: \"Enter your name\" %\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"field\"\u003e\n              \u003c%= form.email_field :email, id: :email, class: \"form-control mt-3\", required: true, placeholder: \"Enter your email\" %\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"actions\"\u003e\n              \u003c%= form.submit 'Start chat', class: \"btn btn-primary btn-block mt-2\" %\u003e\n            \u003c/div\u003e\n          \u003c% end %\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"chat-wrapper bg-light px-1 collapse\"\u003e\n          \u003cdiv class=\"chats\"\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"chat-form\"\u003e\n            \u003c%= form_with( scope: :chat, url: chats_path, format: :json, id: 'chat-form') do |form| %\u003e\n              \u003cdiv class=\"field\"\u003e\n                \u003c%= form.text_field :message, id: :message, class: \"form-control\", required: true, placeholder: \"Enter your message\" %\u003e\n                \u003c%= form.hidden_field :name, id: :name %\u003e\n                \u003c%= form.hidden_field :chatroom_id, id: :chatroom_id %\u003e\n              \u003c/div\u003e\n            \u003c% end %\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nIf you followed the tutorial so far you should have been able to create the homepage with the chat widget at the bottom right of the screen. Reloading your homepage should display this:\n\n![ruby-chat-widget-homepage](//images.ctfassets.net/1es3ne0caaid/3Lr3bS7y5W0wKICeCU6iQ0/ce92048cb2aa7359b74c7c807fa1b00d/ruby-chat-widget-homepage.png)\n\nIf you encounter a RegExp error while trying to set up Bootstrap, In `config/boot.rb`, change the ExecJS runtime from Duktape to Node.\n\n``` ruby\n    # config/boot.rb\n    ENV['EXECJS_RUNTIME'] ='Node'\n```\n\n## Building the admin dashboard\n\nNow that our homepage is set, next we’ll build the admin dashboard. Let’s add the markup for our dashboard in the chats `index.html.erb` file\n``` html\n    # app/views/chats/index.html.erb\n    \n    \u003cdiv class=\"container-fluid full-page position-relative\"\u003e\n      \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-3 col-md-2 bg-dark full-page px-1 py-2 sidebar\"\u003e\n          \u003c% @chatrooms.each do |chatroom| %\u003e\n            \u003c% if chatroom.chats.any? %\u003e\n              \u003cdiv class=\"dashboard-sidebar-chat bg-info\"\u003e\n                \u003c%= link_to chatroom.email, chat_path(id: chatroom.id), remote: true, class: 'sidebar-chat' %\u003e\n              \u003c/div\u003e\n            \u003c% end %\u003e\n          \u003c% end %\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"col-9 col-md-10 bg-light full-page container\"\u003e\n          \u003ch5 class=\"mt-4\"\u003e👈 Select a chat from the sidebar to load the message\u003c/h5\u003e\n          \u003cdiv class=\"admin-chat-wrapper\"\u003e\n            \u003ch3 class=\"user-email mt-5\"\u003e\u003c/h3\u003e\n            \u003cdiv class=\"chat-form\"\u003e\n              \u003cdiv class=\"admin-chats\"\u003e\u003c/div\u003e\n              \u003c%= form_with( scope: :chat, url: chats_path, format: :json, id: 'admin-chat-form') do |form| %\u003e\n                \u003cdiv class=\"field\"\u003e\n                  \u003c%= form.text_field :message, id: :message, class: \"form-control\", required: true, placeholder: \"Enter your message\" %\u003e\n                  \u003c%= form.hidden_field :name, id: :name, value: 'Pusher support' %\u003e\n                  \u003c%= form.hidden_field :chatroom_id, id: :chatroom_id %\u003e\n                \u003c/div\u003e\n              \u003c% end %\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nAdd the following code to the chatrooms controller:\n``` ruby\n    # app/controllers/chatrooms_controller.rb\n    \n    class ChatroomsController \u003c ApplicationController\n      def index\n        @chatroom = Chatroom.new\n      end\n      def new\n        @chatroom = Chatroom.new\n      end\n      def create\n        @chatroom = Chatroom.new(chatroom_params)\n        respond_to do |format|\n          if @chatroom.save\n            format.html { redirect_to @chatroom }\n            format.json { render :show, status: :created, location: @chatroom }\n          else\n            format.html { render :new }\n            format.json { render json: @chatroom.errors, status: :unprocessable_entity }\n          end\n        end\n      end\n      def show\n        @chatroom = Chatroom.find(params[:id])\n        render json: @chatroom.chats\n      end\n      private\n        def chatroom_params\n          params.require(:chatroom).permit(:email, :name)\n        end\n    end\n```\nAlso, add the following to the `chats_controller.rb` file\n``` ruby\n    # app/controllers/chats_controller.erb\n    \n    class ChatsController \u003c ApplicationController\n      def index\n        @chatrooms = Chatroom.all\n      end\n      def create\n        @chat = Chat.new(chat_params)\n        respond_to do |format|\n          if @chat.save\n            format.json { render :show, status: :created, location: @chat }\n          else\n            format.json { render json: @chat.errors, status: :unprocessable_entity }\n          end\n        end\n      end\n      def new\n        @chat = Chat.new\n      end\n      def show\n        @chats = Chat.where(chatroom_id: params[:id])\n        respond_to do |format|\n          if @chats\n            format.json { render :chats, status: :ok }\n          else\n            format.json { render json: @chats.errors, status: :unprocessable_entity }\n          end\n        end\n      end\n      private\n        def chat_params\n          params.require(:chat).permit(:message, :name, :chatroom_id)\n        end\n    end\n```\nIf you visit http://localhost:3000/dashboard in your browser, you should be greeted with this awesome view:\n\n![ruby-chat-widget-admin-dashboard](//images.ctfassets.net/1es3ne0caaid/391xf8ezoISskSGSKuYem0/f6b74c3faeb76c9d510dd0551422866d/ruby-chat-widget-admin-dashboard.png)\n\n\n## Sending live chat messages\n\nOur live chat system is ready to start receiving messages. All that is left is to handle the messages being sent by both the users and admins. Whenever messages are sent, we update the chat interface via AJAX. In your `chatrooms.coffee` file, add the following code:\n\n``` coffeescript\n    # app/assets/javascripts/chatrooms.coffee\n    \n    $(document).ready =\u003e\n      popupWrapper = $('.popup-wrapper')\n      popupTrigger = $('.popup-trigger')\n      # open the live chat widget if clicked\n      $('.popup-head').click -\u003e\n        popupWrapper.addClass('collapse')\n        popupTrigger.removeClass('collapse')\n        return\n        \n      # close the live chat widget if clicked\n      $('.popup-trigger').click -\u003e\n        popupWrapper.removeClass('collapse')\n        popupTrigger.addClass('collapse')\n        return\n        \n      # if the user's name and email is successfully submitted, hide the form and show the chat interface in the widget\n      $('#start-chat-form').on 'ajax:success', (data) -\u003e\n        chatroom = data.detail[0]\n        $('.chat-form').removeClass('collapse')\n        $('.start-chat-wrapper').addClass('collapse')\n        $('.chat-wrapper').removeClass('collapse')\n        $('#chat-form #name').val(chatroom.name)\n        $('#chat-form #chatroom_id').val(chatroom.id)\n        getChats chatroom.id\n        $('#start-chat-form')[0].reset()\n        return\n      getChats = (id) -\u003e\n        token = $('meta[name=\"csrf-token\"]').attr('content')\n        $.ajax\n          url: 'chatrooms/' + id\n          type: 'get'\n          beforeSend: (xhr) -\u003e\n            xhr.setRequestHeader 'X-CSRF-Token', token\n            return\n          success: (data) -\u003e\n            return\n        return\n      \n      # update the user's chat with new chat messages\n      updateChat = (data) -\u003e\n        if data.chatroom_id == parseInt($('input#chatroom_id').val())\n          $('.chats').append \"\"\"\n            \u003cdiv class=\"chat-bubble-wrapper d-block\"\u003e\n              \u003cdiv class=\"chat-bubble bg-dark p-1 text-white my-1 d-inline-block\"\u003e\n                \u003csmall class=\"chat-username\"\u003e#{data.name}\u003c/small\u003e\n                \u003cp class=\"m-0 chat-message\"\u003e#{data.message}\u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \"\"\"\n        return\n      \n      # if the user's chat message is successfully sent, reset the chat input field\n      $('#chat-form').on 'ajax:success', (data) -\u003e\n        chat = data.detail[0]\n        $('#chat-form')[0].reset()\n        return\n        \n      # function for displaying chat messages that belong to chat selcted in the admin sidebar\n      loadAdminChat = (chatArray) -\u003e\n        $('.admin-chats').html \"\"\n        $('input#chatroom_id').val(chatArray.chats[0].chatroom_id)\n        $.map(chatArray.chats, (chat) -\u003e\n          $('.admin-chats').append \"\"\"\n            \u003cdiv class=\"chat-bubble-wrapper d-block\"\u003e\n              \u003cdiv class=\"chat-bubble bg-dark p-1 text-white my-1 d-inline-block\" style=\"min-width: 10rem;\"\u003e\n                \u003csmall class=\"chat-username\"\u003e#{chat.name}\u003c/small\u003e\n                \u003cp class=\"m-0 chat-message\"\u003e#{chat.message}\u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \"\"\"\n          return\n        )\n        return\n      \n      # if the available chat in the sidebar is clicked, call the function that displays it's messages\n      $('body').on 'ajax:success', '.sidebar-chat', (data) -\u003e\n        chat = data.detail[0]\n        loadAdminChat chat\n        return\n      \n      # function to update admin's chat with new chat messages\n      updateAdminChat = (chat) -\u003e\n        if chat.chatroom_id == parseInt($('input#chatroom_id').val())\n          $('.admin-chats').append \"\"\"\n            \u003cdiv class=\"chat-bubble-wrapper d-block\"\u003e\n              \u003cdiv class=\"chat-bubble bg-dark p-1 text-white my-1 d-inline-block\" style=\"min-width: 10rem;\"\u003e\n                \u003csmall class=\"chat-username\"\u003e#{chat.name}\u003c/small\u003e\n                \u003cp class=\"m-0 chat-message\"\u003e#{chat.message}\u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \"\"\"\n        return\n      \n      # function to update the available chats in the sidebar\n      updateAdminChatrooms = (chatroom) -\u003e\n        $('.sidebar').append \"\"\"\n          \u003cdiv class=\"dashboard-sidebar-chat bg-info\"\u003e\n            \u003ca class=\"sidebar-chat\" data-remote=\"true\" href=\"/chats/#{chatroom.id}\"\u003e#{chatroom.email}\u003c/a\u003e\n          \u003c/div\u003e\n        \"\"\"\n        return\n      # if admin's chat is successfully  sent, clear the chat input field\n      $('#admin-chat-form').on 'ajax:success', (data) -\u003e\n        chat = data.detail[0]\n        $('#admin-chat-form')[0].reset()\n        return\n```\nWe’ll make use of [Jbuilder](https://github.com/rails/jbuilder) to build our server response into JSON. In your chatroom views folder, create a `show.json.jbuilder` file and add the following code:\n\n``` \n    # app/views/chatrooms/show.json.jbuilder\n    \n    json.extract! @chatroom, :id, :name, :email\n    json.url chatroom_url(@chatroom, format: :json)\n```\nIn the views/chats folder, create two files: `show.json.jbuilder` and `chats.json.jbuilder` and add the following code respectively:\n\n```\n    # app/views/chats/show.json.jbuilder\n    \n    json.extract! @chat, :id, :message, :name, :chatroom_id\n    json.url chat_url(@chat, format: :json)\n```\n\n```\n    # app/views/chats/show.json.builder\n    \n    json.chats @chats do |chat|\n      json.(chat, :id, :name, :message, :chatroom_id)\n    end\n```\nLastly, we add update the chatroom model with the following\n``` ruby\n    # app/models/chatroom.rb\n    class Chatroom \u003c ApplicationRecord\n      has_many :chats # add this line\n    end\n```\nIf you followed the tutorial so far you should have been able to send messages from the chat widget on the homepage and if you reload your admin dashboard, you should see your message there.\nSweet! Next, we’ll remove the hassles of reloading with Pusher.\n\n\n## Realtime service with Pusher\n\nFor a live chat widget to be successful, the company should be immediately aware when there is a new message from a customer. We’ll go ahead and get that done with Pusher.\n\nFirstly, we will initialize a Pusher client in our application. In the `config/initializers` directory, create a `pusher.rb` file and add the following code:\n\n``` ruby\n    # config/initializers/pusher.rb\n    \n    require 'pusher'\n    Pusher.app_id = ENV[\"PUSHER_APP_ID\"]\n    Pusher.key = ENV[\"PUSHER_KEY\"]\n    Pusher.secret = ENV[\"PUSHER_SECRET\"]\n    Pusher.cluster = ENV[\"PUSHER_CLUSTER\"]\n    Pusher.logger = Rails.logger\n    Pusher.encrypted = true\n```\nIn your terminal, run `figaro install` to generate an `application.yml` file. In the `application.yml` file add your Pusher keys:\n\n``` yaml\n    # config/application.yml\n    \n    PUSHER_APP_ID: 'xxxxxx'\n    PUSHER_KEY: 'xxxxxxxxxxxxxxxxx'\n    PUSHER_SECRET: 'xxxxxxxxxxxxxx'\n    PUSHER_CLUSTER: 'xx'\n```\nAdd the Pusher library inside the head tag in the `application.html.erb` file just before the `javascript_include_tag`:\n\n``` html\n    \u003c%# app/views/layouts/application.html.erb %\u003e\n    \n    \u003chead\u003e\n      ....\n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e // add this line\n      \u003c%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %\u003e\n    \u003c/head\u003e\n```\nFor the admin to be notified of a new customer chat, we notify Pusher whenever a customer starts a new chat. On the admin end, we’ll subscribe to events on our Pusher channel and update the UI accordingly.\n\nSame thing applies for when both the user and admin exchange messages, we publish the messages via Pusher and subscribe to the updates on the frontend.\n\nUpdate your chat and chatroom model respectively:\n\n``` ruby\n    # app/models/chat.rb\n    class Chat \u003c ApplicationRecord\n      after_create :notify_pusher\n      belongs_to :chatroom\n    \n      def notify_pusher\n        Pusher.trigger('chat', 'new-chat', self.as_json)\n      end\n    end\n\n\n    # app/models/chatroom.rb\n    class Chatroom \u003c ApplicationRecord\n      after_create :notify_pusher\n      has_many :chats\n    \n      def notify_pusher\n        Pusher.trigger('chat', 'new-chatroom', self.as_json)\n      end\n    end\n```\nIn the code above, we add an `after_create` callback to both the chat and the chatroom models, which calls the function to publish new chats and chatrooms.\n\nRename your `chatroom.coffee` file to `chatroom.coffee.erb` and add the following code to the end of the file:\n\n``` ruby\n    # app/assets/javascripts/chatroom.coffee.erb\n    \n    .....\n      pusher = new Pusher('\u003c%= ENV[\"PUSHER_KEY\"] %\u003e',\n        cluster: '\u003c%= ENV[\"PUSHER_CLUSTER\"] %\u003e'\n        encrypted: true)\n      channel = pusher.subscribe('chat')\n      channel.bind 'new-chat', (data) -\u003e\n        updateChat data\n        updateAdminChat data\n      channel.bind 'new-chatroom', (data) -\u003e\n        updateAdminChatrooms data\n        return\n```\nIn the code above, we subscribe our Pusher client to the chat channel. Whenever there is a new chat or chatroom, we update the admin and user’s chat interface.\nEnsure the code added above is indented as other code in the file.\n\n\n## Bringing it all together\n\nRestart your development server and send some messages through the chat widget, they should pop up on the admin side.\n\n\n## Conclusion\n\nIn this tutorial, you learned how to build a customer support widget and administrator interface using Ruby and Pusher. Feel free to explore more by visiting Pusher’s documentation.\nThe source code to the article is available on [GitHub](https://github.com/9jaswag/pusher-chat-widget).","metaTitle":"Build a live chat widget with Ruby and PostgreSQL","metaDescription":"This tutorial will guide you through creating a chat widget and admin dashboard, suitable for a business help chat or sales chat. You will use Ruby on Rails and PostgreSQL."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1zpEddTbRC2AQEoAyCqGie","type":"Entry","createdAt":"2018-05-14T09:36:28.189Z","updatedAt":"2018-05-14T09:36:28.189Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Emoji suggestions in an Angular chat application using sentiment analysis","url":"angular-chat-sentiment-analysis","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/angular-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-05-09","description":"Build a chat app in Angular. The app features emoji suggestions (as suggested responses) based on the users' moods. The mood is evaluated using the sentiment analysis library.","prerequisite":"You should have Node and npm installed on your machine. A basic understanding of Angular and Node is required.","content":"## Introduction\n\nSentiment analysis is the process of computationally identifying and categorizing opinions expressed in a piece of text, especially to determine whether the writer's attitude towards a particular topic, product, etc. is positive, negative, or neutral. Using sentiment analysis, we can suggest emojis to be used as replies to messages based on the context of the received message. \n\nUsing [Angular](https://angular.io), you can extend the template language with your components and use a wide array of existing components, and with [Pusher](https://pusher.com) we can enable realtime messaging in the chat using pusher’s pub/sub pattern. \n\nWe’ll be building a realtime chat application using Pusher, Angular and the [sentiment](https://github.com/thisandagain/sentiment) library for emoji suggestions based on the context of messages received.\n\nUsing our application users can get emoji suggestions as replies to received messages while engaging in a chat with a third party\n\nHere’s a demo of the final product:\n\n![emoji-suggestions-angular-demo](//images.ctfassets.net/1es3ne0caaid/331wY6ohiMCQqOcGacagG4/3e191b7b6fc94acbfa2a59bafd519263/emoji-suggestions-angular-demo.gif)\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of Angular and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nWe’ll be using these tools to build out our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Angular](https://angular.io)\n- [Sentiment](https://github.com/thisandagain/sentiment)\n\nWe’ll be sending messages to the server and using [Pusher’s](https://pusher.com) pub/sub pattern, we’ll listen to and receive messages in realtime. To make use of Pusher you’ll have to create an account [here](https://pusher.com). \n\nAfter account creation, visit the dashboard. Click **Create new Channels app**, fill out the details, click **Create my app**, and make a note of the details on the **App Keys** tab.\n\n\nLet’s build!\n\n## Setup and folder structure\n\nUsing the Angular [CLI](https://cli.angular.io/) (command line interface) provided by the Angular team, we’ll initialize our project. To initialize the project, first, install the CLI by running `npm install @angular/cli` in your terminal. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/) installed.\n\nTo create a new Angular project using the CLI, open a terminal and run:   \n```\n    ng new angular-pusher-chat --style=scss\n```\nThe command is simply telling the CLI to create a new project called `angular-pusher-chat` and it should make use of the CSS pre-processor SCSS rather than CSS for styling.\n\nOpen the newly created folder `angular-pusher-chat`, and your folder structure should look something like this:\n\n```\n    angular-pusher-chat/\n      e2e/\n      node_modules/\n      src/\n        app/\n          app.component.html\n          app.component.ts\n          app.component.css\n          ...\n```\nOpen a terminal inside the project folder and start the application by running `ng serve` or `npm start`. If you open your browser and visit the link `http://localhost:4200` you should see the screenshot below if everything went well.\n\n![tables-angular-welcome-screen](//images.ctfassets.net/1es3ne0caaid/7Cw6E4WHFmaOogyKkK0MA/a660fc968171c614fd566c33c5e00d7d/tables-angular-welcome-screen.png)\n\n##  Building our server\n\nNow that we have our Angular application running, let’s build out a basic part of our server.\n\nTo do this we’ll need to install [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/). We’ll use this to receive requests from our Angular application.\n\nTo install express, run `npm install express` in a terminal in the root folder of your project.\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```\n\nWe referenced three packages that haven’t been installed, `body-parser`, `pusher` and `dotenv`. Install these packages by running the following command in your terminal.\n\n```\n    npm i body-parser pusher dotenv\n```\n\n-  body-parser is a package used to parse incoming request bodies in a middleware before your handlers, available under the `req.body` property.\n- dotenv is a zero-dependency module that loads environment variables from a `.env` file into [process.env](https://nodejs.org/docs/latest/api/process.html#process_process_env). This package is used so sensitive information like the `appId` and `secret` aren’t added to our codebase directly. \n- The dotenv package will load the variables provided in our `.env` file into our environment.\n- CORS: The calls to our endpoint will be coming in from a different origin, therefore we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nIf you noticed, I added the `dotenv` package at the start of our file. This is because we need to load the variables as early as possible to make them available throughout the application.\n\nAlso, you’ll notice that we installed [Pusher](https://pusher.com) library as a dependency. Follow the steps above to create a Pusher account if you haven’t done so already\n\nLet’s create a `.env` file to load the variables we’ll be needing into the Node environment. Create the file in the root folder of your project and update it with the code below.\n\n```\n    // .env\n    \n    PUSHER_APP_ID=\u003cAPP_ID\u003e\n    PUSHER_KEY=\u003cPUSHER_KEY\u003e\n    PUSHER_SECRET=\u003cPUSHER_SECRET\u003e\n```\nPlease ensure you replace the placeholder values above with your Pusher `appId`, `key` and `secret`.\n\n\nThis is a standard Node application configuration, nothing specific to our app.\n\n### Sending messages\n\nTo enable users send and receive messages, we’ll create a route to handle incoming requests. Update your `server.js`  file with the code below.\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: 'eu',\n      encrypted: true,\n    });\n    \n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.post('/messages', (req, res) =\u003e {\n      const { body } = req;\n      const { text, id } = body;\n      const data = {\n        text,\n        id,\n        timeStamp: new Date(),\n      };\n      \n      pusher.trigger('chat', 'message', data);\n      res.json(data);\n    });\n     ...\n```\n\n- We created a `POST /messages` route which, when hit, triggers a Pusher event.\n- We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the body of the request, we also got the `text` and `id` in the request body sent by the user.\n- The `data` object contains the `text` and `id` sent by the user. We’ll also added a timestamp to the it. \n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`chat`), an event name (`message`), and a payload(`data`).\n- The payload can be any value, but in this case, we have a JS object. \n- We still go ahead to respond with an object containing the `data` variable we created. \n\n\n### Sentiment analysis\n\n\n\u003e Sentiment analysis refers to the use of [natural language processing](https://en.wikipedia.org/wiki/Natural_language_processing), [text analysis](https://en.wikipedia.org/wiki/Text_analytics), [computational linguistics](https://en.wikipedia.org/wiki/Computational_linguistics), and [biometrics](https://en.wikipedia.org/wiki/Biometrics) to systematically identify, extract, quantify, and study effective states and subjective information. - [Wikipedia](https://en.wikipedia.org/wiki/Sentiment_analysis)\n\nYou can read up a bit about sentiment analysis using the following links below:\n\n\n- [Brandwatch](https://www.brandwatch.com/blog/understanding-sentiment-analysis/)\n- [TowardsDataScience](https://towardsdatascience.com/sentiment-analysis-concept-analysis-and-applications-6c94d6f58c17)\n\nUsing sentiment analysis, we’ll analyse the messages sent to determine the attitude of the sender. With the data gotten from the analysis, we’ll determine the emojis to suggest to the user. \n\nWe’ll use the [Sentiment](https://github.com/thisandagain/sentiment) JavaScript library for analysis. To install this library, open a terminal in the root folder of your project and run the following command. \n\n\n    npm install sentiment\n\nWe’ll update our `POST /messages` route to include analysis of the messages being sent in. Update your `server.js` with the code below.\n\n\n    // server.js\n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const Sentiment = require('sentiment');\n    const sentiment = new Sentiment();\n    \n    ...\n    \n    app.post('/messages', (req, res) =\u003e {\n      const { body } = req;\n      const { text, id } = body;\n      const result = sentiment.analyze(text);\n      const comparative = result.comparative;\n      const tone =\n        comparative \u003e= 0 ? (comparative \u003e= 1 ? 'positive' : 'neutral') : 'negative';\n      const data = {\n        text,\n        id,\n        timeStamp: new Date(),\n        sentiment: {\n          tone,\n          score: result.score,\n        },\n      };\n      pusher.trigger('chat', 'message', data);\n      res.json(data);\n    });\n    \n    ...\n    \n\n\n- Include the sentiment library in the project\n- `result`: here, we analyze the message sent in by the user to determine the context of the message.\n- `comparative`: this is the comparative score gotten after analyzing the message. This score is used to determine if a message is `positive`, `negative` or `neutral`.\n- `tone`: the `tone` variable is the context of the message gotten after analysis. This will be `negative` if the comparative score is below `0`, `neutral` if the score is above `0` but below `1`. The tone is `positive` if the comparative score is `1` and above.\n- A new object(`sentiment`) property is added to the response data containing the message’s tone and score.\n\nYou can now start the server by running `node server.js` in the terminal in the root folder of the project.\n\n\n## Chat view\n\nLet’s begin to build out our chat interface. We’ll create a `chat` component to hold the chat interface. We’ll create this using the CLI. Run `ng generate component chat` in a terminal in the root folder of your project. \n\nUpdate the recently created files as follows: \n\n``` html\n    // chat.component.html\n    \n    \u003cdiv class=\"main\"\u003e\n      \u003cdiv class=\"chat-box\"\u003e\n        \u003cdiv class=\"message-area\"\u003e\n          \u003cdiv class=\"message\" \n          *ngFor=\"let message of messages\" \n          [ngClass]=\"getClasses(message.type)\"\u003e\n            \u003cp\u003e{{message.text}}\u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"input-area\"\u003e\n          \u003cform (submit)=\"sendMessage()\" name=\"messageForm\" #messageForm=\"ngForm\"\u003e\n            \u003cinput type=\"text\" name=\"message\" id=\"message\" [(ngModel)]=\"message\"\u003e\n            \u003cbutton\u003e\n              \u003cspan data-feather=\"send\"\u003e\u003c/span\u003e \n            \u003c/button\u003e\n          \u003c/form\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n\nIn the code snippet above:\n\n- We loop through the available `messages` in the `.message-area`. \n- We have a form containing an input element and a submit button.\n- We using an icon-set called [feather-icons](https://feathericons.com) in our project. To include feather-icons in your project, simply add the cdn link in your `index.html` file.\n\n``` html\n    // index.html\n    ...\n    \u003cscript src=\"https://unpkg.com/feather-icons/dist/feather.min.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    ...\n```\n\nOpen the `chat.component.ts` file and update with the code below:\n\n``` typescript\n    // chat.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    import { v4 } from 'uuid';\n    \n    declare const feather: any;\n    interface Message {\n      id: string;\n      text: string;\n      timeStamp: Date;\n      type: string;\n    }\n    \n    @Component({\n      selector: 'app-chat',\n      templateUrl: './chat.component.html',\n      styleUrls: ['./chat.component.scss'],\n    })\n    \n    export class ChatComponent implements OnInit {\n      constructor(private http: HttpClient) {}\n      \n      messages: Array\u003cMessage\u003e = [];\n      message: string = '';\n      lastMessageId;\n      \n      sendMessage() {\n        if (this.message !== '') {\n          // Assign an id to each outgoing message. It aids in the process of differentiat .     ing between outgoing and incoming messages\n          this.lastMessageId = v4();\n          const data = {\n            id: this.lastMessageId,\n            text: this.message,\n          };\n          \n          this.http\n            .post(`http://localhost:4000/messages`, data)\n            .subscribe((res: Message) =\u003e {\n              const message = {\n                ...res,\n                // The message type is added to distinguish between incoming and outgoing             messages. It also aids with styling of each message type\n                type: 'outgoing',\n              };\n              this.messages = this.messages.concat(message);\n              this.message = '';\n            });\n            \n        }\n      }\n      \n      // This method adds classes to the element based on the message type\n      getClasses(messageType) {\n        return {\n          incoming: messageType === 'incoming',\n          outgoing: messageType === 'outgoing',\n        };\n      }\n      \n      ngOnInit() {\n        // Initialize feather icons\n        feather.replace();\n      }\n    }\n```\n\n\n`sendMessage`: this method uses the native `HttpClient` to make requests to the server. The `POST` method takes a URL and the request `body` as parameters. We then append the data returned to the array of messages. We make use of a package called [uuid](https://www.npmjs.com/package/uuid) to give each message a unique `id`. \n\nRun `npm install uuid` in a terminal inside your project’s root folder to install this package.\n\n`getClasses` : this method generates classes for a message element based on the `messageType`\nIn the `ngOnInit` lifecycle, we initialize `[feather](https://feathericons.com)`, our chosen icon set. \n\nTo make use of the `HttpClient` service, we’ll need to import the `HttpClientModule` into the `app.module.ts` file. Also to make use of form-related directives, we’ll need to import the `FormsModule`. So update your app module file as follows:\n\n``` typescript\n    // app.module.ts\n    ...\n    import { ChatComponent } from './chat/chat-component';\n    import {HttpClientModule} from '@angular/common/http';\n    import {FormsModule} from \"@angular/forms\";\n    \n    ...\n    @NgModule({\n      declarations: [AppComponent, ChatComponent],\n      imports: [BrowserModule, HttpClientModule, FormsModule],\n      providers: [],\n      bootstrap: [AppComponent],\n    })\n      ...\n```\n\n### Styling\n\nOpen the `chat.component.scss` file and update it with the styles below: \n\n``` scss\n    // chat.component.scss\n    \n    .main {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      min-height: 90vh;\n      .chat-box {\n        width: 300px;\n        max-height: 500px;\n        height: 500px;\n        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.12), 0 2px 4px 0 rgba(0, 0, 0, 0.08);\n        border-radius: 3% 3% 0 0;\n        position: relative;\n        padding-bottom: 40px;\n        .message-area {\n          max-height: 450px;\n          height: 450px;\n          overflow: auto;\n          padding: 20px 20px;\n          .message {\n            p {\n              color: white;\n              font-size: 13px;\n              font-weight: bold;\n              margin: 0px;\n              width: 45%;\n              box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1);\n              padding: 7px 10px;\n              margin: 5px 0;\n            }\n          }\n          .message.incoming {\n            display: flex;\n            flex-direction: column;\n            justify-content: flex-start;\n            align-items: flex-start;\n            p {\n              border-radius: 0 11px 11px 11px;\n              background: goldenrod;\n            }\n          }\n          .message.outgoing {\n            display: flex;\n            flex-direction: column;\n            justify-content: flex-end;\n            align-items: flex-end;\n            p {\n              border-radius: 11px 11px 0 11px;\n              background: darkgrey;\n            }\n          }\n        }\n      }\n    }\n```\n\nThis first SCSS snippet styles the `.chat-area`. Including how messages should look. The next snippet will style the input area and the send button.\n\n``` scss\n    // chat.component.scss\n    \n    .input-area {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      width: 100%;\n      height: 40px;\n      form {\n        display: flex;\n        height: 100%;\n        input {\n          width: 85%;\n          border: none;\n          background: rgba(0, 0, 0, 0.08);\n          padding: 5px 10px;\n          color: rgba(0, 0, 0, 0.3);\n          font-size: 14px;\n          font-weight: bold;\n          font-family: 'Titillium Web', sans-serif;\n          \u0026:focus {\n            outline: none;\n          }\n        }\n        button {\n          width: 15%;\n          border: none;\n          background: darkslategray;\n          color: white;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          cursor: pointer;\n        }\n      }\n    }\n```\n\n### Introducing Pusher and sending messages\n\nSo far we have an application that allows users send messages but the messages aren’t delivered in realtime. To solve this problem, we’ll include the [Pusher](https://pusher.com) library.\n\nOpen a terminal in the root folder of the project and install the package by running the following command:\n\n```\n    npm install pusher-js\n```\nTo make the Pusher library available in our application, we’ll add the library as a third party script to be loaded by Angular CLI. All CLI config is stored in `.angular-cli.json` file. Modify the `scripts` property to include the link to `pusher.min.js`.\n\n``` json\n    // .angular-cli.json\n    ...\n    \n    \"scripts\": [\n      \"../node_modules/pusher-js/dist/web/pusher.min.js\"\n    ]\n     ...\n```          \n\nNow that Pusher has been made available in our project, we’ll create a Pusher service to be used application wide. The Angular CLI can aid in the service creation.  Open a terminal in your project’s root folder and run the following command.\n\n```\n    ng generate service pusher\n```\n\nThis command simply tells the CLI to generate a service named `pusher` . Now open the `pusher.service.ts` file and update it with the code below.\n\n``` typescript\n    // pusher.service.ts\n    \n    import { Injectable } from '@angular/core';\n    \n    declare const Pusher: any;\n    \n    @Injectable()\n    export class PusherService {\n      constructor() {\n        var pusher = new Pusher('\u003cPUSHER_KEY\u003e', {\n          cluster: 'eu',\n          encrypted: true,\n        });\n        this.channel = pusher.subscribe('chat');\n      }\n      channel;\n      \n      public init() {\n        return this.channel;\n      }\n    }\n```\n\n\n- First, we initialize Pusher in the constructor. \n- The  `init` method returns the Pusher property we created. \n\n\n\u003e **Note:** Ensure you replace the `PUSHER_KEY` string with your actual Pusher key.\n  \n\nTo make the service available application wide, import it into the module file.\n\n``` typescript\n    // app.module.ts\n    import {PusherService} from './pusher.service'\n    ...\n    \n    @NgModule({\n       ....\n       providers: [PusherService],\n       ....\n     })\n```\n \n We’ll make use of this service in our component, by binding to the message event and appending the returned message into the list of messages. This will be done in the `ngOnInit` lifecycle.\n\n``` typescript\n    // chat.component.ts\n    import { PusherService } from '../pusher.service';\n    \n    ...\n    // Include the PusherService in the component's constructor\n    constructor(private http: HttpClient, private pusher: PusherService){}\n      ...\n      \n      ngOnInit() {\n        feather.replace();\n        const channel = this.pusher.init();\n        channel.bind('message', (data) =\u003e {\n          if (data.id !== this.lastMessageId) {\n            const message: Message = {\n              ...data,\n              type: 'incoming',\n            };\n            this.messages = this.messages.concat(message);\n          }\n        });\n      }\n    }\n```\n\nTo test the realtime functionality of the application, open two browsers side-by-side and send messages. You should be able to receive a message sent from one browser on the other.\n\nNow let’s place the chat component in the `app.component.html` file. This will make our chat component available for viewing. Replace the contents of the file with the code below.\n\n``` html\n    // app.component.html\n    \u003cdiv\u003e\n      \u003capp-chat\u003e\u003c/app-chat\u003e\n    \u003c/div\u003e\n```\n\nNow we can view our application for the first time, it should currently be able to send messages back and forth in realtime. \n\n![emoji-suggestions-angular-messaging](//images.ctfassets.net/1es3ne0caaid/7qBC1aQeYgG4ayi0iigKQK/29883810d3217e4e773226c1421bad1b/emoji-suggestions-angular-messaging.png)\n\n### Emoji suggestions\n\nTo display emoji suggestions during a chat session, we’ll make use of the `sentiment` param being sent from the server as a response for each message request. The data being sent from the server should be similar to the snippet below.\n\n``` json\n    {\n      id: '83d3dd57-6cf0-42dc-aa5b-2d997a562b7c',\n      text: 'i love pusher',\n      timeStamp: '2018-04-27T15:04:24.574Z'\n      sentiment: {\n        tone: 'positive',\n        score: 3\n      }\n    }\n```      \n\nGenerate an `emoji` component that will hold the emoji section. This component will handle the display of emojis based on the tone of each message received. We’ll generate a new component using the CLI by running the following command in the terminal.\n\n```\n    ng generate component emoji-panel\n```\n\nReplace the contents of the `emoji-panel.component.html` file with the code snippet below.\n\n``` html\n    // emoji-panel.component.html\n    \n    \u003cdiv class=\"emojis\" [hidden]=\"!showEmojis\" [attr.aria-hidden]=\"!showEmojis\"\u003e\n      \u003cdiv class=\"emoji-list positive\" *ngIf=\"result.tone === 'positive'\"\u003e\n        \u003cspan class=\"emoji\" *ngFor=\"let emoji of emojiList.positive; let i = index;\" (click)=\"onClick('positive', i)\"\u003e\n          {{codePoint(emoji)}}\n        \u003c/span\u003e\n      \u003c/div\u003e\n      \n      \u003cdiv class=\"emoji-list neutral\" *ngIf=\"result.tone === 'neutral'\"\u003e\n        \u003cspan class=\"emoji\" *ngFor=\"let emoji of emojiList.neutral; let j = index;\" (click)=\"onClick('neutral', j)\"\u003e\n          {{codePoint(emoji)}}\n        \u003c/span\u003e\n      \u003c/div\u003e\n      \n      \u003cdiv class=\"emoji-list negative\" *ngIf=\"result.tone === 'negative'\"\u003e\n        \u003cspan class=\"emoji\" *ngFor=\"let emoji of emojiList.negative; let k = index;\" (click)=\"onClick('negative', k)\"\u003e\n          {{codePoint(emoji)}}\n        \u003c/span\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n\n`attr.aria-hidden`: here we set the accessibility attribute of the element to either `true` or `false` based on the `showEmojis` variable.\n\n``` typescript\n    // emoji-panel.component.ts\n    import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n    \n    @Component({\n      selector: 'app-emoji-panel',\n      templateUrl: './emoji-panel.component.html',\n      styleUrls: ['./emoji-panel.component.scss'],\n    })\n    \n    export class EmojiPanelComponent implements OnInit {\n      constructor() {}\n      @Input() result = {};\n      @Input() showEmojis: boolean = false;\n      @Output() onEmojiSelect: EventEmitter\u003cstring\u003e = new EventEmitter();\n    \n      emojiList = {\n       positive: [128512, 128513, 128536, 128516],\n       neutral: [128528, 128529, 128566, 129300],\n       negative: [128543, 128577, 128546, 128542],\n      };\n    \n      codePoint(emojiCodePoint) {\n        return String.fromCodePoint(emojiCodePoint);\n      }\n      onClick(reaction, index) {\n        const emoji = this.emojiList[reaction][index];\n        this.onEmojiSelect.emit(emoji);\n      }\n    \n      ngOnInit() {}\n    }\n```\n\n\n`emojiList`:  this is an object containing a list of emojis that’ll be suggested. There’s a list for each message tone. \n`showEmojis`**:** an input variable from the parent component(`chat`) to determine the visibility of the emoji panel\n`onClick`**:**  this method takes to parameters. The `reaction` param is used to select the list of emojis to check for the provided `index`. The selected emoji is then emitted to the parent component.\n\n``` scss\n    // emoji-panel.component.scss\n    \n    .emojis {\n      \u0026[aria-hidden='true'] {\n        animation: slideOutDown 0.7s;\n      }\n      \u0026[aria-hidden='false'] {\n        animation: slideInUp 0.7s;\n      }\n      .emoji-list {\n        display: flex;\n        .emoji {\n          margin: 0 5px;\n          cursor: pointer;\n        }\n      }\n    }\n    @keyframes slideInUp {\n      from {\n        transform: translate3d(0, 100%, 0);\n        visibility: visible;\n      }\n      to {\n        transform: translate3d(0, 0, 0);\n      }\n    }\n    @keyframes slideOutDown {\n      from {\n        transform: translate3d(0, 0, 0);\n      }\n      to {\n        visibility: hidden;\n        transform: translate3d(0, 100%, 0);\n      }\n    }\n```\n\n\nAfter creating the `emoji-panel` component, the next step is to add it to our `chat` component. Update the chat component with the code snippets below.\n\n``` html\n    // chat.component.html\n    ...\n    \u003cdiv\u003e\n      ...\n      \u003cdiv class=\"emo-area\"\u003e\n        \u003capp-emoji-panel [showEmojis]=\"showEmojis\" [result]=\"score\" (onEmojiSelect)=\"selectEmoji($event)\"\u003e\u003c/app-emoji-panel\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"input-area\"\u003e\n        \u003cform (submit)=\"sendMessage()\" name=\"messageForm\" #messageForm=\"ngForm\"\u003e\n          \u003cinput type=\"text\" name=\"message\" id=\"message\" [(ngModel)]=\"message\"\u003e\n          \u003cbutton\u003e\n            \u003cspan data-feather=\"send\"\u003e\u003c/span\u003e\n          \u003c/button\u003e\n        \u003c/form\u003e\n      \u003c/div\u003e  \n    \u003c/div\u003e\n```\n\n\nUpdate the `chat.component.scss` with the following styles:\n\n``` scss\n    .main{\n      ...\n      .chat-box{\n        ...\n      }\n      .emo-area{\n        position: absolute;\n        bottom: 40px;\n        left: 0;\n        width: 100%;\n        padding: 3px 10px;\n      }\n      .input-area{\n        ...\n      }\n    }\n```\nOpen the `chat.component.ts` file and update it like so:\n\n``` typescript\n    // chat.component.ts\n    \n    ...\n      messages: Array\u003cMessage\u003e = [];\n      message: string = '';\n      lastMessageId;  \n      showEmojis = false;\n      score = {\n        tone: '',\n        score: 0,\n      };\n      \n      sendMessage() {\n        if (this.message !== '') {\n          this.lastMessageId = v4();\n          this.showEmojis = false;\n          ...\n        }\n      }\n      \n      selectEmoji(e) {\n        const emoji = String.fromCodePoint(e);\n        this.message += ` ${e}`;\n        this.showEmojis = false;\n      }\n      ...\n      \n      ngOnInit() {\n        feather.replace();\n        const channel = this.pusher.init();\n        channel.bind('message', (data) =\u003e {\n          if (data.id !== this.lastMessageId) {\n            const message: Message = {\n              ...data,\n              type: 'incoming',\n            };\n            this.showEmojis = true;\n            this.score = data.sentiment;\n            this.messages = this.messages.concat(message);\n          }\n        });\n      }\n    ...\n```\n    \n\n \n`selectEmoji` : this method appends the selected emoji to the current message and then hides the emoji panel. \nIn the Pusher event callback, we set the `showEmojis` property to `true`. In the same callback, we assign the `datas` sentiment property to the `score` variable.\n\nBy now our application should provide emoji suggestions for received messages.\n\n![emoji-suggestions-angular-complete](//images.ctfassets.net/1es3ne0caaid/2hLgA0e4OksyE8QE06qieo/179b838e07d540a23dbff82963f8bab1/emoji-suggestions-angular-complete.png)\n\n\n\u003e **Note:** Both the server(`node server`) and the Angular dev server(`ng serve`) must be running to get the application working. Run both command in two separate terminal sessions if you haven’t done so already.\n\n\n## Conclusion\n\nUsing sentiment analysis library, we’ve been able to suggest emojis as replies for received messages and with the help of [Pusher](https://pusher.com) our application can send messages back and forth in realtime. You can view the source code for the demo [here](https://github.com/christiannwamba/angular-chat).","metaTitle":"Emoji suggestions in an Angular app with sentiment analysis","metaDescription":"This tutorial shows how to build a chat app using Angular and Node. The app measures users' moods with the sentiment analysis library, and provides emoji suggestions based on this data."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"hJqlU3cdiwWoYKUy2gSwo","type":"Entry","createdAt":"2018-05-09T09:40:28.392Z","updatedAt":"2018-05-24T16:56:19.659Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build live comments with sentiment analysis using Nest.js","url":"live-comments-sentiment-analysis-nestjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/live-comments-nest","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SgQuYVb0kSMIgEmwqImOA","type":"Entry","createdAt":"2018-02-12T14:49:17.136Z","updatedAt":"2018-04-19T08:52:46.508Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Nest.js","url":"nest-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-05-08","description":"Learn to build a live comments application using Nest.js, featuring sentiment analysis. Use the sentiment analysis to measure whether comments are positive or negative, and display this information on an admin panel.","prerequisite":"You will need Node and npm installed on your machine. A basic understanding of TypeScript and Node will help you get the most out of this tutorial.","content":"## Introduction\n\nInterestingly, one of the most important areas of a blog post is the comment section. This plays an important role in the success of a post or an article, as it allows proper interaction and participation from readers. This makes it inevitable for every platform with a direct comments system to handle it in realtime.\n\nIn this post, we’ll build an application with a live comment feature. This will happen in realtime as we will tap into the infrastructure made available by Pusher.  We will also use sentiment analysis to detect the mood of a person based on the words they use in their comments.\n\nA sneak-peek into what we will build in this post:\n\n\nhttps://www.youtube.com/watch?v=WRJdQIqiKo0\u0026\n\n\n\n## Prerequisites\n\nA basic understanding of TypeScript and Node.js will help you get the best out of this tutorial. I assume that you already have Node and npm installed, if otherwise quickly check [Node.js](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) for further instructions and installation steps. \n\nHere is a quick overview of the technologies that we will be using in this post. \n\n\n- [Nest.js](https://nestjs.com/): a progressive framework for building efficient and scalable server-side applications; built to take the advantage of modern JavaScript but still preserves compatibility with pure JavaScript. \n\n\n- [Pusher](https://pusher.com/): a Node.js client to interact with the Pusher REST API\n\n\n- [Axios](https://www.npmjs.com/package/axios): a promise-based HTTP client that works both in the browser and Node.js environment.\n\n\n- [Sentiment](https://github.com/thisandagain/sentiment): sentiment is a module that uses the [AFINN-165](http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010) wordlist and [Emoji Sentiment Ranking](http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0144296) to perform [sentiment analysis](http://en.wikipedia.org/wiki/Sentiment_analysis) on arbitrary blocks of input text.\n\n\n- [Vue.js](https://vuejs.org/): Vue is a progressive JavaScript frontend framework for building web applications.\n\n\n## Setting up the application\n\nThe simplest way to set up a Nest.js application is to install the starter project on [Github](https://github.com/nestjs/typescript-starter) using Git. To do this, let’s run a command that will clone the starter repository into a new project folder named `live-comments-nest` on your machine. Open your terminal or command prompt and run the command below:\n\n```\n    $ git clone https://github.com/nestjs/typescript-starter.git live-comments-nest\n```\n\nGo ahead and change directory into the newly created folder and install all the dependencies for the project.\n\n```\n    // change directory\n    cd live-comments-nest\n    \n    // install dependencies\n    npm install\n```\n\n\n## Running application\n\nStart the application with :\n\n```\n    npm start\n```\n\nThe command above will start the application on the default port used by Nest.js. Open your browser and navigate to http://localhost:3000. You should see a page with a welcome message.\n\n![nest-hello-world](//images.ctfassets.net/1es3ne0caaid/45ET2cOwzYa8MUO6mIwq2Q/c9511e3c4c76117982d0bfadfd43c652/nest-hello-world.png)\n\n\n\n\n## Installing server dependencies\n\nRun the command below to install the server dependencies required for this project.\n\n```\n    npm install ejs body-parser pusher sentiment\n```\n\n- **ejs**: this is a simple templating language for generating HTML markup with plain JavaScript.\n\n\n- **Body-parser**: a middleware used for extracting the entire body portion of an incoming request stream and exposing it on `req.body`.\n\n\n- **Pusher**: a Node.js client to interact with the Pusher REST API\n\n\n- **Sentiment**: a Node.js module to perform sentiment analysis.\n\n\n\n## Signing up with Pusher\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![nest-phone-pusher-1](//images.ctfassets.net/1es3ne0caaid/43DKutJFOw86I2cCeMEGMG/246afa094f08c930af91a38c7b1a65fb/nest-phone-pusher-1.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![nest-phone-pusher-2](//images.ctfassets.net/1es3ne0caaid/6m8JvB3xxC444SmaIQ824i/5e5ea5d799a6717ca6c74324ac5a6576/nest-phone-pusher-2.png)\n\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with, for a better setup experience:\n\n![nest-phone-pusher-3](//images.ctfassets.net/1es3ne0caaid/4UPXLqxBWMc0mqUuMo462A/1f9779e509f53259bbd32cf0d244ef52/nest-phone-pusher-3.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![nest-phone-pusher-4](//images.ctfassets.net/1es3ne0caaid/1TPXcBKK9ua4Q2OuqSI0IS/5dd742674348e92defd7ecc4aa320755/nest-phone-pusher-4.png)\n\n\n## Bootstrap the application\n\nNest.js uses the Express library and therefore, favors the popular MVC pattern.\n\nTo set this up, open up the `main.ts` file and update it with the content below:\n\n``` typescript\n    // ./src/main.ts\n    \n    import { NestFactory } from '@nestjs/core';\n    import { AppModule } from './app.module';\n    \n    import * as bodyParser from 'body-parser';\n    import * as express from 'express';\n    import * as path from 'path';\n    \n    async function bootstrap() {\n      const app = await NestFactory.create(AppModule);\n      app.use(express.static(path.join(__dirname, 'public')));\n       app.set('views', __dirname + '/views');\n       // set ejs as the view engine\n       app.set('view engine', 'ejs');\n      await app.listen(3000);\n    }\n    bootstrap();\n```\n\nThis is the entry point of the application and necessary for bootstrapping Nest.js apps. I have included the Express module, path and set up ejs as the view engine for the application.\n\n\n## Building the homepage\n\nAs configured within `main.ts` file, the `views` folder will hold all the template for this application. Now let’s go ahead and create it within the `src` folder. Once you are done, create a new file named `index.ejs` right inside the newly created `views` folder and update the content with:\n\n``` javascript\n    // ./src/views/index.ejs\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"/style.css\"\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.13/vue.js\"\u003e\u003c/script\u003e\n        \u003ctitle\u003eRealtime comments\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \n        \u003cdiv id=\"app\"\u003e\n            \u003cdiv class=\"message\"\u003e\n                \u003ch2 class=\"text-center\"\u003eInteresting post\u003c/h2\u003e\n                \u003chr\u003e\n                \u003cp\u003e\n                   Once you're done creating the quality content,\n                    you still have the challenge of presenting it \n                    that clearly dictates what your blog is about.\n                     Images, text, and links need to be shown off just \n                     right -- otherwise, readers might abandon your content, \n                     if it's not aesthetically showcased in a way that's both \n                     appealing and easy to follow.\n                 \u003c/p\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"comments\"\u003e\n                \u003cdiv class=\"comment-wrap\"\u003e\n                    \u003cdiv class=\"photo\"\u003e\n                        \u003cdiv class=\"avatar\" style=\"background-image: url('http://res.cloudinary.com/yemiwebby-com-ng/image/upload/v1525202285/avatar_xcah9z.svg')\"\u003e\u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"comment-block\"\u003e\n                        \u003ctextarea name=\"\" id=\"\" cols=\"30\" rows=\"3\" placeholder=\"Add comment and hit ENTER\" @Keyup.enter=\"postComment\"\u003e\u003c/textarea\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n                \n                \u003cdiv v-for=\"comment in comments\"\u003e\n                    \u003cdiv class=\"comment-wrap\"\u003e\n                        \u003cdiv class=\"photo\"\u003e\n                            \u003cdiv class=\"avatar\" style=\"background-image: url('http://res.cloudinary.com/yemiwebby-com-ng/image/upload/v1525202285/avatar_xcah9z.svg')\"\u003e\u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"comment-block\"\u003e\n                            \u003cp class=\"comment-text\"\u003e \u003cb\u003e{{ comment.message }}\u003c/b\u003e \u003c/p\u003e\n                            \u003cdiv class=\"bottom-comment\"\u003e\n                                \u003cdiv class=\"comment-mood\"\u003e{{comment.mood}}\u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.2/axios.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"/main.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThis will serve as the homepage for the application, hence the need for it to be well structured. A quick look at some of the included files and other elements on this page.\n\n\n- Firstly, we included a link to the Bootstrap CDN file to add some default styling and layout to our application. We also added a custom stylesheet for further styling. We will create this stylesheet in the next section. Also included in a `\u003cscript\u003e` tag just before the page title is a CDN file for Vue.js.\n\n\n- We used an event handler to listen to keyboard events using key modifiers aliases made available by Vue.js. This process will be discussed later in the tutorial.\n\n\n- And finally, we included CDN file each for `Axios`, `Pusher` and then proceeded to add a custom script file named `main.js`. To set up this file, go ahead and create a `public`  folder within the `src` folder in the application and create the `main.js` file within it.\n\n\n\n## Stylesheet\n\nTo set up this stylesheet, locate the `public` folder  and create a new file named `style.css` within it. Next, open the file and paste the code below:\n\n``` css\n    // ./src/public/style.css\n    \n    html, body {\n        background-color: #f0f2fa;\n        font-family: \"PT Sans\", \"Helvetica Neue\", \"Helvetica\", \"Roboto\", \"Arial\", sans-serif;\n        color: #555f77;\n        -webkit-font-smoothing: antialiased;\n      }\n      \n      input, textarea {\n        outline: none;\n        border: none;\n        display: block;\n        margin: 0;\n        padding: 0;\n        -webkit-font-smoothing: antialiased;\n        font-family: \"PT Sans\", \"Helvetica Neue\", \"Helvetica\", \"Roboto\", \"Arial\", sans-serif;\n        font-size: 1.5rem;\n        color: #555f77;\n      }\n      input::-webkit-input-placeholder, textarea::-webkit-input-placeholder {\n        color: #ced2db;\n      }\n      input::-moz-placeholder, textarea::-moz-placeholder {\n        color: #ced2db;\n      }\n      input:-moz-placeholder, textarea:-moz-placeholder {\n        color: #ced2db;\n      }\n      input:-ms-input-placeholder, textarea:-ms-input-placeholder {\n        color: #ced2db;\n      }\n      .message {\n        margin: 2.5rem auto 0;\n        max-width: 60.75rem;\n        padding: 0 1.25rem;\n        font-size: 1.5rem;\n      }\n      \n      .comments {\n        margin: 2.5rem auto 0;\n        max-width: 60.75rem;\n        padding: 0 1.25rem;\n      }\n      \n      .comment-wrap {\n        margin-bottom: 1.25rem;\n        display: table;\n        width: 100%;\n        min-height: 5.3125rem;\n      }\n      \n      .photo {\n        padding-top: 0.625rem;\n        display: table-cell;\n        width: 3.5rem;\n      }\n      .photo .avatar {\n        height: 2.25rem;\n        width: 2.25rem;\n        border-radius: 50%;\n        background-size: contain;\n      }\n      \n      .comment-block {\n        padding: 1rem;\n        background-color: #fff;\n        display: table-cell;\n        vertical-align: top;\n        border-radius: 0.1875rem;\n        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.08);\n      }\n      .comment-block textarea {\n        width: 100%;\n        resize: none;\n      }\n      \n      .comment-text {\n        margin-bottom: 1.25rem;\n      }\n      \n      .bottom-comment {\n        color: #acb4c2;\n        font-size: 0.875rem;\n      }\n      \n      .comment-mood {\n        float: left;\n        font-size: 30px;\n      }\n```\n\n## Handling routes\n\nThe controller layer in Nest.js is responsible for receiving an incoming request and returning the appropriate response to the client. Nest uses a controller metadata `@Controller` to map routes to a specific controller. The starter project already contains a controller by default. We will make use of this in order to render the home for this app. Open `./src/app.controller.ts` and edit as shown below:\n\n``` typescript\n    // ./src/app.controller.ts\n    \n    import { Get, Controller, Res } from '@nestjs/common';\n    @Controller()\n    export class AppController {\n      @Get()\n      root(@Res() res) {\n        res.render('index');\n      }\n    }\n```\n\nThis controller will ensure that Nest.js maps every `/` route to the `index.ejs` file.\n\n\n## Create a Vue instance\n\nEarlier, we created `main.js` file within the `public` folder and included it on our homepage. To get things a little bit organized, we will create Vue instance within this file and bind it to a `div` element with an id of `#app`:\n\n``` javascript\n    // ./src/public/main.js\n    \n    new Vue({\n        el: '#app',\n        data: {\n            comments: []\n        },\n        ...\n    }) \n```\n\nWe have also declared the initial value for `comments` as an empty array inside the `data` options.\n\nRestart the development server if it is currently running. Check your page on [http://localhost:3000.](http://localhost:3000.) You should see:\n\n![nest-sentiment-comments-stage-1](//images.ctfassets.net/1es3ne0caaid/57HCAi0bHWCw4M6sqaYeMU/dc6892f97de76aba901f600f81e345e2/nest-sentiment-comments-stage-1.png)\n\n\nThis is a basic layout of what our page will look like for now. This contains a sample post and a comment box for readers to enter their comments and react to the blog post. In the next section, we’ll start a process to add some reactivity and enable realtime functionality for the comments.\n\n\n\n## Create the Comment controller\n\nCreate a new folder named `comments` in the `src` folder and create a new file called `comment.controller.ts` within it. In the newly created file, paste in the following code:  \n\n``` typescript\n    // ./src/comments/comment.controller.ts\n    \n    import { Controller, Post, Res, Body, HttpStatus } from '@nestjs/common';\n    import { CommentService } from './comment.service';\n    \n    @Controller('comment')\n    export class CommentController {\n        constructor(private commentService: CommentService){}\n      @Post()\n      postMessage(@Res() res, @Body() data ) {\n          this.commentService.addComment(data)\n          res.status(HttpStatus.OK).send(\"Comment posted successfully\")\n      }\n    }\n```\n\n\nThis controller will handle the comments posted by readers and pass it to a service specifically created and imported for that purpose. \n\nAs shown above, we imported `CommentService` and injected it into the controller through the constructor. As recommended by Nest, a controller should handle only HTTP requests and abstract any complex logic to a service.\n\n\n## Realtime comment service with Pusher\n\n`CommentController` depends on a service named `CommentService` to receive the `comment` submitted by readers and publish it to a designated channel for the client side to listen and subscribe to. Let’s create this service. Go to the `comments` folder and create a new file named `comment.service.ts` within it and then paste the code below into newly created file:\n\n``` typescript\n    // ./src/comments/comment.service.ts\n    \n    import { Component } from '@nestjs/common';\n    const Sentiment = require('sentiment');\n    @Component()\n    export class CommentService {\n        addComment(data) {\n            const Pusher = require('pusher');\n            const sentiment = new Sentiment();\n            const sentimentScore = sentiment.analyze(data.comment).score;\n            const payload = {\n                message: data.comment,\n                sentiment: sentimentScore\n            }\n            var pusher = new Pusher({\n                appId: 'YOUR_APP_ID',\n                key: 'YOUR_API_KEY',\n                secret: 'YOUR_SECRET_KEY',\n                cluster: 'CLUSTER',\n                encrypted: true\n              });\n              pusher.trigger('comments', 'new-comment', payload);\n        }\n    }\n```\n\nHere we received the comment payload and then imported and used the `sentiment` module to calculate the overall sentiment score of the comment. Next, we construct a `payload` object with the sentiment property included.\n\nFinally, we initialized Pusher with the required credentials so as to trigger an event named `new-comment` through a `comments` channel. Don’t forget to replace `YOUR_APP_ID`, `YOUR_API_KEY`, `YOUR_SECRET_KEY` and `CLUSTER` with the right credentials obtained from your dashboard.\n\n\n## Register the component and the controller\n\nAt the moment, our application doesn’t recognize the newly created controller and service. Let’s change this by editing our module file `'app.module.ts'`; putting the controller into the `'controller'` array and service into `'components'` array of the `'@Module()` decorator respectively.\n\n``` typescript\n    // ./src/app.module.ts\n    \n    import { CommentService } from './comments/comment.service';\n    import { CommentController } from './comments/comment.controller';\n    import { Module } from '@nestjs/common';\n    import { AppController } from './app.controller';\n    @Module({\n      imports: [],\n      controllers: [AppController, CommentController],\n      components: [CommentService],\n    })\n    export class AppModule {}\n```\n\n\n\n## Post comments to the server\n\nIn order to post a comment to the server, we created a new method `postComment()` within `./src/public/main.js` file:\n\n``` javascript\n    // ./src/public/main.js\n    \n    new Vue({\n        el: '#app',\n        data: {\n            ...\n        },\n        methods: {\n            postComment(event) {\n                const message = event.target.value;\n                if (event.keyCode === 13 ) {\n                    const comment = {\n                        comment: message,\n                    };\n                    event.target.value = \"\";\n                    axios.post('/comment', comment).then( data =\u003e { console.log(data)});\n                }\n            }\n        }\n    })\n```\n\nOn the `postComment()` event handler, we construct a `comment` object, which holds the message posted by readers and then removes all the content of the `textarea`. Finally, we used `Axios` to make a POST HTTP request to the `/comment` endpoint, passing the comment object created as a payload.\n\n\n## Update the page with a live comment\n\nAfter comments are being posted by readers, we need to listen for the Pusher event and subscribe to the channel. This will give us access to the payload required to update the page. Open `main.js` and update it with the code below:\n\n``` javascript\n    // ./src/public/main.js\n    \n    const SAD_EMOJI = [55357, 56864];\n    const HAPPY_EMOJI = [55357, 56832];\n    const NEUTRAL_EMOJI = [55357, 56848];\n    \n    new Vue({\n        el: '#app',\n        data: {\n           ...\n        },\n        created() {\n            let pusher = new Pusher('YOUR_API_KEY', {\n                cluster: 'CLUSTER',\n                encrypted: true\n            });\n            \n            const channel = pusher.subscribe('comments');\n            channel.bind('new-comment', data =\u003e {\n                const analysis = data.sentiment \u003e 0 ? HAPPY_EMOJI : (data.sentiment === 0 ? NEUTRAL_EMOJI : SAD_EMOJI);\n                const response = {\n                    message: data.message,\n                    mood: String.fromCodePoint(...analysis)\n                }\n                this.comments.push(response);\n            });\n        },\n        methods: {\n            ...\n        }\n    })\n```\n\nFirst, we added constants for `SAD_EMOJI`, `HAPPY_EMOJI` and `NEUTRAL_EMOJI`. Each of these constants is an array of the code points required for a particular sentiment emoji.\n\nNext, we established a connection to Pusher Channels using the `Key` and `Cluster` obtained from our dashboard. We then proceeded to subscribe to the `comments` channel we created earlier and listen for an event `new-comment`.\n\nWe also used the `sentiment` score obtained from the payload on our `comments` channel to set the mood of the reader to either happy, sad or neutral using the constants that were defined earlier.\n\nFinally, we used [String.fromCodePoint()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint) method to get the emoji from the code points defined in our constants earlier and the `response` object containing the `message` and `mood` of the reader to the `comments` array.\n\n\n\n## Testing the application\n\nRestart the development server if it is currently running. Check your page on [http://localhost:3000](http://localhost:3000)\n\n\nhttps://www.youtube.com/watch?v=WRJdQIqiKo0\u0026\n\n## Conclusion\n\nThe use case of a comment widget is quite enormous. As shown in this post, you can easily get readers to interact and react with comments in realtime. \n\nI hope you found this tutorial helpful and would love to apply the knowledge gained here to easily set up your own application using Pusher. You can check the demo source code of this tutorial on [Github](https://github.com/christiannwamba/live-comments-nest).\n\n","metaTitle":"Build live comments with sentiment analysis using Nest.js","metaDescription":"This tutorial shows you how to build a live comments application, featuring sentiment analysis. Use Nest.js and Node.js with a sentiment analysis library to measure whether comments are positive or negative, and display this information on an admin panel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1T8D8gQUzGaY2mmMMgGmgG","type":"Entry","createdAt":"2018-05-09T09:41:30.600Z","updatedAt":"2018-05-09T09:45:00.307Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building a chat app with Kotlin for Android","url":"chat-kotlin-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/kotlin-pusher-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-05-08","description":"Learn to build a chat app for Android. Use Kotlin and Springboot to construct the endpoint for the API, and Kotlin for your app development.","prerequisite":"You will need the following installed: Java JDK (8 or above), Gradle (4.7 or above), the latest version of Android Studio (3.1.2 at the time of writing), and two Android emulators or devices to test. You should have at least an upper-beginner knowledge of Android development, including using Gradle and Android Studio.","content":"Mobile messaging apps are popular, but they don’t have to be difficult to implement.\n\nIn this tutorial, you’ll learn how to build a basic but good-looking chat app for Android using Kotlin and Pusher.\n\n![kotlin-android-chat-springboot-demo](//images.ctfassets.net/1es3ne0caaid/6AFUVeoTxC88mWOYKemICY/ca0ed6408b6e2023da24ab5de7f8afc9/kotlin-android-chat-springboot-demo.gif)\n\nIn the first screen, the user enters a username. Then, when the user enters a message,  the application sends it to an endpoint of server-side API, which publishes the information of the message to a Pusher channel so all the connected clients can receive it.\n\nYou’ll use Spring Boot and Kotlin to build the endpoint of the API.\n\nFor reference, [here is a GitHub repository](https://github.com/eh3rrera/kotlin-pusher-chat) with all the code shown in this tutorial and instructions to run it.\n\n## Prerequisites\n\nHere’s what you need to have installed/configured to follow this tutorial:\n\n- [Java JDK](http://www.oracle.com/technetwork/java/javase/downloads/index.html) (8 or superior)\n- [Gradle](https://gradle.org/install/) (4.7 or superior)\n- The latest version of [Android Studio](https://developer.android.com/studio/?hl=es-419) (at the time of this writing 3.1.2)\n- Two Android emulators or two devices to test the app (because there’s no fun in chatting alone)\n- Optionally, a Java IDE with Kotlin support like [IntelliJ IDEA Community Edition](https://www.jetbrains.com/idea/download/#section=windows)\n\nI also assume that you are familiar with:\n\n- Android development (an upper-beginner level at least)\n- Kotlin\n- Android Studio\n\nNow let’s start by creating a Pusher application.\n\n## Creating a Pusher application\n\nIf you haven’t already, create a free account at [Pusher](https://pusher.com/). \n\nThen, go to your [dashboard](https://dashboard.pusher.com) and create a Channels app, choosing a name, the cluster closest to your location, and optionally, Android as the frontend tech and Java as the backend tech:\n\n![kotlin-android-chat-springboot-pusher-1](//images.ctfassets.net/1es3ne0caaid/1bWNIJnpQQgyGiE6AOc4Oa/c324a7e8410a76f355b54bd80262defc/kotlin-android-chat-springboot-pusher-1.png)\n\nThis won’t lock you in an Android/Java stack, it will only give you some sample code to get started:\n\n![kotlin-android-chat-springboot-pusher-2](//images.ctfassets.net/1es3ne0caaid/7a5aZd6KCQMOwqM4gGQ8mK/36ae0232dcabbe5e06e3578d5d089212/kotlin-android-chat-springboot-pusher-2.png)\n\n\nSave your app id, key, secret and cluster values, you’ll need them later. You can also find them in the **App Keys** tab.\n\n## Building the server-side API\n\nGo to https://start.spring.io/ and choose to create a project with the following options:\n\n- A Gradle project\n- With Kotlin\n- Spring Boot 2.0.1 (or above version)\n- The project metadata of your preference\n- And the `Web` dependency\n\nThis is how the screen should look like:\n\n![kotlin-android-chat-springboot-springboot](//images.ctfassets.net/1es3ne0caaid/1R9YWZ7eAgIwSoEiucmYAe/cc40e609a2a2f21993551fa36ddb624b/kotlin-android-chat-springboot-springboot.png)\n\nGenerate the project and unzip the downloaded file.\n\nYou can open the project in an IDE but it’s not really necessary. You’re only going to make three changes to the project.\n\nFirs, add the Pusher dependency at the end of the file `build.gradle`:\n\n``` gradle\n    dependencies {\n      ...\n      compile(\"com.pusher:pusher-http-java:1.0.0\")\n    }\n```\n\nNext, in `src/main/kotling/com/example/demo`, create the classes `Message.kt` and `MessageController.kt`.\n\n`Message.kt` is a data class for the chat messages:\n\n``` kotlin\n    data class Message(var user:String,\n                            var message:String,\n                            var time:Long)\n\n`MessageController.kt` is a REST controller that defines a POST endpoint to publish the received message object to a Pusher channel (`chat`):\n\n    import com.pusher.rest.Pusher\n    import org.springframework.http.ResponseEntity\n    import org.springframework.web.bind.annotation.*\n    \n    @RestController\n    @RequestMapping(\"/message\")\n    class MessageController {\n        private val pusher = Pusher(\"PUSHER_APP_ID\", \"PUSHER_APP_KEY\", \"PUSHER_APP_SECRET\")\n    \n        init {\n            pusher.setCluster(\"PUSHER_APP_CLUSTER\")\n        }\n    \n        @PostMapping\n        fun postMessage(@RequestBody message: Message) : ResponseEntity\u003cUnit\u003e {\n            pusher.trigger(\"chat\", \"new_message\", message)\n            return ResponseEntity.ok().build()\n        }\n    }\n```\n\nAs you can see, the Pusher object is configured when the class is initialized, just replace your app information from your [dashboard](https://dashboard.pusher.com).\n\nAnd that’s it.\n\nNow let’s build the Android app.\n\n## Setting up the Android project\n\nOpen Android Studio and create a new project with Kotlin support:\n\n![kotlin-android-chat-springboot-android-1](//images.ctfassets.net/1es3ne0caaid/4sAYAvj3v2mU0e46aYmOSO/f745a1ba56f328cac19517a1fbd4026f/kotlin-android-chat-springboot-android-1.png)\n\nWe're not going to use anything special, so we can safely support a low API level:\n\n![kotlin-android-chat-springboot-android-2](//images.ctfassets.net/1es3ne0caaid/5eDGtIlJEWIw40smMCYIQw/b37a49562c22930087abe99c7789c598/kotlin-android-chat-springboot-android-2.png)\n\n\nNext, create an initial empty activity:\n\n![kotlin-android-chat-springboot-android-3](//images.ctfassets.net/1es3ne0caaid/32tD1caQ2kuCOQauwUWyE0/03315b9180284ed56684e86f2c9d08ea/kotlin-android-chat-springboot-android-3.png)\n\nAnd use the default name of `MainActivity` with backward compatibility:\n\n![kotlin-android-chat-springboot-android-4](//images.ctfassets.net/1es3ne0caaid/6NEELrK5kkQCMIOcYO0wii/9873e61df9bc6561934d55214e136edf/kotlin-android-chat-springboot-android-4.png)\n\nOnce everything is set up, let's install the dependencies the app is going to use. In the `dependencies` section of the `build.gradle` file of your application module add:\n\n``` gradle\n    dependencies {\n        ...\n    \n        implementation 'com.pusher:pusher-java-client:1.8.0'\n        implementation 'com.android.support:recyclerview-v7:27.1.1'\n        implementation 'com.squareup.retrofit2:retrofit:2.4.0'\n        implementation 'com.squareup.retrofit2:converter-moshi:2.4.0'\n    \n        ...\n    }\n```\n\nAt the time of writing, the latest SDK version is 27, so that's my target SDK version when specifying the `RecyclerView`'s version.\n\nMake sure this version number matches the version of the `appcompat` library:\n\n``` gradle\n    dependencies {\n        ...\n        // The version of this library\n        implementation 'com.android.support:appcompat-v7:27.1.1'\n        ...\n        // And the version of this library should match\n        implementation 'com.android.support:recyclerview-v7:27.1.1'\n    \n        ...\n    }\n```\n\nBesides Pusher and `RecyclerView` to show the chat messages, the app is going to use [Retrofit](https://github.com/square/retrofit) to make a request to the API with [Moshi](https://github.com/square/retrofit/tree/master/retrofit-converters/moshi) for serialization to and from JSON.\n\nSync the Gradle project so the modules can be installed and the project built.\n\nNow let's add the `INTERNET` permission to the `AndroidManifest.xml` file. This is required so we can connect to Pusher and get the events in realtime:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        package=\"com.pusher.pusherchat\"\u003e\n    \n        \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n    \n        \u003capplication\n            ...\n        \u003c/application\u003e\n    \n    \u003c/manifest\u003e\n```\n\nAnd the project is all set up. Let’s start building the app.\n\n\n## Building the Android app\n\nIn the `java` directory, let’s create the data class for the messages, `com.pusher.pusherchat.Messages.kt` , with the same properties as the API version:\n\n``` kotlin\n    data class Message(var user:String,\n                            var message:String,\n                            var time:Long)\n```\n\nIf you haven’t work with Retrofit, you must know it works by turning an API into an interface.\n\nSo create the interface `com.pusher.pusherchat.ChatService` (your package may be different) and paste the following code:\n\n``` kotlin\n    import retrofit2.Call\n    import retrofit2.Retrofit\n    import retrofit2.converter.moshi.MoshiConverterFactory\n    import retrofit2.http.POST\n    import retrofit2.http.Body\n    \n    interface ChatService {\n        @POST(\"/message\")\n        fun postMessage(@Body body:Message): Call\u003cVoid\u003e\n    \n        companion object {\n            private const val BASE_URL = \"http://10.0.2.2:8080/\"\n    \n            fun create(): ChatService {\n                val retrofit = Retrofit.Builder()\n                        .baseUrl(BASE_URL)\n                        .addConverterFactory(MoshiConverterFactory.create())\n                        .build()\n                return retrofit.create(ChatService::class.java)\n            }\n        }\n    }\n```\n\nThe interface contains the method `postMessage` that mimics the endpoint of the API.\n\nAs the endpoint doesn’t return a value (only a status code that will be obtained with the `Response`object), the method defines `Call\u003cVoid\u003e` as the method return type.\n\nIf you’re wondering why it the type isn’t `Call\u003cUnit\u003e`, Retrofit doesn’t support this type natively yet. Follow this [issue](https://github.com/square/retrofit/issues/2329) for more information.\n\nThe interface also includes a [companion object](https://kotlinlang.org/docs/reference/object-declarations.html#companion-objects) that creates a Retrofit instance with the Moshi converter and an implementation of the API.\n\nNotice the use of `10.0.2.2` instead of `localhost`. This is how the Android emulator sees localhost. If you’re going to test the app on a device or if your API endpoint resides on another server, update the IP accordingly.\n\nAlso, by default, the API will run on port `8080`. \n\nThe first screen of the app will allow the user to enter a username. In the directory `res/layout` open the file `activity_main` and replace the content with the following:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\"\u003e\n    \n        \u003cTextView\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Login\"\n            android:textSize=\"25dp\"\n            android:id=\"@+id/loginLabel\"\n            android:gravity=\"center\"\n            app:layout_constraintBottom_toTopOf=\"@id/username\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            app:layout_constraintVertical_chainStyle=\"packed\" /\u003e\n    \n        \u003cEditText\n            android:id=\"@+id/username\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:hint=\"Username\"\n            android:inputType=\"text\"\n            android:maxLines=\"1\"\n            app:layout_constraintTop_toBottomOf=\"@id/loginLabel\"\n            app:layout_constraintBottom_toTopOf=\"@id/btnLogin\" /\u003e\n    \n        \u003cButton\n            android:id=\"@+id/btnLogin\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Enter\"\n            app:layout_constraintTop_toBottomOf=\"@+id/username\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"/\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nUsing a [ConstraintLayout](https://developer.android.com/training/constraint-layout/), it will show a label with the text **Login**, a text box to enter the username, and a button to log the user in.\n\nFor this app, the username will be stored in an `App` class (`com.pusher.pusherchat.App.kt`) that will be available for all activities:\n\n``` kotlin\n    import android.app.Application\n    \n    class App:Application() {\n        companion object {\n            lateinit var user:String\n        }\n    }\n```\n\nIn a more complex application, you might want to save the username to the [shared preferences](https://developer.android.com/training/data-storage/shared-preferences) or in an [SQLite database](https://developer.android.com/training/data-storage/room/). \n\nThis way, the code for the main activity (`com.pusher.pusherchat.MainActivity.kt`) will look like this:\n\n``` kotlin\n    package com.pusher.pusherchat\n    \n    import android.content.Intent\n    import android.support.v7.app.AppCompatActivity\n    import android.os.Bundle\n    import android.widget.Toast\n    import kotlinx.android.synthetic.main.activity_main.*\n    \n    class MainActivity : AppCompatActivity() {\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n    \n            btnLogin.setOnClickListener {\n                if (username.text.isNotEmpty()) {\n                    val user = username.text.toString()\n    \n                    App.user = user\n                    startActivity(Intent(this@MainActivity, ChatActivity::class.java))\n                } else {\n                    Toast.makeText(applicationContext,\"Username should not be empty\", Toast.LENGTH_SHORT).show()\n                }\n            }\n        }\n    }\n```\n\nIf the username textbox is not empty, it stores the username and starts the next activity (the chat). Otherwise, an error message is shown.\n\nNow we need the `ChatActivity` class, so right-click your main package (`com.pusher.pusherchat` in my case) and choose from the contextual menu the option *New → Activity → Empty Activity* to create the activity class:\n\n![kotlin-android-chat-springboot-android-5](//images.ctfassets.net/1es3ne0caaid/5CTtGA9i0wYAG8g6KWmymY/1aba640c4c11acae1de10f72623de8a8/kotlin-android-chat-springboot-android-5.png)\n\nThis chat app will format in a different way the messages from the current user and the messages from the other users.\n\nIn the `res/drawable` directory, create a new drawable resource file, `my_message_bubble.xml` with the following content:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \n    \u003cshape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:shape=\"rectangle\"\u003e\n    \n        \u003csolid android:color=\"#9d48e4\"\u003e\u003c/solid\u003e\n    \n        \u003ccorners android:topRightRadius=\"5dp\" android:radius=\"40dp\"\u003e\u003c/corners\u003e\n    \n    \u003c/shape\u003e\n```\n\nThis will give you a rectangle with rounded corners, however, in the case of the top right corner, the radius is smaller to give the effect that the bubble is coming from the right:\n\n![kotlin-android-chat-springboot-purple-icon](//images.ctfassets.net/1es3ne0caaid/7e0Yack5peguS2ywUCY2mM/46e4849818d05b981bdefc539f21a6e2/kotlin-android-chat-springboot-purple-icon.png)\n\nFor messages coming from other users, create another file in the `res/drawable` directory, `other_message_bubble.xml`, with the following content:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \n    \u003cshape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:shape=\"rectangle\"\u003e\n    \n        \u003csolid android:color=\"#ff00ff\"\u003e\u003c/solid\u003e\n    \n        \u003ccorners  android:topLeftRadius=\"5dp\" android:radius=\"40dp\"\u003e\u003c/corners\u003e\n    \n    \u003c/shape\u003e\n```\n\nThis changes the color and the radius on the top left corner to differentiate the messages of the users.\n\nOpen the layout file that was created for the `ChatActivity` (`res/layout/activity_chat.xml`) and replace its contents with the following:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".ChatActivity\"\u003e\n    \n        \u003candroid.support.v7.widget.RecyclerView\n            android:id=\"@+id/messageList\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:layout_marginBottom=\"55dp\"\n            android:layout_marginLeft=\"10dp\"\n            android:layout_marginStart=\"10dp\"\n            android:scrollbars=\"vertical\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\u003e\n        \u003c/android.support.v7.widget.RecyclerView\u003e\n    \n        \u003cView\n            android:layout_width=\"0dp\"\n            android:layout_height=\"2dp\"\n            android:background=\"@color/colorPrimaryDark\"\n            android:layout_marginBottom=\"0dp\"\n            app:layout_constraintBottom_toTopOf=\"@+id/layout_messageArea\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"/\u003e\n    \n        \u003cLinearLayout\n            android:id=\"@+id/layout_messageArea\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"horizontal\"\n            android:minHeight=\"48dp\"\n            android:background=\"#ffffff\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\u003e\n    \n            \u003cEditText\n                android:id=\"@+id/txtMessage\"\n                android:hint=\"Enter message\"\n                android:background=\"@android:color/transparent\"\n                android:layout_gravity=\"center\"\n                android:layout_marginLeft=\"16dp\"\n                android:layout_marginRight=\"16dp\"\n                android:layout_width=\"0dp\"\n                android:layout_weight=\"1\"\n                android:layout_height=\"wrap_content\"\n                android:maxLines=\"6\"/\u003e\n    \n            \u003cButton\n                android:id=\"@+id/btnSend\"\n                android:text=\"SEND\"\n                android:textSize=\"14dp\"\n                android:clickable=\"true\"\n                android:layout_width=\"64dp\"\n                android:layout_height=\"48dp\"\n                android:gravity=\"center\"\n                android:layout_gravity=\"bottom\" /\u003e\n    \n        \u003c/LinearLayout\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThis defines:\n\n- A `RecyclerView` to show the chat messages\n- A `View` that acts as a line separator\n- A `LinearLayout` that contains:\n  - An `EditText` where the users enter their message\n  - A `Button` to send the message\n\nIt should look like this:\n\n![kotlin-android-chat-springboot-list](//images.ctfassets.net/1es3ne0caaid/P0q4mYkqIgUqagca2qksq/70a32cdabdaab2a5af88eada2fc81811/kotlin-android-chat-springboot-list.png)\n\nNow, the app is going to present different information for the messages sent by the current user and the messages sent by the rest of the users.\n\nSo create two new layout resource files for the messages of the users:\n\n``` xml\n    \u003c!-- res/layout/my_message.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/txtMyMessage\"\n            android:text=\"Hi, my message\"\n            android:background=\"@drawable/my_message_bubble\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:maxWidth=\"240dp\"\n            android:padding=\"15dp\"\n            android:elevation=\"5dp\"\n            android:textColor=\"#ffffff\"\n            android:layout_marginRight=\"10dp\"\n            android:layout_marginTop=\"5dp\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/txtMyMessageTime\"\n            android:text=\"12:00 PM\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:textSize=\"10sp\"\n            android:textStyle=\"bold\"\n            android:layout_marginRight=\"10dp\"\n            app:layout_constraintBottom_toBottomOf=\"@+id/txtMyMessage\"\n            app:layout_constraintRight_toLeftOf=\"@+id/txtMyMessage\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\nAnd:\n``` xml\n    \u003c!-- res/layout/other_message.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:paddingTop=\"8dp\"\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/txtOtherUser\"\n            android:text=\"John Doe\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:textSize=\"12sp\"\n            android:textStyle=\"bold\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            android:layout_marginTop=\"5dp\" /\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/txtOtherMessage\"\n            android:text=\"Hi, John's message\"\n            android:background=\"@drawable/other_message_bubble\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:maxWidth=\"240dp\"\n            android:padding=\"15dp\"\n            android:elevation=\"5dp\"\n            android:textColor=\"#ffffff\"\n            android:layout_marginTop=\"4dp\"\n            app:layout_constraintTop_toBottomOf=\"@+id/txtOtherUser\" /\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/txtOtherMessageTime\"\n            android:text=\"12:00 PM\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:textSize=\"10sp\"\n            android:textStyle=\"bold\"\n            app:layout_constraintLeft_toRightOf=\"@+id/txtOtherMessage\"\n            android:layout_marginLeft=\"10dp\"\n            app:layout_constraintBottom_toBottomOf=\"@+id/txtOtherMessage\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nFor the current user messages, the app shows the time the message was sent and the message itself, using the bubble defined earlier as background:\n\n![kotlin-android-chat-springboot-current-user](//images.ctfassets.net/1es3ne0caaid/JaoMQNIQqQAYCUusGuwwC/b8d9e31d4887ecc19ecb07a2a9d5b5fe/kotlin-android-chat-springboot-current-user.png)\n\nFor the other user’s messages, in addition to the previous information, the app shows the username of the user:\n\n![kotlin-android-chat-springboot-other-user](//images.ctfassets.net/1es3ne0caaid/3DO9WSYHOo6UCy6kkeUKkq/f4c4f5319f24a000685ae0a1aa7beaac/kotlin-android-chat-springboot-other-user.png)\n\n\nThe [RecyclerView](https://developer.android.com/guide/topics/ui/layout/recyclerview) will need an [Adapter](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter) to provide the views that represent the messages. So let’s create a Kotlin class, `com.pusher.pusherchat.MessageAdapter.kt`, and go step by step building it.\n\nFirst, let’s add all the `import` statements we’ll need after the package declaration:\n``` kotlin\n    package com.pusher.pusherchat\n    \n    import android.content.Context\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    import kotlinx.android.synthetic.main.my_message.view.*\n    import kotlinx.android.synthetic.main.other_message.view.*\n```\nNext, outside the class, let’s define two private constants to represent the two types of chat messages:\n``` kotlin\n    private const val VIEW_TYPE_MY_MESSAGE = 1\n    private const val VIEW_TYPE_OTHER_MESSAGE = 2\n```\nUsually, constants are placed in a companion object inside the class, which makes them equivalent to `public static final` fields in Java. But for simple use cases, like this one, you can also define them this way.\n\nMoving on, let’s specify that this class is a subclass of a class of type   `RecyclerView.Adapter\u003cMessageViewHolder\u003e`, and define `MessageViewHolder` as an open class that extends `RecyclerView.ViewHolder`  and from which the two types of messages will derive:\n``` kotlin\n    //...\n    class MessageAdapter (val context: Context) : RecyclerView.Adapter\u003cMessageViewHolder\u003e() {\n    }\n    \n    open class MessageViewHolder (view: View) : RecyclerView.ViewHolder(view) {\n        open fun bind(message:Message) {}\n    }\n```\nThis way, inside the `MessageAdapter` class, we can define these two subclasses that represent the views defined in the layouts:\n``` kotlin\n    class MessageAdapter (val context: Context) : RecyclerView.Adapter\u003cMessageViewHolder\u003e() {\n    \n      inner class MyMessageViewHolder (view: View) : MessageViewHolder(view) {\n        private var messageText: TextView = view.txtMyMessage\n        private var timeText: TextView = view.txtMyMessageTime\n    \n        override fun bind(message: Message) {\n            messageText.text = message.message\n            timeText.text = DateUtils.fromMillisToTimeString(message.time)\n        }\n      }\n    \n      inner class OtherMessageViewHolder (view: View) : MessageViewHolder(view) {\n        private var messageText: TextView = view.txtOtherMessage\n        private var userText: TextView = view.txtOtherUser\n        private var timeText: TextView = view.txtOtherMessageTime\n    \n        override fun bind(message: Message) {\n            messageText.text = message.message\n            userText.text = message.user\n            timeText.text = DateUtils.fromMillisToTimeString(message.time)\n        }\n      }\n    }\n```\nOf course, you’ll need the class `DateUtils` to convert the time from milliseconds (this is how the time will be handled internally) to a readable time string. This is the definition:\n``` kotlin\n    import java.text.SimpleDateFormat\n    import java.util.*\n    \n    object DateUtils {\n        fun fromMillisToTimeString(millis: Long) : String {\n            val format = SimpleDateFormat(\"hh:mm a\", Locale.getDefault())\n            return format.format(millis)\n        }\n    }\n```\nBack to the `MessageAdapter` class, let’s add an `ArrayList` to store the messages and a method to add new messages to it:\n``` kotlin\n    //...\n    class MessageAdapter (val context: Context) : RecyclerView.Adapter\u003cMessageViewHolder\u003e() {\n      private val messages: ArrayList\u003cMessage\u003e = ArrayList()\n    \n      fun addMessage(message: Message){\n        messages.add(message)\n        notifyDataSetChanged()\n      }\n      \n      //...\n    }\n```\nThis way, you can implement the method to get the item count:\n``` kotlin\n    class MessageAdapter (val context: Context) : RecyclerView.Adapter\u003cMessageViewHolder\u003e() {\n      //...\n      \n      override fun getItemCount(): Int {\n        return messages.size\n      }\n      \n      //...\n    }\n```\nAnd using the username entered in the first screen, return either the `VIEW_TYPE_MY_MESSAGE` constant or `VIEW_TYPE_OTHER_MESSAGE` in the `getItemViewType` method:\n``` kotlin\n    class MessageAdapter (val context: Context) : RecyclerView.Adapter\u003cMessageViewHolder\u003e() {\n      //...\n      \n      override fun getItemViewType(position: Int): Int {\n        val message = messages.get(position)\n    \n        return if(App.user == message.user) {\n            VIEW_TYPE_MY_MESSAGE\n        }\n        else {\n            VIEW_TYPE_OTHER_MESSAGE\n        }\n      }\n      \n      //...\n    }\n```\nSo in the method `onCreateViewHolder`, you can inflate the view according to the type of message using the appropriate layout:\n``` kotlin\n    class MessageAdapter (val context: Context) : RecyclerView.Adapter\u003cMessageViewHolder\u003e() {\n      //...\n      \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MessageViewHolder {\n        return if(viewType == VIEW_TYPE_MY_MESSAGE) {\n            MyMessageViewHolder(\n              LayoutInflater.from(context).inflate(R.layout.my_message, parent, false)\n            )\n        } else {\n            OtherMessageViewHolder(\n              LayoutInflater.from(context).inflate(R.layout.other_message, parent, false)\n            )\n        }\n      }\n      \n      //...\n    }\n```\nThis way, the only thing that the method `onBindViewHolder` has to do is to invoke the `bind` method of the `MessageViewHolder` instance it receives as an argument:\n``` kotlin\n    class MessageAdapter (val context: Context) : RecyclerView.Adapter\u003cMessageViewHolder\u003e() {\n      //...\n      \n      override fun onBindViewHolder(holder: MessageViewHolder, position: Int) {\n        val message = messages.get(position)\n    \n        holder?.bind(message)\n      }\n      \n      //...\n    }\n```\nAnd that’s the adapter.\n\nNow in the class `com.pusher.pusherchat.ChatActivity`, after the package declaration, add the `import` statements the class will need and a constant (for logging):\n``` kotlin\n    package com.example.deborah.pusherchat\n    \n    import android.support.v7.app.AppCompatActivity\n    import android.os.Bundleimport android.content.Context\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import android.view.inputmethod.InputMethodManager\n    import android.widget.Toast\n    import kotlinx.android.synthetic.main.activity_chat.*\n    import java.util.*\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    private const val TAG = \"ChatActivity\"\n    \n    class ChatActivity : AppCompatActivity() {\n    \n        //...\n    }\n```\nAlso in the `ChatActivity` class, configure a `MessageAdapter` instance in the following way:\n``` kotlin\n    //...\n    class ChatActivity: AppCompatActivity() {\n        private lateinit var adapter: MessageAdapter\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_chat)\n    \n            messageList.layoutManager = LinearLayoutManager(this)\n            adapter = MessageAdapter(this)\n            messageList.adapter = adapter\n        }\n    }\n```\nNow, when the button to send a message is pressed, if the message box is not empty, you need to:\n\n- Build a `Message` object\n- Call the API endpoint to publish the message to a Pusher channel\n- Reset the input and hide the keyboard\n\nOtherwise, show and/or log the corresponding errors.\n\nThis is done with the following code:\n``` kotlin\n    class ChatActivity: AppCompatActivity() {\n        private lateinit var adapter: MessageAdapter\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            //...\n            \n            btnSend.setOnClickListener {\n              if(txtMessage.text.isNotEmpty()) {\n                val message = Message(\n                    App.user,\n                    txtMessage.text.toString(),\n                    Calendar.getInstance().timeInMillis\n                )\n    \n                val call = ChatService.create().postMessage(message)\n    \n                call.enqueue(object : Callback\u003cVoid\u003e {\n                    override fun onResponse(call: Call\u003cVoid\u003e, response: Response\u003cVoid\u003e) {\n                      resetInput()\n                      if (!response.isSuccessful) {\n                        Log.e(TAG, response.code().toString());\n                        Toast.makeText(applicationContext,\"Response was not successful\", Toast.LENGTH_SHORT).show()\n                      }\n                    }\n    \n                    override fun onFailure(call: Call\u003cVoid\u003e, t: Throwable) {\n                      resetInput()\n                      Log.e(TAG, t.toString());\n                      Toast.makeText(applicationContext,\"Error when calling the service\", Toast.LENGTH_SHORT).show()\n                    }\n               })\n             } else {\n               Toast.makeText(applicationContext,\"Message should not be empty\", Toast.LENGTH_SHORT).show()\n             }\n          }\n        }\n    \n        private fun resetInput() {\n          // Clean text box\n          txtMessage.text.clear()\n    \n          // Hide keyboard\n          val inputManager = \n            getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\n          inputManager.hideSoftInputFromWindow(\n            currentFocus!!.windowToken, InputMethodManager.HIDE_NOT_ALWAYS\n          )\n        }\n    }\n```\nFinally, you need to set up a Pusher instance to listen for messages and add them to the `RecyclerView` when one is received:\n``` kotlin\n    class ChatActivity: AppCompatActivity() {\n      private lateinit var adapter: MessageAdapter\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n          //...\n          setupPusher()\n      }\n      \n      private fun setupPusher() {\n        val options = PusherOptions()\n        options.setCluster(\"PUSHER_APP_CLUSTER\")\n    \n        val pusher = Pusher(\"PUSHER_APP_KEY\", options)\n        val channel = pusher.subscribe(\"chat\")\n    \n        channel.bind(\"new_message\") { channelName, eventName, data -\u003e\n            val jsonObject = JSONObject(data)\n    \n                val message = Message(\n                        jsonObject[\"user\"].toString(),\n                        jsonObject[\"message\"].toString(),\n                        jsonObject[\"time\"].toString().toLong()\n                )\n    \n                runOnUiThread {\n                    adapter.addMessage(message)\n                    // scroll the RecyclerView to the last added element\n                    messageList.scrollToPosition(adapter.itemCount - 1);\n                }\n    \n        }\n    \n        pusher.connect()\n      }\n      //...\n    }\n```\nJust set your Pusher app cluster and key and you’ll be ready to test the app.\n\n## Testing the app\n\nFirst of all, run the API by executing the following Gradle command in the root directory of the Spring Boot application:\n```\n    gradlew bootRun\n```\nOr if you’re using an IDE, execute the main class of the application, the one annotated with `@SpringBootApplication` (`com.example.demo.DemoApplication` in my case).\n\nThen, in Android Studio, [execute your application on two Android emulators](https://stackoverflow.com/questions/28619463/how-to-use-two-emulators-at-the-same-time-in-the-same-project-in-android-studio).\n\nThis is how the first screen should look like:\n\n![kotlin-android-chat-springboot-login](//images.ctfassets.net/1es3ne0caaid/3LNtpTOzaEUqG2m0Qy8KAA/50142e3d73c462d78e6715b7ae1f548e/kotlin-android-chat-springboot-login.png)\n\nAnd start playing with the app:\n\n![kotlin-android-chat-springboot-demo](//images.ctfassets.net/1es3ne0caaid/6AFUVeoTxC88mWOYKemICY/ca0ed6408b6e2023da24ab5de7f8afc9/kotlin-android-chat-springboot-demo.gif)\n\nYou can also monitor the messages sent to Pusher in the **Debug Console** of your [dashboard](https://dashboard.pusher.com): \n\n![kotlin-android-chat-springboot-pusher-3](//images.ctfassets.net/1es3ne0caaid/1gTSbkM6cUMOISEkCok8s8/39bbfa45ee146658b4b91d60154baf70/kotlin-android-chat-springboot-pusher-3.png)\n\n## Conclusion\n\nYou have learned the basics of how to create a chat app with Kotlin and Pusher for Android.\n\nFrom here, you can extend it in many ways:\n\n- Change the design\n- Show more information\n- Save the messages to a database\n- Implement a real authentication\n- Use [presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels) to be aware of who is subscribed to the channel\n- Change the implementation of the API or add more functionality\n\nRemember that all of the source code for this application is available at [Github](https://github.com/eh3rrera/kotlin-pusher-chat).","metaTitle":"Building a chat app with Kotlin for Android","metaDescription":"This tutorial will show you how to build a chat app for Android using Kotlin, Springboot and Gradle."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5axHEzyj0Wai02m4GcWSw0","type":"Entry","createdAt":"2018-05-06T17:31:45.700Z","updatedAt":"2018-05-06T17:31:49.489Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app with sentiment analysis using Nest.js","url":"chat-sentiment-analysis-nestjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/nest-pusher-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SgQuYVb0kSMIgEmwqImOA","type":"Entry","createdAt":"2018-02-12T14:49:17.136Z","updatedAt":"2018-04-19T08:52:46.508Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Nest.js","url":"nest-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-05-06","description":"Learn to build a chat app with Nest.js. Add a fun element with sentiment analysis, automatically attaching emoticons based on the user's detected mood.","prerequisite":"To follow this tutorial you need Node and npm installed on your machine. A basic understanding of TypeScript and Node.js will be helpful.","content":"## Introduction\n\nIn recent years, sentiment analysis has shifted from analyzing online product reviews to social media texts from Twitter and Facebook. Now with the advent and popularity of chat applications on virtually all web applications around the world, we can use a [sentiment analysis](https://github.com/thisandagain/sentiment) tool to add a fun feature that enriches users’ chat experience.\n\nIn this post, we will take a dive into a realtime chat demo. This application will be built using Nest.js and Pusher. Nest.js is a Node.js progressive framework for building efficient and scalable server-side applications. In addition, we will also be able to perform sentiment analysis on messages sent by users. \n\n## Prerequisites\n\nA basic understanding of TypeScript and Node.js will help you get the best out of this tutorial. It is assumed that you already have Node and npm installed. Kindly check [Node.js](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) for further instructions and installation steps. \n\nHere is a quick overview of the technologies that we will be using in this post. \n\n\n- [Nest.js](https://nestjs.com/): a progressive framework for building efficient and scalable server-side applications. Built to take the advantage of modern JavaScript, but still preserves compatibility with pure JavaScript. \n- [Pusher](https://pusher.com/): a [Node.js](http://nodejs.org/) client to interact with the Pusher REST API\n- [Axios](https://www.npmjs.com/package/axios): a promise-based HTTP client that works both in the browser and in a Node.js environment.\n- [Sentiment](https://github.com/thisandagain/sentiment): Sentiment is a module that uses the [AFINN-165](http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010) wordlist and [Emoji Sentiment Ranking](http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0144296) to perform [sentiment analysis](http://en.wikipedia.org/wiki/Sentiment_analysis) on arbitrary blocks of input text.\n- [Vue.js](https://vuejs.org/): Vue is a progressive JavaScript frontend framework for building web applications.\n\n \n\n## Setting up the application\n\nThe simplest and most efficient way to set up a Nest.js application is to clone the starter repository made available on their [website](https://nestjs.com/).\n\nNow let’s run a command that will create a new project folder named `realtime-chat-nest` on your machine. Open your terminal or command prompt and run this command :\n\n```\n    $ git clone https://github.com/nestjs/typescript-starter.git realtime-chat-nest\n```\n\nGo ahead and change directory into the newly created folder and install all the dependencies for the project.\n\n```\n    // change directory\n    cd realtime-chat-nest\n    \n    // install dependencies\n    npm install\n```\n\n## Start the application\n\nRun the application with:\n\n```\n    npm start\n```\n\nThe command above will start the application on the default port used by Nest.js. Open your browser and navigate to http://localhost:3000. You should see the page with a welcome message like what we have below.\n\n![nest-hello-world](//images.ctfassets.net/1es3ne0caaid/45ET2cOwzYa8MUO6mIwq2Q/c9511e3c4c76117982d0bfadfd43c652/nest-hello-world.png)\n\n## Server dependencies\n\nRun the command below to install the server dependencies required for this project.\n\n```\n    npm install ejs body-parser pusher\n```\n\n- **ejs**: this is a simple templating language for generating HTML markup with plain JavaScript.\n\n\n- **Body-parser**: a middleware used for extracting the entire body portion of an incoming request stream and expose it on `req.body` .\n\n\n- **Pusher**: a Node.js client to interact with the Pusher REST API\n\n\n## Pusher account setup\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![nest-phone-pusher-1](//images.ctfassets.net/1es3ne0caaid/43DKutJFOw86I2cCeMEGMG/246afa094f08c930af91a38c7b1a65fb/nest-phone-pusher-1.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![nest-phone-pusher-2](//images.ctfassets.net/1es3ne0caaid/6m8JvB3xxC444SmaIQ824i/5e5ea5d799a6717ca6c74324ac5a6576/nest-phone-pusher-2.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n\n![nest-phone-pusher-3](//images.ctfassets.net/1es3ne0caaid/4UPXLqxBWMc0mqUuMo462A/1f9779e509f53259bbd32cf0d244ef52/nest-phone-pusher-3.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![nest-phone-pusher-4](//images.ctfassets.net/1es3ne0caaid/1TPXcBKK9ua4Q2OuqSI0IS/5dd742674348e92defd7ecc4aa320755/nest-phone-pusher-4.png)\n\n## Bootstrap the application\n\nUnder the hood, Nest uses the Express library and therefore, favors the popular MVC pattern.\n\nTo set this up, open up `main.ts` file and update it with the content below:\n\n``` typescript\n    // ./src/main.ts\n    \n    import { NestFactory } from '@nestjs/core';\n    import { AppModule } from './app.module';\n    \n    import * as bodyParser from 'body-parser';\n    import * as express from 'express';\n    import * as path from 'path';\n    \n    async function bootstrap() {\n      const app = await NestFactory.create(AppModule);\n      app.use(express.static(path.join(__dirname, 'public')));\n       app.set('views', __dirname + '/views');\n       // set ejs as the view engine\n       app.set('view engine', 'ejs');\n      await app.listen(3000);\n    }\n    bootstrap();\n```\n\nThis is the entry point of the application and necessary for bootstrapping Nest.js apps. I have included the Express module, path, and set up ejs as the view engine for the application.\n\n\n## Building the homepage\n\nThe `views` folder will contain all templates for this application. Go ahead and create it within the `src` folder. Once you are done, create a new file named `index.ejs` right inside the newly created `views` folder and update the content with:\n\n``` html\n    // ./src/views/index.ejs\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"/style.css\"\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.13/vue.js\"\u003e\u003c/script\u003e\n        \n        \u003ctitle\u003e Chat \u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n            \n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-3\" id=\"active-user\"\u003e                    \n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003ch3 v-if=\"username\"\u003eHello {{ username }}\u003c/h3\u003e\n                        \u003cdiv v-else\u003e\n                            \u003ch3\u003eEnter a username\u003c/h3\u003e\n                            \u003cinput type=\"text\" @Keyup.enter=\"getUser\" placeholder=\"Username\" class=\"form-control\"\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n                \u003cdiv class=\"col-md-9\" id=\"chat-room\"\u003e\n                    \u003cdiv v-if=\"username\"\u003e\n                        \u003cdiv\u003e\n                            \u003cdiv style=\"border-bottom: 1px solid black\"\u003e\n                                \u003ch2\u003e{{ username }}\u003c/h2\u003e\n                            \u003c/div\u003e\n                            \u003cdiv v-for=\"chat in chats\" id=\"chat-box\"\u003e\n                                \u003cp\u003e {{chat.mood}} \u003c/p\u003e\n                                \u003cp\u003e \u003cb\u003e{{ chat.user }}\u003c/b\u003e\u003c/p\u003e\n                                \u003cp id=\"chat-message\"\u003e {{ chat.message }} \u003c/p\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"form-group\"\u003e\n                            \u003ctextarea placeholder=\"Type a message here then hit ENTER\"  @Keyup.enter=\"postMessages\"\u003e\u003c/textarea\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.2/axios.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"/main.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nOn this page, we are simply building a basic chat room that will showcase the realtime functionality and sentiment analysis that was mentioned earlier. This will serve as the homepage for the application, hence the need for it to be well structured.\n\nFirstly, we included a link to the Bootstrap CDN file to add some default styling and layout to our application. We also added a custom stylesheet for further styling. We will create this stylesheet in the next section. Also included in a `\u003cscript\u003e` tag just before the page title is a CDN file for Vue.js. This is to ensure that Vue.js is loaded immediately the `index.ejs` file is rendered.\n\nFurthermore, on this page, we used an event handler to listen to keyboard events using key modifiers aliases made available by Vue.js. This process will be discussed later in the tutorial.\n\nFinally, we included CDN file each for `Axios`, `Pusher` and then proceeded to add a custom script file named `main.js`. To set up this file, go ahead and create a `public`  folder within the `src` folder in the application and create the `main.js` file within it.\n\n\n## Stylesheet\n\nTo set up this stylesheet, locate the  `public` folder  and create a new file named `style.css` within it. Next, open the file and paste the code below:\n\n``` css\n    // ./src/public/style.css\n    \n    html{\n        height: 100%;\n    }\n      #active-user {\n          height: 600px;\n          background: #000000;    \n          color: #ffffff;\n          min-height: 600px;\n        \n          display: flex;\n          align-items: center;\n          justify-content: center;\n      }\n      #chat-room {\n          min-height: 600px;\n          background: #f5f5f5;\n      }\n      textarea {\n          position: absolute;\n          bottom: 10px;\n          width: 600px;\n          min-height: 120px;\n          padding: 20px;\n          border: none;\n          overflow: auto;\n          outline: none;\n      }\n      #chat-box {\n          padding: 20px; \n      }\n      #chat-message {\n          background: #f8f9fa!important;\n          max-width: 40%;\n          min-height: 50px;\n          padding: 3px;\n      }\n```\n\n## Handling routes\n\nThe controller layer in Nest.js is responsible for receiving an incoming request and returning the appropriate response to the client. Nest uses a controller metadata `@Controller` to map routes to a specific controller. The starter project already contains a controller by default. We will make use of this in order to render the home for this app. Open `./src/app.controller.ts` and edit as shown below:\n\n``` typescript\n    // ./src/app.controller.ts\n    \n    import { Get, Controller, Res } from '@nestjs/common';\n    \n    @Controller()\n    export class AppController {\n      @Get()\n      root(@Res() res) {\n        res.render('index');\n      }\n    }\n```\n\nThis controller will ensure that Nest maps every `/` route to `index.ejs` file.\n\n\n## Initialize the chat room\n\nAs carefully laid out on our `index.ejs` page earlier on, the chat room will contain two separate sections that will be differentiated by the width of the column. One of the sections will contain an input field that will accept a username and the other section will be where the chat messages are properly displayed.\n\nTo initialize the chat room, we will start by creating a new Vue instance with the Vue function. Open up the `main.js` file created earlier and paste the code below in it:\n\n``` javascript\n    // ./src/public/main.js\n    \n    new Vue({\n        el: '#app',\n        data: {\n            chats: [],\n            username: \"\",\n            mood: ''\n        },\n        methods: {\n            getUser(event) {\n                this.username = event.target.value;\n            }\n            ...\n        }\n    })\n```    \n\nHere, we created a Vue instance and as part of the options, we bound Vue to a div with an id of `app` and also passed data options. Further down, we used a method `getUser()` to retrieve the username of a user.\n\n\n## Post a message\n\n``` javascript\n    // ./src/public/main.js\n    \n    new Vue({\n        el: '#app',\n        data: {\n            chats: [],\n            username: \"\",\n            mood: ''\n        }\n        methods: {\n            getUser(event) {\n                ...\n            },\n            \n            postMessages(event) {\n                const chatMessage = event.target.value;\n                \n                if(event.keyCode === 13 \u0026\u0026 !event.shiftKey) {\n                    const chat = {\n                        user: this.username,\n                        message: chatMessage\n                    };\n                    \n                    event.target.value = \"\";\n                    \n                    axios.post('/message', chat)\n                    .then( data =\u003e {\n                        console.log(data);\n                    });\n                }\n            }\n        }\n    })\n```    \n\nIn order to send the chat message to the server, we created a `postMessages()` function with the responsibility of retrieving the chat message provided by a user and sending it to the server.\n\n## Create a controller\n\nEarlier, we already configured the `app.controller.ts` to render the homepage and display the form for consumers. The next thing we need to do is build the controller that will handle the data posted to the server. Create a new folder named `chat` in the `src` folder and create a new file called `chat.controller.ts` within it.\n\n``` typescript\n    // ./src/chat/chat.controller.ts\n    \n    import { Controller, Post, Res, Body, HttpStatus } from '@nestjs/common';\n    import { ChatService } from './chat.service';\n    @Controller('message')\n    export class ChatController {\n        constructor(private chatService: ChatService){}\n      @Post()\n      postMessage(@Res() res, @Body() data ) {\n          this.chatService.addMessage(data)\n          res.status(HttpStatus.OK).send(\"Comment posted successfully\")\n      }\n    }\n```\n\nAs shown above, we imported `ChatService` and injected it into the controller through the constructor. As recommended by Nest a controller should handle only HTTP requests and abstract any complex logic to a service. \n\n\n## Realtime service with Pusher\n\nAs required within the `ChatController` above, let’s create a component as a service. This will basically receive the posted `data`  object that contains, both the username and chat messages provided by the active user and publish it to a designated channel for the client side to listen and subscribe to. \n\nFurthermore, we’ll use the [Sentiment](https://github.com/thisandagain/sentiment) javascript library for analysis. To install this library, open a terminal in the root folder of your project and run the following command.\n\n\n```\n    npm install sentiment --save\n```\n\nOnce the installation process is completed, create a new file within `chat` folder named `chat.service.ts` \n\n``` typescript\n    // ./src/chat/chat.service.ts\n    \n    import { Component } from '@nestjs/common';\n    \n    const Sentiment = require('sentiment');\n    @Component()\n    export class ChatService {\n        \n        addMessage(data) {\n            const Pusher = require('pusher');\n            const sentiment = new Sentiment();\n            const sentimentScore = sentiment.analyze(data.message).score;\n            const chat = {\n                user: data.user,\n                message: data.message,\n                sentiment: sentimentScore\n            }\n            var pusher = new Pusher({ // replace with valid credentials\n                appId: 'YOUR_APP_ID',\n                key: 'YOUR_API_KEY',\n                secret: 'YOUR_SECRET_KEY',\n                cluster: 'CLUSTER',\n                encrypted: true\n              });\n              pusher.trigger('chats', 'new-chat', chat);\n        }\n    }\n```\n\nHere we have initialized Pusher with the required credentials in order to be able to trigger an event named `new-chat` through a channel named `chats.` We also required Sentiment module, this is important, as it will help us analyze the data messages posted by a user and returned respective scores by cross-checking the words.\n\n\n## Connecting the dots\n\nTo make this work, both the `ChatController` and `ChatService` needs to be registered within the `app.module.ts` file.\n\n``` typescript\n    // ./src/app.module.ts\n    \n    import { ChatController } from './chat/chat.controller';\n    import { ChatService } from './chat/chat.service';\n    import { Module } from '@nestjs/common';\n    import { AppController } from './app.controller';\n    @Module({\n      imports: [],\n      controllers: [AppController, ChatController],\n      components: [ChatService],\n    })\n    export class AppModule {}\n```\n\n\nRestart the development server if it is currently running. Check your page on [http://localhost:3000.](http://localhost:3000.) You should see: \n\n![nest-chat-sentiment-partial](//images.ctfassets.net/1es3ne0caaid/2OBl0TAMDKCIuQI4A6kmG0/14b2cefadef3718a31d005ca15ade6a3/nest-chat-sentiment-partial.png)\n\nIf we try to send a message, nothing will happen for now. This is because we have not updated the chat room with the values of the chat posted from the server. \n\n\n## Displaying chat messages\n\nIn order to receive the chat messages in realtime, we’ll use the `subscribe()` method from Pusher to subscribe to the created `chats` channel.\n\n``` javascript\n    // ./src/public/main.js\n    \n    const SAD_EMOJI = [55357, 56864];\n    const HAPPY_EMOJI = [55357, 56832];\n    const NEUTRAL_EMOJI = [55357, 56848];\n    new Vue({\n        el: '#app',\n        data: {\n           ...\n        },\n        created() {\n            let pusher = new Pusher('YOUR_API_KEY', {\n                cluster: 'CLUSTER',\n                encrypted: true\n            });\n            \n            const channel = pusher.subscribe('chats');\n            channel.bind('new-chat', data =\u003e {\n                const expression = data.sentiment \u003e 0 ? HAPPY_EMOJI : (data.sentiment === 0 ? NEUTRAL_EMOJI : SAD_EMOJI);\n                const response = {\n                    message: data.message,\n                    user: data.user,\n                    mood: String.fromCodePoint(...expression)\n                }\n                \n                this.chats.push(response);\n            });\n        },\n        methods: {\n            getUser(event) {\n               ..\n            },\n            \n            postMessages(event) {\n              ...\n            }\n        }\n    })\n```   \n\nFirst, we added some constants of code points for a particular sentiment emoji. This will help us rendered an emoji corresponding to the mood of the user during the chat as analyzed by the Sentiment module.\n\nEnsure that you replace the `YOUR_API_KEY` placeholder with the appropriate credentials as obtained from your user’s dashboard on Pusher.\n\nYou can go ahead now and give this a try by restarting the development server:\n\n![nest-chat-sentiment-complete](//images.ctfassets.net/1es3ne0caaid/5NVh39rZ04gqYCiYo2MMak/5d6f1be380d08718efe688b42ee8335a/nest-chat-sentiment-complete.gif)\n\n## Conclusion\n\nWe have been able to build a basic chat application with realtime functionality as powered by Pusher. A lot of improvement can be introduced in order to make this application function much better. Please feel free to explore by checking the source code of this project here on [Github](https://github.com/christiannwamba/nest-pusher-chat). \n\nI hope you found this tutorial helpful.","metaTitle":"Build a chat app with sentiment analysis using Nest.js","metaDescription":"In this tutorial, use Nest.js and sentiment analysis to create a chat app with a playful feature: emoticons are added automatically, depending on key words used in messages."}}],"defaultValue":"Chat","queryType":"tag","pages":4,"route":"/tutorials","query":{"tag":"Chat","page":"2"}}},"page":"/tutorials","query":{"tag":"Chat","page":"2"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Chat&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:37:51 GMT -->
</html>