<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Flutter&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:43:47 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">14</span> tutorials for “<span class="css-npldjc ehwuahf2">Flutter</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials74b7.html?product=Channels&amp;tag=Flutter" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials49f1.html?product=Beams&amp;tag=Flutter" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Flutter"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/backend-developer-part-3.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Dart<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Becoming a backend developer - Part 3: Connecting to the server from a mobile app</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This is a tutorial for mobile app developers. In this three-part series, we will cover all the basics of what it takes t...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/backend-developer-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Dart<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Becoming a backend developer - Part 2: Building the server</h3><p class="css-k12xad e5jrto45">In this three-part series, we will cover all the basics of what it takes for a mobile app developer to become a backend ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/backend-developer-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Becoming a backend developer - Part 1: Foundational concepts</h3><p class="css-k12xad e5jrto45">This is a tutorial series for mobile app developers. In this three-part series, we will cover all the basics of what it ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/onboarding-flutter-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an onboarding experience for your mobile apps with Flutter - Part 2: Build the carousel</h3><p class="css-k12xad e5jrto45">This two part series guides you through building an onboarding experience for users new to your app. You will create a b...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/onboarding-flutter-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an onboarding experience for your mobile apps with Flutter - Part 1: Building the screens</h3><p class="css-k12xad e5jrto45">This two part series guides you through building an onboarding experience for users new to your app. You will create a b...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/styled-text-flutter.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flutter</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Mastering styled text in Flutter</h3><p class="css-k12xad e5jrto45">This tutorial takes an in-depth look at text styling in Flutter. It examines the challenges of working with text strings...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/local-data-flutter.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to save data locally in Flutter</h3><p class="css-k12xad e5jrto45">This tutorial looks at saving data locally with Flutter. It provides code samples for three methods: saving to shared pr...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/flutter-listviews.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Mastering Flutter ListViews</h3><p class="css-k12xad e5jrto45">This tutorial takes an in-depth look at working with lists in Flutter. You will learn how to use the ListView object to ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/login-ui-flutter.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a login UI with Flutter</h3><p class="css-k12xad e5jrto45">This simple tutorial introduces Flutter through a practical example. You will gain a basic familiarity with Flutter by c...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Prev</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials58ad.html?tag=Flutter&amp;page=1" class="css-2wakph edg0byb1">1</a><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsec1f.html?tag=Flutter&amp;page=2" class="css-5s6711 edg0byb1">2</a><a href="tutorialsec1f.html?tag=Flutter&amp;page=2" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":14,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2WHY7OFNyluJt2UEm7tnNP","type":"Entry","createdAt":"2019-03-28T16:14:34.236Z","updatedAt":"2019-03-28T16:14:34.236Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Becoming a backend developer - Part 3: Connecting to the server from a mobile app","url":"backend-developer-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"58WBWjhcWcuAMI6qIAyiC4","type":"Entry","createdAt":"2018-12-13T20:46:00.073Z","updatedAt":"2018-12-13T20:46:36.867Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Suragch","url":"suragch","email":"studymongolian@gmail.com","twitter":"https://twitter.com/suragch","github":"https://github.com/suragch","guestWriter":true}}],"projectRepo":"https://github.com/suragch/backend_demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1st5ugwNDbvlnFFHBadh5b","type":"Entry","createdAt":"2019-03-13T18:08:14.919Z","updatedAt":"2019-03-13T18:08:14.920Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Dart","url":"dart","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2019-03-28","description":"This is a tutorial for mobile app developers. In this three-part series, we will cover all the basics of what it takes to become a backend developer. You will create backends using Node and Dart, with mobile frontend examples using Android, Swift, and Flutter. In part three, build the frontend.","prerequisite":"You need experience in at least one of Android, iOS or Flutter development.","content":"In this three-part series, we have been covering all the basics of what it takes to become a backend developer. This is a tutorial for mobile app developers. \n\n\n- [Part 1: Foundational concepts](https://pusher.com/tutorials/backend-developer-part-1)\n- [Part 2: Building the server](https://pusher.com/tutorials/backend-developer-part-2)\n- Part 3: Connecting to the server from a mobile app\n\n\n## Introduction\n\nSo far we have already learned about REST APIs and how they use the HTTP protocol for client server communication. In the last lesson, we learned how to implement our API on the server, once using Node.js and again using Server Side Dart. I chose Node.js because it is popular and Server Side Dart because it allows Flutter developers to use Dart everywhere. However, it really doesn't matter what platform or language you chose for the backend server. Because we are using a REST API, we are able to make requests to it with Android, iOS, Futter, or any other frontend platform.\n\n![backend-mobile-1-2](//images.ctfassets.net/1es3ne0caaid/5fFYkzDLBS2G0hqW7s8kII/cac6226ef0211c8b4c10e6234705866e/backend-mobile-1-2.png)\n\nIn this tutorial, we will look at how to make a frontend client app that connects to the server we made in [part two](https://pusher.com/tutorials/backend-developer-part-2), I’ll give you three different examples: one for Android, one for iOS, and one for Flutter. Since you are already a mobile app developer, I won't go into much detail about how to create the app or build the layout. Instead I'll give you the code for making the HTTP requests. \n\nJust scroll down to the platform you are developing with. If you are a developer for a platform other than Android, iOS, or Flutter, you can look up the code for making HTTP requests on your platform and just port one of the examples below.\n\n## Prerequisites\n\nI'm assuming that you already have experience with Android, iOS, or Flutter, and that you have the development environment set up. I wrote and tested the client apps using the following software versions:\n\n\n- Android: Android Studio 3.3\n- iOS: Xcode 10.1\n- Flutter: Android Studio 3.3 with Flutter 1.2.1\n\n\n## Android client app\n\nCreate a layout similar to the image below (see [source code](https://github.com/suragch/backend_demo/blob/master/android_client/activity_main.xml)):\n\n![backend-mobile-3-1](//images.ctfassets.net/1es3ne0caaid/1baCUQQbkpRAoSEoWNrG14/d283ada58d50f1b680ca58684ad54a5d/backend-mobile-3-1.png)\n\nIn the manifest add the `INTERNET` permission (see [source code](https://github.com/suragch/backend_demo/blob/master/android_client/AndroidMainifest.xml)):\n\n```xml\n    \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n```\n\nAnd allow clear text:\n\n```xml\n    \u003capplication\n        android:usesCleartextTraffic=\"true\"\n        ...\n        \u003e\n```\n\n\u003e **Note:** You should use a secure HTTPS server in production, but in this tutorial we are using \"clear text\" HTTP. Doing this allowed me to simplify the server tutorial in part two by not having to register a certificate with a certificate authority. \n\nReplace `MainActivity.kt` with the following code (Java version [here](https://github.com/suragch/backend_demo/blob/master/android_client/MainActivity.java)):\n\n```kotlin\n    package com.example.backendclient\n    \n    import android.support.v7.app.AppCompatActivity\n    import android.os.Bundle\n    import android.os.AsyncTask\n    import android.util.Log\n    import android.view.View\n    import java.io.*\n    import java.net.HttpURLConnection\n    import java.net.URL\n    \n    private const val HOST = \"http://10.0.2.2:3000\"\n    private const val TAG = \"TAG\"\n    \n    class MainActivity : AppCompatActivity() {\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n        }\n    \n        fun makeGetAllRequest(view: View) {\n            HttpGetRequest().execute(HOST)\n        }\n    \n        fun makeGetOneRequest(view: View) {\n            val idToGet = 0\n            val url = \"$HOST/$idToGet\"\n            HttpGetRequest().execute(url)\n        }\n    \n        fun makePostRequest(view: View) {\n            val json = \"{\\\"fruit\\\": \\\"pear\\\", \\\"color\\\": \\\"green\\\"}\"\n            HttpPostRequest().execute(HOST, json)\n        }\n    \n        fun makePutRequest(view: View) {\n            val idToReplace = 0\n            val url = \"$HOST/$idToReplace\"\n            val json = \"{\\\"fruit\\\": \\\"watermellon\\\", \\\"color\\\": \\\"red and green\\\"}\"\n            HttpPutRequest().execute(url, json)\n        }\n    \n        fun makePatchRequest(view: View) {\n            val idToUpdate = 0\n            val url = \"$HOST/$idToUpdate\"\n            val json = \"{\\\"color\\\": \\\"green\\\"}\"\n            HttpPatchRequest().execute(url, json)\n        }\n    \n        fun makeDeleteRequest(view: View) {\n            val idToDelete = 0\n            val url = \"$HOST/$idToDelete\"\n            HttpDeleteRequest().execute(url)\n        }\n    \n        // GET\n        class HttpGetRequest : AsyncTask\u003cString, Void, Void\u003e() {\n            override fun doInBackground(vararg params: String): Void? {\n                val urlString = params[0]\n    \n                val myUrl = URL(urlString)\n                val connection = myUrl.openConnection() as HttpURLConnection\n                connection.requestMethod = \"GET\"\n                val result = getStringFromInputStream(connection.inputStream)\n                val statusCode = connection.responseCode\n                connection.disconnect()\n    \n                Log.i(TAG, \"GET result: $statusCode $result\")\n                return null\n            }\n        }\n    \n        // POST\n        class HttpPostRequest : AsyncTask\u003cString, Void, Void\u003e() {\n            override fun doInBackground(vararg params: String): Void? {\n                val urlString = params[0]\n                val json = params[1]\n    \n                val myUrl = URL(urlString)\n                val connection = myUrl.openConnection() as HttpURLConnection\n                connection.requestMethod = \"POST\"\n                connection.doOutput = true\n                connection.setRequestProperty(\"Content-Type\", \"application/json\")\n    \n                writeStringToOutputStream(json, connection.outputStream)\n                val result = getStringFromInputStream(connection.inputStream)\n                val statusCode = connection.responseCode\n                connection.disconnect()\n    \n                Log.i(TAG, \"POST result: $statusCode $result\")\n                return null\n            }\n        }\n    \n        // PUT\n        class HttpPutRequest : AsyncTask\u003cString, Void, Void\u003e() {\n            override fun doInBackground(vararg params: String): Void? {\n                val urlString = params[0]\n                val json = params[1]\n    \n                val myUrl = URL(urlString)\n                val connection = myUrl.openConnection() as HttpURLConnection\n                connection.requestMethod = \"PUT\"\n                connection.doOutput = true\n                connection.setRequestProperty(\"Content-Type\", \"application/json\")\n    \n                writeStringToOutputStream(json, connection.outputStream)\n                val result = getStringFromInputStream(connection.inputStream)\n                val statusCode = connection.responseCode\n                connection.disconnect()\n    \n                Log.i(TAG, \"PUT result: $statusCode $result\")\n                return null\n            }\n        }\n    \n        // PATCH\n        class HttpPatchRequest : AsyncTask\u003cString, Void, Void\u003e() {\n            override fun doInBackground(vararg params: String): Void? {\n                val urlString = params[0]\n                val json = params[1]\n    \n                val myUrl = URL(urlString)\n                val connection = myUrl.openConnection() as HttpURLConnection\n                connection.requestMethod = \"PATCH\"\n                connection.doOutput = true\n                connection.setRequestProperty(\"Content-Type\", \"application/json\")\n    \n                writeStringToOutputStream(json, connection.outputStream)\n                val result = getStringFromInputStream(connection.inputStream)\n                val statusCode = connection.responseCode\n                connection.disconnect()\n    \n                Log.i(TAG, \"PATCH result: $statusCode $result\")\n                return null\n            }\n        }\n    \n        // DELETE\n        class HttpDeleteRequest : AsyncTask\u003cString, Void, Void\u003e() {\n            override fun doInBackground(vararg params: String): Void? {\n                val urlString = params[0]\n    \n                val myUrl = URL(urlString)\n                val connection = myUrl.openConnection() as HttpURLConnection\n                connection.requestMethod = \"DELETE\"\n    \n                val result = getStringFromInputStream(connection.inputStream)\n                val statusCode = connection.responseCode\n                connection.disconnect()\n    \n                Log.i(TAG, \"DELETE result: $statusCode $result\")\n                return null\n            }\n        }\n    }\n    \n    private fun writeStringToOutputStream(json: String, outputStream: OutputStream) {\n        val bytes = json.toByteArray(charset(\"UTF-8\")) // API 19: StandardCharsets.UTF_8\n        outputStream.write(bytes)\n        outputStream.close()\n    }\n    \n    private fun getStringFromInputStream(stream: InputStream): String {\n        val text =  stream.bufferedReader().use { it.readText() }\n        stream.close()\n        return text\n    }\n```\n\nAs you can see, Android uses [HttpURLConnection](https://developer.android.com/reference/java/net/HttpURLConnection) to make HTTP requests. After opening the connection you use `setRequestMethod()` to choose the HTTP verb that you want (`GET`, `POST`, etc.). \n\nYou send the request by writing data to an output stream. After that you get the response by reading from an input stream. This should all be done in an AsyncTask to avoid blocking the UI thread.\n\nI used a raw string for the JSON in the code above. The GSON library is one option for converting JSON strings to Java objects. Check out [this tutorial](http://tutorials.jenkov.com/java-json/gson.html) for some instruction on that.\n\nWith the server that you made in [part two](https://pusher.com/tutorials/backend-developer-part-2) running, test the app in the Android emulator. In the Android Studio Logcat, note the statements that get printed after server responses:\n\n```\n    GET result: 200 [{\"fruit\":\"apple\",\"color\":\"red\"},{\"fruit\":\"banana\",\"color\":\"yellow\"}]\n    GET result: 200 {\"fruit\":\"apple\",\"color\":\"red\"}\n    POST result: 200 Item added with id 2\n    PUT result: 200 Item replaced at id 0\n    PATCH result: 200 Item updated at id 0\n    DELETE result: 200 Item deleted at id 0\n```\n\n## iOS client app\n\nCreate a [layout](https://github.com/suragch/backend_demo/blob/master/ios_client/Main.storyboard) similar to the image below:\n\n![backend-mobile-3-2](//images.ctfassets.net/1es3ne0caaid/6qtuYClCK2yHIkqw3ioOxP/2e456b33f459682c0c82abdbe60e2045/backend-mobile-3-2.png)\n\nIn the [Info.plist](https://github.com/suragch/backend_demo/blob/master/ios_client/Info.plist) file, add the following key:\n\n```xml\n    \u003ckey\u003eNSAppTransportSecurity\u003c/key\u003e\n    \u003cdict\u003e\n        \u003ckey\u003eNSAllowsArbitraryLoads\u003c/key\u003e\n        \u003ctrue/\u003e\n    \u003c/dict\u003e\n```\n\n![backend-mobile-3-3](//images.ctfassets.net/1es3ne0caaid/5sRVkgWpGj5S4hZvLG2hFA/ae1848a606e82d2e0f70cc3aa6fcc496/backend-mobile-3-3.png)\n\n\u003e **Note:** You should use a secure HTTPS server in production, but in this tutorial we are using unencrypted text with an HTTP server. Adding the key above bypasses iOS's requirement for encrypted text over a network call. Doing this allowed me to simplify the server tutorial in part two by not having to register a certificate with a certificate authority. \n\nReplace `ViewController.swift` with the following code:\n\n```swift\n    import UIKit\n    class ViewController: UIViewController {\n        \n        let host = \"http://localhost:3000\"\n    \n        // make GET (all) request\n        @IBAction func makeGetAllRequestTapped(_ sender: UIButton) {\n            \n            guard let url  = URL(string: host) else {return}\n            \n            // background task to make request with URLSession\n            let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n                guard let statusCode = (response as? HTTPURLResponse)?.statusCode \n                    else {return}\n                guard let body = data \n                    else {return}\n                guard let jsonString = String(data: body, encoding: String.Encoding.utf8) \n                    else {return}\n                \n                print(\"GET result: \\(statusCode) \\(jsonString)\")\n            }\n            \n            // start the task\n            task.resume()\n        }\n        \n        // make GET (one) request\n        @IBAction func makeGetOneRequestTapped(_ sender: UIButton) {\n            \n            let idToGet = 0;\n            let urlString = \"\\(host)/\\(idToGet)\"\n            guard let url  = URL(string: urlString) else {return}\n            \n            let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n                guard let statusCode = (response as? HTTPURLResponse)?.statusCode \n                    else {return}\n                guard let body = data \n                    else {return}\n                guard let jsonString = String(data: body, encoding: String.Encoding.utf8) \n                    else {return}\n                \n                print(\"GET result: \\(statusCode) \\(jsonString)\")\n            }\n            task.resume()\n        }\n        \n        // make POST request\n        @IBAction func makePostRequestTapped(_ sender: UIButton) {\n            \n            let dictionary = [\"fruit\" : \"pear\", \"color\" : \"green\"]\n            \n            // prepare request\n            guard let url  = URL(string: host) else {return}\n            var request = URLRequest(url: url)\n            request.httpMethod = \"POST\"\n            request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n            guard let json = try? JSONSerialization.data(\n                withJSONObject: dictionary, options: [])\n                else {return}\n            request.httpBody = json\n            \n            let task = URLSession.shared.dataTask(with: request) { \n                (data, response, error) in\n                guard let statusCode = (response as? HTTPURLResponse)?.statusCode \n                    else {return}\n                guard let body = data \n                    else {return}\n                guard let responseString = String(data: body, encoding: .utf8) \n                    else {return}\n                print(\"POST result: \\(statusCode) \\(responseString)\")\n                \n                // If your API returns JSON you could do the following:\n                // guard let jsonString = try? JSONSerialization.jsonObject(\n                //     with: body, options: []) else {return}\n            }\n            task.resume()\n        }\n        \n        // make PUT request\n        @IBAction func makePutRequestTapped(_ sender: UIButton) {\n            \n            let dictionary = [\"fruit\" : \"watermellon\", \"color\" : \"red and green\"]\n            \n            let idToPut = 0;\n            let urlString = \"\\(host)/\\(idToPut)\"\n            \n            // prepare request\n            guard let url  = URL(string: urlString) else {return}\n            var request = URLRequest(url: url)\n            request.httpMethod = \"PUT\"\n            request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n            guard let json = try? JSONSerialization.data(\n                withJSONObject: dictionary, options: []) \n                else {return}\n            request.httpBody = json\n            \n            let task = URLSession.shared.dataTask(with: request) { \n                (data, response, error) in\n                guard let statusCode = (response as? HTTPURLResponse)?.statusCode \n                    else {return}\n                guard let body = data \n                    else {return}\n                guard let responseString = String(data: body, encoding: .utf8) \n                    else {return}\n                print(\"PUT result: \\(statusCode) \\(responseString)\")\n            }\n            task.resume()\n        }\n        \n        // make PATCH request\n        @IBAction func makePatchRequestTapped(_ sender: UIButton) {\n            \n            let dictionary = [\"color\" : \"green\"]\n            \n            let idToPatch = 0;\n            let urlString = \"\\(host)/\\(idToPatch)\"\n            \n            // prepare request\n            guard let url  = URL(string: urlString) else {return}\n            var request = URLRequest(url: url)\n            request.httpMethod = \"PATCH\"\n            request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n            guard let json = try? JSONSerialization.data(\n                withJSONObject: dictionary, options: []) \n                else {return}\n            request.httpBody = json\n            \n            let task = URLSession.shared.dataTask(with: request) { \n                (data, response, error) in\n                guard let statusCode = (response as? HTTPURLResponse)?.statusCode \n                    else {return}\n                guard let body = data \n                    else {return}\n                guard let responseString = String(data: body, encoding: .utf8) \n                    else {return}\n                print(\"PATCH result: \\(statusCode) \\(responseString)\")\n            }\n            task.resume()\n        }\n        \n        // make DELETE request\n        @IBAction func makeDeleteRequestTapped(_ sender: UIButton) {\n            \n            let idToDelete = 0;\n            let urlString = \"\\(host)/\\(idToDelete)\"\n            \n            // prepare request\n            guard let url  = URL(string: urlString) else {return}\n            var request = URLRequest(url: url)\n            request.httpMethod = \"DELETE\"\n            \n            let task = URLSession.shared.dataTask(with: request) { \n                (data, response, error) in\n                guard let statusCode = (response as? HTTPURLResponse)?.statusCode \n                    else {return}\n                guard let body = data \n                    else {return}\n                guard let responseString = String(data: body, encoding: .utf8) \n                    else {return}\n                print(\"DELETE result: \\(statusCode) \\(responseString)\")\n            }\n            task.resume()\n        }\n    }\n```\n\nAs you can see, iOS uses [URLSession](https://developer.apple.com/documentation/foundation/urlsession) to make HTTP requests as URLRequest. It will return a URLResponse from the server. We used JSONSerialization to convert the JSON strings to and from Swift Dictionary objects.\n\nWith the server that you made in part two running, test the app in the iOS simulator. Note the log statements that get printed in Xcode after server responses:\n\n```\n    GET result: 200 [{\"fruit\":\"apple\",\"color\":\"red\"},{\"fruit\":\"banana\",\"color\":\"yellow\"}]\n    GET result: 200 {\"fruit\":\"apple\",\"color\":\"red\"}\n    POST result: 200 Item added with id 2\n    PUT result: 200 Item replaced at id 0\n    PATCH result: 200 Item updated at id 0\n    DELETE result: 200 Item deleted\n```\n\nSee also:\n\n\n- [Uploading Data to a Website](https://developer.apple.com/documentation/foundation/url_loading_system/uploading_data_to_a_website)\n\n\n## Flutter client app\n\nGood job if you chose Flutter. You write the code once and it works for both Android and iOS. Having already made the client app for Android and iOS, I can tell you that Flutter cuts your time in half.\n\nWe will have the following layout:\n\n![backend-mobile-3-4](//images.ctfassets.net/1es3ne0caaid/xS3JZNgXyGBI4JOqxwO3d/622c3222d99ffdd12ff59d0844c40a47/backend-mobile-3-4.png)\n\nAdd the `http` dependency to your `pubspec.yaml` file.\n\n```yaml\n    dependencies:\n      http: ^0.12.0+1\n```\n\nReplace `main.dart` with the following code:\n\n```dart\n    import 'dart:io';\n    import 'package:flutter/material.dart';\n    import 'package:http/http.dart';\n    \n    void main() =\u003e runApp(MyApp());\n    \n    class MyApp extends StatelessWidget {\n      @override\n      Widget build(BuildContext context) {\n        return MaterialApp(\n          debugShowCheckedModeBanner: false,\n          home: Scaffold(\n            appBar: AppBar(title: Text('Client App (Flutter)')),\n            body: BodyWidget(),\n          ),\n        );\n      }\n    }\n    \n    class BodyWidget extends StatelessWidget {\n      @override\n      Widget build(BuildContext context) {\n        return Align(\n          alignment: Alignment.topCenter,\n          child: Padding(\n            padding: const EdgeInsets.only(top: 32.0),\n            child: SizedBox(\n              width: 200,\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.stretch,\n                children: \u003cWidget\u003e[\n                  RaisedButton(\n                    child: Text('Make GET (all) request'),\n                    onPressed: () {\n                      _makeGetAllRequest();\n                    },\n                  ),\n                  RaisedButton(\n                    child: Text('Make GET (one) request'),\n                    onPressed: () {\n                      _makeGetOneRequest();\n                    },\n                  ),\n                  RaisedButton(\n                    child: Text('Make POST request'),\n                    onPressed: () {\n                      _makePostRequest();\n                    },\n                  ),\n                  RaisedButton(\n                    child: Text('Make PUT request'),\n                    onPressed: () {\n                      _makePutRequest();\n                    },\n                  ),\n                  RaisedButton(\n                    child: Text('Make PATCH request'),\n                    onPressed: () {\n                      _makePatchRequest();\n                    },\n                  ),\n                  RaisedButton(\n                    child: Text('Make DELETE request'),\n                    onPressed: () {\n                      _makeDeleteRequest();\n                    },\n                  ),\n                ],\n              ),\n            ),\n          ),\n        );\n      }\n    \n      static const Map\u003cString, String\u003e headers = {\"Content-type\": \"application/json\"};\n    \n      // access localhost from the emulator/simulator\n      String _hostname() {\n        if (Platform.isAndroid)\n          return 'http://10.0.2.2:3000';\n        else\n          return 'http://localhost:3000';\n      }\n    \n      // GET all\n      _makeGetAllRequest() async {\n        // get everything\n        Response response = await get(_hostname());\n        // examples of info available in response\n        int statusCode = response.statusCode;\n        String jsonString = response.body;\n        print('Status: $statusCode, $jsonString');\n      }\n    \n      // GET one\n      _makeGetOneRequest() async {\n        // only get a single item at index 0\n        int idToGet = 0;\n        String url = '${_hostname()}/$idToGet';\n        Response response = await get(url);\n        int statusCode = response.statusCode;\n        String jsonString = response.body;\n        print('Status: $statusCode, $jsonString');\n      }\n    \n      // POST\n      _makePostRequest() async {\n        // set up POST request arguments\n        String json = '{\"fruit\": \"pear\", \"color\": \"green\"}';\n        // make POST request\n        Response response = await post(_hostname(), headers: headers, body: json);\n        int statusCode = response.statusCode;\n        String body = response.body;\n        print('Status: $statusCode, $body');\n      }\n    \n      // PUT\n      _makePutRequest() async {\n        // set up PUT request arguments\n        int idToReplace = 0;\n        String url = '${_hostname()}/$idToReplace';\n        String json = '{\"fruit\": \"watermellon\", \"color\": \"red and green\"}';\n        // make PUT request\n        Response response = await put(url, headers: headers, body: json);\n        int statusCode = response.statusCode;\n        String body = response.body;\n        print('Status: $statusCode, $body');\n      }\n    \n      // PATCH\n      _makePatchRequest() async {\n        // set up PATCH request arguments\n        int idToUpdate = 0;\n        String url = '${_hostname()}/$idToUpdate';\n        String json = '{\"color\": \"green\"}';\n        // make PATCH request\n        Response response = await patch(url, headers: headers, body: json);\n        int statusCode = response.statusCode;\n        String body = response.body;\n        print('Status: $statusCode, $body');\n      }\n    \n      // DELETE\n      void _makeDeleteRequest() async {\n        // set up DELETE request argument\n        int idToDelete = 0;\n        String url = '${_hostname()}/$idToDelete';\n        // make DELETE request\n        Response response = await delete(url);\n        int statusCode = response.statusCode;\n        String body = response.body;\n        print('Status: $statusCode, $body');\n      }\n    }\n    \n    // For help converting JSON to objects in Flutter see\n    // this post https://stackoverflow.com/a/54657953\n    class Fruit {\n    \n      int id;\n      String fruit;\n      String color;\n    \n      Fruit(this.fruit, this.color);\n    \n      // named constructor\n      Fruit.fromJson(Map\u003cString, dynamic\u003e json)\n          : fruit = json['fruit'],\n            color = json['color'];\n    \n      // method\n      Map\u003cString, dynamic\u003e toJson() {\n        return {\n          'fruit': fruit,\n          'color': color,\n        };\n      }\n    }\n```\n\nWe used the `http` package to make the requests. We get back a Response object from which we can get the status code and body. Although we didn’t use it here, I added a model object at the end that included the code to convert JSON strings to and from Map objects.\n\nWith the server that you made in part two running, test the Flutter app in the Android emulator or iOS simulator. Note the log statement that Android Studio prints in the Run tab:\n\n```\n    GET result: 200 [{\"fruit\":\"apple\",\"color\":\"red\"},{\"fruit\":\"banana\",\"color\":\"yellow\"}]\n    GET result: 200 {\"fruit\":\"apple\",\"color\":\"red\"}\n    POST result: 200 Item added with id 2\n    PUT result: 200 Item replaced at id 0\n    PATCH result: 200 Item updated at id 0\n    DELETE result: 200 Item deleted at id 0\n```\n\n## Conclusion\n\nWe’ve covered a lot in this series. It’s my hope that this will be a solid start to your backend development work. Starting out on a new technology is the most difficult step. It will get easier from here. \n\nThe essential files for each of the server and client examples in this series are on [GitHub](https://github.com/suragch/backend_demo).\n\n\n## Going on\n\nYou already have a working server. However, the following topics are some things you will want to work on before your server is ready for production.\n\n### Database\n\nIn the server examples in part two, we used an array as a mock database. Later, of course, you’ll want to add a real database. The “further study” links I included at the end of both server sections tell how to do that. \n\n### HTTPS\n\nModern versions of Android and iOS require secure encrypted connections by default when accessing the internet. We bypassed that security when we made the client apps in above so that we wouldn’t have to bother registering with a [certificate authority](https://en.wikipedia.org/wiki/Certificate_authority). \n\nDon’t bypass it in your production apps, though! It’s not a lot more work to set it up on the server and you can get a free certificate from [Let’s Encrypt](https://letsencrypt.org/). (I wouldn’t recommend using a self-signed certificate.)\n\n### Authentication, validation, and testing\n\nIf you put your server online now, anyone in the world could mess your database up. It’s probably fine to leave your `GET` methods open to the world as long as there is no sensitive data, but you will surely want to add some sort of [authentication](https://nordicapis.com/3-common-methods-api-authentication-explained/) for who is allowed to `POST`, `PUT`, `PATCH`, and `DELETE`. And even when users are authenticated, never trust what they send you. Validate any data you receive.\n\n[Node.js](https://hackernoon.com/a-crash-course-on-testing-with-node-js-6c7428d3da02) and [Server Side Dart](http://dartdoc.takyam.com/articles/dart-unit-tests/) both support unit testing. You really need to write tests. The good news with backend programming is that you don’t have the UI to deal with.\n\n### Publishing\n\nWhen you are ready to deploy the server, you might consider getting a VPS running Linux. This is convenient because getting the server up and running is essentially the same as doing it on your local machine.\n\nI've found quite a few VPSs on [LowEndBox](https://lowendbox.com/) for under $20 USD per year. They’re great for learning and even for small production apps. (Every now and then a company goes out of business, though, so keep backups) \n\nIn the future when reliability and scalability become more important, you can consider deploying to one of the big-name cloud hosting providers.\n\nIt is also recommended to put a reverse proxy between your server app and the internet. Nginx works well for this. See the following links for help:\n\n\n- [Use NGINX as a Reverse Proxy](https://www.linode.com/docs/web-servers/nginx/use-nginx-reverse-proxy/)\n- [5 Performance Tips for Node.js Applications](https://www.nginx.com/blog/5-performance-tips-for-node-js-applications/)","metaTitle":"Becoming a backend developer - Part 3","metaDescription":"This is a guide for mobile app developers. In this three-part series we will cover all the basics of what it takes to become a backend developer. You will create backends using Node and Dart, with mobile frontend examples using Android, Swift and Flutter. In part three, build the frontend."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3K4M08vitNFw90L1Urqnuj","type":"Entry","createdAt":"2019-03-22T18:25:24.515Z","updatedAt":"2019-03-22T18:25:24.515Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Becoming a backend developer - Part 2: Building the server","url":"backend-developer-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"58WBWjhcWcuAMI6qIAyiC4","type":"Entry","createdAt":"2018-12-13T20:46:00.073Z","updatedAt":"2018-12-13T20:46:36.867Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Suragch","url":"suragch","email":"studymongolian@gmail.com","twitter":"https://twitter.com/suragch","github":"https://github.com/suragch","guestWriter":true}}],"projectRepo":"https://github.com/suragch/backend_demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1st5ugwNDbvlnFFHBadh5b","type":"Entry","createdAt":"2019-03-13T18:08:14.919Z","updatedAt":"2019-03-13T18:08:14.920Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Dart","url":"dart","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2019-03-22","description":"In this three-part series, we will cover all the basics of what it takes for a mobile app developer to become a backend developer. You will create backends using Node and Dart, with mobile frontend examples using Android, Swift, and Flutter.","prerequisite":"You need experience in at least one of Android, iOS or Flutter development.","content":"This is a guide for mobile app developers. In this three-part series we are covering all the basics of what it takes to become a backend developer.\n\n\n- [Part 1: Foundational concepts](https://pusher.com/tutorials/backend-developer-part-1)\n- Part 2: Building the server \n- Part 3: Connecting to the server from a mobile app\n\n\n## Introduction\n\nIn the [first tutorial](https://pusher.com/tutorials/backend-developer-part-1) we went over background knowledge related to client-server communication. This included URIs, HTTP, REST APIs, and JSON. If any of these topics are unfamiliar to you, go back and review them. \n\nNow, let’s build a server! \n\n## Prerequisites\n\nI'm not assuming you have any backend server experience, but I won't be repeating online documentation, so you will need to be able to following the installation directions from the links I give you. \n\nI will be using [Visual Studio Code](https://code.visualstudio.com/) to do the server programming. Feel free to use another IDE if you prefer.\n\n\n## Building the backend\n\nFor development purposes, we are going to install the server software on our local machine and have it communicate directly with our mobile app running in an emulator. \n\nBelow are two examples of a backend server: Node.js and Server-Side Dart. You only need to choose one. [Node.js](https://nodejs.org/) is very [popular](https://insights.stackoverflow.com/trends?tags=node.js) and you write the server code in JavaScript. [Server Side Dart](https://www.dartlang.org/server) is not nearly as popular as Node.js, but for Flutter developers the advantage is that you can use the same language for the frontend and the backend. It really doesn't matter which one you choose, but if you can't decide, go with Node.js.\n\n\n## Backend example one: Node.js\n\n\n\u003e **Note:** This tutorial was tested with Node.js 10.15.1\n\n### Install Node.js\n\nGo to [nodejs.org](https://nodejs.org) to download and install Node.js. \n\nThe [Getting Started Guide](https://nodejs.org/en/docs/guides/getting-started-guide/) shows the code for a basic HTTP server. It doesn’t explain the code, though, so I have added comments below:\n\n```javascript\n    // The require() function loads modules in Node.js. \n    // A module is code that is in another file.\n    // 'http' is a builtin module in Node.js. It allows data transfer\n    // using the HTTP protocol and enables setting up an HTTP server.\n    const http = require('http');\n    \n    // During development we will use the localhost.\n    const hostname = '127.0.0.1';\n    const port = 3000;\n    \n    // set up an http server\n    // Two parameters are passed in:\n    //     req = request (from the client)\n    //     res = response (from the server)\n    const server = http.createServer((req, res) =\u003e {\n    \n      // A status code of 200 means OK (A 404 would mean Not Found)\n      res.statusCode = 200;\n    \n      // A header adds additional information. \n      // Here we are using a name-value pair to set the\n      // media type (MIME type) as plain text (as opposed to html).\n      res.setHeader('Content-Type', 'text/plain');\n    \n      // This writes a message and then ends the response.\n      res.end('Hello World\\n');\n    });\n    \n    // This causes the server to listen for requests from clients on \n    // the hostname and port that we defined above.\n    server.listen(port, hostname, () =\u003e {\n      console.log(`Server running at http://${hostname}:${port}/`);\n    });\n```\n\nGo ahead and test the code by running the app as described in the Getting Started Guide. You should see “Hello World” in the browser window when you navigate to http://localhost:3000.\n\n### Implement our API\n\nIn Part 1 [ADD LINK] I told you the REST API that we were going to make would look like this:\n\n```\n    GET http://localhost:3000/              // get all items\n    GET http://localhost:3000/id            // get item at id\n    POST http://localhost:3000/             // create new item\n    PUT http://localhost:3000/id            // replace item at id\n    PATCH http://localhost:3000/id          // update item at id\n    DELETE http://localhost:3000/id         // delete item at id\n```\n\nOur client app that we will make in Part 3 is going to look like this:\n\n![backend-mobile-2-1](//images.ctfassets.net/1es3ne0caaid/7MvuGc4TMFanlAXX9KNXX7/a80f94db1eb63c5146ad64dc2daefd89/backend-mobile-2-1.png)\n\nSo we need to make our server handle all of these requests. First go to the terminal and create a new directory for our Node.js project.\n\n```\n    mkdir nodejs_server\n    cd nodejs_server\n```\n\nThe way to create a new project is to use the Node Package Manager (npm). Run the following command and accept the default values for everything. (If you need to edit this info later you can open `package.json`.)\n\n```\n    npm init\n```\n\nWe are also going to use the [Express](https://expressjs.com/) framework, which simplifies a lot of the HTTP protocol handling.\n\n```\n    npm install express --save\n```\n\nNow create the server file that we named in the `npm init` step above:\n\n```\n    touch index.js\n```\n\nOpen it in an editor (I'm using [VSCode](https://code.visualstudio.com/)), and paste in the following:\n\n```javascript\n    // nodejs_server/index.js\n    \n    var express = require('express');\n    var bodyParser = require('body-parser');\n    var app = express();\n    \n    // bodyParser is a type of middleware\n    // It helps convert JSON strings\n    // the 'use' method assigns a middleware\n    app.use(bodyParser.json({ type: 'application/json' }));\n    \n    const hostname = '127.0.0.1';\n    const port = 3000;\n    \n    // http status codes\n    const statusOK = 200;\n    const statusNotFound = 404;\n    \n    // using an array to simulate a database for demonstration purposes\n    var mockDatabase = [\n        {\n            fruit: \"apple\",\n            color: \"red\"\n        },\n        {\n            fruit: \"banana\",\n            color: \"yellow\"\n        }\n    ]\n    \n    // Handle GET (all) request\n    app.get('/', function(req, res) {\n        // error checking\n        if (mockDatabase.length \u003c 1) {\n            res.statusCode = statusNotFound;\n            res.send('Item not found');\n            return;\n        }\n        // send response\n        res.statusCode = statusOK;\n        res.send(mockDatabase);\n    });\n    \n    // Handle GET (one) request\n    app.get('/:id', function(req, res) {\n        // error checking\n        var id = req.params.id;\n        if (id \u003c 0 || id \u003e= mockDatabase.length) {\n            res.statusCode = statusNotFound;\n            res.send('Item not found');\n            return;\n        }\n        // send response\n        res.statusCode = statusOK;\n        res.send(mockDatabase[id]);\n    });\n    \n    // Handle POST request\n    app.post('/', function(req, res) {\n        // get data from request\n        var newObject = req.body; // TODO validate data\n        mockDatabase.push(newObject);\n        // send created item back with id included\n        var id = mockDatabase.length - 1;\n        res.statusCode = statusOK;\n        res.send(`Item added with id ${id}`);\n    });\n    \n    // Handle PUT request\n    app.put('/:id', function(req, res) {\n        // replace current object\n        var id = req.params.id;     // TODO validate id\n        var replacement = req.body; // TODO validate data\n        mockDatabase[id] = replacement;\n        // report back to the client\n        res.statusCode = statusOK;\n        res.send(`Item replaced at id ${id}`);\n    });\n    \n    // Handle PATCH request \n    app.patch('/:id', function(req, res) {\n        // update current object\n        var id = req.params.id;        // TODO validate id\n        var newColor = req.body.color; // TODO validate data\n        mockDatabase[id].color = newColor;\n        // report back to the client\n        res.statusCode = statusOK;\n        res.send(`Item updated at id ${id}`);\n    });\n    \n    // Handle DELETE request \n    app.delete('/:id', function(req, res) {\n        // delete specified item\n        var id = req.params.id;  // TODO validate id\n        mockDatabase.splice(id, 1);\n        // send response back\n        res.statusCode = statusOK;\n        res.send(`Item deleted at id ${id}`);\n    });\n    \n    app.listen(port, hostname, function () {\n        console.log(`Listening at http://${hostname}:${port}/...`);\n    });\n```\n\nSave the file and run it in the terminal.\n\n```\n    node index.js\n```\n\nThe server is now running on your machine. You can use [Postman](https://www.getpostman.com/) (see [docs](https://learning.getpostman.com/getting-started/) and [tutorial](https://www.youtube.com/watch?v=t5n07Ybz7yI)) to test the server now, or you can use one of the client apps that we will make in part three. \n\n![backend-mobile-2-2](//images.ctfassets.net/1es3ne0caaid/4gkCYUOTv1gGOai0cnnMlc/ce7cd897542def20af71963b0daf9116/backend-mobile-2-2.gif)\n\n### Further study\n\n\n- [NodeJS REST API](https://www.youtube.com/watch?v=F7NVpxxmmgM\u0026list=PL0dzCUj1L5JE4w_OctDGyZOhML6OtJSqR) \n- [Building a RESTful API with Node.js](https://www.youtube.com/watch?v=0oXYLzuucwE\u0026index=1\u0026list=PL55RiY5tL51q4D-B63KBnygU6opNPFk_q) \n- [Node.js Crash Course](https://www.youtube.com/watch?v=fBNz5xF-Kx4) \n- [Building a Node.js REST API with Express](https://medium.com/@jeffandersen/building-a-node-js-rest-api-with-express-46b0901f29b6) \n\n\n## Backend example two: Server Side Dart\n\n\n\u003e **Note:** This tutorial was tested with Dart 2.1.2\n\n### Install Dart\n\nIf you have Flutter installed on your system, then Dart is already installed. But if not, then go to [this link](https://www.dartlang.org/tools/sdk) to download and install the Dart SDK. \n\nCheck if `dart/bin` is in your system path:\n\n```\n    # Linux or Mac\n    echo $PATH\n    \n    # Windows Command Prompt\n    echo %path%\n    \n    # Windows Powershell\n    $env:Path -split ';'\n```\n\nIf it isn't and you just installed it from the link above (because you don't have Flutter), you can add it to your path like this:\n\n```\n    # Linux or Mac\n    export PATH=\"$PATH:/usr/lib/dart/bin\"\n```\n\nOn Windows it is easiest to use the GUI to set environment variables.\n\nIf you already had Flutter/Dart installed, find your Flutter SDK directory. Then you can add the path like this (replacing `\u003cflutter\u003e`):\n\n```\n    export PATH=\"$PATH:\u003cflutter\u003e/bin/cache/dart-sdk/bin\"\n```\n\nThis only updates the path until you restart your machine. You will probably want to update your `.bash_profile` (or whatever you use on your system) to make it permanent.\n\n### Install Aqueduct\n\nWe are also going to use the [Aqueduct](https://aqueduct.io/) framework to make HTTP request APIs easier to build. Now that we have Dart installed, we can install Aqueduct like this:\n\n```\n    pub global activate aqueduct\n```\n\nFollow the directions to add the `$HOME/.pub-cache/bin` to your path if you are instructed to.\n\n### Implement our API\n\nIn [part one](https://pusher.com/tutorials/backend-developer-part-1) I told you the REST API that we were going to make would look like this:\n\n```\n    GET http://localhost:3000/              // get all items\n    GET http://localhost:3000/id            // get item at id\n    POST http://localhost:3000/             // create new item\n    PUT http://localhost:3000/id            // replace item at id\n    PATCH http://localhost:3000/id          // update item at id\n    DELETE http://localhost:3000/id         // delete item at id\n```\n\nOur client app that we will make in part three is going to look like this:\n\n![backend-mobile-2-1](//images.ctfassets.net/1es3ne0caaid/7MvuGc4TMFanlAXX9KNXX7/a80f94db1eb63c5146ad64dc2daefd89/backend-mobile-2-1.png)\n\nSo we need to make our server handle all of these requests.\n\nFirst go to the terminal and cd to the directory that you want to create the server project folder in. Then type:\n\n```\n    aqueduct create dart_server\n```\n\nOpen the project in an editor. The [Aqueduct documentation](https://aqueduct.io/docs/) recommends [IntelliJ IDEA](https://www.jetbrains.com/idea/), but I am using [Visual Studio Code](https://code.visualstudio.com/) with the [Dart plugin](https://dartcode.org/).\n\nOpen the `lib/channel.dart` file and replace it with the following code:\n\n```dart\n    // dart_server/lib/channel.dart\n    \n    import 'package:dart_server/controller.dart';\n    import 'dart_server.dart';\n    \n    // This class sets up the controller that will handle our HTTP requests\n    class DartServerChannel extends ApplicationChannel {\n    \n      @override\n      Future prepare() async {\n        // auto generated code\n        logger.onRecord.listen((rec) =\u003e print(\"$rec ${rec.error ?? \"\"} ${rec.stackTrace ?? \"\"}\"));\n      }\n    \n      @override\n      Controller get entryPoint {\n        final router = Router();\n    \n        // We are only setting up one route. \n        // We could add more below if we had them.\n        // A route refers to the path portion of the URL.\n        router\n          .route('/[:id]') // the root path with an optional id variable\n          .link(() =\u003e MyController()); // requests are forwarded to our controller\n        return router;\n      }\n    }\n```\n\nIn the comments I talked about a controller. Let's make that now. Create a file called `controller.dart` in the `lib/` directory. Paste in the code below to handle HTTP requests:\n\n```dart\n    // dart_server/lib/controller.dart\n    \n    import 'dart:async';\n    import 'dart:io';\n    import 'package:aqueduct/aqueduct.dart';\n    \n    // using a list to simulate a database for demonstration purposes\n    List\u003cMap\u003cString, dynamic\u003e\u003e mockDatabase = [\n        {\n            'fruit': 'apple',\n            'color': 'red'\n        },\n        {\n            'fruit': 'banana',\n            'color': 'yellow'\n        }\n    ];\n    \n    class MyController extends ResourceController {\n    \n      // Handle GET (all) request\n      @Operation.get()\n      Future\u003cResponse\u003e getAllFruit() async {\n        // return the whole list\n        return Response.ok(mockDatabase);\n      }\n    \n      // Handle GET (one) request\n      @Operation.get('id')\n      Future\u003cResponse\u003e getFruitByID(@Bind.path('id') int id) async {\n        // error checking\n        if (id \u003c 0 || id \u003e= mockDatabase.length){\n          return Response.notFound(body: 'Item not found');\n        }\n        // return json for item at id\n        return Response.ok(mockDatabase[id]);\n      }\n    \n      // Handle POST request\n      @Operation.post()\n      Future\u003cResponse\u003e addFruit() async {\n        // get json from request\n        final Map\u003cString, dynamic\u003e item = await request.body.decode(); // TODO validate\n        // create item (TODO return error status code if there was a problem)\n        mockDatabase.add(item);\n        // report back to client\n        final int id = mockDatabase.length - 1;\n        return Response.ok('Item added with id $id');\n      }\n    \n      // Handle PUT request\n      @Operation.put('id')\n      Future\u003cResponse\u003e putContent(@Bind.path('id') int id) async {\n        // error checking\n        if (id \u003c 0 || id \u003e= mockDatabase.length){\n          return Response.notFound(body: 'Item not found');\n        }\n        // get the updated item from the client\n        final Map\u003cString, dynamic\u003e item = await request.body.decode(); // TODO validate\n        // make the update\n        mockDatabase[id] = item;\n        // report back to the client\n        return Response.ok('Item replaced at id $id');\n      }\n    \n      // Handle PATCH request \n      // (PATCH does not have its own @Operation method so \n      // the constructor parameter is used.)\n      @Operation('PATCH', 'id')\n      Future\u003cResponse\u003e patchContent(@Bind.path('id') int id) async {\n        // error checking\n        if (id \u003c 0 || id \u003e= mockDatabase.length){\n          return Response.notFound(body: 'Item not found');\n        }\n        // get the updated item from the client\n        final Map\u003cString, dynamic\u003e item = await request.body.decode(); // TODO validate\n        // make the partial update\n        mockDatabase\\[id\\]['color'] = item['color'];\n        // report back to the client\n        return Response.ok('Item updated at id $id');\n      }\n    \n      // Handle DELETE request \n      @Operation.delete('id')\n      Future\u003cResponse\u003e deleteContent(@Bind.path('id') int id) async {\n        // error checking\n        if (id \u003c 0 || id \u003e= mockDatabase.length){\n          return Response.notFound(body: 'Item not found');\n        }\n        // do the delete\n        mockDatabase.removeAt(id);\n        // report back to the client\n        return Response.ok('Item deleted at id $id');\n      }\n    }\n```\n\nSave your changes.\n\n### Testing the server\n\nMake sure you are inside the root of your project folder:\n\n```\n    cd dart_server\n```\n\nNormally you would start the server in the terminal like this:\n\n```\n    aqueduct serve\n```\n\nHowever, Aqueduct defaults to listening on port 8888. In all of the client apps and Node.js we are using port 3000, so let’s do that here, too. I'm also limiting the number of server instances (aka isolates) to one. This is only because we are using a mock database. For your production server with a real database, you can let the server choose the number of isolates to run. So start the server like this:\n\n```\n    aqueduct serve --port 3000 --isolates 1\n```\n\nThe server is now running on your machine. You can use [Postman](https://www.getpostman.com/) (see [docs](https://learning.getpostman.com/getting-started/) and [tutorial](https://www.youtube.com/watch?v=t5n07Ybz7yI)) to test the server now, or you can use one of the client apps that we will make in part three.\n\n![backend-mobile-2-3](//images.ctfassets.net/1es3ne0caaid/6OyYdQ0ng1ea5noxxMedcy/eb43f52374be3179130f22b48797b11a/backend-mobile-2-3.gif)\n\n### Supplemental code\n\nThe following is a model class that includes code to do JSON conversions. I’m including it here for your reference, but you don’t need to do anything with it today. For more help converting JSON to objects in Dart see [this post](https://stackoverflow.com/a/54657953).\n\n```dart\n    class Fruit {\n    \n      Fruit(this.fruit, this.color);\n    \n      // named constructor\n      Fruit.fromJson(Map\u003cString, dynamic\u003e json)\n          : fruit = json['fruit'] as String,\n            color = json['color'] as String;\n    \n      int id;\n      String fruit;\n      String color;\n    \n      // method\n      Map\u003cString, dynamic\u003e toJson() {\n        return {\n          'fruit': fruit,\n          'color': color,\n        };\n      }\n    }\n```\n\n### Further study\n\n\n- [Build RESTful Web APIs with Dart, Aqueduct and PostgreSQL #2: Routing and Controllers](https://youtu.be/K4EqGjMjCY0)\n- [Dart: First API And Create Controller | 1/7 | Aqueduct | Backend Course](https://youtu.be/XCOYxjoJDb8)\n\n\n## Conclusion\n\nIn this tutorial, we saw two ways to create a backend server. Although the details were somewhat different, the REST API that we implemented was exactly the same. If you don’t like Node.js or Server Side Dart, there are many more to choose from. (I was playing around with [Server Side Swift](https://stackoverflow.com/questions/47958172/server-side-swift-basic-client-server-communication-example-for-ios-and-android) for a while before I decided to pursue Flutter for the frontend.) Whatever server technology you choose, just implement the REST API that we used here.\n\nYou can find the server code for this lesson on [GitHub](https://github.com/suragch/backend_demo).\n\nIn the [last part](https://pusher.com/tutorials/backend-developer-part-3) of this tutorial we will learn how to make Android, iOS, and Flutter client apps that are able to communicate with the servers that we made in this lesson.","metaTitle":"Becoming a backend developer - Part 2: Building the server","metaDescription":"This is a guide for mobile app developers. In this three-part series we will cover all the basics of what it takes to become a backend developer. Create backends using Node and Dart, with mobile frontend examples using Android, Swift and Flutter. In part two, build backends with Node and Dart."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"QRNM2nbB5h8g4zlBUYGaR","type":"Entry","createdAt":"2019-03-19T17:36:04.012Z","updatedAt":"2020-06-15T16:02:14.641Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Becoming a backend developer - Part 1: Foundational concepts","url":"backend-developer-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"58WBWjhcWcuAMI6qIAyiC4","type":"Entry","createdAt":"2018-12-13T20:46:00.073Z","updatedAt":"2018-12-13T20:46:36.867Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Suragch","url":"suragch","email":"studymongolian@gmail.com","twitter":"https://twitter.com/suragch","github":"https://github.com/suragch","guestWriter":true}}],"projectRepo":"https://github.com/suragch/backend_demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1st5ugwNDbvlnFFHBadh5b","type":"Entry","createdAt":"2019-03-13T18:08:14.919Z","updatedAt":"2019-03-13T18:08:14.920Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Dart","url":"dart","type":"language"}}],"reviewDate":"2019-03-19","description":"This is a tutorial series for mobile app developers. In this three-part series, we will cover all the basics of what it takes to become a backend developer. You will create backends using Node and Dart, with mobile frontend examples using Android, Swift and Flutter. In part one, cover key concepts around APIs.","prerequisite":"You need experience in at least one of Android, iOS or Flutter development.","content":"This is a guide for mobile app developers. In this three-part series we will cover all the basics of what it takes to become a backend developer.\n\n\n- Part 1: Foundational concepts\n- Part 2: Building the server\n- Part 3: Connecting to the server from a mobile app\n\n\n## Introduction\n\nSo you have some experience developing mobile apps for Android or iOS. You may even have a few apps on Google Play or in the App Store. More and more, though, you are getting ideas for new apps that would require a server backend. The problem is that you don't know how to do server programming. Maybe you work for a small company or maybe you’re on your own, and you don't have the resources to hire a backend developer. Now you've decided that it's finally time to take the leap and learn how to do it yourself. If that's you, then you've come to the right place.\n\nIn this series I will take you through everything you need to know to get started building a backend server and connecting it to your mobile apps. There are a myriad of choices of platforms and frameworks for both the backend and frontend. I will show you how to build two backend servers (Node.js and Server-Side Dart) and three frontend apps (Android, iOS, and Flutter). Choose one backend server and one frontend app to follow along with. \n\nThe purpose of telling you how to do the same thing on different platforms is so that you can see that the process is basically the same no matter what you choose. Even if you decide on a different technology, you can still follow along and just Google how to adapt it to your particular situation.\n\nNo matter what platforms you choose for your backend and frontend, there are a few foundational topics related to client-server communication that are important to know. They include URIs, HTTP, REST APIs, and JSON. If you are already familiar with these topics, feel free to skip directly to Part 2: Building the server.\n\n\n## URI\n\nA URI (Uniform Resource Identifier) is an address for a resource. A resource, for example, could be a webpage or a file or a database row. A specific type of URI is a URL. (See [difference between URI, URL, and URN](https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn).) You’re probably familiar with URIs from your mobile app development and certainly familiar with URLs from web browsers, but you might not be aware of their components, especially the query string.\n\n![backend-mobile-1-1](//images.ctfassets.net/1es3ne0caaid/5GMcbCR4mwdfYzuWPd1v8Z/89f52b49dc6a2d01b0d676bafa2b7e6d/backend-mobile-1-1.png)\n\nThe query string starts with a `?` question mark and is followed by parameters. The parameters are separated by `\u0026` ampersands. So in the example above we have two parameters:\n\n\n- `q = flutter`\n- `language = en`\n\nSee [this page](https://doepud.co.uk/blog/anatomy-of-a-url) for more explanation about the parts of a URI. \n\n### URI example\n\nWhen our client app accesses resources on our server, it will use a URI to reference them. Here is an actual example that we will use:\n\n```\n    http://localhost:3000/0\n```\n\nI’ll talk about the `http` protocol part of the URI in the next section. We’ll be using `localhost` (that is, `127.0.0.1`) to refer to our own machine, where the server will be running. This will simplify the development process. Then we will (somewhat arbitrarily) choose port `3000` to communicate over. Our path is simply the root `/`. We could have used something like `/fruit` or `/items`. In fact, a more complex server app would probably define several different paths (also known as routes) that clients could connect to to access different types of resources. In our minimal server, though, we’ll just use one path. The final `0` at the end of the path will be used as a parameter to refer to the ID of a database row. (Actually for us it will refer to the index of an array that is pretending to be a database, but the client doesn’t have to know that.)\n\n## HTTP\n\nHTTP (Hypertext Transfer Protocol) is a set of rules for how to transfer data on the web. You've seen `http://` in web addresses, of course. Now you’re going to use the same protocol to transfer data between your app and the server.\n\n### Verbs\n\nThe primary HTTP verbs that we are going to be using are:\n\n\n- `GET` - for requesting data from the server\n- `POST` - for sending new data to the server\n- `PUT` - for updating data on the server (fully replace an existing resource)\n- `PATCH` - for updating data on the server (partially modify an existing resource)\n- `DELETE` - for deleting data on the server\n\nYou will note that these are very similar to the CRUD operations of a database:\n\n\n- Create -\u003e `POST`\n- Read -\u003e `GET`\n- Update -\u003e `PUT` or `PATCH`\n- Delete -\u003e `DELETE`\n\nThese HTTP verbs are sent by clients to the server. This is known as a **request**. After the server receives a request it processes it and then sends back a **response** to the client. Both the request and the response contain metadata known as **headers**. The primary data itself is sent in the **body**. \n\n### Status codes\n\nOne of the headers is the status code. When a client makes an HTTP request, the server should send back an HTTP status code in its response. This lets the client know if the request was successful or not. You’ve seen the 404 Not Found response whenever you click on a broken link. Here are some more that you should get familiar with:\n\n\n- 1xx Informational\n- 2xx Success\n\n      - 200 OK\n      - 201 Created\n\n- 3xx Redirection\n\n      - 301 Moved Permanently\n\n- 4xx Client Error\n\n      - 400 Bad Request\n      - 401 Unauthorized\n      - 403 Forbidden\n      - 404 Not Found\n\n- 5xx Server Error \n\n      - 500 Internal Server Error\n      - 502 Bad Gateway\n\nIt’s your responsibility as a backend developer to choose the right code to add in your response to a client request. You can read more about HTTP status codes [here](https://www.restapitutorial.com/httpstatuscodes.html) and [here](https://restfulapi.net/http-status-codes/). \n\n### Content type\n\nAnother header is `Content-Type`, which is the Media Type (formerly known as MIME type). This tells us the type of data that is in the body. It could be plain text or HTML or JSON. Here are a few examples as they look encoded:\n\n\n- `application/json`\n- `application/x-www-form-urlencoded`\n- `image/png`\n- `text/plain`\n- `text/html`\n\nHere is a [complete list](https://www.iana.org/assignments/media-types/media-types.xhtml). We will be using JSON ( `application/json` ) primarily. I’ll explain it more in a little while.\n\n### Examples\n\nLet’s look at a few examples of the raw text of some HTTP requests. The following is a GET request:\n\n```\n    GET 3000/0\n    Content-Type: application/json\n    cache-control: no-cache\n    Postman-Token: 00572d5b-a2ec-4195-8436-ef1e797c0751\n    User-Agent: PostmanRuntime/7.6.0\n    Accept: */*\n    Host: localhost:3000\n    accept-encoding: gzip, deflate\n```\n\nNotice that it starts with the HTTP verb and URI path. The rest of the lines here are headers. I used [Postman](https://www.getpostman.com/) to make the request so that I could get the raw text. \n\nThis is the response that the server gave to that GET request:\n\n```\n    HTTP/1.1 200\n    status: 200\n    X-Powered-By: Express\n    Content-Type: application/json; charset=utf-8\n    Content-Length: 31\n    ETag: W/\"1f-xulzIcqO6GqXGwKlplM3A8YgRg8\"\n    Date: Fri, 08 Mar 2019 19:30:16 GMT\n    Connection: keep-alive\n    \n    {\"fruit\":\"apple\",\"color\":\"red\"}\n```\n\nYou can see that the status code is 200. Everything is OK. The content type of the body is JSON. You can find the body at the end, separated from the headers by a single blank line.\n\nHere is a POST request:\n\n```\n    POST 3000\n    Content-Type: application/json\n    cache-control: no-cache\n    Postman-Token: 6b985c28-ef59-4dac-930c-63b3245de3f1\n    User-Agent: PostmanRuntime/7.6.0\n    Accept: */*\n    Host: localhost:3000\n    accept-encoding: gzip, deflate\n    content-length: 46\n    \n    { \"fruit\": \"kiwi\", \"color\": \"purple\" }\n```\n\nAnd here is the response from the server:\n\n```\n    HTTP/1.1 200\n    status: 200\n    X-Powered-By: Express\n    Content-Type: text/html; charset=utf-8\n    Content-Length: 20\n    ETag: W/\"14-gSUAeNN7vCHjCoiKRj0ziSuiiQI\"\n    Date: Fri, 08 Mar 2019 19:34:18 GMT\n    Connection: keep-alive\n    \n    Item added with id 2\n```\n\nYou don’t need to understand the details of all that raw text. The frameworks that we are going to use to interact with the HTTP protocol will hide most of it from us. I just share these examples with you to let you know what is happening under the hood. If you do need to get at the headers, though, you will be able to access them from within the framework.\n\n\n## REST API\n\n### REST\n\nWhen we do our client-server communication, we will be using what is called a REST (or RESTful) API. (REST stands for Representational State Transfer, but I’ve never found it very helpful to know that.) In addition to using the HTTP protocol, REST adds some additional rules for how the client and the server should interact. As a beginner, remember these important REST principles:\n\n\n- The server should not save any state about a client.\n- Only use the HTTP verbs as they are defined. For example, while it is technically possible to create a resource on the server by sending the data through a GET request, REST says we should use a POST request for creating new resources.\n\nThere is a lot more to REST, but you don't need to understand everything right now. Check out [this](https://www.youtube.com/watch?v=Q-BpqyOT3a8) and [this](https://www.youtube.com/watch?v=0oXYLzuucwE\u0026index=1\u0026list=PL55RiY5tL51q4D-B63KBnygU6opNPFk_q) if you are interested.\n\n### API\n\nThe API is the set of methods that we will handle on the server. It’s our own personal protocol for communicating between the client and the server. Once we have our API defined, it doesn't matter what is running on the server or who the clients are. This is a prime example of [clean architecture](https://pusher.com/tutorials/clean-architecture-introduction).\n\n![backend-mobile-1-2](//images.ctfassets.net/1es3ne0caaid/5fFYkzDLBS2G0hqW7s8kII/cac6226ef0211c8b4c10e6234705866e/backend-mobile-1-2.png)\n\n### Our API\n\nThe REST API is defined in terms of HTTP verbs ( `GET`, `POST`, `PUT`, etc.) along with a URI path. This is the API that we will use for our server and clients in the second and third parts of this series:\n\n```\n    GET http://localhost:3000/              // get all items\n    GET http://localhost:3000/id            // get item at id\n    POST http://localhost:3000/             // create new item\n    PUT http://localhost:3000/id            // replace item at id\n    PATCH http://localhost:3000/id          // update item at id\n    DELETE http://localhost:3000/id         // delete item at id\n```\n\n## JSON\n\nWhen communicating with a server we need to pass data back and forth. This becomes more difficult when we want to pass complex objects (that is, most anything besides strings, numbers, and booleans). Since we can't pass an object directly using in the HTTP protocol, we can convert it to a string (also known as serialization), transfer it in the body of an HTTP message, and then convert it from a string back to an object.\n\nA common way to do that is with JavaScript Object Notation (JSON). We’re not limited to JavaScript, though. There are JSON libraries for Java, Kotlin, Swift, Objective-C, Dart, and many other languages.\n\n### Example\n\nJSON formats the data in a class to a list of key-value pairs. Here is what a simple User object would look like when converted to JSON:\n\n```json\n    {\n       \"id\" : 3,\n       \"name\" : \"Mary\",\n    }\n```\n\nNotes:\n\n- The curly braces represent an object.\n- The keys and any string values need double quotes. Other values don’t.\n- JSON encodes objects, arrays, strings, numbers, booleans, and nulls. \n- Objects and arrays can be nested.\n- See the [documentation](https://www.json.org/) for a full explanation.  Here are [a few more examples](https://medium.com/@studymongolian/easy-json-examples-7c70785b4707?source=friends_link\u0026sk=dbca368da83bc2273c9a6073159c8c39).\n\nWhite space does not matter. So this:\n\n```json\n    {\"fruit\":\"apple\",\"color\":\"red\"}\n```\n\nis the same as this:\n\n```json\n    {\n      \"fruit\": \"apple\",\n      \"color\": \"red\"\n    }\n```\n\n### In a model object\n\nWhen you create a model object, it’s convenient to add a constructor and helper method that can serialize and deserialize (encode and decode) between the object and JSON. For example, here is a model object in Dart. The constructor creates an object from a JSON map. And a JSON map can be created from the object using the `toJson()` method. \n\n```dart\n    class Fruit {\n    \n      int id;\n      String fruit;\n      String color;\n    \n      Fruit(this.fruit, this.color);\n    \n      // named constructor\n      Fruit.fromJson(Map\u003cString, dynamic\u003e json)\n          : fruit = json['fruit'],\n            color = json['color'];\n    \n      // method\n      Map\u003cString, dynamic\u003e toJson() {\n        return {\n          'fruit': fruit,\n          'color': color,\n        };\n      }\n    }\n```\n\nAs I said, all of the platforms and languages have libraries for converting between a raw JSON string (which is what you have in the HTTP body) and a Map or Dictionary or whatever key-value data structure is used in your language.\n\n\n## Conclusion\n\nYou now have all of the basic background knowledge you need to start building your backend server. In part two I’ll show you how to make the server, and in part three we’ll make a simple frontend app to connect to the server. These will implement the REST API that we learned about above.\n\nThe code for the servers and for the frontend apps is on [GitHub](https://github.com/suragch/backend_demo).","metaTitle":"Becoming a backend developer - Part 1: Foundational concepts","metaDescription":"This is a guide for mobile app developers. In this three-part series we will cover all the basics of what it takes to become a backend developer. You will create backends using Node and Dart, with mobile frontend examples using Android, Swift and Flutter. In part one, cover key concepts around APIs."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"gb9qjcLfTlNAcEADIy2xl","type":"Entry","createdAt":"2019-03-06T22:09:22.043Z","updatedAt":"2019-03-06T22:09:22.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an onboarding experience for your mobile apps with Flutter - Part 2: Build the carousel","url":"onboarding-flutter-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/flutter_slides/tree/part-two-building-the-dots","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2019-03-06","description":"This two part series guides you through building an onboarding experience for users new to your app. You will create a basic Flutter app, along with the onboarding screens. In part two, turn the onboarding screens into a fully-functional carousel.","prerequisite":"You will need Dart and Flutter set up on your machine.","content":"## Introduction\n\nHi folks! I guess you have been looking for this second part right ? 😏  Well, here we are. This is the second part of the tutorial series. If you are here it means you have completed the first part and already have a beautiful working app. We’re going to give more control to our app users by providing slides’ carousel indicators, and allowing our users to switch to a particular screen by clicking on the corresponding carousel indicator.\n\n## Prerequisites\n\nTo follow along with the tutorial, you should have the following: \n\n- [Visual Studio Code](https://code.visualstudio.com/Download) editor installed on your machine if you haven’t yet. We’ll use it in our tutorial.\n- [Visual Studio Code Flutter plugin](https://flutter.io/docs/get-started/editor?tab=vscode)\n- An emulator or physical device (for app testing/debugging purpose)\n- Having completed the [first part](https://pusher.com/tutorials/onboarding-flutter-part-1) of the tutorial series\n\n\n## Building the carousel indicators\n\nNow this is the code for the dots section. Copy and paste it after the `MyHomePageState` class.\n\n``` dart\n    //..lib/main.dart\n    \n    class Dots extends StatelessWidget {\n      final IndexController controller;\n      final int slideIndex;\n      final int numberOfDots;\n      \n      Dots({this.controller, this.slideIndex, this.numberOfDots});\n      \n      Widget _activeSlide(int index) {\n        return GestureDetector(\n          onTap: () {\n            print('Tapped');\n            // controller.move(index);\n          },\n          child: new Container(\n            child: Padding(\n              padding: EdgeInsets.only(left: 8.0, right: 8.0),\n              child: Container(\n                width: 20.0,\n                height: 20.0,\n                decoration: BoxDecoration(\n                  color: Colors.orangeAccent.withOpacity(.3),\n                  borderRadius: BorderRadius.circular(50.0),\n                ),\n              ),\n            ),\n          ),\n        );\n      }\n      \n      Widget _inactiveSlide(int index) {\n        return GestureDetector(\n          onTap: () {\n            controller.move(index);\n          },\n          child: new Container(\n            child: Padding(\n              padding: EdgeInsets.only(left: 5.0, right: 5.0),\n              child: Container(\n                width: 14.0,\n                height: 14.0,\n                decoration: BoxDecoration(\n                    color: Colors.grey.withOpacity(0.7),\n                    borderRadius: BorderRadius.circular(50.0)),\n              ),\n            ),\n          ),\n        );\n      }\n      \n      List\u003cWidget\u003e _generateDots() {\n        List\u003cWidget\u003e dots = [];\n        for (int i = 0; i \u003c numberOfDots; i++) {\n          dots.add(i == slideIndex ? _activeSlide(i) : _inactiveSlide(i));\n        }\n        return dots;\n      }\n      \n      @override\n      Widget build(BuildContext context) {\n        return Center(\n            child: Row(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: _generateDots(),\n        ));\n      }\n    }\n```    \n    \n\nThe `Dots` class constructor takes an instance of the index controller, the current slide index and the number of carousel indicators to build. We’ll use these variables to control the look and behavior of the carousel indicators.\n\nNext, we have to build indicators for active and inactive slides. So based on the status of the slide the proper icon will be rendered. Therefore we have `_activeSlide` and `_inactiveSlide` widgets. \n\nBasically there are composed of a container widget, which has a border radius as its decoration and a color. Both of these widgets have almost same properties. The sole difference is the opacity of the color.  Also we wrapped them inside a `GestureDetector` widget which should enable us to listen to various types of gestures triggered on it (tap, doubleTap, longPress,tapUp, etc). Each of these gestures have a corresponding listener to react accordingly:\n\n\n``` dart\n    onTap: () {\n            controller.move(index);\n      },\n```          \n\nThe code above tells the slide controller to move the slides to the page corresponding to the indicator tapped/clicked. Thus, we can control our slides by simply clicking on the dots we provided.\n\nAfter this step, we need to generate the indicators. The `_generateDots` function returns a list of indicators based on the `numberOfDots` provided in the constructor inside the loop. If the current iteration number is equal to the current slide index, we add an `_activeWidget` to the list, if not we add an `_inactiveWidget`.\n\nFinally, inside the `build` method we render and return our indicators inside a centered row so they can be aligned horizontally: \n\n``` dart\n    return Center(\n            child: Row(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: _generateDots(),\n        ));\n```\n\nNow, we need to add the indicators to our slides. Just paste the following piece of code into the `transformerPageView` after the last `SizedBox` widget.\n     \n\n``` dart\n    new ParallaxContainer(\n                          position: info.position,\n                          translationFactor: 500.0,\n                          child: Dots(\n                            controller: controller,\n                            slideIndex: _slideIndex,\n                            numberOfDots: images.length,\n                          ),\n                        )\n                        \n```\n\nWith all the parts completed, you should have the following :\n\n\n``` dart    \n    import 'package:flutter/material.dart';\n    import 'package:transformer_page_view/transformer_page_view.dart';\n    \n    void main() =\u003e runApp(MyApp());\n    class MyApp extends StatelessWidget {\n      // This widget is the root of your application.\n      @override\n      Widget build(BuildContext context) {\n        return MaterialApp(\n          debugShowCheckedModeBanner: false,\n          title: 'Flutter Demo',\n          theme: ThemeData(\n            // This is the theme of your application.\n            //\n            // Try running your application with \"flutter run\". You'll see the\n            // application has a blue toolbar. Then, without quitting the app, try\n            // changing the primarySwatch below to Colors.green and then invoke\n            // \"hot reload\" (press \"r\" in the console where you ran \"flutter run\",\n            // or simply save your changes to \"hot reload\" in a Flutter IDE).\n            // Notice that the counter didn't reset back to zero; the application\n            // is not restarted.\n            primarySwatch: Colors.blue,\n          ),\n          home: MyHomePage(title: 'Flutter Demo Home Page'),\n        );\n      }\n    }\n    class MyHomePage extends StatefulWidget {\n      final String title;\n      MyHomePage({this.title});\n      @override\n      MyHomePageState createState() {\n        return new MyHomePageState();\n      }\n    }\n    \n    class MyHomePageState extends State\u003cMyHomePage\u003e {\n      int _slideIndex = 0;\n      final GlobalKey\u003cScaffoldState\u003e _key = new GlobalKey\u003cScaffoldState\u003e();\n      final List\u003cString\u003e images = [\n        \"assets/slide_1.png\",\n        \"assets/slide_2.png\",\n        \"assets/slide_3.png\",\n        \"assets/slide_4.png\"\n      ];\n      \n      List\u003cColor\u003e colors = [Colors.orange];\n      final List\u003cString\u003e text0 = [\n        \"Welcome in your app\",\n        \"Enjoy teaching...\",\n        \"Showcase your skills\",\n        \"Friendship is great\"\n      ];\n      \n      final List\u003cString\u003e text1 = [\n        \"App for food lovers, satisfy your taste\",\n        \"Find best meals in your area, simply\",\n        \"Have fun while eating your relatives and more\",\n        \"Meet new friends from all over the world\"\n      ];\n      \n      final IndexController controller = IndexController();\n      @override\n      Widget build(BuildContext context) {\n        TransformerPageView transformerPageView = TransformerPageView(\n            pageSnapping: true,\n            onPageChanged: (index) {\n              setState(() {\n                this._slideIndex = index;\n              });\n            },\n            loop: false,\n            controller: controller,\n            transformer: new PageTransformerBuilder(\n                builder: (Widget child, TransformInfo info) {\n              return new Material(\n                color: Colors.white,\n                elevation: 8.0,\n                textStyle: new TextStyle(color: Colors.white),\n                borderRadius: new BorderRadius.circular(12.0),\n                child: new Container(\n                  alignment: Alignment.center,\n                  color: Colors.white,\n                  child: Padding(\n                    padding: const EdgeInsets.all(18.0),\n                    child: Column(\n                      mainAxisAlignment: MainAxisAlignment.center,\n                      crossAxisAlignment: CrossAxisAlignment.center,\n                      children: \u003cWidget\u003e[\n                        new ParallaxContainer(\n                          child: new Text(\n                            text0[info.index],\n                            style: new TextStyle(\n                                color: Colors.blueGrey,\n                                fontSize: 34.0,\n                                fontFamily: 'Quicksand',\n                                fontWeight: FontWeight.bold),\n                          ),\n                          position: info.position,\n                          opacityFactor: .8,\n                          translationFactor: 400.0,\n                        ),\n                        SizedBox(\n                          height: 45.0,\n                        ),\n                        new ParallaxContainer(\n                          child: new Image.asset(\n                            images[info.index],\n                            fit: BoxFit.contain,\n                            height: 350,\n                          ),\n                          position: info.position,\n                          translationFactor: 400.0,\n                        ),\n                        SizedBox(\n                          height: 45.0,\n                        ),\n                        new ParallaxContainer(\n                          child: new Text(\n                            text1[info.index],\n                            textAlign: TextAlign.center,\n                            style: new TextStyle(\n                                color: Colors.blueGrey,\n                                fontSize: 28.0,\n                                fontFamily: 'Quicksand',\n                                fontWeight: FontWeight.bold),\n                          ),\n                          position: info.position,\n                          translationFactor: 300.0,\n                        ),\n                        SizedBox(\n                          height: 55.0,\n                        ),\n                        new ParallaxContainer(\n                          position: info.position,\n                          translationFactor: 500.0,\n                          child: Dots(\n                            controller: controller,\n                            slideIndex: _slideIndex,\n                            numberOfDots: images.length,\n                          ),\n                        )\n                      ],\n                    ),\n                  ),\n                ),\n              );\n            }),\n            itemCount: 4);\n            \n        return Scaffold(\n          backgroundColor: Colors.white,\n          body: transformerPageView,\n        );\n      }\n    }\n    class Dots extends StatelessWidget {\n    \n      final IndexController controller;\n      final int slideIndex;\n      final int numberOfDots;\n      Dots({this.controller, this.slideIndex, this.numberOfDots});\n      \n      List\u003cWidget\u003e _generateDots() {\n        List\u003cWidget\u003e dots = [];\n        for (int i = 0; i \u003c numberOfDots; i++) {\n          dots.add(i == slideIndex ? _activeSlide(i) : _inactiveSlide(i));\n        }\n        return dots;\n      }\n      \n      Widget _activeSlide(int index) {\n        return GestureDetector(\n          onTap: () {\n            print('Tapped');\n          },\n          child: new Container(\n            child: Padding(\n              padding: EdgeInsets.only(left: 8.0, right: 8.0),\n              child: Container(\n                width: 20.0,\n                height: 20.0,\n                decoration: BoxDecoration(\n                  color: Colors.orangeAccent.withOpacity(.3),\n                  borderRadius: BorderRadius.circular(50.0),\n                ),\n              ),\n            ),\n          ),\n        );\n      }\n      \n      Widget _inactiveSlide(int index) {\n        return GestureDetector(\n          onTap: () {\n            controller.move(index);\n          },\n          child: new Container(\n            child: Padding(\n              padding: EdgeInsets.only(left: 5.0, right: 5.0),\n              child: Container(\n                width: 14.0,\n                height: 14.0,\n                decoration: BoxDecoration(\n                    color: Colors.grey.withOpacity(0.7),\n                    borderRadius: BorderRadius.circular(50.0)),\n              ),\n            ),\n          ),\n        );\n      }\n      \n      @override\n      Widget build(BuildContext context) {\n        return Center(\n            child: Row(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: _generateDots(),\n        ));\n      }\n    }\n```    \n\nThe code is pretty concise for the nice work we’ve achieved. Flutter helps us build this awesome app with no hassle and with a minimum effort 😄 .\n\nWe are done with this tutorial. Run your app with this command in your terminal: `flutter run` and see the magic happen 🙃 \n\n![flutter-onboarding-part-2-1](//images.ctfassets.net/1es3ne0caaid/3YsLrXgi5l3Jn1LpBbqw8d/b597a55f7d8f8efe527d9b9a39f29bf7/flutter-onboarding-part-2-1.gif)\n\n\n## Conclusion\n\nThis is the end of the tutorial series. I do hope it has been useful to you, and you can apply the knowledge acquired to build beautiful apps 😌 . The source code for this part is available [here](https://github.com/Ethiel97/flutter_slides/tree/part-two-building-the-dots); feel free to fork it and modify it as per your needs.","metaTitle":"Create onboarding for mobile apps with Flutter - Part 2","metaDescription":"This two part series guides you through building an onboarding experience for users new to your app. You will create a basic Flutter app, along with the onboarding screens. In part two, turn the onboarding screens into a fully-functional carousel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"bcz1Wx9ASL0czZg6IY0uD","type":"Entry","createdAt":"2019-03-05T19:08:24.550Z","updatedAt":"2019-03-05T19:08:24.550Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an onboarding experience for your mobile apps with Flutter - Part 1: Building the screens","url":"onboarding-flutter-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/flutter_slides/tree/part-one-building-the-screens","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2019-03-05","description":"This two part series guides you through building an onboarding experience for users new to your app. You will create a basic Flutter app, along with the onboarding screens. In part one, create four onboarding screens.","prerequisite":"You will need Dart and Flutter set up on your machine.","content":"## Introduction\n\nIn this tutorial series, we’ll be building a nice app intro with Flutter exploiting the onboarding technique. Onboarding is a great way to introduce your app to newcomers, to help them quickly adapt to the new conditions so that they can get the most out of your app. In UX design, onboarding is a set of techniques and interactions aimed at comforting users and giving the initial introduction of the product. The [Material Design guide](https://material.io/design/communication/onboarding.html) states:\n\n\n\u003e Onboarding is one point in a longer journey that begins in the app store and ends with the user taking the first key retention-correlated action in your app.\n\nWe can consider onboarding to be a useful UX technique to present your product to potential users, it is defined as a way of making someone familiar with an app. Your apps may not be self-explanatory so they surely need to include onboarding.\nNow that you know what onboarding is, we’ll dive into this tutorial. I’ll show you how to build a nice onboarding experience for your mobile app using the [Flutter framework](https://flutter.io).\n\n\n## Demo\n\nThis is the final result of the tutorial. Nice isn’t it ? 😎  You will be able to achieve that at the end of the tutorial.\n\n![flutter-onboarding-part-1-1](//images.ctfassets.net/1es3ne0caaid/TGz0Ynz2bMlBjLeucglQf/6545badd0f3e0c763bbe92ac299d759b/flutter-onboarding-part-1-1.gif)\n\n## Prerequisites\n\nThis tutorial assumes a little knowledge of Flutter or [Dart](http://dartlang.org/). JavaScript knowledge will be helpful as well, especially ES6 features.\nYou should have:\n\n-  [Visual Studio Code](https://code.visualstudio.com/Download) editor installed on your machine if you haven’t yet. We’ll use it in our tutorial. \n- [Visual Studio Code Flutter plugin](https://flutter.io/docs/get-started/editor?tab=vscode)\n- An emulator or physical device (for app testing/debugging purpose)\n- Flutter and Dart installed on your machine. Kindly refer to this [link](https://flutter.io/docs/get-started/install) for more information about their installation. It will guide you through the installation of Flutter SDK on your machine as well as the Dart language\n\n\n## Project setup\n\nOpen your code editor and hit  `ctrl+shift+p` or `cmd+shift+p` to create a new project, and give it a name, or simply run `flutter create your_project_name` in your terminal to quickly create a new project. After that, you’ll end up with a fresh Flutter project.\n\nHead over to the `pubspec.yaml` file and amend it like the following:\n\n``` yaml\n    //../pubspec.yaml\n    name: flutter_slides\n    description: A new Flutter project.\n    \n    # The following defines the version and build number for your application.\n    # A version number is three numbers separated by dots, like 1.2.43\n    # followed by an optional build number separated by a +.\n    # Both the version and the builder number may be overridden in flutter\n    # build by specifying --build-name and --build-number, respectively.\n    # Read more about versioning at semver.org.\n    version: 1.0.0+1\n    \n    environment:\n      sdk: \"\u003e=2.0.0-dev.68.0 \u003c3.0.0\"\n    \n    dependencies:\n      flutter:\n        sdk: flutter\n      transformer_page_view:\n    \n      # The following adds the Cupertino Icons font to your application.\n      # Use with the CupertinoIcons class for iOS style icons.\n      cupertino_icons: ^0.1.2\n    \n    dev_dependencies:\n      flutter_test:\n        sdk: flutter\n    \n    \n    # For information on the generic Dart part of this file, see the\n    # following page: https://www.dartlang.org/tools/pub/pubspec\n    \n    # The following section is specific to Flutter.\n    flutter:\n    \n      # The following line ensures that the Material Icons font is\n      # included with your application, so that you can use the icons in\n      # the material Icons class.\n      uses-material-design: true\n    \n      # To add assets to your application, add an assets section, like this:\n      assets:\n       - assets/slide_1.png\n       - assets/slide_2.png\n       - assets/slide_3.png\n       - assets/slide_4.png\n      #  - images/a_dot_ham.jpeg\n    \n      # An image asset can refer to one or more resolution-specific \"variants\", see\n      # https://flutter.io/assets-and-images/#resolution-aware.\n    \n      # For details regarding adding assets from package dependencies, see\n      # https://flutter.io/assets-and-images/#from-packages\n    \n      # To add custom fonts to your application, add a fonts section here,\n      # in this \"flutter\" section. Each entry in this list should have a\n      # \"family\" key with the font family name, and a \"fonts\" key with a\n      # list giving the asset and other descriptors for the font. For\n      # example:\n      fonts:\n        - family: Quicksand\n          fonts:\n            - asset: assets/Quicksand-Bold.ttf\n              weight: 700\n      #       - asset: fonts/Schyler-Italic.ttf\n      #         style: italic\n      #   - family: Trajan Pro\n      #     fonts:\n      #       - asset: fonts/TrajanPro.ttf\n      #       - asset: fonts/TrajanPro_Bold.ttf\n      #         weight: 700\n      #\n      # For details regarding fonts from package dependencies,\n      # see https://flutter.io/custom-fonts/#from-packages\n```    \n    \n\nIn the dependencies section of the file, we’ve added the  `transformer_page_view` dependency, a page transformer plugin for Flutter. This will help us to build our onboarding screens with no hassle.\nCreate an  `assets` directory into the root of your Flutter project. You can find the content of this folder at [this link](https://github.com/Ethiel97/flutter_slides/tree/part-one-building-the-screens/assets).\n\n\n\u003e Don’t forget to run `flutter packages get` in your terminal to install your dependencies.\n\n\n## Building the onboarding experience\n\nAs you may have noticed in the demo, we have four screens, each one has two text views, an image and carousel indicators. These screens present and describe our app to our users in order to make them feel comfortable with it, especially to not make them disoriented.\nWe’ll focus first on building the screens in the first part of the series, as stated in the title\n\n### Building the screens\n\nHere’s the code for the screens. Kindly paste it in your `main.dart` file.\n\n``` dart\n    //..lib/main.dart\n    \n    import 'package:flutter/material.dart';\n    import 'package:transformer_page_view/transformer_page_view.dart';\n    \n    void main() =\u003e runApp(MyApp());\n    class MyApp extends StatelessWidget {\n      // This widget is the root of your application.\n      @override\n      Widget build(BuildContext context) {\n        return MaterialApp(\n          debugShowCheckedModeBanner: false,\n          title: 'Flutter Demo',\n          theme: ThemeData(\n            // This is the theme of your application.\n            //\n            // Try running your application with \"flutter run\". You'll see the\n            // application has a blue toolbar. Then, without quitting the app, try\n            // changing the primarySwatch below to Colors.green and then invoke\n            // \"hot reload\" (press \"r\" in the console where you ran \"flutter run\",\n            // or simply save your changes to \"hot reload\" in a Flutter IDE).\n            // Notice that the counter didn't reset back to zero; the application\n            // is not restarted.\n            primarySwatch: Colors.blue,\n          ),\n          home: MyHomePage(title: 'Flutter Demo Home Page'),\n        );\n      }\n    }\n    \n    class MyHomePage extends StatefulWidget {\n      final String title;\n      MyHomePage({this.title});\n      @override\n      MyHomePageState createState() {\n        return new MyHomePageState();\n      }\n    }\n    \n    class MyHomePageState extends State\u003cMyHomePage\u003e {\n      int _slideIndex = 0;\n    \n      final List\u003cString\u003e images = [\n        \"assets/slide_1.png\",\n        \"assets/slide_2.png\",\n        \"assets/slide_3.png\",\n        \"assets/slide_4.png\"\n      ];\n      \n      final List\u003cString\u003e text0 = [\n        \"Welcome in your app\",\n        \"Enjoy teaching...\",\n        \"Showcase your skills\",\n        \"Friendship is great\"\n      ];\n      \n      final List\u003cString\u003e text1 = [\n        \"App for food lovers, satisfy your taste\",\n        \"Find best meals in your area, simply\",\n        \"Have fun while eating your relatives and more\",\n        \"Meet new friends from all over the world\"\n      ];\n      \n      final IndexController controller = IndexController();\n      \n      @override\n      Widget build(BuildContext context) {\n      \n        TransformerPageView transformerPageView = TransformerPageView(\n            pageSnapping: true,\n            onPageChanged: (index) {\n              setState(() {\n                this._slideIndex = index;\n              });\n            },\n            loop: false,\n            controller: controller,\n            transformer: new PageTransformerBuilder(\n                builder: (Widget child, TransformInfo info) {\n              return new Material(\n                color: Colors.white,\n                elevation: 8.0,\n                textStyle: new TextStyle(color: Colors.white),\n                borderRadius: new BorderRadius.circular(12.0),\n                child: new Container(\n                  alignment: Alignment.center,\n                  color: Colors.white,\n                  child: Padding(\n                    padding: const EdgeInsets.all(18.0),\n                    child: Column(\n                      mainAxisAlignment: MainAxisAlignment.center,\n                      crossAxisAlignment: CrossAxisAlignment.center,\n                      children: \u003cWidget\u003e[\n                        new ParallaxContainer(\n                          child: new Text(\n                            text0[info.index],\n                            style: new TextStyle(\n                                color: Colors.blueGrey,\n                                fontSize: 34.0,\n                                fontFamily: 'Quicksand',\n                                fontWeight: FontWeight.bold),\n                          ),\n                          position: info.position,\n                          opacityFactor: .8,\n                          translationFactor: 400.0,\n                        ),\n                        SizedBox(\n                          height: 45.0,\n                        ),\n                        new ParallaxContainer(\n                          child: new Image.asset(\n                            images[info.index],\n                            fit: BoxFit.contain,\n                            height: 350,\n                          ),\n                          position: info.position,\n                          translationFactor: 400.0,\n                        ),\n                        SizedBox(\n                          height: 45.0,\n                        ),\n                        new ParallaxContainer(\n                          child: new Text(\n                            text1[info.index],\n                            textAlign: TextAlign.center,\n                            style: new TextStyle(\n                                color: Colors.blueGrey,\n                                fontSize: 28.0,\n                                fontFamily: 'Quicksand',\n                                fontWeight: FontWeight.bold),\n                          ),\n                          position: info.position,\n                          translationFactor: 300.0,\n                        ),\n                        SizedBox(\n                          height: 55.0,\n                        ),\n                      ],\n                    ),\n                  ),\n                ),\n              );\n            }),\n            itemCount: 4);\n            \n        return Scaffold(\n          backgroundColor: Colors.white,\n          body: transformerPageView,\n        );\n        \n      }\n    }\n```    \n\nFirst, we import the [material](https://docs.flutter.io/flutter/material/material-library.html) [library](https://docs.flutter.io/flutter/material/material-library.html) so that we can use the `MaterialApp` widget inside our app. We’ve also imported our `transformer_page_view_dependency`.  Now inside our `main` function, we have our `MyApp` widget returning the `MaterialApp` widget defining our app title, our app theme, and our `MyHomePage` widget.  \n\nThe `MyHomePage` widget is a stateful widget as it has to manage its own state through some data. `MyHomePageState` is intended to handle the state of `MyHomePage` as you can see. Then, we defined four variables:\n\n\n- `_slideIndex`: initialized to 0, this variable is used to keep track of the current index of our slide\n\n\n- `images`: an array of images to use in our screens\n\n\n- `text0` and text1: arrays of texts to describe our screens\n\n\n- `controller`: an object of `IndexController` to get some useful info about indexes of screens and to control them.\n\nNext, we declared our  `transformerPageView` object of type `TransformerPageView` to build our well said screens, and to control their behavior.  This object has some useful properties to control our page view behavior. We’ll take a look at some of them:\n\n\n- `onPageChanged`: called with the new index when the user swiped, we overrided the `_slideIndex` with the new current index each time the user swiped\n\n\n- `loop`: whether to loop or not, we set it to false\n\n\n- `controller`: the index controller\n\n\n- `transformer`: the most important property of this widget, it returns a `transformed` widget that based on the widget parameter. The returned widget as it happens is the current screen presented to the user, just a `Material` widget wrapping two texts widget and an image asset. We wrapped each of these widgets inside a `ParallaxContainer` to mimic a parallax effect on screens swiping. \n- `itemCount`: number of total items/screens.\n\nSo here are the four screens you should have if you have followed along 🙃 .\n\n![flutter-onboarding-part-1-2](//images.ctfassets.net/1es3ne0caaid/5vu9I45ytpBzLcVOIIfOit/90dd05215e49bbcd51f02011f5666a10/flutter-onboarding-part-1-2.png)\n\nJust execute this command: `flutter run` in your terminal to run your app running with a smooth transition between screens 😎 .\n\nIn the next part of the tutorial, we’ll add carousel indicators to the slides to make it more user friendly.\n\n\n## Conclusion\n\nIn this first part of this tutorial series, you’ve learnt what onboarding is, then we’ve put this knowledge into practice by building the screens of our app intro. This is just the first steps of a beautiful journey 😉 . Follow me in the second part to see how we can polish the app with the carousel indicators and get more control over the app. Here is the [code](https://github.com/Ethiel97/flutter_slides/tree/part-one-building-the-screens) for the first part of the series.","metaTitle":"Create onboarding for mobile apps with Flutter - Part 1","metaDescription":"This two part series guides you through building an onboarding experience for users new to your app. You will create a basic Flutter app, along with the onboarding screens. In part one, create four onboarding screens."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1YAQ3I2TLr7c25F7COyBLq","type":"Entry","createdAt":"2019-02-28T23:46:39.482Z","updatedAt":"2019-02-28T23:46:39.482Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Mastering styled text in Flutter","url":"styled-text-flutter","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"58WBWjhcWcuAMI6qIAyiC4","type":"Entry","createdAt":"2018-12-13T20:46:00.073Z","updatedAt":"2018-12-13T20:46:36.867Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Suragch","url":"suragch","email":"studymongolian@gmail.com","twitter":"https://twitter.com/suragch","github":"https://github.com/suragch","guestWriter":true}}],"projectRepo":"https://github.com/suragch/flutter_text","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}}],"reviewDate":"2019-02-28","description":"This tutorial takes an in-depth look at text styling in Flutter. It examines the challenges of working with text strings in computing, discusses how Unicode addresses some of these issues, and then provides a thorough overview with code samples for styling text in Flutter.","prerequisite":"You will need a Flutter development environment set up on your machine.","content":"## Introduction\n\nIn this tutorial we are going to start with an overview of Dart strings and Unicode. Next we'll move on to styling text for your app, first for entire strings and then for spans within a string.\n\n\n## Prerequisites\n\nTo go through this tutorial you should have the [Flutter development environment set up](https://flutter.io/docs/get-started/install) and know how to run an app. I'm using Android Studio with the Flutter 1.1 plugin, which uses Dart 2.1.\n\n\n## Setup\n\nCreate a new Flutter app. I'm calling mine `flutter_text`.\n\nOpen `main.dart` and replace the code with the following:\n\n```dart\n    import 'package:flutter/material.dart';\n    \n    void main() =\u003e runApp(MyApp());\n    \n    class MyApp extends StatelessWidget {\n      @override\n      Widget build(BuildContext context) {\n        return MaterialApp(\n          debugShowCheckedModeBanner: false,\n          home: Scaffold(\n            appBar: AppBar(title: Text('Styling text')),\n            body: Container(\n              child: Center(\n                child: _myWidget(context),\n              ),\n            ),\n          ),\n        );\n      }\n    }\n    \n    // modify this widget with the example code below\n    Widget _myWidget(BuildContext context) {\n      String myString = 'I ❤️ Flutter';\n      print(myString);\n      return Text(\n        myString,\n        style: TextStyle(fontSize: 30.0),\n      );\n    }\n```\n\nNote the `_myWidget()` function at the end. You can modify or replace it using the examples below. The more you experiment on your own, the more you will learn.\n\nIf you are already familiar with concepts like grapheme clusters and Dart strings, you can skip down to the text styling sections below.\n\n\n## Unicode\n\n### Coded messages\n\nWhen I was a kid I liked to write \"secret\" messages in code, where 1=a, 2=b, 3=c and so on until 26=z. A message using this code might be:\n\n```\n    9   12 9 11 5   6 12 21 20 20 5 18\n```\n\nTo make the code even *more* secret you could shift the numbers, where 1=b, 2=c, 3=d and so on until it wrapped around where 26=a. As long as my friend and I had the same code key, we could decode each other's messages. The wrong code key, though, would give garbled nonsense.\n\nComputers are similar, except most of the time we don't want secret messages. We want to make our messages easy to decode, so we agree on a code key, or should I say, a standard. [ASCII](https://www.w3schools.com/charsets/ref_html_ascii.asp) was an early example of this, where the code key was 97=a, 98=b, 99=c, and so on. That worked fine for English but ASCII only had 128 codes (from 7 bits of data) and that wasn’t enough for all of the characters in other languages. So people made other code keys with more numbers. The problem was that the numbers overlapped and when you used the wrong decoding key you ended up with garbled nonsense.\n\n### Unicode to the rescue\n\nUnicode is an international standard that assigns unique code numbers for the characters of every language in the world. The code numbers are called code points. In addition to what we normally think of as characters, there are also code points for control characters (like a new line), diacritical marks (like the accent over an é), and pictures (like [**😊**](https://emojipedia.org/smiling-face-with-smiling-eyes/)). As long as everyone agrees to use this code standard, there are ~~no more~~ fewer garbled messages.\n\nUnicode is just a long list of code points. Saving these code points or sending them is another matter. To help you understand this, take my secret message from above as an example. If I write it as a string of numbers without whitespace and try to send it to you, you get:\n\n```\n    9129115612212020518\n```\n\nThis is almost impossible to decode now. Does `912` mean `9`, `1`, `2` or does it mean `9`, `12`? It's the same situation with Unicode. We have to use an agreed upon means to save and send Unicode text, or else it would be very difficult to decode. There are three main ways to do it: UTF-8, UTF-16, and UTF-32. UTF stands for Unicode Transformation Format, and each method of encoding has its [advantages and disadvantages](https://en.wikipedia.org/wiki/Comparison_of_Unicode_encodings). \n\n\n- [UTF-8](https://en.wikipedia.org/wiki/UTF-8) saves each code point using one to four bytes of data.\n- [UTF-16](https://en.wikipedia.org/wiki/UTF-16) saves each code point as two or four bytes of data. One 16-bit code unit is big enough to uniquely reference a lot of Unicode code points, but not big enough for all of them (emojis, for example). In order to save code points with numbers higher than 16 bits (that is, higher than the number 65,535), UTF-16 uses two 16-bit code units (called surrogate pairs) to map the other code points.\n- [UTF-32](https://en.wikipedia.org/wiki/UTF-32) saves each code point using four bytes of data. It provides a direct one-to-one mapping of UTF-32 code units to Unicode code points.\n\nWhen working with UTF-16 code units, you need to be careful not to forget about the other half of a surrogate pair. And even if you are working with UTF-32, you shouldn't assume that a single code point is the same as what a user perceives to be a character. For example, country flags (like 🇨🇦) are made of two code points. An accented character (like é) can also optionally be made from two code points. In addition to this, there are emoji with skin tone (like 👩🏾, 2 code points) and family emoji (like 👨‍👩‍👧, 5 code points).\n\nSo as a programmer, it is better not to think of UTF code units or Unicode code points as characters themselves. That will lead to bugs (for example, when trying to move the cursor one place to the left). Instead, you should think about what Unicode calls a [grapheme cluster](https://unicode.org/reports/tr29/). These are user-perceived characters. So 🇨🇦, é, 👩🏾, and 👨‍👩‍👧 are each a single grapheme cluster because they each look like a single character even though they are made up of multiple Unicode code points.\n\n### Further reading\n\nIf you find this interesting or would like a deeper understand of the issues related to Unicode, I encourage you to read the following articles:\n\n\n- [Let’s Stop Ascribing Meaning to Code Points](https://manishearth.github.io/blog/2017/01/14/stop-ascribing-meaning-to-unicode-code-points/)\n- [Dark corners of Unicode](https://eev.ee/blog/2015/09/12/dark-corners-of-unicode/) \n- [Strings in Swift 4](https://oleb.net/blog/2017/11/swift-4-strings/)  (Although this article is about Swift, it has an excellent discussion of the issues involved.)\n\n\n## Dart strings\n\nLet's move on from talking about Unicode in a general way to seeing how Dart uses it.\n\n### Code units\n\nIn Dart, strings are sequences of UTF-16 code units. That makes string manipulation look deceptively easy because you can get the string value of a code unit by a random integer index:\n\n```dart\n    String myString = 'Flutter';\n    String myChar = myString[0]; // F\n```\n\nBut this creates bugs if you split a surrogate pair.\n\n```dart\n    String myString = '🍎';                    // apple emoji\n    List\u003cint\u003e codeUnits = myString.codeUnits;  // [55356, 57166]\n    String myChar = myString[0];               // 55356 (half of a surrogate pair)\n```\n\nThis will throw an exception if you try to display `myChar` in a Text widget.\n\n### Runes\n\nA better alternative is to work with code points, which are called runes in Dart.\n\n```dart\n    String myString = '🍎π';\n    \n    List\u003cint\u003e codeUnits = myString.codeUnits;    // [55356, 57166, 960]\n    int numberOfCodeUnits = myString.length;     // 3\n    int firstCodeUnit = myString.codeUnitAt(0);  // 55356\n    \n    Runes runes = myString.runes;                // (127822, 960)\n    int numberOfCodPoints = runes.length;        // 2\n    int firstCodePoint = runes.first;            // 127822\n```\n\n### Grapheme clusters\n\nEven runes will fail when you have grapheme clusters composed of multiple code points.\n\n```dart\n    String myString = '🇨🇦';\n    Runes runes = myString.runes;                // (127464, 127462)\n    int numberOfCodePoints = runes.length;       // 2\n    int firstCodePoint = runes.first;            // 127464\n    String halfFlag = String.fromCharCode(firstCodePoint); // 🇨\n```\n\nDisplaying the `halfFlag` string in your app won't crash it, but users will perceive it as a bug since it only contains one of the two [regional indicator symbols](https://en.wikipedia.org/wiki/Regional_Indicator_Symbol) used to make the Canadian flag.\n\n![flutter-text-style-1](//images.ctfassets.net/1es3ne0caaid/Xrpd5PTWRKlB9IA5bE0La/4b8db8d11375535015b319c8b425a6a4/flutter-text-style-1.png)\n\nUnfortunately, at the time of this writing, there is [no support for grapheme clusters in Dart](https://stackoverflow.com/questions/54483177/handling-grapheme-clusters-in-dart), though there is talk of implementing it. You should still keep them in mind while writing tests and working with strings, though.\n\n### Hexadecimal notation\n\nIf you are starting with a Unicode hex value, this is how you get a string:\n\n```dart\n    String s1 = '\\u0043';                // C\n    String s2 = '\\u{43}';                // C\n    String s3 = '\\u{1F431}';             // 🐱 (cat emoji)\n    String s4 = '\\u{65}\\u{301}\\u{20DD}'; //  é⃝ = \"e\" + accent mark + circle\n    int charCode = 0x1F431;              // 🐱 (cat emoji)\n    String s5 = String.fromCharCode(charCode);\n```\n\n### Substrings\n\nThe String documentation ([here](https://www.dartlang.org/guides/language/language-tour#strings) and [here](https://api.dartlang.org/stable/2.1.0/dart-core/String-class.html)) is pretty good, and you should read it if you haven't already. I want to review substrings before we go on to text styling, though, since we will be using it later.\n\nTo get a substring you do the following:\n\n```dart\n    String myString = 'I ❤️ Flutter.';\n    int startIndex = 5;\n    int endIndex = 12;\n    String mySubstring = myString.substring(startIndex, endIndex); // Flutter\n```\n\nYou can find index numbers with `indexOf()`:\n\n```dart\n    int startIndex = myString.indexOf('Flutter');\n```\n\nOK, that's enough background information. Let's get on to styling text in Flutter.\n\n\n## Text styling with the Text widget\n\nWe are going to look first at styling strings in a Text widget. After that we will see how to style substrings within a RichText widget. Both of these widgets use a TextStyle widget to hold the styling information.\n\nReplace `_myWidget()` with the following code:\n\n```dart\n    Widget _myWidget(BuildContext context) {\n      return Text(\n        'Styling text in Flutter',\n        style: TextStyle(\n          fontSize: 30.0,\n        ),\n      );\n    }\n```\n\nOr, if you would like to compare multiple style settings at once, you can use the following column layout. \n\n```dart\n    Widget _myWidget(BuildContext context) {\n      return Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: \u003cWidget\u003e[\n          Text(\n            'Styling text in Flutter',\n            style: TextStyle(\n              fontSize: 8,\n            ),\n          ),\n          Text(\n            'Styling text in Flutter',\n            style: TextStyle(\n              fontSize: 12,\n            ),\n          ),\n          Text(\n            'Styling text in Flutter',\n            style: TextStyle(\n              fontSize: 16,\n            ),\n          ),\n        ],\n      );\n    }\n```\n\nNote that I am setting the TextStyle using the `style` property of the Text widget. I will modify the TextStyle options below. Try them out yourself by pressing hot reload between every change. You may want to leave a large font size (like `fontSize: 30`) for some of the later examples below so that you can see what is happening.\n\n### Text size\n\n![flutter-text-style-2](//images.ctfassets.net/1es3ne0caaid/1HgMzUMiROJirSYebe3T5T/b4bd180c1d357db383f97a2fa72f3621/flutter-text-style-2.png)\n\n```dart\n    TextStyle(\n      fontSize: 30.0,\n    )\n```\n\nWhen `fontSize` is not given, the default size is 14 logical pixels. Logical pixels are independent of a device's density. That is, the text should appear to be to be basically the same size no matter what the pixel density of a user's device may be. However, this font size is also multiplied by a `textScaleFactor` depending on the [user's preferred font size](https://stackoverflow.com/a/54486798). \n\nIf you wish to disable accessibility scaling, you can set it on the Text widget. (I’m very impressed that Flutter has accessibility enabled by default, and I definitely don’t suggest that you disable it without reason. In some rare cases, though, an oversized font might break a layout…in which case it would still probably be better to redesign your layout rather than disable accessibility.)\n\n```dart\n    // This text will always display at 30.0 logical pixels, no matter\n    // what the user's preferred size is.\n    Text(\n      'Some text',\n      textScaleFactor: 1.0, // disables accessibility\n      style: TextStyle(\n        fontSize: 30.0\n      ),\n    )\n```\n\nYou can also use the theme data to set the text size. See the section on themes below.\n\n### Text color\n\n![flutter-text-style-3](//images.ctfassets.net/1es3ne0caaid/1K1vtSCSuhcYeTtCLKDqw6/8211110710bd63a4f2d4f12ea0df7b3a/flutter-text-style-3.png)\n\n```dart\n    TextStyle(\n      color: Colors.green,\n    )\n```\n\nIn addition to predefined colors like `Colors.green` and `Colors.red`, you can also set shades on a color, like `Colors.blue[100]` or `Colors.blue[700]`.\n\n![flutter-text-style-4](//images.ctfassets.net/1es3ne0caaid/64PY6znvZLtgNFKVrBGcVl/202e0cbd348ed1614c76e850c309a1d7/flutter-text-style-4.png)\n\n### Background color\n\n![flutter-text-style-5](//images.ctfassets.net/1es3ne0caaid/5BYqFtNFV0yx5ArZ6Zv4JJ/7dcc881a4f0c94e8c82d8035c3756256/flutter-text-style-5.png)\n\n```dart\n    Widget _myWidget(BuildContext context) {\n      Paint paint = Paint();\n      paint.color = Colors.green;\n      return Text(\n        'Styling text in Flutter',\n        style: TextStyle(\n          background: paint,\n          fontSize: 30.0,\n        ),\n      );\n    }\n```\n\nFor a Text widget you could also just wrap it in a Container and set the color on the Container.\n\n### Bold\n\n![flutter-text-style-6](//images.ctfassets.net/1es3ne0caaid/5S49sCdyDYV4mGTK4pGgQ/d1b9ff1f7fcd5090ccf0ef8c8561b9f4/flutter-text-style-6.png)\n\n```dart\n    TextStyle(\n      fontWeight: FontWeight.bold,\n    )\n```\n\nYou can set the weight with numbers like `FontWeight.w100` where `w400` is the same as `normal` and `w700` is the same as `bold`.\n\n### Italic\n\n![flutter-text-style-7](//images.ctfassets.net/1es3ne0caaid/6EI1eFBXmFoLcsbd3DFcml/7b12052bed09cdb1a8a6e058a216dcd3/flutter-text-style-7.png)\n\n```dart\n    TextStyle(\n      fontStyle: FontStyle.italic,\n    )\n```\n\nThe only choices are `italic` and `normal`.\n\n### Shadow\n\n![flutter-text-style-8](//images.ctfassets.net/1es3ne0caaid/1bJrJGC6ePd9V0WpiEOF8t/92138895ab79591326d0e2b9dcfe44c0/flutter-text-style-8.png)\n\n```dart\n    TextStyle(\n      shadows: [\n        Shadow(\n          blurRadius: 10.0,\n          color: Colors.blue,\n          offset: Offset(5.0, 5.0),\n        ),\n      ],\n    )\n```\n\nWhen setting the shadow you can change the blur radius (bigger means more blurry), color, and offset. You can even set multiple shadows as if there were more than one light source.\n\n![flutter-text-style-9](//images.ctfassets.net/1es3ne0caaid/50n7cNJy3koGu8k6IocZUu/091b15527b5327d084cd6b674e26e4bf/flutter-text-style-9.png)\n\n```dart\n    TextStyle(\n      shadows: [\n        Shadow(\n          color: Colors.blue,\n          blurRadius: 10.0,\n          offset: Offset(5.0, 5.0),\n        ),\n        Shadow(\n          color: Colors.red,\n          blurRadius: 10.0,\n          offset: Offset(-5.0, 5.0),\n        ),\n      ],\n    )\n```\n\nI'm not sure if more than one shadow is useful or not, but it is interesting.\n\n### Underline\n\n![flutter-text-style-10](//images.ctfassets.net/1es3ne0caaid/4FdQ08chmyjG9nYtCLMqHz/0618d5822e4eaf871a059e3be7da8c25/flutter-text-style-10.png)\n\n```dart\n    TextStyle(\n      decoration: TextDecoration.underline,\n      decorationColor: Colors.black,\n      decorationStyle: TextDecorationStyle.solid,\n    )\n```\n\nThe decoration can be `underline`, `lineThrough`, or `overline`. The last line of text in the image above has an overline.\n\nThe choices for decorationStyle are `solid`, `double`, `dashed`, `dotted`, and `wavy`.\n\n### Spacing\n\n![flutter-text-style-11](//images.ctfassets.net/1es3ne0caaid/394xLrJTh6O9wp09hcY1My/78dd685a97d47e89160b00762c815263/flutter-text-style-11.png)\n\n```dart\n    TextStyle(\n      letterSpacing: -1.0,\n      wordSpacing: 5.0,\n    )\n```\n\nIn the example image, the six lines on top use letter spacing ranging from -2.0 to 3.0. The six lines on bottom use word spacing ranging from -3.0 to 12.0. A negative value moves the letters or words closer together.\n\n### Font\n\n![flutter-text-style-12](//images.ctfassets.net/1es3ne0caaid/1CVxQaRuRxagTiG1gjhbJJ/1231942506df9907de17ded59bd3b5c3/flutter-text-style-12.png)\n\nUsing a custom font requires a few more steps:\n\n1. Add a directory called `assets` to the root of your project.\n2. Copy a font into it. (I downloaded the Dancing Script font from [here](https://fonts.google.com/specimen/Dancing+Script?selection.family=Dancing%20Script), unzipped it, and renamed the regular one to `dancing_script.ttf`.)\n3. In `pubspec.yaml` register the font:\n\n```yaml\n    flutter:\n      fonts:\n      - family: DancingScript\n        fonts:\n        - asset: assets/dancing_script.ttf\n```\n\n4. Set the font in your widget:\n\n```dart\n    TextStyle(\n      fontFamily: 'DancingScript',\n    )\n```\n\n5. Do a full stop and restart.\n\nSee [this post](https://stackoverflow.com/a/54488636) for more help. \n\n\n## Using themes\n\nOur root widget is a MaterialApp widget, which uses the [Material Design](https://material.io/design/) theme. Through the BuildContext we have access to its predefined text styles. Instead of creating our own style with TextStyle, you can use a default one like this:\n\n![flutter-text-style-13](//images.ctfassets.net/1es3ne0caaid/72WhMOWZA0XN49bPi4ZaTO/811784524eead57a0663d04b8e239a64/flutter-text-style-13.png)\n\n```dart\n    Text(\n      'Styling text in Flutter',\n      style: Theme.of(context).textTheme.title,\n    )\n```\n\nThat was the default style for titles. There are many more defaults for other types of text. Check them out:\n\n![flutter-text-style-14](//images.ctfassets.net/1es3ne0caaid/01uwjlM9xnHbbbZclze2k4/ba8565dbe16c1625ea6105b9afb49f87/flutter-text-style-14.png)\n\nIf a style is not specified, Text uses the DefaultTextStyle. You can use it yourself like this:\n\n```dart\n    Text(\n      'default',\n      style: DefaultTextStyle.of(context).style,\n    )\n```\n\nDefaultTextStyle gets its style from the build context.\n\nSee the [documentation](https://flutter.io/docs/cookbook/design/themes) for more about using themes. \n\n\n## Text styling with the RichText widget\n\nThe final thing I want to teach you is how to style part of a text string. With a Text widget the whole string has the same style. A RichText widget, though, allows us to add TextSpans that include different styles.\n\n### Basic example\n\n![flutter-text-style-15](//images.ctfassets.net/1es3ne0caaid/7mHwWYDRF1EARbOYQRzLvv/80d1b530ac0dc64ae8e11d0c9e73e284/flutter-text-style-15.png)\n\nReplace `_myWidget()` with the following code:\n\n```dart\n    Widget _myWidget(BuildContext context) {\n      return RichText(\n        text: TextSpan(\n          // set the default style for the children TextSpans\n          style: Theme.of(context).textTheme.body1.copyWith(fontSize: 30),\n          children: [\n            TextSpan(\n                text: 'Styling ',\n            ),\n            TextSpan(\n              text: 'text',\n              style: TextStyle(\n                color: Colors.blue\n              )\n            ),\n            TextSpan(\n                text: ' in Flutter',\n            ),\n          ]\n        )\n      );\n    }\n```\n\n\u003e **Note:** An alternate way to make text with styled spans is to use the `Text.rich()` constructor, which has the same default style as the Text widget.\n\nRichText takes a TextSpan tree. Every very TextSpan takes more TextSpan children, which inherit the style of their parent. To make the word \"text\" blue, I had to divide the string into three TextSpans. I used a color for the style, but I could have just as easily used any of the other styles that we have already looked at. Try adding a few more styles yourself.\n\n### Styling programmatically\n\nIn a real application we would probably have a longer string. For example, let's highlight every occurrence of \"text\" in the following string:\n\n![flutter-text-style-16](//images.ctfassets.net/1es3ne0caaid/WpzO6SiStelc4I15mrtSn/3836abb2635e032884ed47f01944bb63/flutter-text-style-16.png)\n\nTo do that we have to look at the string and find the indexes of the text that we want to style. Then we use substring to cut the string up and put it in a list of TextSpans.\n\nReplace `_myWidget()` with the following code:\n\n```dart\n    Widget _myWidget(BuildContext context) {\n    \n      final String myString =\n          'Styling text in Flutter Styling text in Flutter '\n          'Styling text in Flutter Styling text in Flutter '\n          'Styling text in Flutter Styling text in Flutter '\n          'Styling text in Flutter Styling text in Flutter '\n          'Styling text in Flutter Styling text in Flutter ';\n          \n      final wordToStyle = 'text';\n      final style = TextStyle(color: Colors.blue);\n      final spans = _getSpans(myString, wordToStyle, style);\n      \n      return RichText(\n        text: TextSpan(\n          style: Theme.of(context).textTheme.body1.copyWith(fontSize: 30),\n          children: spans,\n        ),\n      );\n    }\n    \n    List\u003cTextSpan\u003e _getSpans(String text, String matchWord, TextStyle style) {\n    \n      List\u003cTextSpan\u003e spans = [];\n      int spanBoundary = 0;\n      \n      do {\n      \n        // look for the next match\n        final startIndex = text.indexOf(matchWord, spanBoundary);\n        \n        // if no more matches then add the rest of the string without style\n        if (startIndex == -1) {\n          spans.add(TextSpan(text: text.substring(spanBoundary)));\n          return spans;\n        }\n        \n        // add any unstyled text before the next match\n        if (startIndex \u003e spanBoundary) {\n          spans.add(TextSpan(text: text.substring(spanBoundary, startIndex)));\n        }\n        \n        // style the matched text\n        final endIndex = startIndex + matchWord.length;\n        final spanText = text.substring(startIndex, endIndex);\n        spans.add(TextSpan(text: spanText, style: style));\n        \n        // mark the boundary to start the next search from\n        spanBoundary = endIndex;\n        \n      // continue until there are no more matches\n      } while (spanBoundary \u003c text.length);\n      \n      return spans;\n    }\n```\n\nExperiment with changing the search word and style.\n\nIn this example we searched for plain text, but you can also do pattern matching using regular expressions.\n\n### Clickable spans\n\nYou can make a span clickable by adding a TapGestureRecognizer:\n\n```dart\n    TextSpan(\n      text: spanText,\n      style: style,\n      recognizer: TapGestureRecognizer()\n        ..onTap = () {\n          // do something\n        },\n    )\n```\n\nThis would allow you to open a URL, for example, if used along with the [url_launcher](https://pub.dartlang.org/packages/url_launcher) plugin. \n\n\n## Final notes\n\nHere are a few more related concepts that I didn't have time or space to cover:\n\n\n- If you have HTML text, you can format it by using a plugin. None of the plugins I tested render everything perfectly, but the best one seemed to be [flutter_html_view](https://pub.dartlang.org/packages/flutter_html_view). \n- If you need to style text that you are painting on a canvas, check out the [TextPainter](https://docs.flutter.io/flutter/painting/TextPainter-class.html) class. \n- For [converting text into UTF-8](https://stackoverflow.com/a/51101618), you can import `dart:convert`.\n\n\n## Conclusion\n\nText seems like it should be so simple, but it really isn't. Language is messy and dealing with it as a programmer can be difficult. Much progress has been made in recent years, though. Unicode has solved a lot of problems. Dart and Flutter also give us a lot of tools to manipulate and style text. I expect to see these tools improve even more in the future.\n\nThe source code for this project is available on [GitHub](https://github.com/suragch/flutter_text).\n\nBy the way, in case you were curious but lazy, my secret message was \"I like Flutter\".","metaTitle":"Mastering styled text in Flutter","metaDescription":"This article takes an in-depth look at text styling in Flutter. It examines the challenges of working with text strings in computing, discusses how Unicode addresses some of these issues, and then provides a thorough overview with code samples for styling text in Flutter."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4csgick7faaceQKY6MqqQm","type":"Entry","createdAt":"2019-02-14T18:48:32.075Z","updatedAt":"2019-02-14T18:48:32.075Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to save data locally in Flutter","url":"local-data-flutter","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"58WBWjhcWcuAMI6qIAyiC4","type":"Entry","createdAt":"2018-12-13T20:46:00.073Z","updatedAt":"2018-12-13T20:46:36.867Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Suragch","url":"suragch","email":"studymongolian@gmail.com","twitter":"https://twitter.com/suragch","github":"https://github.com/suragch","guestWriter":true}}],"projectRepo":"https://github.com/suragch/flutter_saving_data","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2019-02-14","description":"This tutorial looks at saving data locally with Flutter. It provides code samples for three methods: saving to shared preferences, to a database, and to a file. You will learn when to use each method, as well as the basic Flutter code and dependencies needed.","prerequisite":"You will need a Flutter development environment set up, and should have some basic knowledge of Flutter.","content":"## Introduction\n\nIt's a rare app that doesn't need to store some sort of data, whether it's remembering the last article read, the user's email address, or the night mode setting. Both Android and iOS give us several options for how to save data locally. Flutter makes these options available to us, too. Specifically, we'll learn how to save data using the following methods:\n\n\n1. Shared preferences\n2. SQLite database\n3. Text file\n\nWe’ll look at each one of these and go through some easy examples to help us understand them.\n\n\n## Prerequisites\n\nI'm assuming that you:\n\n\n- Have the [Flutter development environment](https://flutter.io/docs/get-started/install) set up (This tutorial was tested with Flutter 1.0.)\n- Know the way around your IDE (I'm using Android Studio, but VSCode and IntelliJ are fine, too.)\n- Have experience creating a basic Flutter app (If not see First steps with Flutter parts [one](https://pusher.com/tutorials/flutter-widgets), [two](https://pusher.com/tutorials/flutter-building-layouts), and [three](https://pusher.com/tutorials/flutter-user-input).)\n\nBeyond that there is very little that you need to know for this lesson. I'll give you cut-and-paste code blocks for you to try out. From there you'll be able to experiment and adapt them to your own needs.\n\n\n## Setup\n\nStart a new Flutter project. I’m calling mine `flutter_saving_data`. \n\n\n## Saving to shared preferences\n\nWhen you have small amounts of data that you want to persist across app runs, you can use Flutter's [shared_preferences](https://pub.dartlang.org/packages/shared_preferences) plugin to save that data. Here are some examples of things you might save using shared preferences:\n\n\n- User selected color theme\n- Whether night mode is enabled\n- Preferred app language\n\nSome data may not have been explicitly chosen by the user, but is still important to save. For example:\n\n- Last scroll position\n- Current tab\n- Time length already played in an audio or video file\n\nAny customization that makes the user do less work the next time they use your app is a good candidate for shared preferences. When you want to save larger amounts of data, though, you should consider using a database.\n\nSince shared preferences saves app related settings and defaults, the system erases that data when the user uninstalls your app. So if there are settings that should persist across installs or devices, then you should consider saving to the cloud.\n\nIn Flutter, we'll use a plugin that is a wrapper around the same underlying functionality in Android and iOS. Android calls it [SharedPreferences](https://developer.android.com/training/data-storage/shared-preferences) while iOS calls it [NSUserDefaults](https://developer.apple.com/documentation/foundation/nsuserdefaults). Like Android, Flutter also calls it [SharedPreferences](https://pub.dartlang.org/packages/shared_preferences).\n\nThe following steps will get you set up using SharedPreferences.\n\n### Dependency\n\nOpen your `pubspec.yaml` file and in the dependencies section add the line `shared_preferences: ^0.4.3` like this:\n\n``` yaml\n    dependencies:\n      flutter:\n        sdk: flutter\n      shared_preferences: ^0.4.3\n```\n\nThis tutorial is using version 0.4.3. You can find the most recent version on [pub](https://pub.dartlang.org/packages/shared_preferences).\n\n\n\u003e **Note:** Do you understand the meaning of the `^` caret before the version number? Based on [semantic versioning](https://semver.org/), this allows the dependency to automatically update to the latest version as long as that version does not contain breaking changes to whatever version number you specified. See [this post](https://stackoverflow.com/a/53563080/3681880) for more details.\n\u003e \n\u003e You might have also seen the `any` keyword used, as in `shared_preferences: any`. It's better not to do this, though, since it would allow automatic updates with changes that could break your app.\n\n### Minimal example\n\nLet's make a simple app to read and save data with SharedPreferences.\n\n![flutter-local-data-buttons](//images.ctfassets.net/1es3ne0caaid/47eDvWNF5YsM4cCAwEKSU6/862a1fb1a43d8d67d7ec3cbae809d5d8/flutter-local-data-buttons.png)\n\nThere are two buttons. One button will read from SharedPreferences. The other button will write to it. In order to keep the UI as simple as possible we will log the output using `print()`. In Android Studio be sure to have the Run tab selected so that you can see the output.\n\nReplace the code in your `main.dart` file with the following:\n\n``` dart\n    import 'package:flutter/material.dart';\n    import 'package:shared_preferences/shared_preferences.dart';\n    \n    void main() =\u003e runApp(MyApp());\n    \n    class MyApp extends StatelessWidget {\n      @override\n      Widget build(BuildContext context) {\n        return MaterialApp(\n          theme: ThemeData(primarySwatch: Colors.blue),\n          home: MyHomePage(),\n        );\n      }\n    }\n    \n    class MyHomePage extends StatelessWidget {\n      @override\n      Widget build(BuildContext context) {\n        return Scaffold(\n          appBar: AppBar(\n            title: Text('Saving data'),\n          ),\n          body: Row(\n            //mainAxisAlignment: MainAxisAlignment.center,\n            children: \u003cWidget\u003e[\n              Padding(\n                padding: const EdgeInsets.all(8.0),\n                child: RaisedButton(\n                  child: Text('Read'),\n                  onPressed: () {\n                    _read();\n                  },\n                ),\n              ),\n              Padding(\n                padding: const EdgeInsets.all(8.0),\n                child: RaisedButton(\n                  child: Text('Save'),\n                  onPressed: () {\n                    _save();\n                  },\n                ),\n              ),\n            ],\n          ),\n        );\n      }\n      \n      // Replace these two methods in the examples that follow\n      \n      _read() async {\n        final prefs = await SharedPreferences.getInstance();\n        final key = 'my_int_key';\n        final value = prefs.getInt(key) ?? 0;\n        print('read: $value');\n      }\n      \n      _save() async {\n        final prefs = await SharedPreferences.getInstance();\n        final key = 'my_int_key';\n        final value = 42;\n        prefs.setInt(key, value);\n        print('saved $value');\n      }\n    }\n```\n\nIn this minimal app setup, we are going to save an integer to shared preferences. Because I am trying to make the app as simple as possible, I hard coded the integer `42` as the value to save. In a production app we would get this value from somewhere else, for example, from a text field or a scroll position or a preferred font size. See [First steps with Flutter: Responding to user input](https://pusher.com/tutorials/flutter-user-input) for some examples of how to get user input. \n\nRun the app and press the **Read** button. We are trying to read a value that has never been set, so you should see the following output:\n\n```\n    read: 0\n```\n\nNow press the **Save** button. This will save the integer `42`  to shared preferences. Then press the **Read** button again. You should see the following output:\n\n```\n    saved: 42\n    read: 42\n```\n\nEven if you close the app and restart it the read value should still be `42`.\n\n### Explanation\n\nLet's take a look at the code in the `_read()` method from above:\n\n``` dart\n    _read() async {\n      final prefs = await SharedPreferences.getInstance();\n      final key = 'my_int_key';\n      final value = prefs.getInt(key) ?? 0;\n      print('read: $value');\n    }\n```\n\nNotes:\n\n- Any read/write to data storage can be expensive so you have to do it in an `async` method and `await` the shared preference instance before trying to read from it. \n- Shared preferences use key-value pairs to save data. To get a saved integer we use the `getInt()` method and pass in our key to look up. \n- The `??` [double question mark operator](https://stackoverflow.com/a/54031805/3681880) means \"if null\", so if the key that we are looking up doesn't exist, then we will use the default value after the `??`, in this case `0`.\n\nIn the `_save()` method above we use `setInt()` to save an integer value for a particular key string.\n\n``` dart\n    prefs.setInt(key, value);\n```\n\nThe SharedPreferences types that you can save are:\n\n- int\n- double\n- bool\n- string\n- stringList\n\nYou can see examples of these [here](https://stackoverflow.com/a/54031842/3681880). Play around with the code above to save some of the other types.\n\n\n## Saving to a database\n\nFor large amounts of data SharedPreferences is not a good option. Here are some examples of the kind of data I am talking about:\n\n- Names and addresses\n- A word frequency list\n- High scores\n\nIn iOS we would use Core Data and in Android we would use SQLite to store that kind of data. Because of the complexities of dealing with Core Data, when I was developing iOS apps I ended up ignoring Core Data and just using an SQLite plugin. This greatly simplified cross platform development. Flutter takes this to a whole new level by allowing us to effectively ignore the entire platform.\n\nIn Flutter we can interact with an SQLite database through a plugin called [SQFlite](https://pub.dartlang.org/packages/sqflite). To set it up we will apply the following points:\n\n\n- We will keep the database management code in a database helper class. Doing so will help to isolate the plugin from the rest of the app. That way in the future if there are updates to the plugin, or if we want to use a different plugin, we will only have to update this one class. (If we wanted to further apply the principles of [clean architecture](https://pusher.com/tutorials/clean-architecture-introduction), we could define an interface for the database helper class to implement. That way the rest of the app could just use the interface and know nothing about the helper class. We won't do that today, though.)\n\n- The database helper will be a singleton class and it will maintain a single app-wide global reference to the database, which it will keep open. This will prevent the concurrency issues and memory leaks that can occur when multiple database connections are open at the same time and not closed properly.\n\n- We will also create a data model class that will mirror a row in the database. Creating such a class isn't strictly necessary for teaching you how to use SQFlite, but it greatly simplifies passing data around. The class will also include some convenience methods for converting the data to and from a Map object, which SQFlite uses to interact with the database. (Note that this data model class is different than the concept of an Entity in [clean architecture](https://pusher.com/tutorials/clean-architecture-introduction) theory. It's just a convenient way to pass around related data.)\n\nSo here is a summary of what we will be doing:\n\n- Add the dependency\n- Make a data model class\n- Make a database helper class\n- Use the above classes to read and save data in our app\n\nFor our minimal example below, we will use a simple database schema. Each row in the database table will have three columns:\n\n- id\n- word\n- frequency\n\nIn a full app you could use these to record the frequency of every word in a book or article.\n\n### Dependencies\n\nOpen your `pubspec.yaml` file and in the dependencies section add the following two lines:\n\n``` yaml\n      sqflite: ^1.0.0\n      path_provider: ^0.4.1\n```\n\nThe version numbers above were tested for this tutorial, but you can find the current versions at [sqflite](https://pub.dartlang.org/packages/sqflite) and [path_provider](https://pub.dartlang.org/packages/path_provider#-installing-tab-). We will use the path provider plugin to give us the data directory where we can store the database in Android and iOS. In Android this maps to the AppData directory, and in iOS to NSDocumentsDirectory.\n\n### Database helpers file\n\nCreate a new Dart file called `database_helpers.dart`. Dart allows us to put multiple classes in the same file (also known as a library), so we are going to put both our data model class and our database helper class in here.\n\nPaste the following code into the `database_helpers.dart` file. This is a modification of and expansion on the [documentation](https://pub.dartlang.org/packages/sqflite).\n\n``` dart\n    import 'dart:io';\n    import 'package:path/path.dart';\n    import 'package:sqflite/sqflite.dart';\n    import 'package:path_provider/path_provider.dart';\n    \n    // database table and column names\n    final String tableWords = 'words';\n    final String columnId = '_id';\n    final String columnWord = 'word';\n    final String columnFrequency = 'frequency';\n    \n    // data model class\n    class Word {\n    \n      int id;\n      String word;\n      int frequency;\n      \n      Word();\n      \n      // convenience constructor to create a Word object\n      Word.fromMap(Map\u003cString, dynamic\u003e map) {\n        id = map[columnId];\n        word = map[columnWord];\n        frequency = map[columnFrequency];\n      }\n      \n      // convenience method to create a Map from this Word object\n      Map\u003cString, dynamic\u003e toMap() {\n        var map = \u003cString, dynamic\u003e{\n          columnWord: word,\n          columnFrequency: frequency\n        };\n        if (id != null) {\n          map[columnId] = id;\n        }\n        return map;\n      }\n    }\n    \n    // singleton class to manage the database\n    class DatabaseHelper {\n    \n      // This is the actual database filename that is saved in the docs directory.\n      static final _databaseName = \"MyDatabase.db\";\n      // Increment this version when you need to change the schema.\n      static final _databaseVersion = 1;\n      \n      // Make this a singleton class.\n      DatabaseHelper._privateConstructor();\n      static final DatabaseHelper instance = DatabaseHelper._privateConstructor();\n      \n      // Only allow a single open connection to the database.\n      static Database _database;\n      Future\u003cDatabase\u003e get database async {\n        if (_database != null) return _database;\n        _database = await _initDatabase();\n        return _database;\n      }\n      \n      // open the database\n      _initDatabase() async {\n        // The path_provider plugin gets the right directory for Android or iOS.\n        Directory documentsDirectory = await getApplicationDocumentsDirectory();\n        String path = join(documentsDirectory.path, _databaseName);\n        // Open the database. Can also add an onUpdate callback parameter.\n        return await openDatabase(path,\n            version: _databaseVersion,\n            onCreate: _onCreate);\n      }\n      \n      // SQL string to create the database \n      Future _onCreate(Database db, int version) async {\n        await db.execute('''\n              CREATE TABLE $tableWords (\n                $columnId INTEGER PRIMARY KEY,\n                $columnWord TEXT NOT NULL,\n                $columnFrequency INTEGER NOT NULL\n              )\n              ''');\n      }\n      \n      // Database helper methods:\n      \n      Future\u003cint\u003e insert(Word word) async {\n        Database db = await database;\n        int id = await db.insert(tableWords, word.toMap());\n        return id;\n      }\n      \n      Future\u003cWord\u003e queryWord(int id) async {\n        Database db = await database;\n        List\u003cMap\u003e maps = await db.query(tableWords,\n            columns: [columnId, columnWord, columnFrequency],\n            where: '$columnId = ?',\n            whereArgs: [id]);\n        if (maps.length \u003e 0) {\n          return Word.fromMap(maps.first);\n        }\n        return null;\n      }\n      \n      // TODO: queryAllWords()\n      // TODO: delete(int id)\n      // TODO: update(Word word)\n    }\n```\n\n### Use the database\n\nNow open the `main.dart` file. We are going to use the same UI layout from the SharedPreferences example.\n\n![flutter-local-data-buttons](//images.ctfassets.net/1es3ne0caaid/47eDvWNF5YsM4cCAwEKSU6/862a1fb1a43d8d67d7ec3cbae809d5d8/flutter-local-data-buttons.png)\n\nTo keep this as simple as possible, we will be saving a hard coded word  `hello` with a hard coded word frequency of `15` to the database. This is what we would save in a real app if we counted the word “hello” occurring 15 times in a text passage.\n\nReplace the `_read()` method with\n\n``` dart\n      _read() async {\n        DatabaseHelper helper = DatabaseHelper.instance;\n        int rowId = 1;\n        Word word = await helper.queryWord(rowId);\n        if (word == null) {\n          print('read row $rowId: empty');\n        } else {\n          print('read row $rowId: ${word.word} ${word.frequency}');\n        }\n      }\n```\n\nAnd replace the `_save()` method with\n\n``` dart\n      _save() async {\n        Word word = Word();\n        word.word = 'hello';\n        word.frequency = 15;\n        DatabaseHelper helper = DatabaseHelper.instance;\n        int id = await helper.insert(word);\n        print('inserted row: $id');\n      }\n```\n\nYou will need to import the package that you created above with the database helper and data model class.\n\n``` dart\n    // I called my project `flutter_saving_data`. If you called yours something\n    // different then adjust the import location.\n    import 'package:flutter_saving_data/database_helpers.dart';\n```\n\nRun the app (I had to do a full stop and restart). First press the **Read** button, which will try to query row 1. We haven’t inserted a row yet, though, so you should see the following output:\n\n```\n    read row 1: empty\n```\n\nNow press the **Save** button to insert a row whose word column is `hello` and whose frequency column is `15`. Then press the **Read** button again to query row 1. You should see\n\n```\n    inserted row: 1\n    read row 1: hello 15\n```\n\nCongratulations! You have written to and read from a database.\n\n### Challenge\n\n- Continuing to press the **Save** button will insert more rows. The row ID will be auto-incremented. Try changing the word and frequency of the inserted row. Then change the `rowId` in the `_read()` method to query other rows.\n- Modify the app so that when you press the Read button it will list all of the rows in the database. Hint: `db.query(tableWords)` returns a list of every row as a Map.\n- Modify the app so that when you press the Save button it will either update or delete an existing row. See the [documentation](https://pub.dartlang.org/packages/sqflite) for help.\n\n\n## Saving to a file\n\nNot all data fits well in a database. Sometimes the easiest way to store it is in a file. Here are some examples of when you might want to save data in a file:\n\n- Exporting database content as a csv file\n- Creating a log file\n- Converting a canvas bitmap to a png file\n\nIn the minimal example below we will save a string to a text file and then read it back again.\n\n### Dependency\n\nYou should have already added the [path_provider](https://pub.dartlang.org/packages/path_provider) dependency to your `pubspec.yaml` file when you did the last section. But in case you came directly here, you can add it now:\n\n```\n      path_provider: ^0.4.1\n```\n\n### Minimal example\n\nThe UI is still the same as before.\n\n![flutter-local-data-buttons](//images.ctfassets.net/1es3ne0caaid/47eDvWNF5YsM4cCAwEKSU6/862a1fb1a43d8d67d7ec3cbae809d5d8/flutter-local-data-buttons.png)\n\nWhen we press the Save button it will save some text to a file. When we press the Read button it will read the text file.\n\nUse the same `main.dart` file that we had above, but replace the `_read()` and `_save()` methods with the code below.\n\n``` dart\n      _read() async {\n        try {\n          final directory = await getApplicationDocumentsDirectory();\n          final file = File('${directory.path}/my_file.txt');\n          String text = await file.readAsString();\n          print(text);\n        } catch (e) {\n          print(\"Couldn't read file\");\n        }\n      }\n      \n      _save() async {\n        final directory = await getApplicationDocumentsDirectory();\n        final file = File('${directory.path}/my_file.txt');\n        final text = 'Hello World!';\n        await file.writeAsString(text);\n        print('saved');\n      }\n```\n\nYou will have to add the following two imports:\n\n``` dart\n    import 'dart:io';\n    import 'package:path_provider/path_provider.dart';\n```\n\nRestart the app and press the **Read** button. The file doesn’t exist yet so you should see: \n\n```\n    Couldn't read file\n```\n\nNow press the **Save** button. This will create a file and save the hardcoded string `Hello World!` to it. Then press the **Read** button again. You should see the following output:\n\n```\n    saved\n    Hello World!\n```\n\nGreat! We were able to read and write a text file. The File class also has `writeAsBytes()` and `readAsBytes()` methods for non-text files.\n\n\n## Conclusion\n\nIn this tutorial, we learned three different ways to save data locally. For small amounts of discrete data, shared preferences is a good option. If you have a long list of data items, though, a database is a better choice. In other situations, saving data in a file makes more sense. All of these are local storage options. If the app is uninstalled then the user will lose this data. To prevent data loss, you could use a cloud storage API to backup user data online. This has the added benefit of being able to sync data across devices. However, it also makes you responsible for protecting users' private data. But cloud storage is a lesson for a different day. For now continue to hone your skills at storing data locally.\n\nThe [source code for this tutorial](https://github.com/suragch/flutter_saving_data) is available on GitHub. (If you got stuck on the database challenge, you can find the answers there, too.)","metaTitle":"How to save data locally in Flutter","metaDescription":"This tutorial looks at saving data locally with Flutter. It provides code samples for three methods: saving to shared preferences, to a database, and to a file. You will learn when to use each method, as well as the basic Flutter code and dependencies needed."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"30h9IABcq3OWr4LDqFW88v","type":"Entry","createdAt":"2019-01-30T16:57:25.936Z","updatedAt":"2019-01-30T17:18:17.633Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Mastering Flutter ListViews","url":"flutter-listviews","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"58WBWjhcWcuAMI6qIAyiC4","type":"Entry","createdAt":"2018-12-13T20:46:00.073Z","updatedAt":"2018-12-13T20:46:36.867Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Suragch","url":"suragch","email":"studymongolian@gmail.com","twitter":"https://twitter.com/suragch","github":"https://github.com/suragch","guestWriter":true}}],"projectRepo":"https://github.com/suragch/flutter_listview","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2019-01-30","description":"This tutorial takes an in-depth look at working with lists in Flutter. You will learn how to use the ListView object to create and customize increasingly complex lists.","prerequisite":"You will need Dart and Flutter set up on your system.","content":"## Introduction\n\nIf you have done any Android or iOS development before, you are going to love how easy it is to make ListViews in Flutter. In this article we will use simple examples to look at all of the common use cases for making them. Consider this page a reference. Bookmark it and come back here to copy-and-paste the code snippets as starters in your own projects.\n\nFirst we will look at the main types of ListViews that are available. After that I'll show you how to style the items. Finally I'll cover how to make changes by adding and removing items in the list.\n\n## Prerequisites\n\nI'm assuming that you have the Flutter development environment set up and that you have a basic knowledge of how to make an app. If not, check out the following links:\n\n- [Setting up Flutter](https://flutter.io/docs/get-started/install)\n- [First Steps with Flutter: Exploring widgets](https://pusher.com/tutorials/flutter-widgets)\n- [First Steps with Flutter: Building layouts](https://pusher.com/tutorials/flutter-building-layouts)\n- [First Steps with Flutter: Responding to user input](https://pusher.com/tutorials/flutter-user-input)\n\nI'm using Android Studio with Flutter 1.0 for this article, but you should be fine if you are using another IDE.\n\n## Setup\n\nStart a new Flutter project. I'm calling mine `flutter_listview`.\n\nOpen `main.dart` and replace the code with the following:\n\n``` dart\n    import 'package:flutter/material.dart';\n    \n    void main() =\u003e runApp(MyApp());\n    \n    class MyApp extends StatelessWidget {\n      @override\n      Widget build(BuildContext context) {\n        return MaterialApp(\n          debugShowCheckedModeBanner: false,\n          title: 'ListViews',\n          theme: ThemeData(\n            primarySwatch: Colors.teal,\n          ),\n          home: Scaffold(\n            appBar: AppBar(title: Text('ListViews')),\n            body: BodyLayout(),\n          ),\n        );\n      }\n    }\n    \n    class BodyLayout extends StatelessWidget {\n      @override\n      Widget build(BuildContext context) {\n        return _myListView(context);\n      }\n    }\n    \n    // replace this function with the code in the examples\n    Widget _myListView(BuildContext context) {\n      return ListView();\n    }\n```\n\nNote the `_myListView()` function at the end. You will be replacing this with the code in the examples below.\n\n\n## Basic types of ListViews\n\n### Static ListView\n\nIf you have a short list of items that don't change, then you can use the default ListView constructor to make it. This is useful for making something like a settings menu page.\n\nReplace `_myListView()` with the following:\n\n``` dart\n    Widget _myListView(BuildContext context) {\n      return ListView(\n        children: \u003cWidget\u003e[\n          ListTile(\n            title: Text('Sun'),\n          ),\n          ListTile(\n            title: Text('Moon'),\n          ),\n          ListTile(\n            title: Text('Star'),\n          ),\n        ],\n      );\n    }\n```\n\nRun the app and you should see the following image. (After this when refreshing, usually [hot reload](https://flutter.io/docs/development/tools/hot-reload) works fine, but I find at times I need to do a hot restart or even completely stop and restart the app.) \n\n![flutter-listview-1](//images.ctfassets.net/1es3ne0caaid/WeYaxcnncEFIuNvQ5hSju/f40791f0c15e67f79b44a72f841ea94e/flutter-listview-1.png)\n\nLook back at the code. The children of the ListView were ListTiles. A ListTile is a special widget that is preconfigured to handle the most common layouts that you would want in a ListView. Our list above only included a title, but a ListTile can also include subtitles, icons, and images. We will come back to ListTiles when we look at styling below.\n\nIf you want to add dividers between the rows then use the  `ListTile.divideTiles` constructor.\n\n``` dart\n    Widget _myListView(BuildContext context) {\n      return ListView(\n        children: ListTile.divideTiles(\n          context: context,\n          tiles: [\n            ListTile(\n              title: Text('Sun'),\n            ),\n            ListTile(\n              title: Text('Moon'),\n            ),\n            ListTile(\n              title: Text('Star'),\n            ),\n          ],\n        ).toList(),\n      );\n    }\n```\n\nThe lines are faint, but look carefully:\n\n![flutter-listview-2](//images.ctfassets.net/1es3ne0caaid/5Mp1XkOyQeLjzsHlJh8y1A/beace54a59e4aeeb025ac42e98919c36/flutter-listview-2.png)\n\n### Dynamic ListView\n\nAll of the elements of a static ListView get created at once. This is fine for a short list but not for a long list. You can make a dynamically created ListView by using the `ListView.builder()` constructor. This will create the ListView items only when they need to be displayed on the screen. It works like an Android RecyclerView but is a lot easier to set up.\n\nReplace `_myListView()` with the following:\n\n``` dart\n    Widget _myListView(BuildContext context) {\n      \n      // backing data\n      final europeanCountries = ['Albania', 'Andorra', 'Armenia', 'Austria', \n        'Azerbaijan', 'Belarus', 'Belgium', 'Bosnia and Herzegovina', 'Bulgaria',\n        'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia', 'Finland',\n        'France', 'Georgia', 'Germany', 'Greece', 'Hungary', 'Iceland', 'Ireland',\n        'Italy', 'Kazakhstan', 'Kosovo', 'Latvia', 'Liechtenstein', 'Lithuania',\n        'Luxembourg', 'Macedonia', 'Malta', 'Moldova', 'Monaco', 'Montenegro',\n        'Netherlands', 'Norway', 'Poland', 'Portugal', 'Romania', 'Russia',\n        'San Marino', 'Serbia', 'Slovakia', 'Slovenia', 'Spain', 'Sweden', \n        'Switzerland', 'Turkey', 'Ukraine', 'United Kingdom', 'Vatican City'];\n        \n      return ListView.builder(\n        itemCount: europeanCountries.length,\n        itemBuilder: (context, index) {\n          return ListTile(\n            title: Text(europeanCountries[index]),\n          );\n        },\n      );\n      \n    }\n```\n\nWhich gives:\n\n![flutter-listview-3](//images.ctfassets.net/1es3ne0caaid/7hJOxtACCD3bJ68rEhs9U8/edcf45205d1533721db8ef3e4d729f88/flutter-listview-3.gif)\n\nLook back at the code. I provided an `itemCount` that tells the ListView how many list items there will be. I also provided an `itemBuilder` function that dynamically builds each ListTile as it comes into view. The function provides the BuildContext as the `context` parameter and the item position as the `index` parameter. The `index` makes it convenient to get the data items from the list of European country names that we are using as the backing data.\n\n### Infinite list\n\nI remember struggling trying to make infinite lists in the past with Android or iOS. Flutter makes it simple, though. Just remove the `itemCount` parameter from the `ListView.builder` constructor. Since Europe doesn't have an infinite number of countries, we'll change the ListTile to display the row index.\n\nReplace `_myListView()` with the following:\n\n``` dart\n    Widget _myListView(BuildContext context) {\n      return ListView.builder(\n        itemBuilder: (context, index) {\n          return ListTile(\n            title: Text('row $index'),\n          );\n        },\n      );\n    }\n```\n\nWhich gives:\n\n![flutter-listview-4](//images.ctfassets.net/1es3ne0caaid/6B2AeXDdRbPlaujzIuq0nM/788519138a3062c16eb97fa683c928a9/flutter-listview-4.gif)\n\nYou can scroll all day and you'll never get to the end. That was way too easy. I love it.\n\nIf you want to add dividers between tiles in a dynamic ListView, you can use the `ListView.separated` constructor.\n\n``` dart\n    Widget _myListView(BuildContext context) {\n      return ListView.separated(\n        itemCount: 1000,\n        itemBuilder: (context, index) {\n          return ListTile(\n            title: Text('row $index'),\n          );\n        },\n        separatorBuilder: (context, index) {\n          return Divider();\n        },\n      );\n    }\n```\n\n![flutter-listview-5](//images.ctfassets.net/1es3ne0caaid/3ANoVixMGY7ASb23IWv4mY/12c44705b654bdc2bb6ca269eec8bc43/flutter-listview-5.png)\n\nAgain, you have to look carefully to see the dividers. You can add arguments to `Divider()` if you want to change the line height or color.\n\n### Horizontal ListView\n\nIt's also really easy to make a horizontally scrolling ListView. All you have to do is specify the `scrollDirection` as horizontal. Since ListTiles aren't designed for horizontal ListViews, we will use a simple custom layout.\n\nReplace `_myListView()` with the following:\n\n``` dart\n    Widget _myListView(BuildContext context) {\n      return ListView.builder(\n        scrollDirection: Axis.horizontal,\n        itemBuilder: (context, index) {\n          return Container(\n            margin: const EdgeInsets.symmetric(horizontal: 1.0),\n            color: Colors.tealAccent,\n            child: Text('$index'),\n          );\n        },\n      );\n    }\n```\n\nWhich gives:\n\n![flutter-listview-6](//images.ctfassets.net/1es3ne0caaid/3PXIdl10s2eeO5mx09ZThQ/ecc620e717c2c684194a6a15eca9994f/flutter-listview-6.gif)\n\n## Styling\n\nWe’ve covered the main ListView types above, but they were pretty plain. Flutter offers a lot of options to make them more beautiful.\n\n### ListTile customization\n\nThe Flutter team designed the ListTile widget to handle the normal content that you would want in a list. This means that most of the time there is no need to define a custom layout. You can just use the default ListTile for each item in the list. When we made a ListView in the example above we only used the title option. But we can also show subtitles, images, and icons.\n\nReplace `_myListView()` with the following:\n\n``` dart\n    Widget _myListView(BuildContext context) {\n      return ListView(\n        children: \u003cWidget\u003e[\n          ListTile(\n            leading: Icon(Icons.wb_sunny),\n            title: Text('Sun'),\n          ),\n          ListTile(\n            leading: Icon(Icons.brightness_3),\n            title: Text('Moon'),\n          ),\n          ListTile(\n            leading: Icon(Icons.star),\n            title: Text('Star'),\n          ),\n        ],\n      );\n    }\n```\n\nThe `leading` is for adding an icon or image at the start of the ListTile.\n\n![flutter-listview-7](//images.ctfassets.net/1es3ne0caaid/7sGbYoFwg7wSp8AIvduQnm/f4c193384441af82e750f7ea2c8186ae/flutter-listview-7.png)\n\nYou can also add an icon at the end if you specify the `trailing` attribute.\n\n``` dart\n    ListTile(\n      leading: Icon(Icons.wb_sunny),\n      title: Text('Sun'),\n      trailing: Icon(Icons.keyboard_arrow_right),\n    ),\n```\n\n![flutter-listview-8](//images.ctfassets.net/1es3ne0caaid/4wZWbOsEF6rlq0gM9dbqmF/4c919d5e02e0683046838e57b7070788/flutter-listview-8.png)\n\nThe right arrow icon makes it look like the list items are clickable, but they aren't. Not yet. We will see how to add touch events in the next section. It's easy. (Hint: `onTap` )\n\nInstead of icons, we can also use images. The recommended image option is to use a CircleAvatar widget. \n\nReplace `_myListView()` with the following:\n\n``` dart\n    Widget _myListView(BuildContext context) {\n      return ListView(\n        children: \u003cWidget\u003e[\n          ListTile(\n            leading: CircleAvatar(\n              backgroundImage: AssetImage('assets/sun.jpg'),\n            ),\n            title: Text('Sun'),\n          ),\n          ListTile(\n            leading: CircleAvatar(\n              backgroundImage: AssetImage('assets/moon.jpg'),\n            ),\n            title: Text('Moon'),\n          ),\n          ListTile(\n            leading: CircleAvatar(\n              backgroundImage: AssetImage('assets/stars.jpg'),\n            ),\n            title: Text('Star'),\n          ),\n        ],\n      );\n    }\n```\n\nIt won’t work yet because we need to add the images.\n\nYou could have used `NetworkImage(imageUrl)` instead of `AssetImage(path)`. I chose AssetImage, though, so that everything is self-contained here. Create an `assets` folder in the project’s root directory and add the following images to it: \n\n\n![flutter-listview-9](//images.ctfassets.net/1es3ne0caaid/7CGK6r81g3JWnpwrYqwWpk/d2b19ee516bfadf14a5964be528e9549/flutter-listview-9.jpeg)\n![flutter-listview-10](//images.ctfassets.net/1es3ne0caaid/7FnTXslg1RbJLj0q0rTNDI/41f0684e2e4581c5f6a9b46c12d5a23e/flutter-listview-10.jpeg) ![flutter-listview-11](//images.ctfassets.net/1es3ne0caaid/4Kdpo8HpXspuCbDh8M6KpE/32edc7b2cf6e3fe2c0bd1c0709988424/flutter-listview-11.jpeg)\n\nIn `pubspec.yaml` register the assets location:\n\n``` yaml\n    flutter:\n      assets:\n        - assets/\n```\n\nIf you haven't done this before and are running into problems, you can [check out this post](https://stackoverflow.com/a/53752071/3681880) for more help. \n\nDo a full restart (stop and start) of the app. This gives us the following:\n\n![flutter-listview-12](//images.ctfassets.net/1es3ne0caaid/59a1ieeFPcpJ5i1utPrnyF/42d82ed28f994473c8d66540bfe7163d/flutter-listview-12.png)\n\nBefore we leave ListTile customization, one last thing we should cover is subtitles. Edit the code above to add a `subtitle` argument.\n\n``` dart\n    ListTile(\n      leading: CircleAvatar(\n        backgroundImage: AssetImage('assets/sun.jpg'),\n      ),\n      title: Text('Sun'),\n      subtitle: Text('93 million miles away'), //           \u003c-- subtitle\n    ),\n```\n\n![flutter-listview-13](//images.ctfassets.net/1es3ne0caaid/5NohAQGypaElWL1hJRvDLy/539252f50741cc2690219e59f2c3cb53/flutter-listview-13.png)\n\nAs you can see, the subtitle adds a line of smaller text below the title.\n\n### Cards\n\nCards are a great way to make your list look classy. All you have to do is wrap your ListTile with a Card widget.\n\nReplace `_myListView()` with the following:\n\n``` dart\n    Widget _myListView(BuildContext context) {\n    \n      final titles = ['bike', 'boat', 'bus', 'car',\n      'railway', 'run', 'subway', 'transit', 'walk'];\n      \n      final icons = [Icons.directions_bike, Icons.directions_boat,\n      Icons.directions_bus, Icons.directions_car, Icons.directions_railway,\n      Icons.directions_run, Icons.directions_subway, Icons.directions_transit,\n      Icons.directions_walk];\n      \n      return ListView.builder(\n        itemCount: titles.length,\n        itemBuilder: (context, index) {\n          return Card( //                           \u003c-- Card widget\n            child: ListTile(\n              leading: Icon(icons[index]),\n              title: Text(titles[index]),\n            ),\n          );\n        },\n      );\n    }\n```\n\nWhich gives:\n\n![flutter-listview-14](//images.ctfassets.net/1es3ne0caaid/1Ein4sL1bprOeNEVqtq1NO/86f6e8aaf24b660e00d2703171dc7d10/flutter-listview-14.png)\n\nPlay around with the Card attributes. You can change the shadow by adjusting the `elevation`. Also try changing the `shape` and `margin`.\n\n### Custom list item\n\nIf a ListTile doesn't fit your needs, you are free to design your own tile. Remember, all that ListView wants is a list of widgets. Any widget is fine. I recently worked on an app that required multiple columns in each list item. Here is a simplified example.\n\n``` dart\n    Widget _myListView(BuildContext context) {\n    \n      // the Expanded widget lets the columns share the space\n      Widget column = Expanded(\n        child: Column(\n          // align the text to the left instead of centered\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: \u003cWidget\u003e[\n            Text('Title', style: TextStyle(fontSize: 16),),\n            Text('subtitle'),\n          ],\n        ),\n      );\n      \n      return ListView.builder(\n        itemBuilder: (context, index) {\n          return Card(\n            child: Padding(\n              padding: const EdgeInsets.all(8.0),\n              child: Row(\n                children: \u003cWidget\u003e[\n                  column,\n                  column,\n                ],\n              ),\n            ),\n          );\n        },\n      );\n      \n    }\n```\n\n![flutter-listview-15](//images.ctfassets.net/1es3ne0caaid/6WpACXJJOUnjH2QymEYxDQ/076653c4746e8472789c9f219fd5fffd/flutter-listview-15.png)\n\n\n## Touch detection\n\nIf you are using a ListTile, all you have to do to respond to user touch is to add an `onTap` or `onLongTouch` callback.\n\nReplace `_myListView()` with the following:\n\n``` dart\n    Widget _myListView(BuildContext context) {\n      return ListView(\n        children: \u003cWidget\u003e[\n          ListTile(\n            title: Text('Sun'),\n            trailing: Icon(Icons.keyboard_arrow_right),\n            onTap: () {\n              print('Sun');\n            },\n          ),\n          ListTile(\n            title: Text('Moon'),\n            trailing: Icon(Icons.keyboard_arrow_right),\n            onTap: () {\n              print('Moon');\n            },\n          ),\n          ListTile(\n            title: Text('Star'),\n            trailing: Icon(Icons.keyboard_arrow_right),\n            onTap: () {\n              print('Star');\n            },\n          ),\n        ],\n      );\n    }\n```\n\nSetting the `onTap` parameter allows us to respond when the row is clicked. Here we are just printing a string. (Make sure the Run tab is selected in Android Studio to see the print output.)\n\n![flutter-listview-16](//images.ctfassets.net/1es3ne0caaid/1Trhn6vkFDOqx9F5E4SItT/fe1c6122b6dc5e7b223fd3a3865f649b/flutter-listview-16.gif)\n\nIn a more realistic situation we would probably navigate to a new screen (see [Responding to user input](https://pusher.com/tutorials/flutter-user-input)) or show a detail view on a tablet.\n\nIf you are working with a custom list item layout instead of a ListTile, you can just wrap your widget in an InkWell. Let’s modify our custom two-column row from above:\n\n``` dart\n      return ListView.builder(\n        itemBuilder: (context, index) {\n          return Card(\n            child: InkWell(\n              onTap: () {\n                print('tapped');\n              },\n              child: Padding(\n                padding: const EdgeInsets.all(8.0),\n                child: Row(\n                  children: \u003cWidget\u003e[\n                    column,\n                    column,\n                  ],\n                ),\n              ),\n            ),\n          );\n        },\n      );\n```\n\n![flutter-listview-17](//images.ctfassets.net/1es3ne0caaid/M2hPyAEQsuH3Tc8FpSn8P/91df6d6e47eac534e94a6b808d6884cd/flutter-listview-17.gif)\n\nOf course there are other options, too. We could wrap each column separately in an InkWell or add a button or some other gesture detector.\n\n\n## Updating list data\n\n### Adding and deleting rows in a ListView\n\nIt is pretty easy to update the items in a normal ListView. All you have to do is use a Stateful widget and call `setState()` whenever the row data changes.\n\nSince we need a Stateful widget, replace both `BodyLayout` and `_myListView()` with the following code:\n\n``` dart\n    class BodyLayout extends StatefulWidget {\n      @override\n      BodyLayoutState createState() {\n        return new BodyLayoutState();\n      }\n    }\n    \n    class BodyLayoutState extends State\u003cBodyLayout\u003e {\n    \n      List\u003cString\u003e titles = ['Sun', 'Moon', 'Star'];\n      \n      @override\n      Widget build(BuildContext context) {\n        return _myListView();\n      }\n      \n      Widget _myListView() {\n        return ListView.builder(\n          itemCount: titles.length,\n          itemBuilder: (context, index) {\n            final item = titles[index];\n            return Card(\n              child: ListTile(\n                title: Text(item),\n                \n                onTap: () { //                                  \u003c-- onTap\n                  setState(() {\n                    titles.insert(index, 'Planet');\n                  });\n                },\n                \n                onLongPress: () { //                            \u003c-- onLongPress\n                  setState(() {\n                    titles.removeAt(index);\n                  });\n                },\n                \n              ),\n            );\n          },\n        );\n      }\n    }\n```\n\nWhen you tap an item it adds a \"Planet\" item at that index. When you long press an item, it removes it.\n\n![flutter-listview-18](//images.ctfassets.net/1es3ne0caaid/4dKobtWDlTaKKJ6wNLdAkr/989bee2ec96a2de7aa5de40472ac15ba/flutter-listview-18.gif)\n\nThe problem with this method, though, is that the changes are abrupt. To make adding and deleting rows look nicer, Flutter has an AnimatedList widget.\n\n### Adding and deleting rows in an AnimatedList\n\nReplace the `BodyLayoutState` class with the following code:\n\n``` dart\n    class BodyLayoutState extends State\u003cBodyLayout\u003e {\n    \n      // The GlobalKey keeps track of the visible state of the list items\n      // while they are being animated.\n      final GlobalKey\u003cAnimatedListState\u003e _listKey = GlobalKey();\n      \n      // backing data\n      List\u003cString\u003e _data = ['Sun', 'Moon', 'Star'];\n      \n      @override\n      Widget build(BuildContext context) {\n        return Column(\n          children: \u003cWidget\u003e[\n            SizedBox(\n              height: 300,\n              child: AnimatedList(\n                // Give the Animated list the global key\n                key: _listKey,\n                initialItemCount: _data.length,\n                // Similar to ListView itemBuilder, but AnimatedList has\n                // an additional animation parameter.\n                itemBuilder: (context, index, animation) {\n                  // Breaking the row widget out as a method so that we can\n                  // share it with the _removeSingleItem() method.\n                  return _buildItem(_data[index], animation);\n                },\n              ),\n            ),\n            RaisedButton(\n              child: Text('Insert item', style: TextStyle(fontSize: 20)),\n              onPressed: () {\n                _insertSingleItem();\n              },\n            ),\n            RaisedButton(\n              child: Text('Remove item', style: TextStyle(fontSize: 20)),\n              onPressed: () {\n                _removeSingleItem();\n              },\n            )\n          ],\n        );\n      }\n      \n      // This is the animated row with the Card.\n      Widget _buildItem(String item, Animation animation) {\n        return SizeTransition(\n          sizeFactor: animation,\n          child: Card(\n            child: ListTile(\n              title: Text(\n                item,\n                style: TextStyle(fontSize: 20),\n              ),\n            ),\n          ),\n        );\n      }\n      \n      void _insertSingleItem() {\n        String newItem = \"Planet\";\n        // Arbitrary location for demonstration purposes\n        int insertIndex = 2;\n        // Add the item to the data list.\n        _data.insert(insertIndex, newItem);\n        // Add the item visually to the AnimatedList.\n        _listKey.currentState.insertItem(insertIndex);\n      }\n      \n      void _removeSingleItem() {\n        int removeIndex = 2;\n        // Remove item from data list but keep copy to give to the animation.\n        String removedItem = _data.removeAt(removeIndex);\n        // This builder is just for showing the row while it is still\n        // animating away. The item is already gone from the data list.\n        AnimatedListRemovedItemBuilder builder = (context, animation) {\n          return _buildItem(removedItem, animation);\n        };\n        // Remove the item visually from the AnimatedList.\n        _listKey.currentState.removeItem(removeIndex, builder);\n      }\n    }\n```\n\nThis is the result:\n\n![flutter-listview-19](//images.ctfassets.net/1es3ne0caaid/7uFJwrlX6cSOwFhxrx5BjT/e819338e40a448ae2b645a778cfb0b92/flutter-listview-19.gif)\n\nRead through the comments that I added to the code above. Here are some important points about AnimatedLists:\n\n\n- An AnimatedList needs a GlobalKey that keeps track of the widgets while they are being animated. Every time you make a change to the list, you need to update both the backing data list and the global key.\n- Our row widgets are stateless, but if your rows have state, then you will need a key for them, too. This helps the system know when a change actually happens. See [this video](https://www.youtube.com/watch?v=kn0EOS-ZiIc) from the Flutter team for more about that.\n- I used a SizedTransition as the animation here, but see the [documentation](https://flutter.io/docs/development/ui/widgets/animation) for other options. \n\n\n## Conclusion\n\nWe have taken a full tour of ListViews. You should have a solid understanding now of how to implement the vast majority of use cases that you will encounter. Check out the Further Study section below to see ListViews being used in more advanced situations.\n\nThe source code for this tutorial is available on [GitHub](https://github.com/suragch/flutter_listview).\n\n\n## Further study\n\n- [Flutter - Loading paged JSON data into the ListView](https://www.youtube.com/watch?v=EBpnjs-1-I8) \n- [The Boring Flutter Development Show](https://www.youtube.com/watch?v=CPmN4-i9zC8\u0026list=PLOU2XLYxmsIK0r_D-zWcmJ1plIcDNnRkK) ","metaTitle":"Mastering Flutter ListViews","metaDescription":"This tutorial takes an in-depth look at working with lists in Flutter. You will learn how to use the ListView object to create and customize increasingly complex lists."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4UU91vq6rmKIuc84We4ugW","type":"Entry","createdAt":"2019-01-30T22:00:00.716Z","updatedAt":"2019-02-04T14:16:57.179Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a login UI with Flutter","url":"login-ui-flutter","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/flutter_login_ui","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}}],"reviewDate":"2019-01-30","description":"This simple tutorial introduces Flutter through a practical example. You will gain a basic familiarity with Flutter by creating a project and build a simple login UI.","prerequisite":"You will need Flutter set up on your machine. This tutorial assumes you are using Visual Studio Code for development.","content":"## Introduction\n\nHey folks, in this tutorial we’ll take a look at the new Google SDK to develop reliable and great mobile apps: [Flutter](https://flutter.io). We’ll build a nice UI using Flutter SDK.\n\nAccording to its official site, \n\n\u003e Flutter allows you to build beautiful native apps on iOS and Android from a single codebase.\n\nFlutter enables developers to quickly develop and in an efficient way native mobile apps that can run both onAndroid and iOS devices. Isn’t that great 😌 ?\n\n\n## Demo\n\nHere is the final result of our app 😉 \n\n![flutter-login-ui-demo](//images.ctfassets.net/1es3ne0caaid/6rBfDE9g40sye0qYOMiyCq/71e0b8804adf3cd41ce5edbc2c157702/flutter-login-ui-demo.png)\n\nAs you might have seen, this is a login UI built with the superb Flutter SDK.\n\n## Prerequisites\n\nThis tutorial assumes a little knowledge of Flutter or [Dart](http://dartlang.org/). JavaScript knowledge will be helpful as well, especially ES6 features.\nYou should have:\n\n-  [Visual Studio Code](https://code.visualstudio.com/Download) editor installed on your machine if you haven’t yet. We’ll use it in our tutorial.\n- [Visual Studio Code Flutter plugin](https://flutter.io/docs/get-started/editor?tab=vscode)\n\n\n## Project setup\n\n\u003e **Important:** We’ll mainly focus on building our beautiful app. For this section, you can take a look [here](https://flutter.io/docs/get-started/install). This link is very helpful and will guide you through the installation of Flutter SDK on your machine(if you haven’t yet) regarding your OS.\n\nNow, open your code editor and hit  `ctrl+shift+p` or `cmd+shift+p` to create a new project, and give it a name, or simply run `flutter create your_project_name`.\nAfter that, you’ll end up with a fresh Flutter project.\n\n\n## Directory structure\n\nOnce the project is created, drag it into VS code. We’re using VS code because it has the most complete Flutter support (Dart syntax, code completion, debugging tools).\nBy default, you should see the following directory structure:\n\n- `android` - where Android-related files are stored. If you’ve done any sort of cross-platform mobile app development before, this, along with the `ios` folder should be pretty familiar.\n- `ios` - where iOS-related files are stored.\n- `lib` - this is where you’ll be working on most of the time. By default, it contains a `main.dart` file, this is the entry point file of the Flutter app.\n- `test` - this is where you put the unit testing code for the app. We won’t really be working on it in this tutorial.\n- `pubspec.yaml` - this file defines the version and build number of your app. It’s also where you define your dependencies. If you’re coming from a web development background, this file has the same job description as the `package.json` file so you can define the external packages (from the [Dart packages website](https://pub.dartlang.org/)) you want to use in here.\n\nNote that I’ve skipped on other folders and files because most of the time you won’t really need to touch them.\n\n\n## Defining our assets\n\nHead over to `pubspec.yaml` file and amend it like the following:\n\n``` yaml\n    //../pubspec.yaml\n    name: flutter_login_ui\n    description: A new Flutter project.\n    # The following defines the version and build number for your application.\n    # A version number is three numbers separated by dots, like 1.2.43\n    # followed by an optional build number separated by a +.\n    # Both the version and the builder number may be overridden in flutter\n    # build by specifying --build-name and --build-number, respectively.\n    # Read more about versioning at semver.org.\n    version: 1.0.0+1\n    environment:\n      sdk: \"\u003e=2.0.0-dev.68.0 \u003c3.0.0\"\n    dependencies:\n      flutter:\n        sdk: flutter\n      # The following adds the Cupertino Icons font to your application.\n      # Use with the CupertinoIcons class for iOS style icons.\n      cupertino_icons: ^0.1.2\n    dev_dependencies:\n      flutter_test:\n        sdk: flutter\n    # For information on the generic Dart part of this file, see the\n    # following page: https://www.dartlang.org/tools/pub/pubspec\n    # The following section is specific to Flutter.\n    flutter:\n      # The following line ensures that the Material Icons font is\n      # included with your application, so that you can use the icons in\n      # the material Icons class.\n      uses-material-design: true\n      # To add assets to your application, add an assets section, like this:\n      assets:\n        - logo.png\n      fonts:\n        - family: Montserrat\n          fonts:\n            - asset: fonts/Montserrat-Regular.ttf\n```    \n\nCreate  `assets` and `fonts` directories into the root of your Flutter project. You should respectively find their content at [this link](https://github.com/Ethiel97/flutter_login_ui/tree/master/assets) and [here](https://github.com/Ethiel97/flutter_login_ui/tree/master/fonts).\nWe add a `logo.png` to our `../assets` folder and the `Montserrat-Regular.ttf` font to our `../fonts` folder. Further in the tutorial we’ll make use of these assets in our app.\n\n\n## Build the UI\n\nLet’s take a look at the `..lib/main.dart` file and break down things:\n\nFirst, we import the [Material library](https://docs.flutter.io/flutter/material/material-library.html) from Flutter:\n\n``` dart     \n        import 'package:flutter/material.dart';\n```     \n\nAmong those are the `MaterialApp`, `Scaffold`, and `AppBar` widgets that we’re using inside our app. The methods that we’re using are either part of a library you’ve imported, or part of the Flutter framework itself.\n\nAfter that comes the following line:\n\n``` dart\n        void main() =\u003e runApp(MyApp())\n```        \n\nWell, this is the entry point of our whole program so it must always be defined if you want to render something on the screen. But what about the fat-arrow (`=\u003e`)? If you’re familiar with ES6 features in JavaScript, this is pretty much the same. It’s just a more concise way of defining functions, so we’re actually running the `runApp()` function inside the `main()` function. This function makes the `MyApp` widget the root of the widget tree. This effectively renders the widget, along with its children into the screen.\n\nNote that almost everything in Flutter is a widget, and each one can have its own set of properties and child widgets. We have two main types of widget in Flutter:\n\n- Stateful widget: manages its own internal state and keeps track of it.\n- Stateless widget: while this kind of widget doesn’t. For example a button doesn’t need to track of anything.\n\nThen we define our `MyApp` widget. Amend your `MyApp` class like the following (only change the title property) :\n\n``` dart\n    class MyApp extends StatelessWidget {\n      // This widget is the root of your application.\n      @override\n      Widget build(BuildContext context) {\n        return MaterialApp(\n          title: 'Flutter login UI',\n          theme: ThemeData(\n            // This is the theme of your application.\n            //\n            // Try running your application with \"flutter run\". You'll see the\n            // application has a blue toolbar. Then, without quitting the app, try\n            // changing the primarySwatch below to Colors.green and then invoke\n            // \"hot reload\" (press \"r\" in the console where you ran \"flutter run\",\n            // or simply save your changes to \"hot reload\" in a Flutter IDE).\n            // Notice that the counter didn't reset back to zero; the application\n            // is not restarted.\n            primarySwatch: Colors.blue,\n          ),\n          home: MyHomePage(title: 'Flutter Login'),\n        );\n      }\n    }\n```    \n\nThe code above returns a new `MaterialApp` widget defining our app title, our app theme, and our home page. As you can notice, it is a stateless widget.  To create a stateless widget, you need to extend the `StatelessWidget` [class](https://docs.flutter.io/flutter/widgets/StatelessWidget-class.html) like the following:\n\n\n``` dart\n     class MyApp extends StatelessWidget {\n          // ...\n        }\n```\n\nNow we’ll define our home widget, this time it is a stateful widget, this means it will contain fields that affect how it looks. No change here!\n\n``` dart\n    class MyHomePage extends StatefulWidget {\n      MyHomePage({Key key, this.title}) : super(key: key);\n      // This widget is the home page of your application. It is stateful, meaning\n      // that it has a State object (defined below) that contains fields that affect\n      // how it looks.\n      // This class is the configuration for the state. It holds the values (in this\n      // case the title) provided by the parent (in this case the App widget) and\n      // used by the build method of the State. Fields in a Widget subclass are\n      // always marked \"final\".\n      final String title;\n      @override\n      _MyHomePageState createState() =\u003e _MyHomePageState();\n    }\n```   \n\nThe following class will be responsible for defining our `MyHomePage` widget state. Amend it like the following:\n\n``` dart   \n    class _MyHomePageState extends State\u003cMyHomePage\u003e {\n      TextStyle style = TextStyle(fontFamily: 'Montserrat', fontSize: 20.0);\n      \n      @override\n      Widget build(BuildContext context) {\n    \n        final emailField = TextField(\n          obscureText: false,\n          style: style,\n          decoration: InputDecoration(\n              contentPadding: EdgeInsets.fromLTRB(20.0, 15.0, 20.0, 15.0),\n              hintText: \"Email\",\n              border:\n                  OutlineInputBorder(borderRadius: BorderRadius.circular(32.0))),\n        );\n        final passwordField = TextField(\n          obscureText: true,\n          style: style,\n          decoration: InputDecoration(\n              contentPadding: EdgeInsets.fromLTRB(20.0, 15.0, 20.0, 15.0),\n              hintText: \"Password\",\n              border:\n                  OutlineInputBorder(borderRadius: BorderRadius.circular(32.0))),\n        );\n        final loginButon = Material(\n          elevation: 5.0,\n          borderRadius: BorderRadius.circular(30.0),\n          color: Color(0xff01A0C7),\n          child: MaterialButton(\n            minWidth: MediaQuery.of(context).size.width,\n            padding: EdgeInsets.fromLTRB(20.0, 15.0, 20.0, 15.0),\n            onPressed: () {},\n            child: Text(\"Login\",\n                textAlign: TextAlign.center,\n                style: style.copyWith(\n                    color: Colors.white, fontWeight: FontWeight.bold)),\n          ),\n        );\n        \n        return Scaffold(\n          body: Center(\n            child: Container(\n              color: Colors.white,\n              child: Padding(\n                padding: const EdgeInsets.all(36.0),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.center,\n                  mainAxisAlignment: MainAxisAlignment.center,\n                  children: \u003cWidget\u003e[\n                    SizedBox(\n                      height: 155.0,\n                      child: Image.asset(\n                        \"assets/logo.png\",\n                        fit: BoxFit.contain,\n                      ),\n                    ),\n                    SizedBox(height: 45.0),\n                    emailField,\n                    SizedBox(height: 25.0),\n                    passwordField,\n                    SizedBox(\n                      height: 35.0,\n                    ),\n                    loginButon,\n                    SizedBox(\n                      height: 15.0,\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          ),\n        );\n      }\n    }\n\n\n```\n\n``` dart\n      TextStyle style = TextStyle(fontFamily: 'Montserrat', fontSize: 20.0);\n```\n\nFirst, we define a custom text style to apply to our UI elements. We use the `Montserrat` font as our `fontFamily`.\n\nInside the body of the class, we need to override the `build` function that returns our main widget.\nWe then define our UI elements, two text fields and a login button:\n\n\n- `emailField`: \n\n``` dart\n      final emailField = TextField(\n          style: style,\n          decoration: InputDecoration(\n              contentPadding: EdgeInsets.fromLTRB(20.0, 15.0, 20.0, 15.0),\n              hintText: \"Email\",\n              border:\n                  OutlineInputBorder(borderRadius: BorderRadius.circular(32.0))),\n        );\n```        \n\nThe `final` keyword simply tells our app that the object value won’t be modified throughout the app.  We define an input using the `TextField` widget, we added a hint,some style and decoration. \nWe use some padding for adding an empty space inside the surrounding area of the field.\nWe add a `borderRadius` to have a fancy rounded input field 😎 . \n\n\n- `passwordField`\n\n``` dart\n    final passwordField = TextField(\n          obscureText: true,\n          style: style,\n          decoration: InputDecoration(\n              contentPadding: EdgeInsets.fromLTRB(20.0, 15.0, 20.0, 15.0),\n              hintText: \"Password\",\n              border:\n                  OutlineInputBorder(borderRadius: BorderRadius.circular(32.0))),\n        );\n```\n\nThe definition of the password field is almost the same as the previous one, except that we add a property `obscureText: true` to hide input as we are typing, like a password field should behave.\n\n\n- `loginButton`\n\n``` dart \n    final loginButon = Material(\n          elevation: 5.0,\n          borderRadius: BorderRadius.circular(30.0),\n          color: Color(0xff01A0C7),\n          child: MaterialButton(\n            minWidth: MediaQuery.of(context).size.width,\n            padding: EdgeInsets.fromLTRB(20.0, 15.0, 20.0, 15.0),\n            onPressed: () {},\n            child: Text(\"Login\",\n                textAlign: TextAlign.center,\n                style: style.copyWith(\n                    color: Colors.white, fontWeight: FontWeight.bold)),\n          ),\n        );\n```       \n\nWe use the `Material` widget to add easily a shadow(`elevation` ) to our button. We also add a radius to have a rounded button. Last we add a button as a child our material widget which also take a `Text` widget as a child. Our button has an `onPressed` property that takes a function called whenever it is clicked.\n\nAfter that we put all these widgets together inside our `Scaffold` widget. Our form elements are aligned vertically inside a `Column` widget. Generally, we use the `SizedBox` widget just for spacing purposes.\nWe add an our image inside a `SizedBox` in order define a height for it 🙃 .\n\n``` dart    \n     return Scaffold(\n          body: Center(\n            child: Container(\n              color: Colors.white,\n              child: Padding(\n                padding: const EdgeInsets.all(36.0),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.center,\n                  mainAxisAlignment: MainAxisAlignment.center,\n                  children: \u003cWidget\u003e[\n                    SizedBox(\n                      height: 155.0,\n                      child: Image.asset(\n                        \"assets/logo.png\",\n                        fit: BoxFit.contain,\n                      ),\n                    ),\n                    SizedBox(height: 45.0),\n                    emailField,\n                    SizedBox(height: 25.0),\n                    passwordField,\n                    SizedBox(\n                      height: 35.0,\n                    ),\n                    loginButon,\n                    SizedBox(\n                      height: 15.0,\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          ),\n        );\n```\n\nOnce everything is done, the app should already be functional. If you don’t already have the app running, launch an Android emulator or iOS simulator instance and execute the following command from the root of the project directory:\n\n```\n    flutter run\n```\n\n## Conclusion\n\nThat’s it! In this tutorial, you learned how to create a beautiful login UI with Flutter. You also learned some basic concepts of the Flutter SDK. I do hope you acquired necessary knowledge in order to continue exploring Flutter. \n\nYou can find the code used in this tutorial on its [GitHub repo](https://github.com/Ethiel97/flutter_login_ui).","metaTitle":"Build a login UI with Flutter","metaDescription":"This simple tutorial introduces Flutter through a practical example. You will gain a basic familiarity with Flutter by creating a project and build a simple login UI."}}],"defaultValue":"Flutter","queryType":"tag","pages":2,"route":"/tutorials","query":{"tag":"Flutter","page":"1"}}},"page":"/tutorials","query":{"tag":"Flutter","page":"1"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Flutter&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:43:47 GMT -->
</html>