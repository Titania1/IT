<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=HTML&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:44:10 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">17</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; HTML</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials42a2.html?tag=HTML" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials0b3c.html?product=Beams&amp;tag=HTML" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; HTML"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/server-health-monitor-laravel.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a server health monitoring app with Laravel</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">In this tutorial, create a web app for monitoring the status of your servers in realtime using Laravel.  The app will of...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/spotify-currently-playing-ios-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building a Spotify-like currently playing feature: Part 2 - Building the iOS player</h3><p class="css-k12xad e5jrto45">When using music streaming services like Spotify, you can see realtime technology in action when you are using multiple ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/spotify-currently-playing-ios-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building a Spotify-like currently playing feature: Part 1 - Building the web API</h3><p class="css-k12xad e5jrto45">When using music streaming services like Spotify, you can see realtime technology in action when you are using multiple ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-ionic-part-4.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Cordova<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">CSS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">GraphQL<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Java</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an Instagram clone with Ionic: Part 4 - Testing your Ionic application on mobile devices</h3><p class="css-k12xad e5jrto45">This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functional...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-ionic-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Cordova<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">CSS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">GraphQL<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an Instagram clone with Ionic: Part 3 - Adding data dynamically and enabling realtime functionality</h3><p class="css-k12xad e5jrto45">This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functional...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-ionic-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">CSS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Cordova<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">GraphQL<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an Instagram clone with Ionic: Part 2 - Connecting to GraphQL servers using Apollo client</h3><p class="css-k12xad e5jrto45">This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functional...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-ionic-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">CSS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">TypeScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an Instagram clone with Ionic: Part 1 - Creating the interface</h3><p class="css-k12xad e5jrto45">This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functional...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-analytics-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live analytics dashboard using Go and MongoDB</h3><p class="css-k12xad e5jrto45">Use Go, MongoDB and Pusher Channels to monitor user interactions with your app. Build a simple demo app page and a monit...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/score-feed-chrome-extension.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live score feed Chrome extension</h3><p class="css-k12xad e5jrto45">This brief tutorial guides you through creating a simple Chrome extension. It hooks into a Node backend to provide a liv...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Prev</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials8ad0.html?product=Channels&amp;tag=HTML&amp;page=1" class="css-2wakph edg0byb1">1</a><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsc6a1.html?product=Channels&amp;tag=HTML&amp;page=2" class="css-5s6711 edg0byb1">2</a><a href="tutorialsc6a1.html?product=Channels&amp;tag=HTML&amp;page=2" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":17,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EKMjJqzQrOd6PFbAvIb8l","type":"Entry","createdAt":"2019-11-01T13:08:06.854Z","updatedAt":"2019-11-01T13:08:06.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a server health monitoring app with Laravel","url":"server-health-monitor-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/realtime-server-health-monitor","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}}],"reviewDate":"2019-09-04","description":"In this tutorial, create a web app for monitoring the status of your servers in realtime using Laravel.  The app will offer realtime monitoring of disk, CPU and memory. You can also add custom notifications and have the server send you a text message when the CPU usage goes above a set threshold.","prerequisite":"You will need to have Apache, PHP, Composer, MySQL, and Node installed on your machine.","content":"There are lots of server monitoring solutions out there. Most popular among them are Datadog and New Relic. Some server infrastructure providers such as DigitalOcean also comes with basic server monitoring features such as disk, CPU, and memory. There are also open-source solutions such as Nagios. But more often than not, especially on small projects, a lot of the functionality that these services offer is more than what you need. Aside from that, they’re usually not cheap. \n\nIf you’re like me and all you want is some basic functionality such as realtime monitoring of whether specific software on your server is running or not, then creating your own server monitoring app is the way to go.\n\nIn this tutorial, we’ll be creating a live server monitoring app with Laravel and Pusher Channels.\n\n\n## Prerequisites\n\nKnowledge of PHP is required to follow this tutorial. You also need to know basic server management for infrastructure providers like DigitalOcean or Linode. Things like [generating ssh keys](https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent) and [adding them to your remote server](https://www.digitalocean.com/docs/droplets/how-to/add-ssh-keys/). \n\n**Development environment**\nYou need to have Apache, PHP, Composer, MySQL, and Node installed on your machine. The easiest way to follow this tutorial if you don’t already have the development environment is to use either [Laravel Homestead](https://laravel.com/docs/master/homestead) or [Laravel Valet](https://laravel.com/docs/master/valet). If you have a bit more time, you can install [Laradock](https://laradock.io/) instead. This is the same environment that I’ve used for creating this tutorial.\n\nOut of the box, Laravel Homestead and Laradock will come pre-installed with the required software.\n\nIf you opt for Laravel Valet, you also need to install PHP, Composer, MySQL, and Node separately. For the HTTP server, it’s going to use PHP’s built-in server instead of Apache. Just follow their documentation for the instructions. \n\nA remote server to be monitored is also required.  Don’t assign a password to the ssh key you generate as the tool that we will be using for logging in remotely to the server doesn’t support logging in with ssh keys that require a password. This tutorial won’t be covering how to add ssh keys to a remote server. But if you’re using a Linux-based server, all you have to do is log in to it and append your local machine’s public ssh key to the `~/.ssh/authorized_keys` file in the server. \n\nLastly, you need to have a [Pusher account](https://pusher.com/channels) with an app instance which you can use for testing.\n\n**Package versions**\nThe following package versions are used for the app:\n\n- laravel/framework 5.8\n- pusher/pusher-php-server 4.0\n- spatie/laravel-server-monitor 1.0\n\nYou don’t have to use the same versions, but it’s good to know if you encounter any compatibility issues.\n\n\n## App overview\n\nWe’ll be building a live server monitor that will constantly check for various server status such as disk space, CPU, and memory. It will also check if the software you’re using to run your server is running or not. The data on the page will automatically be updated at a specific interval.\n\nHere’s what the app will look like:\n\n![laravel-service-health-monitor-img1](//images.ctfassets.net/1es3ne0caaid/TAJ5Uo7hHbyrI9S4r0lym/d8ef38973f5598ee5e75d884d37b3a1a/laravel-service-health-monitor-img1.png)\n\nYou can view the code on its [GitHub repo](https://github.com/anchetaWern/realtime-server-health-monitor).\n\n\n## Bootstrapping the app\n\nLet’s get started by creating a new Laravel project:\n\n```\n    composer create-project --prefer-dist laravel/laravel liveservermonitor\n```\n\nThis will create a new `liveservermonitor` folder on your working directory. Navigate inside that and it will serve as the root directory for this project.\n\n**Create and add the database config**\nLog in to the MySQL server and create the database that we will be using to store the status of the servers to be monitored:\n\n```\n    mysql -u root -p\n    CREATE DATABASE server_monitor;\n```\n\nNext, open the `.env` file and set your database credentials. Replace the values for the one’s which starts with `YOUR_`:\n\n```\n    DB_CONNECTION=mysql\n    DB_HOST=YOUR_DB_HOST\n    DB_PORT=3306\n    DB_DATABASE=server_monitor\n    DB_USERNAME=YOUR_DB_USERNAME\n    DB_PASSWORD=YOUR_DB_PASSWORD\n```\n\n**Install the backend dependencies**\nNext, we need to install the libraries we need:\n\n```\n    composer require spatie/laravel-server-monitor pusher/pusher-php-server\n```\n\nHere’s a breakdown of what each one does:\n\n- [**spatie/laravel-server-monitor**](https://github.com/spatie/laravel-server-monitor) - for implementing server monitoring features.\n- [**pusher/pusher-php-server**](https://github.com/pusher/pusher-http-php) - for implementing realtime communication between the backend and the frontend of the app.\n\nOnce the libraries are installed, we need to register the service provider for the laravel-server-monitor package. Open the `config/app.php` file and add the following under the `providers` array. While you’re there, uncomment the Broadcast service provider as well. This will let us use the [event broadcasting feature in Laravel](https://laravel.com/docs/master/broadcasting). We use it to broadcast the event for when laravel-server-monitor has finished checking the server status:\n\n```php\n    'providers' =\u003e [\n      // ...\n      App\\Providers\\BroadcastServiceProvider::class, // uncomment this\n      Spatie\\ServerMonitor\\ServerMonitorServiceProvider::class, // add this\n    ];\n```\n\nNext, generate the migration files for creating the tables to be used by laravel-server-monitor then run the migrations:\n\n```php\n    php artisan vendor:publish --provider=\"Spatie\\ServerMonitor\\ServerMonitorServiceProvider\" --tag=\"migrations\"\n    php artisan migrate\n```\n\nThis will create the `hosts` table:\n\n![laravel-service-health-monitor-img2](//images.ctfassets.net/1es3ne0caaid/4QMIoGZHgYXsRuNQqtfBsW/ecd5579b4017fc0cf550683e86664cbe/laravel-service-health-monitor-img2.png)\n\nAnd the `checks` table:\n\n![laravel-service-health-monitor-img3](//images.ctfassets.net/1es3ne0caaid/2ESXXBPXKZnsHSldnOiBc0/5d1c9addf7cd604f87695d7e99a43477/laravel-service-health-monitor-img3.png)\n\nThe `hosts` table stores all the information about the remote servers to be monitored, while the `checks` table stores the information for the various checks that you’ve added for each of the server (for example, disk space and MySQL).\n\nLastly, generate the configuration file for the laravel-server-monitor. This will create a `config/server-monitor.php` file. This is where we can configure the various settings for the library:\n\n```\n    php artisan vendor:publish --provider=\"Spatie\\ServerMonitor\\ServerMonitorServiceProvider\" --tag=\"config\"\n```\n\n**Install the frontend dependencies**\nAfter installing and configuring the backend dependencies, we can also install the frontend dependencies. First, install the default frontend libraries which Laravel depends on (includes Bootstrap, jQuery, and others):\n\n```\n    npm install\n```\n\n\u003e **Note**: This includes a bunch of libraries which we won’t be using. But we won’t really be importing them in any of our scripts so it’s okay even if we don’t remove them from the `package.json` file.\n\nOnce those are installed, we also need to install our own dependencies:\n\n```\n    npm install --save laravel-echo pusher-js visibilityjs\n```\n\nHere’s a break down of what each one does:\n\n- [**laravel-echo**](https://laravel.com/docs/master/broadcasting) - this will let us configure Pusher channels as a broadcaster. You can also use the pusher-js library directly if you’re sure you won’t be needing to use any other realtime subscription channels in the future. Using Laravel Echo is simply a convenience utility for normalizing the APIs.\n- [**pusher-js**](https://github.com/pusher/pusher-js) - the client-side component of Pusher Channels. Laravel Echo uses it behind the scenes to establish realtime communication between the backend and the frontend.\n- [**visibilityjs**](https://github.com/ai/visibilityjs) - for listening for when the page visibility changes. This acts as a wrapper to the [Page Visibility API](https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API) so it’s easier to use (normalized API across browsers).\n\n\n## Building the app\n\nNow we’re ready to build the app. We’ll first add the custom system checks, then we’ll create a custom notification channel so that the server has a way of notifying us when the system checks finishes running. After that, we’ll work on the frontend side of the app. Then finally, we’ll add the remote servers to be monitored and run the system checks.\n\nFirst, open the `config/server-monitor.php` file and inspect the `checks` array. These are the server checks that are built into laravel-server-monitor. In this tutorial, we won’t be using `elasticsearch` and `memcached` because the remote server that I’ll be using for testing doesn’t have it installed. From here, you can uncomment any checks that you don’t need. Though only do that if you’re sure that you won’t be using it in any of the servers you want to add for monitoring. You can actually disable specific checks to a server that’s already being monitored. I’ll show you how later:\n\n```php\n    // config/server-monitor.php\n    'checks' =\u003e [\n      'diskspace' =\u003e Spatie\\ServerMonitor\\CheckDefinitions\\Diskspace::class,\n      'elasticsearch' =\u003e Spatie\\ServerMonitor\\CheckDefinitions\\Elasticsearch::class,\n      'memcached' =\u003e Spatie\\ServerMonitor\\CheckDefinitions\\Memcached::class,\n      'mysql' =\u003e Spatie\\ServerMonitor\\CheckDefinitions\\MySql::class,\n    ]\n```\n\nAside from removing unneeded checks, this is also where we can add custom checks for checking if the software you’re using to run the server is running. And that’s exactly what we’ll be doing next. Specifically, we’ll add the following:\n\n- Check if Apache is running\n- Check if Beanstalkd is running\n- Get the memory usage\n- Get the average CPU usage\n\n**Checking if Apache is running**\nFirst, we’ll add the class for checking if Apache is running. You can do that by creating a `SystemChecks` folder inside the `app` directory and inside it create an `Apache.php` file:\n\n```php\n    \u003c?php\n    // app/SystemChecks/Apache.php\n    namespace App\\SystemChecks;\n    use Spatie\\ServerMonitor\\CheckDefinitions\\CheckDefinition;\n    use Symfony\\Component\\Process\\Process;\n    \n    class Apache extends CheckDefinition\n    {\n      public $command = 'service apache2 status';\n    \n      public function resolve(Process $process)\n      {\n        if (str_contains($process-\u003egetOutput(), 'active (running)')) {\n          $this-\u003echeck-\u003esucceed('is running');\n          return;\n        }\n    \n        $this-\u003echeck-\u003efail('is not running');\n      }\n    }\n```\n\nFrom the code above, you can see that we need to import both the `Spatie\\ServerMonitor\\CheckDefinitions\\CheckDefinition` and `Symfony\\Component\\Process\\Process` class to create a system check class. The class that you create has to extend the `CheckDefinition` class. \n\nThis requires you to add a `public $command` and implement the `resolve()` function. The `$command`, as the name suggests is the command used for checking the status of the software you want to check. Good thing there’s already a built-in diagnostics tool for Apache, so all we have to do is call it from here:\n\n```\n    public $command = 'service apache2 status';\n```\n\nIf you execute the same command on the terminal you’ll get an output similar to the following:\n\n![laravel-service-health-monitor-img4](//images.ctfassets.net/1es3ne0caaid/2csQhIao8gi4NkW5KXwqCV/0cd26bd3d802b999f0942e19fd9a1ca7/laravel-service-health-monitor-img4.png)\n\nNext, inside the `resolve()` function, we get access to the `$process` because it’s passed as an argument. From here, all we have to do is check if the output string contains “active (running)”. If you check the terminal output above, it contains that same string in green so we know that the server is running if that’s present in the output. We then call `$this-\u003echeck-\u003esucceed('is running')` to set the status of the check:\n\n```php\n    if (str_contains($process-\u003egetOutput(), 'active (running)')) {\n      $this-\u003echeck-\u003esucceed('is running'); // set status\n      return;\n    }\n```\n\n**Checking if Beanstalkd is running**\nCreate an `app/SystemChecks/Beanstalkd.php` file and add the following. This does pretty much the same thing as the Apache check. The only difference is the command we’re executing:\n\n```php\n    \u003c?php\n    // app/SystemChecks/Beanstalkd.php\n    namespace App\\SystemChecks;\n    use Spatie\\ServerMonitor\\CheckDefinitions\\CheckDefinition;\n    use Symfony\\Component\\Process\\Process;\n    \n    class Beanstalkd extends CheckDefinition\n    {\n      public $command = 'service beanstalkd status';\n    \n      public function resolve(Process $process)\n      {\n        if (str_contains($process-\u003egetOutput(), 'active (running)')) {\n          $this-\u003echeck-\u003esucceed('is running');\n          return;\n        }\n    \n        $this-\u003echeck-\u003efail('is not running');\n      }\n    }\n```\n\n**Getting average CPU usage**\nCreate an `app/SystemChecks/CPUUsage.php` file and add the following. This is a bit different from the previous two because even though we’re extending from the `CheckDefinition` class, we aren’t actually implementing it 100%. We’re setting an empty command because the [Symfony Process component](https://symfony.com/doc/current/components/process.html) which is used by laravel-server-monitor doesn’t seem to be able to handle piping directly with [awk](https://www.gnu.org/software/gawk/manual/gawk.html) (a text processing tool) for the command line). So what we do is execute the command ourselves instead.\n\nSince there’s usually a threshold in which we consider the CPU to be at a normal operating rate, we also need to add a separate config for that inside `config/server-monitor.php`. That’s what we’re getting when we call `config('server-monitor.cpu_usage_threshold')`. There are two thresholds: `warn` and `fail`. If the current CPU usage percentage is either of those two, we set the check status to whatever it falls into. Otherwise, we assume that the CPU is operating at a normal rate and set the status to `succeed`:\n\n```php\n    \u003c?php\n    // app/SystemChecks/CPUUsage.php\n    namespace App\\SystemChecks;\n    \n    use Spatie\\ServerMonitor\\CheckDefinitions\\CheckDefinition;\n    use Symfony\\Component\\Process\\Process;\n    \n    class CPUUsage extends CheckDefinition\n    {\n      public $command = \"\";\n    \n      public function resolve(Process $process)\n      {\n        $percentage = $this-\u003egetCPUUsagePercentage();\n        $usage = round($percentage, 2);\n    \n        $message = \"usage at {$usage}%\";\n        $thresholds = config('server-monitor.cpu_usage_threshold');\n    \n        if ($percentage \u003e= $thresholds['fail']) {\n          $this-\u003echeck-\u003efail($message);\n          return;\n        }\n    \n        if ($percentage \u003e= $thresholds['warning']) {\n          $this-\u003echeck-\u003ewarn($message);\n          return;\n        }\n    \n        $this-\u003echeck-\u003esucceed($message);\n      }\n      \n      // next: add code for getting CPU percentage\n    }\n```\n\nHere’s the function for getting the CPU percentage. This uses [grep](http://man7.org/linux/man-pages/man1/grep.1.html) to search for lines with the “cpu” text inside the `/proc/stat` file. After that, we use awk to calculate the usage percentage based on the result we get when we perform arithmetic operations on the second (`$2`), fourth (`$4`), and fifth (`$5`) column of text in that line. Then we simply return the result by using `print`:\n\n```php\n    protected function getCPUUsagePercentage(): float\n    {\n      $cpu = shell_exec(\"grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {print usage}'\");\n      return (float) $cpu;\n    }\n```\n\nFor reference, here’s what the output of `cat /proc/stat` looks like. So `$2` is 11738, `$4` is `18979` and so on:\n\n![laravel-service-health-monitor-img5](//images.ctfassets.net/1es3ne0caaid/3x0Tc7O7o1qJYubbMjw2su/89f29be74da0dea7833c4e2790a1cef1/laravel-service-health-monitor-img5.png)\n\n\u003e **Note**: The function above only returns the average CPU usage since the system booted up. This lets us see whether the system is running under tremendous load for a longer period of time. If you need to get the current CPU usage, you need to use something like the `top` command.\n\n\n**Getting memory usage**\nThe last system check that we’ll add is the memory usage. Create an `app/SystemChecks/MemoryUsage.php` file and add the following. This works similarly to the previous one. The only difference is that we’re now directly reading from the file instead of using grep and awk, we’re using PHP’s `fopen()` function to read the `/proc/meminfo` file:\n\n```php\n    \u003c?php\n    namespace App\\SystemChecks;\n    \n    use Spatie\\ServerMonitor\\CheckDefinitions\\CheckDefinition;\n    use Symfony\\Component\\Process\\Process;\n    \n    class MemoryUsage extends CheckDefinition\n    {\n      public $command = \"\";\n    \n      public function resolve(Process $process)\n      {\n        $percentage = $this-\u003egetMemoryUsage();\n    \n        $message = \"usage at {$percentage}%\";\n        $thresholds = config('server-monitor.memory_usage_threshold');\n    \n        if ($percentage \u003e= $thresholds['fail']) {\n          $this-\u003echeck-\u003efail($message);\n          return;\n        }\n    \n        if ($percentage \u003e= $thresholds['warning']) {\n          $this-\u003echeck-\u003ewarn($message);\n          return;\n        }\n    \n        $this-\u003echeck-\u003esucceed($message);\n      }\n    \n      // next: add code for getting memory percentage usage\n    }\n```\n\nHere’s the function for getting the current memory usage. This reads from the `/proc/meminfo` file. This file contains various information about the system memory. We extract all number instances then divide the active memory usage from the total memory to get the memory in use:\n\n```php\n    protected function getMemoryUsage(): float\n    {\n      $fh = fopen('/proc/meminfo', 'r');\n      $mem = 0;\n      $all_str = '';\n    \n      while ($line = fgets($fh)) {\n          $all_str .= $line;\n      }\n      fclose($fh);\n    \n      preg_match_all('/(\\d+)/', $all_str, $pieces);\n    \n      $used = round($pieces\\[0\\][6] / $pieces\\[0\\][0], 2);\n      return $used;\n    }\n```\n\nFor reference, here’s the output of `cat /proc/meminfo`. The index count starts at 0, so the sixth value is the one beside “Active” and the first value is the one beside “MemTotal”:\n\n![laravel-service-health-monitor-img6](//images.ctfassets.net/1es3ne0caaid/1rn0YUgsyiG0EJreWBt160/1c00c7102f56b5ea31080c6de2ebde66/laravel-service-health-monitor-img6.png)\n\n**Configure server monitor**\nNow that we’ve added all the system checks, it’s time to let laravel-server-monitor know of them. To do that, all we have to do is add them to the `checks` array. Use a short but descriptive name for the keys and set the path to the class as the value:\n\n```php\n    \u003c?php\n    // config/server-monitor.php\n    \n    return [\n    \n      'checks' =\u003e [\n        'diskspace' =\u003e Spatie\\ServerMonitor\\CheckDefinitions\\Diskspace::class,\n        'elasticsearch' =\u003e Spatie\\ServerMonitor\\CheckDefinitions\\Elasticsearch::class,\n        'memcached' =\u003e Spatie\\ServerMonitor\\CheckDefinitions\\Memcached::class,\n        'mysql' =\u003e Spatie\\ServerMonitor\\CheckDefinitions\\MySql::class,\n    \n        // add these:\n        'apache' =\u003e App\\SystemChecks\\Apache::class,\n        'beanstalkd' =\u003e App\\SystemChecks\\Beanstalkd::class,\n        'cpu' =\u003e App\\SystemChecks\\CPUUsage::class,\n        'memory' =\u003e App\\SystemChecks\\MemoryUsage::class\n      ],\n      \n      // ...\n    ];\n```\n\nAt this point, we’re not really done yet. We’ve already added the custom checks but we still haven’t added a way for us to get hold of the data in realtime. That’s what we’ll be doing in the next section.\n\n**Create Pusher notification channel**\nThe next step is for us to create a custom notification channel. These notification channels automatically get triggered every time the system checks are done executing. By default, laravel-system-monitor uses Slack as a notification channel. We won’t be using it in this tutorial because all we need is realtime monitoring. For that, we will be using [Pusher Channels](https://pusher.com/channels).\n\n```php\n    // config/server-monitor.php\n    'notifications' =\u003e [\n    \n      'notifications' =\u003e [\n        Spatie\\ServerMonitor\\Notifications\\Notifications\\CheckSucceeded::class =\u003e ['slack'], // we need to update this so it doesn't use slack\n      // ...  \n    ]\n```\n\nTo create a custom notification channel, create a `Channels` folder inside the `app` directory and inside it create a `PusherChannelsChannel.php` file then add the following:\n\n```php\n    \u003c?php\n    // app/Channels/PusherChannelsChannel.php\n    namespace App\\Channels;\n    \n    use Illuminate\\Notifications\\Notification;\n    use Illuminate\\Support\\Facades\\Cache;\n    use App\\Events\\FinishedCheck;\n    \n    class PusherChannelsChannel\n    {\n      public function send($notifiable, Notification $notification)\n      {\n        if (Cache::get('page_visibility') == 'visible') {\n    \n          $id = $notification-\u003eevent-\u003echeck-\u003eid;\n          $type = $notification-\u003eevent-\u003echeck-\u003etype;\n          $status = $notification-\u003eevent-\u003echeck-\u003estatus;\n          $last_run_message = $notification-\u003eevent-\u003echeck-\u003elast_run_message;\n          $host_id = $notification-\u003eevent-\u003echeck-\u003ehost_id;\n    \n          event(new FinishedCheck([\n            'id' =\u003e 'check-' . $id,\n            'type' =\u003e $type,\n            'status' =\u003e $status,\n            'last_run_message' =\u003e $last_run_message,\n            'element_class' =\u003e numberTextClass($type, $status, $last_run_message),\n            'last_update' =\u003e now()-\u003etoDateTimeString(),\n            'host_id' =\u003e 'host-' . $host_id\n          ]));\n        } \n      }\n    }\n```\n\nWhat the above code does is it first checks whether the app dashboard is currently being viewed by the user (on the foreground). If it is, it dispatches the `FinishedCheck` event. We’ll create this event shortly, for now, know that it’s the one responsible for triggering the message to be sent to the frontend of the app. The message contains the status of a specific system check.\n\n**Finished check event**\nIn order to send messages to the app’s frontend and update its contents without refreshing the whole page, we need to [create an event](https://laravel.com/docs/master/events) which will broadcast the message using Pusher Channels. You can create the event using artisan:\n\n```\n    php artisan make:event FinishedCheck\n```\n\nThis creates an `app/Events/FinishedCheck.php` file which has already the basic boilerplate code for broadcasting events in Laravel. Replace the existing code with the following:\n\n```php\n    \u003c?php\n    namespace App\\Events;\n    \n    use Illuminate\\Broadcasting\\Channel; // for broadcasting to a public Pusher channel\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    \n    class FinishedCheck implements ShouldBroadcast\n    {\n      use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n      public $message; // the message to be sent to the client side\n    \n      public function __construct($message)\n      {\n        $this-\u003emessage = $message;\n      }\n    \n      public function broadcastAs()\n      {\n        return 'finished.check';\n      }\n    \n      public function broadcastOn()\n      {\n        return new Channel('live-monitor');\n      }\n    }\n```\n\nThe most important thing in the above code is that the class should implement the `ShouldBroadcast` class. This lets Laravel know that this is an event class. If you implement that class, you need to supply the `broadcastOn()` function. Inside it, all you need to do is return a new `Channel` instance. This accepts the name of the public Pusher channel where you want to broadcast the event.\n\n```php\n    public function broadcastOn()\n    {\n      return new Channel('live-monitor');\n    }\n```\n\nNext, add the `$message` as a public property for the class. This will contain the actual message to be sent to the frontend:\n\n```\n    public $message;\n```\n\nLastly, although not required, we’re also setting a `broadcastAs()` function. This allows us to change the name of the event. By default it will be set to the full path of the class: `App\\\\Events\\\\FinishedCheck`. As you can see, it’s not really that friendly. If you specify the `broadcastAs()` function, the string that you return from here will be used instead:\n\n```php\n    public function broadcastAs()\n    {\n      return 'finished.check';\n    }\n```\n\n**Add notification channel**\nNow that we’ve created both the custom notification channel and the event which it dispatches, it’s time to let laravel-server-monitor know of it. Start by importing the `PusherChannelsChannel` class. Then for each of the items inside the `notifications.notifications` array, set `PusherChannelsChannel::class` as an item. This allows us to trigger the event for updating the client-side for each of the [available notifications](https://docs.spatie.be/laravel-server-monitor/v1/monitoring-basics/notifications-and-events/#available-notifications):\n\n```php\n    \u003c?php\n    // config/server-monitor.php\n    use App\\Channels\\PusherChannelsChannel; // add this\n    \n    return [\n      'checks' =\u003e [\n        // ...\n      ],\n    \n      // ...\n      'notifications' =\u003e [\n        // update this:\n        'notifications' =\u003e [\n          Spatie\\ServerMonitor\\Notifications\\Notifications\\CheckSucceeded::class =\u003e [PusherChannelsChannel::class],\n          Spatie\\ServerMonitor\\Notifications\\Notifications\\CheckRestored::class =\u003e [PusherChannelsChannel::class],\n          Spatie\\ServerMonitor\\Notifications\\Notifications\\CheckWarning::class =\u003e [PusherChannelsChannel::class],\n          Spatie\\ServerMonitor\\Notifications\\Notifications\\CheckFailed::class =\u003e [PusherChannelsChannel::class],\n        ],\n        // ...\n      ],\n      // ...\n    ];\n```\n\nWhile we’re here, you can also add the CPU and memory usage thresholds after the diskspace threshold: \n\n```php\n    // ...\n    \n    'diskspace_percentage_threshold' =\u003e [\n      'warning' =\u003e 80,\n      'fail' =\u003e 90,\n    ],\n    \n    // add these\n    'cpu_usage_threshold' =\u003e [\n      'warning' =\u003e 70,\n      'fail' =\u003e 90,\n    ],\n    \n    'memory_usage_threshold' =\u003e [\n      'warning' =\u003e 75,\n      'fail' =\u003e 90,\n    ],\n```\n\n**Routes**\nNow we’re ready to start working on the frontend of the app. Start by replacing the contents of the `routes/web.php` file with the following. Below, we’re adding two routes: one for handling the request to the home page of the app and the other for handling the POST request for updating the page visibility status:\n\n```php\n    \u003c?php\n    Route::get('/', 'MonitorController@index'); // for serving the app dashboard\n    Route::post('/page-visibility', 'MonitorController@updatePageVisibility'); // for updating the page visibility\n```\n\n**Monitor Controller**\nThe next step is to create the MonitorController that we’ve used above. Execute the following command in the terminal to create it:\n\n```\n    php artisan make:controller MonitorController\n```\n\nThis will generate an `app/Controllers/MonitorController.php` file with some minimal boilerplate code for a controller. Clear the contents of the file and add the following instead:\n\n```php\n    \u003c?php\n    // app/Controllers/MonitorController.php\n    namespace App\\Http\\Controllers;\n    \n    use Illuminate\\Http\\Request;\n    use App\\Host;\n    use Illuminate\\Support\\Facades\\Cache;\n    \n    class MonitorController extends Controller\n    {\n      public function index()\n      {\n        $hosts = Host::get();\n        return view('monitor', [\n            'hosts' =\u003e $hosts\n        ]);\n      }\n    \n      public function updatePageVisibility()\n      {\n        Cache::put('page_visibility', request('state'));\n        return 'ok';\n      }\n    }\n```\n\nIn the code above, we’ve imported the `Host` model but we haven’t created it yet. This model represents the `hosts` table in the database. We’re using it to get the list of hosts (remote servers) that are monitored.\n\n\n**Host model**\nThe next thing we need to do is create the Host model:\n\n```\n    php artisan make:model Host\n```\n\nThat will create an `app/Host.php` file. Replace its contents with the following. Below, we’re adding an Eloquent relationship to the `App\\Check` model. This allows us to get the system checks associated with a specific host:\n\n```php\n    \u003c?php\n    // app/Host.php\n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    \n    class Host extends Model\n    {\n      public function checks()\n      {\n        return $this-\u003ehasMany('App\\Check');\n      }\n    }\n```\n\n**Check model**\nSince we’ve already referenced the `Check` model earlier, we now need to create it:\n\n```\n    php artisan make:model Check\n```\n\nThat’s all there is to it. We don’t really need to make any modifications to the boilerplate code. But in case it changes in the future, here’s what it looks like:\n\n```php\n    \u003c?php\n    // app/Check.php\n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    \n    class Check extends Model\n    {\n       \n    }\n```\n\n**Index page**\nAt this point we’re now ready to add the HTML code. Create a `resources/views/monitor.blade.php` file and add the following:\n\n```html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n    \n      \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\"\u003e\n    \n      \u003ctitle\u003eLive Server Monitor\u003c/title\u003e\n    \n      \u003cscript src=\"{{ asset('js/app.js') }}\" defer\u003e\u003c/script\u003e\n    \n      \u003clink rel=\"dns-prefetch\" href=\"//fonts.gstatic.com\"\u003e\n      \u003clink href=\"https://fonts.googleapis.com/css?family=Nunito\" rel=\"stylesheet\" type=\"text/css\"\u003e\n    \n      \u003clink href=\"{{ asset('css/app.css') }}\" rel=\"stylesheet\"\u003e\n    \n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cheader\u003e\n          \u003cnav class=\"navbar navbar-expand-md navbar-light navbar-laravel\"\u003e\n            \u003cdiv class=\"container\"\u003e\n              \u003ca class=\"navbar-brand\" href=\"{{ url('/') }}\"\u003eLive Server Monitor\u003c/a\u003e\n            \u003c/div\u003e\n          \u003c/nav\u003e\n        \u003c/header\u003e\n    \n        \u003cmain class=\"py-4 container\"\u003e\n          \u003cdiv class=\"row\"\u003e\n    \n            @forelse ($hosts as $host)\n              \u003cdiv class=\"col\"\u003e\n                \u003cdiv class=\"card\" style=\"width: 18rem;\"\u003e\n                  \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003e{{ $host-\u003ename }}\u003c/h5\u003e\n                    \u003ch6 class=\"card-subtitle mb-2 text-muted\" id=\"host-{{ $host-\u003eid }}\"\u003eLast updated: {{ minValue($host-\u003echecks) }}\u003c/h6\u003e\n                    @forelse (onlyEnabled($host-\u003echecks) as $check)\n                    \u003cul class=\"mt-3\"\u003e\n                      \u003cli id=\"check-{{ $check-\u003eid }}\"\u003e\n                        {{ $check-\u003etype }}: \u003cspan class=\"{{ $check-\u003etype }} {{ numberTextClass($check-\u003etype, $check-\u003estatus, $check-\u003elast_run_message) }}\"\u003e{{ $check-\u003elast_run_message }}\u003c/span\u003e\n                      \u003c/li\u003e\n                    \u003c/ul\u003e\n                    @empty\n                    \u003cp class=\"card-text\"\u003eNo checks yet\u003c/p\u003e\n                    @endforelse\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            @empty\n              \u003cp\u003eNo hosts yet\u003c/p\u003e\n            @endforelse\n    \n          \u003c/div\u003e\n        \u003c/main\u003e\n      \u003c/div\u003e\n    \n      \u003cscript src=\"{{ asset('js/index.js') }}\" defer\u003e\u003c/script\u003e\n    \n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nAll we’re doing in the above code is looping through all the `$hosts` that were supplied by the controller. We’re filtering the checks so that it only returns the one’s which are enabled (`enabled=1` in the database) using a helper function (`onlyEnabled()`) which we’ll be creating shortly. We also have a helper function for outputting a specific class based on the status of the system check. For example, if specific software is running, we want to change the text color to green. If not, then we want it to be red. That’s what the `numberTextClass()` function does.\n\n\n**Helper functions**\nCreate a `helpers.php` file inside the `app` directory and add the following:\n\n```php\n    // app/helpers.php\n    function textClass($status, $last_message) {\n      if ($last_message == 'is running') { // change text color based on the last message\n        return ($status == 'success') ? 'text-success' : 'text-danger';\n      }\n      return ($status == 'failed') ? 'text-danger' : '';\n    }\n    \n    function onlyEnabled($collection) { // filter the collection to only the one's which are enabled\n      return $collection-\u003efilter(function($item) {\n        return $item-\u003eenabled == 1;\n      });\n    }\n    \n    function minValue($checks) { // used for returning the oldest last_ran_at date\n      return min(array_column($checks-\u003etoArray(), 'last_ran_at'));\n    }\n    \n    function numberTextClass($type, $status, $text) { // change text color based on the threshold value\n      // these maps to the treshold configs in the config/server-monitor.php`\n      $configs = [\n        'diskspace' =\u003e 'server-monitor.diskspace_percentage_threshold',\n        'cpu' =\u003e 'server-monitor.cpu_usage_threshold',\n        'memory' =\u003e 'server-monitor.memory_usage_threshold'\n      ];\n    \n      preg_match('/(\\d+)/', $text, $pieces); // get all the numbers in the text\n    \n      if (!empty($pieces)) {\n        $number = (float) $pieces[0];\n        $config = config($configs[$type]);\n        return ($number \u003e= $config['fail']) ? 'text-danger' : (($number \u003e= $config['warning']) ? 'text-warning' : ''); // determine the class to add based on the current percentage value\n      }\n    \n      return textClass($status, $text); // for the one's whose value isn't percentage based\n    }\n```\n\nSince the class we’ve just added needs to be preloaded on every file, we need to update the `composer.json` file and tell it to autoload the `app/helpers.php` file:\n\n```php\n    {\n      // ...\n      \"extra\": {\n        // ...\n      },\n      \"autoload\": {\n          // ...\n          \"classmap\": [\n             // ...\n          ],\n          \"files\": [\"app/helpers.php\"] // add this\n      },\n    }\n```\n\nSave the changes then execute the following command to reload the files that need to be autoloaded:\n\n```\n    composer dump-autoload\n```\n\n**Page scripts**\nAt this point, we can now add the JavaScript code for receiving the events from the backend as well as updating the page visibility.\n\nOpen the `resources/js/bootstrap.js` file and uncomment the following lines. This allows us to subscribe to the channel that we’ve broadcasted on in the backend earlier:\n\n```javascript\n    // resources/js/bootstrap.js\n    import Echo from 'laravel-echo'\n    \n    window.Pusher = require('pusher-js');\n    \n    window.Echo = new Echo({\n      broadcaster: 'pusher',\n      key: process.env.MIX_PUSHER_APP_KEY,\n      cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n      encrypted: true\n    });\n```\n\nNext, create a `resources/js/index.js` file and add the following code. The most important code here is the one where we subscribe to the `live-monitor` channel. Note that the period before the event name (`finished.check`) is not a typo. We need to put that [to instruct Laravel Echo not to prepend the application's namespace to the event](https://laravel.com/docs/master/broadcasting#broadcast-name). From there, we just destructure the message and use the different properties of the `message` object to update the element which displays the data that we need to update:\n\n```javascript\n    // resources/js/index.js\n    // set the CSRF token generated in the page as a header value for all AJAX requests\n    // https://laravel.com/docs/master/csrf\n    $.ajaxSetup({\n      headers: {\n        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n      }\n    });\n    \n    window.Visibility = require('visibilityjs'); // import the visibility.js library\n    \n    // subscribe to the live-monitor channel and listen to the finished.check event\n    window.Echo.channel('live-monitor')\n    .listen('.finished.check', (e) =\u003e {\n    \n      const { id, type, last_run_message, element_class, last_update, host_id } = e.message; // destructure the event data\n    \n      $(`#${id} .${type}`)\n        .text(last_run_message)\n        .removeClass('text-success text-danger text-warning')\n        .addClass(element_class);\n    \n      $(`#${host_id}`).text(`Last update: ${last_update}`);\n    });\n    \n    // next: add code for updating page visibility\n```\n\nNext, add the code for listening to page visibility changes. Make a `POST` request to update the status in the backend. This effectively stops the notifications from happening if the `state` value becomes equal to `hidden`:\n\n```javascript\n    Visibility.change(function (e, state) {\n      $.post('/page-visibility', { state }); // hidden or visible\n    });\n```\n\nLastly, update the `webpack.mix.js` file to include the `resources/js/index.js` file for minification:\n\n```javascript\n    mix.js('resources/js/app.js', 'public/js')\n        .js('resources/js/index.js', 'public/js') // add this\n        .sass('resources/sass/app.scss', 'public/css');\n```\n\nOnce that’s added, you can now process the frontend scripts and styles:\n\n```\n    npm run dev\n```\n\n## Adding a remote server\n\nlaravel-server-monitor comes with an Artisan utility for adding a host. Execute the following on the terminal to add one:\n\n```\n    php artisan server-monitor:add-host\n```\n\nHere’s what adding a host will look like:\n\n\n![laravel-service-health-monitor-img7](//images.ctfassets.net/1es3ne0caaid/6QaAXurq9kNGAUWDbiXZf5/d216b2ca69c5ac558b8f2826e6634ddd/laravel-service-health-monitor-img7.png)\n\nYou can also do this manually through the database by adding a new entry to the `hosts` table and adding the checks that you want to the `checks` table. You can even create your own Artisan command to customize it based on your needs.\n\nHere’s what the `checks` table looks like. If at some point, you want to disable a specific check that you’ve previously added, you can simply set `enabled` to `0` or delete the row entirely:\n\n\n![laravel-service-health-monitor-img8](//images.ctfassets.net/1es3ne0caaid/1XDH6FNoHJvyZn7q6k6ZLm/09e2d4cae4b2f225ec22291612b1c55a/laravel-service-health-monitor-img8.png)\n\n## Running the app\n\nBefore running the app, you first need to update the `.env` file with your Pusher app instance credentials:\n\n```\n    BROADCAST_DRIVER=pusher\n    QUEUE_CONNECTION=sync\n    \n    PUSHER_APP_ID=YOUR_PUSHER_APP_ID\n    PUSHER_APP_KEY=YOUR_PUSHER_APP_KEY\n    PUSHER_APP_SECRET=YOUR_PUSHER_APP_SECRET\n    PUSHER_APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n    \n    MIX_PUSHER_APP_KEY=\"${PUSHER_APP_KEY}\"\n    MIX_PUSHER_APP_CLUSTER=\"${PUSHER_APP_CLUSTER}\"\n```\n\nOnce that’s done, access the app on your browser. For me, I used `liveservermonitor.loc` as the local domain name.\n\nYou can manually trigger a system check using the artisan utility provided by laravel-server-monitor:\n\n```\n    php artisan server-monitor:run-checks\n```\n\nDo note that you have to uncomment the line which checks for page visibility in the `app/Channels/PusherChannelsChannel.php` file for it to work. It wouldn’t really trigger the event if the page is not currently in the foreground:\n\n```php\n    if (Cache::get('page_visibility') == 'visible') {\n      // ...\n    }\n```\n\n## Running system checks\n\nThe ideal way for us to run the checks is to run them at a specific interval. Laravel already comes with [Task Scheduling](https://laravel.com/docs/5.8/scheduling) features. This allows us to run the `php artisan server-monitor:run-checks` command at a specific interval. \n\nOpen the `app/Console/Kernel.php` file and add the following inside the `schedule()` function. This will automatically run the command every minute:\n\n```php\n    protected function schedule(Schedule $schedule)\n    {\n      $schedule-\u003ecommand('server-monitor:run-checks')-\u003eeveryMinute(); // add this\n    }\n```\n\nThis makes use of crontab so you’ll have to enable it by adding the following to your cron entry file (`crontab -e`):\n\n```\n    * * * * * cd /path-to-your-project \u0026\u0026 php artisan schedule:run \u003e\u003e /dev/null 2\u003e\u00261\n```\n\nAt this point, you should now be able to access the app’s dashboard page and the data displayed would refresh every minute.\n\n\n## Conclusion\n\nThat’s it! In this tutorial, we’ve built a web app for monitoring the status of your servers in realtime. We’ve used the Laravel Server Monitor package by Spatie to implement most of the functionality. Then we used Pusher Channels to update the server status displayed on the screen in realtime. Lastly, we used the Visibility.js library to check if a user is currently viewing the page where the server status is displayed.\n\nWith this knowledge, you’ll now be able to add your own server checks to constantly monitor your servers during times where you expect more traffic than usual. You can also add custom notifications and have the server send you a text message when the CPU usage goes above the threshold that you’ve set.\n\nYou can view the full source code of the app on this [GitHub repo](https://github.com/anchetaWern/realtime-server-health-monitor).","metaTitle":"Creating a server health monitoring app with Laravel","metaDescription":"In this tutorial, create a web app for monitoring the status of your servers in realtime using Laravel.  The app will offer realtime monitoring of disk, CPU and memory. You can also add custom notifications and have the server send you a text message when the CPU usage goes above a set threshold."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2Py9mtVTAFiRTiEaJ6K4Jd","type":"Entry","createdAt":"2019-12-10T14:15:12.479Z","updatedAt":"2019-12-10T14:15:12.479Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building a Spotify-like currently playing feature: Part 2 - Building the iOS player","url":"spotify-currently-playing-ios-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/spotify-like-currently-playing-realtime","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}}],"reviewDate":"2019-08-28","description":"When using music streaming services like Spotify, you can see realtime technology in action when you are using multiple devices. On the other devices, you can see how much playtime has elapsed. This three-part tutorial series looks at how to integrate this feature into your application. In the second part, add realtime functionality to a prebuilt iOS client application.","prerequisite":"You will need Xcode 10+ and CocoaPods installed on your machine. Some knowledge of the Xcode IDE will be helpful.","content":"## Introduction\n\nIn [the previous part](https://pusher.com/tutorials/spotify-currently-playing-ios-part-1), we started by creating the API that will power the client applications. In this part, we will be adding realtime functionality to a prebuilt iOS client application. This will be a simple music player that will play songs and broadcast the current song, device, and the track position.\n\n\n![spotify-currently-playing-player-img1](//images.ctfassets.net/1es3ne0caaid/7AZ9cDaNjCnzQ2UPGUdfrH/ce5d00054d5848bbce82021b1bc2cf8b/spotify-currently-playing-player-img1.gif)\n\nThis will make it easy to switch listening between clients just like Spotify does with its music clients. Let’s get started.\n\n\n## Prerequisites\n\nTo follow along in this part, you must have the following requirements:\n\n- Completed the [first part](https://pusher.com/tutorials/spotify-currently-playing-ios-part-1) of the series\n- Have Xcode 10.x installed on your machine\n- Have CocoaPods installed on your machine\n- Knowledge of the Xcode IDE \n\nIf you have the requirements then let’s get started.\n\n\n## Setting up your project\n\nClone the project from [GitHub](https://github.com/neoighodaro/spotify-like-currently-playing-realtime). The iOS application is in the `iOS-*` directory in the repository. One is the completed project and the other is the music player without realtime features (`iOS_Base`). You can use the one without realtime to follow along and the other for reference.\n\nNow that you have the project, open the `.xcworkspace` file in Xcode. Here’s a quick explanation of the project.\n\nThere is a `Podfile` in the root of the project. This file is used to define the dependencies of the application. To update or install the dependencies, close Xcode and run the following commands:\n\n```\n    $ pod install\n```\n\nNote that sometimes you may need to clear your cache to get the latest version of your dependencies. If this happens, just run the following commands below:\n\n```\n    $ pod cache clean --all\n    $ pod repo update\n    $ pod install\n```\n\nWhen your installation is complete, reopen the project using the `Spot.xcworkspace` file in the root of your project.\n\nIn the project, there is a `Main.storyboard` file that defines the scenes of the application, here is what it looks like:\n\n![spotify-currently-playing-player-img2](//images.ctfassets.net/1es3ne0caaid/6C09CIHHOQ0xNB6cpMTvpH/f194b2f5a7fd8b1c3f8c2b13023a40eb/spotify-currently-playing-player-img2.png)\n\nThe first is the home screen with a button to enter the application. The second scene is a navigation controller that has the third scene defined as the root controller. The root controller in the third scene just displays the tracks available. The final scene displays the currently playing track.\n\nIn the project, we have a `Song` struct which is just a struct that we will use to store the song details when we fetch them from the API we built in the first part of the article. The struct looks like this:\n\n```javascript\n    import Foundation\n    \n    struct Song: Codable {\n        let id: Int\n        let title: String\n        let cover: String\n        let duration: Int\n        let artist: String\n        var isPlaying: Bool? = false\n    }\n```\n\nNext, we have the `PlaylistTableViewController`. This class is responsible for fetching the tracks list, playing the selected track, keeping a song seconds elapsed timer. In the same file, we also defined a small `Duration` class that we will use for the elapsed timer.\n\nThe `TrackViewController` is responsible for the view displaying the currently playing track. It displays the time elapsed and also has a few controls but only the **Play/Pause** button works to keep the tutorial focused.\n\nIn the assets, we have the stock mp3 file, which we got from [bensounds.com](https://www.bensound.com/). We also have a placeholder cover image. If you build and run the application in a simulator, you should have the music player but without any realtime features and it also plays the mp3 file.\n\n\n![spotify-currently-playing-player-img3](//images.ctfassets.net/1es3ne0caaid/5xbHO3fCwfTo6hHBcAaHFh/b49a9624dc672e6a5f548ab92ce612da/spotify-currently-playing-player-img3.gif)\n\n\n\n## Adding some extra features to the application\n\nNow that we have the application running, let’s connect it to our backend API and add some extra features to the application. \n\nTo get started, make sure your Node.js application is still running in the background. To start the Node.js server, `cd` to the root of the Node.js application and run the following command:\n\n```\n    $ node index.js\n```\n\nWhen the server is running, we can begin.\n\nThe first thing we want to do is load the tracks list from the server. We will just use this so we can have multiple listed on the main page instead of the one. Note though that the sound we will play will always be the same.\n\nBefore we do anything, open your project’s `info.plist` and make sure the setting to **Allow Arbitrary Loads** is set to **YES.**\n\n\n![spotify-currently-playing-player-img4](//images.ctfassets.net/1es3ne0caaid/1gPWOIxdNUhgRNzQOk2h2w/6b22bab83db83ab09f1d345fed325a8d/spotify-currently-playing-player-img4.png)\n\n\nNext, open the `PlaylistTableViewController` class and at the top, import the `Alamofire` library:\n\n```swift\n    // File: PlaylistTableViewController.swift\n    // [...]\n    \n    import Alamofire\n```\n\nThen, replace the contents of the `populateTracks` method with the following code:\n\n```swift\n    // File: PlaylistTableViewController.swift\n    // [...]\n    \n    fileprivate func populateTracks() {\n        Alamofire.request(\"http://localhost:3000/tracks\").validate().responseData { res in\n            guard res.result.isSuccess, let responseData = res.data else { \n              return print(\"Failed to fetch data from the server\") \n            }\n    \n            let decoder = JSONDecoder()\n            self.tracks = try! decoder.decode([Song].self, from: responseData)\n            self.tableView.reloadData()\n        }\n    }\n```\n\nAlso, go to the `tickTimer` method and replace the contents with the following code:\n\n```swift\n    // File: PlaylistTableViewController.swift\n    // [...]\n    \n    @objc fileprivate func tickTimer() {\n        if Duration.instance.freeze {\n            return\n        }\n    \n        Duration.instance.count += 1\n        \n        if Duration.instance.count \u003e 1000 {\n            killTimer()\n        }\n        \n        else if (playingDevice == deviceName) {\n            let params: Parameters = [\n                \"device\": deviceName,\n                \"id\": currentlyPlaying?.id ?? 0,\n                \"position\": Duration.instance.count,\n            ]\n    \n            Alamofire.request(\"http://localhost:3000/tick\", method: .post, parameters: params)\n                .validate()\n                .responseData { _ in }\n        }\n    }\n```\n\nThe code above makes sure that the tracks are loaded from the Node.js server instead of the hardcoded implementation we had previously.\n\nNext, let’s add a simple indication to each track name to know which is currently playing from the list view. In the same `PlaylistTableViewController` class, find and replace the following code as seen below:\n\n```swift\n    // Replace:\n    cell.textLabel?.text = \"🎶 \\(track.title) - \\(track.artist)\"\n    \n    // With:\n    let isPlaying = track.isPlaying ?? false\n    cell.textLabel?.text = \"\\(isPlaying ? \"🎶\" : \"\") \\(track.title) - \\(track.artist)\"\n```\n\nThen in the `tableView(``*_*` `tableView:, didSelectRowAt indexPath:)` method, find and replace the method with the following:\n\n```swift\n    // File: PlaylistTableViewController.swift\n    // [...]\n    \n    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        startTimer()\n        \n        if lastPlayed == nil {\n            lastPlayed = tracks[indexPath.row]\n        }\n        \n        if sound.playing == false || currentlyPlaying == nil || currentlyPlaying?.id != lastPlayed?.id {\n            if let index = tracks.firstIndex(where: { $0.id == currentlyPlaying?.id }) {\n                tracks[index].isPlaying = false\n            }\n    \n            tracks[indexPath.row].isPlaying = true\n            self.tableView.reloadData()\n            \n            lastPlayed = currentlyPlaying\n            currentlyPlaying = tracks[indexPath.row]\n            \n            if playingDevice == nil || playingDevice == deviceName {\n                playingDevice = deviceName\n                playSound()\n                resetTimer()\n            }\n            \n            if timerStarted == false {\n                timer?.fire()\n                timerStarted = true\n            }\n        }\n    }\n```\n\nThat should do the trick. Now let’s start adding realtime features.\n\n\n## Adding realtime features to the application\n\nThe first thing we want to do is connect the application to Pusher Channels. To do this, open the `PlaylistTableViewController` file and in the `viewDidLoad` method, add the following code:\n\n```swift\n    // File: PlaylistTableViewController.swift\n    // [...]\n    \n    func viewDidLoad() {\n      // [...]\n      \n      pusherConnect()\n    }\n```\n\nThen add the following property and methods to the class as shown below:\n\n```swift\n    // File: PlaylistTableViewController.swift\n    // [...]\n    \n    var pusher: Pusher!\n    \n    fileprivate func pusherConnect() {\n        pusher = Pusher(key: \"PUSHER_KEY\", options: PusherClientOptions(\n            host: .cluster(\"PUSHER_CLUSTER\")\n        ))\n        pusher.connect()\n        \n        let channel = pusher.subscribe(\"spotmusic\")\n        \n        let _ = channel.bind(eventName: \"tick\") { [unowned self] data in\n            if let data = data as? [String: Any] {\n                self.handleTickEvent(data: data)\n            }\n        }\n    }\n    \n    fileprivate func handleTickEvent(data: [String: Any]) {\n        guard let device = data[\"device\"] as? String, device != deviceName else {\n            playingDevice = deviceName\n            return\n        }\n        \n        guard let position = data[\"position\"] as? Int else { return }\n        \n        if playingDevice == deviceName {\n            killTimer()\n        }\n        \n        playingDevice = device\n        \n        setTimer(count: position)\n        startTimer()\n        pauseSound()\n    }\n```\n\n\u003e Replace the `PUSHER_*` placeholders with the values in your Pusher dashboard.\n\nWe are using a device name so we can know where the event is fired from. We don’t want an event fired from the same device to be handled by the same device.\n\nAt the top of the class, import the `PusherSwift` library:\n\n```swift\n    // File: PlaylistTableViewController.swift\n    // [...]\n    \n    import PusherSwift\n```\n\nOne last thing we need to make sure we do is ping the main server to update the `tick` event. We will use this to broadcast the position of the currently playing track at all times the track is playing.\n\n**Track Controller**\nThere is another controller called the `TrackViewController`, which displays the song details when a song is tapped. We do not need to make any changes to this file but it could come in handy if you need to make some improvements to the application.\n\nGreat. Now let’s test our application.\n\n\n## Testing your application\n\nMake sure the Node server is running in the background. You can run the server by running the command below in the root of the API project:\n\n```\n    $ node index.js\n```\n\nNow, build your music application and run it . You should notice no major difference from how it was but if you log into your Pusher dashboard and look at the **Debug Console** for your application, you will notice there will be an event fired for every second the song plays.\n\n\n![spotify-currently-playing-player-img5](//images.ctfassets.net/1es3ne0caaid/2G2hrPiZKwvt9HcfJuJaeo/df3770238bfb0bfb59d684f3f7eab48c/spotify-currently-playing-player-img5.gif)\n\n\nNow that we have the ticker, let’s build another application that listens for these changes and displays it in realtime. \n\n## Conclusion\n\nIn this part of the tutorial, we have learned how we can use realtime features to enhance our music player. In the next part, we will consume this information from another player.\n\nThe source code is available on [GitHub](https://github.com/neoighodaro/spotify-like-currently-playing-realtime).","metaTitle":"Build a Spotify-like currently playing feature - Part 2","metaDescription":"When using music streaming services like Spotify, you can see realtime technology in action when you are using multiple devices. In the second part of this tutorial series on how to integrate this feature into your application, add realtime functionality to a prebuilt iOS client application."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3OLGJTMEm4azKIjNcxVJ0C","type":"Entry","createdAt":"2019-12-10T14:14:59.524Z","updatedAt":"2019-12-10T14:14:59.524Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building a Spotify-like currently playing feature: Part 1 - Building the web API","url":"spotify-currently-playing-ios-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/spotify-like-currently-playing-realtime","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}}],"reviewDate":"2019-08-28","description":"When using music streaming services like Spotify, you can see realtime technology in action when you are using multiple devices. On the other devices, you can see how much playtime has elapsed. This three-part tutorial series looks at how to integrate this feature into your application. In the first part, build the web API.","prerequisite":"You will need Node (any LTS version) and NPM installed on your machine.","content":"## Introduction\n\nWhen using music streaming services like Spotify, you can see realtime technology in action when you are using multiple devices. On the other devices, you can see how much playtime has elapsed.\n\nIn this series, we will take a look at how you can integrate this feature into your application with minimal fuss. We will be building a web API, a web app, and an iOS application. Both apps will consume the API we built.\n\n\n![spotify-currently-playing-API-img1](//images.ctfassets.net/1es3ne0caaid/5c40g0HYWdT9vg9kcInhf2/467a5c2254947a427a86b52d214eddfe/spotify-currently-playing-API-img1.gif)\n\n\n## Prerequisites \n\nTo follow along in this part of the series, you must have the following requirements:\n\n- Node.js (any LTS version) and NPM installed locally on your machine. Install [here](https://nodejs.org/en/download/).\n- Basic knowledge of JavaScript.\n- Basic knowledge of the command-line interface.\n\n\n## Setting up\n\nThe first thing you need to do is [create a Pusher account](https://pusher.com). Next, create a Pusher Channels application using the dashboard.\n\nNext, create a root directory for your Web API project. We will call it `spot`. When this is done, launch your terminal application and `cd` to the directory you just created. In this directory, run the following command:\n\n```\n    $ npm init -y\n```\n\n![spotify-currently-playing-API-img2](//images.ctfassets.net/1es3ne0caaid/72uTIgkgk6Qf8VuoktelDK/7d0c75cc5e43fe3617966644a208a7e0/spotify-currently-playing-API-img2.png)\n\nAt the end, you should have a `package.json` file in the root of your application.\n\nLet’s install some dependencies we will need for our API. In the terminal, run the following command:\n\n```\n    $ npm install --save express body-parser pusher cors\n```\n\n![spotify-currently-playing-API-img3](//images.ctfassets.net/1es3ne0caaid/6irkA5SbfuJU3Yh9cr9cIU/235f7a61f347e91a5bee6c7e74cf37c7/spotify-currently-playing-API-img3.png)\n\nThis will install all the dependencies we need to build the API. When the installation is complete, we can move on to building the application.\n\n\n## Building the web API\n\nNow that we have everything installed, let’s create the web API. Open the project in an IDE of your choice. Create a new `index.js` file. This will be where we will have all our logic. Let’s start building our API.\n\nLet’s start by importing and using all the dependencies that we installed using npm. In the file, paste the following code:\n\n```javascript\n    // File: index.js\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    const fs = require('fs');\n    const cors = require('cors');\n    const path = require('path');\n    const app = express();\n```\n\nAbove, we imported and created instances of the dependencies we installed using npm. Next, let’s create our API endpoints.\n\nWe will be creating three endpoints:\n\n\n1. `tracks` - this endpoint will return all the available tracks for the music player. Since we are not building a full-fledged application, we will be mocking the data from a flat JSON file. We will create this file later on.\n2. `current` - this endpoint will return the currently playing song. This will make it easy for other clients to know which song is currently playing when they are loaded.\n3. `tick` - this endpoint will trigger a Pusher event. As the song plays, we will intermittently send the current position of the song playing using this endpoint. This is so that other web clients can know where the track is currently.\n\nLet’s start implementing these endpoints.\n\nIn the `index.js` file, paste the following code:\n\n```javascript\n    // File: index.js\n    // [...]\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    let tracks = JSON.parse(fs.readFileSync(path.resolve(__dirname, 'data.json')));\n    \n    app.get('/tracks', (req, res) =\u003e {\n      res.json(tracks);\n    });\n```\n\nAs seen above, we are returning the contents of a nonexistent JSON file. This file is supposed to contain the data for our tracks. Let’s create this file.\n\nCreate a file named `data.json` and paste the following JSON string into the file:\n\n```json\n    // File: data.json\n    [\n      {\n        \"id\": 1,\n        \"duration\": 195,\n        \"artist\": \"JugHead\",\n        \"title\": \"Polly\",\n        \"cover\": \"https://via.placeholder.com/500x500\"\n      }\n    ]\n```\n\nNow that we have the data file, we can continue building the API. In the `index.js` file, paste the following code to create the second endpoint:\n\n```javascript\n    // File: index.js\n    // [...]\n    \n    let current = {};\n    \n    app.get('/current', (req, res) =\u003e {\n      res.json(current);\n    });\n```\n\nAbove, the endpoint simply returns the currently playing track if there is any or an empty JSON object if nothing is playing. \n\nLet us add the last endpoint. In the `index.js` file, add the following code:\n\n```javascript\n    // File: index.js\n    // [...]\n    \n    app.options('/tick', cors());\n    \n    app.post('/tick', cors(), (req, res) =\u003e {\n      const { id, position, device } = req.body;\n    \n      for (let index = 0; index \u003c tracks.length; index++) {\n        if (tracks\\[index\\]['id'] === parseInt(id)) {\n          current = tracks[index];\n          pusher.trigger('spotmusic', 'tick', { id, position, device });\n          return res.json({ status: true });\n        }\n      }\n    \n      res.json({ status: false });\n    });\n```\n\nIn the endpoint above, we will receive the ID of the track currently being played, the position of the track and then we will receive the device that is sending the request. When we find a matching existing track, we will trigger the event to Pusher and save the currently playing track on the server.\n\nFinally, let’s make sure the Node.js server is listening on port 3000 when we start the server. In the `index.js` file, add the following code:\n\n```javascript\n    // File: index.js\n    // [...]\n    \n    app.listen(3000, () =\u003e console.log('Listening on port 3000!'));\n```\n\nNow that we have the endpoints set up, let’s add realtime triggers to Pusher. Before the `app` variable, add the following code:\n\n```javascript\n    // File: index.js\n    // [...]\n    \n    let pusher = new Pusher({\n      appId: 'PUSHER_APP_ID',\n      key: 'PUSHER_APP_KEY',\n      secret: 'PUSHER_APP_SECRET',\n      cluster: 'PUSHER_APP_CLUSTER',\n      useTLS: true\n    });\n```\n\n\u003e Replace the `PUSHER_APP_*` placeholders with the credentials from your Pusher dashboard.\n\n\n## Running the application server\n\nNow that we have built the application, we need to run the application in a server. In your terminal, run the following command to start the Node server:\n\n```\n    $ node index.js\n```\n\n![spotify-currently-playing-API-img4](//images.ctfassets.net/1es3ne0caaid/R7Lg5VnlvvSRGGsoDOQDN/946a64a11c580664fd7cb2c113d6474b/spotify-currently-playing-API-img4.png)\n\nNow your server is running, in the next parts, we will move on to creating the clients that will consume the API that the Node.js app provides.\n\n## Conclusion\n\nIn this part, we created a web API for our music application. This API will be responsible for returning the tracklist and also updating the now playing track. It will also be responsible for triggering events to Pusher. \n\nIn the next part, we will start building an iOS app that will consume the API we built in this part. The source code is available on [GitHub](https://github.com/neoighodaro/spotify-like-currently-playing-realtime).","metaTitle":"Build a Spotify-like currently playing feature - Part 1","metaDescription":"When using music streaming services like Spotify, realtime technology allows you to see on other devices how much playtime has elapsed. This three-part tutorial series looks at how to integrate this feature into your application. In the first part, build the web API."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7yewCXxjJklEoqK6pkJvnA","type":"Entry","createdAt":"2019-07-15T19:05:47.959Z","updatedAt":"2019-07-15T19:05:47.959Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an Instagram clone with Ionic: Part 4 - Testing your Ionic application on mobile devices","url":"instagram-clone-ionic-part-4","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/ionic-insta-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2019-07-15","description":"This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functionalities. In this fourth and final part, make your servers publicly accessible so you could test the application on mobile devices.","prerequisite":"You will need Node 10+, Node Package Manager 6+, Cordova 8+ and Docker 18+ installed on your machine.","content":"Through the series, our GraphQL and event server have been accessible via `localhost`. Since we have been viewing the application on our local browser, the browser can access the localhost without any issues. These servers need to be accessible on a public URL so that the mobile device can connect to them.\n\n\n## Prerequisites\n- You should have followed through the earlier parts of the series.\n- Basic knowledge of JavaScript.\n- [Node](http://www.nodejs.org) installed on your machine (v10.13.0)\n- [Node Package Manager](https://www.npmjs.com/) installed on your machine (v 6.4.1)\n- [Cordova](https://cordova.apache.org/) installed on your machine (v 8.1.2)\n- Docker installed on your machine. (version 18.09.2) Download [here](https://www.docker.com/community-edition).\n\n\n## Using localhost.run to share your localhost\n\nTo share your localhost on a public URL, let’s use [localhost.run](https://localhost.run). There are no downloads required to use this service. Just open your terminal and paste a code:\n\n```\n    ssh -R 80:localhost:\u003cPORT_YOU_WANT_TO_SHARE\u003e ssh.localhost.run\n```\n\n\u003e Remember to replace `PORT_YOU_WANT_TO_SHARE` with the actual port on the local server your application is running on.\n\n\n## Making the GraphQL server publicly accessible\n\nNow, your GraphQL server was accessible on port 4466 of your local machine, go ahead and then run this in the terminal:\n\n```\n    ssh -R 80:localhost:4466 ssh.localhost.run\n```\n\n\u003e Ensure that the GraphQL server is running by checking docker on your machine\n\nThis command returns a URL as a response. Go ahead and then paste the URL in your `app.module.ts` as the link to your GraphQL server:\n\n```typescript\n    // src/app/app.module.ts\n    \n    // [...] \n    \n    export class AppModule {\n      constructor(apollo: Apollo, httpLink: HttpLink) {\n        apollo.create({\n          link: httpLink.create({ uri: 'LINK_TO_PUBLICLY_ACCESIBLE_URL' }), // uri specifies the endpoint for our graphql server\n          cache: new InMemoryCache()\n        })\n      }\n    }\n```    \n\n\n## Making the event server publicly accessible\n\nEarlier in the series, we created the event server and served it on port 3128 of the localhost. To make it public accessible too, run this command:\n\n```\n    ssh -R 80:localhost:3128 ssh.localhost.run\n```\n\n\u003e Ensure that the event server is still running. If it isn’t running, navigate to the `server/` of the project and run `node server.js`\n\nYou will be provided with a publicly accessible URL for the event server. Now, let’s update the places where requests were made to the event server in the code.\n\nFirst, update the `uploadPost` method in the `CreatePost` page:\n\n```typescript\n    // src/pages/create-post/create-post.ts\n    \n    // [...]\n    \n    export class CreatePostPage {\n      // [...]\n    \n      public uploadPost() {\n        this.apollo.mutate({\n          mutation: createUserPost,\n          variables: {\n            image_url: this.image_url,\n            description: this.description,\n            likes: 10,\n            postedAt: this.posted_at,\n            user: { \"connect\": { \"id\": this.user_id } }\n          }\n        }).subscribe((data) =\u003e {\n          console.log('uploaded successfuly');\n          // after sucessful upload, trigger pusher event\n          let post_response: any = data;\n          this.http.post('LINK_TO_PUBLICLY_ACCESSIBLE_URL/trigger-post-event', post_response.data.createPost)\n            .subscribe(() =\u003e {\n              this.showAlert('Post Shared', 'Your post has been shared with other users');\n              this.navCtrl.push(HomePage);\n            });\n        }, (error) =\u003e {\n          this.showAlert('Error', 'There was an error sharing your post, please retry');\n          console.log('there was an error sending :the query', error);\n        })\n      }\n    \n      // [...]\n    }\n```\n\nAlso, go ahead to update the `postComment` method in the `CommentPage`:\n\n```typescript\n    // src/pages/comment/comment.ts\n    \n    // [...]\n    \n    export class CommentPage {\n      // [...]\n    \n      public postComment() {\n        this.apollo.mutate({\n          mutation: makeComment,\n          variables: {\n            message: this.user_comment,\n            postedAt: (new Date()).toISOString(),\n            user: { connect: { id: \"YOUR_USER_ID_FROM_GRAPHQL_SERVER\" } },\n            post: { connect: { id: this.post_id } }\n          }\n        }).subscribe((data) =\u003e {\n          let post_response: any = data;\n          // after successful upload, trigger new comment event\n          this.http.post('LINK_TO_PUBLICLY_ACCESSIBLE_URL/trigger-comment-event', post_response.data.createComment)\n            .subscribe(() =\u003e {\n              this.showAlert('Success', 'Comment posted successfully');\n            });\n        }, (error) =\u003e {\n          this.showAlert('Error', 'Error posting comment');\n        });\n      }\n    \n      // [...]\n    }\n```\n\nNow that this is all done, we can access both the GraphQL server and event server anywhere the code is run.\n\nNow, navigate to the root directory of your project and run your application:\n\n```\n    ionic serve -c\n```\n\n## Using the IonicDevApp\n\nTo test the application on your mobile device, download the [IonicDevApp](https://ionicframework.com/docs/pro/devapp/) on your mobile device. Ensure that your device and computer are on the same network and you should see this demo application listed there:\n\n\n![instagram-clone-ionic-testing-img1](//images.ctfassets.net/1es3ne0caaid/4lxO3Esb7emGocD27lhtHh/1e6d9a96e8ea8fe1fd802025de0d711b/instagram-clone-ionic-testing-img1.png)\n\nNow, testing with the device, we get the following:\n\n\n![instagram-clone-ionic-testing-img2](//images.ctfassets.net/1es3ne0caaid/2Uhn25upplCXU6iqyfadGh/92b3d3b1fd292f82349c25bce0023faa/instagram-clone-ionic-testing-img2.png)\n![instagram-clone-ionic-testing-img3](//images.ctfassets.net/1es3ne0caaid/6gYK4Js7v0ntF3UXwhaxnO/caf9582f605168f8cb54e474a3e280e3/instagram-clone-ionic-testing-img3.png)\n\n\n\n![instagram-clone-ionic-testing-img4](//images.ctfassets.net/1es3ne0caaid/36egj1E86rMXIeLUUCjhKR/6b8f5656c0e7dcbf2955ae4b07649ddf/instagram-clone-ionic-testing-img4.png)\n![instagram-clone-ionic-testing-img5](//images.ctfassets.net/1es3ne0caaid/1wh9dpUDH4P7aI8UsyEJpq/3f8416656595940fb1b6cefd0af4121d/instagram-clone-ionic-testing-img5.png)\n\n\n![instagram-clone-ionic-testing-img6](//images.ctfassets.net/1es3ne0caaid/36bEcaL8xNWD7uqYYn8mvl/bcda487222cf8b454f33ad01f5509d2f/instagram-clone-ionic-testing-img6.gif)\n\n\nHead over [here](https://ionicframework.com/docs/v3/intro/deploying/) for more information on how to deploy to target devices.\n\n\n## Conclusion\n\nIn this four-part series, we walked through building a simple Instagram clone with Ionic. In the [first part](https://pusher.com/tutorials/instagram-clone-ionic-part-1) of the series, we looked at how to build the interface of the application. In the [second part](https://pusher.com/tutorials/instagram-clone-ionic-part-2), we went through an introduction to GraphQL and how to fetch data dynamically in the application. The [third part](https://pusher.com/tutorials/instagram-clone-ionic-part-3) of the series walked through uploading posts and comments from the application using [Cloudinary](https://cloudinary.com) and Pusher to enable realtime functionality. Finally, in this part of the series, we looked at steps to making your servers publicly accessible so we could test the application on mobile devices.\n\nFeel free to use the concepts learned in this series when you’re building your own applications. Here’s a link to the full [GitHub](https://github.com/oreHGA/ionic-insta-clone) repository.","metaTitle":"Build an Instagram clone with Ionic - Part 4","metaDescription":"This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functionalities. In this fourth and final part, make your servers publicly accessible so you could test the application on mobile devices."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Vtewr1gxpgO251O5fz97K","type":"Entry","createdAt":"2019-07-11T23:06:46.966Z","updatedAt":"2019-07-11T23:06:46.966Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an Instagram clone with Ionic: Part 3 - Adding data dynamically and enabling realtime functionality","url":"instagram-clone-ionic-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/ionic-insta-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2019-07-02","description":"This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functionalities. In part three, create functionality that enables you to feed data into the data store of the application using GraphQL mutations and allowing users to see posts and comments in realtime.","prerequisite":"You will need Node 10+, Node Package Manager 6+, Cordova 8+ and Docker 18+ installed on your machine.","content":"The [first part](https://pusher.com/tutorials/instagram-clone-ionic-part-1) of this series focused on building the interface of the application, and the [second part](https://pusher.com/tutorials/instagram-clone-ionic-part-2) on connecting the application to dynamic data in the GraphQL server. This part of this series will walk through creating functionality that enables you to feed data into the data store of the application using GraphQL mutations and allowing users to see posts and comments in realtime.\n\n\n## Prerequisites\n- You should have followed through the earlier parts of the series.\n- Basic knowledge of JavaScript.\n- [Node](http://www.nodejs.org) installed on your machine (v10.13.0)\n- [Node Package Manager](https://www.npmjs.com/) installed on your machine (v 6.4.1)\n- [Cordova](https://cordova.apache.org/) installed on your machine (v 8.1.2)\n- Docker installed on your machine. (version 18.09.2) Download [here](https://www.docker.com/community-edition).\n\n\n## Uploading posts from the application\n\nAt the moment, the homepage of the application looks like this:\n\n\n![instagram-clone-ionic-realtime-img1](//images.ctfassets.net/1es3ne0caaid/4zNrFPCu0xcufB8Zvsp06y/da90a8409de49c84d6e463990fe19a6b/instagram-clone-ionic-realtime-img1.png)\n\nThe **+** button at the bottom right has no functionality attached to it. Let’s make the button trigger the addition of new posts. Create a new page that we will take the user to when they click the button.\n\n\n    ionic generate page CreatePost\n\n### Registering the new page\nGo ahead to add the `CreatePostPage` to the `declarations` and `entryComponents` in the `src/app/app.module.ts`:\n\n```typescript\n    // src/app/app.module.ts\n    // [...]\n    import { CreatePostPage } from '../pages/create-post/create-post';\n    // [...]\n    \n    @NgModule({\n      declarations: [\n        // [...]\n        CreatePostPage\n      ],\n      // [...]\n      entryComponents: [\n        // [...]\n        CreatePostPage\n      ],\n      // [...]\n    })\n    \n    export class AppModule {\n      // [...]\n    }\n```\n\n### Navigating from the HomePage to the CreatePostPage\nNow that we have that set, update the  `src/pages/home/home.ts`  with the `createPost` function to navigate to the `CreatePostPage`:\n\n```typescript\n    // src/pages/home/home.ts\n    [...]\n    import { CreatePostPage } from '../create-post/create-post';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html',\n      entryComponents: [ProfilePage, CommentPage, CreatePostPage]\n    })\n    \n    export class HomePage implements OnInit {\n      //[...]\n    \n      public createPost() {\n        // this function will redirect the user to the createPost page\n        this.navCtrl.push(\n          CreatePostPage,\n          new NavParams({ user_id: \"USER_ID_FETCHED_FROM_GRAPHQL_SERVER\" })\n        );\n      }\n    }\n```\n\n\u003e **Note**: Currently, the `user_id` is hardcoded. If you want to get yours, navigate to your GraphQL server http://localhost:4466. Run the query to fetch all your users and then pick an `id` of your choice:\n\n```\n    # GraphQL query on the console to fetch users\n    query{\n      users{\n        id\n        username\n        followers\n        following\n      }\n    }\n```\n\n### Update the HomePage to navigate to the CreatePostPage\nOn the `home.html` page, update the view to trigger the `createPost()` method. Now update your `home.html` to look like this:\n\n```html\n    \u003c!-- src/pages/home/home.html --\u003e\n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003eInstagram Clone\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \n    \u003cion-content\u003e\n      \u003c!-- this is where the posts will be --\u003e\n      \u003cdiv *ngFor=\"let post of posts\"\u003e\n        \u003cion-card class=\"single-post-home\"\u003e\n          \u003cion-item (click)=\"toProfilePage(post.user.id)\"\u003e\n            \u003cion-avatar item-start\u003e\n              \u003cimg [src]=\"post.user.avatar\"\u003e\n            \u003c/ion-avatar\u003e\n            \u003ch2\u003e{{post.user.username}}\u003c/h2\u003e\n          \u003c/ion-item\u003e\n    \n          \u003cimg [src]=\"post.image_url\"\u003e\n    \n          \u003cion-card-content\u003e\n            \u003cp\u003e\n              \u003cstrong\u003e{{post.user.username}}\u003c/strong\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp; {{post.description}}\u003c/p\u003e\n          \u003c/ion-card-content\u003e\n    \n          \u003cion-row\u003e\n            \u003cion-col\u003e\n              \u003cbutton ion-button icon-start clear small (click)=\"likePost()\"\u003e\n                \u003cion-icon name=\"heart\"\u003e\u003c/ion-icon\u003e\n                \u003cdiv\u003e{{post.likes}} likes\u003c/div\u003e\n              \u003c/button\u003e\n            \u003c/ion-col\u003e\n            \u003cion-col\u003e\n              \u003cbutton ion-button icon-start clear small (click)=\"toCommentSection(post)\"\u003e\n                \u003cion-icon name=\"text\"\u003e\u003c/ion-icon\u003e\n                \u003cdiv\u003e{{post.comments.length}} Comments\u003c/div\u003e\n              \u003c/button\u003e\n            \u003c/ion-col\u003e\n          \u003c/ion-row\u003e\n    \n        \u003c/ion-card\u003e\n      \u003c/div\u003e\n    \n      \u003cion-fab bottom right\u003e\n        \u003cbutton ion-fab mini (click)=\"createPost()\"\u003e\n          \u003cion-icon name=\"add\"\u003e\u003c/ion-icon\u003e\n        \u003c/button\u003e\n      \u003c/ion-fab\u003e\n    \u003c/ion-content\u003e\n```\n\n### Adding functionality to the CreatePostPage\nEdit your `create-post.html` page to look like this:\n\n```html\n    \u003c!-- src/pages/create-post/create-post.html\n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003eCreate a new post\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \n    \n    \u003cion-content\u003e\n      \u003cdiv style=\"text-align:center; padding: 16px\"\u003e\n        \u003cp\u003eEnter a post description and hit \u003cem\u003eCapture Image\u003c/em\u003e to create a post\u003c/p\u003e\n      \u003c/div\u003e\n    \n      \u003cdiv style=\"display: flex;justify-content: center;align-items: center;flex-direction: column;\"\u003e\n        \u003cion-item style=\"padding:16px\"\u003e\n          \u003cion-label floating\u003ePost Caption:\u003c/ion-label\u003e\n          \u003cion-input [(ngModel)]=\"description\" type=\"text\"\u003e\u003c/ion-input\u003e\n        \u003c/ion-item\u003e\n    \n        \u003cbutton style=\"width:80%; margin-top:20px\" ion-button (click)=\"loadWidget()\"\u003e\n          Capture Image\n        \u003c/button\u003e\n      \u003c/div\u003e\n    \n    \u003c/ion-content\u003e\n```\n\n### Using the Cloudinary Upload Widget to upload images\nTo allow image uploads in the application, let’s use the [Cloudinary Upload Widget](https://cloudinary.com/documentation/upload_widget). [Cloudinary](https://cloudinary.com) is a media full stack that enables you to easily handle image and video storage/manipulations in your applications. The best part about the Upload Widget is that it also allows your users to upload images from multiple sources which include: camera, device storage, web address, Dropbox, Facebook, and Instagram.\n\nTo get started with Cloudinary first sign up for a free account [here](https://cloudinary.com/signup). After creating an account, you will need to [set up an upload preset](https://cloudinary.gitbook.io/cloudy-cam/setting-up-a-cloudinary-account) that will help you upload to Cloudinary with ease.\n\n\n\u003e Note your Cloudinary `CLOUD_NAME` and Cloudinary `UPLOAD_PRESET` for use later in this article.\n\nInclude the Cloudinary Widget JavaScript file in the `\u003chead\u003e` of your `index.html`:\n\n```html\n    \u003c!-- src/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\" dir=\"ltr\"\u003e\n    \n    \u003chead\u003e\n      \u003c!-- other includes --\u003e \n      \u003c!-- include cloudinary javascript --\u003e\n      \u003cscript src=\"https://widget.cloudinary.com/v2.0/global/all.js\" type=\"text/javascript\"\u003e\u003c/script\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003c!-- --\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNow, you’re ready to use Cloudinary in your application. Edit the `create-post.ts` as follows. First include the necessary modules and declare `cloudinary` for use in the application:\n\n```typescript\n    // src/pages/create-post/create-post.ts\n    import { Component } from '@angular/core';\n    import { IonicPage, NavController, NavParams, AlertController } from 'ionic-angular';\n    import { Apollo } from 'apollo-angular';\n    import gql from 'graphql-tag';\n    import { HomePage } from '../home/home';\n    import { HttpClient } from '@angular/common/http';\n    \n    declare var cloudinary;\n    \n    //[...]\n```\n\nLet’s create a new mutation that will be responsible for creating a post on the GraphQL server we have running:\n\n```typescript\n    // src/pages/create-post/create-post.ts\n    //[...]\n    \n    // mutation to create a new post\n    const createUserPost = gql`\n      mutation createPost($image_url: String!, $description: String, $likes: Int, $postedAt: DateTime!,\n      $user: UserCreateOneWithoutPostsInput!){\n        createPost(data: {image_url: $image_url, description: $description, likes: $likes, postedAt: $postedAt, user: $user}){\n          id\n          image_url\n          description\n          likes\n          user{\n            id\n            username\n            avatar\n          }\n          comments {\n            id\n          }\n        }\n      }\n    `;\n    \n    // [...]\n```\n\nNow we update the `create-post.ts` have the functionality for the page:\n\n```typescript\n    //src/pages/create-post/create-post.ts\n    // [...]\n    \n    @IonicPage()\n    @Component({\n      selector: 'page-create-post',\n      templateUrl: 'create-post.html',\n    })\n    \n    export class CreatePostPage {\n      user_id: string;\n      uploadWidget: any;\n      posted_at: string;\n      image_url: string;\n      description: string;\n    \n      constructor(public navCtrl: NavController, public navParams: NavParams, private apollo: Apollo,\n        public alertCtrl: AlertController, public http: HttpClient) {\n        // get the user id of the user about to make post\n        this.user_id = this.navParams.get('user_id');\n    \n        let self = this;\n        this.uploadWidget = cloudinary.createUploadWidget({\n          cloudName: 'CLOUDINARY_CLOUD_NAME',\n          uploadPreset: 'CLOUDINARY_UPLOAD_PRESET',\n        }, (error, result) =\u003e {\n          if (!error \u0026\u0026 result \u0026\u0026 result.event === \"success\") {\n            console.log('Done! Here is the image info: ', JSON.stringify(result.info));\n            // image link\n            self.posted_at = result.info.created_at;\n            self.image_url = result.info.secure_url;\n            self.uploadPost();\n          }\n        })\n      }\n    \n      [...]\n```\n\n\u003e Be sure to replace the `CLOUDINARY_CLOUD_NAME` and `CLOUDINARY_UPLOAD_PRESET` with your credentials.\n\nThe constructor of the class gets the `user_id` from the navigation parameters and then creates the Cloudinary Upload Widget. We specify the `cloudName`, the `uploadPreset` and the functionality to execute when the image has been successfully uploaded to Cloudinary.\n\nOn successful upload, Cloudinary returns a `result` object. From it, we obtain the `secure_url`, `created_at` for the image and then trigger the `uploadPost()` method.\n\nNow, add the other class methods to the `CreatePostPage` class:\n\n```typescript\n    // src/pages/create-post/create-post.ts\n    \n      [...]\n      public uploadPost() {\n        this.apollo.mutate({\n          mutation: createUserPost,\n          variables: {\n            image_url: this.image_url,\n            description: this.description,\n            likes: 10,\n            postedAt: this.posted_at,\n            user: { \"connect\": { \"id\": this.user_id } }\n          }\n        }).subscribe((data) =\u003e {\n          console.log('uploaded successfuly');\n          // after sucessful upload, trigger pusher event\n          this.showAlert('Post Shared', 'Your post has been shared with other users');\n          this.navCtrl.push(HomePage);\n        }, (error) =\u003e {\n          this.showAlert('Error', 'There was an error sharing your post, please retry');\n        })\n      }\n    \n      public showAlert(title: string, subTitle: string) {\n        const alert = this.alertCtrl.create({\n          title: title,\n          subTitle: subTitle,\n          buttons: ['OK']\n        });\n        alert.present();\n      }\n    \n      public loadWidget() {\n        this.uploadWidget.open();\n      }\n    }\n```\n\nThe `loadWidget()` method, displays the upload widget to the user to upload their image. The `uploadPost()` method makes the mutation to the GraphQL server and when that’s complete take the user back to the home page.\n\nNow, your run your application using the command: \n\n```\n    ionic serve -c\n```\nNavigate to `localhost:``8100` on your browser. Now, when you navigate to create a post, you should get a view that looks like this:\n\n\n![instagram-clone-ionic-realtime-img2](//images.ctfassets.net/1es3ne0caaid/4A7V0lFUHwIaLfuRUtQTY5/4cb731c903481fc5e2a842ce0a8a8795/instagram-clone-ionic-realtime-img2.png)\n![instagram-clone-ionic-realtime-img3](//images.ctfassets.net/1es3ne0caaid/1Qob4VTro36fL2eKEav1lN/7d2ab6f3e23ec5ee19c0c4cde651ab26/instagram-clone-ionic-realtime-img3.png)\n\n![instagram-clone-ionic-realtime-img4](//images.ctfassets.net/1es3ne0caaid/5bGtfXifD1hoRABlCdYEuW/97f48caf149f91473ff01dd4051752ac/instagram-clone-ionic-realtime-img4.png)\n![instagram-clone-ionic-realtime-img5](//images.ctfassets.net/1es3ne0caaid/1smaCgPf2LnwRmYuaKubtn/7c740f170394cfd2fa785af6b36c9572/instagram-clone-ionic-realtime-img5.png)\n\n\n\n## Uploading comments on user posts\n\nEarlier in the series, we went through fetching comments on posts from the GraphQL server. Now, let’s walk through how to upload comments on posts to your GraphQL server.\n\nAdd the following mutation to your `comment.ts` file:\n\n```typescript\n    // src/pages/comment/comment.ts\n    \n    import { Component } from '@angular/core';\n    import { IonicPage, NavController, NavParams, AlertController } from 'ionic-angular';\n    import { Apollo } from 'apollo-angular';\n    import gql from 'graphql-tag';\n    import { HomePage } from '../home/home';\n    import { HttpClient } from '@angular/common/http';\n    \n    const makeComment = gql`\n      mutation createComment($message: String, $postedAt: DateTime!, $user: UserCreateOneWithoutCommentsInput!,\n      $post: PostCreateOneWithoutCommentsInput!){\n        createComment(data: {message: $message, postedAt: $postedAt, user: $user, post: $post}){\n          id\n          message\n          user {\n            avatar\n            username\n          }\n        }\n      }\n    `;\n    \n    @IonicPage()\n    @Component({\n      selector: 'page-comment',\n      templateUrl: 'comment.html'\n    })\n    \n    export class CommentPage {\n      // [...]\n```\n\nAfterward, add the `postComment`  to the method `CommentPage` class that is responsible for sending the comment to the GraphQL server:\n\n```typescript\n    // src/pages/comment/comment.ts\n    // [...]\n    \n    export class CommentPage {\n      // [...] other class variables\n    \n      post_id : string;\n      user_comment: string = \"\";\n    \n      constructor(\n        public navCtrl: NavController,\n        public navParams: NavParams,\n        private apollo: Apollo,\n        public alertCtrl: AlertController,\n        public http: HttpClient,\n      ) {\n        this.loadComments(this.post_id);\n      }\n    \n      // [...]  other methods\n    \n      public postComment() {\n        this.apollo.mutate({\n          mutation: makeComment,\n          variables: {\n            message: this.user_comment,\n            postedAt: (new Date()).toISOString(),\n            user: { connect: { id: \"USER_ID_FETCHED_FROM_GRAPHQL_SERVER\" } },\n            post: { connect: { id: this.post_id } }\n          }\n        }).subscribe((data) =\u003e {\n          this.showAlert('Success', 'Comment posted successfully');\n        }, (error) =\u003e {\n          this.showAlert('Error', 'Error posting comment');\n        });\n      }\n      public showAlert(title: string, subTitle: string) {\n        const alert = this.alertCtrl.create({\n          title: title,\n          subTitle: subTitle,\n          buttons: ['OK']\n        });\n        alert.present();\n      }\n    }\n```\n\n\u003e **Note**: The user ID was hardcoded to mimic a signed-in user making a comment.\n\nThe `postComment` method gathers the variables and makes the mutation. Afterwards, a modal is shown to the user to notify them of their successful post.\n\nFinally, in your `comment.html`, bind the comment text field to the `user_comment` variable and let the button trigger the `postComment` method. Update the `\u003cion-footer\u003e` in your `comment.html` file to look like this:\n\n```html\n    \u003c!-- app/pages/comment/comment.html --\u003e\n    \u003c!-- --\u003e\n    \n    \u003cion-footer\u003e\n      \u003cion-grid\u003e\n        \u003cion-row class=\"comment-area\"\u003e\n          \u003cion-col col-9\u003e\n            \u003cion-textarea placeholder=\"Enter your comment...\" [(ngModel)]=\"user_comment\"\u003e\u003c/ion-textarea\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col col-3\u003e\n            \u003cbutton ion-button class=\"comment-button\" (click)=\"postComment()\"\u003e\n              \u003cion-icon name=\"paper-plane\"\u003e\u003c/ion-icon\u003e\n            \u003c/button\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n      \u003c/ion-grid\u003e\n    \u003c/ion-footer\u003e\n```\n\nNow, the comment section of your application will look like this:\n\n\n![instagram-clone-ionic-realtime-img6](//images.ctfassets.net/1es3ne0caaid/6XSB4v5G7UKJH5E1oktDHg/96200763f732e62cbd52072f56396c83/instagram-clone-ionic-realtime-img6.png)\n![instagram-clone-ionic-realtime-img7](//images.ctfassets.net/1es3ne0caaid/5v4OQM92hujIAfCpkiQydP/7703d45197981a654a7fb8fff4ce1b86/instagram-clone-ionic-realtime-img7.png)\n\n\n\n## Enabling realtime functionality for posts and comments\n\nCurrently, new posts and comments are not updated on all the user devices in real time. This means that other users will have to physically reload their application to see when new posts/comments are made. For a social application, seeing posts and comments as they are made is very important. To add this functionality, let’s use [Pusher](https://pusher.com). Pusher allows you add realtime functionality in your applications with ease. \n\nTo get started, [sign up](https://dashboard.pusher.com/accounts/sign_up) for a free Pusher account if you don’t have one yet. Go ahead and create a new Pusher project and then note your `PUSHER_APP_ID`, `PUSHER_APP_KEY`, `PUSHER_APP_SECRET`, `PUSHER_CLUSTER`.\n\n### Creating a web server that triggers events\nLet’s create a simple web server that will trigger events using Pusher when users create new posts and when users add new comments. In your `server` directory, initialize an empty Node project:\n\n```\n    cd server\n    npm init -y\n```\n\nAfterward, install the necessary node modules:\n\n```\n    npm install body-parser express pusher\n```\n\n- `express` will power the web server\n- `body-parser` to handle incoming requests\n- `pusher` to add realtime functionality\n\nNow, create a new `server.js` file in the `server` directory:\n\n```\n    touch server.js\n```\n\nUpdate your `server.js` to look like this:\n\n```javascript\n    // server/server.js\n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const Pusher = require('pusher');\n    \n    const app = express();\n    \n    let pusher = new Pusher({\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n        res.header('Access-Control-Allow-Origin', '*');\n        res.header(\n            'Access-Control-Allow-Headers',\n            'Origin, X-Requested-With, Content-Type, Accept'\n        );\n        next();\n    });\n    \n    [...]\n```\n\nThis includes the necessary libraries we need and creates a Pusher object using your Pusher credentials obtained earlier and then defines some middleware to handle incoming requests.\n\nThe event server will have two routes:\n\n- `/trigger-post-event` -  trigger a new post event on the post channel\n- `/trigger-comment-event` - trigger a new comment event on the comment channel\n\nWhen a user makes a new post, our mobile application makes a request to the `/trigger-post-event` of the web server. The web server will then trigger a `new-post` event in the `post-channel`.\nAlso, when a new comment is added, our mobile application makes a request to the `/trigger-comment-event` of the web server. The web server also triggers a `new-comment` event in the `comment-channel`.\n\n\n\u003e Later in this tutorial, we will walk through how to listen for `new-post` and `new-comment` events on the `post-channel` and `comment-channel` respectively.\n\nAdd the following to your `server.js` file:\n\n```javascript\n    // server/server.js\n    [...]\n    \n    app.post('/trigger-post-event', (req, res) =\u003e {\n        // trigger a new post event via pusher\n        pusher.trigger('post-channel', 'new-post', {\n            'post': req.body.post\n        })\n        res.json({ 'status': 200 });\n    });\n    \n    app.post('/trigger-comment-event', (req, res) =\u003e {\n        // trigger a new comment event via pusher\n        pusher.trigger('comment-channel', 'new-comment', {\n            'comment': req.body.comment\n        });\n        res.json({ 'status': 200 });\n    })\n    \n    let port = 3128;\n    app.listen(port, () =\u003e {\n        console.log('App listening on port ' + port);\n    });\n```\n\nNow that the events server is created, you can run it by entering the command:\n\n```\n    node server.js\n```\n\nYour server will be available on `localhost:3128` as defined in the script. Now, let’s look at how to make requests to the web server from the mobile application.\n\n### Creating a Pusher service\nTo use Pusher in our Ionic application, let’s install the Pusher library:\n\n```\n    npm install pusher-js\n```\n\nAfterward, let’s create a simple Pusher service provider that will handle our connection with Pusher:\n\n```\n    ionic generate provider pusher-service\n```\n\nIn the `pusher-service.ts` we create a new Pusher object in the constructor by specifying the `PUSHER_APP_KEY`, `PUSHER_APP_CLUSTER`. Edit your `pusher-service.ts` file to look like this:\n\n```typescript\n    // src/providers/pusher-service/pusher-service.ts\n    import { Injectable } from '@angular/core';\n    import Pusher from 'pusher-js';\n    \n    @Injectable()\n    export class PusherServiceProvider {\n      pusher: any;\n      constructor() {\n        this.pusher = new Pusher('PUSHER_APP_KEY', {\n          cluster: 'PUSHER_APP_CLUSTER',\n          forceTLS: true\n        });\n      }\n    \n      postChannel() {\n        return this.pusher.subscribe('post-channel');\n      }\n    \n      commentChannel() {\n        return this.pusher.subscribe('comment-channel');\n      }\n    }\n```\n\nThe `constructor` method for the class creates a new Pusher object. The `postChannel` and `commentChannel` methods subscribe to and return the `post-channel` and `comment-channel` respectively. Earlier in the article, we looked at how to push events from the web server to the `post-channel` and `comment-channel`. Here we subscribe to those channels so we can listen for events later on.\n\nNow, go ahead to register the `PusherServiceProvider` in the `app.module.ts`. At this point, your `app.module.ts` should look like this:\n\n```typescript\n    // src/app/app.module.ts\n    \n    import { NgModule, ErrorHandler } from '@angular/core';\n    import { BrowserModule } from '@angular/platform-browser';\n    import { IonicApp, IonicModule, IonicErrorHandler } from 'ionic-angular';\n    import { MyApp } from './app.component';\n    \n    // import modules for apollo client\n    import { HttpClientModule } from '@angular/common/http';\n    import { ApolloModule, Apollo } from 'apollo-angular';\n    import { HttpLinkModule, HttpLink } from 'apollo-angular-link-http';\n    import { InMemoryCache } from 'apollo-cache-inmemory';\n    // import other pages\n    import { HomePage } from '../pages/home/home';\n    import { TabsPage } from '../pages/tabs/tabs';\n    import { ProfilePage } from '../pages/profile/profile';\n    import { CommentPage } from '../pages/comment/comment';\n    import { CreatePostPage } from '../pages/create-post/create-post';\n    \n    import { StatusBar } from '@ionic-native/status-bar';\n    import { SplashScreen } from '@ionic-native/splash-screen';\n    // import pusher sevice provider\n    import { PusherServiceProvider } from '../providers/pusher-service/pusher-service';\n    \n    @NgModule({\n      declarations: [\n        MyApp,\n        HomePage,\n        TabsPage,\n        ProfilePage,\n        CommentPage,\n        CreatePostPage\n      ],\n      imports: [\n        HttpClientModule,\n        ApolloModule,\n        HttpLinkModule,\n        BrowserModule,\n        IonicModule.forRoot(MyApp),\n      ],\n      bootstrap: [IonicApp],\n      entryComponents: [\n        MyApp,\n        HomePage,\n        TabsPage,\n        ProfilePage,\n        CommentPage,\n        CreatePostPage\n      ],\n      providers: [\n        StatusBar,\n        SplashScreen,\n        { provide: ErrorHandler, useClass: IonicErrorHandler },\n        PusherServiceProvider\n      ]\n    })\n    \n    export class AppModule {\n      constructor(apollo: Apollo, httpLink: HttpLink) {\n        apollo.create({\n          link: httpLink.create({ uri: 'http://localhost:4466' }), // uri specifies the endpoint for our graphql server\n          cache: new InMemoryCache()\n        })\n      }\n    }\n```\n\nNow that the `PusherServiceProvider` has been registered, we can then use it in our application to fetch posts in realtime.\n\n### Triggering and displaying posts in realtime\nIn the `uploadPost`  method of the `CreatePostPage`, after a post is created, the user is shown a success alert letting them know the upload is successful. Now, update the `uploadPost` method to send a `POST` request to the event server before displaying the success alert:\n\n```typescript\n    // src/pages/create-post/create-post.ts\n    \n    [...]\n    \n        public uploadPost() {\n        this.apollo.mutate({\n          mutation: createUserPost,\n          variables: {\n            image_url: this.image_url,\n            description: this.description,\n            likes: 10,\n            postedAt: this.posted_at,\n            user: { \"connect\": { \"id\": this.user_id } }\n          }\n        }).subscribe((data) =\u003e {\n          // after sucessful upload, trigger pusher event\n          let post_response: any = data;\n          this.http.post('http://localhost:3128/trigger-post-event', post_response.data.createPost)\n            .subscribe(() =\u003e {\n              this.showAlert('Post Shared', 'Your post has been shared with other users');\n              this.navCtrl.push(HomePage);\n            });\n        }, (error) =\u003e {\n          this.showAlert('Error', 'There was an error sharing your post, please retry');\n          console.log('there was an error sending :the query', error);\n        })\n      }\n    \n    [...]\n```\n\nNow that the event is being triggered, the next thing we need to do is to update the HomePage with new posts in realtime for all users. Add update your `home.ts` file to include the following:\n\n```typescript\n    // app/src/pages/home/home.ts\n    \n    // [...] other imports\n    import { PusherServiceProvider } from '../../providers/pusher-service/pusher-service';\n    \n    // [...]\n    \n    export class HomePage implements OnInit {\n      // [...]\n    \n      post_channel: any;\n    \n      constructor(\n        public navCtrl: NavController,\n        private apollo: Apollo,\n        private pusher: PusherServiceProvider) {\n        // [...]\n        this.initializeRealtimePosts();\n      }\n    \n      initializeRealtimePosts() {\n        this.post_channel = this.pusher.postChannel();\n        let self = this;\n        this.post_channel.bind('new-post', function (data) {\n          let posts_copy = [data.post];\n          self.posts = posts_copy.concat(self.posts);\n        })\n      }\n    \n      // [...]\n    \n    }\n```\n\nNow, your HomePage is ready to display new user posts in realtime. Navigate your application in the browser (`localhost:8100`) and create a new post:\n\n\n![instagram-clone-ionic-realtime-img8](//images.ctfassets.net/1es3ne0caaid/5l1og6W4nqBNkU6Yte68X/1b77afd492bd37ee69424dfaaeb9a7fd/instagram-clone-ionic-realtime-img8.gif)\n\n\n### Triggering and displaying comments in realtime\nIn the `postComment` method of the `CommentPage`, let’s make a request to the event server to after the comment is added to a post. Update the `postComment` method in the `comment.ts` as follows:\n\n```typescript\n    // src/page/comment/comment.ts\n    \n    [...]\n      public postComment() {\n        this.apollo.mutate({\n          mutation: makeComment,\n          variables: {\n            message: this.user_comment,\n            postedAt: (new Date()).toISOString(),\n            user: { connect: { id: \"USER_ID_FETCHED_FROM_GRAPHQL_SERVER\" } },\n            post: { connect: { id: this.post_id } }\n          }\n        }).subscribe((data) =\u003e {\n          let post_response: any = data;\n          // after successful upload, trigger new comment event\n          this.http.post('http://localhost:3128/trigger-comment-event', post_response.data.createComment)\n            .subscribe(() =\u003e {\n              this.showAlert('Success', 'Comment posted successfully');\n              this.navCtrl.push(HomePage);\n            });\n        }, (error) =\u003e {\n          this.showAlert('Error', 'Error posting comment');\n        });\n      }\n    \n    [...]\n```\n\n\u003e **Note**: Get a user ID for the user you want to post the comment for from the GraphQL server. In the previous article in the series, we looked at querying the data store for all users. Pick a user id you want to use.\n\nTo see the comments in realtime after they have been pushed to the `comment-channel` via the web server, we create a `initializeRealtimeComments` method in the `CommentPage` that gets the `comment-channel` from the `PusherServiceProvider`. We then bind the `new-comment`  event to the `comment-channel`. When a `new-comment` event occurs, the comments on the page are the updated automatically. \n\nUpdate the `comment.ts` file to include the following:\n\n```typescript\n    // src/app/pages/comment/comment.ts\n    // [...] other imports\n    import { PusherServiceProvider } from '../../providers/pusher-service/pusher-service';\n    \n    // [...]\n    \n    export class CommentPage {\n      comments: any;\n      username: string;\n      post_desc: string;\n      user_avatar: string;\n      post_id: string;\n    \n      user_comment: string = \"\";\n      comment_channel: any;\n    \n      constructor(\n        public navCtrl: NavController, public navParams: NavParams, private apollo: Apollo, public alertCtrl: AlertController, public http: HttpClient, private pusher: PusherServiceProvider\n      ) {\n        // [...]\n    \n        this.initializeRealtimeComments();\n      }\n    \n      initializeRealtimeComments() {\n        this.comment_channel = this.pusher.commentChannel();\n    \n        let self = this;\n        this.comment_channel.bind('new-comment', function (data) {\n          let comment_copy = self.comments;\n          self.comments = comment_copy.concat(data.comment);;\n        })\n      }\n    \n      // [...]\n    }\n```\n\nNow, when you open your browser and you navigate to `localhost:8100`. Here’s what happens when you create a new comment:\n\n\n![instagram-clone-ionic-realtime-img9](//images.ctfassets.net/1es3ne0caaid/3AlfEyDYdX7oFnfVDH4dJj/cfd8ac1f28777725e8b924a7bd2880bb/instagram-clone-ionic-realtime-img9.gif)\n\nYou can see the application rendering new comments in realtime without any other action from other users.\n\n## Conclusion\n\nIn this part of the series, we went through in detail how upload images from multiple sources seamlessly using [Cloudinary](http://cloudinary.com), how to make mutations to your GraphQL server using the Apollo Client and also enabling realtime functionality for posts and comments using [Pusher](http://pusher.com). Here’s a link to the [GitHub](https://github.com/oreHGA/ionic-insta-clone) repository for reference. Notice that through the series, you have been viewing your application on the browser. In the next part of the series, we will walk through steps to take to testing your Ionic application on mobile devices.","metaTitle":"Build an Instagram clone with Ionic - Part 3","metaDescription":"This four part series will walk you through building a simple Instagram clone with Ionic and adding realtime functionalities. In part three, create functionality that enables you to feed data into the application with GraphQL mutations and allowing users to see realtime posts and comments."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5YiSGJNNnceSCqhBNjKhMx","type":"Entry","createdAt":"2019-06-27T16:48:51.104Z","updatedAt":"2019-06-27T16:48:51.104Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an Instagram clone with Ionic: Part 2 - Connecting to GraphQL servers using Apollo client","url":"instagram-clone-ionic-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/ionic-insta-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2019-06-27","description":"This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functionalities. In part two, create the backend server for the clone application that will serve data to the application.","prerequisite":"You will need Node 10+, Node Package Manager 6+, Cordova 8+ and Docker 18+ installed on your machine.","content":"In the [previous part](https://pusher.com/tutorials/instagram-clone-ionic-part-1) of this series, we looked at how to set up the interface for our Instagram clone application. One thing though, was that we used static data to populate the application. In this part of the series, we will create the backend server for the application that will serve data to the application.\n\n\n## Pre-requisites\n- You should have followed through the first part of the series.\n- Basic knowledge of JavaScript.\n- [Node](http://www.nodejs.org) installed on your machine (v10.13.0)\n- [Node Package Manager](https://www.npmjs.com/) installed on your machine (v 6.4.1)\n- [Cordova](https://cordova.apache.org/) installed on your machine (v 8.1.2)\n- Docker installed on your machine. (version 18.09.2) Download [here](https://www.docker.com/community-edition).\n\n\n## Building the GraphQL server\n\nThe backend server will be responsible for serving the data that we will render in the application. By now, you have probably heard about GraphQL and wondered about how it all works, let’s go through a brief introduction and see what the buzz is all about \n\n### What is GraphQL?\nGraphQL is a query language that helps speed up development by enabling developers to query exactly the data they need from the client without having to fetch other excess data. It was developed by Facebook and was open-sourced in 2015. Since then, it has been used in production by companies like Twitter and GitHub. \n\nThe query language is largely based on two major concepts, queries and mutations. Queries are used to fetch data from your data source and mutations are used to edit the existing data source. \n\n\n\u003e As we progress through this series, we will take a deeper look at understanding what queries and mutations are and how to write them.\n\nThe only caveat though is that creating and managing a GraphQL server seems like a herculean task to people who are new to it. So, in this part of the series, we are going to see how to use [Prisma](https://www.prisma.io/) to automatically turn your database into a GraphQL API thus enabling us to read and write to the application’s database using GraphQL queries and mutations. To read more about Prisma features, head over [here](https://www.prisma.io/docs/).\n\nTo get started, install the Prisma CLI on your machine:\n\n```\n    #install using brew (if you have a mac)\n    brew tap prisma/prisma\n    brew install prisma\n    \n    # or install with npm\n    npm install -g prisma\n```\n\nNext we need to create a Docker compose file in the `server` directory for your project that will configure the Prisma server and let it know what database to connect to. In your `instagram-ionic` project, create a folder `server` that will house the Prisma service:\n\n```\n    mkdir server\n    cd server\n    touch docker-compose.yml\n```\n\nEdit the docker-compose file to look like this:\n\n```\n    version: '3'\n    services:\n      prisma:\n        image: prismagraphql/prisma:1.31\n        restart: always\n        ports:\n        - \"4466:4466\"\n        environment:\n          PRISMA_CONFIG: |\n            port: 4466\n            databases:\n              default:\n                connector: mysql\n                host: mysql\n                port: 3306\n                user: root\n                password: prisma\n                migrations: true\n      mysql:\n        image: mysql:5.7\n        restart: always\n        environment:\n          MYSQL_ROOT_PASSWORD: prisma\n        volumes:\n          - mysql:/var/lib/mysql\n    volumes:\n      mysql:\n```\n\nNow, go ahead and start your Prisma server and the database by running the command:\n\n```\n    docker-compose up -d\n```\n\nYou should get a prompt that looks like this:\n\n\n![instagram-clone-ionic-graphql-img1](//images.ctfassets.net/1es3ne0caaid/6VbZfa5oGguFFZBHDt0dcX/eda52227590779f02216f0725b1e2732/instagram-clone-ionic-graphql-img1.png)\n\nNow, the Prisma server is up and running, let’s create a simple Prisma service in the `server` directory:\n\n```\n    cd server \n    prisma init --endpoint http://localhost:4466\n```\n\n\u003e `http://localhost:4466` represents the port your local Prisma service is running on. To confirm the port, run the command `docker ps` . All the created containers will be listed for you to find the port your container will run on. \n\nInitializing the Prisma service creates two files in the `server` directory:\n\n- `prisma.yml` defines some config for the Prisma service\n- `datamodel.prisma` specifies the data model our database will be based on.\n\nLet’s edit the data model to meet what we need for our Instagram clone application. Update your `datamodel.prisma` to look like this:\n\n```\n    # server/datamodel.prisma\n    type User  {\n      id: ID! @unique @id\n      username: String! @unique\n      fullname: String!\n      avatar: String!\n      bio: String!\n      followers: Int!\n      following: Int!\n      posts: [Post!]! @relation(name: \"UserPosts\")\n      comments: [Comment!]! @relation(name: \"UserComments\")\n    }\n    \n    type Comment{\n      id: ID! @unique @id\n      message: String\n      postedAt: DateTime!\n      user: User! @relation(name: \"UserComments\")\n      post: Post! @relation(name: \"PostComments\")\n    }\n    \n    type Post{\n      id: ID! @unique @id\n      image_url: String!\n      description: String,\n      likes: Int @default(value: 0)\n      postedAt: DateTime!\n      user: User! @relation(name: \"UserPosts\")\n      comments: [Comment!]! @relation(name: \"PostComments\")\n    }\n```\n\nThe data model above specifies that our application has the main models with relationships with one another. The data model is written in GraphQL Schema Definition Language which is largely based on two concepts of `types` and `fields`. Head over [here](https://www.graph.cool/docs/reference/database/data-modelling-eiroozae8u) to learn more about writing in the GraphQL SDL.\n\nThe `prisma.yml` file looks like this:\n\n```\n    endpoint: http://localhost:4466\n    datamodel: datamodel.prisma\n```\n\nNow that we have specified the data model for the application, we then deploy the Prisma service by running the command below in the `server` directory:\n\n```\n    prisma deploy\n```\n\nYou get a prompt that looks like this:\n\n\n![instagram-clone-ionic-graphql-img2](//images.ctfassets.net/1es3ne0caaid/1RbLyQUU2pd72dCbOH0HhY/b45e8e3e2abe6f575f56e98f0f7d878c/instagram-clone-ionic-graphql-img2.png)\n\nNow that we have deployed our Prisma service, let’s go ahead to the playground to see how fetching data using the GraphQL API will look like. Navigate to `http://localhost:4466` and you get a view that looks like this:\n\n\n![instagram-clone-ionic-graphql-img3](//images.ctfassets.net/1es3ne0caaid/44B4yv6GiPzOF1NIMKNiQd/44cd00fa9a8daa7560eb8cc25b4e42fe/instagram-clone-ionic-graphql-img3.png)\n\nNow with Prisma, all the possible queries and mutations possible on the data model are created automatically after we deployed the service. This means that as we update our data model, the possible queries and mutations on our data are also updated accordingly.\n\n### Creating a new user\nCreating a new user from the playground will look like this:\n\n```\n    mutation(\n    $username: String!, $fullname: String!, $avatar: String!, $bio: String!,\n    $followers: Int!, $following: Int!){\n     createUser(data: {username: $username, fullname: $fullname, avatar: $avatar,\n    bio: $bio, followers: $followers, following: $following}){\n              username\n              fullname\n              bio\n            } \n    }\n```\n\nAdd the query variables in the bottom left section:\n\n```\n    {\n      \"username\": \"oreog\",\n      \"fullname\": \"Ore Og!\",\n      \"avatar\": \"https://api.adorable.io/avatars/100/big_dawg@oreog.png\",\n      \"bio\": \"Software Engineer\",\n      \"followers\": 1000,\n      \"following\": 534\n    }\n```\n\nWhen you run the mutation, you will have a view that looks like this. With the created user returned on the right side of the view.\n\n![instagram-clone-ionic-graphql-img4](//images.ctfassets.net/1es3ne0caaid/3eU6InxWbR1QXs8Rddh738/5bdcf917a1b59797e32259b048e755d0/instagram-clone-ionic-graphql-img4.png)\n\n### Fetching the list of users\nNow, to view the available users, create a query that looks like this:\n\n```\n    query{\n      users{\n        id\n        username\n        followers\n        following\n      }\n    }\n```\n\nWhen the query is run, you get the list of users with the requested information.\n\n![instagram-clone-ionic-graphql-img5](//images.ctfassets.net/1es3ne0caaid/1EOZ4SJQRmH4xeqL48vSwY/b20d69fea4dab53a0fd5a41add38da65/instagram-clone-ionic-graphql-img5.png)\n\n### Creating a new post\nTo create a new post, the mutation will look like this:\n\n```\n    mutation(\n      $image_url: String!, $description: String, $likes: Int, $postedAt: DateTime!,\n      $user: UserCreateOneWithoutPostsInput!\n    ){\n      createPost(data: {image_url: $image_url, description: $description,\n      likes: $likes, postedAt: $postedAt, user: $user}){\n        id\n        image_url\n        description\n        user{\n          id\n          username\n        }\n      }\n    }\n```\n\nAdd the query variables to the bottom left of the console. This will specify the content of the post you’re about to create:\n\n```\n    {\n      \"image_url\": \"https://pbs.twimg.com/media/D4hTNmQWsAADzpo?format=jpg\u0026name=medium\",\n      \"description\": \"Hi there\",\n      \"likes\": 1104,\n      \"postedAt\": \"2019-04-21T12:19:05.568Z\",\n            \"user\": {\"connect\": {\"id\": \"USER_ID_FETCHED_FROM_GRAPHQL_SERVER\"}}\n    }\n```\n\n\u003e Pick an `id` of your choice from the previous query above\n\n\n![instagram-clone-ionic-graphql-img6](//images.ctfassets.net/1es3ne0caaid/YdbtGA39X01xBAq9i4HOA/c1a7d2c21334729d97908a93191e844e/instagram-clone-ionic-graphql-img6.png)\n\n## Rendering data in our application\n\nNow that we have seen how to create a GraphQL server using Prisma, let’s go ahead to enable our current Ionic application to fetch data dynamically using GraphQL. To do this, we going to make use of [Apollo Client](https://www.apollographql.com/client). Apollo Client gives developers the ability to bind GraphQL data to their user interface with ease.\n\n\n\u003e We are going to assume that our database has already been populated with some sample data we are going to fetch\n\n### Installing the Apollo client\nLet’s see how to use this with our application. First install the necessary packages in your `ionic-insta-clone` project, because Ionic applications are built with Angular, we are going to install packages that allow us to use the Apollo Client in Angular applications:\n\n```\n    cd instagram-ionic\n    \n    npm install apollo-angular@1.1.2 apollo-angular-link-http@1.1.1 apollo-client@2.3.8 apollo-cache-inmemory@1.2.7 graphql-tag@2.9.2 graphql@0.13.2 pluralize --save\n    \n    npm install apollo-utilities@1.0.22 --no-save\n    npm install typescript@3.0.0 --save-dev\n```\n\nWe then need to import the modules in our `app.module.ts` file:\n\n```typescript\n    // src/app/app.module.ts\n    import { NgModule, ErrorHandler } from '@angular/core';\n    import { BrowserModule } from '@angular/platform-browser';\n    import { IonicApp, IonicModule, IonicErrorHandler } from 'ionic-angular';\n    import { MyApp } from './app.component';\n    \n    // import modules for apollo client\n    import {HttpClientModule} from '@angular/common/http';\n    import {ApolloModule, Apollo} from 'apollo-angular';\n    import {HttpLinkModule, HttpLink} from 'apollo-angular-link-http';\n    import {InMemoryCache} from 'apollo-cache-inmemory';\n    \n    // import other pages\n    [...]\n    \n    @NgModule({\n      declarations: [...],\n      imports: [\n        HttpClientModule,\n        ApolloModule,\n        HttpLinkModule,\n        BrowserModule,\n        IonicModule.forRoot(MyApp)\n      ],\n      // other app specifications\n    })\n    export class AppModule {}\n```\n\n### Configuring the Apollo client\nIn the `app.module.ts` file, we then go ahead to inject Apollo into our application like this:\n\n```typescript\n    // src/app/app.module.ts\n    import {HttpClientModule} from '@angular/common/http';\n    import {ApolloModule, Apollo} from 'apollo-angular';\n    import {HttpLinkModule, HttpLink} from 'apollo-angular-link-http';\n    import {InMemoryCache} from 'apollo-cache-inmemory';\n    // other application imports\n    [...]\n    \n    export class AppModule {\n      constructor(apollo: Apollo, httpLink: HttpLink){\n        apollo.create({\n          link: httpLink.create({uri: 'http://localhost:4466'}), \n          // uri specifies the endpoint for our graphql server\n          cache: new InMemoryCache()\n        })    \n      }\n    }\n```\n\nTo avoid an error when your application is being compiled, add the following to your `tsconfig.json`:\n\n```json\n    // tsconfig.json\n    {\n      \"compilerOptions\": {\n        // other options\n        \"lib\": [\n          \"esnext.asynciterable\"\n        ]\n        // other options\n      }\n      // other options\n    }\n```\n\nNow that we have the client fully configured, let’s get to using it to fetch and render data to the user. \n\n### Fetching and rendering posts on home page\nLet’s head over to the homepage to see how we can achieve this. In your `home.ts` file, import the Apollo client and then create a query to fetch the post as follows:\n\n```typescript\n    // src/pages/home/home.ts\n    import { Component, OnInit } from '@angular/core';\n    import { NavController, NavParams } from 'ionic-angular';\n    import { ProfilePage } from '../profile/profile';\n    import { CommentPage } from '../comment/comment';\n    import gql from 'graphql-tag';\n    import { Apollo } from 'apollo-angular';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html',\n      entryComponents: [ProfilePage, CommentPage]\n    })\n    \n    export class HomePage implements OnInit {\n      posts: any;\n    \n      constructor(public navCtrl: NavController, private apollo: Apollo) { \n      }\n    \n      ngOnInit(){\n        this.fetchPosts();\n      }\n      \n      fetchPosts() {\n        this.apollo\n          .query({\n            query: gql`\n              {\n                posts {\n                  image_url\n                  description\n                  likes\n                  user {\n                    id\n                    username\n                    avatar\n                  }\n                  comments {\n                    id\n                  }\n                }\n              }\n            `\n          })\n          .subscribe(({ data }) =\u003e {\n            let inner_posts: any = data;\n            this.posts = inner_posts.posts;\n          });\n      }\n      \n      [...]\n    }\n```\n\nAfterward, we then go ahead to the `home.html` and then render the posts on the homepage as follows:\n\n```html\n    \u003c!-- src/pages/home/home.html --\u003e\n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003eInstagram Clone\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \n    \u003cion-content\u003e\n      \u003c!-- this is where the posts will be --\u003e\n      \u003cdiv *ngFor=\"let post of posts\"\u003e\n        \u003cion-card class=\"single-post-home\"\u003e\n          \u003cion-item (click)=\"toProfilePage(post.user.id)\"\u003e\n            \u003cion-avatar item-start\u003e\n              \u003cimg [src]=\"post.user.avatar\"\u003e\n            \u003c/ion-avatar\u003e\n            \u003ch2\u003e{{post.user.username}}\u003c/h2\u003e\n          \u003c/ion-item\u003e\n      \n          \u003cimg [src]=\"post.image_url\"\u003e\n      \n          \u003cion-card-content\u003e\n            \u003cp\u003e\u003cstrong\u003e{{post.user.username}}\u003c/strong\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp; {{post.description}}\u003c/p\u003e\n          \u003c/ion-card-content\u003e\n      \n          \u003cion-row\u003e\n            \u003cion-col\u003e\n              \u003cbutton ion-button icon-start clear small (click)=\"likePost()\"\u003e\n                \u003cion-icon name=\"heart\"\u003e\u003c/ion-icon\u003e\n                \u003cdiv\u003e{{post.likes}} likes\u003c/div\u003e\n              \u003c/button\u003e\n            \u003c/ion-col\u003e\n            \u003cion-col\u003e\n              \u003cbutton ion-button icon-start clear small (click)=\"toCommentSection()\"\u003e\n                \u003cion-icon name=\"text\"\u003e\u003c/ion-icon\u003e\n                \u003cdiv\u003e{{post.comments.length}} Comments\u003c/div\u003e\n              \u003c/button\u003e\n            \u003c/ion-col\u003e\n          \u003c/ion-row\u003e\n      \n        \u003c/ion-card\u003e\n      \u003c/div\u003e\n    \n      \u003cion-fab bottom right\u003e\n        \u003cbutton ion-fab mini\u003e\u003cion-icon name=\"add\"\u003e\u003c/ion-icon\u003e\u003c/button\u003e\n      \u003c/ion-fab\u003e\n    \u003c/ion-content\u003e\n```\n\nNow, we also need to update the `toProfilePage()` function, in our `home.ts` file to take us to the profile page.\n\n```typescript\n    // src/pages/home/home.ts\n    \n    [...]\n    \n    export class HomePage implements OnInit {\n      [...]\n      \n      public toProfilePage(user_id: string) {\n        let nav_params = new NavParams({ id: user_id });\n        this.navCtrl.push(ProfilePage, nav_params);\n      }\n    \n      [...]\n    }\n```\n\nWe created a navigation parameter object with the `user_id` passed to the next page. Now, when we run the application:\n\n```\n    ionic serve\n```\nwe have the following view:\n\n\n![instagram-clone-ionic-graphql-img7](//images.ctfassets.net/1es3ne0caaid/4OEqZt7ZrUP7DOC93fR522/3e4392021267ac32449183d57b558d41/instagram-clone-ionic-graphql-img7.png)\n\n### Fetching and rendering data on the profile page\nWhen the username or avatar is clicked, we want to navigate to the user’s profile page. Now, the `profile.ts` page is also updated to fetch the users information from the GraphQL server and display it. Update the file as follows:\n\n```typescript\n    // src/pages/profile/profile.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { IonicPage, NavController, NavParams } from 'ionic-angular';\n    import { Apollo } from 'apollo-angular';\n    import  gql from 'graphql-tag';\n    import pluralize from 'pluralize';\n    \n    @IonicPage()\n    @Component({\n      selector: 'page-profile',\n      templateUrl: 'profile.html',\n    })\n    \n    export class ProfilePage implements OnInit {\n      user: any;\n    \n      constructor(public navCtrl: NavController, public navParams: NavParams,  private apollo: Apollo) {\n      }\n    \n      ngOnInit(){\n        this.fetchProfile( this.navParams.get('id'));\n      }\n    \n    \n      fetchProfile(user_id: string){\n        this.apollo\n          .query({\n            query: gql`\n            {\n              user(where: {id: \"${user_id}\"}){\n                id\n                username\n                fullname\n                avatar\n                bio\n                followers\n                following\n                posts{\n                  image_url\n                }\n              }\n            }\n            `,\n          })\n          .subscribe(({ data }) =\u003e {\n            let result:any = data;\n            this.user = result.user;\n          });\n      }\n    \n      plural(word, number){\n        return pluralize(word, number);\n      }\n    }\n```\n\nAfter the page is created, the Apollo Client makes a query to fetch the user profile using the `user_id` and then assigns the results to the `user` property of the Profile page class.\n\nNext, update the `profile.html` to render the user’s data:\n\n```html\n    \u003c!-- src/pages/profile/profile.html --\u003e\n    \u003cion-header\u003e\n    \n      \u003cion-navbar\u003e\n        \u003cion-title\u003e{{user?.username}}\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \n    \u003c/ion-header\u003e\n    \n    \n    \u003cion-content\u003e\n      \u003c!-- first set should be a row --\u003e\n      \u003cion-grid class=\"profile-intro\"\u003e\n        \u003cion-row\u003e\n          \u003cion-col col-4\u003e\n            \u003cimg class=\"profile-photo\" [src]=\"user?.avatar\"\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col col-8\u003e\n            \u003cdiv class=\"profile-info\"\u003e\n              \u003cdiv class=\"post-count info-square\"\u003e\n                \u003cp\u003e\n                  \u003cstrong\u003e{{ user?.posts.length }}\u003c/strong\u003e\u003cbr\u003e\n                  \u003cem\u003e{{ this.plural('post', user?.posts.length) }}\u003c/em\u003e\n                \u003c/p\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"follower-count info-square\"\u003e\n                \u003cp\u003e\n                  \u003cstrong\u003e{{ user?.followers }}\u003c/strong\u003e\u003cbr\u003e\n                  \u003cem\u003e{{ this.plural('follower', user?.followers) }}\u003c/em\u003e\n                \u003c/p\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"following-count info-square\"\u003e\n                \u003cp\u003e\n                  \u003cstrong\u003e{{ user?.following }}\u003c/strong\u003e\u003cbr\u003e\n                  \u003cem\u003efollowing\u003c/em\u003e\n                \u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv\u003e\n              \u003cbutton ion-button class=\"follow-button\"\u003eFollow\u003c/button\u003e\n            \u003c/div\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n      \u003c/ion-grid\u003e\n    \n      \u003cdiv class=\"more-details\"\u003e\n        \u003cp class=\"user-name\"\u003e\u003cstrong\u003e{{ user?.fullname }}\u003c/strong\u003e\u003c/p\u003e\n        \u003cp class=\"user-bio\"\u003e{{ user?.bio }}\u003c/p\u003e\n      \u003c/div\u003e\n    \n      \u003cion-segment color=\"primary\"\u003e\n        \u003cion-segment-button value=\"posts\" selected\u003e\n          \u003cion-icon name=\"grid\"\u003e\u003c/ion-icon\u003e    \n        \u003c/ion-segment-button\u003e\n        \u003cion-segment-button value=\"tagged\"\u003e\n            \u003cion-icon name=\"contacts\"\u003e\u003c/ion-icon\u003e\n          \u003c/ion-segment-button\u003e\n        \u003cion-segment-button value=\"bookmark\"\u003e\n          \u003cion-icon name=\"bookmark\"\u003e\u003c/ion-icon\u003e\n        \u003c/ion-segment-button\u003e\n      \u003c/ion-segment\u003e\n    \n      \u003cion-grid class=\"image-grid\"\u003e\n        \u003cion-row class=\"single-row\"\u003e\n            \u003cion-col *ngFor = \"let post of user?.posts\" col-4 class=\"single-image\"\u003e\n              \u003cimg width=\"100%\" height=\"100%\" [src]=\"post.image_url\"\u003e\n            \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n      \u003c/ion-grid\u003e\n    \u003c/ion-content\u003e\n```\n\nNow, make sure your server is running and then visit the browser at `http://locahost:8100` - where ionic is serving your application at. You should get a view that looks like this:\n\n\n![instagram-clone-ionic-graphql-img8](//images.ctfassets.net/1es3ne0caaid/5aM0UrVyYnbl1RwoIeYjrs/aaecfe94211d2541cdfa7ccea8ede53f/instagram-clone-ionic-graphql-img8.png)\n\n![instagram-clone-ionic-graphql-img9](//images.ctfassets.net/1es3ne0caaid/23YGE81PFMjRx2c3SVMSgv/4c8049e987fdb97d6c198b017d499fce/instagram-clone-ionic-graphql-img9.gif)\n\n### Fetching and rendering and creating comments on the comments page\nFinally, let’s consider how we handle comments in our application dynamically. In the `home.html` let’s update the `comment button` to send the user to view the post comments:\n\n```html\n    \u003c!-- src/pages/home/home.html --\u003e\n    \n    [...]\n      \u003cion-col\u003e\n        \u003cbutton ion-button icon-start clear small (click)=\"toCommentSection(post)\"\u003e\n          \u003cion-icon name=\"text\"\u003e\u003c/ion-icon\u003e\n          \u003cdiv\u003e{{post.comments.length}} Comments\u003c/div\u003e\n        \u003c/button\u003e\n      \u003c/ion-col\u003e\n    [...]\n```    \n\nAnd then update the `toCommentSection()` function in the `home.ts` to pass the post as a parameter to the Comments page:\n\n```typescript\n    // src/pages/home/home.ts\n    \n    [...]\n      public toCommentSection(post_data: any) {\n        let nav_params = new NavParams({ post: post_data });\n        this.navCtrl.push(CommentPage, nav_params);\n      }\n    [...]\n```\n\nNow, in the `comment.ts`, we import the Apollo client that was configured earlier and fetch the comments for the selected post:\n\n```typescript\n    // src/pages/comment/comment.ts\n    \n    import { Component } from '@angular/core';\n    import { IonicPage, NavController, NavParams } from 'ionic-angular';\n    import { Apollo } from 'apollo-angular';\n    import gql from 'graphql-tag';\n    \n    @IonicPage()\n    @Component({\n      selector: 'page-comment',\n      templateUrl: 'comment.html'\n    })\n    \n    export class CommentPage {\n      comments: any;\n      username: string;\n      post_desc: string;\n      user_avatar: string;\n    \n      constructor(\n        public navCtrl: NavController,\n        public navParams: NavParams,\n        private apollo: Apollo\n      ) {\n        this.username = this.navParams.get('username');\n        this.user_avatar = this.navParams.get('avatar');\n        this.post_desc = this.navParams.get('post_desc');\n        this.loadComments(this.navParams.get('post_id'));\n      }\n    \n      loadComments(post_id: string) {\n        this.apollo\n          .query({\n            query: gql`\n              {\n                comments(where: { post: { id: \"${post_id}\" } }) {\n                  id\n                  message\n                  user {\n                    avatar\n                    username\n                  }\n                }\n              }\n            `\n          })\n          .subscribe(({ data }) =\u003e {\n            let result: any = data;\n            this.comments = result.comments;\n          });\n      }\n    }\n```\n\nAfterwards, we update the `comment.html` to show the users, comments as follows:\n\n```html\n    \u003c!-- src/pages/comment/comment.html --\u003e\n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003eComments\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \n    \u003cion-content\u003e\n      \u003cion-grid\u003e\n        \u003cion-row class=\"post-content\"\u003e\n          \u003cion-col col-2\u003e\n            \u003cion-avatar item-start\u003e\n              \u003cimg class=\"icon-photo\" [src]=\"user_avatar\"\u003e\n            \u003c/ion-avatar\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col col-10\u003e\n            \u003cdiv\u003e\n              \u003cp\u003e\n                \u003cstrong\u003e{{username}}\u003c/strong\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp; {{post_desc}}\n              \u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n    \n        \u003cion-row *ngFor=\"let comment of comments\" class=\"user-comments\"\u003e\n          \u003cion-col col-2\u003e\n            \u003cion-avatar item-start\u003e\n              \u003cimg class=\"icon-photo\" [src]=\"comment.user.avatar\"\u003e\n            \u003c/ion-avatar\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col col-10\u003e\n            \u003cdiv\u003e\n              \u003cp\u003e\n                \u003cstrong\u003e{{comment.user.username}}\u003c/strong\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;{{ comment.message }}\n              \u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n      \u003c/ion-grid\u003e\n    \u003c/ion-content\u003e\n    \n    \u003cion-footer\u003e\n      \u003cion-grid\u003e\n        \u003cion-row class=\"comment-area\"\u003e\n          \u003cion-col col-9\u003e\n            \u003cion-textarea placeholder=\"Enter your comment...\"\u003e\u003c/ion-textarea\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col col-3\u003e\n            \u003cbutton ion-button class=\"comment-button\"\u003e\n              \u003cion-icon name=\"paper-plane\"\u003e\u003c/ion-icon\u003e\n            \u003c/button\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n      \u003c/ion-grid\u003e\n    \u003c/ion-footer\u003e\n```\n\n![instagram-clone-ionic-graphql-img10](//images.ctfassets.net/1es3ne0caaid/4Ynjth5fc0RY2g2FqyXdMR/6062862ba680e665755a96731a4aed02/instagram-clone-ionic-graphql-img10.png)\n\n\n## Conclusion\n![instagram-clone-ionic-graphql-img11](//images.ctfassets.net/1es3ne0caaid/36XSi3JhQrZ0gVWOjabogI/2bcaf9dfdf61bc34dc88b74f1452556e/instagram-clone-ionic-graphql-img11.gif)\n\nIn this part of this series, we examined how to connect our application with some dynamic data using Prisma to generate a GraphQL API and Apollo Client to interact with our GraphQL API seamlessly only requesting data that we need to render. In the next part, we will examine how to add this data from the interface and integrate realtime functionality to the application. Here’s a link to the full [GitHub](https://github.com/oreHGA/ionic-insta-clone) repository for more reference.","metaTitle":"Build an Instagram clone with Ionic - Part 2","metaDescription":"This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functionalities. In part two, create the backend server for the clone application that will serve data to the application."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5qLnzIl2Fok5bGlUdXlWp0","type":"Entry","createdAt":"2019-06-25T17:51:57.349Z","updatedAt":"2019-06-25T17:51:57.349Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an Instagram clone with Ionic: Part 1 - Creating the interface","url":"instagram-clone-ionic-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/ionic-insta-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}}],"reviewDate":"2019-06-25","description":"This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functionalities. In part one, create a simple interface for your Instagram clone and a running demo with Ionic.","prerequisite":"You will need Node 10+, Node Package Manager 6+ and Cordova 8+ installed on your machine.","content":"In this tutorial series, we are going to do a deep dive into how to make a simple Instagram clone with Ionic and add realtime functionalities with Pusher.\n\nYou are likely a part of the billion monthly active users that use Instagram! If you are as curious as I am, you will have given some thought about how it was built. Well, you don’t have to ponder anymore.\n\n## What we’ll build\n\nBy the end of this chapter, you will have created a simple interface for your Instagram clone and have a running demo with Ionic. What you have should look like this:\n\n![instagram-clone-ionic-interface-img1](//images.ctfassets.net/1es3ne0caaid/3x7yO4q3IP6ZCJ1IFDLlnU/bc7a29b062de14f68c1b7a575e3fc1ef/instagram-clone-ionic-interface-img1.gif)\n\n## Prerequisites\n\nTo follow through this series adequately, you’ll need the following:\n\n- Basic knowledge of JavaScript\n- [Node](http://www.nodejs.org) installed on your machine (v10.13.0)\n- [Node Package Manager](https://www.npmjs.com/) installed on your machine (v 6.4.1)\n- [Cordova](https://cordova.apache.org/) installed on your machine (v 8.1.2)\n\n\n## Getting started\n\nIonic is a framework that allows you to build native and progressive web applications using web technologies you’re already familiar with. The best part is that you have one code base for your native applications and the applications are written in Angular a framework that has a very low learning curve. So, you no longer need to know how to write Swift and Kotlin before you can build native applications anymore. To get started, you first need to install the Ionic CLI on your machine.\n\n```\n    npm install -g ionic@3.9.2\n```\n\n\u003e Ensure you have the specified version installed\n\nAfter your installation is complete, go ahead and create a new starter project using the command:\n\n```\n    ionic start instagram-ionic tabs\n```\n\n\u003e When asked to integrate the application with Cordova select `yes`.\n\nThis creates a starter project with a simple tabbed interface. Now, run your application, using the command:\n\n```\n    ionic serve\n```\n\nNavigate to `localhost:8100` on your browser and you get the following view: \n\n![instagram-clone-ionic-interface-img2](//images.ctfassets.net/1es3ne0caaid/yEfoiZ5bsj6CvcJpuC394/b30ba11f8fc7460b9b3fafd196db6f9f/instagram-clone-ionic-interface-img2.png)\n\nThis means that Ionic generates the sample tabs when creating the starter application. Modify your `tabs.html` and `tabs.ts` to look as follows: \n\n```typescript\n    \u003c!-- src/pages/tabs/tabs.html --\u003e\n    \n    \u003cion-tabs\u003e\n      \u003cion-tab [root]=\"tab1Root\" tabTitle=\"Home\" tabIcon=\"home\"\u003e\u003c/ion-tab\u003e\n    \u003c/ion-tabs\u003e\n\n\n\n    // src/pages/tabs/tab.ts\n    \n    import { Component } from '@angular/core';\n    import { HomePage } from '../home/home';\n    @Component({\n      templateUrl: 'tabs.html'\n    })\n    export class TabsPage {\n      tab1Root = HomePage;\n      constructor() {\n      }\n    }\n```\n\nThis makes sure there is only one tab in our application which is the homepage and that will be the first page.\n\n\n\u003e We will look at how to create the homepage later on in this tutorial\n\n\n## Splitting the application into pages\n\nWith Ionic, your application is split into pages. You can create as many pages as you like and these are the views your user interacts with. You can display different pages to users when they interact with your application.\n\nFor this demo, we will have the following pages:\n\n- Home page - displays recent posts for the user to view.\n- Profile page - displays more details about a particular user.\n- Comment page - displays comments made by different users on a particular page.\n\nTo create a new page in Ionic, you run the command:\n\n\n    ionic generate page \u003cname-of-page\u003e\n\n### Home page\nThe homepage will be responsible for displaying users posts when the application launches. Ionic automatically creates a home page by default so you can skip this command:\n\n```\n    ionic generate page Home\n```\n\nThis command stores the new page in the `src/pages` directory. Ideally, after you create a page, you declare the page and add it as an entry component in the `app.module.ts`. Since the homepage is created by default by Ionic, you don’t need to do it for the homepage.\n\n```typescript\n    // src/app/app.module.ts\n    // other imports\n    import { HomePage } from '../pages/home/home';\n    @NgModule({\n      declarations: [\n        MyApp,\n        HomePage,\n        TabsPage,\n      ],\n      imports: [...],\n      bootstrap: [IonicApp],\n      entryComponents: [\n        MyApp,\n        HomePage,\n        TabsPage,\n      ],\n      providers: [\n        ...  \n      ]\n    })\n    export class AppModule {}\n```\n\n\u003e You will realize that the `HomePage` has already been added because Ionic created the page by default when generating the starter application.\n\nNow, we want the homepage to display posts. Ionic comes built in with some wonderful UI components with some preset styling and to display posts, let’s use `Ionic Cards`. Update your `home.html` to look like this:\n\n```html\n    \u003c!-- src/pages/home.html --\u003e\n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003eInstagram Clone\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \u003cion-content\u003e\n      \u003c!-- this is where the posts will be --\u003e\n      \u003cion-card class=\"single-post-home\"\u003e\n        \u003cion-item\u003e\n          \u003cion-avatar item-start\u003e\n            \u003cimg src=\"https://res.cloudinary.com/og-tech/image/upload/s--Ivs1sp-J--/c_scale,w_100/v1529311900/og_icon.jpg\"\u003e\n          \u003c/ion-avatar\u003e\n          \u003ch2\u003ecapt.og\u003c/h2\u003e\n        \u003c/ion-item\u003e\n        \u003cimg src=\"https://res.cloudinary.com/og-tech/image/upload/q_40/v1506850322/blog_g3mexb.jpg\"\u003e\n        \u003cion-card-content\u003e\n          \u003cp\u003eZoned Out 💥\u003c/p\u003e\n        \u003c/ion-card-content\u003e\n        \u003cion-row\u003e\n          \u003cion-col\u003e\n            \u003cbutton ion-button icon-start clear small\u003e\n              \u003cion-icon name=\"heart\"\u003e\u003c/ion-icon\u003e\n              \u003cdiv\u003e12 Likes\u003c/div\u003e\n            \u003c/button\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col\u003e\n            \u003cbutton ion-button icon-start clear small\u003e\n              \u003cion-icon name=\"text\"\u003e\u003c/ion-icon\u003e\n              \u003cdiv\u003e4 Comments\u003c/div\u003e\n            \u003c/button\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n      \u003c/ion-card\u003e\n      \n      \u003cion-fab bottom right\u003e\n        \u003cbutton ion-fab mini\u003e\u003cion-icon name=\"add\"\u003e\u003c/ion-icon\u003e\u003c/button\u003e\n      \u003c/ion-fab\u003e\n    \u003c/ion-content\u003e\n```\n\nThe page also has the following styling:\n\n```css\n    # src/pages/home.scss\n    \n    .single-post-home{\n        margin-left: 0px;\n        margin-right: 0px;\n        margin-bottom: 10px;\n        padding-top: 10px;\n        width:100%;\n        box-shadow: 1px 1px rgba(160, 160, 160, 0.453);\n    }\n```\n\nNow, when you test your application, using `ionic serve`, you have the following:\n\n\n\u003e Right now, none of the action buttons in the application are functional, but as we go through the series, we will see how to bring it all together.\n\n![instagram-clone-ionic-interface-img3](//images.ctfassets.net/1es3ne0caaid/3lUlr7hCnOYAUxTjQ0XBbB/71a5bf287839f39dba7c52caa6be7217/instagram-clone-ionic-interface-img3.png)\n\nIf this was a very bare bones demo application, this could pass for your complete application but, we need to add some extra pages to the demo before we call it a day. To do this, we will add the upcoming pages.\n\n### Profile page\n\n\n![instagram-clone-ionic-interface-img4](//images.ctfassets.net/1es3ne0caaid/6gnDKhOp1vD7ScFAKs4mVs/03828969352533b288193c278eed7382/instagram-clone-ionic-interface-img4.png)\n\nWhen interacting with the application and a user’s name or avatar is clicked, the application redirects to the profile page of the user. The profile page will show a short bio of the user, users follower count, and posts made by the user. To create the profile page, run the command:\n\n```\n    ionic generate page Profile\n```\n\n![instagram-clone-ionic-interface-img5](//images.ctfassets.net/1es3ne0caaid/6TSE7QZe9gNigPz8Z82iOh/7fa408015fcd5bb5c15a12f50939972d/instagram-clone-ionic-interface-img5.png)\n\nThen, register the profile page:\n\n```typescript\n    // src/app/app.module.ts\n    // other imports\n    import { ProfilePage } from '../pages/profile/profile';\n    @NgModule({\n      declarations: [\n        MyApp,\n        HomePage,\n        TabsPage,\n        ProfilePage\n      ],\n      imports: [...],\n      bootstrap: [IonicApp],\n      entryComponents: [\n        MyApp,\n        HomePage,\n        TabsPage,\n        ProfilePage\n      ],\n      providers: [\n        ...  \n      ]\n    })\n    export class AppModule {}\n```\n\nAfter this is done, update the HTML for the profile page to look like this:\n\n```html\n    \u003c!-- src/pages/profile/profile.html --\u003e\n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003ecapt.og\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \n    \u003cion-content\u003e\n      \u003cion-grid class=\"profile-intro\"\u003e\n        \u003cion-row\u003e\n          \u003cion-col col-4\u003e\n            \u003cimg class=\"profile-photo\" src=\"https://res.cloudinary.com/og-tech/image/upload/s--Ivs1sp-J--/c_scale,w_100/v1529311900/og_icon.jpg\"\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col col-8\u003e\n            \u003cdiv class=\"profile-info\"\u003e\n              \u003cdiv class=\"post-count info-square\"\u003e\n                \u003cp\u003e\n                  \u003cstrong\u003e1\u003c/strong\u003e\u003cbr\u003e\n                  \u003cem\u003epost\u003c/em\u003e\n                \u003c/p\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"follower-count info-square\"\u003e\n                \u003cp\u003e\n                  \u003cstrong\u003e1532\u003c/strong\u003e\u003cbr\u003e\n                  \u003cem\u003efollowers\u003c/em\u003e\n                \u003c/p\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"following-count info-square\"\u003e\n                \u003cp\u003e\n                  \u003cstrong\u003e200\u003c/strong\u003e\u003cbr\u003e\n                  \u003cem\u003efollowing\u003c/em\u003e\n                \u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv\u003e\n              \u003cbutton ion-button class=\"follow-button\"\u003eFollow\u003c/button\u003e\n            \u003c/div\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n      \u003c/ion-grid\u003e\n    \n      \u003cdiv class=\"more-details\"\u003e\n        \u003cp class=\"user-name\"\u003e\u003cstrong\u003eOreoluwa Ogundipe\u003c/strong\u003e\u003c/p\u003e\n        \u003cp class=\"user-bio\"\u003eSoftwèrè Engineer\u003c/p\u003e\n      \u003c/div\u003e\n    \n      \u003cion-segment color=\"primary\"\u003e\n        \u003cion-segment-button value=\"posts\" selected\u003e\n          \u003cion-icon name=\"grid\"\u003e\u003c/ion-icon\u003e    \n        \u003c/ion-segment-button\u003e\n        \u003cion-segment-button value=\"tagged\"\u003e\n            \u003cion-icon name=\"contacts\"\u003e\u003c/ion-icon\u003e\n          \u003c/ion-segment-button\u003e\n        \u003cion-segment-button value=\"bookmark\"\u003e\n          \u003cion-icon name=\"bookmark\"\u003e\u003c/ion-icon\u003e\n        \u003c/ion-segment-button\u003e\n      \u003c/ion-segment\u003e\n    \n      \u003cion-grid class=\"image-grid\"\u003e\n        \u003cion-row class=\"single-row\"\u003e\n          \u003cion-col col-4 class=\"single-image\"\u003e\n            \u003cimg height=\"100%\" width=\"100%\" src=\"https://res.cloudinary.com/og-tech/image/upload/q_40/v1506850322/blog_g3mexb.jpg\"\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n      \u003c/ion-grid\u003e\n    \u003c/ion-content\u003e\n```\n\nAlso edit the styling for the page as follows:\n\n```css\n    # src/pages/profile/profile.scss\n    .profile-photo{\n        border-radius:50%;\n        margin-top: 10px;\n        width: 8em !important;\n        height: 8em !important;\n    }\n    \n    .profile-info{\n        display: flex;\n        flex-direction: row;\n        justify-content: space-around;\n        align-items: center;\n        text-align: center;\n    }\n    \n    .info-square{\n        text-align: center;\n    }\n    \n    .follow-button{\n        width:90%;\n        margin: 0px 10px;\n        background-color: #3E99ED;\n    }\n    \n    .more-details{\n        padding-left: 10px;\n    }\n    \n    $segment-button-ios-border-radius: 0px;\n    $segment-button-ios-toolbar-icon-size: 3rem;\n    $segment-button-ios-toolbar-icon-width: 3rem;\n    \n    ion-segment{\n        height: 5rem;\n        border: 1px solid rgba(160, 160, 160, 0.453);\n    }\n    \n    ion-segment-button{\n        border: 0px !important;\n    }\n    \n    .image-grid{\n        padding: 0px;\n        margin: 0px;\n    }\n    \n    .single-row{\n        height: 18rem;\n    }\n    \n    .single-image{\n        padding:0px;\n    }\n```\n\nNow, you may be wondering “wait we haven’t implemented the logic to move from the home page to the profile page”. To do this, we need to trigger the navigation to the next page when the user’s name/avatar is clicked. To do this, update your `home.html` as follows:\n\n```html\n    \u003c!-- src/pages/home/home.html --\u003e\n    \n    \u003cion-content\u003e\n      \u003c!-- this is where the posts will be --\u003e\n      \u003cion-card class=\"single-post-home\"\u003e\n        \u003cion-item (click)=\"toProfilePage()\"\u003e\n          \u003cion-avatar item-start\u003e\n            \u003cimg src=\"https://res.cloudinary.com/og-tech/image/upload/s--Ivs1sp-J--/c_scale,w_100/v1529311900/og_icon.jpg\"\u003e\n          \u003c/ion-avatar\u003e\n          \u003ch2\u003ecapt.og\u003c/h2\u003e\n        \u003c/ion-item\u003e\n        \n        \u003c!-- other card information --\u003e\n      \u003c/ion-card\u003e\n      [...]\n    \u003c/ion-content\u003e\n```\n\nA new `toProfilePage()` function is set to execute when the item is clicked. Let’s take a look at the implementation of the function. Update your `home.ts` file to look like this:\n\n```typescript\n    # src/pages/home/home.ts\n    \n    import { Component } from '@angular/core';\n    import { NavController } from 'ionic-angular';\n    import { ProfilePage } from '../profile/profile';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html'\n    })\n    export class HomePage {\n      constructor(public navCtrl: NavController) {\n      }\n    \n      public toProfilePage(){\n        this.navCtrl.push(ProfilePage);\n      }  \n    }\n```\n\n### Comment page\n\n\n![instagram-clone-ionic-interface-img6](//images.ctfassets.net/1es3ne0caaid/7DLZkzVczkIjW6JjgaplML/7b82f5dafef5751f14b8f9c8e145fd54/instagram-clone-ionic-interface-img6.png)\n\nFinally, to allow for some interactivity among users within our application, let’s create a comment page to allow users to comment on existing posts when the comment button is clicked. To do this, create a new comment page using the command:\n\n```\n    ionic generate page Comment\n```\n\nAfter this is created, you’ll want to add the comment page as an entry module in your `app.module.ts` like this:\n\n```typescript\n    // src/app/app.module.ts\n    // other imports\n    import { CommentPage } from '../pages/comment/comment';\n    @NgModule({\n      declarations: [\n        MyApp,\n        HomePage,\n        TabsPage,\n        ProfilePage,\n        CommentPage,\n      ],\n      imports: [...],\n      bootstrap: [IonicApp],\n      entryComponents: [\n        MyApp,\n        HomePage,\n        TabsPage,\n        ProfilePage,\n        CommentPage\n      ],\n      providers: [\n        ...  \n      ]\n    })\n    export class AppModule {}\n```\n\nAfterwards, we update the HTML markup of the comment page as follows:\n\n```html\n    \u003c!-- src/pages/comment/comment.html --\u003e\n    \u003cion-header\u003e\n    \n      \u003cion-navbar\u003e\n        \u003cion-title\u003eComments\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \n    \u003c/ion-header\u003e\n    \n    \n    \u003cion-content\u003e\n      \u003cion-grid\u003e\n        \u003c!-- first comment grid --\u003e\n        \u003cion-row class=\"post-content\"\u003e\n          \u003cion-col col-2\u003e\n            \u003cion-avatar item-start\u003e\n              \u003cimg class=\"icon-photo\" src=\"https://res.cloudinary.com/og-tech/image/upload/s--Ivs1sp-J--/c_scale,w_100/v1529311900/og_icon.jpg\"\u003e\n            \u003c/ion-avatar\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col col-10\u003e\n            \u003cdiv\u003e\n              \u003c!-- this will contain the main post content --\u003e\n              \u003cp\u003e\u003cstrong\u003ecapt.og\u003c/strong\u003e Zoned Out 💥\u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n    \n        \u003c!-- this rows will represent sample comments --\u003e\n        \u003cion-row class=\"user-comments\"\u003e\n          \u003cion-col col-2\u003e\n            \u003cion-avatar item-start\u003e\n              \u003cimg class=\"icon-photo\" src=\"https://api.adorable.io/avatars/100/big_dawg@adorable.png\"\u003e\n            \u003c/ion-avatar\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col col-10\u003e\n            \u003cdiv\u003e\n              \u003c!-- this will contain the main post content --\u003e\n              \u003cp\u003e\u003cstrong\u003ebig_dawg\u003c/strong\u003e Haha! I feel you bruva! Stay grinding 💯\u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e \n    \n        \u003cion-row class=\"user-comments\"\u003e\n            \u003cion-col col-2\u003e\n              \u003cion-avatar item-start\u003e\n                \u003cimg class=\"icon-photo\" src=\"https://api.adorable.io/avatars/100/broda_shagi@adorable.png\"\u003e\n              \u003c/ion-avatar\u003e\n            \u003c/ion-col\u003e\n            \u003cion-col col-10\u003e\n              \u003cdiv\u003e\n                \u003c!-- this will contain the main post content --\u003e\n                \u003cp\u003e\u003cstrong\u003ebroda_shagi\u003c/strong\u003e Better make sure you write tests 😏\u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/ion-col\u003e\n        \u003c/ion-row\u003e \n      \u003c/ion-grid\u003e\n    \u003c/ion-content\u003e\n    \n    \u003cion-footer\u003e\n      \u003c!-- add the input field fixed to the bottom of the screen --\u003e\n      \u003cion-grid\u003e\n          \u003cion-row class=\"comment-area\"\u003e\n            \u003cion-col col-9\u003e\n              \u003cion-textarea placeholder=\"Enter your comment...\"\u003e\u003c/ion-textarea\u003e\n            \u003c/ion-col\u003e\n            \u003cion-col col-3 \u003e\n              \u003cbutton ion-button class=\"comment-button\"\u003e\n                \u003cion-icon name=\"paper-plane\"\u003e\u003c/ion-icon\u003e\n              \u003c/button\u003e\n            \u003c/ion-col\u003e\n          \u003c/ion-row\u003e\n        \u003c/ion-grid\u003e\n    \u003c/ion-footer\u003e\n```\n\nThe view also has the following styling:\n\n```css\n    # src/pages/commment/comment.scss\n    \n    .icon-photo{\n        border-radius:50% !important;\n        margin-top: 10px;\n        height: 3em !important;\n        width: 3em !important;\n    }\n    \n    .post-content{\n        border-bottom: 1px solid rgba(160, 160, 160, 0.453);\n        padding-bottom: 10px;\n    }\n    \n    .user-comments{\n        padding-bottom: 10px;\n    }\n    \n    .comment-area{\n        border: 1px solid  rgba(160, 160, 160, 0.453);\n        margin: 0px;\n        padding: 0px;\n        border-radius: 5px;\n        width: 100%;\n    }\n    \n    .comment-button{\n        width: 100%;\n        margin: 0px;\n        padding: 0px;\n        height:100%;\n    }\n```    \n\nAfter this, you will need to link the comment page from the home page and you can do this by updating the comment button on the home page like this:\n\n```html\n    \u003c!-- src/pages/home/home.html --\u003e\n    \n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003eInstagram Clone\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \n    \u003cion-content\u003e\n      \u003cion-card class=\"single-post-home\"\u003e\n        [...]\n    \n        \u003cion-row\u003e\n          \u003cion-col\u003e\n            \u003cbutton ion-button icon-start clear small \u003e\n              \u003cion-icon name=\"thumbs-up\"\u003e\u003c/ion-icon\u003e\n              \u003cdiv\u003e12 likes\u003c/div\u003e\n            \u003c/button\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col\u003e\n            \u003cbutton ion-button icon-start clear small (click)=\"toCommentSection()\"\u003e\n              \u003cion-icon name=\"text\"\u003e\u003c/ion-icon\u003e\n              \u003cdiv\u003e2 Comments\u003c/div\u003e\n            \u003c/button\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n    \n      \u003c/ion-card\u003e\n      \n      [...]\n    \u003c/ion-content\u003e\n```    \n\nThe `toCommentSection` function is called when the comment button is clicked. Update your `home.ts` file to look like this:\n\n```typescript\n    # src/pages/home/home.ts\n    \n    import { Component } from '@angular/core';\n    import { NavController } from 'ionic-angular';\n    import { ProfilePage } from '../profile/profile';\n    import { CommentPage } from '../comment/comment';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html'\n    })\n    export class HomePage {\n      post_num_likes = 12;\n      constructor(public navCtrl: NavController) {\n    \n      }\n    \n      public toProfilePage(){\n        this.navCtrl.push(ProfilePage);\n      }\n      \n      public toCommentSection(){\n        this.navCtrl.push(CommentPage);\n      }\n      \n    }\n```\n\n## Conclusion\n\nIn this first part of the series, we have created a simple interface for our Instagram clone which we will build upon in future parts of this series. When you run `ionic serve` and navigate to `localhost:8100` on your browser, you will have an application that looks like this:\n\n\n![Application Interface](https://d2mxuefqeaa7sj.cloudfront.net/s_0B96B0BF1E8CEFF17338A5BE72D0028B64EF4B219F273FA1CA9A3758167F1818_1533069377573_ezgif.com-video-to-gif.gif)\n![instagram-clone-ionic-interface-img1](//images.ctfassets.net/1es3ne0caaid/NIHeHMU0iDf0MlKkzh7GN/44c86d0544e7f169ca73a7e2a299676f/instagram-clone-ionic-interface-img1.gif)\n\nNotice that all the data rendered in this chapter was hard-coded into the application. In the next part, we will take a look at how to serve dynamic content by connecting our application to GraphQL servers using Apollo, and Prisma. Here’s a link to the full [GitHub](https://github.com/oreHGA/ionic-insta-clone) repository.","metaTitle":"Build an Instagram clone with Ionic - Part 1","metaDescription":"This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functionalities. In part one, create a simple interface for your Instagram clone and a running demo with Ionic."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7Mf0Yf8VG2Rp2GrRrgrQok","type":"Entry","createdAt":"2019-05-01T18:13:43.138Z","updatedAt":"2019-05-01T18:13:43.138Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live analytics dashboard using Go and MongoDB","url":"live-analytics-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Khmrnzj5moO4S6WOYOGAo","type":"Entry","createdAt":"2018-11-14T14:35:55.702Z","updatedAt":"2019-03-03T15:15:59.601Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lanre Adelowo","url":"lanre-adelowo","email":"adelowomailbox@gmail.com","twitter":"https://twitter.com/alanreadelowo","github":"https://github.com/adelowo","guestWriter":true}}],"projectRepo":"https://github.com/adelowo/pusher-realtime-analytics-dashboard","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}}],"reviewDate":"2019-05-01","description":"Use Go, MongoDB and Pusher Channels to monitor user interactions with your app. Build a simple demo app page and a monitoring dashboard. The dashboard updates in realtime as users interact with the app.","prerequisite":"You will need Go 1.7+ and MongoDB 3+ installed on your machine.","content":"One of the most important step to take while taking a website or app into production is analytics and usage statistics. This is important as it allows you to see how users are actually using your app, improve usability and inform future development decisions. \n\nIn this tutorial, I will describe how to monitor all requests an application is going to receive, we will use the data gotten from monitoring to track a few metrics such as:\n\n- Most visited links\n- Response time for each link\n- Total number of requests\n- Average response time\n\n![go-app-monitoring-demo](//images.ctfassets.net/1es3ne0caaid/3bGgZOLvnaGTWBhY3e68lL/4248aba65a28dd9aef46b4379b4afec7/go-app-monitoring-demo.gif)\n\n## Prerequisites\n\n- Golang \u003e=1.7. You can install the Golang toolchain [by following this guide](https://golang.org/dl/).\n- MongoDB \u003e=3. You can install this by [following this guide](https://docs.mongodb.com/manual/installation/).\n- A [Pusher account](http://pusher.com/signup).\n\n\n## Starting out\n\nWe will start out by setting up our project directory. You will need to create a directory called `analytics-dashboard`. The location of this directory will depend on the version of the Go toolchain you have:\n\n- If you are running `\u003c=1.11`, you should create the directory in `$GOPATH/src/github.com/pusher-tutorials/analytics-dashboard`\n- If you are running `1.12` or greater, you can create the directory anywhere.\n\nIn the newly created directory, create a `.env` in the root directory with the following command:\n\n\n```    \n    $ touch .env\n```    \n\nIn the `.env` file, you will need to add your credentials. Copy and paste the following contents into the file:\n\n```\n    // analytics-dashboard/.env\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_APP_KEY=PUSHER_APP_KEY\n    PUSHER_APP_SECRET=PUSHER_APP_SECRET\n    PUSHER_APP_CLUSTER=PUSHER_APP_CLUSTER\n    PUSHER_APP_SECURE=\"1\"\n```    \n\n\n\u003e Please make sure to replace the placeholders with your own credentials.\n\n\n\n## MongoDB\n\nMongoDB is going to be used as a persistent datastore and we are going to make use of it’s calculation abilities to build out the functionality I described above.\n\nSince we are building the application in Golang, we will need to fetch a client library that will assist us in connecting and querying the MongoDB database. To that, you should run the following command:\n\n\n```   \n    $ go get -u -v gopkg.in/mgo.v2/...\n```    \n\nOnce the above command succeeds, you will need to create a new file called `analytics.go`. In this file, paste the following code:\n\n```go\n    // analytics-dashboard/analytics.go\n    \n    package main\n    \n    import (\n            \"gopkg.in/mgo.v2\"\n            \"gopkg.in/mgo.v2/bson\"\n    )\n    \n    const (\n            collectionName = \"request_analytics\"\n    )\n    \n    type requestAnalytics struct {\n            URL         string `json:\"url\"`\n            Method      string `json:\"method\"`\n            RequestTime int64  `json:\"request_time\"`\n            Day         string `json:\"day\"`\n            Hour        int    `json:\"hour\"`\n    }\n    \n    type mongo struct {\n            sess *mgo.Session\n    }\n    \n    func (m mongo) Close() error {\n            m.sess.Close()\n            return nil\n    }\n    \n    func (m mongo) Write(r requestAnalytics) error {\n            return m.sess.DB(\"pusher_tutorial\").C(collectionName).Insert(r)\n    }\n    \n    func (m mongo) Count() (int, error) {\n            return m.sess.DB(\"pusher_tutorial\").C(collectionName).Count()\n    }\n    \n    type statsPerRoute struct {\n            ID struct {\n                    Method string `bson:\"method\" json:\"method\"`\n                    URL    string `bson:\"url\" json:\"url\"`\n            } `bson:\"_id\" json:\"id\"`\n            NumberOfRequests int `bson:\"numberOfRequests\" json:\"number_of_requests\"`\n    }\n    \n    func (m mongo) AverageResponseTime() (float64, error) {\n    \n            type res struct {\n                    AverageResponseTime float64 `bson:\"averageResponseTime\" json:\"average_response_time\"`\n            }\n    \n            var ret = []res{}\n    \n            var baseMatch = bson.M{\n                    \"$group\": bson.M{\n                            \"_id\":                 nil,\n                            \"averageResponseTime\": bson.M{\"$avg\": \"$requesttime\"},\n                    },\n            }\n    \n            err := m.sess.DB(\"pusher_tutorial\").C(collectionName).\n                    Pipe([]bson.M{baseMatch}).All(\u0026ret)\n    \n            if len(ret) \u003e 0 {\n                    return ret[0].AverageResponseTime, err\n            }\n    \n            return 0, nil\n    }\n    \n    func (m mongo) StatsPerRoute() ([]statsPerRoute, error) {\n    \n            var ret []statsPerRoute\n    \n            var baseMatch = bson.M{\n                    \"$group\": bson.M{\n                            \"_id\":              bson.M{\"url\": \"$url\", \"method\": \"$method\"},\n                            \"responseTime\":     bson.M{\"$avg\": \"$requesttime\"},\n                            \"numberOfRequests\": bson.M{\"$sum\": 1},\n                    },\n            }\n    \n            err := m.sess.DB(\"pusher_tutorial\").C(collectionName).\n                    Pipe([]bson.M{baseMatch}).All(\u0026ret)\n            return ret, err\n    }\n    \n    type requestsPerDay struct {\n            ID               string `bson:\"_id\" json:\"id\"`\n            NumberOfRequests int    `bson:\"numberOfRequests\" json:\"number_of_requests\"`\n    }\n    \n    func (m mongo) RequestsPerHour() ([]requestsPerDay, error) {\n    \n            var ret []requestsPerDay\n    \n            var baseMatch = bson.M{\n                    \"$group\": bson.M{\n                            \"_id\":              \"$hour\",\n                            \"numberOfRequests\": bson.M{\"$sum\": 1},\n                    },\n            }\n    \n            var sort = bson.M{\n                    \"$sort\": bson.M{\n                            \"numberOfRequests\": 1,\n                    },\n            }\n    \n            err := m.sess.DB(\"pusher_tutorial\").C(collectionName).\n                    Pipe([]bson.M{baseMatch, sort}).All(\u0026ret)\n            return ret, err\n    }\n    \n    func (m mongo) RequestsPerDay() ([]requestsPerDay, error) {\n    \n            var ret []requestsPerDay\n    \n            var baseMatch = bson.M{\n                    \"$group\": bson.M{\n                            \"_id\":              \"$day\",\n                            \"numberOfRequests\": bson.M{\"$sum\": 1},\n                    },\n            }\n    \n            var sort = bson.M{\n                    \"$sort\": bson.M{\n                            \"numberOfRequests\": 1,\n                    },\n            }\n    \n            err := m.sess.DB(\"pusher_tutorial\").C(collectionName).\n                    Pipe([]bson.M{baseMatch, sort}).All(\u0026ret)\n            return ret, err\n    }\n    \n    func newMongo(addr string) (mongo, error) {\n            sess, err := mgo.Dial(addr)\n            if err != nil {\n                    return mongo{}, err\n            }\n    \n            return mongo{\n                    sess: sess,\n            }, nil\n    }\n    \n    type Data struct {\n            AverageResponseTime float64          `json:\"average_response_time\"`\n            StatsPerRoute       []statsPerRoute  `json:\"stats_per_route\"`\n            RequestsPerDay      []requestsPerDay `json:\"requests_per_day\"`\n            RequestsPerHour     []requestsPerDay `json:\"requests_per_hour\"`\n            TotalRequests       int              `json:\"total_requests\"`\n    }\n    \n    func (m mongo) getAggregatedAnalytics() (Data, error) {\n    \n            var data Data\n    \n            totalRequests, err := m.Count()\n            if err != nil {\n                    return data, err\n            }\n    \n            stats, err := m.StatsPerRoute()\n            if err != nil {\n                    return data, err\n            }\n    \n            reqsPerDay, err := m.RequestsPerDay()\n            if err != nil {\n                    return data, err\n            }\n    \n            reqsPerHour, err := m.RequestsPerHour()\n            if err != nil {\n                    return data, err\n            }\n    \n            avgResponseTime, err := m.AverageResponseTime()\n            if err != nil {\n                    return data, err\n            }\n    \n            return Data{\n                    AverageResponseTime: avgResponseTime,\n                    StatsPerRoute:       stats,\n                    RequestsPerDay:      reqsPerDay,\n                    RequestsPerHour:     reqsPerHour,\n                    TotalRequests:       totalRequests,\n            }, nil\n    }\n```   \n\nIn the above, we have implemented a few queries on the MongoDB database:\n\n\n- `StatsPerRoute`: Analytics for each route visited\n- `RequestsPerDay`: Analytics per day\n- `RequestsPerHour`: Analytics per hour\n\nThe next step is to add some HTTP endpoints a user can visit. Without those, the code above for querying MongoDB for analytics is redundant. You will also need to create a logging middleware that writes analytics to MongoDB. And to make it realtime, Pusher Channels will also be used.\n\nTo get started with that, you will need to create a file named `main.go`. You can do that via the command below:\n\n\n```    \n    $ touch main.go\n```   \n\nYou will also need to fetch some libraries that will be used while building. You will need to run the command below to fetch them:\n\n\n```    \n    $ go get github.com/go-chi/chi\n    $ go get github.com/joho/godotenv\n    $ go get github.com/pusher/pusher-http-go\n```   \n\nIn the newly created `main.go` file, paste the following code:\n\n```go\n    // analytics-dashboard/main.go\n    \n    package main\n    \n    import (\n            \"encoding/json\"\n            \"flag\"\n            \"fmt\"\n            \"html/template\"\n            \"log\"\n            \"net/http\"\n            \"os\"\n            \"path/filepath\"\n            \"strconv\"\n            \"strings\"\n            \"sync\"\n            \"time\"\n    \n            \"github.com/go-chi/chi\"\n            \"github.com/joho/godotenv\"\n            \"github.com/pusher/pusher-http-go\"\n    )\n    \n    const defaultSleepTime = time.Second * 2\n    \n    func main() {\n            httpPort := flag.Int(\"http.port\", 4000, \"HTTP Port to run server on\")\n            mongoDSN := flag.String(\"mongo.dsn\", \"localhost:27017\", \"DSN for mongoDB server\")\n    \n            flag.Parse()\n    \n            if err := godotenv.Load(); err != nil {\n                    log.Fatal(\"Error loading .env file\")\n            }\n    \n            appID := os.Getenv(\"PUSHER_APP_ID\")\n            appKey := os.Getenv(\"PUSHER_APP_KEY\")\n            appSecret := os.Getenv(\"PUSHER_APP_SECRET\")\n            appCluster := os.Getenv(\"PUSHER_APP_CLUSTER\")\n            appIsSecure := os.Getenv(\"PUSHER_APP_SECURE\")\n    \n            var isSecure bool\n            if appIsSecure == \"1\" {\n                    isSecure = true\n            }\n    \n            client := \u0026pusher.Client{\n                    AppId:   appID,\n                    Key:     appKey,\n                    Secret:  appSecret,\n                    Cluster: appCluster,\n                    Secure:  isSecure,\n                    HttpClient: \u0026http.Client{\n                            Timeout: time.Second * 10,\n                    },\n            }\n    \n            mux := chi.NewRouter()\n    \n            log.Println(\"Connecting to MongoDB\")\n            m, err := newMongo(*mongoDSN)\n            if err != nil {\n                    log.Fatal(err)\n            }\n    \n            log.Println(\"Successfully connected to MongoDB\")\n    \n            mux.Use(analyticsMiddleware(m, client))\n    \n            var once sync.Once\n            var t *template.Template\n    \n            workDir, _ := os.Getwd()\n            filesDir := filepath.Join(workDir, \"static\")\n            fileServer(mux, \"/static\", http.Dir(filesDir))\n    \n            mux.Get(\"/\", func(w http.ResponseWriter, r *http.Request) {\n    \n                    once.Do(func() {\n                            tem, err := template.ParseFiles(\"static/index.html\")\n                            if err != nil {\n                                    log.Fatal(err)\n                            }\n    \n                            t = tem.Lookup(\"index.html\")\n                    })\n    \n                    t.Execute(w, nil)\n            })\n    \n            mux.Get(\"/api/analytics\", analyticsAPI(m))\n            mux.Get(\"/wait/{seconds}\", waitHandler)\n    \n            log.Fatal(http.ListenAndServe(fmt.Sprintf(\":%d\", *httpPort), mux))\n    }\n    \n    func fileServer(r chi.Router, path string, root http.FileSystem) {\n            if strings.ContainsAny(path, \"{}*\") {\n                    panic(\"FileServer does not permit URL parameters.\")\n            }\n    \n            fs := http.StripPrefix(path, http.FileServer(root))\n    \n            if path != \"/\" \u0026\u0026 path[len(path)-1] != '/' {\n                    r.Get(path, http.RedirectHandler(path+\"/\", 301).ServeHTTP)\n                    path += \"/\"\n            }\n    \n            path += \"*\"\n    \n            r.Get(path, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n                    fs.ServeHTTP(w, r)\n            }))\n    }\n    \n    func analyticsAPI(m mongo) http.HandlerFunc {\n            return func(w http.ResponseWriter, r *http.Request) {\n    \n                    data, err := m.getAggregatedAnalytics()\n                    if err != nil {\n                            log.Println(err)\n    \n                            json.NewEncoder(w).Encode(\u0026struct {\n                                    Message   string `json:\"message\"`\n                                    TimeStamp int64  `json:\"timestamp\"`\n                            }{\n                                    Message:   \"An error occurred while fetching analytics data\",\n                                    TimeStamp: time.Now().Unix(),\n                            })\n    \n                            return\n                    }\n    \n                    w.Header().Set(\"Content-Type\", \"application/json\")\n                    json.NewEncoder(w).Encode(data)\n            }\n    }\n    \n    func analyticsMiddleware(m mongo, client *pusher.Client) func(next http.Handler) http.Handler {\n            return func(next http.Handler) http.Handler {\n                    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    \n                            startTime := time.Now()\n    \n                            defer func() {\n    \n                                    if strings.HasPrefix(r.URL.String(), \"/wait\") {\n    \n                                            data := requestAnalytics{\n                                                    URL:         r.URL.String(),\n                                                    Method:      r.Method,\n                                                    RequestTime: time.Now().Unix() - startTime.Unix(),\n                                                    Day:         startTime.Weekday().String(),\n                                                    Hour:        startTime.Hour(),\n                                            }\n    \n                                            if err := m.Write(data); err != nil {\n                                                    log.Println(err)\n                                            }\n    \n                                            aggregatedData, err := m.getAggregatedAnalytics()\n                                            if err == nil {\n                                                    client.Trigger(\"analytics-dashboard\", \"data\", aggregatedData)\n                                            }\n                                    }\n                            }()\n    \n                            next.ServeHTTP(w, r)\n                    })\n            }\n    }\n    \n    func waitHandler(w http.ResponseWriter, r *http.Request) {\n            var sleepTime = defaultSleepTime\n    \n            secondsToSleep := chi.URLParam(r, \"seconds\")\n            n, err := strconv.Atoi(secondsToSleep)\n            if err == nil \u0026\u0026 n \u003e= 2 {\n                    sleepTime = time.Duration(n) * time.Second\n            } else {\n                    n = 2\n            }\n    \n            log.Printf(\"Sleeping for %d seconds\", n)\n            time.Sleep(sleepTime)\n            w.Write([]byte(`Done`))\n    }\n```    \n\nWhile the above might seem like a lot, basically what has been done is:\n\n\n- Line 31 - 33: Parse environment variables from the `.env` created earlier.\n\u003e Another reminder to update the `.env` file to contain your actual credentials\n- Line 36 - 56: A server side connection to Pusher Channels is established\n- Line 68 - 95: Build an HTTP server. \n- Line 139 - 171: A lot is happening here. `analyticsMiddleware` is used to capture all requests, and for requests that have the path `wait/{seconds}` , a log is written to MongoDB. It is also sent to Pusher Channels.\n\nBefore running the server, you need a frontend to visualize the analytics. The frontend is going to be as simple and usable as can be. You will need to create a new directory called `static` in your root directory - `analytics-dashboard` . That can be done with the following command:\n\n\n```    \n    $ mkdir analytics-dashboard/static\n```   \n\nIn the `static` directory, create two files - `index.html` and `app.js`. You can run the command below to do just that:\n\n\n```    \n    $ touch static/{index.html,app.js}\n```    \n\nOpen the `index.html` file and paste the following code:\n\n```html\n    // analytics-dashboard/static/index.html\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003ctitle\u003eRealtime analytics dashboard\u003c/title\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\n              integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \u003cdiv class=\"container\" id=\"app\"\u003e\u003c/div\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.1.2/handlebars.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://js.pusher.com/4.3/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"/static/app.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```    \n\nWhile that is an empty page, you will make use of JavaScript to fill it up with useful data. So you will also need to open up the `app.js` file. In the `app.js` file, paste the following code:\n\n```js\n    // analytics-dashboard/static/app.js\n    \n    const appDiv = document.getElementById('app');\n    \n    const tmpl = `\n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-5\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003eTotal requests\u003c/h5\u003e\n                    \u003cdiv class=\"card-text\"\u003e\n                        \u003ch3\u003e\\{{total_requests}}\u003c/h3\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"col-md-5\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003eAverage response time\u003c/h5\u003e\n                    \u003cdiv class=\"card-text\"\u003e\n                        \u003ch3\u003e\\{{ average_response_time }} seconds\u003c/h3\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-5\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003eBusiest days of the week\u003c/h5\u003e\n                    \u003cdiv class=\"card-text\" style=\"width: 18rem\"\u003e\n                        \u003cul class=\"list-group list-group-flush\"\u003e\n                            {{#each requests_per_day}}\n                            \u003cli class=\"list-group-item\"\u003e\n                                \\{{ this.id }} (\\{{ this.number_of_requests }} requests)\n                            \u003c/li\u003e\n                            {{/each }}\n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"col-md-5\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003eBusiest hours of day\u003c/h5\u003e\n                    \u003cdiv class=\"card-text\" style=\"width: 18rem;\"\u003e\n                        \u003cul class=\"list-group list-group-flush\"\u003e\n                            {{#each requests_per_hour}}\n                            \u003cli class=\"list-group-item\"\u003e\n                                \\{{ this.id }} (\\{{ this.number_of_requests }} requests)\n                            \u003c/li\u003e\n                            {{/each}}\n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-5\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003eMost visited routes\u003c/h5\u003e\n                    \u003cdiv class=\"card-text\" style=\"width: 18rem;\"\u003e\n                        \u003cul class=\"list-group list-group-flush\"\u003e\n                            {{#each stats_per_route}}\n                            \u003cli class=\"list-group-item\"\u003e\n                                \\{{ this.id.method }} \\{{ this.id.url }} (\\{{ this.number_of_requests }} requests)\n                            \u003c/li\u003e\n                            {{/each}}\n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    `;\n    \n    const template = Handlebars.compile(tmpl);\n    \n    writeData = data =\u003e {\n      appDiv.innerHTML = template(data);\n    };\n    \n    axios\n      .get('http://localhost:4000/api/analytics', {})\n      .then(res =\u003e {\n        console.log(res.data);\n        writeData(res.data);\n      })\n      .catch(err =\u003e {\n        console.error(err);\n      });\n    \n    const APP_KEY = 'PUSHER_APP_KEY';\n    const APP_CLUSTER = 'PUSHER_CLUSTER';\n    \n    const pusher = new Pusher(APP_KEY, {\n      cluster: APP_CLUSTER,\n    });\n    \n    const channel = pusher.subscribe('analytics-dashboard');\n    \n    channel.bind('data', data =\u003e {\n      writeData(data);\n    });\n```   \n\n\n\u003e Please replace `PUSHER_APP_KEY` and `PUSHER_CLUSTER` with your own credentials.\n\nIn the above code, we defined a constant called `tmpl`, it holds an HTML template which we will run through the [Handlebars](http://handlebarsjs.com/) template engine to fill it up with actual data.\n\nWith this done, you can go ahead to run the Golang server one. You will need to go to the root directory - `analytics-dashboard` and run the following command:\n\n\n```    \n    $ go build\n    $ ./analytics-dashboard\n```    \n\n\n\u003e Make sure you have a MongoDB instance running. If your MongoDB is running on a port other than the default 27017, make sure to add  `-mongo.dsn \"YOUR_DSN\"` to the above command\n\n\n\u003e Also make sure your credentials are in `.env` \n\nAt this stage, you will need to open two browser tabs. Visit `http://localhost:4000` in one and `http://localhost:4000/wait/2` in the other. Refresh the tab where you have `http://localhost:4000/wait/2` and go back to the other tab to see a breakdown of usage activity.\n\n\n\u003e Note you can change the value of 2 in the url to any other digit. \n\n\n## Conclusion\n\nIn this tutorial, we’ve built a middleware that tracks every request, and a Golang application that calculates analytics of the tracked requests. We also built a dashboard that displays the relevant data. With Pusher Channels, we’ve been able to update the dashboard in realtime. The full source code can be found [on GitHub](https://github.com/adelowo/pusher-realtime-analytics-dashboard).","metaTitle":"Build a live analytics dashboard using Go and MongoDB","metaDescription":"Use Go, MongoDB and Pusher Channels to monitor user interactions with your app. Build a simple demo app page and a monitoring dashboard. The dashboard updates in realtime as users interact with the app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4s4CNV6nLa8kEgygGos2ga","type":"Entry","createdAt":"2019-01-31T18:12:48.312Z","updatedAt":"2019-01-31T18:12:48.312Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live score feed Chrome extension","url":"score-feed-chrome-extension","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-nfl-scores","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2019-01-31","description":"This brief tutorial guides you through creating a simple Chrome extension. It hooks into a Node backend to provide a live score feed with browser notifications.","prerequisite":"You will need Node installed on your machine.","content":"## Introduction\n\nIn this tutorial, we will look into how to build a Chrome extensionand also integrate realtime updates using the Pusher Channels API.\n\nSometimes, a traditional website isn’t the optimal channel for conveying realtime updates, because the updated event needs to be utilized instantaneously. The process of loading up a new webpage and waiting for it to update with data can be quite inconvenient to the consumer who doesn’t want to have to leave the current tab to retrieve data.\n\nChrome extensions are basically little websites that add extra functionality to Chrome and can be accessed from all open tabs on the Chrome browser. Under the hood, a Chrome extension is some HTML, CSS, and JavaScript that has access to the JavaScript APIs that Chrome exposes.\n\n## What we will build\n\nWe will build a simple Chrome extension that displays score updates on an NFL game. We will not key into an API but simulate the scores and cause them to progress randomly. For the sake of this tutorial, we will assume that the game being played is [Indianapolis Colts](https://www.colts.com/) vs [Tennessee Titans](https://www.titansonline.com/) and the extension will display updates in realtime once it is started.\n\nBy the end of this article, we will have built this Chrome extension that triggers Chrome notifications whenever there is an update on the game:\n\n![chrome-extension-demo](//images.ctfassets.net/1es3ne0caaid/1lEUGxbbJq6UUg6SgiyiOw/ec9b35c4ba28d754201687bcae81787c/chrome-extension-demo.gif)\n\nThe source code to this tutorial is available [here](https://github.com/neoighodaro/realtime-nfl-scores) on GitHub.\n\n\n## Prerequisites\n\nTo follow along with this tutorial, you will need to have the following:\n\n\n- An IDE of your choice like [Visual Studio Code](https://code.visualstudio.com/)\n- Node.js and NPM installed on your computer. [Installation instructions](https://nodejs.org/en/download/).\n- Basic knowledge of Node.js and vanilla JS.\n  \n\nIf you have all of the above requirements, we can proceed.\n\n\n\u003e Skip the next section if you already signed up with [Pusher](https://pusher.com) and created an application.\n\n\n## Setting up a Pusher account\n\nWe will need Pusher to power the realtime updates on the extension so you need to create an account [here](https://dashboard.pusher.com/accounts/sign_up) if you don’t already have one. After signing up, create a new Pusher channels application.\n\nWhile creating the application, fill in some information about the project. Select **Vanilla JS** for the frontend tech stack and **Node.js** for the backend tech. When the application is created, note the application’s credentials; we will need them to integrate Pusher into the extension.\n\n\n## Setting up the Node.js backend\n\nThe first thing we want to do here is to create a new folder to house the entire project. Create a new directory called `realtime-nfl-scores`.\n\nNext, launch your terminal and `cd` into the directory you just created. In there, create an `index.js` file. This will be the file that will contain the Node.js code.\n\nNext, Let’s initialize the directory for npm:\n\n```\n    $ npm init -y\n```\n\nThe command above will generate a `package.json` file in the root of the project. Next, lets install some dependencies for the application. These dependencies are:\n\n\n- [Express](https://expressjs.com/) - A minimalist web framework for Node.js.\n- [Dotenv](https://medium.com/@thejasonfile/using-dotenv-package-to-create-environment-variables-33da4ac4ea8f) - A package to load environment variables from a `.env` file into [process.env](https://nodejs.org/docs/latest/api/process.html#process_process_env).\n\nTo install them, run the following command in your terminal:\n\n```\n    $ npm install express --save\n    $ npm install dotenv --save\n    $ npm install pusher --save\n```\n\nBecause we have `Dotenv` installed, we can create a `.env` file in the root directory of the project and use the environment variables in our code. We will access the variables using [process.env](https://nodejs.org/docs/latest/api/process.html#process_process_env). Create a `.env` file in the root of the project and paste the following contents into the file:\n\n```\n    // File: ./.env\n    NODE_ENV=development\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_APP_KEY\n    PUSHER_SECRET=PUSHER_APP_SECRET\n    PUSHER_CLUSTER=PUSHER_APP_CLUSTER\n```\n\n\u003e ⚠️ Replace `PUSHER_*` keys with your app credentials.\n\nOpen the `index.js` file and update it with the code below:\n\n``` javascript\n    // File: ./index.js\n    const express = require(\"express\");\n    const app = express();\n    const Pusher = require(\"pusher\");\n    \n    require(\"dotenv\").config();\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.PUSHER_CLUSTER\n    });\n    \n    const simulate = () =\u003e {\n      let Colts = {\n        name: \"Colts\",\n        score: 0\n      };\n      \n      let Titan = {\n        name: \"Titan\",\n        score: 0\n      };\n      \n      const generateNumber = () =\u003e Math.floor(Math.random() * 2);\n      \n      setInterval(() =\u003e {\n        Colts.score = Colts.score + generateNumber();\n        Titan.score = Titan.score + generateNumber();\n        pusher.trigger(\"realtime-updates\", \"scores\", [Colts, Titan]);\n      }, 3500);\n    }\n    \n    app.get(\"/start\", simulate);\n    \n    app.listen(3000, () =\u003e console.log(\"Listening on port 3000\"));\n```\n\nIn the snippet above, we created a new Express application, configured DotEnv and initialized a new `Pusher` variable. Next, we registered a new instance of the `Pusher` variable using the variables that we previously stored in the `.env` file.\n\nWe defined a `simulate` function to generate a random number between 0 and 1 every 3.5 seconds, then trigger a new `scores` event (sending over the generated data) on the `realtime-updates` channel.\n\nWe defined a single `GET` endpoint called `start` and this is the endpoint that’s responsible for starting the generating of pseudo scores and triggering events. Finally, we specified that the server should listen for requests on port 3000.\n\nThis is all the code we need for the backend, let’s move on to building the frontend.\n\n\n## Building the frontend\n\nIn this section, we are going to start building the Chrome extension. The first thing we want to do is create a separate folder for the extension. Create a new folder called `frontend` and `cd` into it in your terminal.\n\nAll Chrome extensions require a manifest file. The manifest file tells Chrome everything it needs to know about the extension. Create a `manifest.json` file inside the extension project directory and paste the following into it:\n\n``` json\n    // File: ./manifest.json\n    {\n      \"manifest_version\": 2,\n      \"name\": \"Real-time NFL score\",\n      \"version\": \"1.0\",\n      \"description\": \"A simple Chrome extension to simulate the NFL scores in real-time\",\n      \"content_security_policy\": \"script-src 'self' https://js.pusher.com/4.2/pusher.min.js https://stats.pusher.com; object-src 'self'\",\n      \"browser_action\": {\n        \"default_icon\": \"./img/icon.png\",\n        \"default_popup\": \"popup.html\"\n      },\n      \"permissions\": [\"notifications\", \"activeTab\"]\n    }\n```\n\nMost of the keys in this JSON file are self-explanatory, let's go over the ones that are not:\n\n\n- `content_security_policy`: We register two remote origins that we want the extension to execute scripts from. To learn more about `content_security_policy` read [here](https://developer.chrome.com/apps/contentSecurityPolicy).\n- `browser_action`: We specify what the default icon of the extension is (we will create one shortly) and what HTML page should be displayed when the extension is opened.\n- `permissions`: We specify in this section that we need to access the activeTab and Notifications.\n  \n\n### Setting the default icon\n\nYou’ll notice that we specified a path to the default icon in the manifest file but didn’t create the folder or the file yet, so let’s do that now. Create a new folder and call it `img`. In the `img` directory, we will save an image (a png) file as `icon.png`.\n\n\n\u003e You can use any image of your choice! We just want something that looks nice for an extension’s default icon. We have an [icon](https://github.com/neoighodaro/realtime-nfl-scores/blob/master/frontend/img/icon.png) you can use in the repo but it should not be used without permission.\n  \n\n### Setting up the UI\n\nIn the manifest file, we indicated that an HTML file called `popup.html` should be displayed when the extension is opened. So, let’s create the file now in the root of the `frontend` directory and paste the following code into the file:\n\n``` html\n    \u003c!-- File: ./popup.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n        \u003clink\n          rel=\"stylesheet\"\n          href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\n        /\u003e\n        \u003cstyle\u003e\n          @import url(\"https://fonts.googleapis.com/css?family=Kosugi+Maru\");\n          body {\n            height: 130px;\n            width: 260px;\n            font-family: \"Kosugi Maru\", sans-serif;\n          }\n        \u003c/style\u003e\n        \u003ctitle\u003eNFL score\u003c/title\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cnav class=\"navbar navbar-dark bg-dark\"\u003e\n          \u003ca class=\"navbar-brand\" id=\"scores\" href=\"#\"\u003eReal-time NFL scores \u003c/a\u003e\n        \u003c/nav\u003e\n        \u003cdiv class=\"container text-center mt-2\"\u003e\n          \u003cdiv id=\"score_label\"\u003e\u003cp id=\"results\"\u003e----\u003c/p\u003e\u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"popup.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe code above is an HTML description to display a simple Bootstrap layout for the extension. In the bottom of the code, we linked to two scripts:\n\n\n1. `pusher.min.js` - This is the official Pusher JavaScript SDK.\n2. `popup.js` - This is a script we will create shortly to handle the extension’s events.\n\nWe need the `pusher.min.js` script to interact with the Pusher API on the client-side, in other words, bind to events and subscribe to channels.\n\n### Binding to events and triggering notifications\n\nLet’s create the `popup.js` file in the root of the frontend directory and paste the following code into the file:\n\n``` javascript\n    // File: ./popup.js\n    const pusher = new Pusher(\"PUSHER_APP_KEY\", {\n      cluster: \"PUSHER_APP_CLUSTER\",\n      encrypted: true\n    });\n    \n    document.getElementById(\"scores\").addEventListener(\"click\", () =\u003e {\n      fetch(\"http://localhost:3000/start\");\n    });\n    \n    const channel = pusher.subscribe(\"realtime-updates\");\n    \n    channel.bind(\"scores\", data =\u003e {\n      const [teamOne, teamTwo] = data\n      \n      document.getElementById(\"results\").innerHTML = `\n        \u003cspan\u003e${teamOne.name}\u003c/span\u003e - ${teamOne.score}\u003cbr/\u003e\n        \u003cspan\u003e${teamTwo.name}\u003c/span\u003e - ${teamTwo.score}\u003cbr /\u003e\n      `;\n      \n      notify(teamOne, teamTwo);\n    });\n    \n    const notify = (first_team, second_team) =\u003e {\n       \n      if (first_team.score !== 0 \u0026\u0026 second_team.score !== 0) {\n        const notificationId = \"notify\"\n      \n        const options = {\n          type:    'basic',\n          iconUrl: './img/icon.png',\n          title:   `${first_team.name} vs ${second_team.name}`,\n          message: `There's been a score update on the game between ${first_team.name} and ${second_team.name}.`\n        };\n        \n        chrome.notifications.create(notificationId, options);\n        chrome.notifications.clear(notificationId);\n      }\n    };\n```\n\n\u003e Replace the PUSHER_* keys with your credentials from the Pusher dashboard.\n\nIn the snippet above, we created a new instance of the `Pusher` object then we registered a `click` event listener on the link tag that says **Real-time NFL scores**.\n\nThe event listener further makes a request to http://localhost:3000/start on the Node.js backend server using the fetch API. We want this link tag to be the control for the simulation, so that a click on this link when the extension is open will start the simulation.\n\nNext, we subscribed to the `realtime-updates` channel and bound to the `scores` event. In the bind method, we registered a callback that updates the `innerHTML` of the extension with the scores received from Pusher and lastly, we made a call to the notify function.\n\nThe `notify` function receives two objects, the teams currently playing, and uses them in setting the `options` object, then it makes a call to Chrome’s Notification API.\n\n\n## Testing out the application\n\nWe can easily test the extension by opening the Chrome browser and visiting the address: chrome://extensions:\n\n![chrome-extension-browser](//images.ctfassets.net/1es3ne0caaid/3JMYpbKOKIOImIiYyguQeG/1eecbc25fc4900fbc664ec18135ac985/chrome-extension-browser.png)\n\nOnce the page opens, turn on the **Developer mode** option by clicking on the switch by the extreme right of the top of the screen:\n\n![chrome-extension-dev-mode](//images.ctfassets.net/1es3ne0caaid/6DN8bWcq2ckWCuImiaE6OW/1b9868821ec95f1f649d6fa3fc5ee98d/chrome-extension-dev-mode.png)\n\nTurning on the developer mode made three new options to appear at the top of the screen:\n\n1. **Load unpacked**\n2. **Pack extension**\n3. **Update**\n\nIf we click on the **Load unpacked** option, we will be asked to select the folder where the unpacked extension lives. So, select the `frontend` folder. \n\nAfter selecting the folder, we should be able to see our extension (at the extreme right) with its icon on the extensions tab of the browser:\n\n![chrome-extension-icon](//images.ctfassets.net/1es3ne0caaid/1Sw1RnYja4mgY24McaQiMA/68cfa42e2a34d187085751d50da91a3d/chrome-extension-icon.png)\n\nNow we can start the backend server to test the application. `cd` to the `realtime-nfl-scores` project directory and run this command:\n\n```\n    $ node index.js\n```\n\nOnce we have the backend server running, we can load up the extension on the Chrome browser, click on the **Real-time NFL scores** link and watch the realtime updates and notifications flood in:\n\n![chrome-extension-demo](//images.ctfassets.net/1es3ne0caaid/1lEUGxbbJq6UUg6SgiyiOw/ec9b35c4ba28d754201687bcae81787c/chrome-extension-demo.gif)\n\nThat’s all. The extension is up and running and we can now see the simulated updates on the game between [Indianapolis Colts](https://www.colts.com/) vs [Tennessee Titans](https://www.titansonline.com/).\n\n\n## Conclusion\n\nIn this tutorial, we learned how to use Vanilla JavaScript to build a Chrome extension and hit an endpoint on the Node.js web server using the fetch API.\n\nThe source code to the application is available on [GitHub](https://github.com/neoighodaro/realtime-nfl-scores).","metaTitle":"Build a live score feed Chrome extension","metaDescription":"This brief tutorial guides you through creating a simple Chrome extension. It hooks into a Node backend to provide a live score feed with browser notifications."}}],"defaultValue":"Channels \u0026 HTML","queryType":"tag","pages":2,"route":"/tutorials","query":{"product":"Channels","tag":"HTML","page":"1"}}},"page":"/tutorials","query":{"product":"Channels","tag":"HTML","page":"1"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=HTML&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:44:10 GMT -->
</html>