<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Node.js&page=9 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:45:30 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">169</span> tutorials for “<span class="css-npldjc ehwuahf2">Node.js</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialsd3fd.html?product=Beams&amp;tag=Node.js" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials.html" class="css-a3lpv2 e137azhw1"><svg fill="#C223CE" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#C223CE" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Node.js"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/authentication-vue-vuex.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Authentication in Vue using Vuex</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Learn how to implement authentication in a Vue app with Vuex and a Node backend. Create a simple demo with a login page ...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-progress-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live UX<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to build a live progress bar with React</h3><p class="css-k12xad e5jrto45">This brief tutorial will show you how to create a simple progress bar in React. It will receive updates from a Node.js b...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/workout-tracker-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1"> Create a live workout tracking app with React Native</h3><p class="css-k12xad e5jrto45">This tutorial takes you through building a workout tracking app in React Native, with a Node backend. Users will be able...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-leaderboard-preact.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live leaderboard with Preact</h3><p class="css-k12xad e5jrto45">Use Preact and Node to build a simple game with a live leaderboard. Users will be able to play a game of chance against ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-news-feed-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live news feed with React</h3><p class="css-k12xad e5jrto45">This brief tutorial will show you how to build a live news feed app using React and Node.js. You will integrate NewAPI t...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/stocks-push-notifications-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a stocks application for Android featuring push notifications</h3><p class="css-k12xad e5jrto45">Build an Android app featuring realtime stock price updates and push notifications. You will use Kotlin to build a nativ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/stocks-push-notifications-ios.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live stocks application with push notifications for iOS</h3><p class="css-k12xad e5jrto45">This tutorial will show you how to build an iOS app that tracks stock prices. It features realtime updates and push noti...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-feed-react-cloudinary.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live UX<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live photo feed using React and Cloudinary</h3><p class="css-k12xad e5jrto45">In this short tutorial, create a live photo feed using Node, React and Cloudinary. Upload and publish photos in realtime...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/emotion-recognition-tensorflow.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an emotion recognition application with Tensorflow.js</h3><p class="css-k12xad e5jrto45">Build a simple web app in Vue that takes input from a webcam and can learn to recognize emotions. Implement machine lear...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials9774.html?tag=Node.js&amp;page=8" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials43c6.html?tag=Node.js&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialsa354.html?tag=Node.js&amp;page=7" class="css-za1ua3 edg0byb1">7</a><a href="tutorials9774.html?tag=Node.js&amp;page=8" class="css-za1ua3 edg0byb1">8</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials3990.html?tag=Node.js&amp;page=9" class="css-2wakph edg0byb1">9</a><a href="tutorialsc68f.html?tag=Node.js&amp;page=10" class="css-za1ua3 edg0byb1">10</a><a href="tutorials81a4.html?tag=Node.js&amp;page=11" class="css-za1ua3 edg0byb1">11</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorialsb101.html?tag=Node.js&amp;page=19" class="css-5s6711 edg0byb1">19</a><a href="tutorialsc68f.html?tag=Node.js&amp;page=10" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":169,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6DSHNLXQCQK6AMiEWIAEcA","type":"Entry","createdAt":"2018-10-29T04:25:16.280Z","updatedAt":"2018-10-29T04:25:16.280Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Authentication in Vue using Vuex","url":"authentication-vue-vuex","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/vuex-auth-jwt","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-10-25","description":"Learn how to implement authentication in a Vue app with Vuex and a Node backend. Create a simple demo with a login page and authentication server.","prerequisite":"You will need Node 8.9+ installed on your machine, and the Vue CLI 3.0. Some knowledge of Vue will be helpful.","content":"## Introduction\n\nAuthentication is one of the most important parts of any modern application, especially ones built with JavaScript. To successfully achieve this, there are numerous options available to developers when building web applications that involves protected routes.\n\nThe simplest option will be to set a unique `token` for each user in a `localStorage`. This means, whenever you need to access the user’s `token` or any other important user data for authentication purposes, we will need to fetch the token over and over again.\n\nTo handle this properly and ensure the we don’t have to reach out to the localStorage all the time, we need to persist the required data and easily access it whenever we want to. This will ensure that we have a centralized location for all our important data.\n\nIn this tutorial, we will be exploring the usage of Vuex to manage authentications within a Vue application.\n\n\n## Prerequisites\n\nA knowledge of JavaScript and Vue is required for this tutorial. Also ensure that you have [Node.js](http://nodejs.org/) (version 8.9 or above) and [Vue CLI 3.0](https://cli.vuejs.org/guide/) installed on your machine. If you have the previous versions of `vue-cli` installed globally already, kindly follow the installation guide [here](https://cli.vuejs.org/guide/installation.html) to upgrade to the latest version.\n\n\n## Setting up the application modules \n\nRun the command below to begin the setup of our application: \n\n```\n    $ vue create vuex-auth-jwt\n```\n\nChoose the “manually select features” options and check the features we will need for this project by pressing space on your computer to select one. As shown below I have selected Babel, Router, Vuex and Linter / Formatter. You can skip this selection process and have them installed later but to get started easily, I will advise you select them:\n\n![vuex-auth-setup](//images.ctfassets.net/1es3ne0caaid/7mXFeiSB1u6y42W2iUQI2s/5384724433078a954c7f04b79089e3fe/vuex-auth-setup.png)\n\nFor other instructions, type `y` to use history mode for router, this will ensure that history mode is enable within the router file that will automatically be generated for our project. In addition, select `ESLint with error prevention only` in order to pick a linter / formatter config. Next, select `Lint on save` for additional lint features and save your configuration in a dedicated config files for future projects. Type a name for your preset, I named mine `vuerc`:\n\n![vuex-auth-preset](//images.ctfassets.net/1es3ne0caaid/6HYm3UPHnq6yoYGQSEUKMS/d128043ca52de8dd64bc1d980ea0f88d/vuex-auth-preset.png)\n\n Finally, hit `enter` to continue the installation process:\n \n![vuex-auth-installation](//images.ctfassets.net/1es3ne0caaid/2XvpuJwTCUM4yE4kkWaCwy/12fc3790c3382b24c495e30467414737/vuex-auth-installation.png)\n\nWith this option, the Vue-CLI will automatically set up the `store` for Vuex and configure a file for router as well.\n\n\n## Install and configure Axios\n\nWe will need to perform HTTP requests within our application, for this, we will install axios. Open up the terminal and run the command below from your project directory:\n\n```\n    $ npm install axios --save\n```\n\n In addition, it is certain that we will be making use of axios across many of the components that will be created for our application, it will be preferable to import it once at the entry level and easily use it anywhere. Open the `./src/main.js` file and update it with the content below:\n \n``` javascript\n    // ./src/main.js\n    ...\n      import Axios from 'axios'\n      \n      Vue.prototype.$http = Axios;\n      const token = localStorage.getItem('token');\n      if (token) {\n        Vue.prototype.$http.defaults.headers.common['Authorization'] = token\n      }\n      \n    ...\n```\n\nA major benefit of the setup above is that it makes it very easy for us to call axios directly inside any of our application’s components by simply using `this.$http`. We also proceeded to set up `Authorization` header with a token that will be sent with our requests if required.\n\n\n## Setting up the server for authentication\n\nNext, we will set up a Node.js server for authentication. For this server, we will use SQLite as the database of choice for this tutorial. To install SQLite driver and other required dependencies for our server, run the command below:\n\n```\n    $ npm install --save sqlite3 bcryptjs jsonwebtoken body-parser\n```\n\nA quick look at some of the newly installed dependency:\n\n\n- [sqlite3](https://www.npmjs.com/package/sqlite3): asynchronous, non-blocking [SQLite3](http://sqlite.org/) bindings for [Node.js](http://nodejs.org/).\n- [bcryptjs](https://www.npmjs.com/package/bcryptjs): a library to help hash passwords for users\n- [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken): a [JSON Web Tokens](https://jwt.io/) package to manage user’s authentication\n- [body-parser](https://www.npmjs.com/package/body-parser): a package to help read the json data send to our server.\n\nOnce the installation is completed, then it’s time for us to proceed and create the Node.js server that will handle user authentication as mentioned earlier. Within the root folder of your project directory, create a new folder named `server` and create a JavaScript file called `app.js` inside of it. This is where configuration takes place to import the required libraries to easily set up our server.\n\nNow open the newly created file and add the following:\n\n``` javascript\n    // ./server/app.js\n      \n      \"use strict\";\n      const express = require('express');\n      const DB = require('./db');\n      const config = require('./config');\n      const bcrypt = require('bcryptjs');\n      const jwt = require('jsonwebtoken');\n      const bodyParser = require('body-parser');\n      const db = new DB(\"sqlitedb\")\n      const app = express();\n      const router = express.Router();\n      router.use(bodyParser.urlencoded({ extended: false }));\n      router.use(bodyParser.json());\n      \n      // CORS middleware\n      const enableCrossDomain = function (req, res, next) {\n          res.header('Access-Control-Allow-Origin', '*');\n          res.header('Access-Control-Allow-Methods', '*');\n          res.header('Access-Control-Allow-Headers', '*');\n          next();\n      }\n      app.use(enableCrossDomain)\n```\n\nWhat we have done in the file above is to require all the necessary packages for our server to run effectively as stated initially. A close look at the file again, you will notice that we are also requiring a database file  `DB` and configuration file `config`. We will create these files in a bit.\n\nLastly, we went further to set up a simple CORS middleware within a function named `enableCrossDomain`. This is to ensure that any cross origin resource errors are taken care of.\n\n### Define the authentication route\n\nNext, we will define the route for registering a new user and also a login route to authenticate whenever the user comes back to log in. To begin, go back to the `./server/app.js` file and include the code below immediately after the CORS middleware configuration:\n\n``` javascript\n    // ./server/app.js\n    \n    ...\n      router.post('/register', function (req, res) {\n          db.insert([\n              req.body.name,\n              req.body.email,\n              bcrypt.hashSync(req.body.password, 8)\n          ],\n              function (err) {\n                  if (err) return res.status(500).send(\"There was a problem registering the user.\")\n                  db.selectByEmail(req.body.email, (err, user) =\u003e {\n                      if (err) return res.status(500).send(\"There was a problem getting user\")\n                      let token = jwt.sign({ id: user.id }, config.secret, {\n                          expiresIn: 86400 // expires in 24 hours\n                      });\n                      res.status(200).send({ auth: true, token: token, user: user });\n                  });\n              });\n      });\n```\n\nThe content above is used to define the route for registering a new user. Here, we passed the request body to the `insert` method with our `database` class that will be created in the next section. We added a callback function to handle responses and provide accurate information of an authenticated user. \n\nAfter successfully registering a user, we used `email`, since it will be configured as a unique field later in the tutorial to retrieve the user data and create an authentication token for the user by using the `jwt` packaged installed via npm earlier. We also used a secret key to verify a token sent to the server to uniquely identify a user. The configuration file for the secret key will be created soon.\n\nNext, we will define the login route. Paste the content below within the `app.js` file right after the already configured `/register` route:\n\n``` javascript\n    // ./server/app.js \n    \n      router.post('/login', (req, res) =\u003e {\n          db.selectByEmail(req.body.email, (err, user) =\u003e {\n              if (err) return res.status(500).send('Error on the server.');\n              if (!user) return res.status(404).send('No user found.');\n              let passwordIsValid = bcrypt.compareSync(req.body.password, user.password);\n              if (!passwordIsValid) return res.status(401).send({ auth: false, token: null });\n              let token = jwt.sign({ id: user.id }, config.secret, {\n                  expiresIn: 86400 // expires in 24 hours\n              });\n              res.status(200).send({ auth: true, token: token, user: user });\n          });\n      })\n```\n\nWe basically received the request body containing the email and password of a user during the login process. We used bcrypt to easily compare the hashed password during registration with the supplied password and log the user in if there is a match, else we will throw an error.\n\nNext, add the content below to complete the setting up process of the server:\n\n``` javascript\n    // ./server/app.js\n    \n    ... \n      app.use(router)\n      let port = process.env.PORT || 3000;\n      let server = app.listen(port, function () {\n          console.log('Server listening on port ' + port)\n      });\n```\n\nWith the content above, our server will be available on `port:3000`. Now, we are done setting up our simple Node.js server. \n\n### Set up the database and config\n\nRemember we made reference to a configuration and database file earlier? First, to set up the configuration file, create a new file in the same `server` directory and call it `config.js`. Add the following contents to it:\n\n``` javascript\n    // ./server/config.js\n    \n      module.exports = {\n          'secret': 'applicationsecret'\n      };\n```\n\nFinally, create another file for the database within the `server` directory called `db.js` and use the following content:\n\n``` javascript\n    // ./server/db.js\n    \n    \"use strict\";\n    const sqlite3 = require('sqlite3').verbose();\n    class Db {\n        constructor(file) {\n            this.db = new sqlite3.Database(file);\n            this.createTable()\n        }\n        createTable() {\n            const sql = `\n                CREATE TABLE IF NOT EXISTS userAuth (\n                    id integer PRIMARY KEY, \n                    name text, \n                    email text UNIQUE, \n                    password text)`\n            return this.db.run(sql);\n        }\n        selectByEmail(email, callback) {\n            return this.db.get(\n                `SELECT * FROM userAuth WHERE email = ?`,\n                [email], function (err, row) {\n                    callback(err, row)\n                })\n        }\n        insert(user, callback) {\n            return this.db.run(\n                'INSERT INTO userAuth (name,email,password) VALUES (?,?,?)',\n                user, (err) =\u003e {\n                    callback(err)\n                })\n        }\n    }\n    module.exports = Db\n```\n\nHere, we created a database class with methods like:\n\n-  `createTable()`: to create a table named `userAuth` for the users\n-  `selectByEmail()`: to fetch user’s data from the database\n-  `insert()`: to insert user’s data into the database during the registration process\n\nIn case you missed any of the steps above, [check here](https://github.com/christiannwamba/vuex-auth-jwt/blob/master/server/app.js) for the complete `app.js` file.\n\n## Set up components for the application\n\nNow that we are done setting up the server, let’s create the required components for the application. First, locate the `src/components` folder and create a new folder named `auth` inside of it. This newly created folder will house both the `Login`  and `Register` components.\n\n### The Login component\n\nCreate a new file `Login.vue` within the `./src/components/auth` directory and add the content below:\n\n``` html\n     // ./src/components/auth/Login.vue\n     \n      \u003ctemplate\u003e\n       \u003cdiv\u003e\n         \u003cform class=\"login\" @submit.prevent=\"login\"\u003e\n           \u003ch1\u003eSign in\u003c/h1\u003e\n           \u003clabel\u003eEmail\u003c/label\u003e\n           \u003cinput required v-model=\"email\" type=\"email\" placeholder=\"Name\"/\u003e\n           \u003clabel\u003ePassword\u003c/label\u003e\n           \u003cinput required v-model=\"password\" type=\"password\" placeholder=\"Password\"/\u003e\n           \u003chr/\u003e\n           \u003cbutton type=\"submit\"\u003eLogin\u003c/button\u003e\n         \u003c/form\u003e\n       \u003c/div\u003e\n      \u003c/template\u003e\n      \u003cscript\u003e\n      export default {\n        data() {\n          return {\n            email: \"\",\n            password: \"\"\n          };\n        },\n        methods: {\n          login: function() {\n            let email = this.email;\n            let password = this.password;\n            this.$store\n              .dispatch(\"login\", { email, password })\n              .then(() =\u003e this.$router.push(\"/\"))\n              .catch(err =\u003e console.log(err));\n          }\n        }\n      };\n      \u003c/script\u003e\n```\n\nHere, in the `\u003ctemplate\u003e` section we created the required fields to log in a user and within  the `\u003cscript\u003e`, we added the data attributes that will bind to the HTML form. Lastly, we included a method to handle the login process. We are using a Vuex action named `login` to handle this authentication. We will set this up later.\n\n### The Register component\n\nNext, let’s create a component for registering users. To do this, create a new file `Register.vue` in the `.src/components/auth` folder and add the following to it:\n\n``` html\n    // ./src/components/auth/Register.vue\n    \n      \u003ctemplate\u003e\n        \u003cdiv\u003e\n          \u003ch4\u003eRegister\u003c/h4\u003e\n          \u003cform @submit.prevent=\"register\"\u003e\n            \u003clabel for=\"name\"\u003eName\u003c/label\u003e\n            \u003cdiv\u003e\n                \u003cinput id=\"name\" type=\"text\" v-model=\"name\" required autofocus\u003e\n            \u003c/div\u003e\n            \u003clabel for=\"email\" \u003eE-Mail Address\u003c/label\u003e\n            \u003cdiv\u003e\n                \u003cinput id=\"email\" type=\"email\" v-model=\"email\" required\u003e\n            \u003c/div\u003e\n            \u003clabel for=\"password\"\u003ePassword\u003c/label\u003e\n            \u003cdiv\u003e\n                \u003cinput id=\"password\" type=\"password\" v-model=\"password\" required\u003e\n            \u003c/div\u003e\n            \u003clabel for=\"password-confirm\"\u003eConfirm Password\u003c/label\u003e\n            \u003cdiv\u003e\n                \u003cinput id=\"password-confirm\" type=\"password\" v-model=\"password_confirmation\" required\u003e\n            \u003c/div\u003e\n            \u003cdiv\u003e\n                \u003cbutton type=\"submit\"\u003eRegister\u003c/button\u003e\n            \u003c/div\u003e\n          \u003c/form\u003e\n        \u003c/div\u003e\n      \u003c/template\u003e\n      \u003cscript\u003e\n      export default {\n        data() {\n          return {\n            name: \"\",\n            email: \"\",\n            password: \"\",\n            password_confirmation: \"\",\n          };\n        },\n        methods: {\n          register: function() {\n            let data = {\n              name: this.name,\n              email: this.email,\n              password: this.password,\n            };\n            this.$store\n              .dispatch(\"register\", data)\n              .then(() =\u003e this.$router.push(\"/\"))\n              .catch(err =\u003e console.log(err));\n          }\n        }\n      };\n      \u003c/script\u003e\n```\n\nSimilar to the `Login` component, we created a form with the required fields to register a user and set up a method to handle the registration process within the `\u003cscript\u003e` section. We also used a Vuex action named `register`.\n\n### The secure component\n\nOne of the main objectives of this application is to give a user access to a particular protected resource once they are authenticated. Let’s create this secured resource page. \n\nTo start, create a new folder named `resources` within the `components` folder and then create a new file called `Resources.vue` within it. Open `Resources.vue` and paste the content below in it:\n\n``` html\n    // ./src/components/resources/Resources.vue\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003ch1\u003eProtected resource page \u003c/h1\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\n## Update the base component\n\nOpen `./src/App.vue` file and update it with the content `\u003ctemplate\u003e` below:\n\n``` html\n    // ./src/App.vue\n    \n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cdiv id=\"nav\"\u003e\n          \u003crouter-link to=\"/\"\u003eHome\u003c/router-link\u003e |\n          \u003crouter-link to=\"/about\"\u003eAbout\u003c/router-link\u003e\n          \u003cspan v-if=\"isLoggedIn\"\u003e | \u003ca @click=\"logout\"\u003eLogout\u003c/a\u003e\u003c/span\u003e\n          \u003cspan v-else\u003e | \u003crouter-link to=\"/login\"\u003eLogin\u003c/router-link\u003e\u003c/span\u003e\n        \u003c/div\u003e\n        \u003crouter-view/\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nWe included a `Logout` method to check if a user is logged in. Paste the code below after the `\u003ctemplate\u003e` to include the `logout()` method:\n\n``` javascript\n    // ./src/App.vue\n    \n    \u003cscript\u003e\n    export default {\n      computed: {\n        isLoggedIn: function() {\n          return this.$store.getters.isLoggedIn;\n        }\n      },\n      methods: {\n        logout: function() {\n          this.$store.dispatch(\"logout\").then(() =\u003e {\n            this.$router.push(\"/login\");\n          });\n        }\n      }\n    };\n    \u003c/script\u003e\n```\n\nOnce a user clicks on the logout link, we dispatched a logout action to our vuex store and send the user to `login` page using `this.$router.push('/login')`.\n\n## Building out the auth module\n\nThere are four things that go into a Vuex module: the [initial state](https://vuex.vuejs.org/guide/state.html), [getters](https://vuex.vuejs.org/guide/getters.html), [mutations](https://vuex.vuejs.org/guide/mutations.html) and [actions](https://vuex.vuejs.org/guide/actions.html). We will set this up for our store. To begin, open `store.js` file and paste the code below in it:\n\n``` javascript\n    // ./src/store.js\n    \n    import Vue from 'vue'\n    import Vuex from 'vuex'\n    import axios from 'axios'\n    \n    Vue.use(Vuex)\n    export default new Vuex.Store({\n      state: {\n      status: '',\n        token: localStorage.getItem('token') || '',\n        user: {}\n      },\n      mutations: {\n      },\n      actions: {\n      },\n      getters: {\n      }\n    })\n```\n\nHere, we imported Vue, Vuex and axios and set the initial state for the authentication status, token and user information.\n\n\n## Set up Vuex actions\n\nOur application is a minimal one and we only require to set up three different actions. They are `login`, `register`, and `logout`. Actions in Vuex provides us with a way of committing mutations to the vuex store. Go back to the `store.js` file and update the `actions` with:\n\n``` javascript\n     // ./src/store.js\n     \n      actions: {\n          login({ commit }, user) {\n            return new Promise((resolve, reject) =\u003e {\n              commit('auth_request')\n              axios({ url: 'http://localhost:3000/login', data: user, method: 'POST' })\n                .then(resp =\u003e {\n                  const token = resp.data.token\n                  const user = resp.data.user\n                  localStorage.setItem('token', token)\n                  // Add the following line:\n                  axios.defaults.headers.common['Authorization'] = token\n                  commit('auth_success', token, user)\n                  resolve(resp)\n                })\n                .catch(err =\u003e {\n                  commit('auth_error')\n                  localStorage.removeItem('token')\n                  reject(err)\n                })\n            })\n          },\n          register({ commit }, user) {\n            return new Promise((resolve, reject) =\u003e {\n              commit('auth_request')\n              axios({ url: 'http://localhost:3000/register', data: user, method: 'POST' })\n                .then(resp =\u003e {\n                  const token = resp.data.token\n                  const user = resp.data.user\n                  localStorage.setItem('token', token)\n                  // Add the following line:\n                  axios.defaults.headers.common['Authorization'] = token\n                  commit('auth_success', token, user)\n                  resolve(resp)\n                })\n                .catch(err =\u003e {\n                  commit('auth_error', err)\n                  localStorage.removeItem('token')\n                  reject(err)\n                })\n            })\n          },\n          logout({ commit }) {\n            return new Promise((resolve, reject) =\u003e {\n              commit('logout')\n              localStorage.removeItem('token')\n              delete axios.defaults.headers.common['Authorization']\n              resolve()\n            })\n          }\n        }\n```\n\n### Login action\n\nThe login action will be used to authenticate a user before logging in into the application and then commit the user’s credentials to the Vuex store.\n\nWithin this action object, we made a call to the server’s login route and return the necessary data. We then store the token in local storage and then pass the token and user data to `auth_success` to update the store’s attributes.  Saving the token within the local storage instead of Vuex store will help to ensure that the user will still be logged in for as long as the token is still within the validity time.\n\n### Register action\n\nSimilar to the `Login` action, the will get the data of a user into our application and set a unique token in the local storage.\n\n### Logout action\n\nAfter all the activity within our application, the user needs to be able to logout and have all the data created during the authenticated session destroyed. Once a user clicks on the logout link, we will remove the token we stored earlier. \n\n\n## Defining the mutations\n\nNext, we will define mutators that will be used to change the state of data within the Vuex store. In the mutations object, add the following content:\n\n``` javascript\n    // ./src/store.js\n          auth_request(state) {\n            state.status = 'loading'\n          },\n          auth_success(state, token, user) {\n            state.status = 'success'\n            state.token = token\n            state.user = user\n          },\n          auth_error(state) {\n            state.status = 'error'\n          },\n          logout(state) {\n            state.status = ''\n            state.token = ''\n          },\n```\n\n## Create the getters\n\nWe will also add getters to get the value of the attributes of vuex state. Still within the `./src/store.js` add the content below to the `getters` object:\n\n``` javascript\n    ./src/store.js\n    \n    isLoggedIn: state =\u003e !!state.token,\n    authStatus: state =\u003e state.status,\n```\n\n\n## Defining routes for authenticated and unauthenticated pages\n\nAs pointed out earlier, we intend to hide certain resources or pages from an unauthenticated user. For this, we will use [vue-router](https://router.vuejs.org/) to control the access of a user to a protected route. Once the user is authenticated we will give them access to a protected page and then redirect unauthenticated users back to the login page. Open the `./src/router.js` file and import all the required component as shown below:\n\n``` javascript\n    // ./src/router.js\n    \n      import Vue from 'vue'\n      import Router from 'vue-router'\n      import store from './store.js'\n      import Home from './views/Home.vue'\n      import About from './views/About.vue'\n      import Login from './components/auth/Login.vue'\n      import Register from './components/auth/Register.vue'\n      import Resource from './components/resources/Resources.vue'\n      Vue.use(Router)\n      let router = new Router({\n        mode: 'history',\n        routes: [\n          {\n            path: '/',\n            name: 'home',\n            component: Home\n          },\n          {\n            path: '/login',\n            name: 'login',\n            component: Login\n          },\n          {\n            path: '/register',\n            name: 'register',\n            component: Register\n          },\n          {\n            path: '/resources',\n            name: 'resources',\n            component: Resource,\n            meta: {\n              requiresAuth: true\n            }\n          },\n          {\n            path: '/about',\n            name: 'about',\n            component: About,\n          }\n        ]\n      })\n      export default router \n```\n\nWe imported all the required components and then proceeded to define routes for the application. The only route requiring authentication here is the route that points to the page we want to protect. That is why we had to add a `meta` attribute to the route definition. If an unauthenticated user hits the `/resources` endpoint, he or she will be redirected back to the `Login` component.\nWe will set up the `requiresAuth` meta in the next section.\n\n\n## Handling unauthorized access cases\n\nTo check for unauthorized access, add the code below within the `router.js`  file just before the `export default router`:\n\n``` javascript\n    // ./src/router.js\n    \n    ...\n    router.beforeEach((to, from, next) =\u003e {\n      if (to.matched.some(record =\u003e record.meta.requiresAuth)) {\n        if (store.getters.isLoggedIn) {\n          next()\n          return\n        }\n        next('/login')\n      } else {\n        next()\n      }\n    })\n    ...\n```\n\n\n## Running the application\n\nLastly, to test the application, run the command below to start the Vue application:\n\n```\n    $ npm run serve\n```\n\nThis will start the development server for Vue on http://localhost:8080/, open that in your favorite browser to view the application.\n\nAnd next, start the Node.js server in another terminal with:\n\n```\n    $ node server/app\n```\n\nThis will print out a message to the console `Server listening on port 3000`;\n\n\n## Test the application\n\nNow, if you navigate to the endpoint for our protected page http://localhost:8080/resources, you will be redirected to the login page as you have not been authenticated yet:\n\n![vuex-auth-demo-1](//images.ctfassets.net/1es3ne0caaid/jYHp9UysTeY6QAMQquWiC/c9affdcdaa6550f046c5933632cee113/vuex-auth-demo-1.gif)\n\nProceed to the registration page http://localhost:8080/register and provide your details.\n\n![vuex-auth-demo-2](//images.ctfassets.net/1es3ne0caaid/1fOhjEb3FIqMgwwsMiqGkE/9f7ebea2fcc22a980fc09906bea1a4fe/vuex-auth-demo-2.png)\n\nOnce you are done, try to access the protected page again: \n\n![vuex-auth-demo-3](//images.ctfassets.net/1es3ne0caaid/3eJqmC8hy0YIgsKMMAuqUC/05ce709d18709cd09d9df692a907bf0e/vuex-auth-demo-3.gif)\n\n## Conclusion\n\nIn this tutorial, we were able to learn how to use Vuex to manage authentication within our application. We were also able to set up a protected route that only authenticated users can have access to and redirect any unauthenticated user to a login page. \n\nI hope you found this post helpful. Find the complete source code [here on GitHub](https://github.com/christiannwamba/vuex-auth-jwt).","metaTitle":"Authentication in Vue using Vuex","metaDescription":"Learn how to implement authentication in a Vue app with Vuex and a Node backend. Create a simple demo with a login page and authentication server."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6t55VPE9Gw0gQmWq8OMAAy","type":"Entry","createdAt":"2018-10-25T06:40:44.687Z","updatedAt":"2018-10-25T06:40:44.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to build a live progress bar with React","url":"live-progress-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/progress-bar","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Od9rZziIoMG4yaQ4EAeok","type":"Entry","createdAt":"2018-02-13T11:31:10.435Z","updatedAt":"2018-02-26T12:31:10.730Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":16,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live UX","url":"live-ux","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-10-24","description":"This brief tutorial will show you how to create a simple progress bar in React. It will receive updates from a Node.js backend and update live. The example creates a mock file upload process, allowing you to add your own real-life functionality as needed.","prerequisite":"You will need Node 6+ installed on your machine. Previous experience with React will be helpful.","content":"Long running tasks are a feature of many web applications which need to be handled properly to improve the experience of the user. In many cases, a static progress bar that doesn’t update until the end is provided which leaves the user unsure of how long a task will take or if progress is being made at all.\n\nWe can improve this situation by making our progress bars show the actual progress of the task in realtime, and Pusher makes this really easy to do as you’ll see in the tutorial below.\n\n## Prerequisites\n\nPrevious experience with React is required to follow through with this tutorial. You also need to install [Node.js](https://nodejs.org/en/) (v6 and above) and [npm](https://www.npmjs.com/) on your machine if you don’t have them already. [Installation instructions can be found here](https://docs.npmjs.com/getting-started/installing-node).\n\n\n## Getting started\n\nOpen a new terminal window and create a new folder called `progress-bar`, then `cd` into it:\n\n```\n    mkdir progress-bar\n    cd progress-bar\n```\n\nNext, install `create-react-app`, a tool that allows us to quickly get a React application up and running:\n\n```\n    npm install -g create-react-app\n```\n\nOnce `create-react-app` is installed, use it to bootstrap a new React project. Run the command below within the `progress-bar` directory.\n\n```\n    create-react-app client\n```\n\nThe above command will create a new directory called `client` and install React as well as its accompanying dependencies. It may take a while to complete, so sit tight and wait. Once it’s done, you should see a some information in the terminal informing you of what you can do next.\n\nNext, change into the newly created directory (`cd client`)and run `yarn start` to start the development server. Once the application compiles, you will be able to view it at http://localhost:3000.\n\n## Build the application frontend\n\nFor this demo, we will simulate the common task of uploading a large file to the server. We’re not going to upload a real file; however, we’ll write a small Node script that will simulate the effect of a file upload.\n\nLet’s start by building the application frontend first. We need some additional dependencies for our React application, so let’s install them first. Within the `client` directory, run the following command:\n\n```\n    npm install pusher-js react-ladda\n```\n\n`pusher-js` is the client side SDK for Channels, while `react-ladda` lets us use the [Ladda](https://github.com/hakimel/Ladda) button library in our React app.\n\nOpen up `App.js` in your favorite text editor and change its contents to look like this:\n\n``` javascript\n    // client/src/App.js\n    \n    import React, { Component } from 'react';\n    import LaddaButton, { XL, EXPAND_RIGHT } from 'react-ladda';\n    import Pusher from 'pusher-js';\n    import './App.css';\n    \n    class App extends Component {\n      state = {\n        loading: false,\n        progress: 0,\n      };\n    \n      componentDidMount() {\n        const pusher = new Pusher('\u003cyour app key\u003e', {\n          cluster: '\u003cyour app cluster\u003e',\n          encrypted: true,\n        });\n    \n        const channel = pusher.subscribe('upload');\n        channel.bind('progress', data =\u003e {\n          this.setState({\n            progress: data.percent / 100,\n          });\n    \n          if (data.percent === 100) {\n            this.setState({\n              loading: false,\n              progress: 0,\n            });\n          }\n        });\n      }\n    \n      handleClick = event =\u003e {\n        event.preventDefault();\n    \n        this.setState({\n          loading: !this.state.loading,\n        });\n    \n        fetch('http://localhost:5000/upload', {\n          method: 'POST',\n        }).catch(error =\u003e console.log(error));\n      };\n    \n      render() {\n        const { loading, progress } = this.state;\n        const message = loading ? (\n          \u003cspan className=\"progress-text\"\u003e{progress * 100}% completed\u003c/span\u003e\n        ) : null;\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003ch1\u003eImaginary Image Upload Service :)\u003c/h1\u003e\n            \u003cLaddaButton\n              loading={this.state.loading}\n              onClick={this.handleClick}\n              progress={this.state.progress}\n              data-color=\"#eee\"\n              data-size={XL}\n              data-style={EXPAND_RIGHT}\n              data-spinner-size={30}\n              data-spinner-color=\"#ddd\"\n              data-spinner-lines={12}\n            \u003e\n              Upload really large image!\n            \u003c/LaddaButton\u003e\n    \n            {message}\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nOur React application consists of one button which, when clicked, will show the progress of the file upload. The `componentDidMount()` lifecycle method houses the logic for streaming upload progress to the app in realtime.\n\nWe’re opening a connection to Channels using the `subscribe()` method which allows us to subscribe to a new channel called `upload`. Then, we listen for the `progress` event on the `upload` channel using the `bind` method and update the application state once we receive a progress update.\n\nBefore you can integrate Channels into your application you need to [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up) on [Pusher](https://pusher.com). Once your account is created, select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app. Retrieve your credentials from the **API Keys** tab, and then replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholders in `App.js` with the appropriate values.\n\n## Add the styles for the application\n\nLet's add the styles for the app’s frontend. Open up `App.css` in your editor and replace its contents with the following styles:\n\n``` css\n    // client/src/App.css\n    \n    .App {\n      margin-top: 50px;\n      text-align: center;\n    }\n    \n    .progress-text {\n      display: block;\n      font-size: 16px;\n      margin-top: 20px;\n    }\n```\n\nYou also need to add the style for the Ladda button. You can do so by adding the following tag to the `\u003chead\u003e` of the `index.html` file within the `client/public` directory:\n\n```\n    \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/Ladda/1.0.0/ladda.min.css\"\u003e\n```\n\nAt this point, the application should look like this:\n\n![react-progress-bar-demo-1](//images.ctfassets.net/1es3ne0caaid/1EdXEFBJaICmCGu4OuISuY/033308eb9893dcbb6dd1ddce516dd293/react-progress-bar-demo-1.png)\n\n## Create the server component\n\nWe’ll set up the server in the next step so as to simulate the file upload and trigger upload progress updates from the server. Run the following command from the root of the `progress-bar` directory to install the necessary dependencies:\n\n```\n    npm install express cors dotenv pusher\n```\n\nNext, create a new file called `server.js` in the root of your project directory and paste in the following code to set up a simple express server:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const cors = require('cors');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    const app = express();\n    \n    app.use(cors());\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nCreate another file called `variables.env` in the root of your project directory and change it’s contents to look like this:\n\n```\n    // variables.env\n    \n    PORT=5000\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\nRemember, your Pusher credentials can be retrieved from the **API Keys** tab on the Pusher account dashboard.\n\n## Add the /upload route\n\nIf you check the `handleClick()` method within `App.js`, you will see that we are making a post request to `/upload` when the button is clicked. Let’s go ahead and create this route within `server.js`:\n\n``` javascript\n    // server.js\n    \n    ...\n    app.use(cors());\n    \n    app.post('/upload', (req, res) =\u003e {\n      let percent = 0;\n      const interval = setInterval(() =\u003e {\n        percent += 10;\n        pusher.trigger('upload', 'progress', {\n          percent,\n        });\n    \n        if (percent === 100) clearInterval(interval);\n      }, 2000);\n    });\n```\n\nWe’re simulating an upload progress of 10% every two seconds, and triggering a new update on check increment.\n\nYou can start the server by running `node server.js` in a new terminal window and try out the application by clicking the upload button. You should see the progress update in realtime.\n\n![react-progress-bar-demo-2](//images.ctfassets.net/1es3ne0caaid/50Mqe44UdygeSOqcQQayMo/4b4556fd224cb54a8aa08a4f22c6d387/react-progress-bar-demo-2.gif)\n\n## Conclusion\n\nAnd that’s it! This is just scratching the surface of realtime updates using Pusher. Check out some other [use cases](https://pusher.com/tutorials/) for Channels, and as always, you can find the source code of this app in this [GitHub repository](https://github.com/ayoisaiah/progress-bar).","metaTitle":"How to build a live progress bar with React","metaDescription":"This brief tutorial will show you how to create a simple progress bar in React. It will receive updates from a Node.js backend and update live. The example creates a mock file upload process, allowing you to add your own real-life functionality as needed."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3pLXeMQWY8QSgC2IYeK0a0","type":"Entry","createdAt":"2018-10-23T12:42:44.772Z","updatedAt":"2018-10-23T12:50:54.968Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":" Create a live workout tracking app with React Native","url":"workout-tracker-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNWorkout","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-10-22","description":"This tutorial takes you through building a workout tracking app in React Native, with a Node backend. Users will be able to log and share their exercise updates and follow each other's progress. New workout logs are shared in realtime.","prerequisite":"You will need git, Node and Expo installed on your machine. Some knowledge of React Native is required.","content":"In this tutorial, we’ll be creating a realtime workout tracking app with React Native and Pusher.\n\n## Prerequisites\n\nBasic knowledge of React Native, React Navigation, and ES6 syntax is required. \n\nWe’ll also be using Redux. I’ll add as much detail as I can on what’s going on with all the Redux code, but you should at least be familiar with how Redux works.\n\nWe’ll be using [Expo](https://expo.io/) in order to easily test the app on multiple devices. [Install Expo](https://expo.io/learn) on your computer, then download the Expo client app for your [iOS](https://itunes.apple.com/us/app/expo-client/id982107779?mt=8) or [Android](https://play.google.com/store/apps/details?id=host.exp.exponent\u0026hl=en) device.\n\nThese are the package versions used in creating the app:\n\n\n- Node 8.3.0\n- Yarn 1.7.0\n- Expo CLI 2.1.2\n- Expo SDK 30.0.0\n- Pusher 4.3.1\n\nIt’s always recommended to use the most recent stable versions, but in case the app doesn’t work for you, you can use the versions above to ensure we have the same environment.\n\nLastly, you must have a [Pusher](https://pusher.com/) and an [ngrok account](https://ngrok.com/).\n\n\n## App overview\n\nThe app that we will be creating is for gym buddies who are working out in a different gym. They can use it to keep track of their buddy’s workout even if they are away from each other.\n\nThe app has two tabs: one for logging their own workout, and another for tracking the workout of their buddy. Users can both log and track at the same time. This makes it possible for users to compete on who can make the most number of sets and reps for each exercise they choose.\n\nUpon opening the app, users will be greeted with the logging tab. This is where they can log their workouts. They’ll be automatically assigned a unique username. When they click on their username, it will be copied to the clipboard so they can easily share it with their buddy:\n\n![react-native-workout-username](//images.ctfassets.net/1es3ne0caaid/ACLwrF7dq80gc200WyUqs/808f6ea8ef582568f0173eab7a198e1e/react-native-workout-username.png)\n\nThis is how it looks like when their buddy subscribes. Subscription can be done in the tracking tab. All they have to do is enter their buddy’s username and click on the right arrow:\n\n![react-native-workout-subscribe](//images.ctfassets.net/1es3ne0caaid/60HPwDIL3aIys8IC2UaYg6/6941f614198dfae33899d8ed0a4b2b00/react-native-workout-subscribe.png)\n\nThis is how it looks like when a user adds an exercise and a set:\n\n![react-native-workout-log](//images.ctfassets.net/1es3ne0caaid/3n6MvWp0FauOyYCUCAY8me/da2899d353559fce2c9e9a968d889153/react-native-workout-log.png)\n\nOnce an exercise or set has been added, it will show in the list below the username. The number at the top of the circle is the weight, and the number inside it is the number of reps for that set. When the user clicks on the circle, the reps is incremented by one:\n\n![react-native-workout-display-log](//images.ctfassets.net/1es3ne0caaid/2lCAJDKLgYOoEqM80IoqaG/ee4b47deb4093fa3ea816cf90e177a1f/react-native-workout-display-log.png)\n\nThe tracking tab in their buddy’s screen is automatically synced with the exercise and sets the user has added:\n\n![react-native-workout-share-log](//images.ctfassets.net/1es3ne0caaid/XdBJMLHT6mSWI8iy8KaeG/5ef729c2cd4c802545e3b17444316b04/react-native-workout-share-log.png)\n\nYou can view the source code of this app on this [GitHub repo](https://github.com/anchetaWern/RNWorkout). \n\n## Creating a Pusher app\n\nOn your [Pusher dashboard](https://dashboard.pusher.com/), create a new app and name it **RNWorkout**. Once created, enable the client events in the **App Settings** tab:\n\n![react-native-workout-client-events](//images.ctfassets.net/1es3ne0caaid/13zBdyDKoi2iO08CYcwkUw/5673c2595a00fd0aeba21cca9d815f32/react-native-workout-client-events.png)\n\nClient events allow us to emit messages directly from the app. Because normally, messages are only emitted from the server. This time, we’ll only be using the server to authenticate the user. This authentication process allows us to make requests directly from the app.\n\n## Clone the app\n\nStart by cloning the repo:\n\n```\n    git clone https://github.com/anchetaWern/RNWorkout.git\n```\n\nSwitch to the `starter` branch and install both the app and server dependencies:\n\n```\n    cd RNWorkout\n    git checkout starter\n    yarn install\n    cd server\n    npm install\n```\n\nThe `starter` branch contains a minimal version of the app where the screens, components, helper functions, styles, and the server code has already been added. This makes it easy for us to focus on the main subject of this tutorial, and that is how to work with Redux and Pusher Channels.\n\n## Starter code tour\n\nBefore we proceed with writing some code, let’s first do a quick tour of the code we have on the `starter` branch.\n\n### Helpers\n\nThe `app/helpers` folder contains two helper files for generating unique ID’s (`uniqid.js`) and usernames (`uniqname.js`). The unique ID’s are used as a unique identifier for the exercises and sets.\n\n### Server\n\nThe `server` folder contains the code for the server component of the app. This server is for authenticating the user when they initialize a new Pusher connection. No further updates are required inside this folder except for the `server/.env` file. We’ll update it later once we run the app.\n\n### Modals\n\nThe `app/modals` folder contains the code for the add exercise and add set modals. These modals are used for logging a new exercise and adding a set to a specific exercise. We will be updating the `AddExerciseModal.js` and `AddSetModal.js` later. This is to add the code for dispatching actions that will modify the store.\n\n### Components\n\nThe `app/components` folder contains all the components that the app is using. This includes the following:\n\n\n- **AlertBox** - for showing messages enclosed inside a box. \n- **IconButton** - for showing buttons with an icon in them.\n- **SetContainer** - for showing the individual sets (the gray circles with a number inside and below them).\n- **List** - serves as a container list for the SetContainer component.\n- **ConnectedFlatList** - for showing all the workout data (exercises and sets).\n\nAmong the components above, we’re only going to update the ConnectedFlatList (`app/components/ConnectedFlatList/ConnectedFlatList.js`). As it is right now, it won’t really render anything. We have to turn it into a “connected” component so it will automatically re-render once the relevant data in the store is updated.\n\n### Screens\n\nWe only have one screen because the logging and tracking features are too similar to have their own screen. If you open the `Root.js` file, you’ll see that we’re only using the LogWorkout screen:\n\n``` javascript\n    import LogWorkoutScreen from \"./app/screens/LogWorkout\";\n    \n    const LogStack = createStackNavigator(\n      {\n        Log: LogWorkoutScreen\n      },\n      { initialRouteName: \"Log\" }\n    );\n    \n    const TrackStack = createStackNavigator(\n      {\n        Track: LogWorkoutScreen\n      },\n      { initialRouteName: \"Track\" }\n    );\n```\n\nWe will be updating the `app/screens/LogWorkout.js` file later because that’s where we need to link everything up.\n\n## Build the app\n\nNow we’re ready to build the app. Here’s what we’ll be doing through the rest of the tutorial:\n\n- Add the actions.\n- Add the reducers.\n- Dispatch an action for adding a new exercise to the store when the user adds a new exercise. \n- Dispatch an action for adding a new set to the store when the user adds a new set.\n- Initialize Pusher.\n- Subscribe user to their own channel so they can emit client events.\n- Subscribe to another user so they can listen for client events emitted by that user.\n- Emit a client event on the channel when a new exercise or set is added by the user.\n- Listen for client events so the tracking tabs UI is synced to that of the user being followed.\n\nThe steps above aren’t ordered in a specific way. Most likely, you’ll have to switch between each of them as you’re testing the app. For this tutorial, I recommend you to start the app even if it’s not fully working yet. This allows you to easily see the effects of the code you’re adding, and not simply copy-pasting it:\n\n```\n    expo start\n```\n\nLet’s make this as hands-on as possible. I’ll first mention what needs to be done so you can try on your own, and then you can peak at the code either here or in the GitHub repo if you’re not sure what to do. I’ve also added “todo” comments in the starter code as a guide on where you should put a specific code. Feel free to browse around the code whenever you see “our task is to…” or “next, we need to..” as that’s the cue for when we’ll start adding the code. Try to figure out on your own first before you proceed.\n\nWe’ll work on the functionality for logging workouts first. That will be the first screen that you see when you run the app. Right now, we only have the following:\n\n![react-native-workout-starter-screen](//images.ctfassets.net/1es3ne0caaid/3MsKX00SNG0Ia6AAqa6Sq2/d08bbe7051266638499d81368acb4477/react-native-workout-starter-screen.png)\n\nThe username is generated, and it can be copied to clipboard, but that’s it. Nothing you can really do in this tab (logging tab) right now.\n\n### Add the actions\n\nOur first task is to figure out how to make the add exercise modal visible so we can enter the exercise we want to add.\n\nMy usual workflow when working with Redux is to first figure out what the global app state will look like. But before we can do that, we first need to determine the actions that can be done throughout the app in relation to how it affects the UI:\n\n- Open or close modals.\n- Add an exercise.\n- Set the current exercise.\n- Add a set.\n- Increment set.\n\nNote that I’ve excluded actions that are only applicable to a specific component. Here’s a good rule of thumb to determine if something is an action or not:\n\n\u003e If the rest of the app’s UI isn’t affected if the value of a specific piece of data is updated, then it’s not an action. \n\nFor this app, non-actions include:\n\n- Entering the name of the exercise.\n- Entering the weight of a set.\n\nBoth instances don’t update the app’s UI in a way that affects the whole app, so the state for those can be managed within the component level.\n\nGo ahead and create an `app/actions` folder. Inside it, create a `types.js` file and define all the actions that we came up with. This will help us avoid typos when working with [actions](https://redux.js.org/basics/actions):\n\n``` javascript\n    // app/actions/types.js\n    export const ADDED_EXERCISE = \"added_exercise\";\n    \n    export const ADDED_SET = \"added_set\";\n    export const INCREMENTED_SET = \"incremented_set\";\n    \n    export const MODAL_TOGGLED = \"modal_toggled\";\n    export const SET_EXERCISE = \"set_exercise\";\n```\n\nNext, define the [action creators](https://redux.js.org/basics/reducers). These are functions that will return the data needed by each action. Each action type will have its own function, which returns it as the `type` property:\n\n``` javascript\n    // app/actions/index.js\n    import {\n      ADDED_EXERCISE,\n      ADDED_SET,\n      INCREMENTED_SET,\n      MODAL_TOGGLED,\n      SET_EXERCISE\n    } from \"./types\";\n    \n    export const addedExercise = (exerciseID, exerciseName, user = \"me\") =\u003e {\n      return {\n        type: ADDED_EXERCISE,\n        id: exerciseID, // a machine-friendly version of the exercise name\n        exercise: exerciseName, // name of the exercise (e.g. front squat)\n        user: user \n      };\n    };\n    \n    export const addedSet = (setID, exerciseID, weight, user = \"me\") =\u003e {\n      return {\n        type: ADDED_SET,\n        id: setID, // unique ID for the set\n        exercise_id: exerciseID, // used for determining which exercise to put the set under\n        weight: weight, // how heavy is the weight being lifted (usually in lbs)\n        reps: 1, // default number of repetitions for a new set\n        user: user\n      };\n    };\n    \n    export const incrementedSet = (setID, reps, user = \"me\") =\u003e {\n      return {\n        type: INCREMENTED_SET,\n        id: setID, // unique ID for the set\n        reps: reps, // repetitions performed for this set\n        user: user\n      };\n    };\n    \n    export const modalToggled = (modalName, visibility) =\u003e {\n      return {\n        type: MODAL_TOGGLED, \n        modal: modalName, // addExerciseModal or addSetModal\n        visibility: visibility // true (visible) or false (not visible)\n      };\n    };\n    \n    // for setting the exercise in which to add a set\n    export const setExercise = id =\u003e {\n      return {\n        type: SET_EXERCISE,\n        exercise_id: id\n      };\n    };\n```\n\nNote that the `addedExercise`, `addedSet`, and `incrementedSet` functions have a `user` parameter which is set to `me` by default. This allows us to specify which specific app state will the data go. The value of this parameter can either be `me` or `others`. `me` is for the data displayed in the logging tab, while `others` is for the data displayed on the tracking tab. \n\n### Add the reducers\n\nNext, we need to create the [reducers](https://redux.js.org/basics/reducers). These are responsible for describing how a specific portion of the app state will change. Personally, I create a separate reducer based on the data they’re modifying. In this app, that would be:\n\n- Exercise reducer (`ExerciseReducer.js`) - for exercise-related data.\n- Set reducer (`SetReducer.js`) - for set-related data.\n- UI reducer (`UIReducer.js`) - for UI-related data. These are usually booleans which hide or show what is seen on the screen (for example, modals and progress loaders).\n\nWhen it comes to figuring out which reducers to create, anything really goes if you’re only working on a throw-away project to learn a specific technology. But be sure to read about Redux best practices when working in a production app.\n\nCreate an `app/reducers` folder and create the files mentioned above inside it. \n\nLet’s first start with the exercise reducer:\n\n``` javascript\n    // app/reducers/ExerciseReducer.js\n    import { ADDED_EXERCISE } from \"../actions/types\";\n    \n    import uniqid from \"../helpers/uniqid\";\n    \n    const INITIAL_STATE = {\n      exercises: [],\n      others_exercises: []\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      switch (action.type) {\n        case ADDED_EXERCISE:\n          const key = uniqid();\n          const id = action.id;\n          const exercise = action.exercise;\n          \n          // determine which specific array to update\n          const exercises =\n            action.user == \"me\" ? state.exercises : state.others_exercises;\n          \n          // create a new array with the new exercise appended to the end of it\n          const updated_exercises = exercises.concat({\n            key: key,\n            exercise_id: id, // machine-friendly version of the exercise name\n            exercise_name: exercise\n          });\n          \n          // return the new state based on which user performed the action\n          if (action.user == \"me\") {\n            return { ...state, exercises: updated_exercises };\n          }\n    \n          return { ...state, others_exercises: updated_exercises };\n    \n        default:\n          return state;\n      }\n    };\n```\n\nFrom the code above, the first step is to define the `INITIAL_STATE`. Note that this isn’t the initial value for the whole app state. This should only be for the specific data modified by this reducer. In this case, it’s only the `exercises` (the exercises logged by the current user), and `others_exercises` (the exercises logged by the user followed by the current user). \n\nBased on the `user` passed from the action, we get and re-create either the `exercises` or `others_exercises` array. Take note of the word “re-create” as we’re not really supposed to modify the state directly, we only replace it with a different value. Redux handles the calculation needed to determine whether the UI should be re-rendered or not. And if you modify the state directly, then it won’t be ensured that that process will work correctly. That’s why we’re using the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and [concat method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) to avoid updating the state directly. \n\nNext is the set reducer. Again, we’re updating two arrays, one for each user. But this time, our reducer handles two actions, one for when the set is added, and another for when it’s incremented:\n\n``` javascript\n    // app/reducers/SetReducer.js\n    import { ADDED_SET, INCREMENTED_SET } from \"../actions/types\";\n    \n    const INITIAL_STATE = {\n      sets: [],\n      others_sets: []\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      let sets = [];\n      let index = 0;\n      let reps = 0;\n    \n      let set_name = \"sets\";\n      let current_sets = [];\n    \n      switch (action.type) {\n        case ADDED_SET:\n          current_sets = action.user == \"me\" ? state.sets : state.others_sets;\n          sets = current_sets.concat({\n            key: action.id,\n            exercise_id: action.exercise_id,\n            weight: action.weight,\n            reps: action.reps\n          });\n    \n          const updated_state =\n            action.user == \"me\"\n              ? { ...state, sets }\n              : { ...state, others_sets: sets };\n          return updated_state;\n    \n        case INCREMENTED_SET:\n          current_sets = action.user == \"me\" ? state.sets : state.others_sets;\n          sets = [...current_sets];\n          index = sets.findIndex(itm =\u003e {\n            return itm.key == action.id;\n          });\n    \n          reps = action.reps;\n          sets[index] = { ...sets[index], reps: reps + 1 }; // add 1 to the current rep\n    \n          if (action.user == \"others\") {\n            return { ...state, others_sets: sets };\n          }\n    \n          return { ...state, sets };\n    \n        default:\n          return state;\n      }\n    };\n```\n\nNext is the UI reducer. This is responsible for processing the actions for showing or hiding the modals, and setting the current exercise:\n\n``` javascript\n    // app/reducers/UIReducer.js\n    import { MODAL_TOGGLED, SET_EXERCISE } from \"../actions/types\";\n    \n    const INITIAL_STATE = {\n      ui: {\n        current_exercise: \"\",\n        addExerciseModalIsOpen: false,\n        addSetModalIsOpen: false\n      }\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      let ui = {};\n      switch (action.type) {\n        case SET_EXERCISE:\n          ui = { ...state.ui };\n          ui[\"current_exercise\"] = action.exercise_id;\n    \n          return {\n            ...state,\n            ui\n          };\n    \n        case MODAL_TOGGLED:\n          ui = { ...state.ui };\n          ui[`${action.modal}IsOpen`] = action.visibility;\n    \n          const new_state = {\n            ...state,\n            ui\n          };\n    \n          return new_state;\n    \n        default:\n          return state;\n      }\n    };\n```\n\nThe final step is to combine all the reducers into a single file. This allows us to easily supply it when we create the store later:\n\n``` javascript\n    // app/reducers/index.js\n    import { combineReducers } from \"redux\";\n    import ExerciseReducer from \"./ExerciseReducer\";\n    import SetReducer from \"./SetReducer\";\n    import UIReducer from \"./UIReducer\";\n    \n    export default combineReducers({\n      exercises: ExerciseReducer,\n      sets: SetReducer,\n      ui: UIReducer\n    });\n```\n\n### Connect the LogWorkout screen to the store\n\nNow that we’ve defined our actions, action creators, and reducers, the next step is to link the LogWorkout screen to the store.\n\nOpen `app/screens/LogWorkout.js` and add the following:\n\n``` javascript\n    import { MaterialIcons } from \"@expo/vector-icons\"; // already added\n    \n    // add these\n    import { createStore } from \"redux\";\n    import { Provider } from \"react-redux\";\n```\n\nIn the code above, `createStore` is used for [creating the store](https://redux.js.org/api/createstore). Consider the store as the global app state, while the `Provider` is a helper component that allows us to pass down the store to the component level. This gives us the ability to dispatch actions within this component and allow its child components to also connect to the store.\n\nNext, import the actions and reducers. To create a store we need to pass the combined reducers as an argument. This makes the store aware of which reducers it should use when a specific action is dispatched from the app:\n\n``` javascript\n    import {\n      modalToggled,\n      incrementedSet,\n      addedExercise,\n      addedSet\n    } from \"../actions\";\n    \n    import reducers from \"../reducers\";\n    const store = createStore(reducers);\n```\n\nNext, wrap the whole screen in the `Provider` component and pass the `store` as a value for the `store` prop:\n\n``` javascript\n    render() {\n      return (\n        \u003cProvider store={store}\u003e\n          ...\n        \u003c/Provider\u003e\n      );\n    }\n```\n\nOnce that’s done, we should be able to dispatch actions inside this component’s methods. In this case, we dispatch the action for opening the add exercise modal:\n\n``` javascript\n    showAddExerciseModal = () =\u003e {\n      store.dispatch(modalToggled(\"addExerciseModal\", true));\n    };\n```\n\nAs the button for opening the modal is inside the header, we need to set the `showAddExerciseModal` function as a navigation param. That way, we can access it as such from the header:\n\n``` javascript\n    componentDidMount() {\n      this.props.navigation.setParams({\n        showAddExerciseModal: this.showAddExerciseModal\n      });\n    }\n```\n\nIn the `navigationOptions`, you can now execute the `showAddExerciseModal` function:\n\n``` javascript\n    return {\n      headerTitle: `Log Workout`,\n      headerRight: (\n        \u003cIconButton\n          onPress={() =\u003e {\n            if (routeName == \"Log\") {\n              params.showAddExerciseModal(); // add this\n            }\n          }}\n        /\u003e\n      ),\n    }\n```\n\nWhen the button is clicked, it should execute the exercise reducer and the app’s state will be modified. Currently, the add exercise modal isn’t really aware of the changes that happen in the store yet, so it won’t really become visible when the button is clicked.\n\n### Open the add exercise modal\n\nThe next step is to make the add exercise modal into a connected component. That way, it will become aware of the state changes so it can re-render itself when a data it depends on changes.\n\nOpen the `app/modals/AddExerciseModal.js` file. To turn a component into a connected component, we need to use the `connect` method from `react-redux`. This allows us to add the functions for mapping specific data in the store as a prop for this component. It also allows us to define functions that we can use inside the component to dispatch actions, as you’ll see later:\n\n``` javascript\n    import { connect } from \"react-redux\";\n```\n\nNext, import the actions for toggling the visibility of the modal, and adding a new exercise:\n\n``` javascript\n    import { modalToggled, addedExercise } from \"../actions\";\n```\n\nNext, scroll to the bottom of the file (right before `export default AddExerciseModal`) and define the `mapStateToProps` function. This is used for mapping whichever data we have on the store as a prop for this component. In this case, we only need the `ui` object from the UI reducer. We use [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to extract it, and the spread syntax to extract the properties that are inside the `ui` object:\n\n``` javascript\n    const mapStateToProps = ({ ui }) =\u003e ({\n      ...ui\n    });\n```\n\nEarlier, in the UI reducer, we defined the following initial state:\n\n``` javascript\n    // app/reducers/UIReducer.js\n    const INITIAL_STATE = {  \n      ui: {\n        current_exercise: \"\",\n        addExerciseModalIsOpen: false,\n        addSetModalIsOpen: false\n      }\n    };\n```\n\n`mapStateToProps` gives us access to those specific properties in the `ui` object as if it were a prop that’s passed to the component (add exercise modal). To access the current visibility value of the add exercise modal, all we have to do is supply `this.props.ui.addExerciseModalIsOpen` to the `visible` prop of the `Modal` component:\n\n``` javascript\n    // app/modals/AddExerciseModal.js\n    \u003cModal\n      animationType=\"slide\"\n      visible={this.props.ui.addExerciseModalIsOpen}\n    \u003e\n      ...\n    \u003c/Modal\u003e\n```\n\nBut before we can do that, we first have to connect the component to the store. We can do that with the following code. This returns a “connected” version of the component, one that’s subscribed to the updates made in the store. `mapStateToProps` gets executed every time there’s an update to the store. If a relevant value is updated, the component is re-rendered because the prop it depends on is directly mapped to a value in the store:\n\n``` javascript\n    // app/modals/AddExerciseModal.js\n    export default connect(\n      mapStateToProps\n    )(AddExerciseModal);\n    \n    // export default AddExerciseModal; // replace this with the one above\n```\n\nOnce that’s done, clicking on the button in the header should make the add exercise modal visible.\n\nIf you’re wondering why we used `this.props.ui.addExerciseModalIsOpen` instead of `this.props.addExerciseModalIsOpen`, that’s because the data inside the UI reducer lives inside the `ui` object. We’ve defined this earlier in the reducer’s index file:\n\n``` javascript\n    // app/reducers/index.js\n    export default combineReducers({\n      // ...\n      ui: UIReducer\n    });\n```\n\nAnd in the UI reducer, everything lives inside another `ui` object:\n\n``` javascript\n    // app/reducers/UIReducer.js\n    const INITIAL_STATE = {\n      ui: {\n        // ...\n        addSetModalIsOpen: false\n      }\n    };\n```\n\nSo to access `addSetModalIsOpen`, we have to access `ui.ui.addSetModalIsOpen` from the store. Object destructuring gave us access to the `ui` object we’ve defined inside `app/reducers/index.js` file, while the spread syntax gave us access to the `ui` object defined inside `app/reducers/UIReducer.js` but not the properties inside of it:\n\n``` javascript\n    const mapStateToProps = ({ ui }) =\u003e ({\n      ...ui // note: spreads the ui object defined in the app/reducers/index.js file. not the ui object in the app/reducers/UIReducer.js\n    });\n```\n\nThis is why we still had to use `this.props.ui.addExerciseModalIsOpen`.\n\n### Add a new exercise\n\nThe next step is to add a new exercise when the add button in the add exercise modal is clicked. Earlier, you learned that to dispatch an action, you first have to import the action creator so you can dispatch it using the `dispatch` method from the `store`:\n\n``` javascript\n    // app/screens/LogWorkout.js\n    store.dispatch(modalToggled(\"addExerciseModal\", true));\n```\n\nThe problem we have now is that we have no access to the `store` or its `dispatch` method when inside the add exercise modal. The solution for that is the `mapDispatchToProps` method. It allows us to return functions that are also mapped as props for the component. The `dispatch` function is automatically passed as an argument to the `mapDispatchToProps` function, and we can use it to dispatch the action. In this case, we only need the action for toggling the visibility of the modal and adding the exercise:\n\n``` javascript\n    // app/modals/AddExerciseModal.js\n    // add this right below mapStateToProps\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        closeModal: () =\u003e {\n          dispatch(modalToggled(\"addExerciseModal\", false));\n        },\n        addExercise: (id, name) =\u003e {\n          dispatch(addedExercise(id, name));\n        }\n      };\n    };\n```\n\nTo use `mapDispatchToProps`, pass it as the second argument for the `connect` function:\n\n``` javascript\n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps\n    )(AddExerciseModal);\n```\n\nThe next step is to call the two functions (`closeModal` and `addExercise`) we just mapped as props:\n \n``` javascript\n    addExercise = () =\u003e {\n      // add these\n      if (this.state.exercise_name) {\n        const name = this.state.exercise_name;\n        const id = name.replace(\" \", \"_\");\n        this.props.addExercise(id, name); \n        \n        // already added\n        this.setState({\n          exercise_name: \"\"\n        });\n      \n        this.props.closeModal(); \n      }\n    };\n```\n\nOnce that’s done, a new exercise should be added to the store every time you click on the add button in the add exercise modal. The modal should also automatically close after that.\n\nDon’t forget to close the modal when the close button is clicked:\n\n``` javascript\n    \u003cIconButton\n      icon=\"close\"\n      color=\"#FFF\"\n      size={18}\n      onPress={() =\u003e {\n        this.props.closeModal(); // add this\n      }}\n    /\u003e\n```\n\n### Show the exercises\n\nNow that we’ve added the code for creating a new exercise, the next step is to show the exercises that were added. That’s the job of the ConnectedFlatList component. \n\nWhat we need to do is very similar to what we did in the add exercise modal, so we’ll just breeze through the code. Start by importing all the things we need:\n\n``` javascript\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    import { connect } from \"react-redux\";\n    import uniqid from \"../../helpers/uniqid\";\n    \n    import {\n      modalToggled,\n      setExercise,\n      incrementedSet,\n      addedExercise,\n      addedSet\n    } from \"../../actions\";\n```\n\nNext, scroll to the bottom of the file and add the `mapStateToProps` function. While we’re here, let’s also add the data related to the sets:\n\n``` javascript\n    const mapStateToProps = state =\u003e {\n      return {\n        exercises: state.exercises.exercises,\n        sets: state.sets.sets,\n        others_exercises: state.exercises.others_exercises,\n        others_sets: state.sets.others_sets\n      };\n    };\n    \n    export default connect(\n      mapStateToProps\n    )(ConnectedFlatList);\n```\n\nNext, get the relevant exercise data from the props. While we’re here, let’s also extract the sets data:\n\n``` javascript\n    render() {\n      // add these\n      const exercises =\n        this.props.user == \"me\"\n          ? this.props.exercises\n          : this.props.others_exercises;\n      const sets =\n        this.props.user == \"me\" ? this.props.sets : this.props.others_sets;\n      \n      // already added\n      if (exercises.length) {\n        return (\n          \u003cFlatList\n            data={exercises}\n            extraData={sets}\n            renderItem={this.renderItem}\n            contentContainerStyle={{ paddingBottom: 50, backgroundColor: \"#FFF\" }}\n          /\u003e\n        );\n      }\n    }\n```\n\nTake note of the `extraData` prop that we’ve supplied for the FlatList. We’ve supplied `sets` to it because the sets data isn’t nested under the `exercises` array. That means that if we add a new set or increment an existing one, this FlatList won’t really get re-rendered. Supplying `sets` as an `extraData` allows us to re-render the main FlatList when the sets data is updated.\n\nOnce that’s done, you should now see the exercises being listed as you add them through the add exercise modal.\n\n\n### Open the add set modal\n\nNow that we can add and show exercises, the next step is to show the add set modal. \n\nWhen the plus button to the right of the exercise name is clicked, it should show the add set modal. To implement that, we need to dispatch the action for toggling the visibility of the add set modal.\n\nJust like what we did earlier in the add exercise modal, we need to use `mapDispatchToProps` so we can dispatch actions by calling functions that are mapped as a prop:\n\n``` javascript\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    // add these\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        openAddSetModal: () =\u003e {\n          dispatch(modalToggled(\"addSetModal\", true));\n        },\n        setExercise: exercise_id =\u003e {\n          dispatch(setExercise(exercise_id));\n        }\n      };\n    };\n    \n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps // add this\n    )(ConnectedFlatList);\n```\n\nNote that aside from the `modalToggled` action, we also have `setExercise`. This is for updating the value of the `current_exercise` property in the UI reducer so that by the time the user hits the button for adding the set, we can extract this value from the props and supply it as one of the properties for the set to be created.\n\nNext, inside the `renderItem` method, call the relevant functions you returned in `mapDispatchToProps`:\n\n``` javascript\n    renderItem = ({ item }) =\u003e {\n      return (\n        \u003cView key={item.key} listKey={item.key}\u003e\n          \u003cView style={styles.list_item_header}\u003e\n            \u003cText style={styles.list_item_header_text}\u003e{item.exercise_name}\u003c/Text\u003e\n            \u003cIconButton\n              icon=\"add\"\n              size={20}\n              color=\"#333\"\n              onPress={() =\u003e {\n                if (this.props.user == \"me\") {\n                  // add these:\n                  this.props.openAddSetModal(); \n                  this.props.setExercise(item.exercise_id);\n                }\n              }}\n            /\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nThe next step is to turn the add set modal into a connected component. You should already know how to do this so let’s just look at the code:\n\n``` javascript\n    // app/modals/AddSetModal.js\n    import { connect } from \"react-redux\";\n    import { modalToggled, addedSet } from \"../actions\";\n    import uniqid from \"../helpers/uniqid\";\n\n\n    const mapStateToProps = ({ ui }) =\u003e ({\n      ...ui\n    });\n    \n    export default connect(\n      mapStateToProps\n    )(AddSetModal);\n\n\n    render() {\n      return (\n        \u003cModal\n          animationType=\"slide\"\n          visible={this.props.ui.addSetModalIsOpen}\n          ...\n        \u003e\n        \u003c/Modal\u003e\n      );\n    }\n```\n\nOnce that’s done, the add set modal should become visible when the plus button to the right of the exercise name is clicked.\n\n### Add a new set\n\nAdding a new set is very similar to how we added an exercise:\n\n``` javascript\n    // app/modals/AddSetModal.js\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        closeModal: () =\u003e {\n          dispatch(modalToggled(\"addSetModal\", false));\n        },\n        addSet: (setID, exerciseID, weight) =\u003e {\n          dispatch(addedSet(setID, exerciseID, weight));\n        }\n      };\n    };\n    \n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps // add this\n    )(AddSetModal);\n```\n\nTake note of how we’re extracting the `current_exercise` from the props. Earlier, in the ConnectedFlatList, we’ve set the value for this property when the user clicks on the plus button to the right of the exercise name. That’s the purpose of the `setExercise` action, so we always have the correct value for the `exercise_id` when we add a new set:\n\n``` javascript\n    addSet = () =\u003e {\n      // add these\n      if (this.state.weight) {\n        const id = uniqid();\n        const exercise_id = this.props.ui.current_exercise;\n        const weight = this.state.weight;\n      \n        this.props.addSet(id, exercise_id, weight);\n        this.props.closeModal();\n        \n        // previously added code..\n      }\n    };\n```\n\nDon’t forget to close the modal when its close button is clicked:\n\n``` javascript\n    \u003cIconButton\n      icon=\"close\"\n      color=\"#FFF\"\n      size={18}\n      onPress={() =\u003e {\n        this.props.closeModal(); // add this\n      }}\n    /\u003e\n```\n\n### Show the sets\n\nThe next step is to show the sets added for a specific exercise. Earlier, we already mapped the current values of the `sets` and `others_sets` array in the store over to this component via `mapStateToProps`. All we have to do now is extract the relevant sets data from the props:\n\n``` javascript\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    renderSets = (exercise_id, key) =\u003e {\n      const id = uniqid();\n      const l_key = exercise_id + \":\" + key + \":\" + id;\n      \n      const sets_data =\n        this.props.user == \"me\" ? this.props.sets : this.props.others_sets;\n      const sets = sets_data.filter(item =\u003e {\n        return item.exercise_id == exercise_id;\n      });\n      \n      // already added:\n      if (sets.length) {\n        // ...\n      }\n    }\n```\n\nNote that the value of `this.props.users` in the code above is passed as a prop via the standard means (through the component). This is used to determine which specific set data to use (the current user or the user they’re following). The `l_key` is used as the value for the `listKey` for the FlatList that will contain each set. [We need to supply this](https://stackoverflow.com/questions/49276526/nested-flat-list-invariant-violation-a-virtualizedlist-contains-a-cell-which-it) because we’re nesting a FlatList within a FlatList. The `listKey` prop allows React to differentiate between sibling flatlists.\n\nAt this point, you should be able to see the sets being listed below a specific exercise when you add them.\n\n### Increment a set\n\nThe final thing we need to implement when it comes to the logging functionality is incrementing the value of a specific set. \n\nWe called it “increment set”, but what we really want to do is to increment the number of reps for a specific set. \n\nStart by adding it in the `mapDispatchToProps`:\n\n``` javascript\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        // added previously\n        setExercise: exercise_id =\u003e {\n          ...\n        },\n        // add this\n        incrementSet: (set_id, reps) =\u003e {\n          dispatch(incrementedSet(set_id, reps));\n        }\n      };\n    };\n```\n\nOnce that’s done, you should be able to call the method within the `onPress` method of the SetContainer:\n\n``` javascript\n    \u003cSetContainer\n      ...\n      onPress={() =\u003e {\n        if (this.props.user == \"me\") {\n          this.props.incrementSet(item.key, item.reps); // add this\n        }\n      }}\n    /\u003e\n```\n\nAt this point, clicking on a set should increment the number inside it.\n\n### Emit client events\n\nNow we’re ready to implement the tracking tab. \n\nStart by importing Pusher:\n\n``` javascript\n    // app/screens/LogWorkout.js\n    import Pusher from \"pusher-js/react-native\";\n```\n\nNext, initialize the class variables that we’re going to use:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      this.pusher = null;\n      this.my_channel = null; // the channel of the current user\n      this.followed_channel = null; // the channel of the user they followed\n    }\n```\n\nInside `componentDidMount`, add the code for initializing Pusher. Supply the credentials found in your Pusher app instance’s settings page. Leave the `authEndpoint` for now, we will supply it later once we run the server. Once that’s done, subscribe the user to their own channel (the unique `username` generated for them). In this case, we’re prefixing the channel name with `private-` to specify that this is a [private channel](https://pusher.com/docs/client_api_guide/client_private_channels). This specific channel type allows us to emit events directly from the app. Since it’s private, we have to authenticate through a server (the one inside the `server` directory of the project), that’s what the `authEndpoint` is for:\n\n``` javascript\n    componentDidMount() {\n      // previous code here\n    \n      // add these:\n      this.pusher = new Pusher(\"YOUR PUSHER APP KEY\", {\n        authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n        cluster: \"YOUR_PUSHER_APP_CLUSTER\",\n        encrypted: true\n      });\n    \n      this.my_channel = this.pusher.subscribe(`private-user-${username}`);\n      this.my_channel.bind(\"pusher:subscription_error\", status =\u003e {\n        Alert.alert(\n          \"Error occured\",\n          \"Cannot connect to Pusher. Please restart the app.\"\n        );\n      });\n    \n      this.my_channel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n        console.log(\"subscription to my channel ok!\");\n      });\n    }\n```\n\nNext, inside the `render` method, we need to check whether `my_channel` is initialized before we render anything. This allows us to supply it as a prop to AddExerciseModal, AddSetModal, and ConnectedFlatList:\n\n``` javascript\n    render() {\n      return (\n        \u003cProvider store={store}\u003e\n          \u003cView\u003e\n          {\n            this.props.navigation.state.routeName == \"Log\" \u0026\u0026 this.my_channel \u0026\u0026 (\n              \u003cView style={styles.log_content}\u003e\n                \u003cView style={styles.top_content}\u003e\n                  ...\n                \u003c/View\u003e\n                \u003cAddExerciseModal channel={this.my_channel} /\u003e\n                \u003cAddSetModal channel={this.my_channel} /\u003e\n                \n                \u003cConnectedFlatList user={\"me\"} channel={this.my_channel} /\u003e\n              \u003c/View\u003e  \n            )\n          }\n          \u003c/View\u003e\n        \u003c/Provider\u003e\n      );\n    }\n```\n\nWhy do we need to add `my_channel` as a prop to those three components you ask? That’s because we need to trigger client events when a specific action happens. In this case, the actions are:\n\n- Adding a new exercise.\n- Adding a new set.\n- Incrementing a set.\n\nLet’s quickly run through all the places which needs updating:\n\n``` javascript\n    // app/modals/AddExerciseModal.js\n    addExercise = () =\u003e {\n      if (this.state.exercise_name) {\n        this.props.addExercise(id, name); // already added\n        \n        // add this\n        this.props.channel.trigger(\"client-added-exercise\", {\n          id,\n          name\n        });\n        \n        // rest of the code\n      }\n    };\n\n\n    // app/models/AddSetModal.js\n    addSet = () =\u003e {\n      if (this.state.weight) {\n        this.props.addSet(id, exercise_id, weight); // already added\n        // add this\n        this.props.channel.trigger(\"client-added-set\", {\n          id,\n          exercise_id,\n          weight\n        });\n        \n        // rest of the code\n      }    \n    };\n\n\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    \n    \u003cSetContainer\n      ...\n      onPress={() =\u003e {\n        if (this.props.user == \"me\") {\n          this.props.incrementSet(item.key, item.reps); // already added\n          // add this\n          this.props.channel.trigger(\"client-incremented-set\", {\n            set_id: item.key,\n            reps: item.reps\n          });\n        }\n      }}\n    /\u003e\n```\n\nThe codes we’ve added above should be fairly easy to understand. We’re emitting a [client event](https://pusher.com/docs/client_api_guide/client_events) via the `channel` prop we’ve passed from the LogWorkout screen. The `trigger` method accepts the name of the event as its first argument, and an object containing the data we want to emit as its second.\n\nNote that client events should always be prefixed with `client-`. This allows Pusher to determine that this event is sent from the client.\n\n### Listen for client events\n\nThe final step is to add the code for subscribing to the user entered in the tracking tab and listening to events as they get fired. We execute the code below when the user clicks on the button with a right arrow in the tracking tab:\n\n``` javascript\n    // app/screens/LogWorkout.js\n    \n    subscribe = () =\u003e {\n      this.followed_channel = this.pusher.subscribe(\n        `private-user-${this.state.subscribedToUsername}`\n      );\n    \n      this.followed_channel.bind(\"pusher:subscription_error\", status =\u003e {\n        Alert.alert(\n          \"Error occured\",\n          \"Cannot connect to Pusher. Please restart the app.\"\n        );\n      });\n    \n      this.followed_channel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n        Alert.alert(\"Success\", \"You are now subscribed!\"); // let the user know that the subscription succeeded\n        \n        // listen for the events that we've emitted earlier\n        this.followed_channel.bind(\"client-added-exercise\", data =\u003e {\n          store.dispatch(addedExercise(data.id, data.name, \"others\")); // dispatch the action to update the UI for the tracking tab\n        });\n    \n        this.followed_channel.bind(\"client-added-set\", data =\u003e {\n          store.dispatch(\n            addedSet(data.id, data.exercise_id, data.weight, \"others\")\n          );\n        });\n    \n        this.followed_channel.bind(\"client-incremented-set\", data =\u003e {\n          store.dispatch(incrementedSet(data.set_id, data.reps, \"others\"));\n        });\n      });\n    };\n```\n\n## Running the app\n\nNow that we’ve added all of the relevant code, the app should work after we’ve added all the config and linked it to its server component.\n\nStart by adding your Pusher app credentials to the `server/.env` file:\n\n```\n    APP_ID=YOUR_PUSHER_APP_ID\n    APP_KEY=YOUR_PUSHER_APP_KEY\n    APP_SECRET=YOUR_PUSHER_APP_SECRET\n    APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n    PORT=3000\n```\n\nOnce that’s done, run the server:\n\n```\n    node server.js\n```\n\nNext, add your ngrok auth token and expose port 3000 to the internet:\n\n```\n    ./ngrok authToken YOUR_NGROK_AUTH_TOKEN\n    ./ngrok http 3000\n```\n\nNgrok should show the https URL for the server. Copy it to your Pusher `authEndpoint` in the LogWorkout screen:\n\n``` javascript\n    // app/screens/LogWorkout.js\n    this.pusher = new Pusher(\"YOUR_PUSHER_APP_KEY\", {\n      authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n      cluster: \"YOUR_PUSHER_APP_CLUSTER\",\n      encrypted: true\n    });\n```\n\nOnce that’s done, the app should be fully functional. Try running it on two devices:\n\n```\n    expo start\n```\n\n## Conclusion\n\nIn this tutorial, you learned how to use Pusher within a React Native app to create a realtime workout tracking app. Along the way, you’ve solidified your experience with basic Redux concepts and Pusher Channels.\n\nYou can view the source code of this app on this [GitHub repo](https://github.com/anchetaWern/RNWorkout).","metaTitle":" Create a live workout tracking app with React Native","metaDescription":"Use React Native and Node to build a workout tracking app. Users will log and share workouts and follow each other's progress."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"nK4OfznJsGmsqQ4yEyqus","type":"Entry","createdAt":"2018-10-23T11:30:04.277Z","updatedAt":"2018-10-23T11:30:04.277Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live leaderboard with Preact","url":"live-leaderboard-preact","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/realtime-leaderboard","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6nDfV1cd5C6464wgCoOQii","type":"Entry","createdAt":"2018-02-12T15:08:13.901Z","updatedAt":"2018-02-26T12:31:12.764Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Gaming","url":"gaming","type":"use case"}}],"reviewDate":"2018-10-17","description":"Use Preact and Node to build a simple game with a live leaderboard. Users will be able to play a game of chance against the computer, with their scores appearing and updating in realtime.","prerequisite":"You will need Node 6+ installed on your machine. A basic knowledge of JavaScript (ES6 syntax) will be helpful.","content":"In this article, I’ll show you how to build a leaderboard for a simple game that updates in realtime after every round. You can find the entire source code of the application in this [GitHub repository](https://github.com/ayoisaiah/realtime-leaderboard).\n\n\u003e Leaderboards are a feature in many online games which is used to improve competition among players  since it gives them instant feedback on their rankings which tends to increases gamer satisfaction and keeps them playing for longer.\n\n## Prerequisites\n\nTo follow through with the tutorial, a basic knowledge of JavaScript (ES6) and React or Preact is required. You also need to have [Node.js](https://nodejs.org/en/) (v6.x or later) and [npm](https://www.npmjs.com/) installed on your machine. [Installation instructions can be found here](https://docs.npmjs.com/getting-started/installing-node).\n\n## Getting started\n\nTo get started, install [preact-cli](https://github.com/developit/preact-cli) globally with npm as we’ll be using it shortly to bootstrap a new Preact application.\n\n```\n    npm install -g preact-cli\n```\n\nOnce the installation completes, the `preact` command will become available on your machine. Run the following command in the terminal to create a new Preact app.\n\n```\n    preact create simple leaderboard\n```\n\nThis command creates a new folder called `leaderboard` in your working directory and installs all the necessary dependencies needed to build and run the application.\n\nAs soon has the command has finished running, `cd` into the `leaderboard` directory and run `npm run start` to start the development server. The application should be viewable at http://localhost:8080. If port 8080 is not available on  your machine, `preact` will provide another port for you to use.\n\n## Creating our game\n\nThe game we will be making is the classic rock-paper-scissors game which is quite popular in many parts of the world. If you’re not familiar with the rules, you can check this [Wikipedia entry](https://en.wikipedia.org/wiki/Rock%E2%80%93paper%E2%80%93scissors) to get up to speed with how the game works.\n\nIn our implementation of the game, the player will get three points for a win, one for a draw and no points for a defeat. The score, as well as the player’s position on the leaderboard, will be updated in realtime.\n\nThe first step is to create the frontend of the game with Preact. Open up `index.js` in the root of the `leaderboard` directory and change its contents to look like this:\n\n``` javascript\n    // index.js\n    \n    import './style';\n    import { Component } from 'preact';\n    \n    export default class App extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          computerPick: null,\n          result: null,\n          leaderboard: [],\n        }\n    \n        this.handleClick = this.handleClick.bind(this);\n      }\n    \n      handleClick(event) {\n        const { value } = event.target;\n    \n        fetch(`http://localhost:7777/play?userPick=${value}`)\n          .then(response =\u003e response.json())\n          .catch(error =\u003e console.log(error));\n      }\n    \n      render() {\n        const { leaderboard, computerPick, result } = this.state;\n        const sortedLeaderboard = leaderboard.sort((a, b) =\u003e b.score \u003e a.score);\n        const tableBody = sortedLeaderboard.map((player, index) =\u003e (\n          \u003ctr\u003e\n            \u003ctd\u003e{index + 1}\u003c/td\u003e\n            \u003ctd\u003e{player.name}\u003c/td\u003e\n            \u003ctd\u003e{player.score}\u003c/td\u003e\n          \u003c/tr\u003e\n        ));\n    \n        const computerPicked = computerPick ?\n          \u003cspan class=\"computer-message\"\u003eThe computer chose {computerPick}\u003c/span\u003e : null;\n    \n        let message;\n        if (result !== null) {\n          message = result === 1 ?\n            \u003cspan class=\"message-content\"\u003eIt's a draw\u003c/span\u003e :\n            result === 0 ? \u003cspan class=\"message-content fail\"\u003eYou Lost!\u003c/span\u003e :\n            \u003cspan class=\"message-content success\"\u003eYou won!\u003c/span\u003e;\n        } else {\n          message = null;\n        }\n    \n        return (\n          \u003cdiv class=\"App\"\u003e\n            \u003ch1\u003eRock Paper Scissors\u003c/h1\u003e\n    \n            \u003cdiv class=\"button-row\"\u003e\n              \u003cbutton onClick={this.handleClick} value=\"rock\" class=\"rock\"\u003eRock\u003c/button\u003e\n              \u003cbutton onClick={this.handleClick} value=\"paper\" class=\"paper\"\u003ePaper\u003c/button\u003e\n              \u003cbutton onClick={this.handleClick} value=\"scissors\" class=\"scissors\"\u003eScissors\u003c/button\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv class=\"message\"\u003e\n              {message}\n              {computerPicked}\n            \u003c/div\u003e\n    \n            \u003cdiv class=\"leaderboard\"\u003e\n              \u003ctable\u003e\n                \u003cthead\u003e\n                  \u003ctr\u003e\n                    \u003cth\u003eRank\u003c/th\u003e\n                    \u003cth\u003eName\u003c/th\u003e\n                    \u003cth\u003eScore\u003c/th\u003e\n                  \u003c/tr\u003e\n                \u003c/thead\u003e\n                \u003ctbody\u003e\n                  {tableBody}\n                \u003c/tbody\u003e\n              \u003c/table\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n```\n\nThe three buttons allow us to select rock, paper or scissors for a round, while the table below it will contain the top scorers including the current player. We also have a `message` section where the winner of a round will be declared (if any).\n\nNext, change up `style.css` to look like this:\n\n``` css\n    // style.css\n    \n    html,\n    body {\n      font: 14px/1.21 'Helvetica Neue', arial, sans-serif;\n      font-weight: 400;\n    }\n    \n    .App {\n      max-width: 500px;\n      margin: 50px auto;\n      text-align: center;\n    }\n    \n    .button-row,\n    .scoreboard {\n      display: flex;\n      justify-content: space-between;\n      margin-bottom: 20px;\n    }\n    \n    button {\n      transition: box-shadow 0.3s;\n      font-size: 24px;\n      padding: 20px 25px;\n      width: 150px;\n      margin: 0px 10px 0px 10px;\n      background-color: white;\n      border: 4px solid rebeccapurple;\n      border-radius: 3px;\n      box-shadow: 2px 2px 2px 0px rgba(168,168,168,1);\n      cursor: pointer;\n    }\n    \n    button:hover {\n      box-shadow: 4px 4px 6px 0px rgba(168,168,168,1);\n    }\n    \n    button:focus {\n      background-color: #222;\n      color: #fff;\n    }\n    \n    .message span {\n      display: block;\n      text-align: center;\n    }\n    \n    .message-content {\n      font-weight: bold;\n      font-size: 20px;\n      padding: 20px;\n      background-color: #c0c0c0;\n      margin-bottom: 20px;\n    }\n    \n    .success {\n      background-color: #0f0;\n    }\n    \n    .fail {\n      background-color: #f00;\n    }\n    \n    table {\n      width: 100%;\n    }\n    \n    th,\n    td {\n      padding: 12px 15px;\n      text-align: left;\n      border-bottom: 1px solid #E1E1E1; \n    }\n    \n    th:first-child,\n    td:first-child {\n      padding-left: 0; \n    }\n    \n    th:last-child,\n    td:last-child {\n      padding-right: 0;\n    }\n```\n\nAt this moment, the application should look like this:\n\n![preact-leaderboard-demo-1](//images.ctfassets.net/1es3ne0caaid/1OBDt7fVZOCqGOcIMKqoO2/12420e4e07bd4722e1185af128eb6419/preact-leaderboard-demo-1.png)\n\n## Setting up the server\n\nLet’s set up a simple Express server to handle how the score is determined for a round while also broadcasting updates to the frontend.\n\nRun the following command to install the dependencies we’ll be needing:\n\n```\n    npm install express cors dotenv pusher\n```\n\nHead over to the [Pusher website](https://dashboard.pusher.com/accounts/sign_up) and to grab the necessary credentials. Once you have signed up, select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app.\n\nYou can retrieve your credentials from the **API Keys** tab, then create a `variables.env`  file in the root of your project directory and populate it with the following contents:\n\n```\n    // variables.env\n    \n    PORT=7777\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\nNext, create a new `server.js` file in your project directory and change it to look like this:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    const app = express();\n    \n    app.use(cors());\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    app.set('port', process.env.PORT || 7777);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nWe’re going to pretend that we have a leaderboard already with the scores of previous players. Normally, you’d fetch this data from the server, but in this scenario, we’ll hardcode the values in a JSON file.\n\nCreate a file called `leaderboard.json` in your project directory and update its contents to look like this:\n\n``` json\n    // leaderboard.json\n    \n    {\n      \"players\": [\n        {\n          \"name\": \"Mike Koala\",\n          \"score\": 95\n        },\n        {\n          \"name\": \"Gina Kangaroo\",\n          \"score\": 92\n        },\n        {\n          \"name\": \"Sally Tortoise\",\n          \"score\": 86\n        },\n        {\n          \"name\": \"Kim Lobster\",\n          \"score\": 67\n        },\n        {\n          \"name\": \"Peter Rabbit\",\n          \"score\": 56\n        },\n        {\n          \"name\": \"Frank Leopard\",\n          \"score\": 43\n        },\n        {\n          \"name\": \"Mary Hyena\",\n          \"score\": 34\n        },\n        {\n          \"name\": \"Caroline Bear\",\n          \"score\": 32\n        },\n        {\n          \"name\": \"Tom Eagle\",\n          \"score\": 24\n        },\n        {\n          \"name\": \"Jim Unicorn\",\n          \"score\": 11\n        },\n        {\n          \"name\": \"Player 1\",\n          \"score\": 0\n        }\n      ]\n    }\n```\n\n## Display the leaderboard on page load\n\nWhen our application loads, we need to update the table with the existing leaderboard values as shown in the `leaderboard.json` file.\n\nWithin `index.js`, add the following lifecycle hook that loads the leaderboard when the `App` component mounts successfully:\n\n``` javascript\n    // index.js\n    \n    componentDidMount() {\n      fetch('http://localhost:7777/leaderboard')\n        .then(response =\u003e response.json())\n        .then(data =\u003e {\n          this.setState({\n            leaderboard: [...data.players],\n          });\n        })\n        .catch(error =\u003e console.log(error));\n    }\n```\n\nNext, let’s add the `/leaderboard` route to the server. Hitting this route will simply send the `leaderboard.json` file to the client. First add the following under the other `require` statements at the top:\n\n``` javascript\n    // server.js\n    \n    const leaderboard = require('./leaderboard.json');\n```\n\nThen add the `/leaderboard`  route as shown below:\n\n``` javascript\n    // server.js\n    \n    ...\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    app.get('/leaderboard', (req, res) =\u003e {\n      res.json(leaderboard);\n    });\n    ...\n```\n\n## Game logic\n\nIn the `index.js` file, we have a `handleClick` function that is invoked when each button is clicked. This function sends whatever value is clicked to the server through the `/play` endpoint. But this endpoint does not exist on the server yet so we’ll go ahead and create it in the next step.\n\nBefore we continue, we need to create a new function that will help us determine the winner of each round or whether it is a draw. Let’s call this function `compare`, and create a new `compare.js` file to house the function as shown below:\n\n``` javascript\n    // compare.js\n    \n    const compare = (choice1, choice2) =\u003e {\n      if (choice1 === choice2) {\n        return 1;\n      }\n      if (choice1 === \"rock\") {\n        if (choice2 === \"scissors\") {\n          return 3;\n        } else {\n          // paper wins\n          return 0;\n        }\n      }\n      if (choice1 === \"paper\") {\n        if (choice2 === \"rock\") {\n          return 3;\n        } else {\n          return 0;\n        }\n      }\n      if (choice1 === \"scissors\") {\n        if (choice2 === \"rock\") {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    };\n    \n    module.exports = compare;\n```\n\nThe `compare` function checks what the user plays (`choice1`) and compares it with what the computer picks (`choice2`) to determine a winner. As explained previously, the user gets three points for a win, one for a draw and zero points for a defeat.\n\nLet’s go ahead and make use of the `compare` in the new `/play` route. We need to import it first below the other `require` statements:\n\n``` javascript\n    // server.js\n    \n    const compare = require('./compare');\n```\n\nThen create the `/play` route below `/leaderboard` as shown below:\n\n``` javascript\n    app.get('/play', (req, res) =\u003e {\n      const { userPick } = req.query;\n      const arr = ['rock', 'paper', 'scissors'];\n      const computerPick = arr[Math.floor(Math.random() * 3)];\n    \n      const points = compare(userPick, computerPick);\n    });\n```\n\nThe computer picks a random value from the `arr` variable anytime this route is hit. This value is then compared with whatever the user selected and the resulting points value for the user is stored in the `points` variable.\n\nWhen the user scores a point, we need to update the leaderboard in realtime so that the player can see his progress in the rankings while playing the game. We’ll be making use of Pusher Channels to achieve this functionality.\n\nLet’s install the Pusher client library through npm. This is how we’ll use Channels in our Preact app.\n\n```\n    npm install pusher-js\n```\n\nThen import it at the top of `index.js`:\n\n``` javascript\n    // index.js\n    \n    import Pusher from 'pusher-js';\n```\n\nNext, we’ll open a connection to Channels within `componentDidMount()` and use the  `subscribe()` method from Pusher to subscribe to a new channel called `leaderboard`. Finally, we’ll listen for the `update` on the `bot` channel using the `bind` method and update the application state once we receive a message.\n\nDon’t forget to replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholder with the appropriate values from your Pusher account dashboard.\n\n``` javascript\n    // index.js\n    \n    componentDidMount() {\n      const pusher = new Pusher('\u003cyour app key\u003e', {\n        cluster: '\u003cyour app cluster\u003e',\n        encrypted: true,\n      });\n    \n      const channel = pusher.subscribe('leaderboard');\n      channel.bind('update', data =\u003e {\n        const { leaderboard } = this.state;\n        const userIndex = leaderboard.findIndex(e =\u003e e.name === 'Player 1');\n        leaderboard[userIndex].score += data.points;\n    \n        this.setState({\n          computerPick: data.computerPick,\n          result: data.points,\n          leaderboard,\n        });\n      });\n    \n      fetch('http://localhost:7777/leaderboard')\n        .then(response =\u003e response.json())\n        .then(data =\u003e {\n          this.setState({\n            leaderboard: [...data.players],\n          });\n        })\n        .catch(error =\u003e console.log(error));\n    }\n```\n\nFinally, we’ll trigger updates from the server when the user’s points for a round have been determined.\n\nChange the `/play` route within `server.js` to look like this:\n\n``` javascript\n    // server.js\n    \n    app.get('/play', (req, res) =\u003e {\n      const { userPick } = req.query;\n      const arr = ['rock', 'paper', 'scissors'];\n      const computerPick = arr[Math.floor(Math.random() * 3)];\n    \n      const points = compare(userPick, computerPick);\n    \n      pusher.trigger('leaderboard', 'update', {\n        points,\n        computerPick,\n      });\n    });\n```\n\nYou can start the server by running `node server.js` in a different terminal window, and test out the game by playing a few rounds. You should see the leaderboard update as you score some points!\n\n![preact-leaderboard-demo-2](//images.ctfassets.net/1es3ne0caaid/7vMU7LHnFKyA2kWG6Scw40/cf1061a5e4e77f85a72791a42d3fb5c9/preact-leaderboard-demo-2.gif)\n\n## Conclusion\n\nI’m sure you’ll agree that setting up Pusher Channels for realtime updates to the game leaderboard was easy enough. There’s so much more you can do with Channels so I recommend digging into the [docs](https://pusher.com/docs) to find more about the service and other awesome features it has.\n\nThanks for reading! Remember that you can find the source code of this app in this [GitHub repository](https://github.com/ayoisaiah/realtime-leaderboard).","metaTitle":"Build a live leaderboard with Preact","metaDescription":"Create a rock-paper-scissors game with a realtime leaderboard. Use Node and Preact to build the game and scoreboard. Users will be able to see their scores update live."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1JFAD8AF6kqaoGyyo6seu8","type":"Entry","createdAt":"2018-10-01T19:58:43.290Z","updatedAt":"2018-10-02T15:29:17.907Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live news feed with React","url":"live-news-feed-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/react-news-feed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-10-01","description":"This brief tutorial will show you how to build a live news feed app using React and Node.js. You will integrate NewAPI to allow users to receive a news feed on a given topic (this example uses Bitcoin articles). ","prerequisite":"You will need Node 6+ installed on your machine. Some knowledge of JavaScript and React will be helpful.","content":"There are several instances where it’s important to show new updates in realtime. This  could be in the form of displaying live activities for a sporting event, or updating a news feed with breaking news and headlines as they happen.\n\nIn this tutorial, we’ll explore how Pusher Channels can be used in conjunction with React to build a realtime news feed. If you want to play around with the code as you read this tutorial, visit this [GitHub repository](https://github.com/ayoisaiah/react-news-feed), which contains the final version of the code for you to check out and run locally.\n\n## Prerequisites\n\nTo follow along, a basic knowledge of JavaScript (ES6) and React is required. You also need to have the following installed on your machine:\n\n\n- [Node.js](https://nodejs.org/en/) (v6 and above)\n- [npm](https://www.npmjs.com/)\n\n## Getting started\n\nStart by creating a new empty directory `news-app` and run `npm init -y` from within it in order to initialize the project with a `package.json` file.\n\n### Get News API credentials\n\nHead over to [News API](https://newsapi.org) and [register for a free account](https://newsapi.org/register). Once your account is created, your API key will be presented to you. Take note of it as we’ll be using it shortly.\n\n### Get Pusher credentials\n\nVisit the Pusher website and create an account. Select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app. Once your app is created, check the **API Keys** tab to view your credentials.\n\nIn the root of your project directory, create a new file `variables.env` and populate it with the following contents:\n\n```\n    // variables.env\n    \n    PORT=5000\n    NEWS_API_KEY=\u003cyour news api key\u003e\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\n## Set up the React app\n\nWe will bootstrap our React application with create-react-app. Install it globally on your computer by running the following command:\n\n```\n    npm install -g create-react-app\n```\n\nOnce the installation process is done, you can run the command below within the `news-app`  directory to set up your React application:\n\n```\n    create-react-app client\n```\n\nOnce the command has finished running, `cd` into the newly created `client` folder and install the other dependencies we will be needing to build the app frontend.\n\n```\n    npm install pusher-js pushid\n```\n\nThe `pusher-js` package is the client SDK for Pusher Channels, while `pushid` helps us generate a random ID string which we’ll be needing when creating the news feed.\n\nRun `yarn start` to launch the development server once all the dependencies have been installed.\n\n## Application logic\n\nOpen up `client/src/App.js` and change its contents to look like this:\n\n``` javascript\n    // client/src/App.js\n    \n    import React, { Component } from 'react';\n    import Pusher from 'pusher-js';\n    import pushid from 'pushid';\n    import './App.css';\n    \n    class App extends Component {\n      state = {\n        newsItems: [],\n      }\n    \n      componentDidMount() {\n        fetch('http://localhost:5000/live')\n          .then(response =\u003e response.json())\n          .then(articles =\u003e {\n            this.setState({\n              newsItems: [...this.state.newsItems, ...articles],\n            });\n          }).catch(error =\u003e console.log(error));\n    \n        const pusher = new Pusher('\u003cyour app key\u003e', {\n          cluster: '\u003cyour app cluster\u003e',\n          encrypted: true,\n        });\n    \n        const channel = pusher.subscribe('news-channel');\n        channel.bind('update-news', data =\u003e {\n          this.setState({\n            newsItems: [...data.articles, ...this.state.newsItems],\n          });\n        });\n      }\n    \n      render() {\n        const NewsItem = (article, id) =\u003e (\n          \u003cli key={id}\u003e\u003ca href={`${article.url}`}\u003e{article.title}\u003c/a\u003e\u003c/li\u003e\n        );\n        \n        const newsItems = this.state.newsItems.map(e =\u003e NewsItem(e, pushid()));\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003ch1 className=\"App-title\"\u003eLive Bitcoin Feed\u003c/h1\u003e\n    \n            \u003cul className=\"news-items\"\u003e{newsItems}\u003c/ul\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nOur application `state` contains only one property: `newsItems`, which will contain a list of all news articles. When the app loads, it will fetch a list of news items from the server and update the `newsItems` array which would trigger an update on  the page, causing a list of news items to be displayed.\n\nWe also subscribed the app to the `news-channel` channel, which is where our server will publish events to. Once the `update-news` event is received, the page will be updated with incoming news items.\n\nDon’t forget to replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholders with the appropriate details from your Pusher account dashboard.\n\n## Add the application styles\n\nWithin the `client` directory, locate `src/App.css` and change its contents to look like this:\n\n``` css\n    // client/src/App.css\n    \n    .App {\n      width: 100%;\n      max-width: 700px;\n      margin: 0 auto;\n    }\n    \n    .App-title {\n      text-align: center;\n    }\n    \n    .text-input {\n      width: 100%;\n      border: 1px solid #f7f7f7;\n      padding: 10px;\n    }\n    \n    .text-input:hover {\n      box-shadow: 0 1px 4px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.25);\n    }\n    \n    .news-items {\n      list-style: none;\n      padding-left: 0;\n    }\n    \n    .news-items li {\n      margin-bottom: 10px;\n    }\n```\n\n## Set up the server\n\nLet’s set up a simple Express server for the purpose of fetching news items from https://newsapi.org and triggering realtime updates with Pusher.\n\n`cd` to the root of the `news-app` directory and install all the dependencies that are required to build the server:\n\n```\n    npm install express cors dotenv newsapi pusher --save\n```\n\nCreate a new `server.js` file and open it up in your text editor. Add the following code to `server.js`:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const cors = require('cors');\n    const Pusher = require('pusher');\n    const NewsAPI = require('newsapi');\n    \n    const app = express();\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    const newsapi = new NewsAPI(process.env.NEWS_API_KEY);\n    \n    const fetchNews = (searchTerm, pageNum) =\u003e\n      newsapi.v2.everything({\n        q: searchTerm,\n        language: 'en',\n        page: pageNum,\n        pageSize: 5,\n      });\n    \n    app.use(cors());\n    \n    function updateFeed(topic) {\n      let counter = 2;\n      setInterval(() =\u003e {\n        fetchNews(topic, counter)\n          .then(response =\u003e {\n            pusher.trigger('news-channel', 'update-news', {\n              articles: response.articles,\n            });\n            counter += 1;\n          })\n          .catch(error =\u003e console.log(error));\n      }, 5000);\n    }\n    \n    app.get('/live', (req, res) =\u003e {\n      const topic = 'bitcoin';\n      fetchNews(topic, 1)\n        .then(response =\u003e {\n          res.json(response.articles);\n          updateFeed(topic);\n        })\n        .catch(error =\u003e console.log(error));\n    });\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nOnce the `/live` endpoint is hit, news articles about bitcoin are retrieved from newsapi.org, and sent back to the client. We then make further requests every five seconds with  `setInterval` and use Pusher to trigger the `update-news` event with the incoming articles in the event payload.\n\nStart the server by running `node server.js` from the root of your project directory. At this point, you should have a news feed that updates in realtime.\n\n![react-news-feed-demo](//images.ctfassets.net/1es3ne0caaid/1Ii2mspYQImoWKKUISsWGA/d71c7248852d97e3cc6192a967180047/react-news-feed-demo.gif)\n\n## Conclusion\n\nIn this tutorial, you have learned how to build a news feed with React and how to set up Channels for adding realtime functionality to the feed. \n\nThanks for reading! Remember that you can find the source code of this app in this [GitHub repository](https://github.com/ayoisaiah/react-news-feed).","metaTitle":"Build a live news feed with React","metaDescription":"Use React and Node to create a live news feed. The example pulls in new stories about Bitcoin every few seconds, via the News API service."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5ltcXcWOIwUEUiYmqmGCyG","type":"Entry","createdAt":"2018-09-21T15:23:41.010Z","updatedAt":"2018-09-21T15:24:06.940Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a stocks application for Android featuring push notifications","url":"stocks-push-notifications-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/stock-app/","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}}],"reviewDate":"2018-09-21","description":"Build an Android app featuring realtime stock price updates and push notifications. You will use Kotlin to build a native app, and Node.js to create the backend. Users will be able to choose which stocks to track.","prerequisite":"You need Android Studio 3+ and Node.js installed on your machine. Some familiarity with Android development and Android Studio is required.","content":"\u003e A **stock market**, **equity market** or **share market** is the aggregation of buyers and sellers (a loose network of economic transactions, not a physical facility or discrete entity) of [stocks](https://en.wikipedia.org/wiki/Stock) (also called shares), which represent ownership claims on businesses; these may include securities listed on a public [stock exchange](https://en.wikipedia.org/wiki/Stock_exchange) as well as those only traded privately. - [Wikipedia](https://en.wikipedia.org/wiki/Stock_market)\n\nBuilding a stock market application has some fundamental requirements. Apart from accuracy, the application needs to also be able to update prices in realtime as the changes occur. It should also have an option to notify the user if there is a change in the price of a stock, even when they are not currently looking at the application.\n\nIn this post, we will see how we can achieve this using Kotlin, Pusher Beams, and Pusher Channels. \n\nWhen we are done with the article, here is what our app will look like:\n\n![android-stocks-demo](//images.ctfassets.net/1es3ne0caaid/1zIUg74BUg8Wksm0mCyoic/a21c893a69dacd159cae24c1d9c6434c/android-stocks-demo.gif)\n\n## Prerequesites\n\nTo follow along in this tutorial, you need the following:\n\n\n- Android Studio (v3.x or later) installed on your machine. Download [here](https://developer.android.com/studio/index.html).\n- Knowledge of Android development and the Android Studio IDE.\n- Knowledge of Kotlin. Visit the [docs](https://kotlinlang.org/docs/reference/).\n- Node.js and NPM installed on your machine. Download any stable release [here](https://nodejs.org/en/).\n\n\n## Creating your Android application\n\nThe first thing we want to do is create our Android application. Open Android Studio and create a new application. \n\nEnter the name of your application, `StockExchangeApp`, and then enter the package name, which is `com.example.stockexchangeapp`. Make sure the **Enable Kotlin Support** checkbox is selected, choose the minimum SDK, we chose API 19, click **Next.** Choose an **Empty Activity** template and click **Finish**.\n\n### Setting up Pusher Channels\n\nFor this article, you need a Pusher application. To get this, log in to your [Pusher dashboard](https://dashboard.pusher.com) and Create a new channel app. You can do this by clicking the **Create new Channels app** card at the bottom right. When you create a new app, you are provided with the keys. We will need them later.\n\n### Getting your FCM key\n\nFor Pusher Beams to work, we need an FCM key and a `google-services.json` file. Go to your [Firebase console](https://console.firebase.google.com/u/0/) and click the **Add project** card to initialize the app creation wizard. Add the name of project, read and accept the terms and conditions. After this, you will be directed to the project overview screen. Choose the **Add Firebase to your Android app** option. \n\nThe next screen will require the package name of your app. You can find your app’s package name is your app-module `build.gradle` file. Look for the `applicationId` value. When you enter the package name and click **Next**, you will be prompted to download a `google-services.json` file. Download the file and skip the rest of the process. Add the downloaded file to the app folder of your project - `StockExchangeApp/app`.\n\nTo get the FCM key, go to your project settings on Firebase, under the **Cloud messaging** tab, copy out the server key.\n\n![android-stocks-firebase-cloud-messaging](//images.ctfassets.net/1es3ne0caaid/32gyC9vKQgGiI2Ems6iIuW/3f47c88d12f9f44d5013de495d9f82f3/android-stocks-firebase-cloud-messaging.png)\n\n### Setting up Pusher Beams\n\nNow that we have set up our Firebase application, log in to the [Pusher Beams dashboard](https://dash.pusher.com/) and click on the **CREATE** button on the **BEAMS** card.\n\n![android-stocks-new-beams](//images.ctfassets.net/1es3ne0caaid/4s7xcv2Q1qkAYc8iKgGiEK/61bde551b68626cc773e1922420cb6ef/android-stocks-new-beams.png)\n\nAfter creating the instance, you will be presented with a quickstart guide. Select the **ANDROID** quickstart.\n\n![android-stocks-beams-android](//images.ctfassets.net/1es3ne0caaid/4xfRCPYpTW4OkEMCwGy6MM/9d66d1fb7d2381208f5da695f6f75316/android-stocks-beams-android.png)\n\nThe next screen requires the FCM key which you copied earlier. After you add the FCM key, you can exit the guide.\n\n### Adding application dependencies\n\nSince this application will depend on other libraries to function, let’s pull in these dependencies so they are available to the project.\n\nOpen the project `build.gradle` file and add the add the following:\n\n``` gradle\n    // File: ./build.gradle\n    buildscript {\n        // [...]\n    \n        dependencies {\n            // [...]\n            \n            classpath 'com.google.gms:google-services:4.0.0'\n        }\n    }\n```\n\nAnd these other dependencies to the app-module `build.gradle` file:\n\n``` gradle\n    // File: ./app/build.gradle\n    dependencies {\n    \n        // [...]\n    \n        // Support library\n        implementation 'com.android.support:appcompat-v7:28.0.0-rc01'\n        implementation 'com.android.support:recyclerview-v7:28.0.0-rc01'\n        implementation 'com.android.support:preference-v7:28.0.0-rc01'\n    \n        // Pusher Channel\n        implementation 'com.pusher:pusher-java-client:1.8.0'\n    \n        // Pusher Beams\n        implementation 'com.google.firebase:firebase-messaging:17.3.0'\n        implementation 'com.pusher:push-notifications-android:0.10.0'\n    }\n    \n    // Add this line to the end of the file\n    apply plugin: 'com.google.gms.google-services'\n```\n\n### Building the application\n\nSo far, we have been setting up the project. Now let’s start building the application. Let’s start by tweaking the colors of the application. \n\nOpen the `colors.xml` file and add the following code to it:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/values/colors.xml --\u003e\n    \u003ccolor name=\"colorPrimary\"\u003e#9E9E9E\u003c/color\u003e\n    \u003ccolor name=\"colorPrimaryDark\"\u003e#424242\u003c/color\u003e\n    \u003ccolor name=\"colorAccent\"\u003e#607D8B\u003c/color\u003e\n```\n\nNext, open your `styles.xml` file and replace the parent theme on the app theme with this - `Theme.AppCompat`.\n\nApart from the initial `MainActivity` already created for us, we will need a screen to manage the settings for the application. \n\nCreate a new **Empty Activity** named `SettingsActivity`. Open the layout created for it - `activity_settings` and replace everything except the first line of the file with the following code:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/layout/activity_settings.xml --\u003e\n    \u003cFrameLayout\n      android:background=\"#000\"\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:id=\"@+id/frame_layout\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".SettingsActivity\"/\u003e\n```\n\nNext, open the `SettingsActivity` file and set it up like this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/stockexchangeapp/SettingsActivity.kt\n    // [...]\n    \n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    \n    class SettingsActivity: AppCompatActivity() {\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_settings)\n        supportFragmentManager.beginTransaction()\n            .replace(R.id.frame_layout, SettingsFragment())\n            .commit()\n      }\n    \n    }\n```\n\nIn the code above, we replaced the frame layout with a [fragment](https://developer.android.com/guide/components/fragments). This is the recommended practice when creating a settings page. Before creating the fragment, let’s create a preference file. \n\nCreate a new file in the `xml` directory named `preference` and paste the following:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/xml/preference.xml --\u003e\n    \u003cPreferenceScreen\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e\n    \n      \u003cCheckBoxPreference\n        android:key=\"amazon_preference\"\n        android:title=\"Amazon\"\n        android:summary=\"Receive stock updates for Amazon\"\n        android:defaultValue=\"true\" /\u003e\n    \n      \u003cCheckBoxPreference\n        android:key=\"apple_preference\"\n        android:title=\"Apple\"\n        android:summary=\"Receive stock updates for Apple\"\n        android:defaultValue=\"true\" /\u003e\n    \n    \u003c/PreferenceScreen\u003e\n```\n\nIn this file, we have two checkboxes to control the updates for two stocks, Amazon and Apple. \n\nNext, create a new class named `SettingsFragment` and paste the following code:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/stockexchangeapp/SettingsFragment.kt\n    // [...]\n    \n    import android.os.Bundle\n    import android.support.v7.preference.PreferenceFragmentCompat\n    \n    class SettingsFragment: PreferenceFragmentCompat() {\n    \n      override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\n        // Load the preferences from an XML resource\n        setPreferencesFromResource(R.xml.preference, rootKey)\n      }\n    \n    }\n```\n\nThe code above loads the settings from the preference file created earlier. With this, we are done implementing the settings screen. \n\nThe next screen to be added will be a list of stock prices, which will be shown in the `MainActivity`. To do this, we need a list. Open the `activity_main.xml` file and paste the following:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/layout/activity_main.xml --\u003e\n    \u003candroid.support.constraint.ConstraintLayout\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:background=\"#000\"\n      tools:context=\".MainActivity\"\u003e\n    \n      \u003candroid.support.v7.widget.RecyclerView\n        android:id=\"@+id/recyclerView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThis layout has a `ConstraintLayout` housing a `RecyclerView`. Since we are using a list, we need some other utilities. One of those utilities is a data object. The object is what every item on the list will hold. \n\n**Related:** [**Getting started with ConstraintLayout in Kotlin**](https://pusher.com/tutorials/constraintlayout-kotlin-part-1).\n\nCreate a new class named `StockModel` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/stockexchangeapp/StockModel.kt\n    data class StockModel(var name: String, var currentValue: Double, var changeValue:Double)\n```\n\nA data class in Kotlin generates some other useful methods we would have had to create manually if we were using Java. \n\nNext, let’s design a layout for how each list item will look. Create a new layout file named  `list_row` and paste this:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/layout/list_row.xml --\u003e\n    \u003candroid.support.constraint.ConstraintLayout \n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\u003e\n    \n      \u003cTextView\n        android:layout_margin=\"10dp\"\n        android:id=\"@+id/stockName\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"20dp\"\n        tools:text=\"Amazon\"\n        android:textAppearance=\"@style/TextAppearance.AppCompat.Display1\"\n        android:textSize=\"18sp\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n      \u003cTextView\n        android:id=\"@+id/changeValue\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        tools:text=\"+5%\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        android:layout_marginEnd=\"20dp\"\n        android:paddingEnd=\"5dp\"\n        android:paddingStart=\"5dp\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\" /\u003e\n    \n      \u003cTextView\n        android:id=\"@+id/currentValue\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginEnd=\"10dp\"\n        tools:text=\"1234.9\"\n        app:layout_constraintEnd_toStartOf=\"@id/changeValue\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nFrom this layout, each list item will show a company name, the current stock price, and it’ll show the change percentage. \n\nNext, let’s create the adapter for the list. Create a new class named `StockListAdapter` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/stockexchangeapp/StockListAdapter.kt\n    // [...]\n    \n    import android.support.v4.content.res.ResourcesCompat\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    \n    class StockListAdapter(private val stockList:ArrayList\u003cStockModel\u003e) : RecyclerView.Adapter\u003cStockListAdapter.ViewHolder\u003e() {\n    \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        return ViewHolder(LayoutInflater.from(parent.context)\n            .inflate(R.layout.list_row, parent, false))\n      }\n    \n      override fun onBindViewHolder(holder: ViewHolder, position: Int) = holder.bind(stockList[position])\n    \n      override fun getItemCount(): Int = stockList.size\n    \n      fun addItem(item:StockModel){\n        stockList.add(item)\n        notifyDataSetChanged()\n      }\n    \n      fun updateItem(item:StockModel) {\n        stockList.forEachIndexed { index, element -\u003e\n          if (element.name == item.name){\n            stockList[index].changeValue = item.changeValue\n            stockList[index].currentValue = item.currentValue\n            notifyItemChanged(index)\n          }\n        }\n      }\n    \n      fun contains(item: StockModel):Boolean{\n        for (stock in stockList){\n          if (stock.name==item.name){\n            return true\n          }\n        }\n    \n        return false\n      }\n    \n      fun removeItem(name: String) {\n        val it = stockList.iterator()\n    \n        while (it.hasNext()) {\n          val value = it.next()\n          if (value.name == name){\n            it.remove()\n          }\n        }\n        \n        notifyDataSetChanged()\n      }\n    \n      inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val changePercent: TextView = itemView.findViewById(R.id.changeValue)\n        private val stockName: TextView = itemView.findViewById(R.id.stockName)\n        private val currentValue: TextView = itemView.findViewById(R.id.currentValue)\n    \n        fun bind(item: StockModel) = with(itemView) {\n          stockName.text = item.name\n          currentValue.text = item.currentValue.toString()\n          val fmt = \"%s%s\"\n    \n          changePercent.text = String.format(fmt, item.changeValue.toString(), \"%\")\n    \n          if (item.changeValue.toString().contains(\"-\")){\n            changePercent.background = ResourcesCompat.getDrawable(resources, android.R.color.holo_red_dark, null)\n          } else {\n            changePercent.background = ResourcesCompat.getDrawable(resources, android.R.color.holo_green_dark, null)\n          }\n        }\n      }\n    }\n```\n\nThis class manages the display of stock items on the list. It collects an initial list passed from the constructor and uses the size of that to know how many items we have. \n\nThe list can be updated with the `additem`, `updateItem`, and `removeItem` methods we created. The `list_row` layout we designed earlier is used in the `onCreateViewHolder` method. In the `bind` method of the `ViewHolder` class, apart from adding the values to the necessary text views, we apply a green or red background to the `changePercent` text view if it is a positive or negative value.\n\nFor uniformity, we will create a new class that will hold the list items we will use throughout the client app. Create a new class named `MyStockList` and paste this:\n\n``` kotlin\n    // File: app/src/main/java/com/example/stockexchangeapp/MyStockList.kt\n    // [...]\n    \n    class MyStockList{\n      companion object {\n        val stockList = ArrayList\u003cStockModel\u003e()\n        init {\n          stockList.add(StockModel(\"Apple\", 0.0, 0.0))\n          stockList.add(StockModel(\"Amazon\", 0.0, 0.0))\n        }\n      }\n    }\n```\n\nFor this demo, we are considering two stocks only. You can add more if you like. These stocks have a default value of 0.0 for change percent and value. \n\nNext, we will add some logic to our `MainActivity` file. Open the file and paste the following:\n\n``` kotlin\n    // file: app/src/main/java/com/example/stockexchangeapp/MainActivity.kt\n    // [...]\n    \n    import android.content.Intent\n    import android.content.SharedPreferences\n    import android.os.Bundle\n    import android.preference.PreferenceManager\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.DividerItemDecoration\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import android.view.Menu\n    import android.view.MenuItem\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import com.pusher.pushnotifications.PushNotifications\n    import kotlinx.android.synthetic.main.activity_main.*\n    import org.json.JSONObject\n    \n    class MainActivity : AppCompatActivity(), SharedPreferences.OnSharedPreferenceChangeListener {\n    \n      private val mAdapter = StockListAdapter(ArrayList())\n      private lateinit var sharedPreferences: SharedPreferences\n      private val options = PusherOptions().setCluster(\"PUSHER_CLUSTER\")\n      private val pusher = Pusher(\"PUSHER_KEY\", options)\n      private val channel = pusher.subscribe(\"stock-channel\")\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        setupPrefs()\n        pusher.connect()\n        setupRecyclerView()\n        setupPusherChannels()\n        setupPushNotifications()\n      }\n    \n    }\n```\n\nThis class implements the `SharedPreferences.OnSharedPreferenceChangeListener` interface because we will add settings functionality in the app and the callback will tell us when the settings have been updated. \n\nWe created instance variables for our Pusher Channel object and the list adapter. We subscribed to the `stock-channel` channel to listen for stock updates.\n\n\n\u003e Replace the Pusher holders with the keys on your Pusher Channel dashboard\n  \n\nOther methods called in the `onCreate` method include:\n\n\n1. `setupPrefs()` - this method initializes the `sharedPreferences` variable and initializes our settings with the default values. Add the method to the class:\n\n``` kotlin\n    // file: app/src/main/java/com/example/stockexchangeapp/MainActivity.kt\n    private fun setupPrefs() {\n      PreferenceManager.setDefaultValues(this, R.xml.preference, false)\n      sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this)\n    }\n```\n\n2. `setupRecyclerView()` - this method initializes our `RecyclerView`. Add the method to the class:\n\n``` kotlin\n    // file: app/src/main/java/com/example/stockexchangeapp/MainActivity.kt\n    private fun setupRecyclerView() {\n      with(recyclerView) {\n        layoutManager = LinearLayoutManager(this@MainActivity)\n        adapter = mAdapter\n        addItemDecoration(\n            DividerItemDecoration(recyclerView.context, DividerItemDecoration.VERTICAL)\n        )\n      }\n    }\n```\n\n3. `setupPusherChannels()` - this method loops through the stock list and looks for the stocks enabled in our settings page. If any of the stock is enabled, we subscribe to receive updates. Add the method to the class:\n\n``` kotlin\n    // file: app/src/main/java/com/example/stockexchangeapp/MainActivity.kt\n    private fun setupPusherChannels(){\n        val sharedPref = PreferenceManager.getDefaultSharedPreferences(this)\n        MyStockList.stockList.forEachIndexed { index, element -\u003e\n            val refKey = element.name.toLowerCase() + \"_preference\"\n            val refValue = sharedPref.getBoolean(refKey, false)\n            if (refValue) {\n                if (!mAdapter.contains(element)) {\n                    mAdapter.addItem(element)\n                    channel.bind(element.name) { channelName, eventName, data -\u003e\n                        val jsonObject = JSONObject(data)\n                        runOnUiThread {\n                            mAdapter.updateItem(\n                                StockModel(\n                                    eventName, \n                                    jsonObject.getDouble(\"currentValue\"), \n                                    jsonObject.getDouble(\"changePercent\")\n                                )\n                            )\n                        }\n                    }\n                }\n            } else {\n                mAdapter.removeItem(element.name)\n                channel.unbind(element.name){ _, _, _ -\u003e }\n            }\n        }\n    }\n```\n\n\n4. `setupPushNotifications()` - this method initializes Pusher Beams and listens to stock interests. Add the method to the class:\n\n``` kotlin\n    // file: app/src/main/java/com/example/stockexchangeapp/MainActivity.kt\n    private fun setupPushNotifications() {\n        PushNotifications.start(applicationContext, \"PUSHER_BEAMS_INSTANCEID\")\n        PushNotifications.subscribe(\"stocks\")\n    }\n```\n\n\u003e Replace the `PUSHER_BEAMS_INSTANCEID` placeholder with the Pusher Beams instance ID on your dashboard.\n  \n\nRemember we created a settings page earlier? Let’s inflate our menu and link it to the settings page. To do this, first, let’s first create a menu file in the menu resource folder. \n\nCreate a new menu file named `menu_main.xml` and paste this:\n\n``` xml\n    \u003c!-- File: app/src/main/res/menu/menu_main.xml --\u003e\n    \u003cmenu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\u003e\n    \n      \u003citem\n        android:id=\"@+id/settings\"\n        app:showAsAction=\"collapseActionView\"\n        android:title=\"@string/settings\" /\u003e\n    \n    \u003c/menu\u003e\n```\n\nNow, add these methods to your `MainActivity` file:\n\n``` kotlin\n    // file: app/src/main/java/com/example/stockexchangeapp/MainActivity.kt\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\n      menuInflater.inflate(R.menu.menu_main, menu)\n      return true\n    }\n    \n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n      return when (item.itemId) {\n        R.id.settings -\u003e {\n          startActivity(Intent(this@MainActivity,SettingsActivity::class.java))\n          true\n        }\n        else -\u003e super.onOptionsItemSelected(item)\n      }\n    }\n```\n\nThese methods add the menu to the toolbar of our main application screen and add an action when settings is selected. We then register and unregister the listener in the appropriate callback methods like so:\n\n``` kotlin\n    // file: app/src/main/java/com/example/stockexchangeapp/MainActivity.kt\n    \n    override fun onStart() {\n      super.onStart()\n      sharedPreferences.registerOnSharedPreferenceChangeListener(this)\n    }\n    \n    override fun onDestroy() {\n      super.onDestroy()\n      sharedPreferences.unregisterOnSharedPreferenceChangeListener(this)\n    }\n```\n\nFinally, let’s add the callback for the shared preference listener:\n\n``` kotlin\n    // file: app/src/main/java/com/example/stockexchangeapp/MainActivity.kt\n    override fun onSharedPreferenceChanged(sharedPref: SharedPreferences?, key: String?) {\n      setupPusherChannels()\n    }\n```\n\nWhen the settings change, we call the `setupPusherChannels` method again so it binds to the stock reports we enabled and unbind from those we disabled.\n\nTo complete our Pusher Beams setup, we need a service that will handle incoming notifications. Create a new class named `NotificationsMessagingService` and paste this:\n\n``` kotlin\n    // file: app/src/main/java/com/example/stockexchangeapp/NotificationsMessagingService.kt\n    // [...]\n    \n    import android.app.NotificationChannel\n    import android.app.NotificationManager\n    import android.app.PendingIntent\n    import android.content.Intent\n    import android.os.Build\n    import android.preference.PreferenceManager\n    import android.support.v4.app.NotificationCompat\n    import android.support.v4.app.NotificationManagerCompat\n    import android.util.Log\n    import com.google.firebase.messaging.RemoteMessage\n    import com.pusher.pushnotifications.fcm.MessagingService\n    \n    class NotificationsMessagingService : MessagingService() {\n    \n      override fun onMessageReceived(remoteMessage: RemoteMessage) {\n        val sharedPref = PreferenceManager.getDefaultSharedPreferences(this)\n        MyStockList.stockList.forEachIndexed { index, element -\u003e\n          val refKey = element.name.toLowerCase() + \"_preference\"\n          val refValue = sharedPref.getBoolean(refKey, false)\n          if (refValue \u0026\u0026 element.name == remoteMessage.notification!!.title!!){\n            setupNotifications(remoteMessage)\n          }\n        }\n      }\n    \n      private fun setupNotifications(remoteMessage: RemoteMessage) {\n        val notificationId = 10\n        val channelId  = \"stocks\"\n        lateinit var channel:NotificationChannel\n        val intent = Intent(this, MainActivity::class.java)\n        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\n        val pendingIntent = PendingIntent.getActivity(this, 0, intent, 0)\n        val mBuilder = NotificationCompat.Builder(this, channelId)\n            .setSmallIcon(R.mipmap.ic_launcher)\n            .setContentTitle(remoteMessage.notification!!.title!!)\n            .setContentText(remoteMessage.notification!!.body!!)\n            .setContentIntent(pendingIntent)\n            .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n            .setAutoCancel(true)\n    \n        if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.O) {\n          val notificationManager = applicationContext.getSystemService(NotificationManager::class.java)\n          val name = getString(R.string.channel_name)\n          val description = getString(R.string.channel_description)\n          val importance = NotificationManager.IMPORTANCE_DEFAULT\n          channel = NotificationChannel(\"stock-exchange\", name, importance)\n          channel.description = description\n          notificationManager!!.createNotificationChannel(channel)\n          notificationManager.notify(notificationId, mBuilder.build())\n    \n        } else {\n          val notificationManager =  NotificationManagerCompat.from(this)\n          notificationManager.notify(notificationId, mBuilder.build())\n        }\n      }\n    \n    }\n```\n\nIn the code above, when a new message comes, we check if we enabled price reporting for that stock. With this information, we know whether to display the notification for it or not.\n\nNext, open the `strings.xml` file and add the following to the file:\n\n``` xml\n    \u003c!-- File: app/src/main/res/values/strings.xml --\u003e\n    \u003cstring name=\"settings\"\u003eSettings\u003c/string\u003e\n    \u003cstring name=\"channel_name\"\u003eStock-Exchange\u003c/string\u003e\n    \u003cstring name=\"channel_description\"\u003eTo receive updates about stocks\u003c/string\u003e\n```\n\nNext, open the `AndroidManifest.xml` file and update as seen below:\n\n``` xml\n    \u003c!-- File: ./app/main/AndroidManifest.xml --\u003e\n    \n    \u003capplication\n      [...]\n      \u003e\n    \n      // [...]\n    \n      \u003cservice android:name=\".NotificationsMessagingService\"\u003e\n        \u003cintent-filter android:priority=\"1\"\u003e\n          \u003caction android:name=\"com.google.firebase.MESSAGING_EVENT\" /\u003e\n        \u003c/intent-filter\u003e\n      \u003c/service\u003e\n      \n    \u003c/application\u003e\n```\n\nIn the `AndroidManifest.xml` file, add the internet permission as seen below:\n\n``` xml\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"com.example.stockexchangeapp\"\u003e\n    \n      \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n    \n      [...]\n    \n    \u003c/manifest\u003e\n```\n\nWith this, our Android application is complete. Let us now build our backend server.\n\n\n## Building our backend server\n\nNow that we have completed building the application, let us build the backend of the application. We will build our backend with Node.js. \n\nCreate a new folder for your project. Navigate into the folder and create a new `package.json` file, then paste the following code:\n\n``` json\n    // File: ./package.json\n    {\n      \"name\": \"stockexchangeapp\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\"\n      },\n      \"keywords\": [],\n      \"author\": \"\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"@pusher/push-notifications-server\": \"^1.0.0\",\n        \"body-parser\": \"^1.18.3\",\n        \"express\": \"^4.16.3\",\n        \"pusher\": \"^2.1.2\"\n      }\n    }\n```\n\nThis file contains the meta data for the Node application. It also contains the list of dependencies the application relies on to function properly.\n\nNext, let’s create a configuration file that will hold all our sensitive keys. Create a file named `config.js` and paste this:\n\n``` javascript\n    // File: ./config.js\n    module.exports = {\n        appId: 'PUSHER_CHANNELS_APPID',\n        key: 'PUSHER_CHANNELS_KEY',\n        secret: 'PUSHER_CHANNELS_SECRET',\n        cluster: 'PUSHER_CHANNELS_CLUSTER',\n        secretKey: 'PUSHER_BEAMS_SECRET',\n        instanceId: 'PUSHER_BEAMS_INSTANCEID'\n    };\n```\n\n\u003e Replace the placeholders above with keys from your Pusher dashboard.\n\nFinally, let’s create another file named `index.js` and paste this:\n\n``` javascript\n    // File: ./index.js\n    \n    // import dependencies\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const path = require('path');\n    const Pusher = require('pusher');\n    const PushNotifications = require('@pusher/push-notifications-server');\n    \n    // initialise express\n    const app = express();\n    const pusher = new Pusher(require('./config.js'));\n    const pushNotifications = new PushNotifications(require('./config.js'))\n    \n    function handleStock(req, res, stock) {\n        let loopCount = 0;\n        \n        let sendToPusher = setInterval(() =\u003e {\n            loopCount++;\n            const changePercent = randomIntFromInterval(-10, 10)\n            const currentValue  = randomIntFromInterval(2000, 20000);        \n            const stockName = (stock === 'amazon') ? 'Amazon' : 'Apple'\n            const price = currentValue.toString()\n    \n            // Send to pusher\n            pusher.trigger('stock-channel', stockName, {currentValue, changePercent})\n    \n            pushNotifications.publish(\n                ['stocks'],{\n                fcm: {\n                  notification: {\n                    title: stockName,\n                    body: `The new value for ${stockName} is: ${price}`\n                  }\n                }\n              }).then((publishResponse) =\u003e {\n                console.log('Just published:', publishResponse.publishId);\n              });\n    \n            if (loopCount === 5) {\n              clearInterval(sendToPusher)\n            }\n        }, 2000);\n        \n        res.json({success: 200})\n    }\n    \n    app.get('/stock/amazon', (req, res) =\u003e handleStock(req, res, 'amazon'));\n    app.get('/stock/apple', (req, res) =\u003e handleStock(req, res, 'apple'));\n    \n    function randomIntFromInterval(min,max) {\n        return Math.floor(Math.random()*(max-min+1)+min);\n    }\n    \n    const port = 5000;\n    \n    app.listen(port, () =\u003e console.log(`Server is running on port ${port}`));\n```\n\nThis code above contains the endpoints for our application. We have two endpoints, one to handle all the processes for the `amazon` stock, and the other for the `apple` stock. We have the `handleStock` method that basically does all the work.\n\nIn the folder directory, run this to install the modules:\n\n```\n    $ npm install\n```\n\nThen run the following code to start the application:\n\n```\n    $ node index.js\n```\n\nNow, if you run your app, you should see something like this:\n\n![android-stocks-demo](//images.ctfassets.net/1es3ne0caaid/1zIUg74BUg8Wksm0mCyoic/a21c893a69dacd159cae24c1d9c6434c/android-stocks-demo.gif)\n\n\n## Conclusion\n\nIn this post, we have learned how to leverage the power of Pusher to create powerful engaging applications. \n\nYou can find the source code on [GitHub](https://github.com/neoighodaro/stock-app/). Feel free to clone and explore further.","metaTitle":"Create a stocks application for Android","metaDescription":"Use Kotlin and Node.js to create an Android stock tracking app, featuring realtime price updates and push notifications."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6I6zL6laFOeMuuWyQAGWqo","type":"Entry","createdAt":"2018-09-07T15:16:38.025Z","updatedAt":"2018-09-07T15:16:38.025Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live stocks application with push notifications for iOS","url":"stocks-push-notifications-ios","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro-articles/stocks-app-ios","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}}],"reviewDate":"2018-09-05","description":"This tutorial will show you how to build an iOS app that tracks stock prices. It features realtime updates and push notifications. You will build the frontend app in Swift, and the backend in Node.js.","prerequisite":"You will need Xcode, Cocoapods and Node.js installed on your machine. Some knowledge of iOS development will be helpful.","content":"In this article, we will see how you can build a stock market application using iOS and Swift. The prices will update in realtime as the changes to the prices occur. More importantly, though, you will be able to activate push notifications on certain stocks so you get notified when the prices of the stock changes.\n\nWhen we are done, we will have an application that functions like this:\n\n![ios-stocks-demo](//images.ctfassets.net/1es3ne0caaid/4oR4dRIkTCEMEK2iOMcoMQ/c7f74457e5e4529929a84f960ef0faaf/ios-stocks-demo.gif)\n\n## Prerequisites\n\nTo follow along in this tutorial you need the following things:\n\n- Xcode installed on your machine. Download [here](https://developer.apple.com/xcode).\n- Know your way around the Xcode IDE.\n- Basic knowledge of the Swift programming language.\n- Basic knowledge of JavaScript.\n- Node.js installed on your machine. Download [here](https://nodejs.org/en/download/).\n- Cocoapods installed on your machine. Install [here](https://guides.cocoapods.org/using/getting-started.html).\n- A Pusher account. Create one [here](https://pusher.com).\n\nLet’s get started.\n\n\n## Creating your iOS project\n\nThe first thing we need to do is create the project in Xcode. Launch Xcode and click **Create a new Xcode project**.\n\n![ios-stocks-welcome-xcode](//images.ctfassets.net/1es3ne0caaid/U17iFrhgC4GKEKaUqAI0i/158f59671b9340e854de759f1a1b495a/ios-stocks-welcome-xcode.png)\n\nFrom the next screen, select **Single View App \u003e Next** then give the project a name. Let’s name it something really creative, like **Stocks.**\n\n![ios-stocks-new-app](//images.ctfassets.net/1es3ne0caaid/5CEuleMypUI6MGKK6IeIo6/89863680adb2722700e0687d0cc0fd40/ios-stocks-new-app.png)\n\n### Installing dependencies using Cocoapods\n\nNow that we have our project set up, we need to add some external libraries to the project. These libraries will be used for various functions like push notifications and HTTP requests.\n\nFirst close Xcode. Next, create a new `Podfile` in the root of your project and paste the following code:\n\n```\n    # File: ./Podfile\n    platform :ios, '11.0'\n    \n    target 'Stocks' do\n      use_frameworks!\n      pod 'Alamofire', '~\u003e 4.7.3'\n      pod 'PusherSwift', '~\u003e 6.1.0'\n      pod 'PushNotifications', '~\u003e 1.0.1'\n      pod 'NotificationBannerSwift', '~\u003e 1.6.3'\n    end\n```\n\nAbove, we are using the `Podfile` to define the libraries our project will be depending on to work. Here are the libraries we have:\n\n\n- [Alamofire](https://github.com/Alamofire/Alamofire) - an HTTP networking library written in Swift.\n- [PusherSwift](https://github.com/pusher/pusher-websocket-swift) - the iOS library for Pusher.\n- [PushNotifications](https://github.com/pusher/push-notifications-swift) - Swift SDK for Pusher Beams.\n- [NotificationBannerSwift](https://github.com/Daltron/NotificationBanner) - easy way to display app notification banners in iOS apps.\n\nNow that we have defined the dependencies, let’s install them. Open your terminal and `cd` to the project root and run this command:\n\n```\n    $ pod update\n```\n\nThis will install all the dependencies listed in the `Podfile`. We are using the `update` command because we want the latest versions of the libraries, which may have changed since writing this article.\n\nWhen the installation is complete, we will have a new `Stocks.xcworkspace` file in the root of the project. Going forward, we will have to open our iOS project using this Xcode workspace file.\n\n\n## Building the iOS application\n\nThe first thing we want to do is consider how the entire service will work. We will build two applications. One will be the iOS application and the other will be a backend, which will be built with JavaScript (Node.js). \n\nIn this section, we will start with the iOS application. Open the `Stocks.xcworkspace` file in Xcode and let’s start building the iOS app.\n\n### Creating the settings class\n\nThe first thing we are going to do is create a notification settings class. This will be responsible for storing the notification settings for a device. When you subscribe for push notifications on a certain stock, we will store the setting using this class so that the application is aware of the stocks you turned on notifications for.\n\nCreate a new Swift class named `STNotificationSettings` and paste the following code:\n\n``` swift\n    // File: ./Stocks/STNotificationSettings.swift\n    import Foundation\n    \n    class STNotificationSettings: NSObject {\n        static let KEY = \"ST_NOTIFICATIONS\"\n        static let shared = STNotificationSettings()\n        \n        private override init() {}\n        \n        private var settings: [String: Bool] {\n            get {\n                let key = STNotificationSettings.KEY\n                \n                if let settings = UserDefaults.standard.object(forKey: key) as? [String: Bool] {\n                    return settings\n                }\n                \n                return [:]\n            }\n            set(newValue) {\n                var settings: [String: Bool] = [:]\n                \n                for (k, v) in newValue {\n                    settings[k.uppercased()] = v\n                }\n                \n                UserDefaults.standard.set(settings, forKey: STNotificationSettings.KEY)\n            }\n        }\n        \n        func enabled(for stock: String) -\u003e Bool {\n            if let stock = settings.first(where: { $0.key == stock.uppercased() }) {\n                return stock.value\n            }\n            \n            return false\n        }\n        \n        func save(stock: String, enabled: Bool) {\n            settings[stock.uppercased()] = enabled\n        }\n    }\n```\n\nIn the class above, we have a static property, `key`, that is just used as the key for the preference that will hold all our settings. This key will be used for lookup and storage of the settings in the iOS file system. \n\nWe also have a `shared` static property, which holds an instance of the class. We want this class to be instantiated once. This is also why we have made our `init` method private. \n\nNext, we have the `settings` property. This is a [computed property](https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID259) that provides a getter and a setter to retrieve and set other properties and values indirectly. The getter just retrieves the settings data from the filesystem, while the setter saves the settings to the filesystem.\n\nWe have two methods in the class, `enabled(for:)` and `save(stock:enabled:)`. The first one checks if push notifications are enabled for a stock, while the second saves the setting for a stock.\n\nThat’s all for the settings class.\n\n### Creating our view controller\n\nThe next thing we want to do is create the view controller. We will start by creating a view controller class, then we will create a view controller in the storyboard. We will then connect the class to the storyboard.\n\nCreate a new table view controller named `StocksTableViewController` and replace the contents with this:\n\n``` swift\n    // File: ./Stocks/StocksTableViewController.swift\n    import UIKit\n    import Alamofire\n    import PusherSwift\n    import PushNotifications\n    import NotificationBannerSwift\n    \n    class StocksTableViewController: UITableViewController {\n    }\n```\n\nWe will get back to this class, but for now, leave it and open the `Main.storyboard` file. In the storyboard, drag a new table view controller to the canvas. Next, drag the arrow from the old view controller that was in the storyboard to the new table view controller and then delete the old view controller.\n\n![ios-stocks-tableview](//images.ctfassets.net/1es3ne0caaid/1osRvlJkvaackYIc82seis/6b7fd1aca66a446c06137d1003d54574/ios-stocks-tableview.png)\n\nNext, open the **Identity Inspector** and set the custom class for the table view controller to `StocksTableViewController`. This will connect the class we created earlier to this table view controller we have on the storyboard.\n\n![ios-stocks-identity-inspector](//images.ctfassets.net/1es3ne0caaid/1DSUBk4DZamggSwwSIKI20/c2453f16afbd30b9c8a11568e019709e/ios-stocks-identity-inspector.png)\n\nFinally, set the reuse **Identifier** on the cell to ‘default’. We will not be using the cells that come with this table view controller, but we still need to set the identifier so Swift does not whine about it.\n\n![ios-stocks-identifier-default](//images.ctfassets.net/1es3ne0caaid/6G5pxC76us4IWKugGOKUUc/aa262d59135adedd281a2931dd8df26f/ios-stocks-identifier-default.png)\n\nNext, open the `StocksTableViewController` class and let's start adding logic to it. Update the class as seen below:\n\n``` swift\n    // [...]\n    \n    class StocksTableViewController: UITableViewController {\n        var stocks: [Stock] = []\n        \n        var pusher: Pusher!\n        let pushNotifications = PushNotifications.shared\n        let notificationSettings = STNotificationSettings.shared\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n        }\n        \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return stocks.count\n        }\n        \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"stock\", for: indexPath) as! StockCell\n            cell.stock = stocks[indexPath.row]\n            return cell\n        }\n    }\n```\n\nAbove we have a few properties we have defined:\n\n- `stocks` - this holds an array of `Stock` items. This is the data that will be displayed on each table cell. The `Stock` is a model we have not created but will later on.\n- `pusher` - this holds the `PusherSwift` library instance. We will use it to connect to Pusher and update the cells in realtime.\n- `pushNotifications` - this holds a singleton of the `PushNotifications` library. We will use this to subscribe and unsubscribe from [interests](https://docs.pusher.com/beams/concepts/interests).\n- `notificationSettings` - this holds a singleton of the `STNotificationSettings` class. We will use this to get the setting for each stock when necessary.\n\nThe methods we have defined above are standard with iOS development and should not need explanation. \n\nHowever, in the `tableView(_:cellForRowAt:)` method, we do something a little different. We get an instance of `StockCell`, which we have not created, and then assign a `Stock` item to the cell. Later on, we will see how we can use the `didSet` [property observer](https://medium.com/the-andela-way/property-observers-didset-and-willset-in-swift-4-c3730f26b1e9) to neatly populate the cell.\n\nIn the same class, add the following methods:\n\n``` swift\n    // [...]\n    \n    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        let cell = tableView.cellForRow(at: indexPath) as! StockCell\n        if let stock = cell.stock {\n            showNotificationSettingAlert(for: stock)\n        }\n    }\n    \n    private func showNotificationSettingAlert(for stock: Stock) {\n        let enabled = notificationSettings.enabled(for: stock.name)\n        let title = \"Notification settings\"\n        let message = \"Change the notification settings for this stock. What would you like to do?\"\n        \n        let alert = UIAlertController(title: title, message: message, preferredStyle: .actionSheet)\n        \n        let onTitle = enabled ? \"Keep on\" : \"Turn on notifications\"\n        alert.addAction(UIAlertAction(title: onTitle, style: .default) { [unowned self] action in\n            guard enabled == false else { return }\n            self.notificationSettings.save(stock: stock.name, enabled: true)\n            \n            let feedback = \"Notfications turned on for \\(stock.name)\"\n            StatusBarNotificationBanner(title: feedback, style: .success).show()\n    \n            try? self.pushNotifications.subscribe(interest: stock.name.uppercased())\n        })\n        \n        let offTitle = enabled ? \"Turn off notifications\" : \"Leave off\"\n        let offStyle: UIAlertActionStyle = enabled ? .destructive : .cancel\n        alert.addAction(UIAlertAction(title: offTitle, style: offStyle) { [unowned self] action in\n            guard enabled else { return }\n            self.notificationSettings.save(stock: stock.name, enabled: false)\n            \n            let feedback = \"Notfications turned off for \\(stock.name)\"\n            StatusBarNotificationBanner(title: feedback, style: .success).show()\n            \n            try? self.pushNotifications.unsubscribe(interest: stock.name.uppercased())\n        })\n        \n        present(alert, animated: true, completion: nil)\n    }\n    \n    // [...]\n```\n\nAbove, we added two new methods:\n\n\n- `tableView(_:didSelectRowAt:)` - this is a default table view controller method that is fired when a row is selected in the table. In this method, we get the row that was tapped, and then show an alert that we can use to configure the push notification setting for that stock.\n- `showNotificationSettingAlert` - this is invoked from the method above. It contains all the actual logic required to display the notification settings alert. The alert will look like this when the application is ready:\n\n![ios-stocks-alert-demo](//images.ctfassets.net/1es3ne0caaid/27JECNw00wuUqMo6m4eKiE/529b48f741ee6992a4db70f5f45a04b4/ios-stocks-alert-demo.gif)\n\nNext, let’s update the `viewDidLoad()` method. Replace the `viewDidLoad()` method with the following code:\n\n``` swift\n    // [...]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        fetchStockPrices()\n        \n        tableView.separatorInset.left = 0\n        tableView.backgroundColor = UIColor.black\n        \n        let customCell = UINib(nibName: \"StockCell\", bundle: nil)\n        tableView.register(customCell, forCellReuseIdentifier: \"stock\")\n        \n        pusher = Pusher(\n            key: AppConstants.PUSHER_APP_KEY,\n            options: PusherClientOptions(host: .cluster(AppConstants.PUSHER_APP_CLUSTER))\n        )\n        \n        let channel = pusher.subscribe(\"stocks\")\n        let _ = channel.bind(eventName: \"update\") { [unowned self] data in\n            if let data = data as? [[String: AnyObject]] {\n                if let encoded = try? JSONSerialization.data(withJSONObject: data, options: .prettyPrinted) {\n                    if let stocks = try? JSONDecoder().decode([Stock].self, from: encoded) {\n                        self.stocks = stocks\n                        self.tableView.reloadData()\n                    }\n                }\n            }\n        }\n        \n        pusher.connect()\n    }\n    \n    // [...]\n```\n\nAbove, we do a couple of things. First, we call the `fetchStockPrices()` method, which we will define later, to fetch all the stock prices from a backend API. Then we changed the background color of the table view to black. \n\nWe registered the non-existent custom cell, `StockCell`, which we referenced earlier in the article. We finally used the `pusher` instance to connect to a Pusher channel, `stock`, and also bind to the `update`  event on that channel. When the event is fired, we decode the data into the `stocks` property using Codable and reload the table to show the new changes.\n\n**Related:** [**Swift 4 decoding JSON using Codable**](https://blog.pusher.com/swift-4-decoding-json-codable/)\n\nBelow the `showNotificationSettingAlert(for:)` method in the same class, add the following method:\n\n``` swift\n    // [...]\n    \n    private func fetchStockPrices() {\n        Alamofire.request(AppConstants.ENDPOINT + \"/stocks\")\n            .validate()\n            .responseJSON { [unowned self] resp in\n                guard let data = resp.data, resp.result.isSuccess else {\n                    let msg = \"Error fetching prices\"\n                    return StatusBarNotificationBanner(title: msg, style: .danger).show()\n                }\n                \n                if let stocks = try? JSONDecoder().decode([Stock].self, from: data) {\n                    self.stocks = stocks\n                    self.tableView.reloadData()\n                }\n            }\n    }\n    \n    // [...]\n```\n\nThe method above was invoked in the `viewDidLoad()` method above. It fetches all the stocks from the API using the Alamofire library and then decodes the response to the `stocks` property using Codable. After this, the table view is reloaded to show the updated stocks data.\n\nThat’s all for this class. \n\nWe referenced a few non-existent classes in the `StocksTableViewController` though, let’s create them.\n\n### Creating supporting classes\n\nCreate a new `AppConstants` Swift file and paste the following code:\n\n``` swift\n    import Foundation\n    \n    struct AppConstants {\n        static let ENDPOINT = \"http://127.0.0.1:5000\" // Or use your ngrok HTTPS URL\n        static let PUSHER_APP_KEY = \"PASTE_PUSHER_APP_KEY_HERE\"\n        static let PUSHER_APP_CLUSTER = \"PASTE_PUSHER_APP_CLUSTER_HERE\"\n        static let BEAMS_INSTANCE_ID = \"PASTE_PUSHER_BEAMS_INSTANCE_ID_HERE\"\n    }\n```\n\nThe struct above serves as our configuration file. It allows us to define one true source of configuration values that we need for the application. At this point, you should create your [Pusher Channels](https://dashboard.pusher.com) and [Pusher Beams](https://dash.pusher.com) application if you haven’t already and paste the credentials above.\n\nNext, let’s define the `Stock` model. Create a new `Stock` Swift file and paste the following code:\n\n``` swift\n    import Foundation\n    \n    struct Stock: Codable {\n        let name: String\n        let price: Float\n        let percentage: String\n    }\n```\n\nAbove we have our `Stock` model which extends the Codable protocol. You can read more about it Codable [here](https://blog.pusher.com/swift-4-decoding-json-codable/).\n\n### Creating our custom cell\n\nWe referenced the `StockCell` several times above, so let’s create our custom cell now. We are creating this separately so it is easy to manage and everything is modular.\n\nFirst, create a new **Empty** view in Xcode as seen below:\n\n![ios-stocks-empty-view](//images.ctfassets.net/1es3ne0caaid/6DGSWQS7vi888q8sSGkww2/c49f48159ec3a4321def1d9e5e98bc9c/ios-stocks-empty-view.png)\n\nNext, drag a new table view cell into the empty canvas. We will be using this as our custom cell. Next, create a new Swift file named `StockCell` and paste the following code into it:\n\n``` swift\n    import UIKit\n    \n    class StockCell: UITableViewCell {\n    \n        var stock: Stock? {\n            didSet {\n                if let stock = stock {\n                    stockName.text = stock.name\n                    stockPrice.text = \"\\(stock.price)\"\n                    stockPercentageChange.text = \"\\(stock.percentage)\"\n                    percentageWrapper.backgroundColor = stock.percentage.first == \"+\"\n                        ? UIColor.green.withAlphaComponent(0.7)\n                        : UIColor.red\n                }\n            }\n        }\n        \n        @IBOutlet private weak var stockName: UILabel!\n        @IBOutlet private weak var stockPrice: UILabel!\n        @IBOutlet private weak var percentageWrapper: UIView!\n        @IBOutlet private weak var stockPercentageChange: UILabel!\n        \n        override func awakeFromNib() {\n            super.awakeFromNib()\n            percentageWrapper.layer.cornerRadius = 5\n        }\n    }\n```\n\nIn the cell class above, we have the `stock` property which holds a `Stock` model. The property has the `didSet` [property observer](https://medium.com/the-andela-way/property-observers-didset-and-willset-in-swift-4-c3730f26b1e9). So anytime the `stock` property is set, the code in the observer is run. In the observer, we set the private `@IBOutlet` properties. \n\nThis makes our code neat and organized because the `StockTableViewController` does not have to care about how the `stock` is handled, it just sets the `Stock` model to the `StockCell` and the cell handles the rest.\n\nWe have an `awakeFromNib()` method which is called when the cell is created. We use this to set a corner radius to the view holding the percentage change text.\n\nNext, open the `StockCell.xib` view, and set the **custom class** of the view to `StockCell`. Then design the cell as seen below:\n\n![ios-stocks-stockcell](//images.ctfassets.net/1es3ne0caaid/5gWw79b0HuYWem0GsoEMWG/3b1f763d173196e8349652a3d56c3f5e/ios-stocks-stockcell.png)\n\nWe have used constraints to make sure each item stays in place. You can decide to do the same if you wish.\n\nWhen you are done designing, connect the labels and views to your `StockCell` class using the **Assistant Editor**. This will establish the link between the items in the view and the `StockCell`'s `@IBOutlet`s.\n\n![ios-stocks-link-stockcell](//images.ctfassets.net/1es3ne0caaid/3uiTevTlcQa64A6sWKQug8/042265249736981fb7cb8cf7bf121012/ios-stocks-link-stockcell.png)\n\n\n### Updating the AppDelegate and turning on push notifications\n\nOpen the `AppDelegate` file and replace the contents with the following:\n\n``` swift\n    import UIKit\n    import PushNotifications\n    \n    @UIApplicationMain\n    class AppDelegate: UIResponder, UIApplicationDelegate {\n        var window: UIWindow?\n        let pushNotifications = PushNotifications.shared\n    \n        func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n            pushNotifications.start(instanceId: AppConstants.BEAMS_INSTANCE_ID)\n            pushNotifications.registerForRemoteNotifications()\n            return true\n        }\n        \n        func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n            pushNotifications.registerDeviceToken(deviceToken)\n        }\n    }\n```\n\nIn the `application(_:didFinishLaunchingWithOptions:)` method, we start the `PushNotifications` library and then we register the device for remote notifications. In the `application(_:didRegisterForRemoteNotificationsWithDeviceToken:)` method, we register the device token with Pusher Beams.\n\nNext, turn on the **Push Notification** capability for our application as seen below:\n\n![ios-stocks-enable-push-notifications](//images.ctfassets.net/1es3ne0caaid/9MNOUcCNWw8mMmCwAwyeA/b030fbae83c929289c2de367b754a07b/ios-stocks-enable-push-notifications.png)\n\nThis will add a `Stocks.entitlement` file in your project root.\n\nOne last thing we need to do before we are done with the iOS application is allowing the application load data from arbitrary URLs. By default, iOS does not allow this, and it should not. However, since we are going to be testing locally, we need this turned on temporarily. Open the `info.plist` file and update it as seen below:\n\n![ios-stocks-enable-app-transport](//images.ctfassets.net/1es3ne0caaid/61AnDSwfleaswuGGcGCuEI/1d19d8a391787c846841c2815b2ae656/ios-stocks-enable-app-transport.png)\n\nNow, our app is ready, but we still need to create the backend in order for it to work. Let’s do just that.\n\n\n## Building the backend API\n\nOur API will be built using Node.js. The backend will be responsible for providing the available stocks and also sending push notifications when there are changes. It will also push changes to Pusher Channels when there are changes in the stock price. We will be simulating the stock prices for instant results, but you can choose to use a live API.\n\nCreate a new directory for your backend application. Inside this project directory, create a new `package.json` file and paste the following code:\n\n``` json\n    {\n      \"name\": \"webapi\",\n      \"version\": \"1.0.0\",\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.3\",\n        \"express\": \"^4.16.3\",\n        \"pusher\": \"^2.1.3\",\n        \"@pusher/push-notifications-server\": \"1.0.0\"\n      }\n    }\n```\n\nNext, open a terminal window, `cd` to the application directory and run the command below:\n\n```\n    $ npm install\n```\n\nThis will install the dependencies in the `package.json` file. Next, create a new `config.js` file, and paste the following code:\n\n``` javascript\n    module.exports = {\n      appId: 'PASTE_PUSHER_CHANNELS_APPID',\n      key: 'PASTE_PUSHER_CHANNELS_KEY',\n      secret: 'PASTE_PUSHER_CHANNELS_SECRET',\n      cluster: 'PASTE_PUSHER_CHANNELS_CLUSTER',\n      secretKey: 'PASTE_PUSHER_BEAMS_SECRET',\n      instanceId: 'PASTE_PUSHER_BEAMS_INSTANCEID'\n    };\n```\n\nAbove, we have the configuration values for our Pusher instances. Replace the placeholders above with the keys from your Pusher dashboard.\n\nFinally, create a new file, `index.js` and paste the following code:\n\n``` javascript\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const path = require('path');\n    const Pusher = require('pusher');\n    const PushNotifications = require('@pusher/push-notifications-server');\n    \n    const app = express();\n    const pusher = new Pusher(require('./config.js'));\n    const pushNotifications = new PushNotifications(require('./config.js'));\n    \n    function generateRandomFloat(min, max) {\n      return parseFloat((Math.random() * (max - min) + min).toFixed(2));\n    }\n    \n    function getPercentageString(percentage) {\n      let operator = percentage \u003c 0 ? '' : '+';\n      return `${operator}${percentage}%`;\n    }\n    \n    function loadStockDataFor(stock) {\n      return {\n        name: stock,\n        price: generateRandomFloat(0, 1000),\n        percentage: getPercentageString(generateRandomFloat(-10, 10))\n      };\n    }\n    \n    app.get('/stocks', (req, res) =\u003e {\n      let stocks = [\n        loadStockDataFor('AAPL'),\n        loadStockDataFor('GOOG'),\n        loadStockDataFor('AMZN'),\n        loadStockDataFor('MSFT'),\n        loadStockDataFor('NFLX'),\n        loadStockDataFor('TSLA')\n      ];\n      \n      stocks.forEach(stock =\u003e {\n        let name = stock.name;\n        let percentage = stock.percentage.substr(1);\n        let verb = stock.percentage.charAt(0) === '+' ? 'up' : 'down';\n    \n        pushNotifications.publish([stock.name], {\n          apns: {\n            aps: {\n              alert: {\n                title: `Stock price change: \"${name}\"`,\n                body: `The stock price of \"${name}\" has gone ${verb} by ${percentage}.`\n              }\n            }\n          }\n        });\n      });\n      \n      pusher.trigger('stocks', 'update', stocks);\n    \n      res.json(stocks);\n    });\n    \n    app.listen(5000, () =\u003e console.log('Server is running'));\n```\n\nAbove, we have a simple Express application. We have three helper functions:\n\n\n- `generateRandomFloat` - generates a random float between two numbers.\n- `getPercentageString` - uses a passed number to generate a string that will be shown on the table cell, for example, +8.0%. \n- `loadStockDataFor` - loads random stock data for a stock passed to it.\n\nAfter the helpers, we have the `/stocks` route. In here we generate a list of stocks, and for each stock, we send a push notification about the change in price. The stocks name serves as the interest for each stock. This means that subscribing to the AAPL interest, for instance, will subscribe to receiving push notifications for the AAPL stock.\n\nNext, we trigger an event, `update`, on the `stocks` channel, so all other devices can pick up the recent changes. Lastly, we return the generated list of stocks and we add the code that starts the server on port 5000.\n\nTo get the server started, run the following command on your terminal:\n\n```\n    $ node index\n```\n\n![ios-stocks-node](//images.ctfassets.net/1es3ne0caaid/775RfIfVHqoMg88wgKYcqG/0a0871547d6c395efa9950916d08d22f/ios-stocks-node.png)\n\n## Testing the application\n\nNow that we have built the backend and started the Node.js server, you can now run the iOS application. Your stocks will be displayed on the screen. However, if you want to test push notifications, you will need a real iOS device, and you will need to follow the following instructions.\n\nFirst, you will need to install [ngrok](https://ngrok.com/). This tool is used to expose local running web servers to the internet. Follow [the instructions](https://ngrok.com/download) on their website to download and install ngrok.\n\nOnce you have it installed, run the following command in another terminal window:\n\n```\n    $ ngrok http 8000\n```\n\n![ios-stocks-ngrok](//images.ctfassets.net/1es3ne0caaid/5bh8fTsXxuOQgyIgkCUsm0/87caf9152990a1c6cbc56288122fb6f5/ios-stocks-ngrok.png)\n\n\u003e Make sure your Node.js server is still running before executing the command above.\n\nNow we have a **Forwarding** URL we can use in our application. Copy the HTTPS forwarding URL and replace the `ENDPOINT` value in `AppConstants.swift` with the URL.\n\nNow, run the application on your device. Once it has loaded, tap on a stock and turn on notification for that stock then minimize the application and visit http://localhost:5000/stocks on your web browser. This will simulate a change in the stock prices and you should get a push notification for the stock you subscribed to.\n\n![ios-stocks-demo](//images.ctfassets.net/1es3ne0caaid/4oR4dRIkTCEMEK2iOMcoMQ/c7f74457e5e4529929a84f960ef0faaf/ios-stocks-demo.gif)\n\n\n## Conclusion\n\nIn this article, we have been able to create a stocks application with push notification using Pusher Channels and Pusher Beams.\n\nThe source code to the entire application is available on [GitHub](https://github.com/neoighodaro-articles/stocks-app-ios). ","metaTitle":"Create a stocks application with push notifications for iOS","metaDescription":"Use Swift and Node.js to build a realtime stock price tracker. The app features live updates and push notifications."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7wyCFxpsoEwUKO8uGqm4IC","type":"Entry","createdAt":"2018-09-05T19:16:08.892Z","updatedAt":"2018-09-05T19:16:08.892Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live photo feed using React and Cloudinary","url":"live-feed-react-cloudinary","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/realtime-photo-feed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Od9rZziIoMG4yaQ4EAeok","type":"Entry","createdAt":"2018-02-13T11:31:10.435Z","updatedAt":"2018-02-26T12:31:10.730Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":16,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live UX","url":"live-ux","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2018-09-05","description":"In this short tutorial, create a live photo feed using Node, React and Cloudinary. Upload and publish photos in realtime.","prerequisite":"You will need Node 6+ and npm installed on your machine. A basic knowledge of JavaScript (ES6) and React will be helpful.","content":"In this tutorial, we’ll go through how to build a photo feed with React and Cloudinary, while providing realtime updates to the feed using Pusher Channels. You can find the entire source code of the application in this [GitHub repository](https://github.com/ayoisaiah/realtime-photo-feed).\n\n## Prerequisites\n\nTo follow along, a basic knowledge of JavaScript (ES6) and React is required. You also need to have the following installed on your machine:\n\n- [Node.js](https://nodejs.org/en/) (v6 and above)\n- [npm](https://www.npmjs.com/)\n\n## Set up the server\n\nLet’s set up a simple Node server for the purpose of uploading images to Cloudinary and triggering realtime updates with Pusher.\n\nThe first step is to create a new empty directory and run `npm init -y` from within it. Next, install all the dependencies that we need for this project by running the command below:\n\n```\n    npm install express nedb cors body-parser connect-multiparty pusher cloudinary dotenv\n```\n\nWait for the installation to complete, then create a file named `server.js` in the root of your project directory and populate the file with the following contents:\n\n``` javascript\n    // server.js\n    \n    // import dependencies\n    require('dotenv').config({ path: 'variables.env' });\n    const express = require('express');\n    const multipart = require('connect-multiparty');\n    const bodyParser = require('body-parser');\n    const cloudinary = require('cloudinary');\n    const cors = require('cors');\n    const Datastore = require('nedb');\n    const Pusher = require('pusher');\n    \n    // Create an express app\n    const app = express();\n    // Create a database\n    const db = new Datastore();\n    \n    // Configure middlewares\n    app.use(cors());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(bodyParser.json());\n    \n    // Setup multiparty\n    const multipartMiddleware = multipart();\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nHere, we’ve imported the dependencies into our entry file. Here’s an explanation of what they all do:\n\n\n- [express](https://expressjs.com): A minimal and flexible Node.js server.\n- [nedb](https://github.com/louischatriot/nedb): In memory database for Node.js.\n- [connect-multiparty](https://github.com/expressjs/connect-multiparty): Express middleware for parsing uploaded files.\n- [body-parser](https://github.com/expressjs/body-parser): Express middleware for parsing incoming request bodies.\n- [dotenv](https://www.npmjs.com/package/dotenv): Loads environmental variables from `.env` file into `process.env`.\n- [pusher](https://pusher.com/): Server SDK for Pusher Channels.\n- [cloudinary](http://cloudinary.com/): Cloudinary server SDK.\n\nCreate a `variables.env` file in the root of your project and add a `PORT` variable therein:\n\n```\n    // variables.env\n    \n    PORT:5000\n```\n\nHard-coding credentials in your code is a bad practice so we’ve set up `dotenv` to load the app’s credentials from `variables.env` and make them available on `process.env`.\n\n\n## Set up Pusher\n\nHead over to the Pusher website and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). Select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app. Once your app is created, retrieve your credentials from the API Keys tab, then add the following to your `variables.env` file:\n\n```\n    // variables.env\n    \n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\nNext, initialize the Pusher SDK within `server.js`:\n\n``` javascript\n    // server.js\n    ...\n    const db = new Datastore();\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    ...\n```\n\n## Set up Cloudinary\n\nVisit the Cloudinary website and [sign up for a free account](https://cloudinary.com/signup). Once your account is confirmed, retrieve your credentials from the dashboard, then add the following to your `variables.env` file:\n\n![react-cloudinary-credentials](//images.ctfassets.net/1es3ne0caaid/1SHB7e0OMQQsyq686Go8Q6/a42812880e0dd610159c324b1fe56f51/react-cloudinary-credentials.png)\n\n```\n    // variables.env\n    \n    CLOUDINARY_CLOUD_NAME=\u003cyour cloud name\u003e\n    CLOUDINARY_API_KEY=\u003cyour api key\u003e\n    CLOUDINARY_API_SECRET=\u003cyour api secret\u003e\n```\n\nNext, initialize the Cloudinary SDK within `server.js` under the `pusher` variable:\n\n``` javascript\n    // server.js\n    \n    cloudinary.config({\n      cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n      api_key: process.env.CLOUDINARY_API_KEY,\n      api_secret: process.env.CLOUDINARY_API_SECRET,\n    });\n```\n\n## Create routes\n\nWe are going to create two routes for our application: the first one will serve all gallery images, while the second one handles the addition of a new image to the database.\n\nHere’s the one that handles sending all images to the client. Add this above the `port` variable:\n\n``` javascript\n    // server.js\n    \n    app.get('/', (req, res) =\u003e {\n      db.find({}, (err, data) =\u003e {\n        if (err) return res.status(500).send(err);\n        res.json(data);\n      });\n    });\n```\n\nWhen this endpoint is hit, a JSON representation of all images that exist in the database will be sent to the client, except if an error is encountered, in which case a 500 server error will be sent instead.\n\nNext, let’s add the route that adds new images sent from the client to the database.\n\n``` javascript\n    // server.js\n    \n    app.post('/upload', multipartMiddleware, (req, res) =\u003e {\n      // Upload image\n      cloudinary.v2.uploader.upload(req.files.image.path, {}, function(\n        error,\n        result\n      ) {\n        if (error) {\n          return res.status(500).send(error);\n        }\n        // Save image to database\n        db.insert(Object.assign({}, result, req.body), (err, newDoc) =\u003e {\n          if (err) {\n            return res.status(500).send(err);\n          }\n          //\n          pusher.trigger('gallery', 'upload', {\n            image: newDoc,\n          });\n          res.status(200).json(newDoc);\n        });\n      });\n    });\n```\n\nHere, the image is uploaded to Cloudinary and, on successful upload, a database entry is created for the image and a new `upload` event is emitted for the `gallery` channel along with the payload of the newly created item.\n\nThe code for the server is now complete. You can start it by running `node server.js` in your terminal.\n\n\n## Set up React app\n\nLet's bootstrap our project using the create-react-app which allows us to quickly get a React application up and running. Open a new terminal window, and run the following command to install `create-react-app` on your machine:\n\n```\n    npm install -g create-react-app\n```\n\nOnce the installation process is done, you can run the command below to setup your react application:\n\n```\n    create-react-app client\n```\n\nThis command will create a new folder called `client` in the root of your project directory, and install all the dependencies needed to build and run the React application.\n\nNext, `cd` into the newly created directory and install the other dependencies which we’ll be needing for our app’s frontend:\n\n```\n    npm install pusher-js axios react-spinkit\n```\n\n- [pusher-js](https://pusher.com): Client SDK for Pusher.\n- [axios](https://github.com/axios/axios): Promise based HTTP client for the browser and Node.\n- [react-spinkit](https://www.npmjs.com/package/react-spinkit): Loading indicator component.\n\nFinally, start the development server by running `yarn start` from within the root of the `client` directory.\n\n## Add the styles for the app\n\nWithin the `client` directory, locate `src/App.css` and change its contents to look like this:\n\n``` css\n    // src/App.css\n    \n    body {\n      font-family: 'Roboto', sans-serif;\n    }\n    \n    .App {\n      margin-top: 40px;\n    }\n    \n    .App-title {\n      text-align: center;\n    }\n    \n    img {\n      max-width: 100%;\n    }\n    \n    form {\n      text-align: center;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      font-size: 18px;\n    }\n    \n    .label {\n      display: block;\n      margin-bottom: 20px;\n      font-size: 20px;\n    }\n    \n    input[type=\"file\"] {\n      margin-bottom: 20px;\n    }\n    \n    button {\n      border: 1px solid #353b6e;\n      border-radius: 4px;\n      color: #f7f7f7;\n      cursor: pointer;\n      font-size: 18px;\n      padding: 10px 20px;\n      background-color: rebeccapurple;\n    }\n    \n    .loading-indicator {\n      display: flex;\n      justify-content: center;\n      margin-top: 30px;\n    }\n    \n    .gallery {\n      display: grid;\n      grid-template-columns: repeat(3, 330px);\n      grid-template-rows: 320px 320px 320px;\n      grid-gap: 20px;\n      width: 100%;\n      max-width: 1000px;\n      margin: 0 auto;\n      padding-top: 40px;\n    }\n    \n    .photo {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n      background-color: #d5d5d5;\n      box-shadow: 0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.2),0 1px 5px 0 rgba(0,0,0,.12);\n    }\n```\n\n## Application logic\n\nOpen up `src/App.js` and change its contents to look like this:\n\n``` javascript\n    // src/App.js\n    \n    import React, { Component } from 'react';\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    import Spinner from 'react-spinkit';\n    import './App.css';\n    \n    class App extends Component {\n      constructor() {\n        super();\n        this.state = {\n          images: [],\n          selectedFile: null,\n          loading: false,\n        };\n      }\n    \n      componentDidMount() {\n        this.setState({\n          loading: true,\n        });\n    \n        axios.get('http://localhost:5000').then(({ data }) =\u003e {\n          this.setState({\n            images: [...data, ...this.state.images],\n            loading: false,\n          });\n        });\n    \n        const pusher = new Pusher('\u003cyour app key\u003e', {\n          cluster: '\u003cyour app cluster\u003e',\n          encrypted: true,\n        });\n    \n        const channel = pusher.subscribe('gallery');\n        channel.bind('upload', data =\u003e {\n          this.setState({\n            images: [data.image, ...this.state.images],\n          });\n        });\n      }\n    \n      fileChangedHandler = event =\u003e {\n        const file = event.target.files[0];\n        this.setState({ selectedFile: file });\n      };\n    \n      uploadImage = event =\u003e {\n        event.preventDefault();\n    \n        if (!this.state.selectedFile) return;\n    \n        this.setState({\n          loading: true,\n        });\n    \n        const formData = new FormData();\n        formData.append(\n          'image',\n          this.state.selectedFile,\n          this.state.selectedFile.name\n        );\n    \n        axios.post('http://localhost:5000/upload', formData).then(({ data }) =\u003e {\n          this.setState({\n            loading: false,\n          });\n        });\n      };\n    \n      render() {\n        const image = (url, index) =\u003e (\n          \u003cimg alt=\"\" className=\"photo\" key={`image-${index} }`} src={url} /\u003e\n        );\n    \n        const images = this.state.images.map((e, i) =\u003e image(e.secure_url, i));\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003ch1 className=\"App-title\"\u003eLive Photo Feed\u003c/h1\u003e\n    \n            \u003cform method=\"post\" onSubmit={this.uploadImage}\u003e\n              \u003clabel className=\"label\" htmlFor=\"gallery-image\"\u003e\n                Choose an image to upload\n              \u003c/label\u003e\n              \u003cinput\n                type=\"file\"\n                onChange={this.fileChangedHandler}\n                id=\"gallery-image\"\n                accept=\".jpg, .jpeg, .png\"\n              /\u003e\n              \u003cbutton type=\"submit\"\u003eUpload!\u003c/button\u003e\n            \u003c/form\u003e\n    \n            \u003cdiv className=\"loading-indicator\"\u003e\n              {this.state.loading ? \u003cSpinner name=\"spinner\" /\u003e : ''}\n            \u003c/div\u003e\n    \n            \u003cdiv className=\"gallery\"\u003e{images}\u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nI know that’s a lot of code to process in one go, so let me break it down a bit.\n\nThe `state` of our application is initialized with three values: `images` is an array that will contain all images in our photo feed, while `selectedFile` represents the currently selected file in the file input. `loading` is a Boolean  property that acts as a flag to indicate whether the loading component, `Spinner`, should be rendered on the page or not.\n\nWhen the user selects a new image, the `fileChangedHandler()` function is invoked, which causes `selectedFile` to point to the selected image. The **Upload** button triggers a form submission, causing `uploadImage()` to run. This function basically sends the image to the server and through an `axios` post request.\n\nIn the `componetDidMount()` lifecycle method, we try  to fetch all the images that exist in the database (if any) so that on page refresh, the feed is populated with existing images.\n\nThe Pusher client library provides a handy  `bind` function that allows us to latch on to events emitted by the server so that we can update the application state. You need to update the `pusher` variable with your app key and cluster before running the code. Here, we’re listening for the `upload` event on the `gallery` channel. Once the `upload` event is triggered, our application is updated with the new image as shown below:\n\n![react-cloudinary-demo](//images.ctfassets.net/1es3ne0caaid/4tWSUnHBt6OI64cOMAQQeC/e3ef4e5b1721a278c65d948956136e7b/react-cloudinary-demo.gif)\n\n## Conclusion\n\nYou have now learned how easy it is to create a live feed and update several clients with incoming updates in realtime with Pusher. \n\nThanks for reading! Remember that you can find the source code of this app in this [GitHub repository.](https://github.com/ayoisaiah/realtime-photo-feed)","metaTitle":"Build a live photo feed using React and Cloudinary","metaDescription":"Use Node, React and Cloudinary to create a live photo feed. Upload and publish photos in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5xjXgZhNZKOgmyeOiAy0qa","type":"Entry","createdAt":"2018-08-28T17:25:17.268Z","updatedAt":"2020-06-19T13:47:39.290Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an emotion recognition application with Tensorflow.js","url":"emotion-recognition-tensorflow","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/realtime-emotion-recognizer","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kaOeiCgZqsKQowY0KAQIY","type":"Entry","createdAt":"2018-08-08T16:33:51.998Z","updatedAt":"2018-08-08T16:33:51.998Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Machine Learning","url":"machine-learning","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-08-28","description":"Build a simple web app in Vue that takes input from a webcam and can learn to recognize emotions. Implement machine learning with Tensorflow in the browser, and create a basic Node backend to support realtime functionality.","prerequisite":"You will need Node 8.9+ and Yarn installed on your machine.","content":"In this tutorial, we will examine at how to use Tensorflow.js and Pusher to build a realtime emotion recognition application that accepts an face image of a user, predicts their facial emotion and then updates a dashboard with the detected emotions in realtime. A practical use case of this application will be a company getting realtime feedback from users when they roll out incremental updates to their application.\n\nWith the rapid increase in computing power and the ability of machines to make sense of what is going on around them, users now interact with intelligent systems in a lot of their daily interactions. From Spotify’s awesomely accurate discover weekly playlists to Google Photos being able to show you all pictures of “Gaby” in your gallery after identifying her in one picture, companies are now interested in ways they can leverage this “silver bullet” in their service delivery.\n\n## What we’ll build\n\n![tensorflow-feedback-demo](//images.ctfassets.net/1es3ne0caaid/3oVdBTMeGIUAMyusiE4KYy/c76127672a55ba31f54075be8862d99e/tensorflow-feedback-demo.gif)\n\n\nThe best part of this is that recognizing a users emotion happens right on the client side and the user’s image is never sent to the over to the server. All that is sent to the server is the emotion detected. This means, your users never have to be worry about you storing their images on your server. Let’s get to the good stuff now!\n\n\n## Prerequisites\n\n- Node installed on your machine (version 8.9 or above)\n- Yarn installed on your machine\n- Basic knowledge of Javascript\n\n\n## What is Tensorflow.js\n\nTensorflow.js is a JavaScript library that allows developers train and use machine learning models in the browser. This really changes the game because it means that users no longer need “super” machines to be able to run our models. Once they have a browser, they will be able to get stuff done. This also allows for developer who are more familiar with JavaScript get into building and using machine learning models without the need to learn a new programming language.\n\n## Getting started\n\nTo create the build the interface of our application, we are going to use Vue.js. Vue.js is a web framework used to build interactive interfaces with JavaScript. To get started, install the Vue CLI using the command:\n\n```\n    yarn global add @vue/cli\n```\n\nAfterwards, create a new Vue project using the command:\n\n```\n    vue create realtime-feedback\n```\n\nFollow the prompt to create the application using the using the Vue Router preset. This creates a starter Vue.js project which we will then update to fit our application.\n\n![tensorflow-feedback-vue-project](//images.ctfassets.net/1es3ne0caaid/1LGTtSFV8YcGOSwqQGcwyM/22c23ed092efdbcb80ec217066bfc683/tensorflow-feedback-vue-project.png)\n\nInstall the other JavaScript libraries you are going to use:\n\n```\n    yarn add axios @tensorflow/tfjs @tensorflow-models/knn-classifier @tensorflow-models/mobilenet \n```\n\nTo get users’ images and feed them to our model, we are going to make use of the a webcam class. Fetch the file from [here](https://github.com/oreHGA/realtime-emotion-recognizer/blob/master/src/assets/webcam.js) and add it to your `realtime-feedback/src/assets`  directory. Afterwards, go ahead and ahead and get the Pusher logo from [here](https://github.com/oreHGA/realtime-emotion-recognizer/blob/master/src/assets/pusher.jpg) and place it in the `realtime-feedback/src/assets` directory.\n\n### Creating the homepage component\n\nIn the `src/components` folder, create component titled `Camera`. Components allow us to split the user interface of application into reusable parts. Add the following markup to the new component:\n\n``` html\n    \u003c!-- src/components/Camera.vue --\u003e\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n          \u003cvideo autoplay playsinline muted id=\"webcam\" width=\"250\" height=\"250\"\u003e\u003c/video\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    [...]\n```\n\nAdd the following code below the closing template tag:\n\n``` javascript\n    // src/components/Camera.vue \n    \n    [...]\n    \u003cscript\u003e\n    import {Webcam} from '../assets/webcam'\n    \n    export default {\n      name: \"Camera\",\n      data: function(){\n          return {\n              webcam: null,\n          }\n      },\n      mounted: function(){\n          this.loadWebcam();\n      },\n      methods: {\n          loadWebcam: function(){\n              this.webcam = new Webcam(document.getElementById('webcam'));\n              this.webcam.setup();\n          }\n      }\n    };\n    \u003c/script\u003e\n```\n\nWhen this component is mounted, a webcam is loaded and the user can now actively see what is going on from their camera.\n\n\n## Application views\n\nOur application will have two basic views:\n\n- Homepage, where users will interact with and take pictures of themselves.\n- Dashboard, where you can see a summary of the emotions recognized in realtime.\n\n### Configuring the router\n\nTo allow for navigation between pages, we are going to make use of the Vue Router in our application. Go ahead and edit your `router.js` file to specify what pages to show on different routes:\n\n``` javascript\n    // src/router.js\n    import Vue from \"vue\";\n    import Router from \"vue-router\";\n    import Home from \"./views/Home.vue\";\n    import Dashboard from \"./views/Dashboard.vue\";\n    \n    Vue.use(Router);\n    \n    export default new Router({\n      mode: \"history\",\n      base: process.env.BASE_URL,\n      routes: [\n        {\n          path: \"/\",\n          name: \"home\",\n          component: Home\n        },\n        {\n          path: \"/dashboard\",\n          name: \"dashboard\",\n          component: Dashboard\n        }\n      ]\n    });\n```\n\nAlso, you need to ensure that you include the router in your `src/main.js` file like this:\n\n``` javascript\n    // src/main.js\n    import Vue from \"vue\";\n    import App from \"./App.vue\";\n    import router from \"./router\";\n    \n    Vue.config.productionTip = false;\n    \n    new Vue({\n      router,\n      render: h =\u003e h(App)\n    }).$mount(\"#app\");\n```\n\n## Creating the homepage\n\nOn the homepage, there are two basic modes, `train` mode and `test`  mode. To give us the ability to successfully recognize emotions, we are going to make use of a pretrained [MobileNet](https://github.com/tensorflow/tfjs-models/tree/master/mobilenet) and pass the result from the inference to train KNNClassifier for our different moods. In simpler terms, MobileNet is responsible for getting activations from the image and the KNNClassifier accepts the activation for a particular image and predicts which class the image activation belongs to by selecting the class the activation is closest to.\n\n\n\u003e More explanation on how predictions are generated will be shared later on in the article.\n\nCreate a new view in the `src/views/` directory of the project:\n\n```\n    touch src/views/Home.vue\n```\n\nThe homepage has the following template:\n\n``` html\n    \u003c!-- src/views/Home.vue --\u003e \n    \u003ctemplate\u003e\n      \u003cdiv class=\"train\"\u003e\n        \u003ctemplate v-if=\"mode == 'train'\"\u003e\n            \u003ch1\u003eTake pictures that define your different moods in the dropdown\u003c/h1\u003e\n        \u003c/template\u003e\n        \u003ctemplate v-else\u003e\n            \u003ch1\u003eTake a picture to let us know how you feel about our service\u003c/h1\u003e\n        \u003c/template\u003e\n        \u003cselect id=\"use_case\" v-on:change=\"changeOption()\"\u003e\n            \u003coption value=\"train\"\u003eTrain\u003c/option\u003e\n            \u003coption value=\"test\"\u003eTest\u003c/option\u003e\n        \u003c/select\u003e\n        \u003cCamera\u003e\u003c/Camera\u003e\n        \u003ctemplate v-if=\"mode == 'train'\"\u003e\n            \u003cselect id=\"emotion_options\"\u003e\n                \u003ctemplate v-for=\"(emotion, index) in emotions\"\u003e\n                    \u003coption :key=\"index\" :value=\"index\"\u003e{{emotion}}\u003c/option\u003e\n                \u003c/template\u003e\n            \u003c/select\u003e\n            \u003cbutton v-on:click=\"trainModel()\"\u003eTrain Model\u003c/button\u003e\n        \u003c/template\u003e\n        \u003ctemplate v-else\u003e\n            \u003cbutton v-on:click=\"getEmotion()\"\u003eGet Emotion\u003c/button\u003e\n        \u003c/template\u003e\n        \u003ch1\u003e{{ detected_e }}\u003c/h1\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    [...]\n```\n\nIf the selected mode is `train` mode, the camera module is displayed and a dropdown is presented for the user to train the different available classes. \n\n\n\u003e **Note**: In a real-world application, you’ll likely want to train your model before porting it to the web\n\nIf the `test` mode is selected, the user is then shown a button prompting them to take a picture of their face and allow the model predict their emotion.\n\nNow, let’s take a look at the rest of the `Home`  component and see how it all works:\n\n``` javascript\n    \u003c!-- src/view/Home.vue --\u003e\n    [...]\n    \n    \u003cscript\u003e\n    // @ is an alias to /src\n    import Camera from \"@/components/Camera.vue\";\n    import * as tf from '@tensorflow/tfjs';\n    import * as mobilenetModule from '@tensorflow-models/mobilenet';\n    import * as knnClassifier from '@tensorflow-models/knn-classifier';\n    import axios from 'axios';\n    \n    [...]\n```\n\nFirst import the `Camera` component, the Tensorflow.js library, the MobileNet model and the KNNClassifier. There are also other models available open source on the [Tensorflow Github](https://github.com/tensorflow/tfjs-models) repository.\n\nAfterwards, go ahead and then specify the data to be rendered to the DOM. Notice that there’s an array of the `emotions` that we train the model to recognize and predict. The other data properties include:\n\n- `classifer` - which will represent the KNNClassifier.\n- `mobilenet` - which will represents the loaded MobileNet model.\n- `class` - which represents the class to train. Used in `train` mode.\n- `detected_e` - which represents the emotion that model predicts. Used in `test` mode.\n- `mode` - which represents what mode is in use.\n\n``` javascript\n    // src/views/Home.vue\n    [...]\n    export default {\n      name: \"Home\"\n      components: {\n        Camera\n      },\n      data: function(){\n          return {\n              emotions: ['angry','neutral', 'happy'],\n              classifier: null,\n              mobilenet: null,\n              class: null,\n              detected_e: null,\n              mode: 'train',\n          }\n      },\n      \n    [...]\n```\n\nLet’s also add the methods to the `Home` component:\n\n``` javascript\n    // src/view/Home.vue\n    \n    [...]\n      mounted: function(){\n          this.init();\n      },\n      methods: {\n          async init(){\n            // load the load mobilenet and create a KnnClassifier\n            this.classifier = knnClassifier.create();\n            this.mobilenet = await mobilenetModule.load();\n          },\n          trainModel(){\n            let selected = document.getElementById(\"emotion_options\");\n            this.class = selected.options[selected.selectedIndex].value;\n            this.addExample();\n          },\n          addExample(){\n            const img= tf.fromPixels(this.$children[0].webcam.webcamElement);\n            const logits = this.mobilenet.infer(img, 'conv_preds');\n            this.classifier.addExample(logits, parseInt(this.class));\n          },\n    \n    [...]\n```\n\nWhen the component mounts on the DOM, the `init()` function is called. This creates an empty KNN Classifier and also loads the pretrained MobileNet module. When the `trainModel()` is called, we fetch the image from the camera element and then feed it to the MobileNet model for inference. This returns intermediate activations (logits) as Tensorflow tensors and then add it as an example for the selected class in the classifier. What have just done is also known as transfer learning. \n\nLet’s take a look at the methods that are called when in the `test` mode. When the `getEmotion()` method is called, we fetch the image and also obtain logits. Then we call the `predictClass` method of the classifier to fetch the class the image belongs to.\n\nAfter the emotion is obtained, we also call the `registerEmotion()` that sends the detected emotion over to a backend server.\n\n\n\u003e Notice here that the users image is never sent anywhere. Only the predicted emotion.\n\n\n``` javascript\n    // src/view/Home.vue\n    [...]\n          async getEmotion(){\n            const img = tf.fromPixels(this.$children[0].webcam.webcamElement);\n            const logits = this.mobilenet.infer(img, 'conv_preds');\n            const pred = await this.classifier.predictClass(logits);\n            this.detected_e = this.emotions[pred.classIndex];\n            this.registerEmotion();\n          },\n          changeOption(){\n              const selected = document.getElementById(\"use_case\");\n              this.mode = selected.options[selected.selectedIndex].value;\n          },\n          registerEmotion(){\n              axios.post('http://localhost:3128/callback', {\n                  'emotion': this.detected_e\n              }).then( () =\u003e {\n                  alert('Thanks for letting us know how you feel');\n              });\n          }\n        }\n    };\n    \u003c/script\u003e\n```\n\n## Adding realtime functionality with Pusher\n\n### Building the backend server\n\nLet’s see how to create the backend server that triggers events in realtime. Create a `server` folder inside your `realtime-feedback` folder and initialize an empty node project:\n\n```\n    mkdir server \u0026\u0026 cd server\n    yarn init\n```\n\nInstall the necessary modules for the backend server:\n\n```\n    yarn add body-parser cors dotenv express pusher\n```\n\nWe need a way to be able to trigger realtime events in our application when a new emotion is predicted. To do this, let’s use Pusher. Pusher allows you to seamlessly add realtime features to your applications without worrying about infrastructure. To get started, create a [developer account](https://pusher.com/signup). Once that is done, [create your application](https://dashboard.pusher.com/#wizard-modal) and obtain your application keys. \n\nCreate a `.env`  in your `server` directory to hold the environment variables for this application:\n\n```\n    touch .env\n```\n\nAdd the following to the `.env` file:\n\n```\n    PUSHER_APPID='YOUR_APP_ID'\n    PUSHER_APPKEY='YOUR_APP_KEY'\n    PUSHER_APPSECRET='YOUR_APP_SECRET'\n    PUSHER_APPCLUSTER='YOUR_APP_CLUSTER'\n```\n\nAfterward, create an `index.js` file in the `server`  directory and add the following to it:\n\n``` javascript\n    // server/index.js\n    require(\"dotenv\").config();\n    const express = require(\"express\");\n    const cors = require(\"cors\");\n    const bodyParser = require(\"body-parser\");\n    const Pusher = require(\"pusher\");\n    \n    // create express application\n    const app = express();\n    app.use(cors());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(bodyParser.json());\n    \n    // initialize pusher\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APPID,\n      key: process.env.PUSHER_APPKEY,\n      secret: process.env.PUSHER_APPSECRET,\n      cluster: process.env.PUSHER_APPCLUSTER,\n      encrypted: true\n    });\n    \n    //  create application routes\n    app.post(\"/callback\", function(req, res) {\n      // now that we are here just go ahead and then\n      pusher.trigger(\"emotion_channel\", \"new_emotion\", {\n        emotion: req.body.emotion\n      });\n      return res.json({ status: true });\n    });\n    \n    app.listen(\"3128\");\n```\n\nWe create a simple Express application, then initialize Pusher using the environment variables specified in the `.env`. Afterwards, we create a simple `/callback` route that is responsible for triggering a `new_emotion` event on the `emotion_channel` with the detected emotion passed as the body.\n\nNow, on the dashboard, we are listening on the `emotion_channel` for a `new_emotion` event. Let’s see how to do this:\n\n### Displaying detected emotions in realtime on the dashboard\n\nFirstly, add the Pusher minified script to your `index.html` file for use in our application:\n\n``` html\n    \u003c!-- public/index.html --\u003e \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n      \u003cmeta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"\u003e\n      \u003clink rel=\"icon\" href=\"\u003c%= BASE_URL %\u003efavicon.ico\"\u003e\n      \u003ctitle\u003eRealtime Emotion Recognition Feedback Application\u003c/title\u003e\n      \u003cscript src=\"https://js.pusher.com/4.3/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003c/head\u003e\n    \n    \u003cbody\u003e\n      \u003cnoscript\u003e\n        \u003cstrong\u003eWe're sorry but the application doesn't work properly without JavaScript enabled. Please enable it to continue.\u003c/strong\u003e\n      \u003c/noscript\u003e\n      \u003cdiv id=\"app\"\u003e\u003c/div\u003e\n      \u003c!-- built files will be auto injected --\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nCreate a new Dashboard view in the `src/views` directory of the `realtime-feedback` application:\n\n```\n    touch src/views/Dashboard.vue\n```\n\nThe dashboard page has the following template:\n\n``` html\n    \u003c!-- src/views/Dashboard.vue --\u003e \n    \u003ctemplate\u003e\n      \u003cdiv class=\"dashboard\"\u003e\n        \u003ch1\u003eHere's a summmary of how users feel about your service in realtime\u003c/h1\u003e\n        \u003cdiv\u003e\n          \u003ctemplate v-for=\"(emotion, index) in emotions\"\u003e\n            \u003cdiv :key=\"index\"\u003e\n              \u003cstrong\u003e{{index}}\u003c/strong\u003e clients: {{ emotion }}\n            \u003c/div\u003e\n          \u003c/template\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    [...]\n```\n\nThe component only has one function `init()`  which we call when the component is mounted. The function creates a new Pusher object, subscribes to the `emotion_channel`  and then listens for a `new_emotion` event and then updates the feedback summary on the dashboard in realtime without any need to refresh the page. \n\nAdd the following to the Dashboard view:\n\n``` javascript\n    \u003c!-- src/views/Dashboard.vue --\u003e\n    [...]\n    \n    \u003cscript\u003e\n    export default {\n      name: \"Dashboard\",\n      data: function(){\n        return {\n          emotions: {\n            angry: 0,\n            neutral: 0,\n            happy: 0\n          },\n          pusher_obj: null,\n          e_channel: null,\n        }\n      },\n      mounted: function(){\n        this.init();\n      },\n      methods: {\n        init (){\n          // create a new pusher object\n          // PUSHER_APPKEY should be your pusher application key\n          this.pusher_obj = new Pusher('PUSHER_APPKEY',{\n              cluster: 'PUSHER_APPCLUSTER',\n              encrypted: true\n          });\n          // subscribe to channel\n          this.e_channel = this.pusher_obj.subscribe('emotion_channel');\n          // bind the channel to the new event and specify what should be done\n          let self = this;\n          this.e_channel.bind('new_emotion', function(data) {\n            //  increment the counnt for the emotion by one\n            self.emotions[`${data.emotion}`] += 1;\n          });\n        },\n      },\n    }\n    \u003c/script\u003e\n```\n\n\u003e **Note**: You’ll need to replace `PUSHER_APPKEY` and `PUSHER_APPCLUSTER` with your application key and cluster.\n\nFinally, the `src/App.vue` is responsible for rendering all our views and components. Edit your `src/App.vue` to look like this:\n\n``` html\n    \u003c!-- src/App.vue --\u003e\n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cimg alt=\"Pusher logo\" src=\"./assets/pusher.jpg\" height=\"100px\"\u003e\n        \u003crouter-view/\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cstyle\u003e\n    #app {\n      font-family: 'Avenir', Helvetica, Arial, sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n      text-align: center;\n      color: #2c3e50;\n    }\n    #nav {\n      padding: 30px;\n    }\n    \n    #nav a {\n      font-weight: bold;\n      color: #2c3e50;\n    }\n    \n    #nav a.router-link-exact-active {\n      color: #42b983;\n    }\n    \u003c/style\u003e\n```\n\nNow, we can take our application for a spin! Run the frontend server using the command:\n\n```\n    yarn serve\n```\n\nAnd in another terminal tab, navigate to the `server/` directory and then run the backend server using the command:\n\n```\n    node index.js\n```\n\nWhen you head over your application and navigate to `http://localhost:8080` in your browser to view the homepage. \n\nOpen  the `http://locahost:8080/dashboard`  route in another browser tab so you can see your results in realtime on the dashboard.\n\n\n\u003e **Note**: To allow you see how the training and testing process, you’ll need to train at least 10 samples for each of the 3 classes, also, the training data is lost on refresh of your browser. If you want to persist the trained model, you can save the trained model to your browser’s local storagea\n\n![tensorflow-feedback-demo](//images.ctfassets.net/1es3ne0caaid/3oVdBTMeGIUAMyusiE4KYy/c76127672a55ba31f54075be8862d99e/tensorflow-feedback-demo.gif)\n\n\n## Conclusion\n\nIn this tutorial, we went through how to create build a realtime emotion recognition application using Pusher, Tensorflow and  Vue.js in the browser without needing to send the image of the user to any external service. Feel free to explore more on machine learning and play with some awesome demos [here](https://js.tensorflow.org/). Here’s a link to the [GitHub](https://github.com/oreHGA/realtime-emotion-recognizer) repository. Happy hacking!","metaTitle":"Build an emotion recognition application with Tensorflow.js","metaDescription":"Use Tensorflow, Vue and Node to create a simple machine learning app. Users can train it to recognize their emotions based on their facial expression. This is used to power a feedback feature."}}],"defaultValue":"Node.js","queryType":"tag","pages":19,"route":"/tutorials","query":{"tag":"Node.js","page":"9"}}},"page":"/tutorials","query":{"tag":"Node.js","page":"9"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Node.js&page=9 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:45:31 GMT -->
</html>