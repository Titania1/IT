<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=jQuery&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:40 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">12</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; jQuery</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials4914.html?tag=jQuery" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialse485.html?product=Beams&amp;tag=jQuery" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; jQuery"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/chat-widget-go.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building a chat widget with Go and JavaScript</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This brief tutorial shows you how to quickly create a chat widget with a backend powered by Go, and a frontend and admin...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-table-datatables.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime table with DataTables</h3><p class="css-k12xad e5jrto45">In this tutorial, build an app that handles large quantities of data and display it in a realtime table using JavaScript...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/group-chat-net.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a group chat app using .NET Core</h3><p class="css-k12xad e5jrto45">Learn how to build a chat app in .NET, with notifications using Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/monitor-api-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Monitor APIs in realtime using Go</h3><p class="css-k12xad e5jrto45">In this article, you will learn how to realtime monitoring of a small API built using Go and jQuery.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-map-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime map using ASP.NET</h3><p class="css-k12xad e5jrto45">Build a realtime map using ASP.NET and Pusher. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app using ASP.NET</h3><p class="css-k12xad e5jrto45">Leverage from the power of ASP.NET and create a simple chat app.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/typing-indicator-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">C#<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a typing indicator in ASP.NET</h3><p class="css-k12xad e5jrto45">Learn how to implement a typing indicator feature in your chat application using Pusher, .NET, C# code and some jQuery. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-feed-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo feed using ASP.NET</h3><p class="css-k12xad e5jrto45">Build a mini system that allows people to upload their photographs in realtime.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/counter-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Counter</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime counter using ASP.NET</h3><p class="css-k12xad e5jrto45">Create a live website visits counter using ASP.NET and jQuery.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Prev</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsd954.html?product=Channels&amp;tag=jQuery&amp;page=1" class="css-2wakph edg0byb1">1</a><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials3dfd.html?product=Channels&amp;tag=jQuery&amp;page=2" class="css-5s6711 edg0byb1">2</a><a href="tutorials3dfd.html?product=Channels&amp;tag=jQuery&amp;page=2" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":12,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"181jJdMSpuCIwIE8yaY2YI","type":"Entry","createdAt":"2018-07-25T07:36:17.016Z","updatedAt":"2018-07-25T07:36:17.016Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building a chat widget with Go and JavaScript","url":"chat-widget-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/go-pusher-chat-widget","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}}],"reviewDate":"2018-07-23","description":"This brief tutorial shows you how to quickly create a chat widget with a backend powered by Go, and a frontend and admin dashboard in JavaScript. Users can initiate chat, and admins can see waiting chats and choose which to join.","prerequisite":"You will need Go 0.10.x+ installed. A basic knowledge of Go and JavaScript (ES6 syntax) will be helpful.","content":"## Introduction\n\nThe process of building products for an online demographic should be thorough and follow modern-day trends. One of such trend is making it possible for the customers and support agents to have realtime discussions over some form of two-way message channel. This would ensure that customers do not click away in confusion and switch to competitors in times of frustration.\n\nIn this tutorial, we will see how to build a realtime chat widget with Go, Pusher, and JavaScript. Here’s a demo of the application:\n\n![go-chat-widget-demo](//images.ctfassets.net/1es3ne0caaid/3qN7ML2VMcqaMyMaSGWsiw/3bb18095d1042c0708925e2b35667789/go-chat-widget-demo.gif)\n\nIn the above image, we built a website that sells motorcycles and integrates a chat widget. A customer is able to sign up to speak with a support agent and the agent on the other end can manage communication among a number of connected customers.\n\n## Prerequisites\n\nTo follow along with this article, you will need the following:\n\n\n- An IDE of your choice like Visual Studio Code.\n- Go (version \u003e= 0.10.x) installed on your computer. Here’s how you can install [Go.](https://golang.org/doc/install)\n- Basic knowledge of the Go programming language.\n- Basic knowledge of JavaScript (ES6) and jQuery.\n- Once you have all the above requirements, we can proceed.\n\n\n\u003e Skip the next section if you have already signed up with Pusher and created an application.\n\n## Setting up Pusher\n\nThe realtime feature of the chat widget is dependent on Pusher so you need to create an account [here](https://dashboard.pusher.com/accounts/sign_up) if you don’t already have one, after the signup process, you will be asked to create a new application. Let’s keep the app credentials nearby because we will need it to integrate Pusher within the cat widget.\n\n### Enabling client events\n\nThe final thing we will do is enable the Pusher application to trigger events from the client (browser) over a private channel. We need this feature because it is what will make it possible for a support agent to securely chat with a customer without having to send the message through the backend server first. Follow the steps below to activate client events from the [dashboard](https://dashboard.pusher.com):\n\n\n- Select the channel application.\n- Click on **App Settings** from the horizontal options list.\n- Check the **Enable client events** option.\n![go-chat-widget-enable-client-events](//images.ctfassets.net/1es3ne0caaid/24nRrulxAEScAs2aScYKAs/c162fb0a4ecaafeb7cad264880b1cbc3/go-chat-widget-enable-client-events.png)\n- Click on the **Update** button.\n\nThat’s all we need to do here.\n\n## Setting up the codebase\n\nLet’s begin by navigating into the `src` directory that is located in the `$GOPATH` and creating a new directory for our app. This will be the root directory for this project:\n\n```\n    $ cd $GOPATH/src\n    $ mkdir go-pusher-chat-widget\n    $ cd go-pusher-chat-widget\n```\n\nLet’s create the main Go file (this is the entry point of the application) here and call it `chat.go`.\nNext, we will install the Go Pusher library that we will reference within the code for the backend server. Run the following code in the terminal to pull in the package:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\n\u003e ⚠️ If you use Windows and you encounter the error ‘cc.exe: sorry, unimplemented: 64-bit mode not compiled in ‘, then you need a Windows gcc port, such as https://sourceforge.net/projects/mingw-w64/. Also, see this GitHub issue.\n\nOpen the `chat.go` file in your favorite IDE and update it with the following code:\n\n``` go\n    // File: ./chat.go\n    package main\n    \n    // Here, we import the required packages (including Pusher)\n    import (\n        \"encoding/json\"\n        \"fmt\"\n        \"io/ioutil\"\n        \"log\"\n        \"net/http\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    // Here, we register the Pusher client\n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    // Here, we define a customer as a struct\n    type customer struct {\n        Name  string `json:\"name\" xml:\"name\" form:\"name\" query:\"name\"`\n        Email string `json:\"email\" xml:\"email\" form:\"email\" query:\"email\"`\n    }\n    \n    func main() {\n    \n        // Serve the static files and templates from the public directory\n        http.Handle(\"/\", http.FileServer(http.Dir(\"./public\")))\n    \n        // -------------------------------------------------------\n        // Listen on these routes for new customer registration and User authorization,\n        // thereafter, handle each request using the matching handler function.\n        // -------------------------------------------------------\n        http.HandleFunc(\"/new/customer\", broadcastCustomerDetails)\n        http.HandleFunc(\"/pusher/auth\", pusherAuth)\n    \n        // Start executing the application on port 8070\n        log.Fatal(http.ListenAndServe(\":8070\", nil))\n    }\n```\n\nIn the code above, we registered a new Pusher client with the credentials from the app we created earlier on the dashboard.\n\n\n\u003e ⚠️ Replace `PUSHER_*` keys with your app credentials.\n\nIn the main function, we defined two endpoints, `/new/customer` and `/pusher/auth`. The first will be hit when a new customer signs up and the last will authorize the users so they can subscribe to private channels. \n\nWe will be serving all static files from a `public` directory that we will create shortly.\n\n\n\u003e Note that we did not pull in the `ioutil` and `http` packages because they are already among Go’s standard packages.\n\nWe also defined `customer` as a struct and attached extra definitions to its properties so that Go knows how to handle incoming payloads and bind their various structures with a new instance of the customer struct. \n\nLet’s create the handler functions for the endpoints, add this code to the `chat.go` file just before the main function:\n\n``` go\n    // File: ./chat.go\n    \n    // [...]\n    \n    func broadcastCustomerDetails(rw http.ResponseWriter, req *http.Request) {\n        body, err := ioutil.ReadAll(req.Body)\n        if err != nil {\n            panic(err)\n        }\n        var newCustomer customer\n        err = json.Unmarshal(body, \u0026newCustomer)\n        if err != nil {\n            panic(err)\n        }\n        client.Trigger(\"one-to-many\", \"new-customer\", newCustomer)\n        json.NewEncoder(rw).Encode(newCustomer)\n    }\n    \n    func pusherAuth(res http.ResponseWriter, req *http.Request) {\n        params, _ := ioutil.ReadAll(req.Body)\n        response, err := client.AuthenticatePrivateChannel(params)\n        if err != nil {\n            panic(err)\n        }\n        fmt.Fprintf(res, string(response))\n    }\n    \n    // [...]\n```\n\nAbove we have two functions. `broadcastCustomerDetails` receives a new customer's details and binds it to an instance of the `customer` struct. We then trigger the received details over to the admin dashboard in an event over the public channel. The `pusherAuth` authorizes users so they can subscribe to private channels.\n\nThis is all the code required for the backend server to work, let’s move on to the frontend.\n\n## Building the frontend\n\nIn this section, we will start building the frontend of the web application. We will create all the static files that are rendered when a browser is pointed to the address of our application. \n\nCreate a new folder in the project directory and call it `public`, this folder is the root directory for all of our frontend files. In this folder, create three folders `css`, `js` and `img`.\n\nNext, create two files in the root of the `public` directory named `index.html` and `support.html`.\n\n### Creating the homepage\n\nOpen the `index.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./public/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003ctitle\u003eX-Cycles\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"./css/app.css\" \u003e\n      \u003c/head\u003e\n    \n      \u003cbody\u003e\n        \u003cdiv class=\"site-wrapper\"\u003e\n          \u003cdiv class=\"site-wrapper-inner\"\u003e\n            \u003cdiv class=\"cover-container\"\u003e\n    \n              \u003cheader class=\"masthead clearfix\"\u003e\n                \u003cdiv class=\"inner\"\u003e\n                  \u003ch3 class=\"masthead-brand\"\u003eX-Cycles\u003c/h3\u003e\n                  \u003cnav class=\"nav nav-masthead\"\u003e\n                    \u003ca class=\"nav-link active\" href=\"#\"\u003eHome\u003c/a\u003e\n                    \u003ca class=\"nav-link\" href=\"#\"\u003eFeatures\u003c/a\u003e\n                    \u003ca class=\"nav-link\" href=\"#\"\u003eContact\u003c/a\u003e\n                  \u003c/nav\u003e\n                \u003c/div\u003e\n              \u003c/header\u003e\n    \n              \u003cmain role=\"main\" class=\"inner cover\"\u003e\n                \u003ch1 class=\"cover-heading\"\u003eX-cycles\u003c/h1\u003e\n                \u003cp class=\"lead\"\u003eWe sell the best motorcycles around.\u003c/p\u003e\n                \u003cp class=\"lead\"\u003e\n                  \u003ca href=\"#\" class=\"btn btn-lg btn-secondary\"\u003eGALLERY\u003c/a\u003e\n                \u003c/p\u003e\n              \u003c/main\u003e\n    \n              \u003cfooter class=\"mastfoot\"\u003e\n              \u003c/footer\u003e\n    \n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"chatbubble\"\u003e\n            \u003cdiv class=\"unexpanded\"\u003e\n                \u003cdiv class=\"title\"\u003eChat with Support\u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"expanded chat-window\"\u003e\n              \u003cdiv class=\"login-screen container\"\u003e\n    \n                \u003cform id=\"loginScreenForm\"\u003e\n                  \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"text\" class=\"form-control\" id=\"fullname\" placeholder=\"Name*\" required\u003e\n                  \u003c/div\u003e\n                  \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email Address*\" required\u003e\n                  \u003c/div\u003e\n                  \u003cbutton type=\"submit\" class=\"btn btn-block btn-primary\"\u003eStart Chat\u003c/button\u003e\n                \u003c/form\u003e\n    \n              \u003c/div\u003e\n              \u003cdiv class=\"chats\"\u003e\n                \u003cdiv class=\"loader-wrapper\"\u003e\n                  \u003cdiv class=\"loader\"\u003e\n                    \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cul class=\"messages clearfix\"\u003e\n                \u003c/ul\u003e\n                \u003cdiv class=\"input\"\u003e\n                  \u003cform class=\"form-inline\" id=\"messageSupport\"\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                      \u003cinput type=\"text\" autocomplete=\"off\" class=\"form-control\" id=\"newMessage\" placeholder=\"Enter Message\"\u003e\n                    \u003c/div\u003e\n                    \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003eSend\u003c/button\u003e\n                  \u003c/form\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e    \n    \n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"./js/app.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the `css` directory, create an `app.css` file and update it with the following code:\n\n``` css\n    /* File: ./public/css/app.css */\n    a,\n    a:focus,\n    a:hover {\n      color: #fff;\n    }\n    .btn-secondary,\n    .btn-secondary:hover,\n    .btn-secondary:focus {\n      color: #333;\n      text-shadow: none;\n      background-color: #fff;\n      border: .05rem solid #fff;\n    }\n    html,\n    body {\n      height: 100%;\n      background-color: #333;\n    }\n    body {\n      color: #fff;\n      text-align: center;\n      text-shadow: 0 .05rem .1rem rgba(0,0,0,.5);\n    }\n    .site-wrapper {\n      display: table;\n      width: 100%;\n      height: 100%; /* For at least Firefox */\n      min-height: 100%;\n      box-shadow: inset 0 0 5rem rgba(0,0,0,.5);\n      background: url(../img/bg.jpg);\n      background-size: cover;\n      background-repeat: no-repeat;\n      background-position: center;\n    }\n    .site-wrapper-inner {\n      display: table-cell;\n      vertical-align: top;\n    }\n    .cover-container {\n      margin-right: auto;\n      margin-left: auto;\n    }\n    .inner {\n      padding: 2rem;\n    }\n    .masthead {\n      margin-bottom: 2rem;\n    }\n    .masthead-brand {\n      margin-bottom: 0;\n    }\n    .nav-masthead .nav-link {\n      padding: .25rem 0;\n      font-weight: 700;\n      color: rgba(255,255,255,.5);\n      background-color: transparent;\n      border-bottom: .25rem solid transparent;\n    }\n    .nav-masthead .nav-link:hover,\n    .nav-masthead .nav-link:focus {\n      border-bottom-color: rgba(255,255,255,.25);\n    }\n    .nav-masthead .nav-link + .nav-link {\n      margin-left: 1rem;\n    }\n    .nav-masthead .active {\n      color: #fff;\n      border-bottom-color: #fff;\n    }\n    @media (min-width: 48em) {\n      .masthead-brand {\n        float: left;\n      }\n    \n      .nav-masthead {\n        float: right;\n      }\n    \n    }\n    /*\n     * Cover\n     */\n    \n    .cover {\n      padding: 0 1.5rem;\n    }\n    .cover .btn-lg {\n      padding: .75rem 1.25rem;\n      font-weight: 700;\n    }\n    .mastfoot {\n      color: rgba(255,255,255,.5);\n    }\n    @media (min-width: 40em) {\n      .masthead {\n        position: fixed;\n        top: 0;\n      }\n    \n      .mastfoot {\n        position: fixed;\n        bottom: 0;\n      }\n      .site-wrapper-inner {\n        vertical-align: middle;\n      }\n    \n      /* Handle the widths */\n      .masthead,\n      .mastfoot,\n      .cover-container {\n        width: 100%;\n      }\n    \n    }\n    @media (min-width: 62em) {\n      .masthead,\n      .mastfoot,\n      .cover-container {\n        width: 42rem;\n      }\n    \n    }\n    .chatbubble {\n        position: fixed;\n        bottom: 0;\n        right: 30px;\n        transform: translateY(300px);\n        transition: transform .3s ease-in-out;\n    }\n    .chatbubble.opened {\n        transform: translateY(0)\n    }\n    .chatbubble .unexpanded {\n        display: block;\n        background-color: #e23e3e;\n        padding: 10px 15px 10px;\n        position: relative;\n        cursor: pointer;\n        width: 350px;\n        border-radius: 10px 10px 0 0;\n    }\n    .chatbubble .expanded {\n        height: 300px;\n        width: 350px;\n        background-color: #fff;\n        text-align: left;\n        padding: 10px;\n        color: #333;\n        text-shadow: none;\n        font-size: 14px;\n    }\n    .chatbubble .chat-window {\n      overflow: auto;\n    }\n    .chatbubble .loader-wrapper {\n        margin-top: 50px;\n        text-align: center;\n    }\n    .chatbubble .messages {\n        display: none;\n        list-style: none;\n        margin: 0 0 50px;\n        padding: 0;\n    }\n    .chatbubble .messages li {\n        width: 85%;\n        float: left;\n        padding: 10px;\n        border-radius: 5px 5px 5px 0;\n        font-size: 14px;\n        background: #c9f1e6;\n        margin-bottom: 10px;\n    }\n    .chatbubble .messages li .sender {\n        font-weight: 600;\n    }\n    .chatbubble .messages li.support {\n        float: right;\n        text-align: right;\n        color: #fff;\n        background-color: #e33d3d;\n        border-radius: 5px 5px 0 5px;\n    }\n    .chatbubble .chats .input {\n        position: absolute;\n        bottom: 0;\n        padding: 10px;\n        left: 0;\n        width: 100%;\n        background: #f0f0f0;\n        display: none;\n    }\n    .chatbubble .chats .input .form-group {\n        width: 80%;\n    }\n    .chatbubble .chats .input input {\n        width: 100%;\n    }\n    .chatbubble .chats .input button {\n        width: 20%;\n    }\n    .chatbubble .chats {\n      display: none;\n    }\n    .chatbubble .login-screen {\n      margin-top: 20px;\n      display: none;\n    }\n    .chatbubble .chats.active,\n    .chatbubble .login-screen.active {\n      display: block;\n    }\n    /* Loader Credit: https://codepen.io/ashmind/pen/zqaqpB */\n    .chatbubble .loader {\n      color: #e23e3e;\n      font-family: Consolas, Menlo, Monaco, monospace;\n      font-weight: bold;\n      font-size: 10vh;\n      opacity: 0.8;\n    }\n    .chatbubble .loader span {\n      display: inline-block;\n      -webkit-animation: pulse 0.4s alternate infinite ease-in-out;\n              animation: pulse 0.4s alternate infinite ease-in-out;\n    }\n    .chatbubble .loader span:nth-child(odd) {\n      -webkit-animation-delay: 0.4s;\n              animation-delay: 0.4s;\n    }\n    @-webkit-keyframes pulse {\n      to {\n        -webkit-transform: scale(0.8);\n                transform: scale(0.8);\n        opacity: 0.5;\n      }\n    \n    }\n    @keyframes pulse {\n      to {\n        -webkit-transform: scale(0.8);\n                transform: scale(0.8);\n        opacity: 0.5;\n      }\n    \n    }\n```\n\n\u003e Above we referenced a `bg.jpg` image. You can download a free picture [here](http://pexels.com) and place it in the `public/img` directory.\n\nNow let's include some JavaScript. In the `js` directory, create an `app.js` file and paste the following code:\n\n``` javascript\n    // File: ./public/js/app.js\n    (function() {\n        'use strict';\n    \n        var pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: '/pusher/auth',\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n    \n        let chat = {\n            name:  undefined,\n            email: undefined,\n            myChannel: undefined,\n        }\n    \n        const chatPage   = $(document)\n        const chatWindow = $('.chatbubble')\n        const chatHeader = chatWindow.find('.unexpanded')\n        const chatBody   = chatWindow.find('.chat-window')\n    \n        let helpers = {\n            ToggleChatWindow: function () {\n                chatWindow.toggleClass('opened')\n                chatHeader.find('.title').text(\n                    chatWindow.hasClass('opened') ? 'Minimize Chat Window' : 'Chat with Support'\n                )\n            },\n    \n            ShowAppropriateChatDisplay: function () {\n                (chat.name) ? helpers.ShowChatRoomDisplay() : helpers.ShowChatInitiationDisplay()\n            },\n    \n            ShowChatInitiationDisplay: function () {\n                chatBody.find('.chats').removeClass('active')\n                chatBody.find('.login-screen').addClass('active')\n            },\n    \n            ShowChatRoomDisplay: function () {\n                chatBody.find('.chats').addClass('active')\n                chatBody.find('.login-screen').removeClass('active')\n                setTimeout(function(){\n                    chatBody.find('.loader-wrapper').hide()\n                    chatBody.find('.input, .messages').show()\n                }, 2000)\n            },\n    \n            NewChatMessage: function (message) {\n                if (message !== undefined) {\n                    const messageClass = message.sender !== chat.email ? 'support' : 'user'\n                    chatBody.find('ul.messages').append(\n                        `\u003cli class=\"clearfix message ${messageClass}\"\u003e\n                            \u003cdiv class=\"sender\"\u003e${message.name}\u003c/div\u003e\n                            \u003cdiv class=\"message\"\u003e${message.text}\u003c/div\u003e\n                        \u003c/li\u003e`\n                    )\n                    chatBody.scrollTop(chatBody[0].scrollHeight)\n                }\n            },\n    \n            SendMessageToSupport: function (evt) {\n                evt.preventDefault()\n                let createdAt = new Date()\n                createdAt = createdAt.toLocaleString()\n                const message = $('#newMessage').val().trim()\n                \n                chat.myChannel.trigger('client-guest-new-message', {\n                    'sender': chat.name,\n                    'email': chat.email,\n                    'text': message,\n                    'createdAt': createdAt \n                });\n    \n                helpers.NewChatMessage({\n                    'text': message,\n                    'name': chat.name,\n                    'sender': chat.email\n                })\n    \n                $('#newMessage').val('')\n            },\n    \n            LogIntoChatSession: function (evt) {\n                const name  = $('#fullname').val().trim()\n                const email = $('#email').val().trim().toLowerCase()\n    \n                chatBody.find('#loginScreenForm input, #loginScreenForm button').attr('disabled', true)\n    \n                if ((name !== '' \u0026\u0026 name.length \u003e= 3) \u0026\u0026 (email !== '' \u0026\u0026 email.length \u003e= 5)) {\n                    axios.post('/new/customer', {\"name\":name, \"email\":email}).then(response =\u003e {\n                        chat.name = name\n                        chat.email = email\n                        console.log(response.data.email)\n                        chat.myChannel = pusher.subscribe('private-' + response.data.email);\n                        helpers.ShowAppropriateChatDisplay()\n                    })\n                } else {\n                    alert('Enter a valid name and email.')\n                }\n                \n                evt.preventDefault()\n            }\n        }\n    \n    \n        pusher.bind('client-support-new-message', function(data){\n            helpers.NewChatMessage(data)\n        })\n    \n    \n        chatPage.ready(helpers.ShowAppropriateChatDisplay)\n        chatHeader.on('click', helpers.ToggleChatWindow)\n        \n        chatBody.find('#loginScreenForm').on('submit', helpers.LogIntoChatSession)\n        chatBody.find('#messageSupport').on('submit', helpers.SendMessageToSupport)\n    }());\n```\n\nAbove, we instantiated a Pusher object instance and then we created a `helpers` object. In this object lies the meat of the script. In the `helpers` object we have a few methods that do specific tasks:\n\n\n- `ToggleChatWindow` - toggles the chat windows display.\n- `ShowAppropriateChatDisplay` - decides which chat display to show depending on the action of the user.\n- `ShowChatInitiationDisplay` - shows the initial display for the chat window for the user to initiate a chat session.\n- `ShowChatRoomDisplay` - shows the chat window after the user has instantiated a new chat session.\n- `NewChatMessage` - adds a new chat message to the chat window UI.\n- `SendMessageToSupport` - sends a chat message to the backend.\n- `LogIntoChatSession` - starts a new chat session.\n\n\n\u003e Replace the `PUSHER_*` keys with the one available on your Pusher dashboard.\n\n### Creating the support dashboard\n\nOpen the `support.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./public/support.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003ctitle\u003eX-Cycles | Support \u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"./css/support.css\" \u003e\n      \u003c/head\u003e\n    \n      \u003cbody\u003e\n        \u003cheader\u003e\n            \u003cnav class=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\"\u003e\n                \u003ca class=\"navbar-brand\" href=\"#\"\u003eDashboard\u003c/a\u003e\n            \u003c/nav\u003e\n        \u003c/header\u003e\n    \n        \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"row\" id=\"mainrow\"\u003e\n                \u003cnav class=\"col-sm-3 col-md-2 d-none d-sm-block bg-light sidebar\"\u003e\n                    \u003cul class=\"nav nav-pills flex-column\" id=\"rooms\"\u003e\n                    \u003c/ul\u003e\n                \u003c/nav\u003e\n                \u003cmain role=\"main\" class=\"col-sm-9 ml-sm-auto col-md-10 pt-3\" id=\"main\"\u003e\n                    \u003ch1\u003eChats\u003c/h1\u003e\n                    \u003cp\u003e👈 Select a chat to load the messages\u003c/p\u003e\n                    \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                    \u003cdiv class=\"chat\" style=\"margin-bottom:150px\"\u003e\n                        \u003ch5 id=\"room-title\"\u003e\u003c/h5\u003e\n                        \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                        \u003cdiv class=\"response\"\u003e\n                            \u003cform id=\"replyMessage\"\u003e\n                                \u003cdiv class=\"form-group\"\u003e\n                                    \u003cinput type=\"text\" placeholder=\"Enter Message\" class=\"form-control\" name=\"message\" /\u003e\n                                \u003c/div\u003e\n                            \u003c/form\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"table-responsive\"\u003e\n                          \u003ctable class=\"table table-striped\"\u003e\n                            \u003ctbody id=\"chat-msgs\"\u003e\n                            \u003c/tbody\u003e\n                        \u003c/table\u003e\n                    \u003c/div\u003e\n                \u003c/main\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"./js/support.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nLet’s write the style for the support page. In the `css` directory, create a `support.css` file and paste the following code:\n\n``` css\n    /* File: ./public/css/support.css */\n    body {\n        padding-top: 3.5rem;\n    }\n    h1 {\n        padding-bottom: 9px;\n        margin-bottom: 20px;\n        border-bottom: 1px solid #eee;\n    }\n    .sidebar {\n        position: fixed;\n        top: 51px;\n        bottom: 0;\n        left: 0;\n        z-index: 1000;\n        padding: 20px 0;\n        overflow-x: hidden;\n        overflow-y: auto;\n        border-right: 1px solid #eee;\n    }\n    .sidebar .nav {\n        margin-bottom: 20px;\n    }\n    .sidebar .nav-item {\n        width: 100%;\n    }\n    .sidebar .nav-item + .nav-item {\n        margin-left: 0;\n    }\n    .sidebar .nav-link {\n        border-radius: 0;\n    }\n    .placeholders {\n        padding-bottom: 3rem;\n    }\n    .placeholder img {\n        padding-top: 1.5rem;\n        padding-bottom: 1.5rem;\n    }\n    tr .sender {\n        font-size: 12px;\n        font-weight: 600;\n    }\n    tr .sender span {\n        color: #676767;\n    }\n    .response {\n        display: none;\n    }\n```\n\nNow let's add the JavaScript for the page. In the `js` directory, create a `support.js` file and update it with the following code:\n\n``` javascript\n    // File: ./public/js/support.js\n    (function () {\n        var pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: '/pusher/auth',\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n    \n        let chat = {\n            messages: [],\n            currentRoom: '',\n            currentChannel: '',\n            subscribedChannels: [],\n            subscribedUsers: []\n        }\n    \n        var generalChannel = pusher.subscribe('one-to-many');\n    \n        const chatBody = $(document)\n        const chatRoomsList = $('#rooms')\n        const chatReplyMessage = $('#replyMessage')\n    \n        const helpers = {\n    \n            clearChatMessages: () =\u003e $('#chat-msgs').html(''),\n    \n            displayChatMessage: (message) =\u003e {\n                if (message.email === chat.currentRoom) {\n                    $('#chat-msgs').prepend(\n                        `\u003ctr\u003e\n                            \u003ctd\u003e\n                                \u003cdiv class=\"sender\"\u003e${message.sender} @ \u003cspan class=\"date\"\u003e${message.createdAt}\u003c/span\u003e\u003c/div\u003e\n                                \u003cdiv class=\"message\"\u003e${message.text}\u003c/div\u003e\n                            \u003c/td\u003e\n                        \u003c/tr\u003e`\n                    )\n                }\n            },\n    \n            loadChatRoom: evt =\u003e {\n                chat.currentRoom = evt.target.dataset.roomId\n                chat.currentChannel = evt.target.dataset.channelId\n                if (chat.currentRoom !== undefined) {\n                    $('.response').show()\n                    $('#room-title').text(evt.target.dataset.roomId)\n                }\n                evt.preventDefault()\n                helpers.clearChatMessages()\n            },\n    \n            replyMessage: evt =\u003e {\n                evt.preventDefault()\n                let createdAt = new Date()\n                createdAt = createdAt.toLocaleString()\n                const message = $('#replyMessage input').val().trim()\n                chat.subscribedChannels[chat.currentChannel].trigger('client-support-new-message', {\n                    'name': 'Admin',\n                    'email': chat.currentRoom,\n                    'text': message, \n                    'createdAt': createdAt \n                });\n                \n                helpers.displayChatMessage({\n                    'email': chat.currentRoom,\n                    'sender': 'Support',\n                    'text': message, \n                    'createdAt': createdAt\n                })\n    \n                $('#replyMessage input').val('')\n            },\n        }\n    \n        generalChannel.bind('new-customer', function(data) {\n            chat.subscribedChannels.push(pusher.subscribe('private-' + data.email));\n            chat.subscribedUsers.push(data);\n            // render the new list of subscribed users and clear the former\n            $('#rooms').html(\"\");\n            chat.subscribedUsers.forEach(function (user, index) {\n                    $('#rooms').append(\n                        `\u003cli class=\"nav-item\"\u003e\u003ca data-room-id=\"${user.email}\" data-channel-id=\"${index}\" class=\"nav-link\" href=\"#\"\u003e${user.name}\u003c/a\u003e\u003c/li\u003e`\n                    )\n            })\n        })\n    \n        pusher.bind('client-guest-new-message', function(data){\n            helpers.displayChatMessage(data)\n        })\n    \n        chatReplyMessage.on('submit', helpers.replyMessage)\n        chatRoomsList.on('click', 'li', helpers.loadChatRoom)\n    }())\n```\n\nAbove, the script looks almost similar to the `app.js` script. The `helpers` object contains the following functions:\n\n\n- `clearChatMessages` - clears the chat message window.\n- `displayChatMessage` - displays a new chat message in the current window.\n- `loadChatRoom` - shows a users chat messages in the general chat window after a room is selected.\n- `replyMessage` - sends a chat message to the current room.\n\nAfter declaring the helpers, we bind to the Pusher channel and register our listeners.\n\n\n\u003e Replace the `PUSHER_*` keys with the one available on your Pusher dashboard.\n\n\n## Running the application\n\nTo test the application, we will run the application by typing this command in the terminal:\n\n```\n    $ go run chat.go\n```\n\nWe can visit these addresses, http://127.0.0.1:8070 and http://127.0.0.1:8070/support.html, on a web browser using different windows to test that the application works correctly. Here’s what we should see:\n\n![go-chat-widget-demo](//images.ctfassets.net/1es3ne0caaid/3qN7ML2VMcqaMyMaSGWsiw/3bb18095d1042c0708925e2b35667789/go-chat-widget-demo.gif)\n\n\n## Conclusion\n\nIn this tutorial, we learned how to create a basic realtime web chat widget using Go and JavaScript. The source code for this project is available [here](https://github.com/neoighodaro/go-pusher-chat-widget) on GitHub.","metaTitle":"Building a chat widget with Go and JavaScript","metaDescription":"Use Go and JavaScript to create a simple chat widget. The app comprises a user panel and an admin panel. Users initiate chats, and admins can see a list of waiting users and choose to join a chat session."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"18nFS2Sl4UCOS0S6CGCkga","type":"Entry","createdAt":"2018-04-23T11:29:30.464Z","updatedAt":"2018-04-23T11:29:30.464Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime table with DataTables","url":"realtime-table-datatables","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/pusher-realtime-jquery-datatable","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}}],"reviewDate":"2018-04-20","description":"In this tutorial, build an app that handles large quantities of data and display it in a realtime table using JavaScript and DataTables.","prerequisite":"This tutorial uses jQuery and Bootstrap.","content":"If you are building an app that handles extensive data, you might want to implement realtime tables at some point. Let’s take a content management system for instance. Large amounts of data are added and removed often, and we would like the changes to be available to consumers immediately.\n\nIn this tutorial, we are going to walk through implementing similar features on our realtime table. We will be using a few developer tools, which are:\n\n  - [jQuery](https://jquery.com/):  A small JavaScript library rich in features that enable easier DOM manipulation, event handling, animation and AJAX implementations.\n  \n  - [Pusher](https://pusher.com/):  A free realtime, easy to use pub/sub service. Pusher makes realtime as easy as using basic events.\n\n  - [DataTables](https://datatables.net/):  A jQuery plug-in that employs progressive enhancement concepts to add advanced interaction controls to any HTML table.\n\n  - [Bootstrap](http://getbootstrap.com/):   A front end framework for developing responsive, mobile first projects on the web\n\nHere is a glimpse of what we are going to build:\n\n![build-realtime-table-datatables-demo](//images.ctfassets.net/1es3ne0caaid/7M8ra91JxSKWcM4CqYKUQ0/2f8b698136a24d7ad9e54a15f1128a9a/build-realtime-table-datatables-demo.gif)\n\n## Setting up DataTables\n\nRunning DataTables on our app is quite simple and straightforward. All we need to do is include the DataTables JavaScript file and the DataTables CSS file in [our HTML](https://github.com/christiannwamba/pusher-realtime-jquery-datatable/blob/master/index.html) page. There are a host of other plug-ins we can add to enhance editing abilities and extend the feature set of DataTables but basically we shall stick to these two files. It must be noted that being a jQuery plug-in, DataTables will rely on jQuery in order to work. To include DataTables on our page, we simply include the following links on our HTML page:\n\n``` html\n    \u003chead\u003e\n      \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"//cdn.datatables.net/1.10.15/css/jquery.dataTables.css\"\u003e\n    \u003c/head\u003e\n```\n These links will be at the end of our `\u003cbody\u003e` element, just before its closing tag:\n \n``` html\n    \u003cbody\u003e\n    \u003cscript src=\"https://code.jquery.com/jquery-1.12.4.js\"\u003e\u003c/script\u003e\n    \u003cscript type=\"text/javascript\" charset=\"utf8\" src=\"//cdn.datatables.net/1.10.15/js/jquery.dataTables.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://cdn.datatables.net/plug-ins/1.10.15/api/row().show().js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n```\n\n## Creating our table blueprint\n\nTo create our table blueprint, we insert a `table` element in our page and, with jQuery, append the `DataTable` method to it. This will initialize all the built-in features of DataTables. The `DataTable` method takes an object as argument. The object has a `data` property which takes `[dataSet](https://github.com/christiannwamba/pusher-realtime-jquery-datatable/blob/master/data.js)` , an array of data that we intend to display on the table. We also include another property called `columns` and set its value to an array of objects with each object’s value serving as a column header for our table.\n\n``` javascript\n    const dataTable = $('#realtime').DataTable({\n          data: dataSet,\n          columns: [\n            { title: 'Name' },\n            { title: 'Position' },\n            { title: 'Office' },\n            { title: 'Extn.' },\n            { title: 'Start date' },\n            { title: 'Salary' }\n          ]\n        });\n```\n\nThe data set is stored in a [different JavaScript file](https://github.com/christiannwamba/pusher-realtime-jquery-datatable/blob/master/data.js) and should be imported before the above custom JS file:\n\n``` javascript\n    \u003cscript src=\"data.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"script.js\"\u003e\u003c/script\u003e\n```\n\n## Adding new records to the table\n\nTo add new records to our table, we first create a form with valid options in our HTML page. We then proceed to create a method called `buildForm()` in our JavaScript file. Using jQuery, we make `buildForm()` return the value of every option in our form below. \n\n\n``` html\n    \u003cdiv class=\"col-md-4 col-md-offset-1\"\u003e\n      \u003ch3 class=\"text-center\"\u003eCreate New Employee\u003c/h3\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"name\"\u003eName\u003c/label\u003e\n        \u003cinput type=\"text\" name=\"name\" id=\"name\" placeholder=\"Name\" class=\"form-control\"\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"position\"\u003ePosition\u003c/label\u003e\n        \u003cselect name=\"position\" id=\"position\" class=\"form-control\"\u003e\n          \u003coption value=\"\"\u003e--Select Position--\u003c/option\u003e\n          \u003coption value=\"Frontend Developer\"\u003eFrontend Developer\u003c/option\u003e\n          \u003coption value=\"UI/UX Engineer\"\u003eUI/UX Engineer\u003c/option\u003e\n          \u003coption value=\"iOS Engineer\"\u003eiOS Engineer\u003c/option\u003e\n          \u003coption value=\"Android Developer\"\u003eAndroid Developer\u003c/option\u003e\n        \u003c/select\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"office\"\u003eOffice\u003c/label\u003e\n        \u003cselect name=\"office\" id=\"office\" class=\"form-control\"\u003e\n          \u003coption value=\"\"\u003e--Select Office--\u003c/option\u003e\n          \u003coption value=\"Lagos\"\u003eLagos\u003c/option\u003e\n          \u003coption value=\"London\"\u003eLondon\u003c/option\u003e\n          \u003coption value=\"New York\"\u003eNew York\u003c/option\u003e\n          \u003coption value=\"Berlin\"\u003eBerlin\u003c/option\u003e\n        \u003c/select\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"extn\"\u003eExtn\u003c/label\u003e\n        \u003cinput type=\"number\" name=\"extn\" id=\"extn\" placeholder=\"Extn\" class=\"form-control\"\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"startDate\"\u003eStart Date\u003c/label\u003e\n        \u003cinput type=\"date\" name=\"startDate\" id=\"startDate\" placeholder=\"Start Date\" class=\"form-control\"\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"salary\"\u003eSalary\u003c/label\u003e\n        \u003cinput type=\"number\" name=\"salary\" id=\"salary\" placeholder=\"Salary\" class=\"form-control\"\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003cbutton class=\"btn btn-info\" id=\"add\"\u003eAdd\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nWe then proceed to create our `buildForm()` method:\n\n``` javascript\n\n     buildForm() {\n        return [\n          $('#name').val(),\n          $('#position').val(),\n          $('#office').val(),\n          $('#extn').val(),\n          $('#startDate')\n            .val()\n            .replace(new RegExp('-', 'g'), '/'),\n          `$${$('#salary').val()}`\n        ];\n      },\n```\n\nWe create a method called `addRow()` to append whatever data  `buildForm()` returns.\n\n``` javascript\n\n    addRow(dataTable) {\n        const formData = this.buildForm();\n        const addedRow = dataTable.row.add(formData).draw();\n        addedRow.show().draw(false);\n        const addedRowNode = addedRow.node();\n        console.log(addedRowNode);\n        $(addedRowNode).addClass('highlight');\n      }\n```\n\nThe methods `row.add()` and `.draw()` are inbuilt DataTables API methods, other DataTables methods implemented in `addRow()` are `.show()`, `.draw(false)` and `.node()`:\n\n\n-  `row.add()` adds a new row to the table using the given data. \n- `.draw()` redraws and updates the table in the current context.\n- `.show()` displays a field in our table. This is useful for cases when you want to have extra form fields available, but only show them under certain conditions.\n- `.draw(false)` adds a new row without resetting or distorting the current page.\n- `.node()` serves as an event listener, it returns the DOM element for the requested field thus enabling DOM manipulation of the field.\n\nWe then take our `addRow()` method which we built and bind it to a button using jQuery’s `.click()` method. When the button is clicked, `addRow()` automatically executes its functions on our table.\n\n``` javascript\n     $('#add').on('click', this.addRow.bind(this, dataTable));\n```\n\n![build-realtime-table-datatables-001](//images.ctfassets.net/1es3ne0caaid/1eHAQ4FtMaIoeeQGa0IwMO/85cf41a43603c0cac9995ce879f1dec7/build-realtime-table-datatables-001.png)\n\n## Selecting and removing existing records from table\n\nLet’s now create a method called `selectRow()` , its function is to select a row in our table. Selecting a row puts the row to the spot so we can be able to remove it. The method just adds a `selected` class to the selected row and removes any other row that `selected` class was previously added to:\n\n``` javascript\n\n    selectRow(dataTable) {\n        if ($(this).hasClass('selected')) {\n          $(this).removeClass('selected');\n        } else {\n          dataTable.$('tr.selected').removeClass('selected');\n          $(this).addClass('selected');\n        }\n      }\n```\n\n![build-realtime-table-datatables-002](//images.ctfassets.net/1es3ne0caaid/6FUhhiz83eg8iSAckagsm0/b66f8b1303d33fa9b2e45445bfa1dae1/build-realtime-table-datatables-002.png)\n\n\nWe also create a method called `removeRow()` , its function is to remove a row from our table. The row removed is the row with the `selected` class:\n\n``` javascript\n    removeRow(dataTable) {\n        dataTable.row('.selected').remove().draw( false );\n      }\n```\n\n\nWe then proceed to bind `selectRow()` and `removeRow()` to their respective event triggers using jQuery’s `.click()` method as we did previously with `addRow()`.\n\n\n``` javascript\n\n    const self = this;\n    $('#realtime tbody').on('click', 'tr', function(){\n          self.selectRow.bind(this, dataTable)();\n        });\n    $('#remove').on('click', this.removeRow.bind(this, dataTable));\n```\n\n## Realtime updates with Pusher\n\nTo enable realtime updates on our table, we will integrate Pusher. Pusher is a simple hosted API for quickly, easily and securely implementing realtime two-way functionality on web and mobile apps. To achieve this, Pusher is to be installed both on the client side and on the server side. The client side is with the `\u003cscript\u003e` tag while we npm install on the server side. A couple of frameworks and packages will be integrated alongside Pusher, these are:\n\n\n- [Express](https://expressjs.com/): A fast, lightweight, flexible framework for Node.js.\n- [bodyParser](https://www.npmjs.com/package/body-parser): A module that provides middle ware  for extracting the entire body portion of an incoming request stream and exposes it on `req.body` as something easier to interface with.\n- [cors](https://www.npmjs.com/package/cors): A Node.js package that provides middleware that can be used to enable cross-origin resource sharing with different options.\n- [Axios](https://www.npmjs.com/package/axios):  A promise based HTTP client for JavaScript mainly used to send asynchronous HTTP requests to REST endpoints and perform CRUD operations.\n\n\n### Installing Pusher on the Client\n\nWe begin by including the [Pusher Client library](https://pusher.com/docs/javascript_quick_start) and Axios on our HTML page:\n\n``` html\n    \u003cbody\u003e\n    \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.2/axios.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n```\n\nIn our `script.js` file, we create a method called  `sendToServer()` where we perform a POST request with Axios. We pass in two parameters in our POST request; the first is the URI  of our service endpoint and the second is our table data which we set as a value to a newly created constant which we call `formData`\n\n``` javascript\n    sendToServer() {\n        const formData = this.buildForm();\n        axios.post('http://localhost:2000/record', formData)\n          .then(response =\u003e console.log(response));\n      }\n```\n\nWe then establish our connection with Pusher by creating a new Pusher instance.\nIn our instance, we insert the free API key we get when signing up with Pusher. To ensure connection traffic is encrypted, we set  `encrypted` to the Boolean  `true` in our app.\n\n\n``` javascript\n    var pusher = new Pusher('APP-KEY', {\n      cluster: 'CLUSTER',\n      encrypted: true\n    });\n```\n\nThe key is part of the credentials that are generated when a new app is created from your Pusher dashboard. You can create an account by [signing up](https://pusher.com/signup). See Appendix at the end of the article to learn how to setup a Pusher account\n\n## Installing Pusher on the Server\n\nFirst, run the following command to install the server dependencies:\n\n```\n    npm install express body-parser cors\n```\n\nA `server.js` file is created; we then initialize Express after which we configure Express to support cross-origin resource sharing, encoded body and JSON. We then create a new Pusher instance which has an object containing our app ID, key, secret, cluster,  and encryption preference. \n\n \nNext, we create a POST route and in it we use Pusher to trigger an event named `new-record` through a `record` channel.\n \n\n``` javascript\n    const express = require('express');\n    const bodyParser = require('body-parser')\n    const Pusher = require('pusher')\n    const cors = require('cors')\n    const app = express();\n    app.use(cors())\n    app.use(bodyParser.urlencoded({ extended: false }))\n    app.use(bodyParser.json())\n    const pusher = new Pusher({\n      appId: 'APP-ID',\n      key: 'KEY',\n      secret: 'SECRET',\n      cluster: 'CLUSTER',\n      encrypted: true\n    });\n    app.post('/record', (req, res) =\u003e {\n      console.log(req.body);\n      pusher.trigger('records', 'new-record', req.body);\n      res.send('Pushed');\n    })\n    app.listen(2000, () =\u003e console.log('Listening at 2000'));\n```\n\nTo get realtime updates on our table, in our `script.js`  file (client side) we use Pusher’s `subscribe()` method to subscribe to our channel  `records`. We then define a callback function that binds our event  `new-record` and with it, our data.\n\n\n``` javascript\n      var pusher = new Pusher('APP-KEY', {\n          cluster: 'CLUSTER',\n          encrypted: true\n        });\n     \n     var channel = pusher.subscribe('records');\n        channel.bind('new-record', (data) =\u003e {\n          this.addRow(dataTable, data);\n        });\n```\n\n\n![build-realtime-table-datatables-demo](//images.ctfassets.net/1es3ne0caaid/7M8ra91JxSKWcM4CqYKUQ0/2f8b698136a24d7ad9e54a15f1128a9a/build-realtime-table-datatables-demo.gif)\n\n\n## Conclusion\n\nWith this walk through, you should be able to build cross platform realtime apps with ease. Other  DataTables and Pusher features are available but their use depends on the requirements of your app. You can have a look at the DataTables [documentation](https://datatables.net/reference/) and while you’re at it, take a glance at [Pusher’s](https://pusher.com/docs/) as well. For a deeper comprehension of the project, feel free to explore further on [GitHub](https://github.com/christiannwamba/pusher-realtime-jquery-datatable).\n\n### Appendix: Pusher Setup\n1. [Sign up](https://dashboard.pusher.com/accounts/sign_in) for a free Pusher account:\n\n![build-realtime-table-datatables-signup](//images.ctfassets.net/1es3ne0caaid/3Z24QnPzi8kQW8Y6sw4uOc/492d10a3e6fbd9b91cacf00aadba0bd0/build-realtime-table-datatables-signup.png)\n\n2. Create a new app by selecting **Apps** on the sidebar and clicking **Create New** button on the bottom of the sidebar:\n\n![build-realtime-table-datatables-dashboard](//images.ctfassets.net/1es3ne0caaid/6XcieoeVeoysm0S42ucyYi/92f188ad4918d6419e2bc6cec8e59065/build-realtime-table-datatables-dashboard.png)\n\n3. Configure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n\n![build-realtime-table-datatables-create-app](//images.ctfassets.net/1es3ne0caaid/1n2Lq6tAMcCGeO66eSE4U2/403defb94e6366b6a39366be8a3f9534/build-realtime-table-datatables-create-app.png)\n\n4. You can retrieve your keys from the **App Keys** tab:\n\n![build-realtime-table-datatables-api-keys](//images.ctfassets.net/1es3ne0caaid/543wf39oBy0goEA4uWGK8u/685d1a34ca13ad18ed1a952be851462c/build-realtime-table-datatables-api-keys.png)","metaTitle":"Build a realtime table with DataTables","metaDescription":"Learn to build an app that handles large quantities of data and display it in a realtime table using JavaScript (jQuery), DataTables and Bootstrap."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1VzoJx8nmcmycqAMMkSmcq","type":"Entry","createdAt":"2018-03-08T13:10:53.254Z","updatedAt":"2020-06-19T14:23:06.691Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":8,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a group chat app using .NET Core","url":"group-chat-net","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"projectRepo":"https://github.com/dongido001/Dotnet_GroupChat_Using_Pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2zMClYDH68wMGYcoiYC8wI","type":"Entry","createdAt":"2018-02-12T14:44:37.285Z","updatedAt":"2018-02-12T14:44:37.285Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":".NET","url":"net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2018-03-06","description":"Learn how to build a chat app in .NET, with notifications using Pusher.","prerequisite":"A basic understanding of C#, .NET and jQuery will be helpful.\n","content":"Our human need for realtime communication is always evolving. That’s why we’re seeing an increase in chat features in more than just chat-based apps. Group chat is a type of chat application where two or more users can exchange messages simultaneously.\n\nIn this article, we’ll build a group chat application in .NET Core MVC. [Pusher](http://pusher.com) sits between our server and client. It simplifies adding realtime functionality to our group chat app.\n\nHere is a preview of what you’ll be building:\n\n![Group Chat .NET demo](//images.contentful.com/1es3ne0caaid/u7v55YS5WKi4KeCeIGe6c/3707712bc7a0733359d1308a80beecf5/group-chat-net-demo.gif)\n\n\nIt will be helpful to have an understanding of the following, but extensive working knowledge isn't required:\n\n1. [C#](https://docs.microsoft.com/en-us/dotnet/csharp/).\n2. [.NET Core](https://docs.microsoft.com/en-us/aspnet/core/) 2.0.\n3. JavaScript ([jQuery](https://jquery.com/)).\n\n## Prerequisites\n1. Install [Visual Studio Code](https://code.visualstudio.com/), or [Visual Studio](https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio) (in this article I’ll use Visual Studio code, since it’s a cross platform editor.)\n2. Install the [.NET Core SDK](https://www.microsoft.com/net/download/core).\n3. Install the [C# extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp) from the Visual Studio Code Marketplace.\n\nVerify your setup by typing the following in your command line:\n\n```\n    $ dotnet --version\n```\n\nThis should print out the visual studio code version you have installed.\n\n## Setting up Pusher app\n\nNext, let’s create an app in our [Pusher](https://pusher.com) account for the group chat application. \n\n\n1. Sign up or login to your [Pusher](https://pusher.com/signup) account.\n2. Create a new pusher app.\n\n![Creating a Pusher app](//images.contentful.com/1es3ne0caaid/6O54kBQseW8i2yqCCQkG8C/af765dfe786811291ae454ac79b4896f/group-chat-net-create-app.png)\n\n3. After filling the form above, click on **Create my app** button to create the app.\n4. The next page is a getting started page with code samples. You should click on **App Keys** tab to get your Pusher app details.\n\nWe’ll need these keys later, so keep them handy! Make sure you add your correct Pusher app details below. `PUSHER_APP_ID`, `PUSHER_APP_KEY`, `PUSHER_APP_SECRET`, `PUSHER_APP_CLUSTER` are just a place holders, replace them with your actual Pusher app details and note it down:\n\n```\napp_id  = \"PUSHER_APP_ID\"\nkey     = \"PUSHER_APP_KEY\"\nsecret  = \"PUSHER_APP_SECRET\"\ncluster = \"PUSHER_APP_CLUSTER\"\n```  \n## Setting up our chat project\n\nFirst, create a new directory on your system - `GroupChat`. Then from your command line, CD(change directory) into the folder your just created.\n\nThen from your command line, run the following command:\n\n```\n    $ dotnet new mvc --auth Individual\n```\n\nThis command creates a new ASP.NET Core MVC project with authentication in your current folder.\n\nWe have included authentication ([Identity](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity?tabs=netcore-cli%2Caspnetcore2x)) in this app because we want to uniquely identify each user so we can easily group them. ASP.NET Core [Identity](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity?tabs=netcore-cli%2Caspnetcore2x) makes it easy to add login features to .NET Core apps.\n\n\n\u003e   💡 ASP.NET Core Identity is a membership system which allows you to add login functionality to your application. Users can create an account and login with a user name and password or they can use an external login provider such as Facebook, Google, Microsoft Account, Twitter or others.\n\n\nNow, open the `GroupChat` folder in Visual Studio Code editor.\n\n\u003e  💡 If your Visual Studio Code have been set to your system path, you can open the project by typing  **“code .”** (without quotes) in your command prompt.\n\n\n- Select **Yes** to the **Warn** message \"Required assets to build and debug are missing from 'GroupChat'. Add them?\"\n- Select **Restore** to the **Info** message \"There are unresolved dependencies\".\n\nNext, Press **Debug** (F5) to build and run the program. In your browser navigate to [http://localhost:5000/](http://localhost:5000/api/values). You should see a default page.\n\n## Adding our models\n\nA model is an object that represents the data in your application. We’ll need several models for our application. Start by creating the models for our table structure. For this project, we’ll need to create three tables - `Group`, `UserGroup` and `Message`.\n\n### Group model\nIn the Group table, we’ll need the following columns: ID (int) and GroupName (string) where the `ID` is the primary key. We’ll store all groups in this table.\n\nCreate a new file in the `/Models` folder called `Group.cs` and add the following code to it:\n``` C#\n    using System;\n    namespace GroupChat.Models\n    {\n        public class Group\n        {\n            public int ID { get; set; }\n            public string GroupName { get; set; }\n        }\n    }\n```\n### UserGroup model\nIn the UserGroup table, we’ll need the following columns: ID (int), UserName (string) and GroupId (int). We’ll store the User ID and Group ID in this table.\n\nCreate a new file in the `/Models` folder called `UserGroup.cs` and add the following code to it:\n\n``` C#\n    using System;\n    \n    namespace GroupChat.Models\n    {\n        public class UserGroup\n        {\n            public int ID { get; set; }\n            public string UserName { get; set;  }\n            public int GroupId { get; set;  }\n        }\n    }\n```\n\n### Message model\nIn the message table, we’ll need the following columns: ID (int) , AddedBy (string), message  (string) and GroupId (int). Here, we’ll store all messages entered by all user.\n\nCreate a new file in the `/Models` folder called `Message.cs` and add the following code to it:\n\n``` C#\n    using System;\n    \n    namespace GroupChat.Models\n    {\n        public class Message\n        {\n            public int ID { get; set; }\n            public string AddedBy { get; set;  }\n            public string message { get; set;  }\n            public int GroupId { get; set;  }\n        }\n    }\n```\n\n## Creating the database context\n\nThe *database context* is the main class that coordinates [Entity Framework](https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application) functionality for a given data model. We’ll derive from the  `Microsoft.EntityFrameworkCore.DbContext`  to create this class.\n\nCreate a new file called `GroupChatContext.cs` in the `/Models` folder:\n\n``` C#\n    using Microsoft.EntityFrameworkCore;\n    namespace GroupChat.Models\n    {\n        public class GroupChatContext : DbContext\n        {\n            public GroupChatContext(DbContextOptions\u003cGroupChatContext\u003e options)\n                : base(options)\n            {\n            }\n            \n            public DbSet\u003cGroup\u003e Groups { get; set; }\n            public DbSet\u003cMessage\u003e Message { get; set; }\n            public DbSet\u003cUserGroup\u003e UserGroup { get; set; }\n        }\n    }\n```\n\n## Setting up our database and running migrations\n\nNow that we have created our models, we can easily generate a migration file that will contain code to easily create and update our table schema.\n\n### Registering the database context\nFirst, let’s register the database context we have created earlier. We’ll register the database context with the [dependency injection](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection) container. Services (such as the DB context) that are registered with the dependency injection container are available to the controllers. Also, we’ll use Sqlite for our database.\n\nUpdate the contents of the `/Startup.cs`  file with the following code:\n\n``` C#\n    [...]\n    public void ConfigureServices(IServiceCollection services)\n    {\n       [...]\n        services.AddDbContext\u003cGroupChatContext\u003e(options =\u003e\n          options.UseSqlite(Configuration.GetConnectionString(\"DefaultConnection\")));\n       [...]\n    }\n    [...]\n```\n\nYou can see the database context as a database connection and a set of tables, and the Dbset as a representation of the tables themselves. The database context allows us to link our model properties to our database with a connection string (in our case, we are using SQLite)\n\n### Running migration\n\n```\n    $ dotnet ef migrations add GroupChat --context GroupChatContext\n    $ dotnet ef database update --context GroupChatContext\n```\n\nThe first command will create a migration script that will be used for managing our database tables. We’ve also added `--context` to the commands so as to specify the context we want to run. This is because there is another context for Identity which has been created automatically by the template.\n\n\n\u003e 💡 If you got an error while running the command, stop the debugging or the server. \n\n## Implementing our chat interface\n\nWe’ll need an interface where a user can create a group, then add participating users to the group (only users added to a particular group can chat in that group).\n\nWe also need a route that will lead to the chat interface, like http://localhost:5000/chat. To do this we’ll need to create the chat controller and the chat view.\n\n### Creating the chat controller\n\nCreate a new file called `ChatController.cs` in the Controllers folder then add the following code:\n\n``` C#\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using System.Text.Encodings.Web;\n    using System.Threading.Tasks;\n    using Microsoft.AspNetCore.Authentication;\n    using Microsoft.AspNetCore.Authorization;\n    using Microsoft.AspNetCore.Identity;\n    using Microsoft.AspNetCore.Mvc;\n    using GroupChat.Models;\n    namespace GroupChat.Controllers\n    {\n        [Authorize]\n        public class ChatController : Controller\n        {\n            private readonly UserManager\u003cApplicationUser\u003e _userManager;\n            private readonly GroupChatContext _GroupContext;\n            public ChatController(\n              UserManager\u003cApplicationUser\u003e userManager,\n              GroupChatContext context\n              )\n            {\n                _userManager = userManager;\n                _GroupContext = context;\n            }\n            public IActionResult Index()\n            {\n                return View();\n            }\n        }\n    }\n```\nIn the preceding code:\n\n- We have added `Authorize` to make sure that only logged in user can access our chat page.\n- We have also injected `ApplicationUser` and `GroupChatContext` into this class so we can have access to them in all our methods. The `ApplicationUser` is the context from Identity and we have created the `GroupChatContext` so we can have access to their respective tables in this class.\n\n### Adding the chat view file\n\n1. Create a new folder in the View folder called `chat`\n2. In the chat folder you just created, create a new file called `index.cshtml`\n\nNow, update the `index.cshtml` file with the code below:\n\n``` html\n    @{\n        Layout = null;\n    }\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003c!-- Required meta tags --\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003c!-- Bootstrap CSS --\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.3/css/bootstrap.min.css\" integrity=\"sha384-Zug+QiDoJOrZ5t4lssLdxGhVrurbmBWopoEl+M6BdEfwnCJZtKxi1KgxUyJq13dy\" crossorigin=\"anonymous\"\u003e\n        \u003ctitle\u003eDotNet Group Chat\u003c/title\u003e\n        \u003cstyle type=\"text/css\"\u003e\n           .group {\n              padding: 13px;\n              border-radius: 12px;\n              background: rgb(57, 125, 192);\n              margin: 5px 0px;\n              font-weight: bolder;\n              color: black;\n              cursor: pointer;\n           }\n          .chat_body {\n            height: 520px;\n            overflow: scroll;\n          }\n          \n          .less_padding {\n            padding: 2px;\n          }\n          .chat_message {\n              padding: 13px;\n              border-radius: 12px;\n              width: 50%;\n              background: #85C1E9;\n              margin: 6px 4px;\n          }\n          .chat_main {\n            background-color: #957bbe; \n            height: 520; \n            padding: 0px;\n          }\n          .group_main {\n             background-color: #85C1E9;\n          }\n        \u003c/style\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003ch3 class=\"text-center\"\u003eWelcome\u003c/h3\u003e\n            \u003cdiv class=\"container\" style=\"background-color: grey;\"\u003e\n                  \u003cdiv class=\"row\"\u003e\n                    \u003cdiv class=\"col-md-2 less_padding\"\u003e\n                      \u003cdiv class=\"col group_main\"\u003e\n                           \u003cdiv class=\"text-center\"\u003e Groups \u003c/div\u003e\n                           \u003cdiv clsss=\"row\" style=\"height: 500px;overflow: scroll;\" id=\"groups\"\u003e\n                            \u003cinput type=\"hidden\" value=\"\" id=\"currentGroup\"\u003e\n                           \u003c!-- List groups--\u003e\n                            \u003c/div\u003e\n                          \u003cdiv class=\"text-center\"\u003e \n                              \u003cbutton type=\"submit\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#CreateNewGroup\"\u003eAdd Group\u003c/button\u003e\n                          \u003c/div\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-md-10 less_padding\"\u003e\n                      \u003cdiv class=\"col-md-12 chat_main\"\u003e\n                           \u003cdiv class=\"chat_body\"\u003e\n                                  \u003c!-- \u003cdiv class=\"chat_message float-right\"\u003eHello, \u003c/div\u003e --\u003e\n                           \u003c/div\u003e\n                          \u003cdiv class=\"row container\" style=\"margin-left: 3px;\"\u003e\n                            \u003cdiv class=\"col-md-9 col-sm-9 less_padding\"\u003e\n                                \u003ctextarea class=\"form-control\" rows=\"1\" id=\"Message\"\u003e\u003c/textarea\u003e   \n                            \u003c/div\u003e\n                            \u003cdiv class=\"col-md-3 col-sm-3 less_padding\"\u003e\n                                  \u003cbutton type=\"submit\" class=\"btn btn-primary\" style=\" position: absolute;\" id=\"SendMessage\"\u003eSend Message\u003c/button\u003e\n                            \u003c/div\u003e\n                          \u003c/div\u003e\n                      \u003c/div\u003e\n                   \u003c/div\u003e\n               \u003c/div\u003e\n            \u003c/div\u003e\n            \u003c!-- Modal --\u003e\n            \u003cdiv class=\"modal fade\" id=\"CreateNewGroup\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\"\u003e\n            \u003cdiv class=\"modal-dialog\" role=\"document\"\u003e\n                \u003cdiv class=\"modal-content\"\u003e\n                 \u003cdiv class=\"modal-header\"\u003e\n                    \u003ch5 class=\"modal-title\" id=\"exampleModalLongTitle\"\u003eAdd New Group\u003c/h5\u003e\n                    \u003cbutton type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\u003e\n                    \u003cspan aria-hidden=\"true\"\u003e\u0026times;\u003c/span\u003e\n                    \u003c/button\u003e\n                 \u003c/div\u003e\n                \u003cdiv class=\"modal-body\"\u003e\n                    \u003cform id=\"CreateGroupForm\"\u003e\n                        \u003cdiv class=\"form-group\"\u003e\n                            \u003clabel for=\"GroupName\"\u003eGroup Name\u003c/label\u003e\n                            \u003cinput type=\"text\" class=\"form-control\" name=\"GroupName\" id=\"GroupName\" aria-describedby=\"emailHelp\" placeholder=\"Group Name\"\u003e\n                        \u003c/div\u003e\n                        \u003clabel for=\"User\"\u003eAdd Users \u003cbr\u003e\u003c/label\u003e \u003cbr\u003e\n                        \u003cdiv class=\"row\"\u003e\n                             \u003c!-- List users here --\u003e\n                        \u003c/div\u003e\n                    \u003c/form\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"modal-footer\"\u003e\n                    \u003cbutton type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\"\u003eClose\u003c/button\u003e\n                    \u003cbutton type=\"button\" class=\"btn btn-primary\" id=\"CreateNewGroupButton\"\u003eCreate Group\u003c/button\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c!-- Optional JavaScript --\u003e\n        \u003c!-- jQuery first, then Popper.js, then Bootstrap JS --\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.3/js/bootstrap.min.js\" integrity=\"sha384-a5N7Y/aK3qNeh15eJKGWxsqtnX/wWdSZSKp+81YjTmS15nvnvxKHuzaWwXHDli+4\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"~/js/site.js\" asp-append-version=\"true\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\nNotice this at the top of the file:\n```\n    @{\n        Layout = null;\n    }\n```\n\nThis is to tell the rendering engine not to include layouts partials(like header, footer) in this page. Also, we included the Pusher JavaScript library in this page. This will be discussed later.\n\nYou should now have a new route available - `http://localhost:5000/chat`. `/chat` is the Controller’s name and since there is no other URL segment, this request will be mapped to the `index` method of the `ChatController.cs` method. Also in the index method, we have `return View()`. This will render the view corresponding to the ChatController. It will look for the `index.cshtml` file in the `/view/chat` folder. \n\nHeading to http://locahost:5000/chat will redirect you to a login page. Register an account and log in then visit the page again. You should have an interface like below:\n\n![Group Chat interface](//images.contentful.com/1es3ne0caaid/4VvP2c76r6yUC4ggMiqEku/5ee8e586f9e01d9cf4551584a5af8fa5/group-chat-net-interface.png)\n\nThe left sidebar will be used to display all groups a user is subscribed to and the right side for all conversation messages in the groups. When a user clicks on a group, the corresponding message in that group will be displayed on the right. There is also a create group button. When a user clicks this button, a modal is displayed and the user can enter details of their new group. The modal will list all chat users. The group creator can select who they want to add to the group.\n\nNow let’s get the group a user is subscribed to. After this, we’ll create a `ViewModel` to show the format of the output we want.\nAdd the following code to the `Index` method in the `ChatController.cs` class:\n``` C#\n    [...]\n    var groups =  _GroupContext.UserGroup\n                        .Where( gp =\u003e gp.UserName == _userManager.GetUserName(User) )\n                        .Join( _GroupContext.Groups, ug =\u003e ug.GroupId, g =\u003eg.ID, (ug,g) =\u003e\n                                new UserGroupViewModel{\n                                    UserName = ug.UserName, \n                                    GroupId = g.ID,\n                                    GroupName = g.GroupName})\n                        .ToList();\n                        \n    ViewData[\"UserGroups\"] = groups;\n    \n    // get all users      \n    ViewData[\"Users\"] = _userManager.Users;\n    [...]\n```\nHere we made use of LINQ to make a query to get all groups in the UserGroup table that the current user is subscribed to. The raw SQL query is as follows:\n``` SQL\n    SELECT \"gp\".\"UserName\", \"g\".\"ID\" AS \"GroupId\", \"g\".\"GroupName\"\n                           FROM \"UserGroup\" AS \"gp\"\n                           INNER JOIN \"Groups\" AS \"g\" ON \"gp\".\"GroupId\" = \"g\".\"ID\"\n                           WHERE \"gp\".\"UserName\" = @__GetUserName_0\n```\nIn the code above we used `UserGroupViewModel`  to describe how the content of the query result should look, but we have not created the file. Create a new file - `UserGroupViewModel.cs`  in the `Models` folder and add a view model:\n\n``` C#\n    using System;\n    using GroupChat.Models;\n    namespace GroupChat.Models\n    {\n        public class UserGroupViewModel\n        {\n            public string UserName { get; set; }\n            public int GroupId { get; set; }\n            public string GroupName { get; set;  }\n        }\n    }\n```\n\n\u003e 💡 A `view model` represents the data that you want to display on your view/page, or the input values you require for a request whether it be used for static text or for input values (like textboxes and dropdown lists) that can be added to the database. It is a model for the view.\n\n\n### Display data to the chat view\n\nNow that we have the user’s groups and all the users, let’s display them on the view. \nAdd this to the header of `Views/chat/index.cshtml`:\n``` html\n    @using Microsoft.AspNetCore.Identity\n    @using GroupChat.Models\n    \n    @inject UserManager\u003cApplicationUser\u003e UserManager\n```\nUpdate the html div that has an id=”groups” in `Views/chat/index.cshtml` as below:\n``` html\n    [...]\n    \u003cdiv clsss=\"row\" style=\"height: 500px;overflow: scroll;\" id=\"groups\"\u003e \n        @foreach (var group in (dynamic)ViewData[\"UserGroups\"]) {\n            \u003cdiv class=\"group\" data-group_id=\"@group.GroupId\"\u003e @group.GroupName \u003c/div\u003e \n         }\n    \u003c/div\u003e\n    [...]\n```\nNotice that we are storing `data-group_id` for every group rendered. This is the Group ID of the `Group` table which is unique so we can keep track of all groups easily.\n\nLet us also display the users to the modal form. Add the following code below this comment `\u003c!--` `List users here` `--\u003e`  in `Views/chat/index.cshtml`:\n``` html\n    [...]\n    \u003c!-- List users here --\u003e\n    @foreach (var user in (dynamic)ViewData[\"Users\"]) {\n      \u003cdiv class=\"col-4\"\u003e \n        \u003cdiv class=\"form-check\"\u003e\n           \u003cinput type=\"checkbox\" value=\"@user.UserName\" name=\"UserName[]\"\u003e\n           \u003clabel class=\"form-check-label\" for=\"Users\"\u003e@user.UserName\u003c/label\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e \n    }\n    [...]\n```\n\n## Adding groups\n\nBefore a user can start chatting with their friends, they need to create a group and add users to it.\nNow, let us add a view model that will define the structure of our form input when creating a new group. Create a new file called `NewGroupViewModel.cs` in the `Models` folder then add the following code to it:\n\n``` C#\n    using System;\n    using System.Collections.Generic;\n    namespace GroupChat.Models\n    {\n        public class NewGroupViewModel\n        {\n            public string GroupName { get; set; }\n            public List\u003cstring\u003e UserNames { get; set; }\n        }\n    }\n```\nNext, create a new file called `GroupController.cs` in the Controllers folder. Then add the following code to `GroupController.cs`:\n\n   ``` C# \n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using Microsoft.AspNetCore.Mvc;\n    using GroupChat.Models;\n    using System.Diagnostics;\n    using Microsoft.AspNetCore.Identity;\n    using Microsoft.AspNetCore.Authorization;\n    namespace GroupChat.Controllers\n    {\n        [Route(\"api/[controller]\")]\n        [Authorize]\n        public class GroupController : Controller\n        {\n            private readonly GroupChatContext _context;\n            private readonly UserManager\u003cApplicationUser\u003e _userManager;\n            \n            public GroupController(GroupChatContext context, UserManager\u003cApplicationUser\u003e userManager)\n            {\n                _context = context;\n                _userManager = userManager;\n            }\n            \n            [HttpGet]\n            public IEnumerable\u003cUserGroupViewModel\u003e GetAll()\n            {\n    \n                var groups = _context.UserGroup\n                              .Where(gp =\u003e gp.UserName == _userManager.GetUserName(User))\n                              .Join(_context.Groups, ug =\u003e ug.GroupId, g =\u003eg.ID, (ug,g) =\u003e\n                                            new UserGroupViewModel(){\n                                                UserName = ug.UserName, \n                                                GroupId = g.ID,\n                                                GroupName = g.GroupName})\n                               .ToList();\n                         \n                return groups;\n            }\n            \n            [HttpPost]\n            public IActionResult Create([FromBody] NewGroupViewModel group)\n            {\n                if (group == null || group.GroupName == \"\")\n                {\n                    return new ObjectResult(\n                        new { status = \"error\", message = \"incomplete request\" }\n                    );\n                }\n                if( (_context.Groups.Any(gp =\u003e gp.GroupName == group.GroupName)) == true ){\n                    return new ObjectResult(\n                        new { status = \"error\", message = \"group name already exist\" }\n                    );\n                }\n                \n                Group newGroup = new Group{ GroupName = group.GroupName };\n                // Insert this new group to the database...\n                _context.Groups.Add(newGroup);\n                _context.SaveChanges();\n                //Insert into the user group table, group_id and user_id in the user_groups table...\n                foreach( string UserName in group.UserNames)\n                {\n                    _context.UserGroup.Add( \n                        new UserGroup{ UserName = UserName, GroupId = newGroup.ID } \n                    );\n                    _context.SaveChanges();\n                }\n                return new ObjectResult(new { status = \"success\", data = newGroup });\n            }\n        }\n    }\n```\nIn the preceding code:\n\n1. The constructor uses [Dependency Injection](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection) to inject the database context (`GroupChatContext` and `ApplicationUser`) into the controller. We have injected `GroupChatContext` and `ApplicationUser` context into the class so we can have access to the contexts.\n2. The `GetAll` method is a Get method request that will be used to get all groups a particular user is subscribed to. \n3. The `Create` method is a POST method request that will be used to create a new group.\n4. Using  `_context.Groups.Add(newGroup);`  `_context.SaveChanges();`, we added a new group to the database.\n5. Finally, with `return` `new` `ObjectResult`(`new` `{ status = \"`success`\", data = newGroup });`, we returned a JSON that indicates the request was successful.\n\nCreate a group by making an AJAX request to /api/group using a POST method. Add the following JavaScript code to `/wwwroot/js/site.js`:\n``` javascript\n    $(\"#CreateNewGroupButton\").click(function(){\n        let UserNames = $(\"input[name='UserName[]']:checked\")\n            .map(function() {\n                return $(this).val();\n            }).get();\n    \n        let data = {\n            GroupName: $(\"#GroupName\").val(),\n            UserNames: UserNames\n        };\n            \n        $.ajax({\n            type: \"POST\",\n            url: \"/api/group\",\n            data: JSON.stringify(data),\n            success: (data) =\u003e {\n                $('#CreateNewGroup').modal('hide');\n            },\n            dataType: 'json',\n            contentType:'application/json'\n        });\n        \n    });\n```\n\n## Displaying messages for an active group\n\nWhen a user clicks on a particular group, we’ll fetch all messages in that group and display them on the page. To achieve this we’ll make use of JQuery and Ajax to make a request to an endpoint which we’ll expose later, by passing the group_id along with the request and then display the resulting data on the page.\n\n### Create an endpoint for displaying messages for a particular group\nCreate a new file in the Controllers folder called `MessageController.cs` Then add the following code to `MessageController.cs` file:\n\n``` C#\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using Microsoft.AspNetCore.Mvc;\n    using GroupChat.Models;\n    using Microsoft.AspNetCore.Identity;\n    \n    namespace GroupChat.Controllers\n    {\n        [Route(\"api/[controller]\")]\n        public class MessageController : Controller\n        {\n            private readonly GroupChatContext _context;\n            private readonly UserManager\u003cApplicationUser\u003e _userManager;\n            public MessageController(GroupChatContext context, UserManager\u003cApplicationUser\u003e userManager)\n            {\n                _context = context;\n                _userManager = userManager;\n            }\n    \n            [HttpGet(\"{group_id}\")]\n            public IEnumerable\u003cMessage\u003e GetById(int group_id)\n            {\n                return _context.Message.Where(gb =\u003e gb.GroupId == group_id);\n            }\n        }\n    }\n```\nIn the code above, `[Route(\"api/[controller]\")]` added at the top of the file will create a base route - `/api`.\n\nAlso we added `[HttpGet(\"{group_id}\")]` to `GetById` method so we have a route - `/api/message/{group_id}`. The route - `/api/message/{group_id}` will return all messages for a particular group.\n\n### Adding Ajax Request to Get the Messages and Display It\n\nWhen a user clicks on a group, we’ll make a request to get all messages in that group.\n Add the following code to `wwwroot/js/site.js`:\n``` javascript\n    // When a user clicks on a group, Load messages for that particular group.\n    $(\"#groups\").on(\"click\", \".group\", function(){\n        let group_id = $(this).attr(\"data-group_id\");\n        \n        $('.group').css({\"border-style\": \"none\", cursor:\"pointer\"});\n        $(this).css({\"border-style\": \"inset\", cursor:\"default\"});\n        \n        $(\"#currentGroup\").val(group_id); // update the current group_id to html file...\n        currentGroupId =  group_id;\n        \n        // get all messages for the group and populate it...\n        $.get( \"/api/message/\"+group_id, function( data ) {\n            let message = \"\";\n            \n        data.forEach(function(data) {\n            let position = (data.addedBy == $(\"#UserName\").val()) ? \" float-right\" : \"\";\n            \n            message += `\u003cdiv class=\"row chat_message` +position+ `\"\u003e\n                             \u003cb\u003e` +data.addedBy+ `: \u003c/b\u003e` +data.message+ \n                       `\u003c/div\u003e`;\n        });\n            \n            $(\".chat_body\").html(message);\n        });\n     \n    });\n```\n### Adding a view model\n\nThis view will help us define the nature of the form inputs we’ll use to make requests when we are adding a new message. Create a new file in the  `Models` folder called `MessageViewModel.cs`:\n``` C#\n    using System;\n    \n    namespace GroupChat.Models\n    {\n        public class MessageViewModel\n        {\n            public int ID { get; set; }\n            public string AddedBy { get; set;  }\n            public string message { get; set;  }\n            public int GroupId { get; set;  }\n            public string SocketId { get; set;  }\n        }\n    }\n```\nWe’ll discuss what we’ll use the `SocketId` for later in the article.\n\n### Add method for adding message\nHere, we’ll add a new method for adding messages to the database.\nUpdate `MessageController.cs` with the following code:\n``` C#\n    [...]\n    [HttpPost]\n    public IActionResult Create([FromBody] MessageViewModel message)\n    {\n        Message new_message = new Message { AddedBy = _userManager.GetUserName(User), message = message.message, GroupId = message.GroupId };\n        \n        _context.Message.Add(new_message);\n        _context.SaveChanges();\n    \n        return new ObjectResult(new { status = \"success\", data = new_message });\n    }\n    [...]\n```\nWe can now send messages and store them in our database. However, other users do not get the messages in realtime. This is where Pusher comes in.\n\n### Add new message via Ajax\nWhen a user clicks on the send message button, we’ll make an AJAX call to the method we added above with the message payload so it gets saved in the database.\n\nAdd the following code to `wwwroot/js/site.js`:\n``` javascript\n    $(\"#SendMessage\").click(function() {\n        $.ajax({\n            type: \"POST\",\n            url: \"/api/message\",\n            data: JSON.stringify({\n                AddedBy: $(\"#UserName\").val(),\n                GroupId: $(\"#currentGroup\").val(),\n                message: $(\"#Message\").val(),\n                socketId: pusher.connection.socket_id\n            }),\n            success: (data) =\u003e {\n                $(\".chat_body\").append(`\u003cdiv class=\"row chat_message float-right\"\u003e\u003cb\u003e` \n                        +data.data.addedBy+ `: \u003c/b\u003e` +$(\"#Message\").val()+ `\u003c/div\u003e`\n                );\n                \n                $(\"#Message\").val('');\n            },\n            dataType: 'json',\n            contentType: 'application/json'\n        });\n    });\n``` \n\n## Making our messaging realtime\n\nUsers can now send messages and create groups, and details are saved in the database. However, other users cannot see the messages or groups in realtime.\n\nWe will make use of [Private channel](https://pusher.com/docs/client_api_guide/client_private_channels) in Pusher which will restrict unauthenticated users from subscribing to channels they don’t have access to. \n\nBasically, we will subscribe to a channel - `group_channel` and trigger an event - `new_group` when a new group is created, so when an event - `new_group` is triggered, we update the group tab for all users (we can use [Public channel](https://pusher.com/docs/client_api_guide/client_public_channels) for this). \n\nWe will also subscribe to other channels for messaging - `private-1`, `private-2` etc but this will be a private channel because users who are not not subscribe to a particular group should not subscribe to it. \n\n### Add Pusher .NET package\n\nFrom your command line, make sure you are in the root folder of your project then type:\n\n```\n    $ dotnet add package PusherServer\n```\n\n### Adding authentication for private channel\n\nWhen a user wants to subscribe to a private channel, Pusher will authenticate the user to make sure they have the right to subscribe to it by making a request to our authentication logic.\n\nWe will create a route - `pusher/auth` which Pusher will use for authentication.\n\nLets create an endpoint that Pusher will make a request to when it wants to authenticate a user. Create the route by adding the following code to `Startup.cs`:\n``` C#\n    app.UseMvc(routes =\u003e\n    {\n       [...]\n       routes.MapRoute(\n            name: \"pusher_auth\",\n            template: \"pusher/auth\",\n            defaults: new { controller = \"Auth\", action = \"ChannelAuth\" });\n      [...]\n    });\n```\nNext, create a new file called `AuthController.cs` in the `Controller` folder and add the following code to it:\n``` C#\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using Microsoft.AspNetCore.Mvc;\n    using GChat.Models;\n    using Microsoft.AspNetCore.Identity;\n    using PusherServer;\n    namespace GroupChat.Controllers\n    {\n        public class AuthController : Controller\n        {\n            private readonly GroupChatContext _context;\n            private readonly UserManager\u003cApplicationUser\u003e _userManager;\n            \n            public AuthController( GroupChatContext context, UserManager\u003cApplicationUser\u003e userManager){\n                 _context = context;\n                 _userManager = userManager;\n            }\n            \n            [HttpPost]\n            public IActionResult ChannelAuth(string channel_name, string socket_id)\n            {\n                int group_id;\n                if(!User.Identity.IsAuthenticated) {\n                    return new ContentResult { Content = \"Access forbidden\", ContentType = \"application/json\" };\n                }\n                \n                try\n                {\n                     group_id = Int32.Parse(channel_name.Replace(\"private-\", \"\"));\n                }\n                catch (FormatException e)\n                {\n                    return Json( new  { Content = e.Message } );\n                }\n                \n                var IsInChannel = _context.UserGroup\n                                          .Where(gb =\u003e gb.GroupId == group_id \n                                                \u0026\u0026 gb.UserName == _userManager.GetUserName(User))\n                                          .Count();\n                                           \n                if( IsInChannel \u003e 0){\n                    var options = new PusherOptions\n                        {\n                            Cluster = \"PUSHER_APP_CLUSTER\",\n                            Encrypted = true\n                        };\n                    var pusher = new Pusher(\n                        \"PUSHER_APP_ID\",\n                        \"PUSHER_APP_KEY\",\n                        \"PUSHER_APP_SECRT\",\n                        options\n                    );\n                    \n                    var auth = pusher.Authenticate(channel_name, socket_id).ToJson();\n                    return new ContentResult { Content = auth, ContentType = \"application/json\" };\n                }\n               return new ContentResult { Content = \"Access forbidden\", ContentType = \"application/json\" };\n            }\n        }\n    }\n```\nPusher will send along the Channel name and Socket Id of the user it wants to authenticate, here we extracted the group Id from the channel name. Then we query our database to check if that user is in that group. To make a private channel in Pusher, you just need to add `Private-` to the channel name you intend to use. In our case, we are using `private-1`, `private-2` etc as the channel name.\n\n### Triggering an Event When a Group Is Created\n\nWe’ll trigger an event to Pusher when a new group is created so others will see the newly created group.\n\nAdd the following code to the `Create` method in `GroupController.cs` before `return new ObjectResult(new { status = success, data = newGroup });` statement:\n``` C#\n    var options = new PusherOptions\n    {\n        Cluster = \"PUSHER_APP_CLUSTER\",\n        Encrypted = true\n    };\n    var pusher = new Pusher(\n        \"PUSHER_APP_ID\",\n        \"PUSHER_APP_KEY\",\n        \"PUSHER_APP_SECRET\",\n    options);\n    var result = await pusher.TriggerAsync(\n        \"group_chat\", //channel name\n        \"new_group\", // event name\n    new { newGroup } );\n```\nMake sure you use your own Pusher app details above.\n\nAlso, add this to the top of the file:\n\n    using PusherServer;\n\n### Triggering an event when a new message is received\n\nTo trigger an event when a new message is added, add the following code to `MessageController.cs`:\n``` C#\n    var options = new PusherOptions\n    {\n        Cluster = \"PUSHER_APP_CLUSTER\",\n        Encrypted = true\n    };\n    var pusher = new Pusher(\n        \"PUSHER_APP_ID\",\n        \"PUSHER_APP_KEY\",\n        \"PUSHER_APP_SECRET\",\n        options\n    );\n    var result = await pusher.TriggerAsync(\n        \"private-\" + message.GroupId,\n        \"new_message\",\n    new { new_message },\n    new TriggerOptions() { SocketId = message.SocketId });      \n```\nMake sure you use your own Pusher app details above.\n\nWe have added `new TriggerOptions() { SocketId = message.SocketId }`, so as not to broadcast to the user that triggered the event. \n\nAlso, add this to the top of `GroupController.cs`:\n```\n    using PusherServer;\n```\n\n### Display the new group when a user creates a group\n\nWhen a new group is created, we will reload the groups for every user. Add the following function to `wwwroot/js/site.js`:\n``` javascript\n    function reloadGroup(){\n        $.get(\"/api/group\", function( data ) {\n            let groups = \"\";\n                    \n           data.forEach(function(group){\n               groups += `\u003cdiv class=\"group\" data-group_id=\"` \n                               +group.groupId+ `\"\u003e` +group.groupName+  \n                          `\u003c/div\u003e`;\n           });\n           \n           $(\"#groups\").html(groups);\n        });\n    }\n```\n### Listen for new group\n\nWhen a new group is created, we will call the `reloadGroup()` function. To listen for events, we need to initialize Pusher’s Javascript library. Add the following code to `/wwwroot/js/site.js`:\n\n``` javascript\n    let currentGroupId = null;\n    \n    var pusher = new Pusher('PUSHER_APP_KEY', {\n                 cluster: 'PUSHER_APP_CLUSTER',\n                 encrypted: true\n    });\n    \n    var channel = pusher.subscribe('group_chat');\n    channel.bind('new_group', function(data) {\n       reloadGroup();\n    });\n```\nMake sure to add this to the top part of the code because some other code in the file will be using it.\n\nIn the preceding code:\n\n1. We initiated the Pusher JavaScript library using our Pusher key.\n2. Then we suscribed to a channel - `group_chat`. \n3. Then we bound that channel to an event - `new_group`. So when a new group is created, we call the function `reloadGroup()`.\n\n### Listen for new message\n\nWhen a user sends a message, we need to show it to other users in the group. To do this, we will subscribe to a channel and bind that channel to an event.\nAdd this to the `$(\"#groups\").on(\"click\", \".group\", function()…` event in `/wwwroot/js/site.js`:\n``` javascript\n    if( !pusher.channel('private-'+group_id) ){ // check if the user have subscribed to the channel before.\n        let group_channel = pusher.subscribe('private-'+group_id);\n         \n        group_channel.bind('new_message', function(data) { \n         \n          if (currentGroupId == data.new_message.GroupId) {\n              $(\".chat_body\").append(`\u003cdiv class=\"row chat_message\"\u003e\u003cb\u003e` \n                  +data.new_message.AddedBy+ `: \u003c/b\u003e` +data.new_message.message+ ` \u003c/div\u003e`\n              );\n          ']}\n        \n        });  \n    }           \n```\n\nSo it should now look like this:\n``` javascript\n    // When a user clicks on a group, Load messages for that particular group.\n    $(\"#groups\").on(\"click\", \".group\", function(){\n        let group_id = $(this).attr(\"data-group_id\");\n        \n        $('.group').css({\"border-style\": \"none\", cursor:\"pointer\"});\n        $(this).css({\"border-style\": \"inset\", cursor:\"default\"});\n        \n        $(\"#currentGroup\").val(group_id); // update the current group_id to a html form...\n        currentGroupId =  group_id;\n        \n        // get all messages for the group and populate it...\n        $.get( \"/api/message/\"+group_id, function( data ) {\n            let message = \"\";\n            \n            data.forEach(function(data){\n                    let position = ( data.addedBy == $(\"#UserName\").val() ) ? \" float-right\" : \"\";\n                    message += `\u003cdiv class=\"row chat_message` + position +`\"\u003e\u003cb\u003e`+ data.addedBy +`: \u003c/b\u003e`+ data.message +` \u003c/div\u003e`;\n            });\n            \n            $(\".chat_body\").html(message);\n        });\n        if( !pusher.channel('private-'+group_id) ){ // check the user have subscribed to the channel before.\n            let group_channel = pusher.subscribe('private-'+group_id);\n         \n            group_channel.bind('new_message', function(data) { \n                 if( currentGroupId == data.new_message.GroupId){\n         \n                      $(\".chat_body\").append(`\u003cdiv class=\"row chat_message\"\u003e\u003cb\u003e`+ data.new_message.AddedBy +`: \u003c/b\u003e`+ data.new_message.message +` \u003c/div\u003e`);\n                 }\n              });  \n        }\n    });\n```\n## Conclusion\n\nSo far, we have seen how to create a group chat application in ASP.NET Core MVC by leveraging Pusher as a technology for adding realtime functionality.  You can find the complete code on [Github](https://github.com/dongido001/Dotnet_GroupChat_Using_Pusher).","metaTitle":"Build a group chat app using .NET Core","metaDescription":"Tutorial showing how to build a group chat app using .NET, C#, jQuery and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3k2gChNFTackmekCUGAmWA","type":"Entry","createdAt":"2018-02-28T12:27:48.206Z","updatedAt":"2018-02-28T12:27:48.206Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Monitor APIs in realtime using Go","url":"monitor-api-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/go-pusher-api-monitor","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2018-02-10","description":"In this article, you will learn how to realtime monitoring of a small API built using Go and jQuery.","prerequisite":"A basic understanding of Go and JavaScript is needed to follow this tutorial.","content":"REST is a popular architectural style for providing standards between computer systems on the web, making it easier for systems to communicate with each other. It is mostly used by APIs to provide data to other systems requiring them.\n\nSometimes, the providers of APIs would like to monitor its use. Monitoring APIs helps provide useful information, such as which endpoints are called most frequently, or what regions are the largest audience using request IP Addresses. This information can then be used to optimize the API.\n\nIn this article, we will implement realtime monitoring of a small API built with GoLang, using Pusher. Here’s a preview of what it should look like at the end:\n\n![monitor-api-go-demo](//images.contentful.com/1es3ne0caaid/5neldRoqw86YwmkUAWOCK6/62eaee0a825b4e1bb511a3c22ed07133/monitor-api-go-demo.gif)\n\n## Requirements\n\nTo follow along with this article, you will need the following:\n- An IDE of your choice e.g. [Visual Studio Code](https://code.visualstudio.com/).\n- [Go](https://golang.org/doc/install) installed on your computer.\n- Basic knowledge of GoLang.\n- Basic knowledge of JavaScript (ES6 syntax) and jQuery.\n- Basic knowledge of using a CLI tool or terminal.\n\nOnce you have all the above requirements, let’s proceed.\n\n\n## Setting up our codebase\n\nTo keep things simple, we’ll be using an already written GoLang CRUD API, which is available on [GitHub](https://github.com/neoighodaro/go-pusher-api-monitor/tree/master/api-goggles). We will fork the repository and set it up following the **README.md** guidelines on installation.\n\nNext, we will set up Pusher in the API project. Pusher is a service that provides a simple implementation of realtime functionality for our web and mobile applications. We will use it in this article, to provide realtime updates to our API monitor dashboard.\n\nLet’s head over to Pusher.com, you can [create a free account](https://pusher.com/signup?plan=sandbox) if you don’t already have one. On the [dashboard](https://dashboard.pusher.com/), create a new app and copy out the app credentials (App ID, Key, Secret, and Cluster). We will use these credentials in our API.\n\nNow that we have our Pusher app, we will install the Pusher Go library by running:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\n## Monitoring our API\n\nWe have so far set up a functional CRUD API, and we will now implement monitoring calls to it. In this article, we will monitor:\n- The endpoints called with details like name, request type (GET, POST, etc) and URL.\n- For each call to an endpoint, we will also take note of:\n  - The requesting IP address remove,\n  - The response status code for the particular call.\n\nNow that we have defined what to monitor, we will begin by creating models to keep track of the data we acquire.\n\n### Creating models for monitoring\n\nBased on our specifications above, we will create two new model files `EndPoints.go` and `EndPointCalls.go`. As was used in the base API, we will use the [GORM](http://jinzhu.me/gorm/) (the GoLang ORM) for managing data storage.\n\n\u003e 💡 Our new model files will exist in the models directory and belong to the models package.\n\nIn `EndPoints.go`, we will define the `EndPoints` object and a method to save endpoints:\n\n```\n    package models\n    \n    import (\n        \"github.com/jinzhu/gorm\"\n    )\n    \n    // EndPoints - endpoint model\n    type EndPoints struct {\n        gorm.Model\n        Name, URL string\n        Type      string          `gorm:\"DEFAULT:'GET'\"`\n        Calls     []EndPointCalls `gorm:\"ForeignKey:EndPointID\"`\n    }\n    \n    // SaveOrCreate - save endpoint called\n    func (ep EndPoints) SaveOrCreate() EndPoints {\n        db.FirstOrCreate(\u0026ep, ep)\n        return ep\n    }\n```\n\nIn the code block above, our model did not re-initialize the GORM instance `db`, yet it was used. This is because the instance defined in the `Movies.go` file was global to all members of the package, and so it can be referenced and used by all members of `package models`.\n\n\n\u003e 💡 Our EndPoints model has an attribute `Calls` which is an array of `EndPointCalls` objects. This attribute signifies the [one to many](http://jinzhu.me/gorm/associations.html#has-many) relationship between `EndPoints` and `EndPointCalls`. For more information on model associations and relationships see the GORM [documentation](http://jinzhu.me/gorm/associations.html).\n\nNext, we’ll fill in the model definitions and methods for our `EndPointCalls` model in the `EndPointCalls.go` file:\n\n```\n    package models\n    \n    import (\n        \"github.com/jinzhu/gorm\"\n        \"github.com/kataras/iris\"\n    )\n    \n    // EndPointCalls - Object for storing endpoints call details\n    type EndPointCalls struct {\n        gorm.Model\n        EndPointID   uint `gorm:\"index;not null\"`\n        RequestIP    string\n        ResponseCode int\n    }\n    \n    // SaveCall - Save the call details of an endpoint\n    func (ep EndPoints) SaveCall(context iris.Context) EndPointCalls {\n        epCall := EndPointCalls{\n            EndPointID:   ep.ID,\n            RequestIP:    context.RemoteAddr(),\n            ResponseCode: context.GetStatusCode(),\n        }\n    \n        db.Create(\u0026epCall)\n        return epCall\n    }\n```\n\nAs shown above, our `EndPointCalls` model defines a `SaveCall` method, which stores the requesting IP address and the response code of an existing `EndPoint` object.\n\nFinally, we will update the model migration in the `index.go` file to include our new models:\n\n```\n    // index.go\n    // ...\n    \n    func main() {\n        // ...\n    \n        // Initialize ORM and auto migrate models\n        db, _ := gorm.Open(\"sqlite3\", \"./db/gorm.db\")\n        db.AutoMigrate(\u0026models.Movies{}, \u0026models.EndPoints{}, \u0026models.EndPointCalls{})\n    \n        // ...\n    }\n```\n\n### Saving endpoint data for monitoring\nUsing our newly created models, we will edit the `MoviesController.go` file to save relevant data when an endpoint is called.\n\nTo do this, we will add a private helper method to `MoviesController.go`, which will save endpoint data with our models. See how below:\n\n```\n    // MoviesController.go\n    // ...\n    \n    func (m MoviesController) saveEndpointCall(name string) {\n        endpoint := models.EndPoints{\n            Name: name,\n            URL:  m.Cntx.Path(),\n            Type: m.Cntx.Request().Method,\n        }\n    \n        endpoint = endpoint.SaveOrCreate()\n        endpointCall := endpoint.SaveCall(m.Cntx)\n    }\n```\n\nThe `saveEndpointCall` method takes the name of the endpoint as a parameter. Using the controller’s `iris.Context` instance, it reads and saves the endpoint path and request method.\n\nNow that this helper method is available, we will call it in each of the endpoint methods in the `MoviesController.go` file:\n\n```\n    // MoviesController.go\n    // ...\n    \n    // Get - get a list of all available movies\n    func (m MoviesController) Get() {\n        movie := models.Movies{}\n        movies := movie.Get()\n    \n        go m.saveEndpointCall(\"Movies List\")\n        m.Cntx.JSON(iris.Map{\"status\": \"success\", \"data\": movies})\n    }\n    \n    // GetByID - Get movie by ID\n    func (m MoviesController) GetByID(ID int64) {\n        movie := models.Movies{}\n        movie = movie.GetByID(ID)\n        if !movie.Validate() {\n            msg := fmt.Sprintf(\"Movie with ID: %v not found\", ID)\n            m.Cntx.StatusCode(iris.StatusNotFound)\n            m.Cntx.JSON(iris.Map{\"status\": \"error\", \"message\": msg})\n        } else {\n            m.Cntx.JSON(iris.Map{\"status\": \"success\", \"data\": movie})\n        }\n    \n        name := fmt.Sprintf(\"Single Movie with ID: %v Retrieval\", ID)\n        go m.saveEndpointCall(name)\n    }\n    \n    // ...\n```\n\nAs shown in the snippet above, the `saveEndpointCall` helper method will be called in each CRUD method.\n\n\u003e 💡 The `saveEndpointCall` method is called as a [Goroutine](https://golangbot.com/goroutines/). Calling it this way calls it concurrently with the execution of the endpoint’s method, and allows our monitoring code to not delay or inhibit the response of the API.\n\n\n## Creating the endpoint monitor dashboard\n\nNow that we have implemented monitoring our API’s calls, we will display the data we have accrued on a dashboard.\n\n### Registering our template engine\n\nThe GoLang framework, Iris, has the ability to implement a range of template engines, which we will take advantage of.\n\nIn this section, we will implement the **Handlebars** template engine, and in our `index.go` file, we will register it to the app instance:\n\n```\n    // index.go\n    package main\n    \n    import (\n        \"goggles/controllers\"\n        \"goggles/models\"\n        \"github.com/jinzhu/gorm\"\n        \"github.com/kataras/iris\"\n    )\n    \n    func main() {\n        app := iris.New()\n    \n        tmpl := iris.Handlebars(\"./templates\", \".html\")  \n        app.RegisterView(tmpl)\n    \n        // ...\n    \n        app.Run(iris.Addr(\"127.0.0.1:1234\"))\n    }\n```\n\n\u003e 💡 We have defined our template engine (Handlebars), to render `.html` files contained in the `templates` directory.\n\n### Creating the dashboard's route and controller\nNow that we have registered our template engine to the application, we will add a route in `index.go` to render our API monitor dashboard:\n\n```\n    // index.go\n    // ...\n    \n    func main() {\n        app := iris.New()\n    \n        // ...\n    \n        app.Get(\"/admin/endpoints\", func(ctx iris.Context) {\n            dashBoard := controllers.DashBoardController{Cntx: ctx}\n            dashBoard.ShowEndpoints()\n        })\n    \n        app.Run(iris.Addr(\"127.0.0.1:1234\"))\n    }\n```\n\nAbove, we have added definitions for the path `/admin/endpoints`, where we intend to render details of our API endpoints and its calls. We have also specified that the route should be handled by the `ShowEndpoints` method of `DashBoardController`.\n\nTo create `DashBoardController`, we will create a `DashBoardController.go` file in the controllers directory. And in our `DashBoardController.go` file, we will define the `DashBoardController` object and its `ShowEndpoints` method:\n\n```\n    // DashBoardController.go\n    package controllers\n    \n    import (\n        \"goggles/models\"\n        \"github.com/kataras/iris\"\n        \"github.com/kataras/iris/mvc\"\n    )\n    \n    // DashBoardController - Controller object for Endpoints dashboard\n    type DashBoardController struct {\n        mvc.BaseController\n        Cntx iris.Context\n    }\n    \n    // ShowEndpoints - show list of endpoints\n    func (d DashBoardController) ShowEndpoints() {\n        endpoints := (models.EndPoints{}).GetWithCallSummary()\n        d.Cntx.ViewData(\"endpoints\", endpoints)\n        d.Cntx.View(\"endpoints.html\")\n    }\n```\n\nIn `ShowEndpoints()`, we retrieve our endpoints and a summary of their calls for display. Then we pass this data to our view using `d.Cntx.ViewData(\"endpoints\", endpoints)`, and finally we render our view file `templates/endpoints.html` using `d.Cntx.View(\"endpoints.html\")`.\n\n### Retrieving endpoints and call summaries\nTo retrieve our list of endpoints and a summary of their calls, we will create a method in the `EndPoints.go` file called `GetWithCallSummary`.\n\nOur `GetWithCallSummary` method should return the endpoints and their call summaries ready for display. For this, we will define a collection object `EndPointWithCallSummary` with the attributes we need for our display in the `EndPoints.go` file:\n\n```\n    // EndPoints.go\n    package models\n    \n    import (\n        \"github.com/jinzhu/gorm\"\n    )\n    \n    // EndPoints - endpoint model\n    type EndPoints struct {\n        gorm.Model\n        Name, URL string\n        Type      string          `gorm:\"DEFAULT:'GET'\"`\n        Calls     []EndPointCalls `gorm:\"ForeignKey:EndPointID\"`\n    }\n    \n    // EndPointWithCallSummary - Endpoint with last call summary\n    type EndPointWithCallSummary struct {\n        ID            uint\n        Name, URL     string\n        Type          string\n        LastStatus    int\n        NumRequests   int\n        LastRequester string\n    }\n```\n\nAnd then define `GetWithCallSummary` method to use it as follows:\n\n```\n    // EndPoints.go\n    \n    // ...\n    \n    // GetWithCallSummary - get all endpoints with call summary details\n    func (ep EndPoints) GetWithCallSummary() []EndPointWithCallSummary {\n        var eps []EndPoints\n        var epsWithDets []EndPointWithCallSummary\n    \n        db.Preload(\"Calls\").Find(\u0026eps)\n    \n        for _, elem := range eps {\n            calls := elem.Calls\n            lastCall := calls[len(calls)-1:][0]\n            newElem := EndPointWithCallSummary{\n                elem.ID,\n                elem.Name,\n                elem.URL,\n                elem.Type,\n                lastCall.ResponseCode,\n                len(calls),\n                lastCall.RequestIP,\n            }\n            epsWithDets = append(epsWithDets, newElem)\n        }\n    \n        return epsWithDets\n    }\n    \n    // ...\n```\n\nAbove, the `GetWithCallSummary` method leverages the `Calls` attribute of `EndPoints`, which defines its relationship with `EndPointCalls`. When retrieving our list of endpoints from the database, we eager load its `EndPointCalls` data using `db.Preload(\"Calls\").Find(\u0026eps)`.\n\nFor more information on eager loading in GORM, see the [documentation](http://jinzhu.me/gorm/crud.html#preloading-eager-loading).\n\n`GetWithCallSummary` initializes an array of `EndPointWithCallSummary`, and loops through the `EndPoints` objects returned from our database to create `EndPointWithCallSummary` objects. \n\nThese `EndPointWithCallSummary` objects are appended to the initialized array and returned.\n\n\u003e 💡 The `EndPointWithCallSummary` is not a model. It is a collection object and does not need to have a table in our database. This is why it does not have its own file and is not passed to `index.go` for migration.\n\n### Implementing the dashboard and displaying data\n\nNow that we have the dashboard’s route, controller and data for display, we will implement the dashboard view to achieve a simple list display of endpoints and their summary data. \n\nLet’s update `templates/endpoints.html` to have the following code:\n\n```\n    \u003c!-- templates/endpoints.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eEndpoints Monitor Dashboard\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta.3/css/bootstrap.min.css\" /\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv\u003e\n            \u003cnav class=\"navbar navbar-default navbar-static-top\"\u003e\n                \u003cdiv class=\"container\"\u003e\n                    \u003cdiv class=\"navbar-header\"\u003e\n                        \u003ca class=\"navbar-brand\" href=\"http://127.0.0.1:1234/\"\u003e\n                            Goggles - A Real-Time API Monitor\n                        \u003c/a\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/nav\u003e\n            \u003cdiv class=\"container\"\u003e\n                \u003cdiv class=\"row\"\u003e\n                    \u003cdiv class=\"col-xs-12 col-lg-12\"\u003e\n                        \u003cdiv class=\"endpoints list-group\"\u003e\n                            {{#each endpoints}}\n                                \u003ca id=\"endpoint-{{ID}}\" href=\"#\" class=\"list-group-item \n                                list-group-item-{{status_class LastStatus}}\"\u003e\n                                    \u003cstrong\u003e{{name}}\u003c/strong\u003e\n                                    \u003cspan class=\"stats\"\u003e\n                                        {{type}}: \u003cstrong\u003e{{url}}\u003c/strong\u003e |\n                                        Last Status: \u003cspan class=\"last_status\"\u003e\n                                        {{LastStatus}}\u003c/span\u003e |\n                                        Times Called: \u003cspan class=\"times_called\"\u003e\n                                        {{NumRequests}}\u003c/span\u003e |\n                                        Last Request IP: \u003cspan class=\"request_ip\"\u003e\n                                        {{LastRequester}}\u003c/span\u003e\n                                    \u003c/span\u003e\n                                \u003c/a\u003e\n                            {{/each}}\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta.3/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nAbove, we render our endpoints list using [Bootstrap](https://getbootstrap.com/) and our Handlebars template engine. We have also created and used a template function `status_class`, to colour code our list based on their last call status `LastStatus`.\n\nWe define the `status_class` template function in `index.go` after initialising our template engine:\n\n```\n    // index.go\n    \n    // ...\n    \n    func main() {\n        app := iris.New()\n    \n        tmpl := iris.Handlebars(\"./templates\", \".html\")\n    \n        tmpl.AddFunc(\"status_class\", func(status int) string {\n            if status \u003e= 200 \u0026\u0026 status \u003c 300 {\n                return \"success\"\n            } else if status \u003e= 300 \u0026\u0026 status \u003c 400 {\n                return \"warning\"\n            } else if status \u003e= 400 {\n                return \"danger\"\n            }\n            return \"success\"\n        })\n    \n        app.RegisterView(tmpl)\n    }\n```\n\nThen in our view file we call the function as:\n\n``` language-go\n    class=\"list-group-item list-group-item-{{status_class LastStatus}}\"\n```\n\u003e 💡 In the above **LastStatus** is the function’s parameter.\n\n\n## Adding realtime updates to our dashboard\n\nSo far in this article, we have monitored the calls to an API and displayed the data via a dashboard. We will now use [Pusher](http://pusher.com/) to provide realtime data updates to our dashboard.\n\n### Sending realtime data from the backend\nEarlier, we installed the [Pusher Go library](https://github.com/pusher/pusher-http-go), which we will use to trigger an event when an endpoint is called. In the `MoviesController.go` file, where the API requests are handled, we will initialize the Pusher client:\n\n```\n    // MoviesController.go\n    \n    package controllers\n    \n    import (\n        // ...\n        \"github.com/pusher/pusher-http-go\"\n    )\n    \n    // MoviesController - controller object to serve movie data\n    type MoviesController struct {\n        mvc.BaseController\n        Cntx iris.Context\n    }\n    \n    var client = pusher.Client{\n        AppId:   \"app_id\",\n        Key:     \"app_key\",\n        Secret:  \"app_secret\",\n        Cluster: \"app_cluster\",\n    }\n    \n    // ...\n```\nHere, we have initialized the Pusher client using the credentials from our earlier created app.\n\n\u003e ⚠️ Replace `app_id, app_key, app_secret and app_cluster` with your app credentials.\n\nNext, we will use our Pusher client to trigger an event, which would include the endpoint’s data to be displayed in our view. We will do this in the `saveEndpointCall` method, which logs an endpoint and its call:\n\n```\n    // MoviesController.go\n    \n    // ...\n    \n    func (m MoviesController) saveEndpointCall(name string) {\n        endpoint := models.EndPoints{\n            Name: name,\n            URL:  m.Cntx.Path(),\n            Type: m.Cntx.Request().Method,\n        }\n        endpoint = endpoint.SaveOrCreate()\n        endpointCall := endpoint.SaveCall(m.Cntx)\n        endpointWithCallSummary := models.EndPointWithCallSummary{\n            ID:            endpoint.ID,\n            Name:          endpoint.Name,\n            URL:           endpoint.URL,\n            Type:          endpoint.Type,\n            LastStatus:    endpointCall.ResponseCode,\n            NumRequests:   1,\n            LastRequester: endpointCall.RequestIP,\n        }\n        \n        client.Trigger(\"goggles_channel\", \"new_endpoint_request\", endpointWithCallSummary)\n    }\n```\n\nAbove, we create an `EndPointWithCallSummary` object from `EndPoints` (the endpoint) and `EndPointCalls`. This `EndPointWithCallSummary` object has all the data required for display on the dashboard, so will be passed to Pusher for transmission.\n\n### Displaying data in realtime on the dashboard\n\nTo display the realtime updates of our endpoints, we will use the Pusher JavaScript client and jQuery libraries.\n\nIn our view file, `templates/endpoints.html`, we will first import and initialize a Pusher instance using our app’s credentials:\n\n```\n    \u003c!-- endpoints.html --\u003e\n    \u003cscript src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta.3/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"//js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n      const pusher = new Pusher('app_id', {cluster: \"app_cluster\"});\n    \u003c/script\u003e\n```\n\n\u003e ⚠️ Replace `app_id and app_cluster` with values from your app’s credentials.\n\nNext, we will define the following:\n- The template for adding new endpoints to our view.\n- The functions to append a new endpoint and get the status class of the endpoint.\n\nFinally, we will subscribe to the `goggles_channel` and listen to the `new_endpoint_request` event, where our endpoint updates will be transmitted:\n\n```\n    \u003c!-- endpoints.html --\u003e\n    \u003cscript\u003e\n    // ...\n    \n    const channel = pusher.subscribe(\"goggles_channel\");\n    \n    channel.bind('new_endpoint_request', function(data) {\n        let end_point_id = data.ID;\n        if ( $('#endpoint-' + end_point_id).length \u003e 0 ) {\n            let status_class = getItemStatusClass(data['LastStatus']),\n                endpoint     = $('#endpoint-' + end_point_id);\n            let calls = 1 * endpoint.find('span.times_called').text()\n            endpoint.find('span.last_status').text(data['LastStatus']);\n            endpoint.find('span.times_called').text( (calls + 1) )\n            endpoint.removeClass('list-group-item-success');\n            endpoint.removeClass('list-group-item-danger');\n            endpoint.removeClass('list-group-item-warning');\n            endpoint.addClass('list-group-item-' + status_class);\n        } else {\n            addNewEndPoint(data);\n        }\n    });\n    \n    // ...\n```\n\nIn the `new_endpoint_request` event handler, the endpoint data is categorized into either an update scenario (where the endpoint already exists on the dashboard) or a create scenario (where a new list item is created and appended).\n\nFinally, you can build your application and when you run it you should see something similar to what we have in the preview:\n\n![monitor-api-go-demo](//images.contentful.com/1es3ne0caaid/5neldRoqw86YwmkUAWOCK6/62eaee0a825b4e1bb511a3c22ed07133/monitor-api-go-demo.gif)\n\n## Conclusion\n\nIn this article, we were able to monitor the realtime requests to a REST API and demonstrate how Pusher works with GoLang applications.","metaTitle":"Monitor APIs in realtime using Go","metaDescription":"Discover how you can build your own realtime API monitor using Go and jQuery."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7fFgA3TznUECEOsUEgWWsM","type":"Entry","createdAt":"2018-02-28T10:56:41.953Z","updatedAt":"2020-06-19T14:33:37.011Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime map using ASP.NET","url":"realtime-map-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-map-dotnet","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}}],"reviewDate":"2018-02-02","description":"Build a realtime map using ASP.NET and Pusher. ","prerequisite":"A basic understanding of ASP.NET and jQuery is needed to follow this tutorial.","content":"Realtime maps are a popular feature in most modern applications. They are used in apps like Uber or Lyft, and in courier and delivery services to track the location of parcels or cabs and to monitor their progress and movement as they make their way to the customer.\n\nIn this article, we will look at how to build a realtime map using .NET and Pusher. Our resulting application will look like this:\n\n![realtime-map-aspnet-demo](//images.contentful.com/1es3ne0caaid/6CNl2xfqP6YOygySaS6k0I/fe08c0dd1e65f2496e67befa9102e652/realtime-map-aspnet-demo.gif)\n\n## Prerequisites\n\nTo follow along with this article, you’ll need:\n\n- Visual Studio IDE, find installation instructions [here](https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio).\n- Basic knowledge of C#.\n- Basic knowledge of JavaScript (ES6 syntax) and jQuery.\n\n## Setting up Pusher and Google Maps\n\nTo achieve our realtime map, we’ll be making use of two services: Pusher and Google Maps.\nPusher is a service that offers simple implementation of realtime functionality in web and mobile applications. We will use it primarily to transmit the realtime updates on our map. \n\nCreate a [Pusher account](https://pusher.com/), if you have not already, and then set up your application as seen in the screenshot below.\n\n![realtime-map-aspnet-create-app](//images.contentful.com/1es3ne0caaid/3wPqfDfQI0o2UuOsEAmW4G/317ddbeb75ad7e96001ac802adf1d2fa/realtime-map-aspnet-create-app.png)\n\nWhen you have completed the set up, take note of your Pusher application keys as we will need them later on.\n\nNext, we will set up a [Google Maps API](https://developers.google.com/maps/) project. The Google Maps API provides a service for embedding maps in our applications and provides access to location information of businesses, cities and much more for numerous countries all over the world. We will use this service to generate a map and mark the realtime locations on the map.\n\nUsing the Google Maps API [guide](https://developers.google.com/maps/documentation/javascript/get-api-key), create a project and copy out the API key.\n\n## Building the backend\n\nIn this article, using C#, we will build a small application that renders a map, on which the location will be displayed and marked in realtime.\n\n### Creating our project\n\nUsing the [Visual Studio IDE](https://www.visualstudio.com/), follow the **New Project Wizard**. We will need to:\n- Create our map project.\n- Set C# as our language to use.\n- Select .NET MVC Project as the template.\n- Fill in the Project name e.g. Gaia.\n- Fill in the Solution name i.e. application name.\n\n### Setting up our routes and controllers\n\nFor the purpose of this application, we will define two routes: the route to render the map and the route to send new locations to our map. Create a `RouteConfig.cs` file, and paste the following code:\n\n```\n    // RouteConfig.cs\n    routes.MapRoute(\n        name: \"Home\",\n        url: \"\",\n        defaults: new { controller = \"Home\", action = \"Index\" }\n    );\n    \n    routes.MapRoute(\n        name: \"Map\",\n        url:  \"map\",\n        defaults: new { controller = \"Map\", action = \"Index\" }\n    );\n```\n\nThese route definitions specify the route pattern and the **Controller** and **Action** to handle it. Based on this, we need to create two controller files in the Controllers directory, `HomeController.cs` and `MapController.cs`.\n\n\n\u003e 💡 Creating our project with Visual Studio automatically creates the `HomeContoller.cs` file with an `Index` action. We will use this for our home route.\n\nIn the `HomeController.cs` file, we add:\n\n```\n    // HomeController.cs\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Web;\n    using System.Web.Mvc;\n    using System.Web.Mvc.Ajax;\n    \n    namespace Gaia.Controllers\n    {\n        public class HomeController : Controller\n        {\n            public ActionResult Index()\n            {\n                return View();\n            }\n        }\n    }\n```\n\nThe above snippet renders our home view using the **View** function.\n\n\u003e 💡 The `View` function creates a view response which we return. When it is invoked, C# looks for the default view of the calling controller class. This default view is the `index.cshtml` file found in the Views directory, in a directory with the same name as the Controller.\n\u003e i.e. The default view of the HomeController class will be the `Views/Home/index.cshtml` file.\n\nIn the `MapController.cs` file, we will receive a location’s longitude and latitude via a POST request and transmit this location data to our map via the Pusher service. Add the following code:\n\n```\n    // MapController.cs\n    \n    ...\n    \n    public class MapController : Controller\n    {\n        private Pusher pusher;\n    \n        public MapController() \n        {\n            var options = new PusherOptions();\n            options.Cluster = \"app_cluster\";\n    \n            pusher = new Pusher(\n                \"app_id\",\n                \"app_key\",\n                \"app_secret\", \n                options\n            );   \n        }\n    \n        [HttpPost]\n        public JsonResult Index()\n        {\n            var latitude    = Request.Form[\"lat\"];\n            var longitude = Request.Form[\"lng\"];\n    \n            var location = new\n            {\n                latitude = latitude,\n                longitude = longitude\n            };\n    \n            pusher.TriggerAsync(\"location_channel\", \"new_location\", location);\n    \n            return Json( new { status = \"success\", data = location } );\n        }\n    }\n```\n\nIn the code block above, we create a class variable `private Pusher pusher`. Then, we instantiate it to a Pusher client in the class constructor using the app credentials copied earlier from the Pusher dashboard. \n\nWe use the Pusher instance to transmit the location data on the `location_channel` channel, in the `new_location` event. Remember to replace `app_id` and the other values with your Pusher app credentials.\n\n\n\u003e ⚠️ To use the Pusher client in our controller, you must install the PusherServer library via NuGet, and add `using PusherServer` to the top import statements of your `MapController` class.\n\n## Creating our map view\n\nSince our map will be rendered on our home route, we will use the `Views/Home/index.cshtml` file (which is the default view of the HomeController class).\n\n\n\u003e 💡 Our `Views/Home/index.cshtml` file extends the `Shared/_Layout.cshtml` file. We have added the `title` tag and stylesheet imports to `Shared/_Layout.cshtml` for this reason.\n\nIn the `Shared/_Layout.cshtml` file, we add:\n\n```\n    \u003c!-- Shared/_Layout.cshtml --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eGaia\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta.3/css/bootstrap.min.css\" /\u003e\n        \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"@Url.Content(\"~/Content/custom.css\")\"/\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        @RenderBody()\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the `Views/Home/index.cshtml` file, add the following:\n\n```\n    \u003c!-- Views/Home/index.cshtml --\u003e\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-6 col-xs-12 col-lg-6\"\u003e\n                \u003ch3\u003eA realtime Map\u003c/h3\u003e\n                \u003cdiv id=\"map\"\u003e\n    \n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta.3/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n```\n\nThe block above defines the basic markup of our view. It consists mainly of the `div` for holding our map. We have also imported the Bootstrap CSS framework and its jQuery library dependency, to take advantage of some pre-made styles.\n\nNext we will import the Google Maps API JavaScript library and initialize our map in `Views/Home/index.cshtml`:\n\n```\n    \u003c!-- Views/Home/index.cshtml --\u003e\n    \u003cscript async defer src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAniUCyk0Gfp_UT1qNTHg2AF4I4ZmQ6EGo\u0026callback=initMap\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        let lineCoordinates = []\n    \n        let latitude = 6.4541;\n        let longitude = 3.3947;\n    \n        let map = false;\n        let marker = false;\n    \n        function initMap() {\n            let lagos = {lat: latitude, lng: longitude};\n    \n            map = new google.maps.Map(document.getElementById('map'), {\n              zoom: 10,\n              center: lagos\n            });\n    \n            marker = new google.maps.Marker({\n              position: lagos,\n              map: map\n            });\n    \n            lineCoordinates.push(marker.getPosition())\n        }\n    \u003c/script\u003e\n```\n\nIn the snippet above, we have initialized our map by passing the coordinates of [Lagos, Nigeria](https://en.wikipedia.org/wiki/Lagos) to the Google Maps library.\n\nNext, we will listen for changes in location (via our Pusher event) and implement the updates to our map. For this we’ll define our map update function. Copy the following code:\n\n```\n    \u003c!-- Views/Home/index.cshtml --\u003e\n    \n    [...]\n    \n    const updateMap = function(data) {\n        latitude = (data.latitude * 1);\n        longitude = (data.longitude * 1);\n    \n        map.setCenter({\n            lat: latitude,\n            lng: longitude,\n            alt: 0\n        });\n    \n        marker.setPosition({\n            lat: latitude,\n            lng: longitude,\n            alt: 0\n        });\n    \n        lineCoordinates.push(marker.getPosition())\n    \n        let lineCoordinatesPath = new google.maps.Polyline({\n          path: lineCoordinates,\n          geodesic: true,\n          map: map,\n          strokeColor: '#FF0000',\n          strokeOpacity: 1.0,\n          strokeWeight: 2\n        });\n    }\n    \u003c/script\u003e\n```\n\nFinally, we’ll listen for our Pusher events and trigger the `updateMap` function in our view:\n\n```\n    \u003c!-- Views/Home/index.cshtml\n    \n    [...]\n    \n    \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n      const pusher = new Pusher('app_key', {\n        cluster: 'app_cluster'\n      });\n    \n      const channel = pusher.subscribe('location_channel');\n    \n      channel.bind('new_location', function(data) {\n          updateMap(data);\n      });\n    \u003c/script\u003e\n```\n\nIn the snippet above, we import and initialize the Pusher JavaScript client. Then we subscribe to the `location_channel` and listen to the `new_location` event, passing the new location data received to our `updateMap` function for realtime updates.\n\nHere is the application when we run it again:\n\n![realtime-map-aspnet-demo](//images.contentful.com/1es3ne0caaid/6CNl2xfqP6YOygySaS6k0I/fe08c0dd1e65f2496e67befa9102e652/realtime-map-aspnet-demo.gif)\n\n## Conclusion\n\nIn a few simple steps, we have built a realtime map that updates and marks its current position based on data it receives. This application can be used to get GPS coordinates from a requested cab, or a tracked parcel to view its location and travel path on a map.","metaTitle":"Build a realtime map using ASP.NET","metaDescription":"Build a realtime map like Google Maps using .NET and Pusher. Use the map to get GPS coordinates from a requested cab, or track a parcel and see its journey and location."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"b1qV9Li0piqwKkU0cCk2U","type":"Entry","createdAt":"2018-02-28T14:09:10.530Z","updatedAt":"2020-06-19T14:07:22.845Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app using ASP.NET","url":"chat-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/create-chat-app-with-.NET-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2018-01-15","description":"Leverage from the power of ASP.NET and create a simple chat app.","prerequisite":"A basic understanding of C# and jQuery is needed to follow this tutorial.","content":"Communication in our current age is largely digital, and the most popular form of digital communication is Instant Messaging. \n\nSome applications include some form of chat implementation e.g. Slack or Facebook. In this tutorial, we will consider how to build a chat application using C# .NET.\n\nTo follow along with this tutorial, you will require:\n- Visual Studio, an IDE popularly used for building .NET projects. View installation details [here](https://www.visualstudio.com/).\n- Basic knowledge of C#.\n- Basic knowledge of .NET MVC.\n- Basic knowledge of JavaScript (jQuery).\n\n![chat-aspnet-demo](//images.contentful.com/1es3ne0caaid/42MprYw0S4GQ8eMwSAww48/c521cf08d0cc971e9a198f7a753212f2/chat-aspnet-demo.gif)\n\n## Setting up our chat project\n\nUsing our Visual Studio IDE, we’ll create our chat project by following the **New Project** wizard.\n\nWe will:\n- Set C# as our language to use.\n- Select .NET MVC Project as the template.\n- Fill in the Project name e.g. HeyChat.\n- Fill in the Solution name i.e. application name.\n\n![chat-aspnet-new-project](//images.contentful.com/1es3ne0caaid/odxwTAff4yEWksCqw2G8c/1b00a776e0746990195d4be2cd786d54/chat-aspnet-new-project.gif)\n\n\n## Creating our chat app\n### Defining pages and routes\n\nFor the purpose of this tutorial, our chat app will consist of 2 pages:\n- The front page - where our user signs up.\n- The chat view - where our user selects a contact and exchanges messages.\n\nTo achieve these views, we will need the following routes:\n- The route to render the front page.\n- The route to implement login.\n- The route to render the chat page.\n\n\n\u003e 💡 These routes only render the views and implement user login. We’ll add more routes as we go along.\n\nAdding these routes to our `RouteConfig.cs` file we’ll have:\n\n```\n    routes.MapRoute(\n        name: \"Home\",\n        url: \"\",\n        defaults: new { controller = \"Home\", action = \"Index\" }\n    );\n    \n    routes.MapRoute(\n        name: \"Login\",\n        url: \"login\",\n        defaults: new { controller = \"Auth\", action = \"Login\" }\n    );\n    \n    routes.MapRoute(\n        name: \"ChatRoom\",\n        url: \"chat\",\n        defaults: new { controller = \"Chat\", action=\"Index\"}\n    );\n```\n\n\nThese route definitions specify the route pattern and the **Controller** and **Action** to handle it.\n\u003e 💡 Creating our project with Visual Studio automatically creates the `HomeContoller.cs` file with an `Index` action. We will use this for our home route.\n\nIn our `HomeController.cs` we’ll render the front page where our users can log in with:\n\n```\n    //HomeController.cs\n    \n    // ...\n    Using System.Web.Mvc;\n    // ...\n    public class HomeController : Controller\n    {\n        public ActionResult Index()\n        {\n            if ( Session[\"user\"] != null ) {\n                return Redirect(\"/chat\");\n            }\n    \n            return View();\n        }\n    }\n```\n\n\u003e 💡 The `View` function creates a view response which we return. When it is invoked, C# looks for the default view of the calling controller class. This default view is the `index.cshtml` file found in the Views directory, in a directory with the same name as the Controller i.e. The default view of the HomeController class will be the `Views/Home/index.cshtml` file.\n\n\n### Setting up our database\n\nIn order to implement our login feature, we’ll need a database to store users. There are several database drivers to choose from but, in this tutorial, we’ll use the MySQL database driver along with a .NET ORM called Entity Framework.\n\nWe will start by installing the `MySql.Data.Entities` package via NuGet (.NET’s package manager). And then, we’ll install the **Entity Framework** package also via NuGet, to provide us with our ORM functionality.\n\n\n\u003e 💡 To install packages using NuGet, right-click the Packages folder in our project solution; select the `Add Package` option; and search and select your desired package.\n\nOnce our packages have been installed, we will begin setting up our database connection and communication.\n\nFirst, we will add our database connection credentials to the `Web.config` file found in our solution folder. In `Web.config` we will add:\n\n```\n    \u003cconnectionStrings\u003e\n        \u003cadd name=\"YourConnectionName\" connectionString=\"Server=localhost;Database=database_name;Uid=root;Pwd=YourPassword;\" providerName=\"MySql.Data.MySqlClient\" /\u003e\n    \u003c/connectionStrings\u003e\n```\n\n\u003e ⚠️  You will need to replace the placeholder values in the snippet above with actual values database values.\n\nThe `Web.config` file is an **XML** file and the above `connectionStrings` element will be added in the body of the `configuration` element of the file.\n\nNext, we’ll create a `Models` folder inside our solution folder (on the same folder level as `Controllers`). In this folder, we will create our model class - this class is a representation of our table. For the login feature we will create the `User.cs` file. In this class file, we will add the properties of our model:\n\n```\n    // File: User.cs file\n    \n    using System;\n    using System.Collections.Generic;\n    namespace HeyChat.Models\n    {\n        public class User\n        {\n            public User()\n            {\n            }\n    \n            public int id { get; set; }\n            public string name { get; set; }\n            public DateTime created_at { get; set; }\n        }\n    }\n```\n\n\u003e 💡 To create a model class, right-click the Model folder, select the `Add` and `New File` options, and then `Empty Class` option filling in the class name.\n\nOur `User` model defines an ID for unique identification, user’s name and created date of the user for our users table.\n\nFinally, we will add our database context class. This class reads in the database connection configuration we defined in the `Web.config` file and takes the Model classes (Datasets) to which it should apply the configuration.\n\nWe will create our context class in our `Models` folder, following the same steps of creating a new empty class, and we will name it `ChatContext.cs`. In it, we will add the following:\n\n```\n    // File: ChatContext.cs\n    \n    using System;\n    using System.Data.Entity;\n    namespace HeyChat.Models\n    {\n        public class ChatContext: DbContext\n        {\n            public ChatContext() : base(\"YourConnectionName\")\n            {\n            }\n    \n            public static ChatContext Create()\n            {\n                return new ChatContext();\n            }\n    \n            public DbSet\u003cUser\u003e Users { get; set; }\n        }\n    }\n```\n\n\u003e 💡 We are implementing the Entity Framework ORM using the Code First method. This method involves writing the code defining our models (tables) without any existing database or tables. With this method, the database and tables will be created when our application code is executed.\n\n### Logging in our users\n\nSince our database connection and model (though as we go along more models may be introduced) have been created, we can proceed with our login functionality.\n\nThe front page rendered from the `HomeController` will consist of a form that accepts a user’s name. This form will be submitted to the `/``login` route which we defined earlier. Following our route definition, this request will be handled by the `AuthController` and its `Login` action method.\n\nWe will create the `AuthController` class and add our code for storing or retrieving a user’s details. The option to either store or retrieve will be based on if the user’s name already exists in our `Users` Table. The code for the `AuthController` is below:\n\n```\n    // File: AuthController\n    \n    // ...\n    using HeyChat.Models;\n    public class AuthController : Controller\n    {\n        [HttpPost]\n        public ActionResult Login()\n        {\n            string user_name = Request.Form[\"username\"];\n    \n            if (user_name.Trim() == \"\") {\n                return Redirect(\"/\");\n            }\n    \n            using (var db = new Models.ChatContext()) {\n    \n                User user = db.Users.FirstOrDefault(u =\u003e u.name == user_name);\n    \n                if (user == null) {\n                    user = new User { name = user_name };\n    \n                    db.Users.Add(user);\n                    db.SaveChanges();\n                }\n    \n                Session[\"user\"] = user;\n            }\n    \n            return Redirect(\"/chat\");\n        }\n    }\n```\n\nIn the code above, we check if a user exists using the name. If it exists we retrieve the user’s details and, if it doesn’t, we create a new record first. Then we assign the user’s details into a `session` object for use throughout the application. Lastly, we redirect the user to the chat page.\n\n### Rendering the chat page\n\nOne feature of most Chat applications is the ability to choose who to chat with. For the purpose of this tutorial, we will assume all registered users can chat with each other so our chat page will offer the possibility of chatting with any of the users stored in our database.\n\nEarlier, we defined our chat route and assigned it to the `ChatController` class and its `Index` action method. \n\nLet’s create the `ChatController` and implement the rendering of the chat page with available contacts. Paste the code below into the `ChatController`:\n\n```\n    // File: ChatController\n    \n    // ...\n    using HeyChat.Models;\n    \n    namespace HeyChat.Controllers\n    {\n        public class ChatController : Controller\n        {\n            public ActionResult Index()\n            {\n                if (Session[\"user\"] == null) {\n                    return Redirect(\"/\");\n                }\n    \n                var currentUser = (Models.User) Session[\"user\"];\n    \n                using ( var db = new Models.ChatContext() ) {\n    \n                    ViewBag.allUsers = db.Users.Where(u =\u003e u.name != currentUser.name )\n                                     .ToList();\n                }\n    \n    \n                ViewBag.currentUser = currentUser;\n    \n    \n                return View ();\n            }\n        }\n    }\n```\n\nTo get the available contacts, we read all the users in our database except the current user. These users are passed to our client side using `ViewBag`. We also pass the current user using `ViewBag`.\n\nNow that we have retrieved all the available contacts into the `ViewBag` object, we will create the markup for displaying these contacts and the rest of the chat page to the user. To create the view file for our chat page, we create a `Chat` folder in the `Views` folder. \n\nNext, right click the `Chat` folder, select the options to `Add` → `Views`, select the Razor template engine and name the file `index.cshtml`. Paste in the code below into the file: \n\n```\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n        \u003ctitle\u003epChat \u0026mdash; Private Chatroom\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"@Url.Content(\"~/Content/app.css\")\"\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003c!-- Navigation Bar --\u003e\n        \u003cnav class=\"navbar navbar-inverse\"\u003e\n          \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"navbar-header\"\u003e\n              \u003ca class=\"navbar-brand\" href=\"#\"\u003epChat - @ViewBag.currentUser.name \u003c/a\u003e\n            \u003c/div\u003e\n            \u003cul class=\"nav navbar-nav navbar-right\"\u003e\n              \u003cli\u003e\u003ca href=\"#\"\u003eLog Out\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/div\u003e\n        \u003c/nav\u003e\n        \u003c!-- / Navigation Bar --\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-xs-12 col-md-3\"\u003e\n              \u003caside class=\"main visible-md visible-lg\"\u003e\n                \u003cdiv class=\"row\"\u003e\n                  \u003cdiv class=\"col-xs-12\"\u003e\n                    \u003cdiv class=\"panel panel-default users__bar\"\u003e\n                      \u003cdiv class=\"panel-heading users__heading\"\u003e\n                        Contacts (@ViewBag.allUsers.Count)\n                      \u003c/div\u003e\n                      \u003cdiv class=\"__no__chat__\"\u003e\n                          \u003cp\u003eSelect a contact to chat with\u003c/p\u003e\n                      \u003c/div\u003e\n                      \u003cdiv class=\"panel-body users__body\"\u003e\n                        \u003cul id=\"contacts\" class=\"list-group\"\u003e\n    \n                        @foreach( var user in @ViewBag.allUsers ) {\n                            \u003ca class=\"user__item contact-@user.id\" href=\"#\" data-contact-id=\"@user.id\" data-contact-name=\"@user.name\"\u003e\n                                \u003cli\u003e\n                                  \u003cdiv class=\"avatar\"\u003e\n                                     \u003cimg src=\"@Url.Content(\"~/Content/no_avatar.png\")\"\u003e\n                                  \u003c/div\u003e\n                                  \u003cspan\u003e@user.name\u003c/span\u003e\n                                  \u003cdiv class=\"status-bar\"\u003e\u003c/div\u003e\n                                \u003c/li\u003e\n                            \u003c/a\u003e\n                        }\n                        \u003c/ul\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/aside\u003e\n    \n    \n            \u003c/div\u003e\n            \u003cdiv class=\"col-xs-12 col-md-9 chat__body\"\u003e\n              \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-xs-12\"\u003e\n                  \u003cul class=\"list-group chat__main\"\u003e\n    \n                  \u003c/ul\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"chat__type__body\"\u003e\n                  \u003cdiv class=\"chat__type\"\u003e\n                    \u003ctextarea id=\"msg_box\" placeholder=\"Type your message\"\u003e\u003c/textarea\u003e\n                    \u003cbutton class=\"btn btn-primary\" id=\"sendMessage\"\u003eSend\u003c/button\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"chat__typing\"\u003e\n                  \u003cspan id=\"typerDisplay\"\u003e\u003c/span\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"@Url.Content(\"~/Content/app.js\")\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```  \n\n\u003e 💡 `@Url.Content(\"~/Content/app.css\")` and `@Url.Content(\"~/Content/app.js\")` load some previously bundled JavaScript and CSS dependencies such as jQuery and Bootstrap from our `Content` folder.\n\nIn our view file, we create a sidebar and loop through the users passed to `ViewBag` to indicate the contacts available using Razor’s `@foreach` directive. We also add a text area to type and send messages to these contacts.\n\n### Selecting contacts and sending messages\n\nWhen our user selects a contact to chat with, we would like to retrieve the previous messages between the user and the selected contact. In order to achieve this, we would need a table for storing messages between users and a Model for this table.\n\nLet’s create a model called `Conversations` in the `Models` folder. It will consist of a unique `id`, `sender_id`, `receiver_id`, `message`, `status` and the `created_at` date. The code for the model is below:\n\n```\n    // File: Conversation.cs\n    \n    using System;\n    namespace HeyChat.Models\n    {\n        public class Conversation\n        {\n            public Conversation()\n            {\n                status = messageStatus.Sent;\n            }\n    \n            public enum messageStatus\n            {\n                Sent, \n                Delivered\n            }\n    \n            public int id { get; set; }\n            public int sender_id { get; set; }\n            public int receiver_id { get; set; }\n            public string message { get; set; }\n            public messageStatus status { get; set; }\n            public DateTime created_at { get; set; }\n        }\n    } \n```\n\nAfter creating the `Conversation` model, we will add it to the `ChatContext` file as seen below:\n\n```\n    // File: ChatContext.cs\n    using System;\n    using System.Data.Entity;\n    \n    namespace HeyChat.Models\n    {\n        public class ChatContext: DbContext\n        {\n            public ChatContext() : base(\"MySqlConnection\")\n            {\n            }\n    \n            public static ChatContext Create()\n            {\n                return new ChatContext();\n            }\n    \n            public DbSet\u003cUser\u003e Users { get; set; }\n            public DbSet\u003cConversation\u003e Conversations { get; set; }\n        }\n    }\n```\n\nTo retrieve the messages, we will create a route for `/contact``/conversations/{contact}`. This route will accept a contact ID, retrieve messages between the current user and the contact, then return the messages in a JSON response. \n\nIt will be handled by the `ChatController` in the `ConversationWithContact` action method as seen below:\n\n```\n    //ChatController.cs\n    \n    ...\n    public JsonResult ConversationWithContact(int contact)\n    {\n        if (Session[\"user\"] == null)\n        {\n            return Json(new { status = \"error\", message = \"User is not logged in\" });\n        }\n    \n        var currentUser = (Models.User)Session[\"user\"];\n    \n        var conversations = new List\u003cModels.Conversation\u003e();\n    \n        using (var db = new Models.ChatContext())\n        {\n            conversations = db.Conversations.\n                              Where(c =\u003e (c.receiver_id == currentUser.id \n                                  \u0026\u0026 c.sender_id == contact) || \n                                  (c.receiver_id == contact \n                                  \u0026\u0026 c.sender_id == currentUser.id))\n                              .OrderBy(c =\u003e c.created_at)\n                              .ToList();\n        }\n    \n        return Json(\n            new { status = \"success\", data = conversations }, \n            JsonRequestBehavior.AllowGet\n        );\n    }\n```\n\nNow that we have a route to retrieve old messages, we will use some jQuery to select the user, fetch the messages and display them on our page.\nIn our view file, we will create a `script` tag to hold our JavaScript and jQuery functions. In it, we’ll add:\n\n```\n    ...\n    \u003cscript\u003e\n    let currentContact = null; // Holds current contact\n    let newMessageTpl = \n    `\u003cdiv\u003e\n        \u003cdiv id=\"msg-{{id}}\" class=\"row __chat__par__\"\u003e\n          \u003cdiv class=\"__chat__\"\u003e\n            \u003cp\u003e{{body}}\u003c/p\u003e\n            \u003cp class=\"delivery-status\"\u003eDelivered\u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n     \u003c/div\u003e`;\n    ...\n    // select contact to chat with\n    $('.user__item').click( function(e) {\n        e.preventDefault();\n    \n        currentContact = {\n            id: $(this).data('contact-id'),\n            name: $(this).data('contact-name'),\n        };\n    \n        $('#contacts').find('li').removeClass('active');\n    \n        $('#contacts .contact-' + currentContact.id).find('li').addClass('active');\n        getChat(currentContact.id);\n    });\n    \n    // get chat data        \n    function getChat( contact_id ) {\n        $.get(\"/contact/conversations/\" + contact_id )\n         .done( function(resp) {         \n            var chat_data = resp.data || [];\n            loadChat( chat_data );         \n         });\n    }\n    \n    //load chat data into view\n    function loadChat( chat_data ) {\n    \n        chat_data.forEach( function(data) {\n            displayMessage(data);\n        });\n    \n        $('.chat__body').show();\n        $('.__no__chat__').hide();\n    }\n    \n    function displayMessage( message_obj ) {\n        const msg_id = message_obj.id;\n        const msg_body = message_obj.message;\n    \n        let template = $(newMessageTpl).html();\n    \n        template = template.replace(\"{{id}}\", msg_id);\n        template = template.replace(\"{{body}}\", msg_body);\n    \n        template = $(template);\n    \n        if ( message_obj.sender_id == @ViewBag.currentUser.id ) {\n            template.find('.__chat__').addClass('from__chat');\n        } else {\n            template.find('.__chat__').addClass('receive__chat');\n        }\n    \n        if ( message_obj.status == 1 ) {\n            template.find('.delivery-status').show();\n        }\n    \n        $('.chat__main').append(template);\n    }\n```\n\nNow that selecting a contact retrieves previous messages, we need our user to be able to send new messages. To achieve this, we will create a route that accepts the message being sent and saves it to the database, and then use some jQuery to read the message text from the `textarea` field and send to this route.\n\n```\n    //RouteConfig.cs\n    \n    ...\n    routes.MapRoute(\n        name: \"SendMessage\",\n        url: \"send_message\",\n        defaults: new { controller = \"Chat\", action = \"SendMessage\" }\n    );\n```\n\nAs specified in the `RouteConfig` file, this route will be handled by the `SendMessage` action method of the `ChatController`.\n\n```\n    //ChatController.cs\n    \n    ...\n    [HttpPost]\n    public JsonResult SendMessage() \n    {\n        if (Session[\"user\"] == null)\n        {\n            return Json(new { status = \"error\", message = \"User is not logged in\" });\n        }\n    \n        var currentUser = (User)Session[\"user\"];\n    \n        string socket_id = Request.Form[\"socket_id\"];\n    \n        Conversation convo = new Conversation\n        {\n            sender_id = currentUser.id,\n            message = Request.Form[\"message\"],\n            receiver_id = Convert.ToInt32(Request.Form[\"contact\"])\n        };\n    \n        using ( var db = new Models.ChatContext() ) {\n            db.Conversations.Add(convo);\n            db.SaveChanges();\n        }\n    \n        return Json(convo);\n    }\n```\n\n### Adding realtime functionality\n\nThere are several features of a chat application that require realtime functionality, some of which are:\n- Receiving messages sent in realtime.\n- Being notified of an impending response - the ‘user is typing’ feature.\n- Getting message delivery status.\n- Instant notification when a contact goes offline or online.\n\nIn achieving these features, we will make use of [Pusher](http://pusher.com). To proceed lets head over to the Pusher [dashboard](https://dashboard.pusher.com/) and create an app. You can [register for free](https://pusher.com/signup?plan=sandbox) if you haven’t got an account. Fill out the create app form with the information requested. Next, we’ll install the **Pusher Server** package in our C# code using NuGet.\n\nTo achieve some of our stated realtime features, we will need to be able to trigger events on the client side. In order to trigger client events in this application, we will make use of Private Channels. \n\nWe will create our private channel when a contact is chosen. This channel will be used to transmit messages between the logged in user and the contact he is sending a message to.\n\nPrivate channels require an authentication endpoint from our server side code to be available, because when the channel is instantiated Pusher will try to authenticate that the client has valid access to the channel.\n\nThe default route for Pusher's authentication request is `/pusher/auth`, so we will create this route and implement the authentication.\n\nFirst in our `RouteConfig.cs` file we will add the route definition:\n\n```\n    routes.MapRoute(\n        name: \"PusherAuth\",\n        url:  \"pusher/auth\",\n        defaults: new { controller = \"Auth\", action = \"AuthForChannel\"}\n    );\n```\n\nThen, as we have defined above, in the `AuthController` class file we will create the `AuthForChannel` action method and add:\n\n```\n    public JsonResult AuthForChannel(string channel_name, string socket_id)\n    {\n        if (Session[\"user\"] == null)\n        {\n            return Json(new { status = \"error\", message = \"User is not logged in\" });\n        }\n        var currentUser = (Models.User)Session[\"user\"];\n        \n        var options = new PusherOptions();\n        options.Cluster = \"PUSHER_APP_CLUSTER\";\n        \n        var pusher = new Pusher(\n        \"PUSHER_APP_ID\",\n        \"PUSHER_APP_KEY\",\n        \"PUSHER_APP_SECRET\", options);\n        \n        if (channel_name.IndexOf(currentUser.id.ToString()) == -1)\n        {\n            return Json(\n              new { status = \"error\", message = \"User cannot join channel\" }\n            );\n        }\n    \n        var auth = pusher.Authenticate(channel_name, socket_id);\n    \n        return Json(auth);\n    }\n```\n\nOur authentication endpoint, above, takes the name of the channel and the socket ID of the client, which are sent by Pusher at a connection attempt. \n\n\n\u003e 💡 We will name our private channels using the IDs of the participants of the conversation i.e. the sender and receiver. This we will use to restrict the message from being broadcast to other users of the Messenger app that are not in the specific conversation.\n\nUsing the .NET `PusherServer` library, we authenticate the user by passing the channel name and socket ID. Then we return the resulting object from authentication via JSON.\n\nFor more information on client events and private channels, kindly check out the Pusher [documentation](https://pusher.com/docs/client_api_guide/client_presence_channels).\n\n\n\u003e 💡 Client events can only be triggered by private or presence channels.\n\nIn the script section of our view, we will instantiate the variable for our private channel. We will also adjust our contact selecting snippet to also create the channel for sending messages, typing and delivery notifications:\n\n```\n    ...\n    \u003cscript\u003e\n    ...\n    \n    let currentContact = null; // Holds contact currently being chatted with\n    let socketId = null;\n    let currentconversationChannel = null;\n    let conversationChannelName = null;\n    \n    //Pusher client side setup\n    const pusher = new Pusher('PUSHER_APP_ID', {\n        cluster:'PUSHER_APP_CLUSTER'\n    });\n    \n    pusher.connection.bind('connected', function() {\n      socketId = pusher.connection.socket_id;\n    });\n    \n    // select contact to chat with\n    $('.user__item').click( function(e) {\n        e.preventDefault();\n    \n        currentContact = {\n            id: $(this).data('contact-id'),\n            name: $(this).data('contact-name'),\n        };\n    \n        if ( conversationChannelName ) {\n            pusher.unsubscribe( conversationChannelName );\n        }\n    \n        conversationChannelName = getConvoChannel( \n                                      (@ViewBag.currentUser.id * 1) ,  \n                                      (currentContact.id * 1) \n                                  );\n    \n        currentconversationChannel = pusher.subscribe(conversationChannelName);\n        \n        bind_client_events();\n                                    \n        $('#contacts').find('li').removeClass('active');\n    \n        $('#contacts .contact-' + currentContact.id).find('li').addClass('active');\n        getChat(currentContact.id);\n    });\n    \n    function getConvoChannel(user_id, contact_id) {\n        if ( user_id \u003e contact_id ) {\n            return 'private-chat-' + contact_id + '-' + user_id;\n        }\n    \n        return 'private-chat-' + user_id + '-' + contact_id;\n    }\n    \n    function bind_client_events(){\n      //bind private channel events here  \n    \n      currentconversationChannel.bind(\"new_message\", function(msg) {\n          //add code here\n      });\n    \n      currentconversationChannel.bind(\"message_delivered\", function(msg) {\n          $('#msg-' + msg.id).find('.delivery-status').show();\n      });\n    }\n```\n\nWe have also saved the `socket_id` used to connect to the channel in a variable. This will come in handy later.\n\n#### Receiving messages sent in realtime\nEarlier, we added a route to save messages sent as conversations between the user and a contact. \n\nHowever, after these messages are saved, we would like the messages to be added to the screen of both the user and contact.\n\nFor this to work, in our C# code, after storing the message we will trigger an event via our Pusher private channel. Our clients will then listen to these events and respond to them by adding the messages they carry to the screen.\n\nIn our `ChatController` class file, after saving the conversation we will add  the following:\n\n```\n    private Pusher pusher;\n    \n    //class constructor\n    public ChatController() \n    {\n        var options = new PusherOptions();\n        options.Cluster = \"PUSHER_APP_CLUSTER\";\n    \n        pusher = new Pusher(\n           \"PUSHER_APP_ID\",\n           \"PUSHER_APP_KEY\",\n           \"PUSHER_APP_SECRET\",\n           options\n       );\n    }\n    \n    [HttpPost]\n    public JsonResult SendMessage() \n    {\n        if (Session[\"user\"] == null)\n        {\n            return Json(new { status = \"error\", message = \"User is not logged in\" });\n        }\n    \n        var currentUser = (User)Session[\"user\"];\n    \n        string socket_id = Request.Form[\"socket_id\"];\n    \n        Conversation convo = new Conversation\n        {\n            sender_id = currentUser.id,\n            message = Request.Form[\"message\"],\n            receiver_id = Convert.ToInt32(Request.Form[\"contact\"])\n        };\n    \n        using ( var db = new Models.ChatContext() ) {\n            db.Conversations.Add(convo);\n            db.SaveChanges();\n        }\n        \n        var conversationChannel = getConvoChannel( currentUser.id, contact);\n    \n        pusher.TriggerAsync(\n          conversationChannel,\n          \"new_message\",\n          convo,\n          new TriggerOptions() { SocketId = socket_id });\n    \n        return Json(convo);\n    }\n    \n    private String getConvoChannel(int user_id, int contact_id)\n    {\n        if (user_id \u003e contact_id)\n        {\n            return \"private-chat-\" + contact_id + \"-\" + user_id;\n        }\n    \n        return \"private-chat-\" + user_id + \"-\" + contact_id;\n    }\n```\n\nTo make use of the Pusher server-side functionality, we will add `using PusherServer;` to the top of our controller file.\n\n\u003e 💡 We have accepted the `socket_id` from the user when sending the message. This is so that we can specify that the sender is exempted from listening to the event they broadcast.\n\nIn our view, we will listen to the `new_message` event and use this to add the new message to our view.\n\n```\n    //index.cshtml\n    \n    ...\n    \u003cscript\u003e\n    ...\n    //Send button's click event\n    $('#sendMessage').click( function() {\n        $.post(\"/send_message\", {\n            message: $('#msg_box').val(),\n            contact: currentContact.id,\n            socket_id: socketId,\n        }).done( function (data) {\n            //display the message immediately on the view of the sender\n            displayMessage(data); \n            $('#msg_box').val('');\n        });\n    });\n    \n    function bind_client_events(){\n        //listening to the message_sent event by the message's recipient\n        currentconversationChannel.bind(\"new_message\", function(msg) {\n                if ( msg.receiver_id == @ViewBag.currentUser.id ) {\n                    displayMessage(msg);\n                }\n        });\n    }\n```\n\n#### Implementing the typing indicator feature\nThis feature makes users aware that the conversation is active and a response is being typed. To achieve it, we will listen to the `keyup` event of our message text area and, upon the occurrence of this `keyup` event, we will trigger a client event called `client-is-typing`.\n\n```\n    // index.cshtml\n    \n    function bind_client_events(){\n        currentconversationChannel.bind(\"client-is-typing\", function(data) {\n            if ( data.user_id == currentContact.id \u0026\u0026 \n                 data.contact_id == @ViewBag.currentUser.id  ) {\n    \n                $('#typerDisplay').text( currentContact.name + ' is typing...');\n            \n                $('.chat__typing').fadeIn(100, function() {\n                    $('.chat__type__body').addClass('typing_display__open');\n                }).delay(1000).fadeOut(300, function(){\n                    $('.chat__type__body').removeClass('typing_display__open');\n                });\n            }\n        });\n        \n        ...\n    }\n    \n    //User is typing\n    var isTypingCallback = function() {\n        chatChannel.trigger(\"client-is-typing\", {\n            user_id: @ViewBag.currentUser.id,\n            contact_id: currentContact.id,\n        });\n    };\n    \n    $('#msg_box').on('keyup',isTypingCallback);\n    ...\n```\n\n## Conclusion\n\nWe have built a chat application with some of its basic features in C# with the help of jQuery, and have also implemented some of the common realtime features present in chat applications using Pusher.","metaTitle":"Build a chat app using ASP.NET","metaDescription":"In this tutorial, learn how to create a chat app using ASP.NET and jQuery."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1jeVDH5XtgiCsga6e2kk8o","type":"Entry","createdAt":"2018-02-28T11:59:47.112Z","updatedAt":"2018-02-28T11:59:47.112Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a typing indicator in ASP.NET","url":"typing-indicator-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/Whos-Typing-In-.NET","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6xamBfB840ckYKOkIMm6sM","type":"Entry","createdAt":"2018-02-12T14:51:11.677Z","updatedAt":"2018-02-26T12:31:15.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"C#","url":"c-sharp","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-12-27","description":"Learn how to implement a typing indicator feature in your chat application using Pusher, .NET, C# code and some jQuery. ","prerequisite":"A basic understanding of ASP.NET and jQuery is needed to follow this tutorial.","content":"When building chat apps, knowing when the person you are chatting with is typing a message can improve the user experience. It gives you some feedback that you’re not alone in the conversation and a message is coming your way. In this tutorial, we will go through some simple steps to achieve this feature using C# .NET and Pusher.\n\nAt the end of this tutorial we will have something like this:\n\n![typing-indicator-aspnet-demo](//images.contentful.com/1es3ne0caaid/2h9vYP6DgE6ogoCGWYo0iC/373ee99c9759d752c7f4ae8de3c30e95/typing-indicator-aspnet-demo.gif)\n\nThis tutorial assumes prior knowledge of:\n- C#\n- .NET MVC and\n- JavaScript (jQuery)\n\nWhen you’re ready, let’s begin.\n\n## Setting up Our Project\n\nWe’ll be using [Visual Studio](https://www.visualstudio.com/), which is an IDE popularly used for building .NET projects. Visual Studio 2017 is free and available for popularly used Operating Systems. You can view installation details [here](https://www.visualstudio.com/).\n\nAfter installing Visual Studio, launch it and create a new project by clicking **New Project** from the dashboard. Following the **New Project** wizard we:\n  - Set C# as our language to use,\n  - Select .NET MVC Project as the template,\n  - Fill in the Project name e.g. HeyChat (any name would do),\n  - Fill in the Solution name i.e. application name (HeyChat or any name would do).\n\n![typing-indicator-aspnet-project-setup](//images.contentful.com/1es3ne0caaid/1W1rwWoPRKuYackWIoaKcC/ee799f944c1645065642a9b0c5279972/typing-indicator-aspnet-project-setup.gif)\n\n## Writing the server-side (C#) Code\n\nTo achieve a typing indicator, our chat app needs to be able to recognize who is typing at any given time. For this, we will add some limited form of identification. We’re not doing any authentication at all because this tutorial does not require it.\n\n\n\u003e 💡 For the purpose of this tutorial, we will assume this chat is open to all users and all that is required is that our user specifies their name on first entry.\n\n\n### Route definition\n\nWe can define some of the routes that we need to make this feature, which are:\n\n\n  - A home route which renders the first page that takes the user’s name.\n  - A login route which accepts a `POST` request of the user’s name.\n  - A chat route which renders the chat view.\n  \n\u003e 💡 We may need some other routes as we go along but this is enough for starters.\n\nTo add these routes, we open the `RouteConfig.cs` file in the  `App_Start` directory of our application. And in it, we add the routes we have defined.\n\n```\n    routes.MapRoute(\n        name: \"Home\",\n        url: \"\",\n        defaults: new { controller = \"Home\", action = \"Index\" }\n    );\n    \n    routes.MapRoute(\n        name: \"Login\",\n        url: \"login\",\n        defaults: new { controller = \"Login\", action = \"Index\" }\n    );\n    \n    routes.MapRoute(\n        name: \"ChatRoom\",\n        url: \"chat\",\n        defaults: new {controller = \"Chat\", action=\"Index\"}\n    );\n```\n\nUsing the **Home** route as a sample, the route definition states that `/` requests will be handled by the `HomeController` which is found in the `Controllers/HomeController.cs` file and the `Index` method of that controller. Next, we create the controllers we need.\n\n### Creating controllers and action methods\n\nTo create a new controller, right-click the **Controller** directory and select `Add → Controller`. In the resulting form, we type in the name of our controller and select the empty template.\n\n\u003e 💡 When our application is created, it includes a HomeController with an Index action method by default, so we’ll perform the above steps to create our LoginController and ChatController.\n\nIn our LoginController class, we create the Index action method specifying `[HttpPost]` at the top of the action method to indicate that it handles `POST` requests.\n\n```\n    public class LoginController : Controller\n    {\n        [HttpPost]\n        public ActionResult Index()\n        {\n          \n        }\n    }\n```\n\nThe Index action of the LoginController will receive the request payload, read the username from the payload and assign it to the current user session, then redirect our user to the chat page. When we add this to our action method we’ll have\n\n```\n    public class LoginController : Controller\n    {\n        [HttpPost]\n        public ActionResult Index()\n        {\n            string user = Request.Form[\"username\"];\n            if (user.Trim() == \"\") {\n                return Redirect(\"/\");\n            }\n            Session[\"user\"] = user;\n            return Redirect(\"/chat\");\n        }\n    }\n```\n\n\u003e 💡 In a real-world chat app, we would add the user to a database and mark the user as logged in for other users to see available chat options, but that is beyond the scope of this tutorial so adding to a session will suffice.\n\nIn our ChatController class, we will add the Index action method. The Index action of the ChatController will render our chat view and pass along the current user to the view.\n\n```\n    public class ChatController : Controller\n    {\n        public ActionResult Index()\n        {\n            if (Session[\"user\"] == null) {\n                return Redirect(\"/\");\n            }\n    \n            ViewBag.currentUser = Session[\"user\"];\n    \n            return View ();\n        }\n    }\n```\n\n\u003e 💡 By default, action methods handle `GET` requests so we will not need to add `[HttpGet]` to the top of our method. We’ve also added a simple check to prevent access to the chat page if there is no logged in user.\n\nLet’s not forget about our Home route. In the HomeController we’ll add the code to render the front page.\n\n```\n    public class HomeController : Controller\n    {\n        public ActionResult Index()\n        {\n            if ( Session[\"user\"] != null ) {\n                return Redirect(\"/chat\");\n            }\n    \n            return View();\n        }\n    }\n```\n\n\u003e 💡 We’ve also added a small check to prevent multiple logins in the same user session.\n\nAt this point, we’ve created the Controllers and methods to serve our views (which we haven’t created yet) so trying to run this will give you some errors! Let’s fix that.\n\n## Implementing the application’s views\n\nBased on the routes we’ve defined so far, we will need two views:\n  - The front page view with the login form - served by the `Index`action method of the `HomeController` class\n  - The chat view where the typing indicator feature will be seen - served by `ChatController`  class’  `Index` action method\n\n\n### Front page/log in page\n\nFor our front page, we create a page with a form consisting of a field to type in your username and a button to submit for login. Referring to our controller code:\n\n```\n    public class HomeController : Controller\n    {\n        public ActionResult Index()\n        {\n            if ( Session[\"user\"] != null ) {\n                return Redirect(\"/chat\");\n            }\n            return View();\n        }\n    }\n```\n\n\u003e 💡 The **View** function creates a view response which we return. When **View()** is invoked, C# looks for the default view of the calling controller class. This default view is the `index.cshtml` file found in the **Views** directory, in a directory with the same name as the Controller. \n\u003e i.e. The default view of the HomeController class will be the `Views/Home/index.cshtml`  file.\n\nTo create our `HomeController` default view, we:\n- Right-click on the Views directory and select `Add New Folder`,\n- Fill in **Home** as the folder name,\n- Right click the newly created **Home** folder and select `Add New View`,\n- Fill in the view name (in our case **index**), select `Razor` as the view engine and click ok.\n\nNow that we’ve created our front page view file, we’ll add the markup for the login form.\n\n```\n    \u003cdiv class=\"container\"\u003e\n      \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-5 col-md-offset-4\"\u003e\n          \u003cdiv class=\"panel panel-default\"\u003e\n            \u003cdiv class=\"panel-body\"\u003e\n              \u003cform action=\"/login\" method=\"post\" style=\"margin:0\"\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                  \u003cinput type=\"text\" name=\"username\" id=\"username\" \n                      placeholder=\"Enter Username\" class=\"form-control\" \n                      required minlength=\"3\" maxlength=\"15\" /\u003e\n                \u003c/div\u003e\n                \u003cbutton type=\"submit\" class=\"btn btn-primary btn-block\"\u003e\n                  Enter Chat\n                \u003c/button\u003e\n              \u003c/form\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n### The chat page\n\nWe’ll create the view for the chat page following the same steps as above but using `Chat` as our folder name rather than `Home`.\n\nIn the chat view, we add markup up to give us a sidebar of available users and an area for chatting.\n\n```\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n      \u003ctitle\u003epChat \u0026mdash; Private Chatroom\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" href=\"@Url.Content(\"~/Content/app.css\")\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n            @{\n                var currentUser = ViewBag.currentUser;\n            }\n        \u003c!-- Navigation Bar --\u003e\n        \u003cnav class=\"navbar navbar-inverse\"\u003e\n          \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"navbar-header\"\u003e\n              \u003ca class=\"navbar-brand\" href=\"#\"\u003epChat\u003c/a\u003e\n            \u003c/div\u003e\n            \u003cul class=\"nav navbar-nav navbar-right\"\u003e\n              \u003cli\u003e\u003ca href=\"#\"\u003eLog Out\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/div\u003e\n        \u003c/nav\u003e\n        \u003c!-- / Navigation Bar --\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-xs-12 col-md-3\"\u003e\n              \u003caside class=\"main\"\u003e\n                \u003cdiv class=\"row\"\u003e\n                  \u003cdiv class=\"col-xs-12\"\u003e\n                    \u003cdiv class=\"panel panel-default users__bar\"\u003e\n                      \u003cdiv class=\"panel-heading users__heading\"\u003e\n                        Online Users (1)\n                      \u003c/div\u003e\n                      \u003cdiv class=\"panel-body users__body\"\u003e\n                        \u003cul class=\"list-group\"\u003e\n                        @if( @currentUser == \"Daenerys\" ) {\n                            \u003cli class=\"user__item\"\u003e\n                                \u003cdiv class=\"avatar\"\u003e\u003c/div\u003e \u003ca href=\"#\"\u003eJon\u003c/a\u003e\n                            \u003c/li\u003e\n                        } else if( @currentUser == \"Jon\") {\n                            \u003cli class=\"user__item\"\u003e\n                                \u003cdiv class=\"avatar\"\u003e\u003c/div\u003e \u003ca href=\"#\"\u003eDaenerys\u003c/a\u003e\n                            \u003c/li\u003e\n                        }\n                        \u003c/ul\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/aside\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-xs-12 col-md-9 chat__body\"\u003e\n              \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-xs-12\"\u003e\n                  \u003cul class=\"list-group chat__main\"\u003e\n                    \u003cdiv class=\"row __chat__par__\"\u003e\n                      \u003cdiv class=\"__chat__ from__chat\"\u003e\n                        \u003cp\u003eDid you see Avery's sword???\u003c/p\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"row __chat__par__\"\u003e\n                      \u003cdiv class=\"__chat__ receive__chat\"\u003e\n                        \u003cp\u003eErr Looked normal to me...\u003c/p\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"row __chat__par__\"\u003e\n                      \u003cdiv class=\"__chat__ receive__chat\"\u003e\n                        \u003cp\u003emaybe I'm a hater\u003c/p\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"row __chat__par__\"\u003e\n                      \u003cdiv class=\"__chat__ from__chat\"\u003e\n                        \u003cp\u003eLmaooo\u003c/p\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/ul\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"chat__type__body\"\u003e\n                  \u003cdiv class=\"chat__type\"\u003e\n                    \u003ctextarea id=\"msg_box\" placeholder=\"Type your message\"\u003e\u003c/textarea\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"chat__typing\"\u003e\n                  \u003cspan id=\"typerDisplay\"\u003e\u003c/span\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"@Url.Content(\"~/Content/app.js\")\"\u003e\u003c/script\u003e\n        \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe’re using the [razor template engine](https://en.wikipedia.org/wiki/ASP.NET_Razor), which gives us the ability to read data passed from the C# code and assign them to variables that can be used in our frontend. Using `@{ var currentUser = ViewBag.currentUser }` we have passed in the name of the current user which will come in handy shortly.\n\n\u003e 💡 To keep things quick and simple we have assumed there are only two possible users: **Daenerys** or **Jon**. So using the razor `@if{ }` condition we are showing who is available to chat with.\n\nNow that we have our views in place we can move on to our typing indicator feature!\n\n## Implementing the typing indicator\n### Listening for the typing event\n\nOn most chat applications, the feature becomes visible when someone is typing, so to implement we’ll start off by listening to the typing event in the chat text area using jQuery. We'll also pass the `currentUser` variable we defined earlier with razor to our script.\n\n```\n    var currentUser = @currentUser;\n          \n    $('#msg_box').on('keydown', function () {\n      //stub\n    });\n```\n\nWe added a listener to the  `keydown` event on our typing area to help us monitor when someone is typing.\n\nNow that we’ve created our listeners, we’ll make our listeners send a message that someone is typing to the other members of the chat. To do this, we’ll create an endpoint in our C# code to receive this request and broadcast it via Pusher. \n\nWe’ll implement all the client code (assuming that our C# endpoint exists, then we’ll actually create the endpoint later).\n\n\n\u003e 💡 To prevent excessive requests to our C# code i.e. sending a request as every key on the keypad is pressed or released, we’ll throttle the sending of the requests using a debounce function. This debounce function just ignores a function for a while if it keeps occurring.\n\n```\n    // Debounce function\n    // Credit: https://davidwalsh.name/javascript-debounce-function\n    \n    // Returns a function, that, as long as it continues to be invoked, will not\n    // be triggered. The function will be called after it stops being called for\n    // N milliseconds. If `immediate` is passed, trigger the function on the\n    // leading edge, instead of the trailing.\n    function debounce(func, wait, immediate) {\n        var timeout;\n        return function() {\n            var context = this, args = arguments;\n            var later = function() {\n                timeout = null;\n                if (!immediate) func.apply(context, args);\n            };\n            var callNow = immediate \u0026\u0026 !timeout;\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n            if (callNow) func.apply(context, args);\n        };\n    };\n```\n\nNow that we have a **debounce** function we’ll create the callback function for our `keydown` event:\n\n```\n    var isTypingCallback = debounce( function() {\n        $.post('/chat/typing', {\n            typer: currentUser,\n        });\n    }, 600, true);\n```\n \n and pass the callback to our event listeners.\n \n```\n    $('#msg_box').on('keydown',isTypingCallback);\n```\n\n### Creating the endpoint triggered by the typing event\n\nEarlier, we had our event listeners send a **POST** request to the `/chat/typing` Route on the client side. Now we’ll create this Route, which will transmit the typing event to other client users using [Pusher](http://pusher.com). \n\nFirst, we’ll create the route for the endpoint in our `RouteConfig.cs` file.\n\n```\n    ...\n    routes.MapRoute(\n        name: \"UserTyping\",\n        url: \"chat/typing\",\n        defaults: new { controller = \"Chat\", action = \"Typing\" }\n    );\n```\n\n\u003e 💡 We’ve created this endpoint to be handled by the **Typing** action method of the **ChatController**\n\nNext, we’ll create our Typing action method in the `ChatController`:\n\n```\n    [HttpPost]\n    public ActionResult Typing()\n    {\n        //stub\n    }\n```\n\n### Using Pusher to make our application update in realtime\n\nOur `/``chat``/``typing` endpoint will receive a post payload of the user who is doing the typing. We’re going to use [Pusher](http://pusher.com) to transmit this to everyone else.\n\nOn our Pusher [dashboard](https://dashboard.pusher.com/), we’ll create a new app filling out the information requested i.e. App name, frontend tech, etc. You can [register for free](https://pusher.com/) if you haven’t got an account. Next, we’ll install the **Pusher Server** package in our C# code using NuGet, a packer manager for .NET.\n\n![typing-indicator-aspnet-add-packages](//images.contentful.com/1es3ne0caaid/5ZUDKcS91uo602ok6iA2ea/a81d8764472938024ff247dd1c92f68e/typing-indicator-aspnet-add-packages.gif)\n\n\u003e 💡 To install the package we right-click the **Packages** directory; Select the **add Package option** and select the **Pusher Server** package.\n\nThen we’ll add the Pusher broadcasting to our **Typing** action event. To use Pusher we’ll have to import the **Pusher Server** namespace in our code.\n\n```\n    ...\n    using PusherServer;\n    \n    namespace HeyChat.Controllers\n    {\n        public class ChatController : Controller\n        {\n          ...\n    \n          [HttpPost]\n          public ActionResult Typing()\n          {\n              string typer        = Request.Form[\"typer\"];\n              string socket_id    = Request.Form[\"socket_id\"];\n          \n              var options = new PusherOptions();\n              options.Cluster = \"PUSHER_APP_CLUSTER\";\n          \n              var pusher = new Pusher(\n              \"PUSHER_APP_ID\",\n              \"PUSHER_APP_KEY\",\n              \"PUSHER_APP_SECRET\", options);\n          \n              pusher.TriggerAsync(\n              \"chat\",\n              \"typing\",\n              new { typer = typer },\n              new TriggerOptions() { SocketId = socket_id });\n          \n              return new HttpStatusCodeResult(200);\n          } \n        ...\n```\n\nWe initialized Pusher using our **PUSHER_APP_ID**, **PUSHER_APP_KEY**, **PUSHER_APP_SECRET**, and **PUSHER_APP_CLUSTER** (be sure to replace these with the actual values from your dashboard); and then broadcast an object containing the* **typer** - which is the person typing - on the* `typing` event via the `chat` channel.\n\n\u003e 💡 We’ve added  `new TriggerOptions() { SocketId = socket_id }` to our Pusher **triggerAsync** function. This is to prevent the sender of the broadcast from receiving the broadcast as well. To do this we’ve assumed we’re receiving `socket_id` in our payload along with `typer`, so on our client side, we’ll add it to the payload sent.\n\nNow, whenever there’s a typing event our C# code broadcasts it on Pusher, all that is left is to listen to that broadcast and display the ‘xxxx is typing…’ feature.\n\nFirst, we’ll initialize Pusher in the script section of our chat page using our **PUSHER_APP_KEY** and **PUSHER_APP_CLUSTER** (once again replace these with the values from your dashboard).\n\n```\n    var pusher = new Pusher('PUSHER_APP_KEY', {\n        cluster:'PUSHER_APP_CLUSTER'\n    });\n```\n\nTo implement the broadcaster exemption we mentioned earlier, we’ll get the socket id from our client `pusher` instance and amend our payload for the typing request to the server to include it.\n\n```\n    var socketId = null;\n    pusher.connection.bind('connected', function() {\n      socketId = pusher.connection.socket_id;\n    });\n    \n    var isTypingCallback = debounce( function() {\n        $.post('/chat/typing', {\n            typer: currentUser,\n            socket_id: socketId // pass socket_id parameter to be used by server\n        });\n    }, 600, true);\n```\n\nNow that Pusher is initialized on our client side, we’ll subscribe to the chat channel and implement our feature using the `typer` passed.\n\n```\n    var channel = pusher.subscribe('chat');\n    \n    channel.bind('typing', function(data) {\n        $('#typerDisplay').text( data.typer + ' is typing...');\n        \n        $('.chat__typing').fadeIn(100, function() {\n            $('.chat__type__body').addClass('typing_display__open');\n        }).delay(1000).fadeOut(300, function(){\n            $('.chat__type__body').removeClass('typing_display__open');\n        });\n    });\n```\n\n## Conclusion\n\nIn this tutorial, we’ve walked through implementing the popular a typing indicator feature using Pusher, .NET, C# code and some jQuery. We’ve also seen how to broadcast messages and avoid the sender responding to a message it sent. ","metaTitle":"Build a typing indicator in ASP.NET","metaDescription":"Learn how to implement a typing indicator feature  in your chat app using Pusher, .NET, C# code and jQuery. Broadcast messages and manage responses correctly."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rGqDofyvusUa4i0CSQ6KE","type":"Entry","createdAt":"2018-02-22T15:02:44.761Z","updatedAt":"2020-06-19T14:29:47.852Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo feed using ASP.NET","url":"photo-feed-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/ASP.NET-PHOTO-FEED","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-09-28","description":"Build a mini system that allows people to upload their photographs in realtime.","prerequisite":"A basic understanding of C# and JavaScript is needed to follow this tutorial.","content":"We will build a mini system that allows people to upload their images/photographs for everyone to view in realtime. While this can be likened to a mini-Instagram, it is without the comment, like and views aspect. Sounds cool? Let’s ride on.\n\n## Setting up a Pusher account and app\n\nPusher is a hosted service that makes it super-easy to add realtime data and functionality to web and mobile applications.\n\nPusher sits as a realtime layer between your servers and your clients. Pusher maintains persistent connections to the clients - over Websockets if possible and falling back to HTTP-based connectivity - so that as soon as your servers have new data they want to push to the clients they can do so via Pusher.\n\nIf you do not already have one, head over to [Pusher](https://Pusher.com) and create a free account.\nWe will register a new app on the dashboard. The only compulsory options are the app name and cluster. A cluster represents the physical location of the Pusher server that will handle your app’s requests. Also, select `jQuery` as the front-end technology, and `ASP.NET` as the back-end tech for this tutorial.  For other projects, you can choose as per your requirements.\nNext, copy out your App ID, Key, and Secret from the `App Keys` section, as we will need them later on.\n\n![photo-feed-aspnet-create-app](//images.contentful.com/1es3ne0caaid/cCYiSwvQicgakmOOEwSMq/2038fcd7642b17465b331d51bcd502b9/photo-feed-aspnet-create-app.png)\n\n## Setting up the ASP.NET project in Visual Studio\n\nThe next thing we need to do is create a new Asp.Net MVC application. \nTo do so, let’s:\n\n- Open Visual Studio and select new project from the sidebar\n- Under templates, select `Visual C#`\n- Next, select web\n- In the middle section, select `ASP.N``ET MVC Web Applicat``ion`.\n\nFor this tutorial, I named the project: `Real-time-photo-feed`.\nNow we are almost ready. The next step will be to install the official `Pusher` library for .Net using the `NuGet Package`.\n\nTo do this, we go to tools, via the menu on the top bar, click on `NuGet Package Manager`, on the drop-down we select `Package Manager Console`.\n\nWe will see the `Package Manager Console` at the bottom of our Visual Studio. Next, let’s install the package by running:\n\n```\n    Install-Package PusherServer\n```\n\nAlternatively, we can also install the `Pusher` library using the `NuGet Package Manager UI`. To do this, in the `**S**``olution Explorer`, right-click either `References` or a project and select `Manage NuGet Packages`. The Browse tab displays available packages by popularity. Search for the `Pusher` package by typing in `PusherServer` into the search box on the top right. Select the Pusher package to display the package information on the right and to enable the `Install` button.\n\n## Crafting our application\n\nNow that our environment is set up and ready, let’s dive into writing code.\nBy default, Visual Studio creates three controllers for us, however we will use the `HomeController` for the application logic.\nThe first thing we want to do is to define a model that stores the list of images we have in the database.\nUnder the `models` folder, let’s create a file named `PhotoFeed.cs` and add the following content:\n\n```\n    using System;\n    using System.Collections.Generic;\n    using System.ComponentModel.DataAnnotations;\n    using System.Linq;\n    using System.Web;\n    \n    namespace Real_time_photo_feed.Models\n    {\n        public class PhotoFeed\n        {\n            [Key]\n            public int Id { get; set; }\n            [Required]\n            public string Comment { get; set; }\n    \n            public string Imagepath { get; set; }\n    \n        }\n    }\n```\n\nIn the above block of code, we have declared a model called `PhotoFeed` with three main properties:\n\n- Id: This is the primary key of the model table.\n- Comment: The description of the image.\n- Imagepath: The path to the stored image.\n\nNow we have defined our model, let’s reference it in our default database context called `ApplicationDbContext`. To do this, let’s open `models\\IdentityModels.cs` file, then locate the class called `ApplicationDbContext` and add the following after the create function:\n\n```\n    public DbSet\u003cPhotoFeed\u003e FeedModel { get; set; }\n```\n\nIn the code block above, the `DBSet` class represents an entity set used for read, update, and delete operations. The entity which we will use to do CRUD operations is the `PhotoFeed` model we created earlier, and we have given it the name `FeedModel`.\n\n## Connecting our database\n\nAlthough our model is set up, we still need to attach a database to our application. To do so, select the Server Explorer on the left-hand side of our Visual Studio, right click on Data Connections and add a database.\nThere are various databases that are lightweight and can fit into the application we are building, such as:\n- Microsoft access database\n- Sqlite Database\n- MSSQL Server\n- Firebird\n- VistaDb\n\nFor this tutorial, I used the MSSQL Server.\n\n## Creating our index route\n\nNow both our model and database is set to work, let’s go ahead creating our index route. Open the `HomeController` and replace it with the following code:\n\n```\n    using PusherServer;\n    using Real_time_photo_feed.Models;\n    using System;\n    using System.Collections.Generic;\n    using System.IO;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using System.Web;\n    using System.Web.Mvc;\n    \n    namespace Real_time_photo_feed.Controllers\n    {\n        public class HomeController : Controller\n        {\n            ApplicationDbContext db = new ApplicationDbContext();\n            public ActionResult Index()\n            {\n               var me = db.FeedModel.AsQueryable();\n    \n                return View(me);\n            }\n            [HttpPost]\n            public async Task\u003cActionResult\u003e Index(PhotoFeed feed, HttpPostedFileBase upload)\n            {\n    \n                if (ModelState.IsValid)\n                {\n                    if (upload != null \u0026\u0026 upload.ContentLength \u003e 0)\n                    {\n                        var FileName = System.IO.Path.GetFileName(upload.FileName);\n                        var newpath = Path.Combine(HttpContext.Server.MapPath(\"~/UploadedFiles\"), FileName);\n                        upload.SaveAs(newpath);\n                        PhotoFeed setdata = new PhotoFeed();\n                        setdata.Comment = feed.Comment;\n                        setdata.Imagepath = \"/UploadedFiles/\"+FileName;\n                        db.FeedModel.Add(setdata);\n                        db.SaveChanges();\n    \n                        var options = new PusherOptions();\n                        options.Cluster = \"XXX_APP_CLUSTER\";\n                        var pusher = new Pusher(\"XXX_APP_ID\", \"XXX_APP_KEY\", \"XXX_APP_SECRET\", options);\n                        ITriggerResult result = await pusher.TriggerAsync(\"a_channel\", \"an_event\", setdata);\n                    }\n                }\n                    return Content(\"ok\");\n            }\n    \n        }\n    }\n```\n\nIn the code block above, we have defined our Index function for both `GET` and `POST` requests.\nBefore looking at our `GET` and `POST` controller functions, we notice that there is an import of our db context into our class with the line that says:\n\n```\n    ApplicationDbContext db = new ApplicationDbContext();\n```\n\nThis makes it possible to access our database model which we have defined using the `DbSet` class in our `ApplicationDbContext` class.\nIn the `GET` function, we have returned the view with which we will handle the addition and realtime updating of our feed.\n\nNotice that in the `GET` function, we pass a variable into the view function called `me`. This variable is a **queryable** version of our `BlogFeed` model. This will be passed to the view, which is later looped and rendered.\n\nObserve that the `POST` method is set to be asynchronous. This is because the Pusher .NET library uses the await operator to wait for the asynchronous response from the data sent to Pusher.\nIn this function, we first add our new movie to the database, then we trigger an event. Once the event has been emitted, we then return an ok string.\n\nHowever, please note that the code above would not handle any error if the Image was saved in DB but not posted using Pusher. We might need to use a try and catch statement to handle failures in posting to Pusher.\n\n## Creating our view files\n\nLet’s open up our `Views\\Home\\Index.cshtml` and replace the content with the following:\n\n```\n    @model IEnumerable\u003cReal_time_photo_feed.Models.PhotoFeed\u003e\n    \n    @{\n        Layout = null;\n    }\n    \n    \n       \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eASP.NET Photo feed\u003c/title\u003e\n        \u003clink href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"//js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \n        \u003cdiv class=\"container\"\u003e\n            \u003cform method=\"post\" enctype=\"multipart/form-data\" action=\"/Home/Index\" onsubmit=\"return feed_it()\"\u003e\n    \n                \u003cdiv class=\"form-group\"\u003e\n                    \u003clabel for=\"usr\"\u003eImage:\u003c/label\u003e\n                    \u003cinput type=\"file\" id=\"upload\" name=\"upload\" class=\"form-control\" required\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003clabel for=\"pwd\"\u003ecomment:\u003c/label\u003e\n                    \u003cinput type=\"text\" id=\"Comment\" name=\"Comment\" class=\"form-control\" required\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003cbutton type=\"submit\" class=\"btn btn-success\"\u003eFeed it\u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/form\u003e\n            \u003cdiv class=\"row\" id=\"feeds\"\u003e\n    \n    \n                @foreach (var item in Model)\n                {\n                \u003cspan\u003e\n                    \u003ch2\u003e@item.Comment\u003c/h2\u003e\n                    \u003cimg src=\"@item.Imagepath\"\u003e\n                \u003c/span\u003e\n                }\n    \n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the above block of code, we have created our form which **comprises** three main elements, which are:\n- Text input for the comment of the image.\n- File input for selecting the image we want to feed.\n- Button to save the new entry into the database.\n\nAlso, note we have included some required libraries such as:\n- Bootstrap CSS\n- jQuery JavaScript library\n- Pusher JavaScript library\n\n## Pusher bindings and jQuery snippet\n\nBelow is our example jQuery snippet used to handle the file upload and Pusher’s realtime updates.\n\n```\n    \u003cscript\u003e\n         var files;\n    \n            // Add events\n            $(document).ready(function() {\n                $('input[type=file]').on('change', prepareUpload);\n            })\n    \n    \n            // Grab the files and set them to our variable\n            function prepareUpload(event) {\n                files = event.target.files;\n            }\n    \n            function feed_it() {\n                var data = new FormData();\n                $.each(files, function(key, value) {\n                    data.append('upload', value);\n                });\n                data.append('Comment', document.getElementById('Comment').value);\n    \n    \n                $.post({\n                    url: '/Home/Index',\n                    data: data,\n                    processData: false, // Don't process the files\n                    contentType: false, // Set content type to false as jQuery will tell the server it's a query string request\n                    success: function(data) {\n                        if (data == \"ok\") {\n                            alert('done');\n                            document.getElementById('Comment').value = '';\n                        }\n                    },\n                    error: function(error) {\n                        alert('an error occured, please try again later')\n                    }\n                });\n                return false;\n            }\n            var pusher = new Pusher(\"XXX_APP_KEY\", {\n    \n                cluster: \"XXX_APP_CLUSTER\"\n            });\n            var my_channel = pusher.subscribe('a_channel');\n            my_channel.bind(\"an_event\", function(doc) {\n    \n                var new_message = `\u003cspan\u003e\n                            \u003ch2\u003e` + doc.Comment + `\u003c/h2\u003e\n                            \u003cimg  src=\"` + doc.Imagepath + `\"\u003e\n                        \u003c/span\u003e`;\n                $('#feeds').prepend(new_message);\n            });\n    \u003c/script\u003e\n```\n\nIn the code block above, we notice we have done two major activities, which are:\n\n**Uploading Image Code**\nTo process the upload of images from the client side to the server, the following steps were followed: \n\n- We attached an event listener to our file input button that stores our image into a variable called `files`.\n- We defined a function called `feed_it` which creates a new `FormData`, then appends our image and description to the form data. This function then makes an `AJAX POST` request to our `index` route.\n\n**Subscribing for Feed Additions on Server from other clients**\nAfter the image has been sent to the server, a request is sent to Pusher to return an event with the new data we have broadcasted. To listen for this realtime events, we have:\n\n- Initialized a Pusher object while passing our app key and cluster.\n- Subscribed to our channel called `a_channel`.\n- Declared a binding to our event called `an_event`. In the callback function of this binding, we have `pre-pended` the new data to our list of feeds.\n\nThat’s it! Now, once a photo gets uploaded, it also gets broadcast and we can listen using our channel to update the feed in realtime.\n\nBelow is an image of what we have built:\n\n![photo-feed-aspnet-demo](//images.contentful.com/1es3ne0caaid/7sdjWIDLSoCswsauwIQMKU/a5d8d3bd6b0efd803223fe042f9b8832/photo-feed-aspnet-demo.gif)\n\n## Conclusion\n\nIn this article, we have covered how to create a realtime photo feed using .NET and Pusher as well as handling file uploads in .NET.\nThe code base to this tutorial is available in a [public Github](https://github.com/samuelayo/ASP.NET-PHOTO-FEED).","metaTitle":"Build a photo feed using ASP.NET","metaDescription":"Build a system that allows people to upload their photographs in realtime, similar to Instagram using ASP.NET, jQuery and realtime features."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5iVt9pr8RaQmi6OmQYOmwG","type":"Entry","createdAt":"2018-02-22T15:02:42.944Z","updatedAt":"2020-06-19T14:18:26.221Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime counter using ASP.NET","url":"counter-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}}],"reviewDate":"2017-09-06","description":"Create a live website visits counter using ASP.NET and jQuery.","prerequisite":"A basic understanding of C# and JavaScript is needed to follow this tutorial.","content":"It is common practice on websites and applications to make viewers aware of how many others have interacted with the same content e.g. [YouTube videos](https://www.youtube.com/watch?v=Qoti7G-tjN8). The practice of displaying this information emphasizes the relevance of the resource and draws more attention to it.\n\nIn this tutorial, we will emulate this practice by displaying the number of visits to a single page website. We will use C Sharp, C# for short, as our server-side language with ASP.NET MVC to build our webpage and Pusher to provide realtime updates of the page visits. \n\nLet’s get started!\n\n\n## Building the frontend for our realtime counter in .NET\n\n### First, let’s start up Visual Studio\nFor this tutorial, we’ll be using Visual Studio. It’s an IDE that makes ASP.NET development easier and quicker. Visual Studio 2017 is free and available for the popularly used Operating Systems. You can find installation details [here](https://www.visualstudio.com/).\n\n### Creating our new project\nWe’ll start a new project by clicking **New Project** on the Visual Studio dashboard. Following the GUI prompts (in this order) we:\n  - Set C# as the language to use\n  - Select ASP.NET MVC Project as the template\n  - Include a Unit Test Project (this is optional and can be unticked)\n  - Fill in the Project name e.g. Notif (any name would do)\n  - Fill in the Solution name i.e. application name (again any name would do)\n  - Select the version control options to include git to the project\n\nAnd then click **Create**.\n\nThe project gets created with a default `HomeController.cs`. This is the HomeController class file. For the purpose of this tutorial, being a single page website, this single Controller class will be enough.\n\n\n\u003e 💡 ASP.NET MVC routes follow the pattern of /{ControllerName}/{ActionName} i.e assuming our **HomeController.cs** has a method named **Index** the route would be **viewdotnet.com/Home/Index**. ASP.NET MVC provides **Home** as the default controller name and **Index** as the default action name so that a route ‘**/**’ i.e. **viewdotnet.com/** maps to the Index method in the Home controller.\n\nIn our `HomeController.cs` we’ll have\n\n```\n            public ActionResult Index()\n            {\n                var mvcName = typeof(Controller).Assembly.GetName();\n                var isMono = Type.GetType(\"Mono.Runtime\") != null;\n    \n                ViewData[\"Version\"] = mvcName.Version.Major + \".\" + mvcName.Version.Minor;\n                ViewData[\"Runtime\"] = isMono ? \"Mono\" : \".NET\";\n    \n                return View();\n            }\n```\n\n**ActionResult** is the return type of the method which specifies that it will return an action in the form of rendering a view, serving a streamed file, etc. **ViewData** is used to pass data from the method to the HTML file (our view file) that will be rendered. **View()** creates a view response which we return. **Note that** `**Mono**` **is only available on a Mac OS machine.** \n\n\u003e 💡 In ASP.NET MVC the views (html files) rendered by a Controller Class must exist in the View folder and either under the Shared folder or the Folder bearing the name of the Controller. i.e. for the HomeController views must be in either `Views/Home/*``.cshtml` or `Views/Shared/*``.cshtml`.\n\u003e \n\u003e Also when the view is unspecified in the View function it defaults to `index.cshtml`; these views extend `_Layout.cshtml` found in the Shared folder.\n\n### Create the single web page\n\nTo achieve a quick and simple web page for our visitors to view we’ll be using [Bootstrap](https://getbootstrap.com).\n\n```\n    //_Layout.cshtml file\n    \n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003e@ViewBag.Title\u003c/title\u003e\n            \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        @RenderBody()\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"\u003e \u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe’ve used CDNs to include to Bootstrap CSS and JS files and also the jQuery JS file (it is needed for Bootstrap JS).\n\n\n\u003e **@ViewBag** is another means of passing data to the view file from the controller\n\u003e **@RenderBody** is where our actual view `index.cshtml`  will be inserted in this base view\n\n```\n    // index.cshtml file\n    \n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003ch2\u003eView Funny Memes, Have a good laugh\u003c/h2\u003e\n            \u003cdiv class=\"col-md-8\"\u003e\n                \u003cimg src=\"http://i.imgur.com/gRWkE0j.jpg\"\u003e\n            \u003c/div\u003e        \n        \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nOur page has a header and a big image (pretty minimal stuff)\n\n## Keeping track of views\n\nNow we’ll write the code to display the number of visitors to our page. We’ll need our code:\n\n\n- To recognize a visit\n- To store the visits so far (adding to this stored value every time someone visits)\n- To pass the data (number of visitors) to our view to display\n\nIn our `HomeController.cs` we’ll add the code to retrieve the visits so far, increment it and pass it on to the view. To keep things light and simple, we’ll be using file storage as our store (i.e. reading and writing the number of visits to a file such as visitors.txt).\n\n```\n    //HomeController.cs\n    ...\n    using System.IO;\n    \n    namespace notif.Controllers\n    {\n        public class HomeController : Controller\n        {\n            public ActionResult Index()\n            {\n                ViewBag.Title = \"Views Dot Net | A pusher - .Net Tutorial\";\n            \n                var visitors = 0;\n            \n                if (System.IO.File.Exists(\"visitors.txt\")) {\n                    string noOfVisitors = System.IO.File.ReadAllText(\"visitors.txt\");\n                    visitors = Int32.Parse(noOfVisitors);\n                }\n                \n                ++visitors;\n            \n                var visit_text = (visitors == 1) ? \" view\" : \" views\";\n                System.IO.File.WriteAllText(\"visitors.txt\", visitors.ToString());\n            \n                ViewData[\"visitors\"] = visitors;\n                ViewData[\"visitors_txt\"] = visit_text;\n            \n            \n                return View();\n            }\n    ...\n```\n\nWe create a **visitors** variable and initialize it to 0. Then we check if the `visitors.txt` file exists, if it does then we’ve been visited in the past and we read the content into the **visitors** variable. Next, we increment the value of **visitors** by 1 (the visitor we are currently serving) and save the new value back into our file.\n\n\n\u003e 💡 To check if a file exists, read, and write into it, we’ll use the File class (available from ASP.NET) which is a member of the **System.IO** namespace so at the top of our class file we’ve added  `using System.IO;`\n\nNow that we have the number of visitors in a variable, we’ll pass it on to our view using **ViewData**. We’ve also added some supporting text based on the value of the visitors variable to improve readability. In our view file we’ll add some markup to display the visitors value and text we’re passing along.\n\n```\n    //index.cshtml\n    \n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003ch2\u003eView Funny Memes, Have a good laugh\u003c/h2\u003e\n            \u003cdiv class=\"col-md-8\"\u003e\n                \u003cimg src=\"http://i.imgur.com/gRWkE0j.jpg\"\u003e\n            \u003c/div\u003e        \n        \u003c/div\u003e\n        \u003cbr\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-12\"\u003e\n                \u003cdiv class=\"pull-left\"\u003e\n                    \u003cp\u003e \u003cb id=\"noOfVisitors\"\u003e@ViewData[\"visitors\"]\u003c/b\u003e \u003cspan id=\"visitorsText\"\u003e @ViewData[\"visitors_txt\"] \u003c/span\u003e \u003c/p\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nNow our page will look like:\n\n![counter-aspnet-debug](//images.contentful.com/1es3ne0caaid/5XpGPfMB3y8oOCw8euGOEc/5b6d29addaefac77c7c7b16a0b06c2af/counter-aspnet-debug.png)\n\n## Adding realtime updates to our views counter with Pusher\n\nWhile a user views our page we’d like them to know when more people visit the page by increasing the **number of views** without requiring a refresh. We will be using Pusher for this.\n\nTo start with, lets head over to the pusher [dashboard](https://dashboard.pusher.com/) and create an app. You can [register for free](https://pusher.com/signup?plan=sandbox) if you haven’t got an account. Fill out the create app form with the information requested.\n\nTo make our app realtime, we’ll make each visit trigger an event via Pusher on the server-side (i.e. backend) and have Pusher listen and react to that event on the client-side (i.e. view using JavaScript).\n\n### Triggering event on the server-side\n\nIn our `HomeController.cs`, on every new visit using Pusher we’ll trigger a `newVisit` event on a channel we’ll call `general` which will broadcast the current number of visits.\n\nTo do this, we’ll install Pusher via NuGet - *a packer manager for ASP.NET *- by:\n- Right clicking the `*Packages*` folder in our solution\n- Selecting `Add Packages` and;\n- Searching and selecting `Pusher Server`\n\nNext, we’ll initialize Pusher in our Controller using and trigger our `newVisit` event.\n\n```\n    //HomeController.cs\n    \n    ...\n    using PusherServer;\n    \n    public ActionResult Index()\n    {\n        ViewBag.Title = \"Views Dot Net | A pusher - .Net Tutorial\";\n        var visitors = 0;\n    \n        if (System.IO.File.Exists(\"visitors.txt\")) {\n            string noOfVisitors = System.IO.File.ReadAllText(\"visitors.txt\");\n            visitors = Int32.Parse(noOfVisitors);\n        }\n    \n        ++visitors;\n        var visit_text = (visitors == 1) ? \" view\" : \" views\";\n        \n        System.IO.File.WriteAllText(\"visitors.txt\", visitors.ToString());\n    \n        var options = new PusherOptions();\n        options.Cluster = \"PUSHER_APP_CLUSTER\";\n    \n        var pusher = new Pusher(\n        \"PUSHER_APP_ID\",\n        \"PUSHER_APP_KEY\",\n        \"PUSHER_APP_SECRET\", options);\n    \n        pusher.TriggerAsync(\n        \"general\",\n        \"newVisit\",\n        new { visits = visitors.ToString(), message = visit_text });\n    \n        ViewData[\"visitors\"] = visitors;\n        ViewData[\"visitors_txt\"] = visit_text;\n    \n        return View();\n    }\n```\n\n\u003e 💡 After Installing the `PusherServer` package we use it in our controller by adding `using PusherServer` at the top of our class definition.\n\nAfter initializing Pusher using our **PUSHER_APP_ID**, **PUSHER_APP_KEY,** *****PUSHER_APP_SECRET and PUSHER_APP_CLUSTER*** *(be sure to replace these with the actual values from your dashboard),* we will broadcast an object consisting of the **number of visitors** and the **visitors supporting text** with our pusher instance on the `newVisit` event via the `general` channel.\n\n### Listening for the event on our client-side\n\nTo react to our `newVisit` event and its corresponding data we’ll be using JavaScript and JQuery for DOM manipulation to display the event data.\n\n```\n    //_Layout.cshtml\n    \n    ...\n    \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n            \u003cscript\u003e\n    \n                // Enable pusher logging - don't include this in production\n                Pusher.logToConsole = true;\n    \n                var pusher = new Pusher('PUSHER_APP_KEY', {\n                    cluster:'PUSHER_APP_CLUSTER'\n                });\n    \n                var channel = pusher.subscribe('general');\n                \n                channel.bind('newVisit', function(data) {\n                  \n                  var visits = data.visits;\n                  var message = data.message;\n                  $('#noOfVisitors').text( visits );\n                  $('#visitorsText').text( message );\n                });\n            \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the above code, we:\n\n- Add the pusher library to our view via a CDN,\n- Initialize Pusher passing in our PUSHER_APP_KEY,\n- Subscribe to the `general` channel\n- Bind the channel to the `newVisit` event also attaching a callback function to the binding.\n\nIn our callback function we retrieve the **visits** and **message** data, then using jQuery pass it into our markup.\n\nNow we run our application by clicking the play button in the top left corner of our IDE and here’s a glimpse of our resulting webpage.\n\n![counter-aspnet-demo](//images.contentful.com/1es3ne0caaid/1rQGWpFwVK8k8EqIGoQaCq/9fc865b9cb2e12902f2c5870adb88bd4/counter-aspnet-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we’ve covered building a single web page with ASP.NET MVC in C# and how to implement realtime functionality in our web page using Pusher in both C# and JavaScript. There’s a lot more functionality we can achieve using ASP.NET and Pusher together, feel free to extend the functionality of your web page.","metaTitle":"Build a realtime counter using ASP.NET","metaDescription":"Discover how you can build a live counter using ASP.NET and jQuery."}}],"defaultValue":"Channels \u0026 jQuery","queryType":"tag","pages":2,"route":"/tutorials","query":{"product":"Channels","tag":"jQuery","page":"1"}}},"page":"/tutorials","query":{"product":"Channels","tag":"jQuery","page":"1"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=jQuery&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:40 GMT -->
</html>