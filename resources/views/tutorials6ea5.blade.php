<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=React&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:43:37 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">60</span> tutorials for “<span class="css-npldjc ehwuahf2">React</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsb028.html?product=Channels&amp;tag=React" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials9a85.html?product=Beams&amp;tag=React" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="React"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/create-react-app-3.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">TypeScript</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">New features of Create-React-App version 3.0</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Create React App just released its third version (3.0.0). A tool to help you build React applications, it saves you from...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/game-device-sensors-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Gaming<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a game using device sensors in React Native</h3><p class="css-k12xad e5jrto45">Build a mobile game, taking advantage of React Native&#x27;s device sensors module. Use the gyroscope to detect the tilt of t...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/transactional-emails-react-sendgrid.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">CSS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Set up realtime monitoring for transactional emails with React and SendGrid</h3><p class="css-k12xad e5jrto45">Transactional emails are automated, realtime messages that are sent to users through email after a specific action has b...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/lifecycle-methods-react-16.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Lifecycle methods in React 16</h3><p class="css-k12xad e5jrto45">Gain an understanding of all the lifecycle methods in React Native 16, including the error boundaries methods. Learn whe...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/youtube-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a Youtube-integrated application using React Native</h3><p class="css-k12xad e5jrto45">Build a basic React Native app. Set up YouTube integration and pull in playlists from Rotten Tomatoes. This tutorial wil...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/accessible-react-fragments.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Writing accessible apps and efficient code with React fragments</h3><p class="css-k12xad e5jrto45">Learn how to handle nested HTML elements in React using fragments. Understand the benefits of fragments compared to othe...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/consume-restful-api-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to consume a RESTful API in React</h3><p class="css-k12xad e5jrto45">This brief tutorial will introduce you to using REST APIs in React applications. You will create a simple demo that cons...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-multiplayer-quiz-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Gaming<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a live multiplayer quiz app in React Native</h3><p class="css-k12xad e5jrto45">Use React Native and Node to build a live cross-platform quiz app. Admins are able to add questions and start the game. ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/whiteboard-electron-react-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a whiteboard Electron app with React - Part 1: Adding the whiteboard</h3><p class="css-k12xad e5jrto45">In this two-part series, build a whiteboard app using Node, Electron and React. Users will be able to collaborate in rea...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Prev</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials6ea5.html?tag=React&amp;page=1" class="css-2wakph edg0byb1">1</a><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialsf233.html?tag=React&amp;page=2" class="css-za1ua3 edg0byb1">2</a><a href="tutorials1767.html?tag=React&amp;page=3" class="css-za1ua3 edg0byb1">3</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials43f9.html?tag=React&amp;page=7" class="css-5s6711 edg0byb1">7</a><a href="tutorialsf233.html?tag=React&amp;page=2" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":60,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gmG7XpwjXXw6dBRFfmkCW","type":"Entry","createdAt":"2019-08-06T19:39:37.152Z","updatedAt":"2020-06-19T10:45:29.074Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"New features of Create-React-App version 3.0","url":"create-react-app-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55Vy5qUc2Hc2NxBxWerK1T","type":"Entry","createdAt":"2019-03-16T13:13:19.673Z","updatedAt":"2019-03-16T13:13:19.673Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lotanna Nwose","url":"lotanna-nwose","email":"viclotana@gmail.com","twitter":"https://twitter.com/viclotana","github":"https://github.com/viclotana","guestWriter":true}}],"projectRepo":"https://github.com/facebook/create-react-app/releases/tag/v3.0.0","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"18J5ku8AMG7DNqxzvTy4tW","type":"Entry","createdAt":"2019-06-04T15:37:38.967Z","updatedAt":"2019-06-04T15:37:38.967Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Webhooks","url":"webhooks","type":"use case","featured":false}}],"reviewDate":"2019-08-06","description":"Create React App just released its third version (3.0.0). A tool to help you build React applications, it saves you from time-consuming setup and configuration. This tutorial will explore all the new features of the React popular boilerplate, including the browserlist support.","content":"Finally the stable official support for React Hooks!\n\n![create-react-app-img (1)](//images.ctfassets.net/1es3ne0caaid/6b4BASUhPUTMEXKLEI6crg/a73e5830fb475f5ed85956e9a7d823df/create-react-app-img__1_.png)\n\n\u003e Create React App is a tool built by developers at Facebook to help you build React applications. It saves you from time-consuming setup and configuration. You simply run one command and create react app sets up the tools you need to start your React project.\n\nCreate-React-App which is arguably one of the most popular boilerplates of all times with 67,000 stars and used by over 5,000 projects on GitHub released its third [version (3.0.0)](https://github.com/facebook/create-react-app/releases/tag/v3.0.0) a few days ago; with a whole lot of improvements. Even though we all know React does not require build dependencies, it however depends on a lot of important tools to make the magic we see when we run npm start. \n\nSome of these tools include Babel, Webpack and Jest and a host of others which handle making code lighter for production, all kinds of testing and helping code to be modular and generally ease the way we code.\n\n\n\u003e Over time, these tools get updated to newer versions and it starts to become a pain to keep up with Create-React-App and the new versions of its supporting tools.\n\nSo the team of 167+ contributors who dedicated their lives to the maintenance of our lovely boilerplate came up with this very powerful version. In this article, we shall quickly look at the new features in [Create-React-App v 3.0.0](https://github.com/facebook/create-react-app/releases/tag/v3.0.0)\n\n## Support for React hooks\n\nReact introduced Hooks officially in [version 16.8](https://reactjs.org/blog/2019/02/06/react-v16.8.0.html) which allowed changes to the way components can be written introducing things like stateful logic in functional components usually meant for classes alone. This new development encourages writing purer components and more optimal React code. However, [there are rules](https://reactjs.org/docs/hooks-rules.html) set in place by the React team to prevent abuse of hooks and these rules are that:\n\n\n- Hooks cannot be called from regular functions but only from functional components.\n- Hooks are to be used only at the top level of your functional component and not inside nested functions or even conditional statement blocks.\n\nIn this new version, alongside the support of the use of Hooks, Create-React-App ships with an ESLint plugin called [eslint-plugin-react-hooks](https://github.com/facebook/react/tree/master/packages/eslint-plugin-react-hooks) that enforces these rules and other syntax conventions of hooks. This way, builds are sure to fail when any rule is broken. You can [learn more about this plugin here](https://github.com/facebook/create-react-app/tree/master/packages/eslint-config-react-app) and also [how to make your IDE display these linting output here](https://facebook.github.io/create-react-app/docs/setting-up-your-editor#displaying-lint-output-in-the-editor).\n\n## Linting support for TypeScript\n\nAside from the React hooks linting, this new version also ships with support to lint TypeScript code through the [typescript-eslint](https://github.com/typescript-eslint/typescript-eslint) plugin. You can see the list of rules enforced through this plugin in the link [here](https://github.com/facebook/create-react-app/blob/eee8491d57d67dd76f0806a7512eaba2ce9c36f0/packages/eslint-config-react-app/index.js#L89:L98) or setup your IDE to reflect them from [this guide](https://facebook.github.io/create-react-app/docs/setting-up-your-editor#displaying-lint-output-in-the-editor). You can easily use TypeScript in your React application with a line of command:\n\n```\n    yarn create-react-app my-typescript-app --typescript\n```\n\n## Browserlist support\n\nYou can now use the browserlist config in your React project’s `package.json` file to control the browser output of your JavaScript files. Another exciting thing is that one configuration can be used for the development environment and another entirely different one can be used for production. A typical example can be this:\n\n```json\n    \"browserslist\": {\n        \"production\": [\n          \"\u003e0.2%\",\n          \"not dead\",\n          \"not op_mini all\"\n        ],\n        \"development\": [\n          \"last 1 chrome version\",\n          \"last 1 firefox version\",\n          \"last 1 safari version\"\n        ]\n      }\n```\n\nHere, the production build will target all browsers that cover more than 0.2% of global usage which is almost every browser, while the development build will only target the last versions of Chrome, Firefox and Safari.\n\nWith this kind of clarity, you can install a babel polyfill as a project dependency and then import it in your root JavaScript file and browserlist will now include them when needed. By default, browserslist default targets a almost all browsers in production, you can change the default settings though from the [guide here](https://github.com/browserslist/browserslist#queries). \n\n## PostCSS Normalize support\n\nThis new version ships with support for Normalize.css so to handle a reset CSS, by default PostCSS Normalize will be used. It will use your browserlist settings to produce styles that fit each browser covered in the config. Remember to always add `@import-normalize`at the beginning of any of your CSS files to activate it. Read more about this change [here](https://facebook.github.io/create-react-app/docs/adding-css-reset).\n\n## Absolute imports with jsconfig.json and tsconfig.json\n\nSo in this new version, we can now have a less stressful way to access import paths for our Node path environments, we no longer have to be bothered about all the paths complexities with slashes that becomes clumsy at some point. We can now have absolute import paths for both JavaScript and TypeScript files alike, this makes for more presentable code. To set this up, create a `jsconfig.json` file for JavaScript (or `tsconfig.json` for TypeScript) in the root directory and copy in the code below:\n\n```json\n    {\n      \"compilerOptions\": {\n        \"baseUrl\": \"src\"\n      },\n      \"include\": [\"src\"]\n    }\n```\n\nWith this your import statement that was initially like this:\n\n```\n    import Sidebar from 'project_name/src/components/Sidebar';\n```\n\nCan be as simple as this:\n\n```\n    import Sidebar from 'components/Sidebar';\n```\n\n## Jest 24\n\nThis version also brings a Jest update to life. Jest is a unit testing framework that runs in a Node JS environment instead of a browser. From the old Jest version 23 to the new [version 24.7.1](https://jestjs.io/), this new Jest version ships with a lot of new features including improved asset messages and logs, support for TypeScript and a lot of bug fixes.\n\n## Breaking changes\n\nSome of these new features will introduce breaking changes to your project’s workflow and it is very important that you be aware.\n\n\n- The `--watchAll=false` from Jest replaces the `--no-watch` flag which is now removed from the start script.\n- Both the NODE_ENV and PUBLIC_URL status has now been changed into readonly.\n- Custom functions has now been added to generate asset manifest.\n- There are some differences in snapshot serialisation in Jest and it may lead to slight changes to your tests after upgrading.\n\nThe official changelog for this version can be found [here](https://github.com/facebook/create-react-app/releases/tag/v3.0.0).\n\n## Conclusion\n\nNow you have seen all the new features of the React popular boilerplate, my favorite is the browserlist support. Read the [breaking changes](https://github.com/facebook/create-react-app/releases/tag/v3.0.0) and upgrade your version today. Happy hacking!","metaTitle":"New features of Create-React-App version 3.0","metaDescription":"Create React App just released its third version (3.0.0). A tool to help you build React applications, it saves you from time-consuming setup and configuration. This tutorial will explore all the new features of the React popular boilerplate, including the browserlist support."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6yL6067G9KWM8q9ua9XR9F","type":"Entry","createdAt":"2019-06-06T20:16:12.216Z","updatedAt":"2019-07-25T17:27:25.580Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a game using device sensors in React Native","url":"game-device-sensors-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNSensorDemo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6nDfV1cd5C6464wgCoOQii","type":"Entry","createdAt":"2018-02-12T15:08:13.901Z","updatedAt":"2018-02-26T12:31:12.764Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Gaming","url":"gaming","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2019-07-25","description":"Build a mobile game, taking advantage of React Native's device sensors module. Use the gyroscope to detect the tilt of the phone, allowing a player to manipulate objects on screen and dodge obstacles. The game includes a simple scoring system, and can be easily extended.","prerequisite":"You will need Node and React Native installed on your machine. Some knowledge of React Native development is expected.","content":"In this tutorial, we’ll take a look at how you can get the device’s accelerometer data to create a simple dodge game.\n\nMost modern smartphones are equipped with sensors such as the gyroscope, accelerometer, and magnetometer. These sensors are responsible for getting the data required for apps like the compass and your health app.\n\n## Prerequisites\n\nYou will need a good level of understanding of React Native, and familiarity with building and running apps in your development environment to follow this tutorial. \n\nThe following package versions are used to create the app:\n\n\n- Node 11.2\n- Yarn 1.13\n- React Native 0.59\n\nIf you have trouble running the app later on, try to use the versions above.\n\nYou will also need a real device for testing the app as you can’t really tilt in an emulator.\n\n\n## App overview\n\nThe app that we will create is a simple game of dodge. Blocks will be falling from the top part of the screen. The player will then have to slightly tilt their device to the left or to the right to move the ball so they can dodge the falling blocks. \n\nTilting the device to the right will make the ball go to the right, while tilting it to the left does the opposite. If the ball goes off all the way to the left or right where the player can’t see it, it automatically goes back to the middle part of the screen. The bottom part of the screen is where the floor is. \n\nOnce a block collides with the floor, it means that the player has successfully evaded it and their score will be incremented. At any point in the game, the player can also click on the **RESET** button to restart the game. We will be using [React Native Sensors](https://react-native-sensors.github.io/) to get the sensor data, [React Native Game Engine](https://github.com/bberak/react-native-game-engine) to implement the game, and [MatterJS](http://brm.io/matter-js/) as the physics engine.\n\nHere’s what the app will look like:\n\n![react-native-sensors-game-demo](//images.ctfassets.net/1es3ne0caaid/4iV6tUW5qvzeUHBuJ5mADH/bb1afbaf6a4c0cc1e8e056f316fe1340/react-native-sensors-game-demo.gif)\n\nYou can view the code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/RNSensorDemo).\n\n\n## Bootstrapping the app\n\nI’ve prepared a repo which you can clone in order to get the exact same package versions that I used for creating the app. Execute the following commands to bootstrap the app:\n\n```\n    git clone https://github.com/anchetaWern/RNSensorDemo.git\n    cd RNSensorDemo\n    git checkout starter\n    yarn\n    react-native eject\n```\n\nReact Native Sensors is a native module, so you have to follow the [additional steps in setting it up on their website](https://react-native-sensors.github.io/docs/Installation.html).\n\n\n## Building the app\n\nOnce you’ve bootstrapped the app, update the `App.js` file at the root of the project directory and add the following. This will import all the packages we’ve installed:\n\n```javascript\n    import React, { Component } from \"react\";\n    import { StyleSheet, Text, View, Dimensions, Button, Alert } from \"react-native\";\n    import {\n      accelerometer,\n      setUpdateIntervalForType,\n      SensorTypes\n    } from \"react-native-sensors\"; // for getting sensor data\n    \n    import { GameEngine } from \"react-native-game-engine\"; // for implementing the game\n    import Matter from \"matter-js\"; // for implementing game physics (gravity, collision)\n    \n    import randomInt from \"random-int\"; // for generating random integer\n    import randomColor from \"randomcolor\"; // for generating random hex color codes\n```\n\nNext, import the components for rendering the blocks and the ball. We will be creating these later:\n\n```javascript\n    import Circle from \"./src/components/Circle\";\n    import Box from \"./src/components/Box\";\n```\n\nEach of the blocks won’t be falling at the same rate, otherwise, it would be impossible for the player to dodge them all. MatterJS is responsible for implementing game physics. This way, all of the objects in the game (ball, blocks, and floor) will have their own physical attributes. One of the physical attributes which we can assign is the [frictionAir](http://brm.io/matter-js/docs/classes/Body.html#property_frictionAir). This allows us to define the air resistance of the object. The higher the value of this attribute, the faster it will travel through space. The `getRandomDecimal` helper allows us to generate a random value to make the blocks fall faster or slower. We will also create this later:\n\n```javascript\n    import getRandomDecimal from \"./src/helpers/getRandomDecimal\";\n```\n\nNext, get the device’s `height` and `width`. We will be using those to calculate either the position or the dimensions of each of the objects. Below, we also calculate for the middle part of the screen. We’ll use this later on as the initial position for the ball, as well as the position it goes back to if it goes out of the visible area:\n\n```javascript\n    const { height, width } = Dimensions.get('window');\n    \n    const BALL_SIZE = 20; // the ball's radius\n    const DEBRIS_HEIGHT = 70; // the block's height\n    const DEBRIS_WIDTH = 20; // the block's width\n    \n    const mid_point = (width / 2) - (BALL_SIZE / 2); // position of the middle part of the screen\n```\n\nNext, declare the physical attributes of the ball and blocks. The main difference between these two objects is that the ball is static. This means it cannot move on its own. It has to rely on the device’s accelerometer in order to calculate its new position. While the blocks are non-static, which means that they can be affected by physical phenomena such as gravity. This allows us to automatically make the blocks fall without actually doing anything:\n\n```javascript\n    const ballSettings = {\n      isStatic: true\n    };\n    \n    const debrisSettings = { // blocks physical settings\n      isStatic: false\n    };\n```\n\nNext, create the bodies to be used for each of the objects. For now, we’re only creating the bodies for the ball and the floor. Because the blocks needs to have varying physical attributes and positioning, we’ll generate their corresponding bodies when the component is mounted:\n\n```javascript\n    const ball = Matter.Bodies.circle(0, height - 30, BALL_SIZE, {\n      ...ballSettings, // spread the object\n      label: \"ball\" // add label as a property\n    });\n    \n    const floor = Matter.Bodies.rectangle(width / 2, height, width, 10, {\n      isStatic: true,\n      isSensor: true,\n      label: \"floor\"\n    });\n```\n\nThe code above uses the [Matter.Bodies.Circle](http://brm.io/matter-js/docs/classes/Bodies.html#method_circle) and [Matter.Bodies.Rectangle](http://brm.io/matter-js/docs/classes/Bodies.html#method_rectangle) methods from MatterJS to create a body with circular and rectangular frame. Both methods expect the `x` and `y` position of the body for the first and second arguments. While the third argument for the Circle is the radius, and the third and fourth argument for the Rectangle is the width and height of the body. The last argument is an object containing the object’s physical settings. A `label` is also added so we can easily tell each object apart when they collide.\n\nNext, set the update interval for a specific sensor type. In this case, we’re using the accelerometer and we want to update every 15 milliseconds. This means that the function for getting the accelerometer data will only fire off every 15 milliseconds:\n\n```javascript\n    setUpdateIntervalForType(SensorTypes.accelerometer, 15);\n```\n\n\u003e **Note**: For production apps, play around with the interval to come up with the best value to balance between the ball’s responsiveness and battery drain. 15 is just an arbitrary value I came up with during testing.\n\nNext, create the main app component and initialize the state. The state is mainly used for setting the ball’s position and keeping track of the score:\n\n```javascript\n    export default class App extends Component {\n      \n      state = {\n        x: 0, // the ball's initial X position\n        y: height - 30, // the ball's initial Y position\n        isGameReady: false, // game is not ready by default\n        score: 0 // the player's score\n      }\n      \n      // next: add constructor\n    \n    }\n```\n\nNext, add the constructor. This contains the code for initializing the objects (also called entities) in the game and setting up the collision handler:\n\n```javascript\n    constructor(props) {\n      super(props);\n    \n      this.debris = [];\n    \n      const { engine, world } = this._addObjectsToWorld(ball);\n      this.entities = this._getEntities(engine, world, ball);\n    \n      this._setupCollisionHandler(engine);\n    \n      this.physics = (entities, { time }) =\u003e {\n        let engine = entities[\"physics\"].engine; // get the reference to the physics engine\n        engine.world.gravity.y = 0.5; // set the gravity of Y axis\n        Matter.Engine.update(engine, time.delta); // move the game forward in time\n        return entities;\n      };\n    }\n    \n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we subscribe to get the accelerometer data. In this case, we only need to get the data in the `x` axis because the ball is constrained to move only within the `x` axis. From there, we can set the ball’s current position by using the body’s `setPosition` method. All we have to do is add `x` to the current value of `x` in the state. This gives us the new position to be used for the ball:\n\n```javascript\n    componentDidMount() {\n      accelerometer.subscribe(({ x }) =\u003e {\n    \n        Matter.Body.setPosition(ball, {\n          x: this.state.x + x, \n          y: height - 30 // should be constant\n        });\n    \n        this.setState(state =\u003e ({\n          x: x + state.x\n        }), () =\u003e {\n          // next: add code for resetting the ball's position if it goes out of view\n        });\n    \n      });\n    \n      this.setState({\n        isGameReady: true\n      });\n    }\n    \n    // next: add componentWillUnmount\n```\n\nIf the ball goes off to the part of the screen which the user cannot see, we want to the\nbring it back to its initial position. That way, they can start controlling it again. `this.state.x` contains the current position of the ball, so we can simply check if its less than `0` (disappeared off to the left part of the screen) or greater than the device's width (disappeared off to the right part of the screen):\n\n```javascript\n    if (this.state.x \u003c 0 || this.state.x \u003e width) {\n      Matter.Body.setPosition(ball, {\n        x: mid_point,\n        y: height - 30\n      });\n    \n      this.setState({\n        x: mid_point\n      });\n    }\n```\n\nNext, unsubscribe from getting the accelerometer data once the component is unmounted. We don’t want to continuously drain the user’s battery if it’s no longer needed:\n\n```javascript\n    componentWillUnmount() {\n      this.accelerometer.stop();\n    }\n    \n    // next: _addObjectsToWorld\n```\n\nNext, add the code for adding the objects to the world. Earlier, we already created the objects for the ball and the floor. But we’re still yet to create the objects for the blocks. The physics engine is still unaware of the ball and floor object, so we have to add them to the world. Here’s the code for that:\n\n```javascript\n    _addObjectsToWorld = (ball) =\u003e {\n      const engine = Matter.Engine.create({ enableSleeping: true });\n      const world = engine.world;\n    \n      let objects = [\n        ball,\n        floor\n      ];\n      \n      // create the bodies for the blocks\n      for (let x = 0; x \u003c= 5; x++) {\n        const debris = Matter.Bodies.rectangle(\n          randomInt(1, width - 30), // x position\n          randomInt(0, 200), // y position\n          DEBRIS_WIDTH,\n          DEBRIS_HEIGHT,\n          {\n            frictionAir: getRandomDecimal(0.01, 0.5),\n            label: 'debris'\n          }\n        );\n    \n        this.debris.push(debris);\n      }\n    \n      objects = objects.concat(this.debris); // add the blocks to the array of objects \n      Matter.World.add(world, objects); // add the objects\n    \n      return {\n        engine,\n        world\n      }\n    }\n    \n    // next: add _getEntities\n```\n\nIn the above code, we’re using MatterJS to create the physics engine. `enableSleeping` is set to `true` so that the engine will stop updating and collision tracking objects that have come to rest. This setting is mostly used as a performance boost. Once the engine is created, we create six rectangle bodies. These are the blocks (or debris) that will fall from the top part of the screen. Their initial `y` position and `frictionAir` will vary depending on the random numeric value that’s generated. Once all the blocks are generated, we add it to the array of objects and add them to the world.\n\nNext, add the code for getting the entities to be rendered by React Native Game Engine. Note that each of these corresponds to a MatterJS object (ball, floor, and blocks). Each entity has a `body`, `size`, and `renderer`. The `color` we assigned to the `gameFloor` and `debris` is just passed to its renderer as a prop. As you’ll see in the code for the Box component later, the `color` is assigned as the background color:\n\n```javascript\n    _getEntities = (engine, world, ball) =\u003e {\n      const entities = {\n        physics: {\n          engine,\n          world\n        },\n    \n        playerBall: {\n          body: ball,\n          size: [BALL_SIZE, BALL_SIZE], // width, height\n          renderer: Circle\n        },\n    \n        gameFloor: {\n          body: floor,\n          size: [width, 10],\n          color: '#414448',\n          renderer: Box\n        }\n      };\n    \n      for (let x = 0; x \u003c= 5; x++) { // generate the entities for the blocks\n        Object.assign(entities, {\n          ['debris_' + x]: {\n            body: this.debris[x],\n            size: [DEBRIS_WIDTH, DEBRIS_HEIGHT],\n            color: randomColor({\n              luminosity: 'dark', // only generate dark colors so they can be easily seen\n            }),\n            renderer: Box\n          }\n        });\n      }\n    \n      return entities;\n    }\n    \n    // next: _setupCollisionHandler\n```\n\nNext, add the code for setting up the collision handler. In the code below, we listen for the [collisionStart event](http://brm.io/matter-js/docs/classes/Engine.html#event_collisionStart). This event is triggered when any of the objects in the world starts colliding. `event.pairs` stores the information on which objects have started colliding. If a block hits the floor, it means the player have successfully evaded it. We don’t really want to generate new objects as the game proceeds so we simply reuse the existing objects. We can do this by setting a new initial position, that way, it can start falling again. In the case that the ball hit a block, we loop through all the blocks and set them as a static object. This will have a similar effect to gravity being turned off, so the blocks are actually frozen in mid air. At this point, the game is considered over:\n\n```javascript\n    _setupCollisionHandler = (engine) =\u003e {\n      Matter.Events.on(engine, \"collisionStart\", (event) =\u003e {\n        var pairs = event.pairs;\n    \n        var objA = pairs[0].bodyA.label;\n        var objB = pairs[0].bodyB.label;\n    \n        if(objA === 'floor' \u0026\u0026 objB === 'debris') {\n          Matter.Body.setPosition(pairs[0].bodyB, { // set new initial position for the block\n            x: randomInt(1, width - 30),\n            y: randomInt(0, 200)\n          });\n          \n          // increment the player score\n          this.setState(state =\u003e ({\n            score: state.score + 1\n          }));\n        }\n    \n        if (objA === 'ball' \u0026\u0026 objB === 'debris') {\n          Alert.alert('Game Over', 'You lose...');\n          this.debris.forEach((debris) =\u003e {\n            Matter.Body.set(debris, {\n              isStatic: true\n            });\n          });\n        }\n      });\n    }\n    // next: add render\n```\n\nNext, render the UI. The GameEngine component from React Native Game Engine is used to render the entities that we’ve generated earlier. Inside it is the button for resetting the game, and a text for showing the player’s current score:\n\n```javascript\n    render() {\n      const { isGameReady, score } = this.state;\n    \n      if (isGameReady) {\n        return (\n          \u003cGameEngine\n            style={styles.container}\n            systems={[this.physics]}\n            entities={this.entities}\n          \u003e\n            \u003cView style={styles.header}\u003e\n              \u003cButton\n                onPress={this.reset}\n                title=\"Reset\"\n                color=\"#841584\"\n              /\u003e\n              \u003cText style={styles.scoreText}\u003e{score}\u003c/Text\u003e\n            \u003c/View\u003e\n          \u003c/GameEngine\u003e\n        );\n      }\n      return null;\n    }\n    \n    // next: add reset\n```\n\nHere’s the code for resetting the game:\n\n```javascript\n    reset = () =\u003e {\n      this.debris.forEach((debris) =\u003e { // loop through all the blocks\n        Matter.Body.set(debris, {\n          isStatic: false // make the block susceptible to gravity again\n        });\n        Matter.Body.setPosition(debris, { // set new position for the block\n          x: randomInt(1, width - 30),\n          y: randomInt(0, 200)\n        });\n      });\n    \n      this.setState({ \n        score: 0 // reset the player score\n      });\n    }\n```\n\nLastly, here are the styles:\n\n```javascript\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        backgroundColor: '#F5FCFF',\n      },\n      header: {\n        padding: 20,\n        alignItems: 'center'\n      },\n      scoreText: {\n        fontSize: 25,\n        fontWeight: 'bold'\n      }\n    });\n```\n\n### Box component\n\nHere’s the code for the Box component:\n\n```javascript\n    // src/components/Box.js\n    import React, { Component } from \"react\";\n    import { View } from \"react-native\";\n    \n    const Box = ({ body, size, color }) =\u003e {\n      const width = size[0];\n      const height = size[1];\n     \n      const x = body.position.x - width / 2;\n      const y = body.position.y - height / 2;\n    \n      return (\n        \u003cView\n          style={{\n            position: \"absolute\",\n            left: x,\n            top: y,\n            width: width,\n            height: height,\n            backgroundColor: color\n          }}\n        /\u003e\n      );\n    };\n    \n    export default Box;\n```\n\n### Circle component\n\nHere’s the code for the Circle component:\n\n```javascript\n    // src/components/Circle.js\n    import React, { Component } from \"react\";\n    import { View, StyleSheet, Dimensions } from \"react-native\";\n    \n    const { height, width } = Dimensions.get('window');\n    \n    const BODY_DIAMETER = Math.trunc(Math.max(width, height) * 0.05);\n    const BORDER_WIDTH = Math.trunc(BODY_DIAMETER * 0.1);\n    \n    const Circle = ({ body }) =\u003e {\n      const { position } = body;\n      const x = position.x - BODY_DIAMETER / 2;\n      const y = position.y - BODY_DIAMETER / 2;\n      return \u003cView style={[styles.head, { left: x, top: y }]} /\u003e;\n    };\n    \n    export default Circle;\n    \n    const styles = StyleSheet.create({\n      head: {\n        backgroundColor: \"#FF5877\",\n        borderColor: \"#FFC1C1\",\n        borderWidth: BORDER_WIDTH,\n        width: BODY_DIAMETER,\n        height: BODY_DIAMETER,\n        position: \"absolute\",\n        borderRadius: BODY_DIAMETER * 2\n      }\n    });\n```\n\n### Random decimal helper\n\nHere’s the code for generating a random decimal:\n\n```javascript\n    // src/helpers/getRandomDecimal.js\n    const getRandomDecimal = (min, max) =\u003e {\n      return Math.random() * (max - min) + min;\n    }\n    \n    export default getRandomDecimal;\n```\n\n## Running the app\n\nAt this point, you should be able to run the app and play the game:\n\n```\n    react-native run-android\n    react-native run-ios\n```\n\n## Conclusion\n\nIn this tutorial, you learned how to get the device’s accelerometer data from a React Native app and use it to control the ball. \n\nYou can view the code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/RNSensorDemo).","metaTitle":"Build a game using device sensors in React Native","metaDescription":"Build a mobile game, taking advantage of React Native's device sensors module. Use the gyroscope to detect the tilt of the phone, allowing a player to manipulate objects on screen and dodge obstacles. The game includes a simple scoring system, and can be easily extended."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5ygrpt3tD2nQvlcVNg9XDa","type":"Entry","createdAt":"2019-06-20T18:03:01.736Z","updatedAt":"2019-06-20T18:03:01.736Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Set up realtime monitoring for transactional emails with React and SendGrid","url":"transactional-emails-react-sendgrid","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/transactional-email","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2019-06-20","description":"Transactional emails are automated, realtime messages that are sent to users through email after a specific action has been performed on a website or application. In this tutorial you will set up realtime monitoring of transactional emails with SendGrid, using the scenario of a password reset email.","prerequisite":"You also need to have Node 8+ and npm installed on your machine.","content":"Transactional emails are automated, realtime messages that are sent to users through email after a specific action has been performed on a website or application. These emails are often used for a wide range of alerts such as account creation, password resets, order confirmations, invoices, shipping notifications and more.\n\nIt is necessary for every business to have some sort of monitoring service for transactional emails so that you can easily detect when there’s a problem, such as when your emails keep ending up in the spam folder or when critical emails are not being delivered as expected.\n\nIn this tutorial, I’ll show you how to set up realtime monitoring of transactional emails with Pusher Channels and SendGrid. We’ll be using the scenario of a password reset email in this example, but you can easily extend it to fit other use cases.\n\n## Prerequisites\n\nPrevious experience with React and Node is required to be able to follow through with this tutorial. You also need to have [Node](https://nodejs.org/en/download/) (v8 or later) and npm installed on your computer. You can view the instructions for how to install or upgrade your Node install [here](https://www.npmjs.com/get-npm).\n\n## Sign up for Channels\n\nBefore we write any code, let’s sign up for [Pusher Channels](https://pusher.com/channels) and grab the necessary credentials. Once you have signed up, select **Create Channels app** on the sidebar to create a new app. Give your app a name and hit **Create my app**. Once your app is created,  navigate to the **API Keys** tab and take note of the credentials. We’ll make use of it soon.\n\n## Sign up for SendGrid\n\nCreate a free account at [Sendgrid.com](http://sendgrid.com).  Once you're in, select **Settings \u003e API Keys** on the sidebar and then create a new API key. Give your API key a name, and select **Full Access** under **API Key Permissions**.  Once your key is created, keep it in view until after we’ve added it to an `.env` file in the next section.\n\n## Getting started\n\nCreate a new directory for this project and `cd` into it. Next, run `npm init -y` to initialize the project with a `package.json` file. Following that, run the command below to install the dependencies which we’ll be needing to build the server part of the application.\n\n```\n    npm install express cors pusher @sendgrid/mail dotenv --save\n```\n\nOnce the dependencies have been installed, create a new `variables.env` file and populate it with the following contents:\n\n```\n    // variables.env\n    PORT=5000\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n    SENDGRID_API_KEY=\u003cyour sendgrid api key\u003e\n```\n\nNext, create a new `server.js` file and populate it with the following contents:\n\n```javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    const Pusher = require('pusher');\n    const sgMail = require('@sendgrid/mail')\n    \n    sgMail.setApiKey(process.env.SENDGRID_API_KEY)\n    \n    const app = express();\n    \n    app.use(cors())\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      useTLS: true,\n    });\n    \n    app.post(\"/reset-password\", (req, res) =\u003e {\n      const { email } = req.body;\n      const msg = {\n        to: email,\n        from: 'noreply@fictionalservice.com',\n        subject: 'Reset your password',\n        html: `\n          \u003cp\u003eWe recently received a request to reset the password for your account.\n    Simply click the button below to reset your password.\u003c/p\u003e\n          \u003cbutton\u003eReset Password\u003c/button\u003e\n        `,\n      };\n    \n      sgMail.send(msg)\n        .then(() =\u003e {\n          res.send(\"Success!\");\n        })\n        .catch((err) =\u003e {\n          console.error(err);\n          res.status(500).send(\"An error occured\");\n        });\n    });\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nOur server currently has a single route which expects an email address and sends a password reset email message to it via SendGrid’s API.\n\nYou can then start the server by running `node server.js` in the terminal. It should become available on port 5000.\n\n## Set up the application frontend\n\nWe’ll be making use of the [create-react-app](https://github.com/facebook/create-react-app) tool to bootstrap our React app, so make sure you have it installed on your machine. If not, you can install it globally using `npm install -g create-react-app`.\n\nBy now, the `create-react-app` command should be available on your machine. Run the following command in the terminal to create a new React app.\n\n```\n    create-react-app client\n```\n\nAs soon has the command has finished running, `cd` into the `client` directory and run the command below to install the following additional dependencies which we’ll be using to build our application frontend.\n\n```\n    npm install react-router-dom react-toastify axios pusher-js react-spinkit skeleton-css --save\n```\n\nOnce all the dependencies have been installed, run `npm start` to start the development server. The application should be viewable at http://localhost:3000.\n\n## Create the password reset form\n\nOpen up `client/src/index.js` in your editor and change it to look like this:\n\n```javascript\n    // client/src/index.js\n    \n    import React from 'react';\n    import ReactDOM from 'react-dom';\n    import { HashRouter, Route } from 'react-router-dom';\n    import './index.css';\n    import App from './App';\n    import * as serviceWorker from './serviceWorker';\n    \n    ReactDOM.render(\n      \u003cHashRouter\u003e\n        \u003cRoute exact path=\"/\" component={App} /\u003e\n      \u003c/HashRouter\u003e\n    , document.getElementById('root'));\n    \n    serviceWorker.unregister();\n```\n\nNext, modify the contents of `client/src/App.js` as follows:\n\n```javascript\n    // client/src/App.js\n    \n    import React from 'react';\n    import axios from 'axios';\n    import logo from './logo.svg';\n    import Spinner from 'react-spinkit';\n    import { ToastContainer, toast } from 'react-toastify';\n    \n    import 'react-toastify/dist/ReactToastify.min.css';\n    import 'skeleton-css/css/normalize.css';\n    import 'skeleton-css/css/skeleton.css';\n    import './App.css';\n    \n    class App extends React.Component {\n      state = {\n        emailAddress: '',\n        loading: false,\n      }\n    \n      handleChange = (event) =\u003e {\n        const { value } = event.target;\n        this.setState({\n          emailAddress: value,\n        });\n      }\n    \n      handleSubmit = (event) =\u003e {\n        event.preventDefault();\n    \n        const { emailAddress } = this.state;\n    \n        this.setState({\n          loading: true,\n        });\n    \n        axios.post(\"http://localhost:5000/reset-password\", {\n          email: emailAddress,\n        }).then(() =\u003e {\n          toast.success(\"Check your email address for the recovery link\")\n        })\n          .catch(() =\u003e {\n            toast.error(\"An problem occured, please try again later\")\n          })\n          .finally(() =\u003e {\n            this.setState({\n              loading: false,\n            })\n          });\n      }\n    \n      render() {\n        const { emailAddress, loading } = this.state;\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cheader className=\"App-header\"\u003e\n              \u003cimg src={logo} className=\"App-logo\" alt=\"logo\" /\u003e\n            \u003c/header\u003e\n            \u003csection\u003e\n              \u003cform onSubmit={this.handleSubmit} className=\"password-reset\" action=\"\"\u003e\n                \u003ch5\u003eForgot your password? Reset it below\u003c/h5\u003e\n                \u003clabel htmlFor=\"email-input\"\u003eEmail address:\u003c/label\u003e\n                \u003cinput type=\"email\" onChange={this.handleChange} value={emailAddress} className=\"email-input\" placeholder=\"name@example.com\" id=\"email-input\" name=\"email\" /\u003e\n                \u003cbutton type=\"submit\"\u003eEmail me a recovery link\u003c/button\u003e\n                { loading ? \u003cSpinner name='line-scale-pulse-out' /\u003e : null }\n              \u003c/form\u003e\n              \u003cToastContainer /\u003e\n            \u003c/section\u003e\n          \u003c/div\u003e\n    \n        );\n      }\n    }\n    \n    export default App;\n```\n\nFinally, update `client/src/App.css` as shown below:\n\n```css\n    // client/src/App.css\n    \n    .App {\n      text-align: center;\n    }\n    \n    .App-logo {\n      animation: App-logo-spin infinite 20s linear;\n      height: 40vmin;\n      pointer-events: none;\n    }\n    \n    .App-header {\n      background-color: #282c34;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      font-size: calc(10px + 2vmin);\n      color: white;\n      margin-bottom: 20px;\n    }\n    \n    .App-link {\n      color: #61dafb;\n    }\n    \n    @keyframes App-logo-spin {\n      from {\n        transform: rotate(0deg);\n      }\n      to {\n        transform: rotate(360deg);\n      }\n    }\n    \n    form {\n      width: 100%;\n      max-width: 400px;\n      margin: 0 auto;\n      text-align: left;\n    }\n    \n    input, label {\n      display: block;\n      margin-bottom: 10px;\n    }\n    \n    .email-input {\n      margin-bottom: 20px;\n    }\n```\n\nThis part of the application is pretty simple. We have a single input where the user will enter their email address. Once the submit button is clicked, a POST request is made to the  `/reset-password` endpoint which we set up earlier on the server.\n\nNow, if we get a successful response (meaning an email was sent successfully), the app displays a toast notification informing the user to go check their email. Otherwise, an error message is displayed on the page.\n\n## Set up the monitoring dashboard\n\nThe next step is to set up a realtime monitoring dashboard that enables you to have a constant supervision on your transactional feeds. \n\nCreate a new `Dashboard.js` file in `client/src` and paste the following code into it:\n\n```javascript\n    // client/src/Dashboard.js\n    \n    import React, { Component } from 'react';\n    import Pusher from 'pusher-js';\n    \n    import './Dashboard.css';\n    \n    class Dashboard extends Component {\n      state = {\n        processed: 0,\n        dropped: 0,\n        delivered: 0,\n        deferred: 0,\n        bounce: 0,\n      }\n    \n      componentDidMount() {\n        const pusher = new Pusher('\u003cyour app key\u003e', {\n          cluster: '\u003cyour app cluster\u003e',\n          forceTLS: true\n        });\n    \n        var channel = pusher.subscribe('email-events');\n        channel.bind('new-event', data =\u003e {\n          const { event } = data;\n          this.setState(prevState =\u003e {\n            return {\n              [event]: prevState[event] + 1\n            }\n          });\n        });\n      }\n    \n      render() {\n        const { processed, dropped, delivered, deferred, bounce } = this.state;\n        return (\n          \u003cdiv className=\"Dashboard\"\u003e\n            \u003ch1\u003eRealtime Transactional Email Monitoring\u003c/h1\u003e\n            \u003cdiv className=\"metrics\"\u003e\n    \n            \u003cdiv className=\"metric\"\u003e\n              \u003cspan className=\"metric-name\"\u003eEmails Processed\u003c/span\u003e\n              \u003cspan className=\"metric-value\"\u003e{processed}\u003c/span\u003e\n            \u003c/div\u003e\n          \u003cdiv className=\"metric\"\u003e\n          \u003cspan className=\"metric-name\"\u003eEmails Delivered\u003c/span\u003e\n          \u003cspan className=\"metric-value\"\u003e{delivered}\u003c/span\u003e\n          \u003c/div\u003e\n          \u003cdiv className=\"metric\"\u003e\n              \u003cspan className=\"metric-name\"\u003eEmails Dropped\u003c/span\u003e\n              \u003cspan className=\"metric-value\"\u003e{dropped}\u003c/span\u003e\n          \u003c/div\u003e\n          \u003cdiv className=\"metric\"\u003e\n              \u003cspan className=\"metric-name\"\u003eEmails Deferred\u003c/span\u003e\n              \u003cspan className=\"metric-value\"\u003e{deferred}\u003c/span\u003e\n           \u003c/div\u003e\n          \u003cdiv className=\"metric\"\u003e\n              \u003cspan className=\"metric-name\"\u003eBounced Emails\u003c/span\u003e\n              \u003cspan className=\"metric-value\"\u003e{bounce}\u003c/span\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default Dashboard;\n```\n\nIf you look at the  `componentDidMount()` hook, you can see that we’re making use of the  `subscribe()` method from Pusher to subscribe to a new channel called `email-events`. Finally, we’re listening for the `new-event`  event on the `email-events` channel using the `bind` method and update the application state once we receive a new event on the channel. \n\nDon’t forget to replace `\u003cyour app id\u003e` and `\u003cyour app cluster\u003e` with the appropriate values from your Channels dashboard.\n\nNext, create the CSS file for the Dashboard component as shown below:\n\n```css\n    // client/src/Dashboard.css\n    \n    .Dashboard {\n      padding-top: 30px;\n      text-align: center;\n    }\n    \n    h1 {\n      margin-bottom: 50px;\n    }\n    \n    .metrics {\n      width: 1000px;\n      margin: 0 auto;\n      display: flex;\n      justify-content: space-between;\n      flex-wrap: wrap;\n    }\n    \n    .metric {\n      width: 130px;\n      border-radius: 4px;\n      border: 1px solid #ddd;\n      display: flex;\n      flex-direction: column;\n    }\n    \n    .metric span {\n      display: block;\n    }\n    \n    .metric-value {\n      font-size: 50px;\n    }\n```\n\nFinally, update your `client/src/index.js` file as shown below:\n\n```javascript\n    // client/src/index.js\n    \n    import React from 'react';\n    import ReactDOM from 'react-dom';\n    import { HashRouter, Route } from 'react-router-dom';\n    import './index.css';\n    import App from './App';\n    import Dashboard from './Dashboard';\n    import * as serviceWorker from './serviceWorker';\n    \n    ReactDOM.render(\n      \u003cHashRouter\u003e\n        \u003cRoute exact path=\"/\" component={App} /\u003e\n        \u003cRoute exact path=\"/dash\" component={Dashboard} /\u003e\n      \u003c/HashRouter\u003e// If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: https://bit.ly/CRA-PWA\n    , document.getElementById('root'));\n    \n    serviceWorker.unregister();\n```\n\n## Trigger updates from the server\n\nThe SendGrid [Event Webhook](http://sendgrid.com/docs/API_Reference/Webhooks/event.html) provides realtime feedback on every email you send across [nine event types](https://sendgrid.com/blog/the-nine-events-of-email/). Once an email is sent, SendGrid triggers a bunch of events on a provided HTTP POST URL. We can then use the information contained in the events to update our monitoring dashboard with Channels.\n\nFirst let’s set up the route on the server. Add this below the `/reset-password` route:\n\n```javascript\n    // server.js\n    \n    app.post(\"/events\", (req, res) =\u003e {\n      const events = req.body;\n      events.forEach(function (event) {\n        pusher.trigger('email-events', 'new-event', {\n          ...event\n        });\n      });\n    });\n```\n\nSave the file and restart the server in the terminal.\n\nNext, we need to expose our localhost server publicly using ngrok.  Visit [the ngrok website](https://ngrok.com/download) to find out how to set it up on your computer. Once you have it installed, start an HTTP tunnel on port 5000 by running the command below in a separate terminal window.  You will be provided with a couple of URLs but you only need the last one which is HTTPS enabled.\n\n```\n    ./ngrok http 5000\n```\n\nFinally, let’s activate SendGrid’s event notification service. On the SendGrid dashboard, go to **Settings \u003e Mail Settings**, and scroll to the **Event Notification** setting. Toggle the setting on, and click the **edit** link, then update the **HTTP POST URL** input with `\u003cyour ngrok url\u003e/events`. \n\nFollowing that, select the following actions: **Processed, Dropped, Deferred, Delivered** and **Bounced**, then click the blue checkmark on the right to save.\n\n\n![transactional-email-react-sendgrid-img1](//images.ctfassets.net/1es3ne0caaid/51PSH1WTe0yyW7naneM5Zg/e1ef0c68fe458bde28bdcbf322e1f1f1/transactional-email-react-sendgrid-img1.png)\n\nNot only will you be able to set up monitoring for your business critical emails, but you’ll be the first to know if anything goes wrong, allowing you to save time and money, and improve customer experience.\n\n## Test the application\n\nOpen the password reset form on http://localhost:3000 and the dashboard at http://localhost:3000/#/dash in a separate tab. Enter your email address and submit the form. After a short while, you should see the metrics update on the dashboard.\n\n![transactional-email-react-sendgrid-img2](//images.ctfassets.net/1es3ne0caaid/1FIzj3nn8nzvD3CoRxPUbC/7ef93e21d59898ca9c6aa23fcd159750/transactional-email-react-sendgrid-img2.gif)\n\n## Wrap up\n\nYou have now learned how to create a realtime monitoring dashboard for transactional emails. It was easy wasn’t it? We covered a simple use case but you can take it further and set up monitoring for all your business's critical emails.\n\nThanks for reading! Remember that you can find the source code of this app in this [GitHub repository](https://github.com/ayoisaiah/transactional-email).","metaTitle":"Monitoring for transactional emails with React and SendGrid","metaDescription":"Transactional emails are automated, realtime messages that are sent to users through email after a specific action has been performed on a website or application. In this tutorial you will set up realtime monitoring of transactional emails with SendGrid, using the scenario of a password reset email."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4CNVZfnDQY8Hwcnaxt2WM4","type":"Entry","createdAt":"2019-06-06T19:32:13.885Z","updatedAt":"2019-06-06T19:32:13.885Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Lifecycle methods in React 16","url":"lifecycle-methods-react-16","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55Vy5qUc2Hc2NxBxWerK1T","type":"Entry","createdAt":"2019-03-16T13:13:19.673Z","updatedAt":"2019-03-16T13:13:19.673Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lotanna Nwose","url":"lotanna-nwose","email":"viclotana@gmail.com","twitter":"https://twitter.com/viclotana","github":"https://github.com/viclotana","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2019-06-06","description":"Gain an understanding of all the lifecycle methods in React Native 16, including the error boundaries methods. Learn when to use them, performance implications, and best practices.","prerequisite":"To run the code samples you will need React 16.","content":"\u003e TL;DR: this is an overview of all the lifecycle methods in React 16, what they are used for and how they can be used in your workflow.\n\n![react-16-lifecycle-1](//images.ctfassets.net/1es3ne0caaid/2ePb1rwBhaPA6YFsOtNjmL/a74f5c6ab1e03757da17403b4d6c0bad/react-16-lifecycle-1.jpeg)\n\n## Introduction \n\nReact is a JavaScript library by Facebook with over 110,000 stars on [GitHub](https://github.com/facebook/react). It is a declarative, efficient, and flexible framework for building user interfaces. It is really very painless to create interactive user interfaces, to build component-centric applications, which are both responsive and backward compatible. It is also currently arguably the most popular JavaScript framework out there [according to the state of JS survey](https://2018.stateofjs.com/).\n\nThis article is for developers with basic working knowledge of React. You will be introduced to the React components lifecycle methods, where they are called, how they are used and the thought process behind their implementation.\n\n## React component lifecycle methods\n\nReact components lifecycle methods can be described as events that take place from any component’s inception to the death of that same component. The lifecycle of a React component takes place within these events that are in four categories:\n\n1. **Mounting:** The methods and events that take place here happen as the component is mounted in the DOM. \n2. **Updating:** Here the methods and events take place after the React component has entered the DOM.\n3. **Un-mounting:** Here the methods and events take place as they React component leaves the DOM or is unmounted from the DOM.\n4. **Error Boundaries:** Here is a special category that deals with handling or gracefully catching errors in order not to totally break your React application render. \n\nIn this post, the React lifecycle methods will be explained in the order they are called by React in the DOM.\n\n## constructor()\n\nFor React class components that are not functional components, the constructor is the very first method that gets called to action in the application’s component presentation. The constructor takes in `props` as an object, and you have to call the parent class through `super` in order to set access `this.props` to `props` ``inside the class. The constructor looks like this:\n\n```javascript\n    class FirstComponent extends Component {\n      constructor(props) {\n        console.log(\"constructor is called here!\");\n        super(props);\n        this.state = {\n          counter: 0\n        };\n      }\n    }\n```\n\nThe `super` call is very important and it must have the `props` passed into it. It is also important to know that state can only be set inside constructors. You can also set state values, bind methods and even create refs inside the constructor. \n\n## getDerivedStateFromProps() \n\nThe very next method called after the constructor is the `getDerivedStateFromProps` method, it is a static method and so you cannot use `this` inside of it. It is also the last method called before the render method. It kind of has a specific use case, which is to return a state object on the initial props and set state, this can also be done with the constructor but the constructor does a lot more things aside from setting state. It is not a very frequently used method as many React developers just use the constructor instead. It takes two parameters, props and state and the syntax looks like this:\n\n```javascript\n    static getDerivedStateFromProps(props, state) {\n        console.log(\"getDerivedStateFromProps called here\");\n        return null;\n      }\n```\n\nIt is called on every render and it can be placed inside the constructor method. \n\n## render()\n\nThis is the most important method of any React class, the whole work that is going to appear in the DOM is done here as it outputs the JSX of your component. It is the most used React lifecycle method and it is the only required method in any React class.\n\n```javascript\n    render(){\n     console.log(\"render method is called here\");\n     return \u003cdiv\u003eHello world!\u003c/div\u003e\n    }\n```\n\nYou are not however allowed to set state inside the render method as it should be pure. Pure functions are functions without side effects, they must always return the same outputs when the same corresponding inputs are passed into them.\n\n## componentDidMount()\n\nThis method is called immediately after the render method call as soon as the component is mounted. Inside this method is where you are allowed to do all the behind the scenes work you need without the DOM. These things can range from setting state, initializing and loading data and even adding event listeners. The syntax looks like this:\n\n```javascript\n    componentDidMount() {\n     console.log(\"componentDidMount was called here\");\n    }\n```\n\nIf `setState` is called inside this method, the DOM is re-rendered to reflect the modification. This method is perfect for making AJAX calls.\n\n## shouldComponentUpdate()\n\nThis is the method that is called right after the `componentDidMount method`, this method does not allow you set state in it. It is useful for when you do not want your props or state changes re-rendered, it is like a bridge where you have to get permission if a component should be updated based on the props or state changes made. It returns a boolean, usually true by default. The syntax looks like this:\n\n```javascript\n    shouldComponentUpdate(nextProps, nextState) {\n      console.log(\"should component update is called here!\");\n      return nextState.cars.length \u003c this.state.cars.length;\n    }\n```\n\nIt takes in two arguments, `nextProps` and `nextState` and with those you can you can make your return conditions for the re-render. It is advised that this method be used with care and for optimization purposes keep in mind that it can trigger re-renders.\n\n## getSnapshotBeforeUpdate() \n\nThis method is a very frequently used method, it is called just between the period a component is rendered and when it is updated in the DOM. It is a kind of screenshot of what the previous state and props looks like before updating, a genius method by React. The syntax can look like this:\n\n```javascript\n    getSnapshotBeforeUpdate(prevProps, prevState){\n      console.log(\"getSnapshotBeforeUpdate was called here!\");\n      if (prevState.cars.length \u003c this.state.cars.length) {\n        return { lastVehicle };\n      }\n      return null;\n    }\n```\n\nIt takes two parameters, `prevProps` and `prevState` and it either returns a value from the conditional statement or null by default. The value returned is always passed down to the componentDidUpdate method.\n\n## componentDidUpdate()\n\nThis is the next method that gets called immediately after the `getSnapshotBeforeUpdate` method, right after a DOM update. Here some logic can be set up for actions on an updated DOM. The syntax is like this:\n\n```javascript\n    componentDidUpdate(prevProps, prevState, snapshot) {\n      console.log(\"componentDidUpdate was called here!\");\n    if (snapshot.lastVehicle) {\n        return \u003cdiv\u003e No cars left! \u003c/div\u003e\n      }\n    }\n```\n\nIt has three parameters, the `prevProps`, `prevState` and the `snapshot` . The `snapshot` is the value returned from the `getSnapshotBeforeUpdate` method. You can set state here but it should always be inside a conditional statement.\n\n## componentWillUnmount()\n\nThis method is called just before a component is unmounted from the DOM, it is the method called right after componentDidUpdate. Here is where your clean up logic should go, clearing counters and caches, cancel API requests or removing things like event listeners. It can look like this:\n\n```javascript\n    componentWillUnmount(){\n      console.log(\"componentWillUnmount was called here!\");\n      window.removeEventListener(\"restart\");\n    }\n```\n\nAs you might have guessed, you cannot set state in this method because that would automatically have to cause a re-render most times. After this, your component is gone, for good.\n\n## getDerivedStateFromError()\n\nThis is one of the two new lifecycle method used to gracefully handle errors called error boundaries. If a child component of a parent component has an error we can use this method to display an error screen. The syntax looks like this:\n\n```javascript\n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n      }\n    \n      render() {\n        if (this.state.hasError) {\n          // You can render any custom fallback UI\n          return \u003ch1\u003eSomething went wrong.\u003c/h1\u003e;\n        }\n    \n        return this.props.children; \n      }\n```\n\nHere we catch a child component error and we display an error message of choice to the client gracefully instead of breaking the application or displaying a blank screen.\n\n## componentDidCatch()\n\nThis is the second lifecycle method that is a React error boundary. It enhances the capability of the first error boundary above by allowing for logging errors. The syntax looks like this:\n\n```javascript\n    componentDidCatch(error, info) {\n        console.log(info.componentStack);\n      }\n```\n\nSo, in addition to showing your client a decent ‘something went wrong’ message in the user interface, you also get a platform to inform a developer inspecting the component of specific information about the error. It is mostly used in addition with the getDerivedStateFromError method.\n\n## Conclusion\n\nYou have seen [all the lifecycle methods in React 16](https://reactjs.org/docs/react-component.html?utm_source=caibaojian.com), their syntax and how they all work in the chronological order of method calls. The error boundaries are relatively new and you should make sue to incorporate them in your workflow, they have been found to be very helpful. You can see a [visual representation of these methods here](http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/). Happy coding!","metaTitle":"Lifecycle methods in React 16","metaDescription":"Gain an understanding of all the lifecycle methods in React Native 16, including the error boundaries methods. Learn when to use them, performance implications, and best practices."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2Y5V99KAFZ8nOHQOK8PaZ","type":"Entry","createdAt":"2019-04-25T18:29:16.822Z","updatedAt":"2019-04-25T18:29:16.822Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a Youtube-integrated application using React Native","url":"youtube-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/OurTube","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2019-04-25","description":"Build a basic React Native app. Set up YouTube integration and pull in playlists from Rotten Tomatoes. This tutorial will guide you through React Native basics such as building components and using React Router.","prerequisite":"You will need React Native installed on your machine.","content":"## Introduction\n\nWhile building certain types of mobile apps, you might need to have media files displayed in the app.  In this tutorial, we will see how to integrate media from YouTube into our mobile apps.\n\n## What we'll build\n\nWe will build a simple mobile app using React Native called OurTube which will pull videos from the new trailers on Rotten Tomato YouTube channel via the Youtube API and display them to the user. After displaying, we should also be able to tap on a video and have it play inside the app.\n\n## Prerequisites\n\nA basic understanding of React and React Native is required for this tutorial.\n\n## Getting started\n\nYoutube is a video sharing website and it allows users to upload, rate, like, dislike, comment on videos and a lot more. Youtube also allows users to live stream videos. Youtube is also used widely for video blogging, educational purposes, movies, and trailers, and so on.\nWith the Youtube API, users can find, watch, and manage content on YouTube. It also allows you to add YouTube functionality to your website and mobile apps.\n\n## Obtaining your YouTube API key\n\nTo get started, the first step is to obtain our developer API key from the developer console. If you prefer a video tutorial, you can find a detailed video tutorial on how to obtain your developer API keys for YouTube [here](https://www.youtube.com/watch?v=3jZ5vnv-LZc).\n\nAfter obtaining your API key that should look like `AIzaSy****DjoCmWdzH*****cZYjOVg8o******`, we require the playlist ID we would like to fetch. To get the playlist ID:\n\n- Go to [Rotten Tomatoes TV channel YouTube page](https://www.youtube.com/playlist?list=PLTovKDoAy18KZ6sUQcmK2RDQeYkm2xUNtYouTube) -\u003e New Trailers Playlist\n- Copy the URL from the address bar e.g `https://www.youtube.com/playlist?list=PLTovKDoAy18KZ6sUQcmK2RDQeYkm2xUNt` and the playlist ID will be the string after the `list` query in the URL which is `PLTovKDoAy18KZ6sUQcmK2RDQeYkm2xUNt`\n## Setting up our React Native project\n\nTo get started, follow the official [documentation](https://facebook.github.io/react-native/docs/getting-started) on how to set up your computer for React Native development. If you already have your computer set up, you need to initiate and create the application project.\n\n```\n    $ react-native init OurTube\n```\n\nOnce that is completed, we need to compile and build the application to make sure everything is working fine.\n\n```\n    // For ios\n    $ react-native run-ios\n    \n    // For Android\n    $ react-native run-android\n```\n\n## Configure routing using react-native-router-flux\n\nReact-native-router-flux is a simple navigation API on top of React Navigation and it allows you to declare all application routes in stack and scenes for easy management and configuration. To get started with `react-native-router-flux`:\n\n```\n    $ npm install react-native-router-flux --save\n```\n\nGo ahead and create a route file and configure all application routing.\n\n```\n    $ touch Route.js\n```\n\n`Route.js` should be in the root directory of our OurTube App  and the contents will look like:\n\n```js\n    // Route.js\n    import React, { Component } from 'react';\n    import {Platform} from 'react-native';\n    // import components from react-native-router-flux\n    import {Router, Stack, Scene} from 'react-native-router-flux';\n    // import our screens as components \n    import Home from './screens/Home';\n    import WatchVideo from './screens/Video';\n    export default class Routes extends Component\u003c{}\u003e {\n      render() {\n        return(\n          \u003cRouter\u003e\n              \u003cStack key=\"root\"\u003e\n                \u003cScene key=\"home\" component={Home} title=\"Playlist Videos\" /\u003e\n                \u003cScene key=\"watchvideo\" component={WatchVideo} title=\"View Video\"/\u003e\n              \u003c/Stack\u003e\n          \u003c/Router\u003e\n          )\n      }\n    }\n```\n\nThe Router is the main routing component while a Stack is a group of Scenes with it's own navigator, so you can have multiple stacks for navigating. A Scene is the basic routing component for the main router and all Scene components require a key prop that must be unique and a key prop is used to call the screen transition and must be unique to all screens.\nWe have created two scenes called `home` and `watchvideo`. The scenes will be called as actions in our Home and Video screens.\nMore information can be found in the official [documentation](https://github.com/aksonov/react-native-router-flux/tree/master/docs/v3) of React Native Router Flux.\nUpdate `App.js` file to look like:\n\n```js\n    // App.js\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      View,\n      StatusBar,\n    } from 'react-native';\n    import Routes from './Route';\n    export default class App extends Component\u003c{}\u003e {\n      render() {\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cStatusBar\n              backgroundColor=\"#fff\"\n              barStyle=\"dark-content\"\n            /\u003e\n            \u003cRoutes/\u003e\n          \u003c/View\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      container : {\n        flex: 1,\n      }\n    }); \n```\n\n## Creating UI components\n\nReact Native offers inbuilt UI components and we'll be leveraging these inbuilt components. We will make use of components such as the `FlatList`, `Text`, and so on. \nLet's go ahead to create our project directories and files: \n\n```\n    $ mkdir screens \u0026\u0026 cd screens\n    $ touch Home.js Video.js\n```\n\n``js\n    // screens/Home.js\n    import React, { Component } from 'react';\n    import { StyleSheet, SafeAreaView, FlatList, Text, TouchableOpacity } from 'react-native';\n    import {Actions} from 'react-native-router-flux';\n    const MAX_RESULT = 15;\n    const PLAYLIST_ID = \"PLScC8g4bqD47c-qHlsfhGH3j6Bg7jzFy-\";\n    const API_KEY = \"\u003cYOUR-YOUTUBE-API-KEY\u003e\";\n    export default class Home extends Component\u003c{}\u003e {\n      \n      home(){\n        Actions.home();\n      }\n      watchVideo(video_url){\n        Actions.watchvideo({video_url: video_url});\n      }\n      componentWillMount() {\n        this.fetchPlaylistData();\n      }\n      fetchPlaylistData = async () =\u003e {\n        const response = await fetch(`https://www.googleapis.com/youtube/v3/playlistItems?playlistId=${PLAYLIST_ID}\u0026maxResults=${MAX_RESULT}\u0026part=snippet%2CcontentDetails\u0026key=${API_KEY}`);\n        const json = await response.json();\n        this.setState({ videos: json['items']});\n        console.log(this.state.videos)\n      };\n      constructor(props) {\n        super(props);\n        this.state = {\n          videos: [],\n        }\n      }\n      render() {\n        const videos = this.state.videos;\n        return (\n          \u003cSafeAreaView style={styles.safeArea}\u003e\n                \u003cFlatList\n                  data={this.state.videos}\n                  keyExtractor={(_, index) =\u003e index.toString()}\n                  renderItem={\n                    ({item}) =\u003e \n                    \u003cTouchableOpacity\n                        style={styles.demacate}\n                        onPress={() =\u003e this.watchVideo(item.contentDetails.videoId)}\n                    \u003e\n                    \u003cText \n                      style={styles.item} \n                    \u003e \n                    {item.snippet.title} \n                    \u003c/Text\u003e\n                    \u003c/TouchableOpacity\u003e\n                  }\n                /\u003e\n          \u003c/SafeAreaView\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      safeArea: {\n        flex: 1,\n        backgroundColor: '#fff'\n      },\n      demacate: {\n        borderBottomColor: 'blue',\n        borderBottomWidth: 2,\n        borderRadius:10\n      },\n      item: {\n        padding: 10,\n        fontSize: 12,\n        height: 44,\n      },\n    });\n```\n\nThe first thing we do in the `Home.js` file is to import all the necessary components to build the home screen. Like the variable names imply, `MAX_RESULT` is the number of videos we want to return from the youtube API, `PLAYLIST_ID` is a string of the youtube playlist we want to fetch and `API_KEY` will hold our Youtube API access key.\n\nThe `home()` and `watchVideo()` functions will call navigation actions that allow us to navigate from page to page. The `fetchPlaylistData()` is an asynchronous function that allows us to fetch data from the Youtube API and `componentWillMount()` allows us to fetch the async data after the screen is rendered. \n\nThe response data is converted to JSON and stored in the videos state and will be passed to our component during rendering. \n\nIn the `render()` we define a prop that holds data fetched such as video id from our Youtube API and we pass it to the videos page as a `video_url` prop so we don't have to do a network fetch to get the same data on the next screen. \n\nOur `render()` function renders the screen and we use the SafeAreaView component to handle the screens of newer devices such as the iPhone X, XR and higher so the screen doesn't overlap. We use the `Flatlist` component to render our data from the `videos` state using the `renderItem` prop.\n\n```js\n    // screens/Video.js\n    import React, { Component } from 'react';\n    import { StyleSheet, SafeAreaView, View, WebView } from 'react-native';\n    import {Actions} from 'react-native-router-flux';\n    export default class WatchVideo extends Component\u003c{}\u003e {\n      \n      home(){\n        Actions.home();\n      }\n      videos(){\n        Actions.videos();\n      }\n      constructor(props) {\n        super(props);\n        console.log(this.props);\n      }\n      render() {\n        return (\n          \u003cSafeAreaView style={styles.safeArea}\u003e\n              { \n                \u003cWebView\n                  source={{ uri: \"https://www.youtube.com/embed/\"+this.props.video_url}}\n                  startInLoadingState={true} \n                /\u003e\n              }\n          \u003c/SafeAreaView\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      safeArea: {\n        flex: 1,\n        backgroundColor: '#fff'\n      }\n    });\n```\n\nIn the `Video.js` file, we also import all the necessary components to build our interface and likewise, create routing actions so we can navigate back to our home screen.\nIn the `render()` function, the data we stored in the `video_url` props is accessed and rendered using the `Webview` video component. The component is customizable and allows us to define the URL source, loaders, and so on. \n\n## Building our app\n\nTo build and compile our code on iOS:\n\n```\n    $ react-native run-ios\n```\n\nTo build and compile our code on Android:\n\n```\n    $ react-native run-android\n```\n\nAfter build is successful, your application should look like:\n\n- Home Screen\n![react-ative-youtube-1](//images.ctfassets.net/1es3ne0caaid/71QEeOooJs8NEECW70GXW2/07781df2b5ac9408900a59da419c7330/react-ative-youtube-1.png)\n\n- Video Screen \n![react-ative-youtube-2](//images.ctfassets.net/1es3ne0caaid/2x9Vny1WUcFHQ9xiywm79D/c1cf04bc40a7228b25f275d1a1dad870/react-ative-youtube-2.png)\n\n## Conclusion\n\nThe YouTube API is robust and allows us to watch videos, get video metadata, and so on. The data can be integrated with any mobile development framework and as seen in OurTube app using React Native.\nOurTube app is in a simple version right now, but you can go ahead to add some more functionalities such as liking and disliking videos, reporting comments, and so on by reading [the Google Developer guide for Youtube](https://developers.google.com/youtube/v3/getting-started) in order to build complex and robust applications.\nThe codebase to this tutorial is available in a [public GitHub repository.](https://github.com/samuelayo/OurTube) Feel free to play around with it.","metaTitle":"Create a Youtube-integrated application using React Native","metaDescription":"Build a basic React Native app. Set up YouTube integration and pull in playlists from Rotten Tomatoes. This tutorial will guide you through React Native basics such as building components and using React Router."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6TNyvQoF2Yo2du5mu3u3XY","type":"Entry","createdAt":"2019-04-23T17:55:06.084Z","updatedAt":"2019-04-23T17:55:06.084Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Writing accessible apps and efficient code with React fragments","url":"accessible-react-fragments","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55Vy5qUc2Hc2NxBxWerK1T","type":"Entry","createdAt":"2019-03-16T13:13:19.673Z","updatedAt":"2019-03-16T13:13:19.673Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lotanna Nwose","url":"lotanna-nwose","email":"viclotana@gmail.com","twitter":"https://twitter.com/viclotana","github":"https://github.com/viclotana","guestWriter":true}}],"projectRepo":"https://github.com/viclotana/Fragments","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2019-04-23","description":"Learn how to handle nested HTML elements in React using fragments. Understand the benefits of fragments compared to other approaches, and work through a few practical examples.","prerequisite":"You will need React 16.8+ installed on your machine.","content":"we should \u003e **TL;DR:** in this article, you will be introduced to an awesome feature in React called fragments. You will learn why it is important as regards accessibility and how to use it.\n\n\n## Introduction\n\nSometimes while using React, you want to display or return multiple HTML elements in a component. This can be achieved in a number of ways that will be discussed in this post, most of which however can lead to HTML that is not accessible or even to writing non-semantic code. In this article, you will be shown a new feature called fragments in React that lets you do so in a very accessible memory efficient way. You will be taken through a series of illustrations and also code samples to let you properly understand the usefulness and how React fragments came about.\n\n## Achieving accessibility in React\n\nAccessibility on the web is the design of pages, tools and technologies that can be used by everyone. Everyone here includes people with auditory, cognitive, neurological, physical, speech and visual disabilities. Accessibility support is necessary to allow assistive technology like screen readers to interpret web pages and applications. For these technologies to work, developers have to always think and build accessible applications.\n\n\n## Prerequisites \n\nThis article is suited for all levels of expertise using React JS, this includes beginners. This article promises to break down concepts as simply as possible.\nTo be able to follow through in this article’s demonstration you should have:\n\n\n- [Visual Studio Code](https://code.visualstudio.com/download) installed as your integrated development environment. \n- Node version 11.0 or above installed on your machine.\n- Node Package Manager version 6.7 or above (usually ships with Node installation).\n- React version 16.8 or above installed on your machine.\n- Create-react-app installed on your machine\n\nWith these, you are ready to move to setting up a new React project. \nOther things that will be nice-to-haves are:\n\n- A working knowledge of the [React framework and create-react-app (CRA)](https://github.com/facebook/create-react-app) file system at a beginner level.\n- Familiarity with rendering in React will be a plus but not a requirement.\n\n\n## Setting up\n\nWe will go through the process of setting up the development environment and installing all the required dependencies for create-react-app to work.\n\nInstall React globally by running the command below in a terminal:\n\n```\n    npm install -g react\n```\n\nInstall create-react-app globally too with this command below\n\n```\n    npm install -g create-react-app\n```\n\nNavigate to a folder of your choice and create a new React application called `fragments` with the CRA boilerplate by running this command below\n\n```\n    npx create-react-app fragments\n```\n\nOR You can just download an already created new React project [here](https://github.com/viclotana/react_canvas). Unzip the folder and then install all the dependencies with this command:\n\n```\n    npm install\n```\n\nNavigate into the fragments folder and run the new app in development environment like this:\n\n```\n    npm start\n```\n\nOpen the project in VS Code, navigate to the `src` folder and open the `app.js` file. Remove all the code inside the div of the return statement. Your `app.js` file should look like this:\n\n```javascript\n    //  src/App.js\n    import React, { Component } from 'react';\n    import './App.css';\n    class App extends Component {\n     render() {\n      return (\n      \u003cdiv className=\"App\"\u003e\n      \u003c/div\u003e\n      );\n     }\n    }\n    export default App;\n```\n\n## Writing in JSX \n\nCreate a new file, call it `Fragment.js` It will be a React component. Writing in JSX, if you want to return a paragraph of text with a heading in a functional or any React component, you might first think to represent it like this at first:\n\n```javascript\n    // src/Fragment.js\n    import React from 'react'\n    function Fragment() {\n    return (\n    \u003ch2\u003e Learning about fragments \u003c/h2\u003e\n    \u003cp\u003efragments are super amazing\u003c/p\u003e\n    )\n    }\n    export default Fragment\n```\n\nAdd this line to the `App.js`  to import the fragment component in the main app component\n\n```javascript\n    import Fragment from './Fragment';\n```\n\nYou will immediately see some warnings in squeaky red lines saying “Parsing error: Adjacent JSX elements must be wrapped in an enclosing tag” and if you go ahead and save the file and run in the development environment, you will find out the application is broken.\n\n![react-fragments-1](//images.ctfassets.net/1es3ne0caaid/2IMkMbsMZwYNXwtvDSzZx6/77e008d43312c55c9c6ba5d484bb4269/react-fragments-1.png)\n\nThis occurs simply because it is not possible to have more than one parent HTML element in a return statement for JSX. In order to run JSX code and get it compiled, it must have one parent HTML element, and the rest of the elements should be child elements of that parent element. There has been a few ways React developers over time have used to get around this problem, I call them old practises.\n\n\n## Old practises\n\nThese are a few practises usually adopted by React developers to return multiple HTML elements without any parse errors.\n\n\n## The array technique\n\nIn this technique, you wrap the elements you want to return in an array by passing the elements like array elements. That way, your elements will be rendered as you will want them and the application will no longer break.\nCreate a new functional component and call it `ArrayExample.js` . Return the exact logic we had in the first illustration in the return section but this time as array elements of an array.\n\n```javascript\n    // src/ArrayExample.js\n    import React from 'react'\n    function ArrayExample() {\n     return (\n      [\n       \u003ch2\u003eLearning about fragments\u003c/h2\u003e,\n       \u003cp\u003efragments are super amazing\u003c/p\u003e\n      ]\n     )\n    }\n    export default ArrayExample\n```\n\nReference this new component in the DOM by including it and importing it in the main `App.js` file.\n\n```js\n    // src/App.js\n    import React, { Component } from 'react';\n    import './App.css';\n    // import Fragment from './Fragment';\n    import ArrayExample from './ArrayExample';\n    class App extends Component {\n    render() {\n    return (\n    \u003cdiv className=\"App\"\u003e\n    {/* \u003cFragment /\u003e */}\n    \u003cArray /\u003e\n    \u003c/div\u003e\n    );\n    }\n    }\n    export default App;\n```\n\nIn order not to get any errors, make sure to remove the paragraph element in the `Fragment.js` file. The return statement should look like this:\n\n```js\n    // replace the return code block in the Fragment.js with this\n    return (\n    \u003ch2\u003e\n    Learning about fragments\n    \u003c/h2\u003e\n    )\n```\n\nWhen you save all the files, you will see the elements you expected rendered in the browser. Open your browser at [http://localhost:3000/](http://localhost:4200/) and you should see your application like this:\n\n![react-fragments-2](//images.ctfassets.net/1es3ne0caaid/5wwSfiIU7eel6lPF57SMtO/e5a099c5c1d0d2a51be2652ae4dcb976/react-fragments-2.png)\n\n### Drawbacks: inefficient memory management\n\nThe array technique is a good solution but a memory inefficient solution, as it requires rendering extra elements in the DOM. It also requires even more additional syntax to use. If you use your browser developer tools to inspect the application, you will see a console warning that looks like this:\n\n![react-fragments-3](//images.ctfassets.net/1es3ne0caaid/5ij6dr41CgRtjIlAVjW4K2/81d3f6759931ff219e34a1d3f8294473/react-fragments-3.png)\n\nTo make sure you do not get warned again, add unique keys to the individual elements in the array.\n\n```js\n    // src/ArrayExample.js\n    import React from 'react'\n    function ArrayExample() {\n     return (\n      [\n       \u003ch2 key=\"alpha\"\u003e Learning about fragments \u003c/h2\u003e,\n       \u003cp key=\"beta\"\u003e fragments are super amazing \u003c/p\u003e\n      ]\n     )\n    }\n    export default ArrayExample\n```\n\nYou will see the warnings disappear when you save the file. This additional syntax adds to the cumbersome nature of this method and makes it unsustainable and inefficient.\n\n\n## The extra tag technique\n\nAnother solution to returning more than one element without errors is to wrap them in a parent tag. This tag can be a `span` or a `div` tag, most React developers use `div` tags a lot to ensure their code block for a return statement does not lead to errors that break the application. These tags are absolutely do nothing except preventing JSX errors.\n\nCreate a new functional component and call it `Extra.js`. Copy the logic below and paste into the new component.\n\n```js\n    // src/Extra.js\n    import React from 'react'\n    import Lists from './Lists';\n    function Extra() {\n     return (\n      \u003cdiv\u003e\n       \u003ch2\u003e Learning about fragments \u003c/h2\u003e\n       \u003cp\u003eWays to render elements\u003c/p\u003e\n       \u003cul\u003e\n        \u003cLists /\u003e\n       \u003c/ul\u003e\n      \u003c/div\u003e\n     )\n    }\n    \n    export default Extra\n```\n\nCreate another component, call it `Lists.js` where the list will be stored and then imported into the `Extra` component.\n\n```js\n    // src/Lists.js\n    import React from 'react'\n    function Lists() {\n     return (\n      \u003cdiv\u003e\n       \u003cli\u003e1. Array method\u003c/li\u003e\n       \u003cli\u003e2. Extra tag method\u003c/li\u003e\n       \u003cli\u003e3. fragments\u003c/li\u003e\n      \u003c/div\u003e\n     )\n    }\n    export default Lists\n```\n\nReference the `Extra` component in the DOM by including it and importing it in the main `App.js` file.\n\n```js\n    // src/App.js\n    import React, { Component } from 'react';\n    import './App.css';\n    // import Fragment from './Fragment';\n    import Extra from './Extra';\n    \n    class App extends Component {\n     render() {\n      return (\n       \u003cdiv className=\"App\"\u003e\n       {/* \u003cFragment /\u003e */}\n       {/* \u003cArrayExample /\u003e */}\n       \u003cExtra /\u003e\n      \u003c/div\u003e\n      );\n     }\n    }\n    \n    export default App;\n```\n\nWhen you save all the files, you will see the elements as expected rendered in the browser. However, when you inspect the application using the developer tools you will discover that the extra `div` is present in the DOM but more damaging is the `div` between the `ul` tag and the `li` tags. That is not semantic and will not be recognized by an accessibility tool like a screen reader.\n\n![react-fragments-4](//images.ctfassets.net/1es3ne0caaid/4sSXaMGoB3Eg83XNRBK4O9/c774daa3180f9ba525885a1ec4817aee/react-fragments-4.png)\n\nYou can see that after a `ul` tag, the next logical HTML tag to expect is either `li` or a closing `ul` tag. Any other tag will deviate from HTML semantics.\n\n### Drawbacks: accessibility problems\n\nThis is the most popularly used method but it is also the most inaccessible solution. In instances like rendering lists items where we use extra elements like `div` tags are used, it can easily lead to non-semantic HTML. As regards to accessibility, which will be explained later in this post, it is very difficult for screen readers to interpret non-semantic code and so this method, albeit simple is not advisable.\n\n\n## Introducing React fragments \n\nSome months ago, React version 16.2 was released, it shipped with this new feature that helped to address this accessibility problem called fragments. Fragments are like those extra HTML elements we used but they come without all the drawbacks. This means that child nodes can be returned safely without extra nodes added to the DOM. \n\n\n\u003e Fragments let you group a list of children without adding extra nodes to the DOM — [Official Documentation](https://reactjs.org/docs/fragments.html#short-syntax)\n\n\n## Fragment syntax \n\n```js\n    render() {\n      return (\n        \u003cReact.fragment\u003e\n          \u003cChildA /\u003e\n          \u003cChildB /\u003e\n          \u003cChildC /\u003e\n        \u003c/React.fragment\u003e\n      );\n    }\n```\n\nThere is also a shorthand syntax you might have noticed in some of my React tutorials, they look like this:\n\n```js\n    render() {\n      return (\n        \u003c\u003e\n          \u003cChildA /\u003e\n          \u003cChildB /\u003e\n          \u003cChildC /\u003e\n        \u003c\u003e\n      );\n    }\n```\n\n## Applications of fragments \n\nIf you take the very first illustration we addressed which is `Fragment.js` and wrap the elements in a React fragment, you will see no errors and they will compile without adding the fragment node to the DOM.\n\n```js\n    // src/Fragment.js\n    import React from 'react'\n    function Fragment() {\n     return (\n      \u003c\u003e\n       \u003ch2\u003e Learning about fragments \u003c/h2\u003e\n       \u003cp\u003efragments are super amazing\u003c/p\u003e \n      \u003c/\u003e\n     )\n    }\n    export default Fragment\n```\n\nSave the file and take a look at the element inspection in the developer tools, you will notice the beautiful power of fragments.\n\n![react-fragments-5](//images.ctfassets.net/1es3ne0caaid/3xBWE1Ja5HEB2PQpjCFoVD/5551282a11d485c560a3e1533ff81435/react-fragments-5.png)\n\nThe elements appear in the DOM exactly as they are in the presentation and no longer contain any extra elements. Fragments can be used to improve efficiency, better manage memory and reduce cumbersome code structures.\n\n\n## Keyed fragments \n\nReact fragments can be returned by callback functions and they can have a `key` attribute. Copy the code below to the `Fragment.js` file\n\n```js\n    // src/Fragment.js\n    import React from 'react'\n    function Fragment() {\n    const artists = [\n    {id: '1', name: 'Davido', genre: 'afro pop'},\n    {id: '2', name: 'Skepta', genre: 'afrobeats'},\n    {id: '3', name: 'Burna Boy', genre: 'afro pop'},\n    {id: '4', name: 'Mr. Eazi', genre: 'afro pop'},\n    {id: '5', name: 'Stormzy', genre: 'afro pop'},\n    {id: '6', name: 'Wizkid', genre: 'afro pop'}\n    ]\n    return (\n    \u003c\u003e\n    \u003ch1\u003eUK Urban Artists Chart\u003c/h1\u003e\n    {\n    artists.map( artist =\u003e (\n    \u003cReact.Fragment key={artist.id}\u003e\n    \u003ch2\u003e{artist.id}: {artist.name}\u003c/h2\u003e\n    \u003c/React.Fragment\u003e\n    ))\n    }\n    \u003c/\u003e\n    )\n    }\n    export default Fragment\n```\n\nThe `key` attribute is the only attribute that can be passed to React fragments at the time of writing this tutorial. The React team however promised to look into adding support for more attributes like event handlers. \nMake sure to uncomment the fragment import in the `App.js` file \n\n```js\n    // src/App.js\n    import React, { Component } from 'react';\n    import './App.css';\n    import Fragment from './Fragment';\n    // import ArrayExample from './ArrayExample';\n    // import Extra from './Extra';\n    \n    class App extends Component {\n     render() {\n      return (\n       \u003cdiv className=\"App\"\u003e\n        \u003cFragment /\u003e \n       \u003c/div\u003e\n      );\n     }\n    }\n    \n    export default App;\n```\n\nSave all the files and your application should look like this:\n\n![react-fragments-6](//images.ctfassets.net/1es3ne0caaid/4BvpSiak0HtcK2TWtLFZMJ/5ffee014d72366c4f305e95dfa6d6df1/react-fragments-6.png)\n\n## Conclusion\n\nIn this tutorial, you have been introduced to React fragments, why they are important and how they are used. You have also seen how they contribute to ensuring we keep building accessible applications. The coming of fragments is one deliberate step towards achieving total accessibility championed by React. You can find my how to make your React application more accessible [article here](https://blog.bitsrc.io/achieving-accessibility-in-react-applications-d762f8f2a3e7). The complete code to this tutorial can be found on [GitHub here](https://github.com/viclotana/Fragments). Try using fragments today.","metaTitle":"Writing accessible code with React fragments","metaDescription":"Learn how to handle nested HTML elements in React using fragments. Understand the benefits of fragments compared to other approaches, and work through a few practical examples."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7DhDRN2hkAKlFM826mnGOR","type":"Entry","createdAt":"2019-03-29T17:32:22.293Z","updatedAt":"2019-07-16T00:37:57.653Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to consume a RESTful API in React","url":"consume-restful-api-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1N3HBqLEugWyeKsWEW0iYg","type":"Entry","createdAt":"2018-08-06T18:12:32.345Z","updatedAt":"2018-08-06T18:12:32.345Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Fisayo Afolayan","url":"fisayo-afolayan","email":"afolayanfisayo@gmail.com","twitter":"https://twitter.com/fisayoafolayan","github":"https://github.com/fisayoafolayan","guestWriter":true}}],"projectRepo":"https://github.com/fisayoafolayan/consuming-restful-api-in-react","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2019-03-29","description":"This brief tutorial will introduce you to using REST APIs in React applications. You will create a simple demo that consumes a contact list API and displays it.","prerequisite":"You will need npm installed, and a basic knowledge of React.","content":"This brief tutorial will help you understand a few concepts you need to know so as to integrate a RESTful API in a React application.\n\nReact is the one of the most popular frontend framework out there and more developers are increasing learning how to build real life applications with React. While learning React, you will eventually get to a point when you need to integrate APIs in your React application. \n\nWe will be building a simple contact list application to display the contact's name, email and we will store a catch phrase of a contact. We will make use of this [endpoint](http://jsonplaceholder.typicode.com/users), it contains a JSON dump of data needed for our contact list application.\n\n## Prerequisites\n\n- Basic knowledge of React (versions \u003e=2.1.1)\n- Basic understanding of JavaScript\n- Basic understanding of APIs\n- Must have npm installed on your local machine (versions \u003e= 5.2)\n\n## Setting up our environment\n\n### Install create-react-app\n\nWe will be creating our React Application using a neat tool called `create-react-app`, this is a boilerplate that helps you set up a proper folder structure and assets binding for your React application. Run this command on your terminal.\n\n```\n    npm i create-react-app\n```\n\n### Create a new Project\n\nNext, we will create a new project using `create-react-app`. So you can switch into your preferred directory and run this command on your terminal.\n\n```\n    npx create-react-app react-api\n```\n\n\u003e `npx` is a tool to help execute packages, you can read more about it [here](https://www.npmjs.com/package/npx)\n\nThis will generate some scaffolds you need to get your React application running as quick as possible.\n\nNext, run the application using the following command.\n\n```\n    npm start\n```\n\nThis will automatically open http://localhost:3000 on your browser and you will get the default `create-react-app` homepage.\n\n![react-rest-api-1](//images.ctfassets.net/1es3ne0caaid/7EXzzORL4Z7eGbAywYOkxl/7accecb9df1d30d8b096d7f81f7958d5/react-rest-api-1.png)\n\n\u003e To access the application on any device you have connected on the same network, you can access it via `http://\u003cyour-host-machine-ip\u003e:3000` which will be shown to you in terminal.\n\n## Project setup\n\nThe next step is to modify the `App.js` file located in the `src` folder to look like this.\n\n```javascript\n    // src/App.js\n    \n    import React, {Component} from 'react';\n    \n    class App extends Component {\n      render () {\n        return (\n          // JSX to render goes here...\n        );\n      }\n    }\n    \n    export default App;\n```\n\nIf you noticed, we got rid of `import logo from './logo.svg';` and `import './App.css';` along with the JSX in the `render()` method because we will not be needing those in the course of this tutorial.\n\n### Setting up bootstrap\n\nNext, we have to link bootstrap's CDN in the `index.html` file which can be found in the public folder.\n\n```html\n    // public/index.html\n    ...\n    \u003chead\u003e\n      ...\n      \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"\u003e\n      ...\n    \u003c/head\u003e\n    ...\n```\n\nWhen this is done we will render a bootstrap card in the `App.js` file by including this snippet in the `return()` method.\n\n```javascript\n    // src/App.js\n    \n    import React, { Component } from 'react';\n    \n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n              \u003ch5 class=\"card-title\"\u003eSteve Jobs\u003c/h5\u003e\n              \u003ch6 class=\"card-subtitle mb-2 text-muted\"\u003esteve@apple.com\u003c/h6\u003e\n              \u003cp class=\"card-text\"\u003eStay Hungry, Stay Foolish\u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nIf we reload our application the following changes will reflect showing the contact's name, email and catch phrase in a bootstrap card.\n\n![react-rest-api-2](//images.ctfassets.net/1es3ne0caaid/2Fl8AfkXpWfxLLV8tNGRDw/dd649c8648754d633dce8152e7459fc6/react-rest-api-2.png)\n\n### Feeding dynamic data from the API\n\nMost modern web applications make use of the [REST Protocol](https://searchmicroservices.techtarget.com/definition/REST-representational-state-transfer) to communicate with each other. To achieve this, data is sent as [JSON (JavaScript Object Notation)](https://www.json.org/) to the API. In turn, the API returns a JSON payload which can be static or dynamic data. Our application will parse and display the data in a presentable manner, making it appealing to the user.\n\nBelow is a typical JSON response from the contact list [dump](http://jsonplaceholder.typicode.com/users):\n\n```json\n    [\n      {\n        \"id\": 1,\n        \"name\": \"Leanne Graham\",\n        \"username\": \"Bret\",\n        \"email\": \"Sincere@april.biz\",\n        \"address\": {\n          \"street\": \"Kulas Light\",\n          \"suite\": \"Apt. 556\",\n          \"city\": \"Gwenborough\",\n          \"zipcode\": \"92998-3874\",\n          \"geo\": {\n            \"lat\": \"-37.3159\",\n            \"lng\": \"81.1496\"\n          }\n        },\n        \"phone\": \"1-770-736-8031 x56442\",\n        \"website\": \"hildegard.org\",\n        \"company\": {\n          \"name\": \"Romaguera-Crona\",\n          \"catchPhrase\": \"Multi-layered client-server neural-net\",\n          \"bs\": \"harness real-time e-markets\"\n        }\n      }\n    ]\n```\n\n### Creating a state\n\nA state is simply an object that holds data pending to be rendered. This is where we will store the output from the API call.\n\n```javascript\n    // src/App.js\n    \n    import React, { Component } from 'react';\n    \n    class App extends Component {\n    \n      state = {\n        contacts: []\n      }\n      ...\n    }\n```\n\nIn the snippet above we have created a state to store the the output from our API request.\n\n### Calling the API\n\nTo fetch our contact list, we will use a `componentDidMount()` method in our `App.js` file. This method is executed immediately our component is mounted and we will also make our API request in that method.\n\n```javascript\n    // src/App.js\n    \n    import React, { Component } from 'react'\n    \n    class App extends Component {\n      ...\n      componentDidMount() {\n        fetch('http://jsonplaceholder.typicode.com/users')\n        .then(res =\u003e res.json())\n        .then((data) =\u003e {\n          this.setState({ contacts: data })\n        })\n        .catch(console.log)\n      }\n      ...\n    }\n```\n\n`fetch('http://jsonplaceholder.typicode.com/users')` will make a `GET` request to the endpoint `.then(res =\u003e res.json())` parses the output to JSON, `.then((data) =\u003e {this.setState({ contacts: data })})` sets the value of our state to the output from the API call and finally `.catch(console.log)` logs any error we get to the console.\n\n### Creating our contacts component\n\nNext up, we will create a component to render the results as cards. To achieve this we will create a component by creating a new sub-folder named `components` in the `src` directory followed by creating a `contacts.js` file in the `components` directory by running:\n\n```\n    $ mkdir src/components\n    $ touch src/components/contacts.js\n```\n\nThe contents of the `contacts.js` component file will be the following:\n\n```javascript\n    // src/components/contacts.js\n    \n    import React from 'react'\n    \n    const Contacts = ({ contacts }) =\u003e {\n      return (\n        \u003cdiv\u003e\n          \u003ccenter\u003e\u003ch1\u003eContact List\u003c/h1\u003e\u003c/center\u003e\n          {contacts.map((contact) =\u003e (\n            \u003cdiv class=\"card\"\u003e\n              \u003cdiv class=\"card-body\"\u003e\n                \u003ch5 class=\"card-title\"\u003e{contact.name}\u003c/h5\u003e\n                \u003ch6 class=\"card-subtitle mb-2 text-muted\"\u003e{contact.email}\u003c/h6\u003e\n                \u003cp class=\"card-text\"\u003e{contact.company.catchPhrase}\u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          ))}\n        \u003c/div\u003e\n      )\n    };\n    \n    export default Contacts\n```\n\nThe `Contacts` method accepts the `contacts` state we created earlier and then returns a mapped version of the state, which loops over the bootstrap card to insert the contact's `name`, `email` and `catch phrase`.\n\n### Rendering the contacts component\n\nThe final step to this application is to render our component in `src/App.js` . To do this, we have to import the component into `App.js`.\n\n```javascript\n    // src/App.js\n    \n    import React, { Component } from 'react';\n    import Contacts from './components/contacts';\n    ...\n```\n\nThen in our render method we have to clear out whatever we had there before and pass our component along with the `contacts` state in there for it to be rendered.\n\n```javascript\n    // src/App.js\n    \n    import React, { Component } from 'react'\n    import Contacts from './components/contacts'\n    \n    class App extends Component {\n      ...\n      render() {\n        return (\n          \u003cContacts contacts={this.state.contacts} /\u003e\n        )\n      }\n    }\n    \n    export default App\n```\n\n## Running our application\n\nIf you don't already have your application running, you can run it by using the `npm start` command.\n\n![react-rest-api-3](//images.ctfassets.net/1es3ne0caaid/562Cp96RBxy9hArfvoHmJ9/f3bb2f3db60b535708cd45ae878cf0b1/react-rest-api-3.png)\n\nThis will open your browser for you to view the application or show you some errors if you missed anything. You can visit directly by accessing `http://localhost:3000` . If port `3000` is already in you you will be prompted to change the port.\n\n![react-rest-api-4](//images.ctfassets.net/1es3ne0caaid/7HhiEHl7512eNWwlO8lbmi/71d9f8df33ec07f19efca03103bbcbaa/react-rest-api-4.png)\n\n## Conclusion\n\nIn this tutorial, we built a simple contact list web page, that displayed contact details. We called a RESTful Api, and we displayed the response to the browser using React. We also covered how the `componentDidMount()` method works, how state works, how components works and how to fetch data from an API and parsing the data to a component.\n\nYou can learn more about React from the official documentation [here](https://reactjs.org/docs/getting-started.html). The source code to the application in this article is available on [GitHub](https://github.com/fisayoafolayan/consuming-restful-api-in-react).","metaTitle":"How to consume a RESTful API in React","metaDescription":"This brief tutorial will introduce you to using REST APIs in React applications. You will create a simple demo that consumes a contact list API and displays it."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4CCoqI4zE8NbARFYXDrNx9","type":"Entry","createdAt":"2019-03-28T16:22:45.686Z","updatedAt":"2019-03-28T16:22:45.686Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a live multiplayer quiz app in React Native","url":"live-multiplayer-quiz-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNQuiz","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6nDfV1cd5C6464wgCoOQii","type":"Entry","createdAt":"2018-02-12T15:08:13.901Z","updatedAt":"2018-02-26T12:31:12.764Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Gaming","url":"gaming","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2019-03-28","description":"Use React Native and Node to build a live cross-platform quiz app. Admins are able to add questions and start the game. Users have a short amount of time to respond. At the end, a scoreboard is displayed, showing the top player.","prerequisite":"You will need Node 11+, Yarn and React Native installed on your machine.","content":"In this tutorial, we’ll create a quiz app which can cater to multiple users in realtime. \n\n\n## Prerequisites\n\nKnowledge of Node.js and React Native is required to follow this tutorial. This also means your machine needs to have the React Native development environment.\n\nWe’ll be using [Yarn](https://yarnpkg.com/en/) to install dependencies. \n\nYou’ll also need a [Pusher app instance](https://pusher.com/channels) and an [ngrok account](https://ngrok.com/). Enable client events on your Pusher app so we can trigger events from the app itself.\n\nThe following package versions are used in this tutorial:\n\n\n- Node 11.2.0\n- Yarn 1.13.0\n- React Native 0.58.5\n\n\n## App overview\n\nWe will create a multi-player quiz app. Users will be given 10 multiple choice questions and they have to select the correct answer to each one as they are displayed on the screen.\n\nWhen the user opens the app, they have to log in. This serves as their identification in the game:\n\n![react-native-quiz-1](//images.ctfassets.net/1es3ne0caaid/4HEVLB5VTnFk0gE4NN6VpV/cbd2200a7b4b8e983980d6ed5569d9c0/react-native-quiz-1.png)\n\nOnce they’re logged in, a loading animation will be displayed while waiting for the admin to trigger the questions. \n\nThe game starts when the first question is displayed on the screen. As soon as the user picks an option, either correct or wrong mark will be displayed next to the option they selected. Once the user selects an option, they can no longer select another one. Users have 10 seconds to answer each question. If they answer after the countdown (displayed in the upper right corner), their answer won’t be considered.\n\n![react-native-quiz-2](//images.ctfassets.net/1es3ne0caaid/2ls9Qhi5bWTtaevyI9dPWk/57929ac14013c77e5af01e1e35365e1d/react-native-quiz-2.gif)\n\nAfter all 10 questions have been displayed, the top users are displayed and that ends the game:\n\n![react-native-quiz-3](//images.ctfassets.net/1es3ne0caaid/6XIrr1HxmjNhP4NkwktMcr/6548adc564125f35044e81edc009c398/react-native-quiz-3.png)\n\n\n## Setting up \n\nClone the repo and switch to the starter  branch to save time in setting up the app and adding boilerplate code:\n\n```\n    git clone https://github.com/anchetaWern/RNQuiz\n    cd RNQuiz\n    git checkout starter\n```\n\nNext, install the dependencies and link them up:\n\n```\n    yarn\n    react-native eject\n    react-native link react-native-config\n    react-native link react-native-gesture-handler\n    react-native link react-native-vector-icons\n```\n\nThe starter branch already has the two pages set up. All the styles that the app will use are also included. So all we have to do is add the structure and logic.\n\nNext, update your `android/app/src/main/AndroidManifest.xml` and add the permission for accessing the network state. This is required by Pusher:\n\n```xml\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"com.rnquiz\"\u003e\n        \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n        \u003cuses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\"/\u003e\n        \u003cuses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/\u003e \u003c!-- add this --\u003e\n    \u003c/manifest\u003e\n```\n\nNext, update `android/app/build.gradle` to include the `.gradle` file for the [React Native Config](https://github.com/luggit/react-native-config) package. We’ll be using it to use `.env` configuration files inside the project:\n\n```gradle\n    apply from: \"../../node_modules/react-native/react.gradle\"\n    apply from: project(':react-native-config').projectDir.getPath() + \"/dotenv.gradle\"\n```\n\nNext, create a `.env` file at the root of the React Native project and add your Pusher app credentials:\n\n```\n    PUSHER_APP_KEY=\"YOUR PUSHER APP KEY\"\n    PUSHER_APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\nOnce you’re done with setting up the app, do the same for the server as well:\n\n```\n    cd server\n    yarn\n```\n\nThe server doesn’t have boilerplate code already set up so we’ll write everything from scratch.\n\nLastly, create a `server/.env` file and add your Pusher app credentials:\n\n```\n    APP_ID=\"YOUR PUSHER APP ID\"\n    APP_KEY=\"YOUR PUSHER APP KEY\"\n    APP_SECRET=\"YOUR PUSHER APP SECRET\"\n    APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\n## Quiz server\n\nBefore we add the code for the actual app, we have to create the server first. This is where we add the code for creating the database and displaying the UI for creating quiz items.\n\nNavigate inside the `server` directory if you haven’t already. Inside, create an `index.js` file and add the following:\n\n```javascript\n    const express = require(\"express\"); // server framework\n    const bodyParser = require(\"body-parser\"); // for parsing the form data\n    const Pusher = require(\"pusher\"); // for sending realtime messages\n    const cors = require(\"cors\"); // for accepting requests from any host\n    const mustacheExpress = require('mustache-express'); // for using Mustache for templating\n    \n    const { check } = require('express-validator/check'); // for validating user input for the quiz items\n    \n    const sqlite3 = require('sqlite3').verbose(); // database engine\n    const db = new sqlite3.Database('db.sqlite'); // database file in the root of the server directory\n```\n\nNext, add the code for using the server packages we’ve imported above:\n\n```javascript\n    const app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(cors());\n    app.engine('mustache', mustacheExpress());\n    app.set('view engine', 'mustache');\n    app.set('views', __dirname + '/views'); // set the location of mustache files\n```\n\nSet up Pusher:\n\n```javascript\n    const pusher = new Pusher({\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret: process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER\n    });\n```\n\nNext, add the code for authenticating users with Pusher and logging them into the server:\n\n```javascript\n    var users = []; // this will store the username and scores for each user\n    \n    app.post(\"/pusher/auth\", (req, res) =\u003e {\n      const socketId = req.body.socket_id;\n      const channel = req.body.channel_name;\n    \n      const auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n    \n    app.post(\"/login\", (req, res) =\u003e {\n      const username = req.body.username;\n      console.log(username + \" logged in\");\n    \n      if (users.indexOf(username) === -1) { // check if user doesn't already exist\n        console.log('users: ', users.length);\n        users.push({\n          username,\n          score: 0 // initial score\n        });\n      }\n    \n      res.send('ok');\n    });\n```\n\nNext, add the code for creating the database. Note that this step is optional as I have already added the `db.sqlite` file at the root of the `server` directory. That’s the database file which contains a few questions that I used for testing. If you want to start anew, simply create an empty `db.sqlite` file through the command line (or your text editor) and access the below route on your browser:\n\n```javascript\n    app.get(\"/create-db\", (req, res) =\u003e {\n      db.serialize(() =\u003e {\n        db.run('CREATE TABLE [quiz_items] ([question] VARCHAR(255), [optionA] VARCHAR(255), [optionB] VARCHAR(255), [optionC] VARCHAR(255), [optionD] VARCHAR(255), [answer] CHARACTER(1))');\n      });\n    \n      db.close();\n      res.send('ok');\n    });\n```\n\nNext, add the route for displaying the UI for adding quiz items. This uses the Mustache Express library to render the `quiz_creator` template inside the `views` folder:\n\n```javascript\n    app.get(\"/create-quiz\", (req, res) =\u003e {\n      res.render('quiz_creator');\n    });\n```\n\nHere’s the code for the quiz creator template. Create a `views/quiz_creator.mustache` file and add the following:\n\n```html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"/\u003e\n      \u003ctitle\u003eQuiz Creator\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"\u003e\n      \u003cstyle\u003e\n      .hidden {\n        display: none;\n      }\n      \u003c/style\u003e\n    \u003c/head\u003e\n    \n    \u003cbody\u003e\n    \n      \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row align-items-center\"\u003e\n          \u003cdiv class=\"col col-lg-12\"\u003e\n            \u003ch1\u003eCreate Quiz\u003c/h1\u003e\n    \n            \u003cdiv class=\"alert alert-success hidden\"\u003e\n            Item created!\n            \u003c/div\u003e\n    \n            \u003cform method=\"POST\" action=\"/save-item\"\u003e\n              \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"question\"\u003eQuestion\u003c/label\u003e\n                \u003cinput type=\"text\" id=\"question\" name=\"question\" class=\"form-control\" required\u003e\n              \u003c/div\u003e\n    \n              \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"option_a\"\u003eOption A\u003c/label\u003e\n                \u003cinput type=\"text\" id=\"option_a\" name=\"option_a\" class=\"form-control\" required\u003e\n              \u003c/div\u003e\n    \n              \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"option_b\"\u003eOption B\u003c/label\u003e\n                \u003cinput type=\"text\" id=\"option_b\" name=\"option_b\" class=\"form-control\" required\u003e\n              \u003c/div\u003e\n    \n              \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"option_c\"\u003eOption C\u003c/label\u003e\n                \u003cinput type=\"text\" id=\"option_c\" name=\"option_c\" class=\"form-control\" required\u003e\n              \u003c/div\u003e\n    \n              \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"option_d\"\u003eOption D\u003c/label\u003e\n                \u003cinput type=\"text\" id=\"option_d\" name=\"option_d\" class=\"form-control\" required\u003e\n              \u003c/div\u003e\n    \n              Correct Answer\n    \n              \u003cdiv class=\"form-group\"\u003e\n                \u003cdiv class=\"form-check\"\u003e\n                  \u003cinput class=\"form-check-input\" type=\"radio\" name=\"answer\" id=\"correct_a\" value=\"A\"\u003e\n                  \u003clabel class=\"form-check-label\" for=\"correct_a\"\u003e\n                    A\n                  \u003c/label\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv class=\"form-check\"\u003e\n                  \u003cinput class=\"form-check-input\" type=\"radio\" name=\"answer\" id=\"correct_b\" value=\"B\"\u003e\n                  \u003clabel class=\"form-check-label\" for=\"correct_b\"\u003e\n                    B\n                  \u003c/label\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv class=\"form-check\"\u003e\n                  \u003cinput class=\"form-check-input\" type=\"radio\" name=\"answer\" id=\"correct_c\" value=\"C\"\u003e\n                  \u003clabel class=\"form-check-label\" for=\"correct_c\"\u003e\n                    C\n                  \u003c/label\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv class=\"form-check\"\u003e\n                  \u003cinput class=\"form-check-input\" type=\"radio\" name=\"answer\" id=\"correct_d\" value=\"D\"\u003e\n                  \u003clabel class=\"form-check-label\" for=\"correct_d\"\u003e\n                    D\n                  \u003c/label\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n    \n              \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003eSave Item\u003c/button\u003e\n            \u003c/form\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \n      \u003cscript\u003e\n        if (window.location.hash) {\n          document.querySelector('.alert').classList.remove('hidden');\n        }\n      \u003c/script\u003e\n    \n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNote that we haven’t really used the templating engine in the above template. But it’s a good practice to use it if you’re expecting to display dynamic data.\n\nNext, add the route where the form data will be submitted. This has a simple validation where the length of each text field should not be less than one. Once the data is validated, we insert a new quiz item to the table:\n\n```javascript\n    // server/index.js\n    const required = { min: 1 }; // minimum number of characters required for each field\n    \n    app.post(\"/save-item\", [\n      check('question').isLength(required),\n      check('option_a').isLength(required),\n      check('option_b').isLength(required),\n      check('option_c').isLength(required),\n      check('option_d').isLength(required),\n      check('answer').isLength(required) // the letter of the answer (e.g. A, B, C, D)\n    ], (req, res) =\u003e {\n    \n      const { question, option_a, option_b, option_c, option_d, answer } = req.body;\n      db.serialize(() =\u003e {\n        var stmt = db.prepare('INSERT INTO quiz_items VALUES (?, ?, ?, ?, ?, ?)');\n        stmt.run([question, option_a, option_b, option_c, option_d, answer]);\n      });\n    \n      res.redirect('/create-quiz#ok'); // redirect back to the page for creating a quiz item\n    });\n```\n\nNext, add the code for sending the questions. This selects ten random rows from the table and sends them at an interval (every 13 seconds). The users will only have ten seconds to answer each question, but we included an additional three seconds to cater for the latency (delay) in the network and in the app:\n\n```javascript\n    const channel_name = 'quiz-channel';\n    const question_timing = 13000; // 10 secs to show + 3 secs latency\n    const question_count = 10;\n    const top_users_delay = 10000; // additional delay between displaying the last question and the top users\n    \n    app.get(\"/questions\", (req, res) =\u003e {\n      var index = 1;\n      db.each('SELECT question, answer, optionA, optionB, optionC, optionD, answer FROM quiz_items ORDER BY random() LIMIT ' + question_count, (err, row) =\u003e {\n        timedQuestion(row, index);\n        index += 1;\n      });\n    \n      // next: add code for sending top users\n    \n      res.send('ok');\n    });\n    \n    // next: add code for timedQuestion function\n```\n\nAfter all the questions have been sent, we send the top three users to all users who are currently subscribed to the quiz channel:\n\n```javascript\n    setTimeout(() =\u003e {\n      console.log('now triggering score...');\n      const sorted_users_by_score = users.sort((a, b) =\u003e b.score - a.score)\n      const top_3_users = sorted_users_by_score.slice(0, 1); // replace 1 with 3\n    \n      pusher.trigger(channel_name, 'top-users', {\n        users: top_3_users\n      });\n    }, (question_timing * (question_count + 2)) + top_users_delay);\n```\n\nHere’s the code for the `timedQuestion` function we used earlier. All it does is send each individual row from the table:\n\n```javascript\n    const timedQuestion = (row, index) =\u003e {\n      setTimeout(() =\u003e {\n        Object.assign(row, { index });\n    \n        pusher.trigger(\n          channel_name,\n          'question-given',\n          row\n        );\n    \n      }, index * question_timing);\n    }\n```\n\nNext, add the route for incrementing user scores. This finds the user with the specified username in the array of users and then increments their score:\n\n```javascript\n    app.post(\"/increment-score\", (req, res) =\u003e {\n      const { username } = req.body;\n      console.log(`incremented score of ${username}`);\n    \n      const user_index = users.findIndex(user =\u003e user.username == username);\n      users[user_index].score += 1;\n    \n      res.send('ok');\n    });\n```\n\nNote that all users make a request to the above route every time they answer correctly so it’s a potential bottleneck. This is especially true if there are thousands of users using the app at the same time. If you’re planning to create a multi-player quiz app of your own, you might want to use Pusher on the server side to listen for messages sent by users. From there, you can increment their scores as usual.\n\nLastly, run the server on a specific port:\n\n```javascript\n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\n## Quiz app\n\nNow that we’ve added the server code, we’re ready to work on the actual app. As mentioned earlier, the boilerplate code has already been set up so all we have to do is add the UI structure and the logic.\n\n### Login screen\n\nOpen the login screen file and add the following:\n\n```javascript\n    // src/screens/Login.js\n    import React, { Component } from \"react\";\n    import { View, Text, TextInput, TouchableOpacity, Alert } from \"react-native\";\n    \n    import Pusher from \"pusher-js/react-native\"; // for using Pusher\n    import Config from \"react-native-config\"; // for using .env config file\n    \n    import axios from 'axios'; // for making http requests\n    \n    const pusher_app_key = Config.PUSHER_APP_KEY;\n    const pusher_app_cluster = Config.PUSHER_APP_CLUSTER;\n    const base_url = \"YOUR NGROK HTTPS URL\";\n    \n    class LoginScreen extends Component {\n      static navigationOptions = {\n        header: null\n      };\n    \n      state = {\n        username: \"\",\n        enteredQuiz: false\n      };\n    \n      constructor(props) {\n        super(props);\n        this.pusher = null;\n      }\n    \n      // next: add render()\n    }\n    \n    export default LoginScreen;\n```\n\nNext, render the login UI:\n\n```javascript\n    render() {\n      return (\n        \u003cView style={styles.wrapper}\u003e\n          \u003cView style={styles.container}\u003e\n            \u003cView style={styles.main}\u003e\n              \u003cView\u003e\n                \u003cText style={styles.label}\u003eEnter your username\u003c/Text\u003e\n                \u003cTextInput\n                  style={styles.textInput}\n                  onChangeText={username =\u003e this.setState({ username })}\n                  value={this.state.username}\n                /\u003e\n              \u003c/View\u003e\n    \n              {!this.state.enteredQuiz \u0026\u0026 (\n                \u003cTouchableOpacity onPress={this.enterQuiz}\u003e\n                  \u003cView style={styles.button}\u003e\n                    \u003cText style={styles.buttonText}\u003eLogin\u003c/Text\u003e\n                  \u003c/View\u003e\n                \u003c/TouchableOpacity\u003e\n              )}\n    \n              {this.state.enteredQuiz \u0026\u0026 (\n                \u003cText style={styles.loadingText}\u003eLoading...\u003c/Text\u003e\n              )}\n            \u003c/View\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nWhen the user clicks on the login button, we authenticate them via Pusher and log them into the server. As you’ve seen in the server code earlier, this allows us to add the user to the `users` array which is then used later to filter for the top users:\n\n```javascript\n    enterQuiz = async () =\u003e {\n      const myUsername = this.state.username;\n    \n      if (myUsername) {\n        this.setState({\n          enteredQuiz: true // show loading animation\n        });\n    \n        this.pusher = new Pusher(pusher_app_key, {\n          authEndpoint: `${base_url}/pusher/auth`,\n          cluster: pusher_app_cluster,\n          encrypted: true\n        });\n        \n        try {\n          await axios.post(\n            `${base_url}/login`, \n            {\n              username: myUsername\n            }\n          );\n          console.log('logged in!');\n        } catch (err) {\n          console.log(`error logging in ${err}`);\n        }\n        \n        // next: add code for subscribing to quiz channel\n    \n      }\n    };\n```\n\nNext, listen for Pusher’s channel subscription success event and navigate the user to the Quiz screen. We pass the Pusher reference, username and quiz channel as navigation params so we can also use it in the Quiz screen:\n\n```javascript\n    this.quizChannel = this.pusher.subscribe('quiz-channel');\n    this.quizChannel.bind(\"pusher:subscription_error\", (status) =\u003e {\n      Alert.alert(\n        \"Error\",\n        \"Subscription error occurred. Please restart the app\"\n      );\n    });\n    \n    this.quizChannel.bind(\"pusher:subscription_succeeded\", () =\u003e {     \n      this.props.navigation.navigate(\"Quiz\", {\n        pusher: this.pusher,\n        myUsername: myUsername,\n        quizChannel: this.quizChannel\n      });\n    \n      this.setState({\n        username: \"\",\n        enteredQuiz: false // hide loading animation\n      });\n    });\n```\n\n### Quiz screen\n\nThe Quiz screen is the main meat of the app. This is where the questions are displayed for the user to answer. Start by importing all the packages we need:\n\n```javascript\n    // src/screens/Quiz.js\n    import React, { Component } from \"react\";\n    import { View, Text, ActivityIndicator, TouchableOpacity } from \"react-native\";\n    import axios from 'axios';\n    import Icon from 'react-native-vector-icons/FontAwesome';\n    \n    const option_letters = ['A', 'B', 'C', 'D'];\n    const base_url = \"YOUR NGROK HTTPS URL\";\n```\n\nNext, initialize the state:\n\n```javascript\n    class Quiz extends Component {\n      \n      static navigationOptions = {\n        header: null\n      };\n    \n      state = {\n        display_question: false, // whether to display the questions or not\n        countdown: 10, // seconds countdown for answering the question\n        show_result: false, // whether to show whether the user's answer is correct or incorrect\n        selected_option: null, // the last option (A, B, C, D) selected by the user\n        disable_options: true, // whether to disable the options from being interacted on or not\n        total_score: 0, // the user's total score\n       \n        index: 1, // the index of the question being displayed\n        display_top_users: false // whether to display the top users or not\n      }\n    \n      // next: add constructor\n    }\n    \n    export default Quiz;\n```\n\nInside the constructor, we get the navigation params that were passed from the login screen earlier. Then we listen for the `question-given` event to be triggered by the server. As you’ve seen earlier, this contains the question data (question, four options, and answer). We just set those into the state so they’re displayed. After that, we immediately start the countdown so that the number displayed on the upper right corner counts down every second:\n\n```javascript\n    constructor(props) {\n      super(props);\n      const { navigation } = this.props;\n      \n      this.pusher = navigation.getParam('pusher');\n      this.myUsername = navigation.getParam('myUsername');\n      this.quizChannel = navigation.getParam('quizChannel');\n    \n      this.quizChannel.bind('question-given', ({ index, question, optionA, optionB, optionC, optionD, answer }) =\u003e {\n        \n        this.setState({\n          display_question: true, // display the question in the UI\n          countdown: 10, // start countdown\n          selected_option: null,\n          show_result: false, \n          disable_options: false,\n          \n          // question to display\n          index, \n          question, \n          optionA, \n          optionB, \n          optionC, \n          optionD, \n          answer\n        });\n        \n        // start the countdown\n        const interval = setInterval(() =\u003e {\n          this.setState((prevState) =\u003e {\n            const cnt = (prevState.countdown \u003e 0) ? prevState.countdown - 1 : 0\n            if (cnt == 0) {\n              clearInterval(interval);\n            }\n    \n            return {\n              countdown: cnt\n            }\n          });\n        }, 1000);\n    \n      });\n      \n      // next: add listener for top users\n    }\n```\n\nNext, listen for the `top-users` event. This will display the names and scores of the top users:\n\n```javascript\n    this.quizChannel.bind('top-users', ({ users }) =\u003e {\n      console.log('received top users: ', JSON.stringify(users));\n      this.setState({\n        top_users: users,\n        display_top_users: true\n      });\n    });\n```\n\nNext, render the UI. When the user is first redirected from the login screen, only the total score, default countdown value, and the activity indicator are displayed. When the server starts sending questions, the activity indicator is hidden in place of the question and its options. Lastly, when the server sends the top users, the question and its options are hidden in place of the list of top users:\n\n```javascript\n    render() {\n      const { \n        total_score,\n        countdown, \n        index, \n        question, \n        optionA, \n        optionB, \n        optionC, \n        optionD, \n        answer, \n    \n        display_question,\n        top_users,\n        display_top_users\n      } = this.state;\n      \n      const options = [optionA, optionB, optionC, optionD];\n    \n      return (\n        \u003cView style={styles.container}\u003e\n          \n          \u003cView\u003e\n            \u003cText\u003eTotal Score: {total_score}\u003c/Text\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.countdown}\u003e\n            \u003cText style={styles.countdown_text}\u003e{countdown}\u003c/Text\u003e\n          \u003c/View\u003e\n    \n          {\n            !display_question \u0026\u0026\n            \u003cView style={styles.centered}\u003e\n              \u003cActivityIndicator size=\"large\" color=\"#0000ff\" /\u003e\n            \u003c/View\u003e\n          }\n    \n          {\n            display_question \u0026\u0026 !display_top_users \u0026\u0026 \n            \u003cView style={styles.quiz}\u003e\n              {\n                !showAnswer \u0026\u0026\n                \u003cView\u003e\n                  \u003cView\u003e\n                    \u003cText style={styles.big_text}\u003e{question}\u003c/Text\u003e\n                  \u003c/View\u003e\n    \n                  \u003cView style={styles.list_container}\u003e\n                    { this.renderOptions(options, answer) }\n                  \u003c/View\u003e\n                \u003c/View\u003e\n              }\n            \u003c/View\u003e\n          }\n    \n          {\n            display_top_users \u0026\u0026\n            \u003cView style={styles.top_users}\u003e\n              \u003cText style={styles.big_text}\u003eTop Users\u003c/Text\u003e\n              \u003cView style={styles.list_container}\u003e\n              { this.renderTopUsers() }\n              \u003c/View\u003e\n            \u003c/View\u003e\n          }\n              \n        \u003c/View\u003e\n      );\n    }\n```\n\nHere’s the code for rendering the options. Each one executes the `placeAnswer` function when the user clicks on it. As soon as an option is selected, the icon which represents whether they’re correct or not is immediately displayed next to it: \n\n```javascript\n    renderOptions = (options, answer) =\u003e {\n      const { show_result, selected_option, disable_options } = this.state;\n    \n      return options.map((opt, index) =\u003e {\n        const letter = option_letters[index];\n        const is_selected = selected_option == letter;\n        const is_answer = (letter == answer) ? true : false; \n    \n        return (\n          \u003cTouchableOpacity disabled={disable_options} onPress={() =\u003e this.placeAnswer(index, answer)} key={index}\u003e\n            \u003cView style={styles.option}\u003e\n              \u003cText style={styles.option_text}\u003e{opt}\u003c/Text\u003e\n    \n              {\n                is_answer \u0026\u0026 show_result \u0026\u0026 is_selected \u0026\u0026 \u003cIcon name=\"check\" size={25} color=\"#28a745\" /\u003e\n              }\n              \n              {\n                !is_answer \u0026\u0026 show_result \u0026\u0026 is_selected \u0026\u0026 \u003cIcon name=\"times\" size={25} color=\"#d73a49\" /\u003e\n              }\n            \u003c/View\u003e\n          \u003c/TouchableOpacity\u003e\n        );\n      });\n    }\n```\n\nHere’s the `placeAnswer` function. This accepts the index of the selected option (0, 1, 2, or 3) and the letter of the answer. Those are used to determine if the user answered correctly or not. The answer isn’t even considered if the user missed the countdown. If they answered correctly, their total score is incremented by one and the app makes a request to the server to increment the user’s score:\n\n```javascript\n    placeAnswer = (index, answer) =\u003e {\n      \n      const selected_option = option_letters[index]; // the letter of the selected option\n      const { countdown, total_score } = this.state;\n    \n      if (countdown \u003e 0) { // \n        if (selected_option == answer) { \n          this.setState((prevState) =\u003e {\n            return {\n              total_score: prevState.total_score + 1\n            }\n          });\n      \n          axios.post(base_url + '/increment-score', {\n            username: this.myUsername\n          }).then(() =\u003e {\n            console.log('incremented score');\n          }).catch((err) =\u003e {\n            console.log('error occurred: ', e);\n          });\n        } \n      }\n    \n      this.setState({\n        show_result: true, // show whether the user answered correctly or not\n        disable_options: true, // disallow the user from selecting any of the options again\n        selected_option // the selected option (letter)\n      });\n    }\n```\n\nHere’s the code for rendering the top users:\n\n```javascript\n    renderTopUsers = () =\u003e {\n      const { top_users } = this.state;\n      return top_users.map(({ username, score }) =\u003e {\n        return (\n          \u003cView key={username}\u003e\n            \u003cText style={styles.sub_text}\u003e{username}: {score} out of 10\u003c/Text\u003e\n          \u003c/View\u003e\n        );\n      });\n    }\n```\n\n## Running the app\n\nTo run the app, you have to run the server first and expose it to the internet by using ngrok:\n\n```\n    cd server\n    yarn start\n    ~/.ngrok http 5000\n```\n\nIf you haven’t used the `db.sqlite` file I provided in the repo, you have to access `http://localhost:5000/create-db` to create the database (Note: you first have to create an empty `db.sqlite` at the root of the `server` directory). After that, access `http://localhost:5000/create-quiz` and add some quiz items. Add at least 10 items.\n\nNext, update your `src/screens/Login.js` and `src/screens/Quiz.js` file with your ngrok HTTPS URL and run the app:\n\n```\n    react-native run-android\n    react-native run-ios\n```\n\nLastly, access `http://localhost:5000/questions` to start sending the quiz items.\n\n\n## Conclusion\n\nIn this tutorial, we’ve created a multi-player quiz app using Node.js and React Native. Along the way, you learned how to use mustache templates and SQLite database within an Express app. Lastly, you learned how to use Node.js, React Native, and Pusher to easily implement a multi-player quiz app.\n\nYou can view the code on this [GitHub repo](https://github.com/anchetaWern/RNQuiz).","metaTitle":"Creating a live multiplayer quiz app in React Native","metaDescription":"Use React Native and Node to build a live cross-platform quiz app. Admins are able to add questions and start the game. Users have a short amount of time to respond. At the end, a scoreboard is displayed, showing the top player."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"vvcxCOBUSHPTCIhFirmU5","type":"Entry","createdAt":"2019-03-25T17:17:58.561Z","updatedAt":"2020-06-19T13:31:54.155Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a whiteboard Electron app with React - Part 1: Adding the whiteboard","url":"whiteboard-electron-react-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/ElectronWhiteboard","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Od9rZziIoMG4yaQ4EAeok","type":"Entry","createdAt":"2018-02-13T11:31:10.435Z","updatedAt":"2018-02-26T12:31:10.730Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":16,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live UX","url":"live-ux","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2019-03-25","description":"In this two-part series, build a whiteboard app using Node, Electron and React. Users will be able to collaborate in realtime, drawing on a simple canvas. The app also features chat functionality. In part one, create the whiteboard.","prerequisite":"You will need Node and Yarn installed on your machine.","content":"In this tutorial, we’ll take a look at how we can build a whiteboard app using React.\n\n## Prerequisites\n\nBasic knowledge of React is required. We’ll also be using Electron, but you don’t even need to know it since we’re only using it as a container.\n\nYou need [Node](https://nodejs.org/en/) and [Yarn](https://yarnpkg.com/en/) to install packages.\n\nYou’ll also need a [Pusher app instance](https://pusher.com/channels). Enable client events on its settings because we will be triggering events directly from the client side.\n\nOptionally, you need an Ngrok account if you want to test the app with someone outside your network.\n\n\n## App overview\n\nThe whiteboard app will allow the users to communicate their ideas via a canvas similar to a physical whiteboard. Thus, it will have the following tools:\n\n- **Select** - for selecting objects in the canvas so they can be modified or removed.\n- **Pen** - for free-hand drawing.\n- **Rectangle** - for drawing rectangle shapes.\n- **Circle** - for drawing circle shapes.\n- **Text** - for adding text.\n\nHere’s what the final output for this part will look like:\n\n![electron-whiteboard-1-1](//images.ctfassets.net/1es3ne0caaid/5Im2J04E3NEn3FCzt0BXuj/38a72bd337ed43a6f761f797bcf6d98e/electron-whiteboard-1-1.gif)\n\nYou can find the code for this tutorial on its [GitHub repo](https://github.com/anchetaWern/ElectronWhiteboard).\n\nNote that I’ll be using the terms “canvas” and “whiteboard” interchangeably throughout the article, but they will mean the same thing. \n\n\n## Choosing the tool\n\nThe main challenge with building a whiteboard is the implementation of canvas. With plain JavaScript, we have a bunch of options, but only [FabricJS](http://fabricjs.com/) and [Konva](https://konvajs.github.io/) seem to fit the bill. \n\nThe next step is to find out if any of these libraries have decent React integration. Of the two, only Konva meets the requirement with its [React Konva](https://github.com/konvajs/react-konva) library. \n\nThe only problem is I don’t have prior Konva experience and the various elements (for example, rectangle and circle) are actually rendered using components. There’s also no free-drawing tool which is often the most important. \n\nFinally, I found this [React Sketch](https://github.com/tbolis/react-sketch) package from [Thomas](https://github.com/tbolis). It’s exactly what we need to quickly create a whiteboard app. And it uses FabricJS behind the scenes so I know that it’s going to be good since I previously used FabricJS on another project.\n\n\n## Bootstrapping the app\n\nNow that you know why we ended up using React Sketch, it’s time to start building the app. I’ve already created a starter project which has navigation and all the styles already set up. This will serve as the starting point for this tutorial. Go ahead and clone it on your working directory:\n\n```\n    git clone https://github.com/anchetaWern/ElectronWhiteboard\n```\n\nSwitch to the `starter` branch and install the dependencies:\n\n```\n    git checkout starter\n    yarn\n```\n\n## Extending the React Sketch package\n\nIn this section, we’ll extend the React Sketch package in order for it to be able to trigger client events when a whiteboard object is created, updated, or removed. \n\nThis is an optional section since I’ve already included the compiled version of the updated package in the `node_modules/react-sketch/dist` folder of the [part1 branch](https://github.com/anchetaWern/ElectronWhiteboard/blob/part1/node_modules/react-sketch/dist). \n\nIf you’re planning to make use of the same package in the future or you want to learn how the package works, I encourage you to follow along. Otherwise, simply skip to the next section.\n\nIf you decide to skip this section, you need to copy [this file](https://github.com/anchetaWern/ElectronWhiteboard/blob/part1/node_modules/react-sketch/dist/index.js) over to the `node_modules/react-sketch/dist` directory of the project. \n\n### Installing the dependencies\n\nIf you’re still here, the next step is to clone the React Sketch package so we can update it accordingly:\n\n```\n    git clone https://github.com/tbolis/react-sketch.git\n```\n\nIf you’re on Mac, you need to install [Macports](https://guide.macports.org/chunked/installing.macports.html). This software allows you to install various open source software that’s required to compile FabricJS. Go ahead and download the [installer file from this page](https://guide.macports.org/chunked/installing.macports.html) and install it on your machine. Once it’s installed, you need to install the following packages via Macports:\n\n```\n    sudo port install pkgconfig cairo pango libpng jpeg giflib libsrvg\n```\n\nThese are all required to compile FabricJS.\n\nIf you’re on Ubuntu or any other Linux distribution, you won’t have any problem because these open-source tools are native to Linux. But if you don’t have it, you can simply install it via your default way of installing software.\n\nFor Windows, you need to install Node 8.11 because it’s required by [windows-build-tools](https://www.npmjs.com/package/windows-build-tools). This will install Python 2.7 and Visual Studio build tools on your machine:\n\n```\n    npm install -g windows-build-tools\n```\n\nYou also need [node-gyp](https://github.com/nodejs/node-gyp):\n\n```\n    npm install -g node-gyp\n```\n\n### Updating the code\n\nWe’re now ready to update the code. Start by declaring the additional props that we will be supplying to this component:\n\n```javascript\n    // react-sketch/src/SketchField.jsx\n    static propTypes = {\n      // \u003cexisting code\u003e\n      style: PropTypes.object,\n      \n      // add these:\n      onUpdate: PropTypes.func, // function to execute when an object is modified\n      username: PropTypes.string, // username of the current user\n      shortid: PropTypes.func // helper for generating random unique IDs for objects\n    }\n```\n\nNext, update the `_onObjectAdded` function to add a unique ID for an object that was created. Then execute the `onUpdate` function that we will pass as props later on:\n\n```javascript\n    _onObjectAdded = (e) =\u003e {\n      // \u003cexisting code\u003e\n      this._history.keep([obj, state, state])\n      \n      // add these:\n      if (!obj.sender) { \n        const id = this.props.shortid.generate(); \n        Object.assign(obj, { id });\n        this.props.onUpdate(JSON.stringify(obj), 'add', this.props.username, id); \n      }\n    }\n```\n\nThe above function is automatically triggered whenever a new object is added to the canvas. That’s why it’s the perfect place to execute the function that will update the UI of all the other users in the channel. \n\nNote that we’re checking for the non-existence of the `sender` property (username of the user who added the object) in the object before we trigger the function for updating the UI of the other users because it will be a catastrophe if we don’t. \n\nWe already know that the `_onObjectAdded` function is automatically executed every time a new object is added. So if we’re not checking for the existence of the `sender` property, `this.props.onUpdate` will basically ping-pong between the users in the channel. \n\nAs you’ll see in the `src/screens/Whiteboard.js` file later, the `sender` property is being added to the object when the event for updating the canvas (`client-whiteboard-updated`) is received. This effectively prevents the receiver from triggering the same event to all the other users. \n\nDo the same for the `_onObjectModified` function. This function is automatically executed every time an object is updated:\n\n```javascript\n    _onObjectModified = (e) =\u003e {\n      // \u003cexisting code\u003e  \n      this._history.keep([obj, prevState, currState]);\n      // add these:\n      if (!obj.sender) {\n        let strObj = JSON.stringify(obj);\n        this.props.onUpdate(strObj, 'update', this.props.username, obj.id);\n      }\n    }\n```\n\nNext, add a function for getting the currently selected object. This will get called from the `src/screens/Whiteboard.js` file later to get the `id` of the currently selected object for removal. \n\nAs you’ve seen in the `_onObjectAdded` function earlier, this is a unique ID assigned to the object. By using it, all the other users can find the object so they can also remove it from their canvas:\n\n```javascript\n    getSelected = () =\u003e {\n      let canvas = this._fc;\n      let activeObj = canvas.getActiveObject();\n      return activeObj;\n    }\n```\n\nThe `setSelected` function is used for programmatically setting an active (currently selected) object in the canvas. We will call it when the other users in the channel receive the event for updating the whiteboard. \n\nIf the event has a type of `remove`, this function sets the object with the `id` passed in the event as active. From there, we simply use the existing `removeSelected` function to remove the object from the canvas:\n\n```javascript\n    setSelected = (id) =\u003e {\n      let canvas = this._fc;\n      var objToSelect = canvas.getObjects().find((o) =\u003e {\n        return id == o.id;\n      });\n      canvas.setActiveObject(objToSelect);\n      canvas.requestRenderAll();\n    }\n```\n\nNext, add a function for programmatically adding an object to the canvas. This gets fired on all the other users in the channel every time a user adds a new object. Note that each object type has a different way of initialization:\n\n```javascript\n    addObject = (obj) =\u003e {\n    \n      let canvas = this._fc;\n      let shapeData = JSON.parse(obj);\n      \n      let shape = null;\n      const type = this._capsFirstLetter(shapeData.type);\n      if (type == 'Path') {\n        let string_path = '';\n        shapeData.path.forEach((x) =\u003e {\n          string_path += x.join(' ');\n        });\n      \n        shape = new fabric.Path(string_path);\n        delete shapeData.path;\n        shape.set(shapeData);\n      } else if (type == 'I-text') {\n        shape = new fabric.Text(shapeData.text); \n        delete shapeData.text;\n        shape.set(shapeData);\n      } else {\n        // for Rectangle and Circle objects\n        shape = new fabric\\[type\\](shapeData);\n      }\n       \n      canvas.add(shape);\n    }\n```\n\nHere’s the `_capsFirstLetter` function. It’s used to convert the first letter of a string to uppercase so it matches an actual [FabricJS object type](http://fabricjs.com/fabric-intro-part-1#objects):\n\n```javascript\n    _capsFirstLetter = (str) =\u003e {\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n```\n\nNext, add the function for modifying existing objects. This gets called every time an existing object is updated by another user in the channel:\n\n```javascript\n    modifyObject = (obj) =\u003e {\n      \n      let objData = JSON.parse(obj);\n      let canvas = this._fc;\n    \n      var objToModify = canvas.getObjects().find((o) =\u003e {\n        return objData.id == o.id;\n      });\n      objToModify.set(objData); // update the object\n      objToModify.setCoords(); // useful if the object's coordinates in the canvas also changed (usually by moving)\n      canvas.requestRenderAll(); // refresh the canvas so changes will appear\n    }\n```\n\nNext, update the `addText` function to include the `id` to the object. This `id` will be passed from the `src/screens/Whiteboard.js` file later:\n\n```javascript\n    addText = (text, options = {}) =\u003e {\n      // \u003cexisting code\u003e\n      Object.assign(options, opts);\n      iText.set({\n        'id': options.id, // add this\n        // \u003cexisting code\u003e\n      });\n    }\n```\n\n### Building the package\n\nNow we’re ready to install all the dependencies and build the package:\n\n```\n    yarn\n    yarn prebuild\n    yarn build\n```\n\nThis generates a `dist/index.js` file. Copy that file and replace the `node_modules/react-sketch/dist/index.js` file inside the `ElectronWhiteboard` folder with it to update React Sketch in your project. \n\nRemember to do this before you compile the ElectronWhiteboard project using `yarn start` or `yarn build` so it uses the updated version of the package instead of the original one. You can also add a build script to automatically do that if you want.\n\n\n## Login screen\n\nCreate a  `src/screens/Login.js` file and add the following: \n\n```javascript\n    import React, { Component } from \"react\";\n    import { Container, Row, Col, Button, Input } from 'reactstrap';\n    import Pusher from \"pusher-js\";\n    \n    import uniquename from \"../helpers/uniquename\";\n    \n    const channel_name = uniquename();\n    \n    const PUSHER_APP_KEY = process.env.REACT_APP_PUSHER_APP_KEY;\n    const PUSHER_APP_CLUSTER = process.env.REACT_APP_PUSHER_APP_CLUSTER;\n    const BASE_URL = \"http://localhost:5000\";\n    \n    class LoginScreen extends Component {\n    \n      state = {\n        myUsername: \"\",\n        channelName: channel_name,\n        isLoading: false\n      }\n    \n      constructor(props) {\n        super(props);\n        this.pusher = null;\n        this.group_channel = null; // channel for communicating changes to the canvas\n      }\n    \n      // next: add render function\n    \n    }\n```\n\nNext, render the login UI. This will ask for the user’s username and channel they want to enter. Note that when logging in, the channel doesn’t already need to exist:\n\n```javascript\n    render() {\n      return (\n        \u003cContainer\u003e\n          \u003cRow\u003e\n            \u003cCol lg={12}\u003e\n              \u003cdiv className=\"centered\"\u003e\n                \u003cdiv className=\"textInputContainer\"\u003e\n                  \u003cInput \n                    type=\"text\"\n                    placeholder=\"myUsername\"\n                    onChange={this.onUpdateText}\n                    value={this.state.myUsername} /\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv className=\"textInputContainer\"\u003e\n                  \u003cInput \n                    type=\"text\"\n                    placeholder=\"channelName\"\n                    onChange={this.onUpdateText}\n                    value={this.state.channelName} /\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv className=\"buttonContainer\"\u003e\n                  \u003cButton \n                    type=\"button\" \n                    color=\"primary\" \n                    onClick={this.login} \n                    disabled={this.state.isLoading} \n                    block\u003e\n                      {this.state.isLoading ? \"Logging in…\" : \"Login\"}\n                  \u003c/Button\u003e\n                \u003c/div\u003e\n    \n              \u003c/div\u003e\n            \u003c/Col\u003e\n          \u003c/Row\u003e\n        \u003c/Container\u003e\n      );\n    }\n```\n\nHere’s the function for updating the value of the text fields:\n\n```javascript\n    onUpdateText = (evt) =\u003e {\n      const field = evt.target.getAttribute(\"placeholder\");\n      this.setState({\n        [field]: evt.target.value\n      });\n    };\n```\n\nWhen the user logs in, we authenticate them with Pusher so they can trigger events from the client side. Once authenticated, we subscribe them to a common channel where all the changes in the whiteboard will be communicated:\n\n```javascript\n    login = () =\u003e {\n    \n      const { myUsername, channelName } = this.state;\n    \n      this.setState({\n        isLoading: true\n      });\n    \n      this.pusher = new Pusher(PUSHER_APP_KEY, {\n        authEndpoint: `${BASE_URL}/pusher/auth`,\n        cluster: PUSHER_APP_CLUSTER,\n        encrypted: true\n      });\n    \n      this.group_channel = this.pusher.subscribe(`private-group-${channelName}`);\n      this.group_channel.bind(\"pusher:subscription_error\", (status) =\u003e {\n        console.log(\"error subscribing to group channel: \", status);\n      });\n    \n      this.group_channel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n        console.log(\"subscription to group succeeded\");\n        \n        // navigate to the whiteboard screen\n        this.props.navigation.navigate(\"Whiteboard\", {\n          myUsername,\n          pusher: this.pusher,\n          group_channel: this.group_channel\n        });\n    \n      });\n    \n    }\n```\n\nDon’t forget to add a `.env` file at the project root. This contains your Pusher app credentials:\n\n```\n    REACT_APP_PUSHER_APP_KEY=\"YOUR PUSHER APP KEY\"\n    REACT_APP_PUSHER_APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\n### Unique name helper\n\nHere’s the code for the unique name helper:\n\n```javascript\n    // src/helpers/uniquename.js\n    var generateName = require(\"sillyname\");\n    \n    const generateUsername = () =\u003e {\n      const min = 10;\n      const max = 99;\n      const number = Math.floor(Math.random() * (max - min + 1)) + min;\n      const username = generateName().replace(\" \", \"_\") + number;\n      return username;\n    };\n    \n    export default generateUsername;\n```\n\n## Whiteboard screen\n\nNow we’re ready to add the code for the Whiteboard screen. Create a `src/screens/Whiteboard.js` file and add the following:\n\n```javascript\n    import React, { Component } from \"react\";\n    import { Container, Row, Col, Button, Input } from 'reactstrap';\n    import { SketchField, Tools } from 'react-sketch';\n    \n    import { FaMousePointer, FaPen, FaCircle, FaSquare, FaTrash } from 'react-icons/fa';\n    \n    import shortid from 'shortid'; // for generating unique IDs\n```\n\nNext, initialize the state and the instance variables. `this.tools` contains the tools that the users can use to draw objects in the whiteboard. This corresponds to the [object types](http://fabricjs.com/fabric-intro-part-1#objects) available in FabricJS:\n\n```javascript\n    class WhiteboardScreen extends Component {\n    \n      state = {\n        text: '',\n        myUsername: '',\n        tool: Tools.Pencil\n      }\n      \n      constructor(props) {\n        super(props);\n      \n        this.tools = [\n          {\n            name: 'select',\n            icon: \u003cFaMousePointer /\u003e,\n            tool: Tools.Select\n          },\n          {\n            name: 'pencil', \n            icon: \u003cFaPen /\u003e,\n            tool: Tools.Pencil\n          },\n          {\n            name: 'rect',\n            icon: \u003cFaSquare /\u003e,\n            tool: Tools.Rectangle\n          },\n          {\n            name: 'circle',\n            icon: \u003cFaCircle /\u003e,\n            tool: Tools.Circle\n          }\n        ];\n      \n        this.auto_create_tools = ['circle', 'rect']; // tools that will automatically create their corresponding object when selected\n      \n        // next: add settings for auto-created objects\n      }\n    \n      // next: add componentDidMount\n    }\n```\n\nNext, add the default settings for the objects that will be automatically created upon selection. Note that the user can always modify the object afterward so it’s safe to create them with some default settings:\n\n```javascript\n    this.initial_objects = {\n      'circle': { \n        radius: 75, \n        fill: 'transparent', \n        stroke: '#000', \n        strokeWidth: 3, \n        top: 60, \n        left: 500 \n      },\n      \n      'rect': { \n        width: 100, \n        height: 50, \n        fill: 'transparent', \n        stroke: '#000', \n        strokeWidth: 3, \n        top: 100, \n        left: 330 \n      }\n    }\n```\n\nOnce the component is mounted, we get the navigation params that were passed from the login screen earlier:\n\n```javascript\n    componentDidMount() {\n    \n      const { navigation } = this.props;\n      this.myUsername = navigation.getParam(\"myUsername\");\n      this.pusher = navigation.getParam(\"pusher\");\n      this.group_channel = navigation.getParam(\"group_channel\");\n    \n      this.setState({\n        myUsername: this.myUsername\n      });\n    \n      // next: add code for listening for canvas updates\n    }\n```\n\nNext, we listen for the event triggered by the user who updates the canvas. Every time this gets fired, we call the `textGatherer` function. This is a [JavaScript closure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) that allows us to create an internal scope for storing payload data. \n\nWe’re doing this because not all messages contain all the data we need in order to update the canvas. A single object update or creation may require the use of five or more messages in order to send its full data. This is necessary because of Pusher’s 10KB per message limit which we’ll talk about later. \n\nGoing back to the code below, we check for the `is_final` property in the `payload` before we can start processing the message. Having this property in the message means that this is the last part of the message. Only then can we get the contents accumulated by the closure and convert it to an object. \n\nThat way, we can assign additional properties to it before we convert it back to a JSON string so we can pass it to the `addObject` and `modifyObject` functions:\n\n```javascript\n    let textGatherer = this._gatherText();\n    \n    this.group_channel.bind('client-whiteboard-updated', (payload) =\u003e {\n      textGatherer(payload.data);\n    \n      if (payload.is_final) {\n        const full_payload = textGatherer(); // get the gathered text\n        let obj = '';\n        if (full_payload) {\n          obj = JSON.parse(full_payload);\n    \n          if (payload.id) {\n            Object.assign(obj, { id: payload.id, sender: payload.sender });\n          } else {\n            Object.assign(obj, { sender: payload.sender });\n          }\n        }\n        \n        if (payload.action === 'add') {\n          this._sketch.addObject(JSON.stringify(obj));\n        } else if(payload.action === 'update') {\n          this._sketch.modifyObject(JSON.stringify(obj));\n        } else if(payload.action === 'remove') {\n          this._sketch.setSelected(payload.id);\n          this._sketch.removeSelected();\n        }\n    \n        textGatherer = this._gatherText(); // reset to an empty string\n      }\n    \n    });\n```\n\nHere’s the code for the `_gatherText` function:\n\n```javascript\n    _gatherText = () =\u003e {\n      let sentence = '';\n      return (txt = '') =\u003e {\n       return sentence += txt;\n      }\n    }\n```\n\nNext, render the UI. This is where we make use of the `SketchField` component that we updated earlier (if you followed along). `this._sketch` contains the reference to the component itself, it allows us to use methods from within the component class. `tool` is the tool that’s used to draw something on the canvas. `onUpdate`, `username`, and `shortid` are the custom ones (they’re not from the original library) we added earlier. Additionally, we have a tool for removing objects and adding text:\n\n```javascript\n    render() {\n      return (\n        \u003cContainer fluid\u003e\n          \u003cRow\u003e\n            \u003cCol lg={9}\u003e\n              {\n                this.state.myUsername \u0026\u0026\n                \u003cSketchField\n                  className=\"canvas\"\n                  ref={c =\u003e (this._sketch = c)}\n                  width='1024px'\n                  height='768px'\n                  tool={this.state.tool}\n                  lineColor='black'\n                  lineWidth={3}\n                  onUpdate={this.sketchUpdated}\n                  username={this.state.myUsername}\n                  shortid={shortid} /\u003e\n              }\n            \u003c/Col\u003e\n    \n            \u003cCol lg={3} className=\"Sidebar\"\u003e\n              \u003cdiv className=\"tools\"\u003e\n    \n                {this.renderTools()}\n    \n                \u003cdiv className=\"tool\"\u003e\n                  \u003cButton \n                    color=\"danger\" \n                    size=\"lg\" \n                    onClick={this.removeSelected} \n                  \u003e\n                    \u003cFaTrash /\u003e\n                  \u003c/Button\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \n              \u003cdiv\u003e\n                \u003cdiv className=\"textInputContainer\"\u003e\n                  \u003cInput \n                    type=\"textarea\" \n                    name=\"text_to_add\" \n                    id=\"text_to_add\" \n                    placeholder=\"Enter text here\" \n                    value={this.state.text}\n                    onChange={this.onUpdateText} /\u003e\n                  \u003cdiv className=\"buttonContainer\"\u003e\n                    \u003cButton type=\"button\" color=\"primary\" onClick={this.addText} block\u003eAdd Text\u003c/Button\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n    \n            \u003c/Col\u003e  \n          \u003c/Row\u003e\n        \u003c/Container\u003e\n      );\n    }\n```\n\nHere’s the function for rendering the buttons for picking the tools:\n\n```javascript\n    renderTools = () =\u003e {\n      return this.tools.map((tool) =\u003e {\n        return (\n          \u003cdiv className=\"tool\" key={tool.name}\u003e\n            \u003cButton \n              color=\"secondary\" \n              size=\"lg\" \n              onClick={this.pickTool} \n              data-name={tool.name}\n              data-tool={tool.tool}\n            \u003e\n              {tool.icon}\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        );\n      });\n    }\n```\n\nThe `pickTool` function is executed when any of the buttons is clicked. This will simply update the value of `tool` in the state. But if the selected tool is one of those “auto-create” ones, we generate a unique ID and add it as a property to the default object settings (`this.initial_objects`) before we add it to the canvas. \n\nWe also change the tool back to the select tool so the user can select the object and start modifying it to their liking:\n\n```javascript\n    pickTool = (event) =\u003e {\n      const button = event.target.closest('button');\n      const tool = button.getAttribute('data-tool');\n      const tool_name = button.getAttribute('data-name');\n    \n      this.setState({\n        tool\n      }, () =\u003e {\n        if (this.auto_create_tools.indexOf(tool_name) !== -1) {\n         \n          const obj = this.initial_objects[tool_name]; // get the initial object settings\n          const id = shortid.generate(); // generate a random unique ID\n          Object.assign(obj, { id: id, type: tool_name }); // add the ID to the object\n          \n          this._sketch.addObject(JSON.stringify(obj)); // add the object to the canvas\n        \n          // change the tool back to select\n          setTimeout(() =\u003e {\n            this.setState({\n              tool: Tools.Select \n            });\n          }, 500);\n    \n        }\n    \n      });\n    }\n    \n    // next: add onUpdateText\n```\n\nNext, add the function for updating the value of the text field for entering the text to be added to the canvas:\n\n```javascript\n    onUpdateText = (event) =\u003e {\n      this.setState({\n        text: event.target.value\n      });\n    }\n    \n    // next: add addText\n```\n\nWhen the button for adding a text is clicked, we call the `addText` method from inside the `SketchField` component. This accepts the text value to be added, and an optional object containing additional options for the text. In this case, we’re simply using it to pass the unique object ID:\n\n```javascript\n    addText = () =\u003e {\n      if (this.state.text) {\n        const id = shortid.generate();\n        this._sketch.addText(this.state.text, { id }); // add a text object to the canvas\n      \n        this.setState({\n          text: ''\n        });\n      }\n    }\n    \n    // next: add sketchUpdated function\n```\n\nNext is the `sketchUpdated` function. This function is called every time an object is added, modified, or removed from the canvas. It uses the `updateOtherUsers` function to publish the changes to all the other users on the channel. But before doing so, it first splits up the object based on a specific length. \n\nAs mentioned earlier, Pusher has a [10KB limit for publishing messages](https://support.pusher.com/hc/en-us/articles/202046553-What-is-the-message-size-limit-when-publishing-a-message-). This is plenty for the Circle, Rectangle, and Text objects but not for the path (free-drawing) object. \n\nIt’s considered a complex shape so it takes a lot more data to describe it. Which means that the 10KB limit is not enough. So the solution is to split up the `obj` into multiple parts. \n\nEach part contains a specific number of characters. In this case, we’re using 8,000 because 10KB is roughly 10,000 characters. The extra 2,000 is for all the other data that we’re publishing. For the final part, we simply add an `is_final` property to the `payload` to signal the receiver that the message is ready to be assembled:\n\n```javascript\n    sketchUpdated = (obj, action, sender, id = null) =\u003e {\n      if (this.state.myUsername) {\n        \n        let length_per_part = 8000; // maximum number of characters that can be alloted to a FabricJS object\n        let loop_count = Math.ceil(obj.length / length_per_part);\n    \n        let from_str_index = 0;\n        for (let x = 0; x \u003c loop_count; x++) {\n          const str_part = obj.substr(from_str_index, length_per_part);\n    \n          const payload = {\n            action: action,\n            id: id,\n            data: str_part,\n            sender: this.state.myUsername\n          };\n    \n          if (x + 1 === loop_count) { // if this is the final part\n            Object.assign(payload, { is_final: true });\n          }\n          \n          this.updateOtherUsers(payload);\n          from_str_index += length_per_part;\n        }\n      }\n    }\n```\n\nHere’s the `updateOtherUsers` function:\n\n```javascript\n    updateOtherUsers = (payload) =\u003e {\n      this.group_channel.trigger('client-whiteboard-updated', payload);\n    }\n```\n\nLastly, we have the `removeSelected` function. This is where we get the currently selected object and publish its `id` to all the other users in the channel:\n\n```javascript\n    removeSelected = () =\u003e {\n      const activeObj = this._sketch.getSelected();\n      \n      const payload = {\n        action: 'remove',\n        is_final: true,\n        id: activeObj.id,\n        sender: this.state.myUsername\n      };\n    \n      this.updateOtherUsers(payload);\n      this._sketch.removeSelected(); // remove the object from the user's canvas\n    }\n```\n\n## Server code\n\nHere’s the server code. Right now, we’re simply using it to authenticate the user with Pusher so they can send client events:\n\n```javascript\n    // server/server.js\n    var express = require(\"express\");\n    var bodyParser = require(\"body-parser\");\n    var Pusher = require(\"pusher\");\n    const cors = require(\"cors\");\n    \n    require(\"dotenv\").config();\n    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(cors());\n    \n    var pusher = new Pusher({\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret: process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER\n    });\n    \n    // for checking if the server works\n    app.get(\"/\", (req, res) =\u003e {\n      res.send(\"all good...\");\n    });\n    \n    app.post(\"/pusher/auth\", (req, res) =\u003e {\n      const socketId = req.body.socket_id;\n      const channel = req.body.channel_name;\n      console.log(\"authing...\");\n      var auth = pusher.authenticate(socketId, channel);\n      return res.send(auth);\n    });\n    \n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\nDon’t forget to update the `server/.env` file to include your Pusher app credentials:\n\n```\n    APP_ID=\"YOUR PUSHER APP ID\"\n    APP_KEY=\"YOUR PUSHER APP KEY\"\n    APP_SECRET=\"YOUR PUSHER APP SECRET\"\n    APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\n## Running the app\n\nAt this point, you can now run the app. Start by running the server:\n\n```\n    cd server\n    node server.js\n```\n\nOptionally, you can use ngrok so you can test the app with someone outside your network. Don’t forget to update the base URL in the login screen if you do so:\n\n```javascript\n    // src/screens/Login.js\n    const BASE_URL = \"http://localhost:5000\";\n```\n\nFinally, run the app itself:\n\n```\n    yarn start\n    yarn electron-dev\n```\n\n## Conclusion\n\nIn this tutorial, we learned how to use FabricJS and React Sketch library to create a whiteboard app in React. Stay tuned for [part two](https://pusher.com/tutorials/whiteboard-electron-react-part-2) where we add a group chat to the whiteboard so the users can talk about what they’re trying to sketch. \n\nYou can find the code for this tutorial on its [GitHub repo](https://github.com/anchetaWern/ElectronWhiteboard).","metaTitle":"Create a whiteboard Electron app with React - Part 1","metaDescription":"In this two-part series, build a whiteboard app using Node, Electron and React. Users will be able to collaborate in realtime, drawing on a simple canvas. The app also features chat functionality. In part one, create the whiteboard."}}],"defaultValue":"React","queryType":"tag","pages":7,"route":"/tutorials","query":{"tag":"React","page":"1"}}},"page":"/tutorials","query":{"tag":"React","page":"1"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=React&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:43:37 GMT -->
</html>