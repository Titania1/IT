<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&page=23 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:08 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">296</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials.html" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials1bbb.html?product=Beams" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value=""/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:none;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/unit-testing-asp.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">C#<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Write unit tests for ASP.NET</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Learn how to write unit tests for ASP.NET using a sample app (provided) and the test library supplied by Visual Studio.</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/group-chat-net.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a group chat app using .NET Core</h3><p class="css-k12xad e5jrto45">Learn how to build a chat app in .NET, with notifications using Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/read-receipts-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build read receipts using Kotlin</h3><p class="css-k12xad e5jrto45">Discover how to build read receipts and integrate it in your Kotlin chat app.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-struts.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Java</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app using Struts 2</h3><p class="css-k12xad e5jrto45">In this tutorial, discover the basics of how to add chat to a Java Struts 2 application, using Pusher for the realtime f...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-javascript.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build live comments using JavaScript</h3><p class="css-k12xad e5jrto45">Create a realtime comment feature for web applications using with JavaScript on frontend and Node.js on the backend.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/angular-realtime.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">TypeScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Making Angular 5 realtime with WebSockets</h3><p class="css-k12xad e5jrto45">Build an app with realtime features in Angular 5 and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/social-network-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a simple social network with Kotlin</h3><p class="css-k12xad e5jrto45">Social feed have become a major feature of many apps and websites. Learn how to build one with Kotlin and Node.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-payment-dashboard-stripe.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime payment dashboard with Stripe</h3><p class="css-k12xad e5jrto45">Build a live admin dashboard with Vue.js and Node.js, accepting payments through Stripe.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/activity-feed-android.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Java</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an activity feed in Android </h3><p class="css-k12xad e5jrto45">Discover how you can create a realtime activity feed for your Android app.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials81f8.html?product=Channels&amp;page=22" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialse35b.html?product=Channels&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials1737.html?product=Channels&amp;page=21" class="css-za1ua3 edg0byb1">21</a><a href="tutorials81f8.html?product=Channels&amp;page=22" class="css-za1ua3 edg0byb1">22</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialse657.html?product=Channels&amp;page=23" class="css-2wakph edg0byb1">23</a><a href="tutorials3b09.html?product=Channels&amp;page=24" class="css-za1ua3 edg0byb1">24</a><a href="tutorialsd0f0-2.html?product=Channels&amp;page=25" class="css-za1ua3 edg0byb1">25</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials20e0.html?product=Channels&amp;page=33" class="css-5s6711 edg0byb1">33</a><a href="tutorials3b09.html?product=Channels&amp;page=24" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":296,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Sqq3ONHAciKyCuaMUgQg8","type":"Entry","createdAt":"2018-03-08T13:03:35.629Z","updatedAt":"2018-03-13T14:30:39.178Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Write unit tests for ASP.NET","url":"unit-testing-asp","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/ASP_NET_UNIT_TEST","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6xamBfB840ckYKOkIMm6sM","type":"Entry","createdAt":"2018-02-12T14:51:11.677Z","updatedAt":"2018-02-26T12:31:15.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"C#","url":"c-sharp","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}}],"reviewDate":"2018-03-08","description":"Learn how to write unit tests for ASP.NET using a sample app (provided) and the test library supplied by Visual Studio.","prerequisite":"A basic knowledge of ASP.NET and C# will be helpful when working through this tutorial.","content":"Writing unit tests is a critical step in building robust, high-quality software. When developing an application, it is often helpful to write unit tests that make assertions on various methods and how they are used in the application.\n\nIn this article, we’ll look at writing unit tests for ASP.NET applications using the default test library that comes with Visual Studio\n\nNote that a basic understanding of the following is required to follow this guide:\n\n- ASP.NET MVC \n- C#\n\n\n## Setting up our environment\n\nFirst things first, you need an application to test. To speed up this guide and focus on unit testing, grab this sample application [here](https://github.com/samuelayo/Net_real_time_commenting_pusher)\n\nFirst, the process to use the sample app:\n\n```\n    git clone https://github.com/samuelayo/Net_real_time_commenting_pusher.git\n```\n\nAfter cloning, open the `Real-Time-Commenting.sln` file in Visual Studio.\n\nNote: `.sln`  is the acronym for a  `solution` file in `.Net` . The .sln file contains text-based information that the environment uses to find and load the name-value parameters for the persisted data and the project `VSPackages` it references. When a user opens a solution, the environment cycles through the `preSolution`, `Project`, and `postSolution` information in the .sln file to load the solution, projects within the solution, and any persisted information attached to the solution.\n\nCreate a free Pusher account at https://pusher.com/signup then login to your dashboard and \ncreate an app.\n\nTo create an app: \n\n- Click on **Your apps** menu by the side-bar.\n- Click on the create **New app button** by the bottom.\n- Give your app a name, and select a cluster. (It’s also fine to leave the default cluster).\n- Optionally, you can select the back-end tech, which is `.NET` and the front-end stack (`JavaScript`).\n- If you don’t mind, you could also fill in what you’ll be building with Pusher.\n- Click on the **Create my app** button.\n\n\n![Create Pusher app](//images.contentful.com/1es3ne0caaid/3zrjhrp7K0kq0EOeoyAWKm/725ec112a636a8a17c1931609096be51/unit-test-asp-create-app.png)\n\n- Move to the **App Keys** section at the top-bar of your page and copy out your credentials. \n\nFill in your Pusher app credentials in your `Controllers\\HomeController` file by replacing this line with your `XXX_APP_CLUSTER`, `XXX_APP_ID`, `XXX_APP_KEY` and `XXX_APP_SECRET` respectively:\n\n``` C#\n    options.Cluster = \"XXX_APP_CLUSTER\";\n    var pusher = new Pusher(\"XXX_APP_ID\", \"XXX_APP_KEY\", \"XXX_APP_SECRET\", options);\n```\n\nAlso, remember to fill in your secret key and app cluster in your `Views\\Home\\Details.cshtml` file by updating this line:\n\n``` C#\n    var pusher = new Pusher('XXX_APP_KEY', {cluster: 'XXX_CLUSTER'});\n```\n\nTo have a better understanding of what the sample app above does, refer to [this](https://blog.pusher.com/build-a-realtime-commenting-feature-using-net-and-pusher/) tutorial.\n\n\n## Setting up tests\n\nIf you look at the sample application you have cloned, notice that there are no tests in this application. So how do you go about adding tests to an existing application? Visual Studio makes this task an easy one.\n\nClick on **file** at the topbar, navigate to **new**, make another navigation to **project**. A new dialog box will pop up. By the left sidebar of the new dialog, navigate to **visual c#**, then scroll down to **tests**. \n\nBy the middle bar, select **unit test project**. Move down to where you have the name of the project, make sure the name of the project tallies with the name of the project/solution you want to add unit tests for with an extension of `.Tests`. Here, the name will be `Real-Time-Commenting.Tests`. \n\nNext, in the solution section, select **Add to Solution**. Then click **ok**.\n\nThat’s how simple it is to add unit tests to an existing application. Next, you need to write the tests that will be performed.\n\nPlease note you might need to add some new references to your unit test as some libraries might not be available. For this tutorial, a reference to `System.Web.Mvc` will be required, so we can have access to functions like `ViewResult`, `ActionResult`, etc.\n\nTo add this reference: \n\n- Move to the `solution explorer` scroll down to `Real-Time-Commenting.Tests`.\n- Right-click and select `Manage NuGet Packages` and search for `Microsoft.AspNet.``Mvc` in the search bar and hit the search button. \n- Install the `Microsoft.AspNet.Mvc` package . This should be the first package in the search results. \n\nWe have now added the reference to our test.\n\nNext, we need to add a reference to our main app `Real-Time-Commenting`\n\n\n## Understanding the default test\n\nBy default, Visual Studio scaffolds a file called `UnitTest1.cs` as seen :\n\n``` C#\n    using System;\n    using Microsoft.VisualStudio.TestTools.UnitTesting;\n    \n    namespace Real_Time_Commenting.Tests\n    {\n        [TestClass]\n        public class UnitTest1\n        {\n            [TestMethod]\n            public void TestMethod1()\n            {\n            }\n        }\n    }\n```\n\nIn the code block above, there are three main differences from a normal ASP.NET class, which are:\n\n- The reference to `Microsoft.VisualStudio.TestTools.UnitTesting` which exposes the other two differences which I will point out next.\n- The `[TestClass]` decorator: any Class to be used for testing must have this decorator just before the class decoration.\n- The `[TestMethod]` decorator: any function which tests and asserts anything must have this decorator. Any method without this decorator will be treated as a normal method.\n\n\n## Writing your first test\n\nLet us take a quick look at writing a functional test. We will attempt to test the `create` function of our `Homecontroller` first as it does not interact with our database yet.\n\nOur test is seen below:\n\n``` C#\n    using System;\n    using Real_Time_Commenting.Controllers;\n    using System.Web.Mvc;\n    using Microsoft.VisualStudio.TestTools.UnitTesting;\n    namespace Real_Time_Commenting.Tests\n    {\n        [TestClass]\n        public class UnitTest1\n        {\n            [TestMethod]\n            public void CreateGet()\n            {\n                HomeController HomeController = new HomeController();\n                ViewResult result = HomeController.Create() as ViewResult;\n                Assert.IsNotNull(result);\n                Assert.IsInstanceOfType(result, typeof(ViewResult));\n                Assert.AreEqual(string.Empty, result.ViewName);\n            }\n        }\n    }\n```\n\nThe test above shows how easy it is to test a controller method. In our `CreateGet` method, we\n\n- Created a new instance of the HomeController\n- Called the Create function and cast it to be of type `ViewResult` which makes sense as the function returns a view.\n- Assert that the result is not null\n- Assert that the result is truly an instance of ViewResult\n- Assert that the `ViewName` is empty. This should pass as we only called `return view()` in the method, passing no argument/name to the view function.\n\n\n## Testing methods that interact with the database\n\nIn the section above, we saw how easy it is to setup and write our first unit test. It would be nice if that were how all controllers behaved. However, in a real-world application, calls would be made to the database, and we will need to test methods that interact with the database.\n\nThere are different methods to achieve this kind of test such as `mocking`, using fake `DbContext` and a lot more.\n\nIn this piece, we will use a fake `DbContext` to test methods that interact with the database.\n\n### Adding an interface\nUsually, in ASP.NET applications, the DB context is usually a class that has classes defined (our models), using the DbSet class which can be found in `Models\\IdentityModel.cs`.\n\n`DbSet\u003cT\u003e` implements `IDbSet\u003cT\u003e`, so we can create an interface for our context to implement the `IDbSet` class.\n\nOpen your `Models\\IdentityModels.cs` file and replace the `ApplicationDbContext` class with:\n\n``` C#\n    public class ApplicationDbContext : IdentityDbContext\u003cApplicationUser\u003e, IrealtimeContext\n    {\n        public ApplicationDbContext()\n            : base(\"DefaultConnection\", throwIfV1Schema: false)\n    \n        {\n        }\n    \n        public static ApplicationDbContext Create()\n        {\n            return new ApplicationDbContext();\n        }\n    \n        public IDbSet\u003cBlogPost\u003e BlogPost { get; set; }\n        public IDbSet\u003cComment\u003e Comment { get; set; }\n    }\n```\n\nIn the code block above, we notice that:\n\n- We have added a new interface called `IrealtimeContext` which the `ApplicationDbContext` must implement.\n- The public properties `BlogPost` and `Comment` now implement the `IDbSet` class directly.\n\nNext, we need to create the `IrealtimeContext` class which we asked the `ApplicationDbContext` class to implement. Just after the code block above, add:\n\n``` C#\n    public interface IrealtimeContext\n    {\n        IDbSet\u003cBlogPost\u003e BlogPost { get; }\n        IDbSet\u003cComment\u003e Comment { get; }\n        int SaveChanges();\n    }\n```\n\nNow we can update our controller to be based on this interface rather than the `EF` specific implementation.\n\nNote: `EF` stands for Entity Framework, which is the framework used for database interactions in ASP.NET MVC.\n\nOpen your `HomeController`, replace the line that says `ApplicationDbContext db = new ApplicationDbContext();` with this code block:\n\n``` C#\n    private readonly IrealtimeContext db;\n    public HomeController() {\n        db = new ApplicationDbContext();\n    }\n    public HomeController(IrealtimeContext context)\n    {\n        db = context;\n    }\n```\n\nHere, we created a constructor with an overloaded method which assigns the instance of our DB based on the parameter supplied. While testing, we will pass in our own fake `IDbset` instance which does not commit to the database but rather uses a data access layer with an in-memory fake.\n\n### Building the fake implementation\nHere, we need to build a fake implementation of `IDbSet\u003cTEntity\u003e`, this is easy to implement. We need to make functions like `Add`, `Find`, `Attach`, `Remove`, `Detach`, `Create` and other methods exposed by the `IDbSet` interface available. In your `Tests` solution, create a new file called `FakeDbSet.cs` and add:\n\n``` C#\n    using Real_Time_Commenting.Models;\n    using System;\n    using System.Collections.Generic;\n    using System.Collections.ObjectModel;\n    using System.Data.Entity;\n    using System.Linq;\n    using System.Web;\n    \n    namespace Real_Time_Commenting.Tests\n    {\n        public class FakeDbSet\u003cT\u003e : IDbSet\u003cT\u003e\n        where T : class\n        {\n            ObservableCollection\u003cT\u003e _data;\n            IQueryable _query;\n            \n            //constructor\n            \n            public FakeDbSet()\n            {\n                _data = new ObservableCollection\u003cT\u003e();\n                _query = _data.AsQueryable();\n            }\n            \n            //find function\n            \n            public virtual T Find(params object[] keyValues)\n            {\n                throw new NotImplementedException(\"Derive from FakeDbSet\u003cT\u003e and override Find\");\n            }\n            \n            // add function\n            \n            public T Add(T item)\n            {\n                _data.Add(item);\n                return item;\n            }\n            //remove function\n            public T Remove(T item)\n            {\n                _data.Remove(item);\n                return item;\n            }\n            \n            // Attach function\n            \n            public T Attach(T item)\n            {\n                _data.Add(item);\n                return item;\n            }\n            \n            //  Detach function\n            \n            public T Detach(T item)\n            {\n                _data.Remove(item);\n                return item;\n            }\n            \n            // Create function\n            \n            public T Create()\n            {\n                return Activator.CreateInstance\u003cT\u003e();\n            }\n        }\n    }\n```\n\nNext, we also want to fake some other functions and properties which will be used in the fake `DbSet` such as `ObservableCollection`, `ElementType`, `Expression`, `provider` `GetEnumerator` etc. Below is what the fake implementation looks like:\n\n``` C#\n    public TDerivedEntity Create\u003cTDerivedEntity\u003e() where TDerivedEntity : class, T\n    {\n        return Activator.CreateInstance\u003cTDerivedEntity\u003e();\n    }\n    \n    public ObservableCollection\u003cT\u003e Local\n    {\n        get { return _data; }\n    }\n    \n    Type IQueryable.ElementType\n    {\n        get { return _query.ElementType; }\n    }\n    \n    System.Linq.Expressions.Expression IQueryable.Expression\n    {\n        get { return _query.Expression; }\n    }\n    \n    IQueryProvider IQueryable.Provider\n    {\n        get { return _query.Provider; }\n    }\n    \n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()\n    {\n        return _data.GetEnumerator();\n    }\n    \n    IEnumerator\u003cT\u003e IEnumerable\u003cT\u003e.GetEnumerator()\n    {\n        return _data.GetEnumerator();\n    }\n```\n\nThe above block is a class which implements all the compulsory methods of the `IDbSet\u003cTEntity\u003e`, which stores objects in memory, as opposed to writing them to a database.\n\nNote that in the code above, we have no logic in our `Find` method. This is because the find implementation for various models might vary. So instead we return a virtual function that would be overridden.\n\nNext, let us overwrite the find function for our `BlogPost` and `Comments` models.\n\n``` C#\n    public class FakeBlogPostSet : FakeDbSet\u003cBlogPost\u003e\n    {\n        public override BlogPost Find(params object[] keyValues)\n        {\n            return this.SingleOrDefault(e =\u003e e.BlogPostID == (int)keyValues.Single());\n        }\n    }\n    \n    public class FakeCommentSet : FakeDbSet\u003cComment\u003e\n    {\n        public override Comment Find(params object[] keyValues)\n        {\n            return this.SingleOrDefault(e =\u003e e.BlogPostID == (int)keyValues.Single());\n        }\n    }\n    \n    public class FakedbContext : IrealtimeContext\n    {\n        public FakedbContext()\n        {\n            this.BlogPost = new FakeBlogPostSet();\n            this.Comment = new FakeCommentSet();\n        }\n    \n        public IDbSet\u003cBlogPost\u003e BlogPost { get; private set; }\n    \n        public IDbSet\u003cComment\u003e Comment { get; private set; }\n    \n        public int SaveChanges()\n        {\n            return 0;\n        }\n    }\n```\n\nIn the code block above, we have three separate classes. The first two classes implement our `FakeDbSet` class, with an argument of which model we are associating with it. As of now, we have only two models in our application, hence the names `FakeBlogPostSet` for the `BlogPost` model and `FakeCommentSet` for the `Comments` model.\n\nBecause these classes implement our `FakeDbSet` class, we can override the `Find` method in the class declaration.\n\nIn the `FakeBlogPostSet` we override the find function and tell it to return the collection whose `BlogPostID` matches the id.\n\nIn the `FakeCommentSet` we override the find function and tell it to return the collection whose `BlogPostID` matches the id. Note here that we are not checking against the `CommentID` because the application we are testing returns all comments that belong to a `BlogPost`.\n\nFinally, we have the `FakedbContext` class. This class implements the `IrealtimeContext` which we had interfaced in our `Models\\IdentityModels.cs` file. Remember that to pass any `DbContext` to our application, It must interface this Class.\n\nNow we can import our `FakedbContext` class, pass it to our controller during tests and have it use memory to store our test objects.\n\n### Rewriting our first test with the new FakedbContext\nIn our first test, we wrote a test for the `create` function of our `Homecontroller` first as it does not interact with our database yet. While it still does not interact with our database, I’d like to show you you how our new `FakedbContext` does not affect the function when passed to the controller.\n\n``` C#\n    using System;\n    using Real_Time_Commenting.Controllers;\n    using System.Web.Mvc;\n    using Microsoft.VisualStudio.TestTools.UnitTesting;\n    namespace Real_Time_Commenting.Tests\n    {\n        [TestClass]\n        public class UnitTest1\n        {\n            [TestMethod]\n            public void CreateGet()\n            {\n                var context = new FakedbContext { };\n                HomeController HomeController = new HomeController(context);\n                ViewResult result = HomeController.Create() as ViewResult;\n                Assert.IsNotNull(result);\n                Assert.IsInstanceOfType(result, typeof(ViewResult));\n                Assert.AreEqual(string.Empty, result.ViewName);\n            }\n        }\n    }\n```\n\nNotice any difference in the code above from our first test? Yes. The difference here is that:\n\n- We defined a new context of class `FakedbContext` which we passed into the constructor of the HomeController. If you run your tests it would pass with no failure.\n\n\n## Testing all methods in our controller\n\nNow we have our super `FakedbContext` setup, we can test all methods in our controller which consist of view responses, JSON responses and async tasks with a string response.\n\n### Testing the index method\n\n``` C#\n    using System.Web.Mvc;\n    using Microsoft.VisualStudio.TestTools.UnitTesting;\n    using Real_Time_Commenting.Controllers;\n    using Real_Time_Commenting.Models;\n    using System.Linq;\n    using System.Threading.Tasks;\n    \n    namespace Real_Time_Commenting.Tests\n    {\n        [TestClass]\n        public class UnitTest1\n        {\n            [TestMethod]\n            public void TestIndex()\n            {\n                var context = new FakedbContext { BlogPost = { new BlogPost { Title = \"test\", Body=\"test\" } } };\n                HomeController HomeController = new HomeController(context);\n                ViewResult result = HomeController.Index() as ViewResult;\n                Assert.IsInstanceOfType(result.ViewData.Model, typeof(IEnumerable\u003cBlogPost\u003e));\n                var posts = (IEnumerable\u003cBlogPost\u003e)result.ViewData.Model;\n                Assert.AreEqual(\"test\", posts.ElementAt(0).Title);\n                Assert.AreEqual(\"test\", posts.ElementAt(0).Body);\n            }\n        }\n    }\n```\n\n`TestIndex`: this method tests the `Index` function of our `HomeController`. The `Index` method returns a view alongside a list of all the `BlogPosts` in our database.\n\nFirst, we declare a variable called context which is an instance of our `FakedbContext` class passing in a new `BlogPost` object, we then pass in the new context to the `constructor` of our `HomeController`.\n\nNext, we call the `Index` function of our `HomeController`, casting it to be of type `ViewResult`. \n\n  \n\nWe then check if the result is of type `IEnumerable\u003cBlogPost\u003e`, we also check that the title and body of the first object equal the title and body we had set in our `FakeDbContext`.\n\n### Testing the details method\n\n``` C#\n    using System.Web.Mvc;\n    using Microsoft.VisualStudio.TestTools.UnitTesting;\n    using Real_Time_Commenting.Controllers;\n    using Real_Time_Commenting.Models;\n    using System.Linq;\n    using System.Threading.Tasks;\n    \n    namespace Real_Time_Commenting.Tests\n    {\n        [TestClass]\n        public class UnitTest1\n        {\n            [TestMethod]\n            public void TestDetails()\n            {\n                var context = new FakedbContext { BlogPost = { new BlogPost { BlogPostID=1, Title = \"test\", Body = \"test\" } } };\n                HomeController HomeController = new HomeController(context);\n                ViewResult result = HomeController.Details(1) as ViewResult;\n                Assert.IsInstanceOfType(result.ViewData.Model, typeof(BlogPost));\n                var post = (BlogPost)result.ViewData.Model;\n                Assert.AreEqual(1, post.BlogPostID);\n    \n            }\n        }\n    }\n```\n\n`TestDetails`: this method tests the details method of our `HomeController`. The details method accepts an integer parameter called `id`. It uses this id to fetch the `BlogPost` whose id matches in the database, then returns a view alongside the result it gets from the database.\n\nFirst, we declare a variable called context which is an instance of our `FakedbContext` class passing in a new `BlogPost` object, we then pass in the new context to the `constructor` of our `HomeController`.  \n\nNext, we call the details method, passing in `1` as the id we want to retrieve, casting it to be of type `ViewResult`. We then verify that the result’s model is of our `BlogPost` type. Also, we verify that the id of the data returned by the method is equal to 1.\n\n\n### Testing the post action of the create method\n\n``` C#\n    using System.Web.Mvc;\n    using Microsoft.VisualStudio.TestTools.UnitTesting;\n    using Real_Time_Commenting.Controllers;\n    using Real_Time_Commenting.Models;\n    using System.Linq;\n    using System.Threading.Tasks;\n    \n    namespace Real_Time_Commenting.Tests\n    {\n        [TestClass]\n        public class UnitTest1\n        {\n            [TestMethod]\n            public void CreatePost()\n            {\n                var context = new FakedbContext{};\n                 BlogPost Post = new BlogPost();\n                 Post.Title = \"Test Post\";\n                 Post.Body = \"Test Body\";\n                 HomeController HomeController = new HomeController(context);\n                RedirectToRouteResult result = HomeController.Create(Post) as RedirectToRouteResult;\n                Assert.AreEqual(\"Index\", result.RouteValues[\"Action\"]);\n                Console.WriteLine(result.RouteValues);\n                 Assert.IsNotNull(result.ToString());\n            }\n        }\n    }\n```\n\n`CreatePost`: this method test the `POST` method for `create`. This create method adds a new post, and then returns a `RedirectToAction`.\n\nFirst, we declare a variable called context which is an instance of our `FakedbContext` class. Next, we create a new `BlogPost` instance passing in the `title` and the `body`. We then call the create method passing in our new `BlogPost` object, casting the result to type `RedirectToRouteResult`.\n  \n\nNote: we cast the result type here to type RedirectToRouteResult because the method we are testing here returns a `RedirectToAction`.\n\nWe assert that the result’s `RouteValues[\"Action\"]` is equal to `index` which means `RedirectToAction` triggered a redirect to the `index` method.\n\n### Testing the comments method\n\n``` C#\n    using System.Web.Mvc;\n    using Microsoft.VisualStudio.TestTools.UnitTesting;\n    using Real_Time_Commenting.Controllers;\n    using Real_Time_Commenting.Models;\n    using System.Linq;\n    using System.Threading.Tasks;\n    \n    namespace Real_Time_Commenting.Tests\n    {\n        [TestClass]\n        public class UnitTest1\n        {\n            [TestMethod]\n            public void TestComments()\n            {\n                var context = new FakedbContext { Comment = { new Comment { BlogPostID = 1, CommentID = 1, Name = \"test\", Body = \"test\" }, new Comment { BlogPostID = 1, CommentID = 1, Name = \"test\", Body = \"test\" } } };\n                HomeController HomeController = new HomeController(context);\n                JsonResult result = HomeController.Comments(1) as JsonResult;\n                var list = (IList\u003cComment\u003e)result.Data;\n                Assert.AreEqual(list.Count, 2);\n                Console.WriteLine(list[0].Name.ToString());\n            }\n        }\n    }\n```\n\n`TestComments`: this method test the `comments` method of our Controller. The `comments` method accepts an integer `id` which is the `Id` of the `BlogPost` it wants to get comments for.\n\nFirst, we declare a variable called context which is an instance of our `FakedbContext` class, passing in an object of two comments as our `comments`. Next, we pass the instance to the constructor of our `HomeController`. We then call the `comments` method passing in the id of the `BlogPost` we want to get comments for, casting the result as a `JsonResult`.\n\nJust before we do our assertion, we cast the `JsonResult` to a list of type `comments`. After this, we assert that there are two comments in the response.\n\n### Testing the comment method\n\n``` C#\n    using System.Web.Mvc;\n    using Microsoft.VisualStudio.TestTools.UnitTesting;\n    using Real_Time_Commenting.Controllers;\n    using Real_Time_Commenting.Models;\n    using System.Linq;\n    using System.Threading.Tasks;\n    \n    namespace Real_Time_Commenting.Tests\n    {\n        [TestClass]\n        public class UnitTest1\n        {\n            [TestMethod]\n            public async Task TestComment()\n            {\n                var context = new FakedbContext { };\n                HomeController HomeController = new HomeController(context);\n                var comment = new Comment { BlogPostID = 1, CommentID = 1, Name = \"test\", Body = \"test\" };\n                ContentResult result = await HomeController.Comment(comment) as ContentResult;\n                Assert.AreEqual(result.Content, \"ok\");\n            }\n        }\n    }\n```\n\n`TestComment`: this method tests the async method `Comment` which adds a new comment to the database and broadcasts the comment to Pusher.\n\nFirst, we declare a variable called context which is an instance of our `FakedbContext` class. Next, we pass the context into the constructor of our `HomeController`. We then create a new comment object which we will broadcast, then call the comment method passing in the new comment object.\n\nThe method we are testing returns a string content, and we cast the result to be of type `ContentResult`. Finally, we assert that the results content is equal to the string `ok`.\n\n\n## Conclusion\n\nDuring this tutorial, we have covered how to write unit tests in ASP.NET. \n\nWe have gone through the process of writing tests for an existing ASP.NET and Pusher application.\n\nWe have also covered testing asynchronous methods, methods that return a `RedirectToAction`, `Content`, `View` and `JSON`\n\nThe codebase to this guide can be found [here](https://github.com/samuelayo/ASP_NET_UNIT_TEST). Feel free to download and experiment with the code.","metaTitle":"Write unit tests for ASP.NET","metaDescription":"This tutorial shows how to write unit tests for ASP.NET. It uses the test library that comes with Visual Studio, and a sample app provided by the author."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1VzoJx8nmcmycqAMMkSmcq","type":"Entry","createdAt":"2018-03-08T13:10:53.254Z","updatedAt":"2020-06-19T14:23:06.691Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":8,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a group chat app using .NET Core","url":"group-chat-net","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"projectRepo":"https://github.com/dongido001/Dotnet_GroupChat_Using_Pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2zMClYDH68wMGYcoiYC8wI","type":"Entry","createdAt":"2018-02-12T14:44:37.285Z","updatedAt":"2018-02-12T14:44:37.285Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":".NET","url":"net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2018-03-06","description":"Learn how to build a chat app in .NET, with notifications using Pusher.","prerequisite":"A basic understanding of C#, .NET and jQuery will be helpful.\n","content":"Our human need for realtime communication is always evolving. That’s why we’re seeing an increase in chat features in more than just chat-based apps. Group chat is a type of chat application where two or more users can exchange messages simultaneously.\n\nIn this article, we’ll build a group chat application in .NET Core MVC. [Pusher](http://pusher.com) sits between our server and client. It simplifies adding realtime functionality to our group chat app.\n\nHere is a preview of what you’ll be building:\n\n![Group Chat .NET demo](//images.contentful.com/1es3ne0caaid/u7v55YS5WKi4KeCeIGe6c/3707712bc7a0733359d1308a80beecf5/group-chat-net-demo.gif)\n\n\nIt will be helpful to have an understanding of the following, but extensive working knowledge isn't required:\n\n1. [C#](https://docs.microsoft.com/en-us/dotnet/csharp/).\n2. [.NET Core](https://docs.microsoft.com/en-us/aspnet/core/) 2.0.\n3. JavaScript ([jQuery](https://jquery.com/)).\n\n## Prerequisites\n1. Install [Visual Studio Code](https://code.visualstudio.com/), or [Visual Studio](https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio) (in this article I’ll use Visual Studio code, since it’s a cross platform editor.)\n2. Install the [.NET Core SDK](https://www.microsoft.com/net/download/core).\n3. Install the [C# extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp) from the Visual Studio Code Marketplace.\n\nVerify your setup by typing the following in your command line:\n\n```\n    $ dotnet --version\n```\n\nThis should print out the visual studio code version you have installed.\n\n## Setting up Pusher app\n\nNext, let’s create an app in our [Pusher](https://pusher.com) account for the group chat application. \n\n\n1. Sign up or login to your [Pusher](https://pusher.com/signup) account.\n2. Create a new pusher app.\n\n![Creating a Pusher app](//images.contentful.com/1es3ne0caaid/6O54kBQseW8i2yqCCQkG8C/af765dfe786811291ae454ac79b4896f/group-chat-net-create-app.png)\n\n3. After filling the form above, click on **Create my app** button to create the app.\n4. The next page is a getting started page with code samples. You should click on **App Keys** tab to get your Pusher app details.\n\nWe’ll need these keys later, so keep them handy! Make sure you add your correct Pusher app details below. `PUSHER_APP_ID`, `PUSHER_APP_KEY`, `PUSHER_APP_SECRET`, `PUSHER_APP_CLUSTER` are just a place holders, replace them with your actual Pusher app details and note it down:\n\n```\napp_id  = \"PUSHER_APP_ID\"\nkey     = \"PUSHER_APP_KEY\"\nsecret  = \"PUSHER_APP_SECRET\"\ncluster = \"PUSHER_APP_CLUSTER\"\n```  \n## Setting up our chat project\n\nFirst, create a new directory on your system - `GroupChat`. Then from your command line, CD(change directory) into the folder your just created.\n\nThen from your command line, run the following command:\n\n```\n    $ dotnet new mvc --auth Individual\n```\n\nThis command creates a new ASP.NET Core MVC project with authentication in your current folder.\n\nWe have included authentication ([Identity](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity?tabs=netcore-cli%2Caspnetcore2x)) in this app because we want to uniquely identify each user so we can easily group them. ASP.NET Core [Identity](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity?tabs=netcore-cli%2Caspnetcore2x) makes it easy to add login features to .NET Core apps.\n\n\n\u003e   💡 ASP.NET Core Identity is a membership system which allows you to add login functionality to your application. Users can create an account and login with a user name and password or they can use an external login provider such as Facebook, Google, Microsoft Account, Twitter or others.\n\n\nNow, open the `GroupChat` folder in Visual Studio Code editor.\n\n\u003e  💡 If your Visual Studio Code have been set to your system path, you can open the project by typing  **“code .”** (without quotes) in your command prompt.\n\n\n- Select **Yes** to the **Warn** message \"Required assets to build and debug are missing from 'GroupChat'. Add them?\"\n- Select **Restore** to the **Info** message \"There are unresolved dependencies\".\n\nNext, Press **Debug** (F5) to build and run the program. In your browser navigate to [http://localhost:5000/](http://localhost:5000/api/values). You should see a default page.\n\n## Adding our models\n\nA model is an object that represents the data in your application. We’ll need several models for our application. Start by creating the models for our table structure. For this project, we’ll need to create three tables - `Group`, `UserGroup` and `Message`.\n\n### Group model\nIn the Group table, we’ll need the following columns: ID (int) and GroupName (string) where the `ID` is the primary key. We’ll store all groups in this table.\n\nCreate a new file in the `/Models` folder called `Group.cs` and add the following code to it:\n``` C#\n    using System;\n    namespace GroupChat.Models\n    {\n        public class Group\n        {\n            public int ID { get; set; }\n            public string GroupName { get; set; }\n        }\n    }\n```\n### UserGroup model\nIn the UserGroup table, we’ll need the following columns: ID (int), UserName (string) and GroupId (int). We’ll store the User ID and Group ID in this table.\n\nCreate a new file in the `/Models` folder called `UserGroup.cs` and add the following code to it:\n\n``` C#\n    using System;\n    \n    namespace GroupChat.Models\n    {\n        public class UserGroup\n        {\n            public int ID { get; set; }\n            public string UserName { get; set;  }\n            public int GroupId { get; set;  }\n        }\n    }\n```\n\n### Message model\nIn the message table, we’ll need the following columns: ID (int) , AddedBy (string), message  (string) and GroupId (int). Here, we’ll store all messages entered by all user.\n\nCreate a new file in the `/Models` folder called `Message.cs` and add the following code to it:\n\n``` C#\n    using System;\n    \n    namespace GroupChat.Models\n    {\n        public class Message\n        {\n            public int ID { get; set; }\n            public string AddedBy { get; set;  }\n            public string message { get; set;  }\n            public int GroupId { get; set;  }\n        }\n    }\n```\n\n## Creating the database context\n\nThe *database context* is the main class that coordinates [Entity Framework](https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application) functionality for a given data model. We’ll derive from the  `Microsoft.EntityFrameworkCore.DbContext`  to create this class.\n\nCreate a new file called `GroupChatContext.cs` in the `/Models` folder:\n\n``` C#\n    using Microsoft.EntityFrameworkCore;\n    namespace GroupChat.Models\n    {\n        public class GroupChatContext : DbContext\n        {\n            public GroupChatContext(DbContextOptions\u003cGroupChatContext\u003e options)\n                : base(options)\n            {\n            }\n            \n            public DbSet\u003cGroup\u003e Groups { get; set; }\n            public DbSet\u003cMessage\u003e Message { get; set; }\n            public DbSet\u003cUserGroup\u003e UserGroup { get; set; }\n        }\n    }\n```\n\n## Setting up our database and running migrations\n\nNow that we have created our models, we can easily generate a migration file that will contain code to easily create and update our table schema.\n\n### Registering the database context\nFirst, let’s register the database context we have created earlier. We’ll register the database context with the [dependency injection](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection) container. Services (such as the DB context) that are registered with the dependency injection container are available to the controllers. Also, we’ll use Sqlite for our database.\n\nUpdate the contents of the `/Startup.cs`  file with the following code:\n\n``` C#\n    [...]\n    public void ConfigureServices(IServiceCollection services)\n    {\n       [...]\n        services.AddDbContext\u003cGroupChatContext\u003e(options =\u003e\n          options.UseSqlite(Configuration.GetConnectionString(\"DefaultConnection\")));\n       [...]\n    }\n    [...]\n```\n\nYou can see the database context as a database connection and a set of tables, and the Dbset as a representation of the tables themselves. The database context allows us to link our model properties to our database with a connection string (in our case, we are using SQLite)\n\n### Running migration\n\n```\n    $ dotnet ef migrations add GroupChat --context GroupChatContext\n    $ dotnet ef database update --context GroupChatContext\n```\n\nThe first command will create a migration script that will be used for managing our database tables. We’ve also added `--context` to the commands so as to specify the context we want to run. This is because there is another context for Identity which has been created automatically by the template.\n\n\n\u003e 💡 If you got an error while running the command, stop the debugging or the server. \n\n## Implementing our chat interface\n\nWe’ll need an interface where a user can create a group, then add participating users to the group (only users added to a particular group can chat in that group).\n\nWe also need a route that will lead to the chat interface, like http://localhost:5000/chat. To do this we’ll need to create the chat controller and the chat view.\n\n### Creating the chat controller\n\nCreate a new file called `ChatController.cs` in the Controllers folder then add the following code:\n\n``` C#\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using System.Text.Encodings.Web;\n    using System.Threading.Tasks;\n    using Microsoft.AspNetCore.Authentication;\n    using Microsoft.AspNetCore.Authorization;\n    using Microsoft.AspNetCore.Identity;\n    using Microsoft.AspNetCore.Mvc;\n    using GroupChat.Models;\n    namespace GroupChat.Controllers\n    {\n        [Authorize]\n        public class ChatController : Controller\n        {\n            private readonly UserManager\u003cApplicationUser\u003e _userManager;\n            private readonly GroupChatContext _GroupContext;\n            public ChatController(\n              UserManager\u003cApplicationUser\u003e userManager,\n              GroupChatContext context\n              )\n            {\n                _userManager = userManager;\n                _GroupContext = context;\n            }\n            public IActionResult Index()\n            {\n                return View();\n            }\n        }\n    }\n```\nIn the preceding code:\n\n- We have added `Authorize` to make sure that only logged in user can access our chat page.\n- We have also injected `ApplicationUser` and `GroupChatContext` into this class so we can have access to them in all our methods. The `ApplicationUser` is the context from Identity and we have created the `GroupChatContext` so we can have access to their respective tables in this class.\n\n### Adding the chat view file\n\n1. Create a new folder in the View folder called `chat`\n2. In the chat folder you just created, create a new file called `index.cshtml`\n\nNow, update the `index.cshtml` file with the code below:\n\n``` html\n    @{\n        Layout = null;\n    }\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003c!-- Required meta tags --\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003c!-- Bootstrap CSS --\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.3/css/bootstrap.min.css\" integrity=\"sha384-Zug+QiDoJOrZ5t4lssLdxGhVrurbmBWopoEl+M6BdEfwnCJZtKxi1KgxUyJq13dy\" crossorigin=\"anonymous\"\u003e\n        \u003ctitle\u003eDotNet Group Chat\u003c/title\u003e\n        \u003cstyle type=\"text/css\"\u003e\n           .group {\n              padding: 13px;\n              border-radius: 12px;\n              background: rgb(57, 125, 192);\n              margin: 5px 0px;\n              font-weight: bolder;\n              color: black;\n              cursor: pointer;\n           }\n          .chat_body {\n            height: 520px;\n            overflow: scroll;\n          }\n          \n          .less_padding {\n            padding: 2px;\n          }\n          .chat_message {\n              padding: 13px;\n              border-radius: 12px;\n              width: 50%;\n              background: #85C1E9;\n              margin: 6px 4px;\n          }\n          .chat_main {\n            background-color: #957bbe; \n            height: 520; \n            padding: 0px;\n          }\n          .group_main {\n             background-color: #85C1E9;\n          }\n        \u003c/style\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003ch3 class=\"text-center\"\u003eWelcome\u003c/h3\u003e\n            \u003cdiv class=\"container\" style=\"background-color: grey;\"\u003e\n                  \u003cdiv class=\"row\"\u003e\n                    \u003cdiv class=\"col-md-2 less_padding\"\u003e\n                      \u003cdiv class=\"col group_main\"\u003e\n                           \u003cdiv class=\"text-center\"\u003e Groups \u003c/div\u003e\n                           \u003cdiv clsss=\"row\" style=\"height: 500px;overflow: scroll;\" id=\"groups\"\u003e\n                            \u003cinput type=\"hidden\" value=\"\" id=\"currentGroup\"\u003e\n                           \u003c!-- List groups--\u003e\n                            \u003c/div\u003e\n                          \u003cdiv class=\"text-center\"\u003e \n                              \u003cbutton type=\"submit\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#CreateNewGroup\"\u003eAdd Group\u003c/button\u003e\n                          \u003c/div\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-md-10 less_padding\"\u003e\n                      \u003cdiv class=\"col-md-12 chat_main\"\u003e\n                           \u003cdiv class=\"chat_body\"\u003e\n                                  \u003c!-- \u003cdiv class=\"chat_message float-right\"\u003eHello, \u003c/div\u003e --\u003e\n                           \u003c/div\u003e\n                          \u003cdiv class=\"row container\" style=\"margin-left: 3px;\"\u003e\n                            \u003cdiv class=\"col-md-9 col-sm-9 less_padding\"\u003e\n                                \u003ctextarea class=\"form-control\" rows=\"1\" id=\"Message\"\u003e\u003c/textarea\u003e   \n                            \u003c/div\u003e\n                            \u003cdiv class=\"col-md-3 col-sm-3 less_padding\"\u003e\n                                  \u003cbutton type=\"submit\" class=\"btn btn-primary\" style=\" position: absolute;\" id=\"SendMessage\"\u003eSend Message\u003c/button\u003e\n                            \u003c/div\u003e\n                          \u003c/div\u003e\n                      \u003c/div\u003e\n                   \u003c/div\u003e\n               \u003c/div\u003e\n            \u003c/div\u003e\n            \u003c!-- Modal --\u003e\n            \u003cdiv class=\"modal fade\" id=\"CreateNewGroup\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\"\u003e\n            \u003cdiv class=\"modal-dialog\" role=\"document\"\u003e\n                \u003cdiv class=\"modal-content\"\u003e\n                 \u003cdiv class=\"modal-header\"\u003e\n                    \u003ch5 class=\"modal-title\" id=\"exampleModalLongTitle\"\u003eAdd New Group\u003c/h5\u003e\n                    \u003cbutton type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\u003e\n                    \u003cspan aria-hidden=\"true\"\u003e\u0026times;\u003c/span\u003e\n                    \u003c/button\u003e\n                 \u003c/div\u003e\n                \u003cdiv class=\"modal-body\"\u003e\n                    \u003cform id=\"CreateGroupForm\"\u003e\n                        \u003cdiv class=\"form-group\"\u003e\n                            \u003clabel for=\"GroupName\"\u003eGroup Name\u003c/label\u003e\n                            \u003cinput type=\"text\" class=\"form-control\" name=\"GroupName\" id=\"GroupName\" aria-describedby=\"emailHelp\" placeholder=\"Group Name\"\u003e\n                        \u003c/div\u003e\n                        \u003clabel for=\"User\"\u003eAdd Users \u003cbr\u003e\u003c/label\u003e \u003cbr\u003e\n                        \u003cdiv class=\"row\"\u003e\n                             \u003c!-- List users here --\u003e\n                        \u003c/div\u003e\n                    \u003c/form\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"modal-footer\"\u003e\n                    \u003cbutton type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\"\u003eClose\u003c/button\u003e\n                    \u003cbutton type=\"button\" class=\"btn btn-primary\" id=\"CreateNewGroupButton\"\u003eCreate Group\u003c/button\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c!-- Optional JavaScript --\u003e\n        \u003c!-- jQuery first, then Popper.js, then Bootstrap JS --\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.3/js/bootstrap.min.js\" integrity=\"sha384-a5N7Y/aK3qNeh15eJKGWxsqtnX/wWdSZSKp+81YjTmS15nvnvxKHuzaWwXHDli+4\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"~/js/site.js\" asp-append-version=\"true\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\nNotice this at the top of the file:\n```\n    @{\n        Layout = null;\n    }\n```\n\nThis is to tell the rendering engine not to include layouts partials(like header, footer) in this page. Also, we included the Pusher JavaScript library in this page. This will be discussed later.\n\nYou should now have a new route available - `http://localhost:5000/chat`. `/chat` is the Controller’s name and since there is no other URL segment, this request will be mapped to the `index` method of the `ChatController.cs` method. Also in the index method, we have `return View()`. This will render the view corresponding to the ChatController. It will look for the `index.cshtml` file in the `/view/chat` folder. \n\nHeading to http://locahost:5000/chat will redirect you to a login page. Register an account and log in then visit the page again. You should have an interface like below:\n\n![Group Chat interface](//images.contentful.com/1es3ne0caaid/4VvP2c76r6yUC4ggMiqEku/5ee8e586f9e01d9cf4551584a5af8fa5/group-chat-net-interface.png)\n\nThe left sidebar will be used to display all groups a user is subscribed to and the right side for all conversation messages in the groups. When a user clicks on a group, the corresponding message in that group will be displayed on the right. There is also a create group button. When a user clicks this button, a modal is displayed and the user can enter details of their new group. The modal will list all chat users. The group creator can select who they want to add to the group.\n\nNow let’s get the group a user is subscribed to. After this, we’ll create a `ViewModel` to show the format of the output we want.\nAdd the following code to the `Index` method in the `ChatController.cs` class:\n``` C#\n    [...]\n    var groups =  _GroupContext.UserGroup\n                        .Where( gp =\u003e gp.UserName == _userManager.GetUserName(User) )\n                        .Join( _GroupContext.Groups, ug =\u003e ug.GroupId, g =\u003eg.ID, (ug,g) =\u003e\n                                new UserGroupViewModel{\n                                    UserName = ug.UserName, \n                                    GroupId = g.ID,\n                                    GroupName = g.GroupName})\n                        .ToList();\n                        \n    ViewData[\"UserGroups\"] = groups;\n    \n    // get all users      \n    ViewData[\"Users\"] = _userManager.Users;\n    [...]\n```\nHere we made use of LINQ to make a query to get all groups in the UserGroup table that the current user is subscribed to. The raw SQL query is as follows:\n``` SQL\n    SELECT \"gp\".\"UserName\", \"g\".\"ID\" AS \"GroupId\", \"g\".\"GroupName\"\n                           FROM \"UserGroup\" AS \"gp\"\n                           INNER JOIN \"Groups\" AS \"g\" ON \"gp\".\"GroupId\" = \"g\".\"ID\"\n                           WHERE \"gp\".\"UserName\" = @__GetUserName_0\n```\nIn the code above we used `UserGroupViewModel`  to describe how the content of the query result should look, but we have not created the file. Create a new file - `UserGroupViewModel.cs`  in the `Models` folder and add a view model:\n\n``` C#\n    using System;\n    using GroupChat.Models;\n    namespace GroupChat.Models\n    {\n        public class UserGroupViewModel\n        {\n            public string UserName { get; set; }\n            public int GroupId { get; set; }\n            public string GroupName { get; set;  }\n        }\n    }\n```\n\n\u003e 💡 A `view model` represents the data that you want to display on your view/page, or the input values you require for a request whether it be used for static text or for input values (like textboxes and dropdown lists) that can be added to the database. It is a model for the view.\n\n\n### Display data to the chat view\n\nNow that we have the user’s groups and all the users, let’s display them on the view. \nAdd this to the header of `Views/chat/index.cshtml`:\n``` html\n    @using Microsoft.AspNetCore.Identity\n    @using GroupChat.Models\n    \n    @inject UserManager\u003cApplicationUser\u003e UserManager\n```\nUpdate the html div that has an id=”groups” in `Views/chat/index.cshtml` as below:\n``` html\n    [...]\n    \u003cdiv clsss=\"row\" style=\"height: 500px;overflow: scroll;\" id=\"groups\"\u003e \n        @foreach (var group in (dynamic)ViewData[\"UserGroups\"]) {\n            \u003cdiv class=\"group\" data-group_id=\"@group.GroupId\"\u003e @group.GroupName \u003c/div\u003e \n         }\n    \u003c/div\u003e\n    [...]\n```\nNotice that we are storing `data-group_id` for every group rendered. This is the Group ID of the `Group` table which is unique so we can keep track of all groups easily.\n\nLet us also display the users to the modal form. Add the following code below this comment `\u003c!--` `List users here` `--\u003e`  in `Views/chat/index.cshtml`:\n``` html\n    [...]\n    \u003c!-- List users here --\u003e\n    @foreach (var user in (dynamic)ViewData[\"Users\"]) {\n      \u003cdiv class=\"col-4\"\u003e \n        \u003cdiv class=\"form-check\"\u003e\n           \u003cinput type=\"checkbox\" value=\"@user.UserName\" name=\"UserName[]\"\u003e\n           \u003clabel class=\"form-check-label\" for=\"Users\"\u003e@user.UserName\u003c/label\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e \n    }\n    [...]\n```\n\n## Adding groups\n\nBefore a user can start chatting with their friends, they need to create a group and add users to it.\nNow, let us add a view model that will define the structure of our form input when creating a new group. Create a new file called `NewGroupViewModel.cs` in the `Models` folder then add the following code to it:\n\n``` C#\n    using System;\n    using System.Collections.Generic;\n    namespace GroupChat.Models\n    {\n        public class NewGroupViewModel\n        {\n            public string GroupName { get; set; }\n            public List\u003cstring\u003e UserNames { get; set; }\n        }\n    }\n```\nNext, create a new file called `GroupController.cs` in the Controllers folder. Then add the following code to `GroupController.cs`:\n\n   ``` C# \n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using Microsoft.AspNetCore.Mvc;\n    using GroupChat.Models;\n    using System.Diagnostics;\n    using Microsoft.AspNetCore.Identity;\n    using Microsoft.AspNetCore.Authorization;\n    namespace GroupChat.Controllers\n    {\n        [Route(\"api/[controller]\")]\n        [Authorize]\n        public class GroupController : Controller\n        {\n            private readonly GroupChatContext _context;\n            private readonly UserManager\u003cApplicationUser\u003e _userManager;\n            \n            public GroupController(GroupChatContext context, UserManager\u003cApplicationUser\u003e userManager)\n            {\n                _context = context;\n                _userManager = userManager;\n            }\n            \n            [HttpGet]\n            public IEnumerable\u003cUserGroupViewModel\u003e GetAll()\n            {\n    \n                var groups = _context.UserGroup\n                              .Where(gp =\u003e gp.UserName == _userManager.GetUserName(User))\n                              .Join(_context.Groups, ug =\u003e ug.GroupId, g =\u003eg.ID, (ug,g) =\u003e\n                                            new UserGroupViewModel(){\n                                                UserName = ug.UserName, \n                                                GroupId = g.ID,\n                                                GroupName = g.GroupName})\n                               .ToList();\n                         \n                return groups;\n            }\n            \n            [HttpPost]\n            public IActionResult Create([FromBody] NewGroupViewModel group)\n            {\n                if (group == null || group.GroupName == \"\")\n                {\n                    return new ObjectResult(\n                        new { status = \"error\", message = \"incomplete request\" }\n                    );\n                }\n                if( (_context.Groups.Any(gp =\u003e gp.GroupName == group.GroupName)) == true ){\n                    return new ObjectResult(\n                        new { status = \"error\", message = \"group name already exist\" }\n                    );\n                }\n                \n                Group newGroup = new Group{ GroupName = group.GroupName };\n                // Insert this new group to the database...\n                _context.Groups.Add(newGroup);\n                _context.SaveChanges();\n                //Insert into the user group table, group_id and user_id in the user_groups table...\n                foreach( string UserName in group.UserNames)\n                {\n                    _context.UserGroup.Add( \n                        new UserGroup{ UserName = UserName, GroupId = newGroup.ID } \n                    );\n                    _context.SaveChanges();\n                }\n                return new ObjectResult(new { status = \"success\", data = newGroup });\n            }\n        }\n    }\n```\nIn the preceding code:\n\n1. The constructor uses [Dependency Injection](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection) to inject the database context (`GroupChatContext` and `ApplicationUser`) into the controller. We have injected `GroupChatContext` and `ApplicationUser` context into the class so we can have access to the contexts.\n2. The `GetAll` method is a Get method request that will be used to get all groups a particular user is subscribed to. \n3. The `Create` method is a POST method request that will be used to create a new group.\n4. Using  `_context.Groups.Add(newGroup);`  `_context.SaveChanges();`, we added a new group to the database.\n5. Finally, with `return` `new` `ObjectResult`(`new` `{ status = \"`success`\", data = newGroup });`, we returned a JSON that indicates the request was successful.\n\nCreate a group by making an AJAX request to /api/group using a POST method. Add the following JavaScript code to `/wwwroot/js/site.js`:\n``` javascript\n    $(\"#CreateNewGroupButton\").click(function(){\n        let UserNames = $(\"input[name='UserName[]']:checked\")\n            .map(function() {\n                return $(this).val();\n            }).get();\n    \n        let data = {\n            GroupName: $(\"#GroupName\").val(),\n            UserNames: UserNames\n        };\n            \n        $.ajax({\n            type: \"POST\",\n            url: \"/api/group\",\n            data: JSON.stringify(data),\n            success: (data) =\u003e {\n                $('#CreateNewGroup').modal('hide');\n            },\n            dataType: 'json',\n            contentType:'application/json'\n        });\n        \n    });\n```\n\n## Displaying messages for an active group\n\nWhen a user clicks on a particular group, we’ll fetch all messages in that group and display them on the page. To achieve this we’ll make use of JQuery and Ajax to make a request to an endpoint which we’ll expose later, by passing the group_id along with the request and then display the resulting data on the page.\n\n### Create an endpoint for displaying messages for a particular group\nCreate a new file in the Controllers folder called `MessageController.cs` Then add the following code to `MessageController.cs` file:\n\n``` C#\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using Microsoft.AspNetCore.Mvc;\n    using GroupChat.Models;\n    using Microsoft.AspNetCore.Identity;\n    \n    namespace GroupChat.Controllers\n    {\n        [Route(\"api/[controller]\")]\n        public class MessageController : Controller\n        {\n            private readonly GroupChatContext _context;\n            private readonly UserManager\u003cApplicationUser\u003e _userManager;\n            public MessageController(GroupChatContext context, UserManager\u003cApplicationUser\u003e userManager)\n            {\n                _context = context;\n                _userManager = userManager;\n            }\n    \n            [HttpGet(\"{group_id}\")]\n            public IEnumerable\u003cMessage\u003e GetById(int group_id)\n            {\n                return _context.Message.Where(gb =\u003e gb.GroupId == group_id);\n            }\n        }\n    }\n```\nIn the code above, `[Route(\"api/[controller]\")]` added at the top of the file will create a base route - `/api`.\n\nAlso we added `[HttpGet(\"{group_id}\")]` to `GetById` method so we have a route - `/api/message/{group_id}`. The route - `/api/message/{group_id}` will return all messages for a particular group.\n\n### Adding Ajax Request to Get the Messages and Display It\n\nWhen a user clicks on a group, we’ll make a request to get all messages in that group.\n Add the following code to `wwwroot/js/site.js`:\n``` javascript\n    // When a user clicks on a group, Load messages for that particular group.\n    $(\"#groups\").on(\"click\", \".group\", function(){\n        let group_id = $(this).attr(\"data-group_id\");\n        \n        $('.group').css({\"border-style\": \"none\", cursor:\"pointer\"});\n        $(this).css({\"border-style\": \"inset\", cursor:\"default\"});\n        \n        $(\"#currentGroup\").val(group_id); // update the current group_id to html file...\n        currentGroupId =  group_id;\n        \n        // get all messages for the group and populate it...\n        $.get( \"/api/message/\"+group_id, function( data ) {\n            let message = \"\";\n            \n        data.forEach(function(data) {\n            let position = (data.addedBy == $(\"#UserName\").val()) ? \" float-right\" : \"\";\n            \n            message += `\u003cdiv class=\"row chat_message` +position+ `\"\u003e\n                             \u003cb\u003e` +data.addedBy+ `: \u003c/b\u003e` +data.message+ \n                       `\u003c/div\u003e`;\n        });\n            \n            $(\".chat_body\").html(message);\n        });\n     \n    });\n```\n### Adding a view model\n\nThis view will help us define the nature of the form inputs we’ll use to make requests when we are adding a new message. Create a new file in the  `Models` folder called `MessageViewModel.cs`:\n``` C#\n    using System;\n    \n    namespace GroupChat.Models\n    {\n        public class MessageViewModel\n        {\n            public int ID { get; set; }\n            public string AddedBy { get; set;  }\n            public string message { get; set;  }\n            public int GroupId { get; set;  }\n            public string SocketId { get; set;  }\n        }\n    }\n```\nWe’ll discuss what we’ll use the `SocketId` for later in the article.\n\n### Add method for adding message\nHere, we’ll add a new method for adding messages to the database.\nUpdate `MessageController.cs` with the following code:\n``` C#\n    [...]\n    [HttpPost]\n    public IActionResult Create([FromBody] MessageViewModel message)\n    {\n        Message new_message = new Message { AddedBy = _userManager.GetUserName(User), message = message.message, GroupId = message.GroupId };\n        \n        _context.Message.Add(new_message);\n        _context.SaveChanges();\n    \n        return new ObjectResult(new { status = \"success\", data = new_message });\n    }\n    [...]\n```\nWe can now send messages and store them in our database. However, other users do not get the messages in realtime. This is where Pusher comes in.\n\n### Add new message via Ajax\nWhen a user clicks on the send message button, we’ll make an AJAX call to the method we added above with the message payload so it gets saved in the database.\n\nAdd the following code to `wwwroot/js/site.js`:\n``` javascript\n    $(\"#SendMessage\").click(function() {\n        $.ajax({\n            type: \"POST\",\n            url: \"/api/message\",\n            data: JSON.stringify({\n                AddedBy: $(\"#UserName\").val(),\n                GroupId: $(\"#currentGroup\").val(),\n                message: $(\"#Message\").val(),\n                socketId: pusher.connection.socket_id\n            }),\n            success: (data) =\u003e {\n                $(\".chat_body\").append(`\u003cdiv class=\"row chat_message float-right\"\u003e\u003cb\u003e` \n                        +data.data.addedBy+ `: \u003c/b\u003e` +$(\"#Message\").val()+ `\u003c/div\u003e`\n                );\n                \n                $(\"#Message\").val('');\n            },\n            dataType: 'json',\n            contentType: 'application/json'\n        });\n    });\n``` \n\n## Making our messaging realtime\n\nUsers can now send messages and create groups, and details are saved in the database. However, other users cannot see the messages or groups in realtime.\n\nWe will make use of [Private channel](https://pusher.com/docs/client_api_guide/client_private_channels) in Pusher which will restrict unauthenticated users from subscribing to channels they don’t have access to. \n\nBasically, we will subscribe to a channel - `group_channel` and trigger an event - `new_group` when a new group is created, so when an event - `new_group` is triggered, we update the group tab for all users (we can use [Public channel](https://pusher.com/docs/client_api_guide/client_public_channels) for this). \n\nWe will also subscribe to other channels for messaging - `private-1`, `private-2` etc but this will be a private channel because users who are not not subscribe to a particular group should not subscribe to it. \n\n### Add Pusher .NET package\n\nFrom your command line, make sure you are in the root folder of your project then type:\n\n```\n    $ dotnet add package PusherServer\n```\n\n### Adding authentication for private channel\n\nWhen a user wants to subscribe to a private channel, Pusher will authenticate the user to make sure they have the right to subscribe to it by making a request to our authentication logic.\n\nWe will create a route - `pusher/auth` which Pusher will use for authentication.\n\nLets create an endpoint that Pusher will make a request to when it wants to authenticate a user. Create the route by adding the following code to `Startup.cs`:\n``` C#\n    app.UseMvc(routes =\u003e\n    {\n       [...]\n       routes.MapRoute(\n            name: \"pusher_auth\",\n            template: \"pusher/auth\",\n            defaults: new { controller = \"Auth\", action = \"ChannelAuth\" });\n      [...]\n    });\n```\nNext, create a new file called `AuthController.cs` in the `Controller` folder and add the following code to it:\n``` C#\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using Microsoft.AspNetCore.Mvc;\n    using GChat.Models;\n    using Microsoft.AspNetCore.Identity;\n    using PusherServer;\n    namespace GroupChat.Controllers\n    {\n        public class AuthController : Controller\n        {\n            private readonly GroupChatContext _context;\n            private readonly UserManager\u003cApplicationUser\u003e _userManager;\n            \n            public AuthController( GroupChatContext context, UserManager\u003cApplicationUser\u003e userManager){\n                 _context = context;\n                 _userManager = userManager;\n            }\n            \n            [HttpPost]\n            public IActionResult ChannelAuth(string channel_name, string socket_id)\n            {\n                int group_id;\n                if(!User.Identity.IsAuthenticated) {\n                    return new ContentResult { Content = \"Access forbidden\", ContentType = \"application/json\" };\n                }\n                \n                try\n                {\n                     group_id = Int32.Parse(channel_name.Replace(\"private-\", \"\"));\n                }\n                catch (FormatException e)\n                {\n                    return Json( new  { Content = e.Message } );\n                }\n                \n                var IsInChannel = _context.UserGroup\n                                          .Where(gb =\u003e gb.GroupId == group_id \n                                                \u0026\u0026 gb.UserName == _userManager.GetUserName(User))\n                                          .Count();\n                                           \n                if( IsInChannel \u003e 0){\n                    var options = new PusherOptions\n                        {\n                            Cluster = \"PUSHER_APP_CLUSTER\",\n                            Encrypted = true\n                        };\n                    var pusher = new Pusher(\n                        \"PUSHER_APP_ID\",\n                        \"PUSHER_APP_KEY\",\n                        \"PUSHER_APP_SECRT\",\n                        options\n                    );\n                    \n                    var auth = pusher.Authenticate(channel_name, socket_id).ToJson();\n                    return new ContentResult { Content = auth, ContentType = \"application/json\" };\n                }\n               return new ContentResult { Content = \"Access forbidden\", ContentType = \"application/json\" };\n            }\n        }\n    }\n```\nPusher will send along the Channel name and Socket Id of the user it wants to authenticate, here we extracted the group Id from the channel name. Then we query our database to check if that user is in that group. To make a private channel in Pusher, you just need to add `Private-` to the channel name you intend to use. In our case, we are using `private-1`, `private-2` etc as the channel name.\n\n### Triggering an Event When a Group Is Created\n\nWe’ll trigger an event to Pusher when a new group is created so others will see the newly created group.\n\nAdd the following code to the `Create` method in `GroupController.cs` before `return new ObjectResult(new { status = success, data = newGroup });` statement:\n``` C#\n    var options = new PusherOptions\n    {\n        Cluster = \"PUSHER_APP_CLUSTER\",\n        Encrypted = true\n    };\n    var pusher = new Pusher(\n        \"PUSHER_APP_ID\",\n        \"PUSHER_APP_KEY\",\n        \"PUSHER_APP_SECRET\",\n    options);\n    var result = await pusher.TriggerAsync(\n        \"group_chat\", //channel name\n        \"new_group\", // event name\n    new { newGroup } );\n```\nMake sure you use your own Pusher app details above.\n\nAlso, add this to the top of the file:\n\n    using PusherServer;\n\n### Triggering an event when a new message is received\n\nTo trigger an event when a new message is added, add the following code to `MessageController.cs`:\n``` C#\n    var options = new PusherOptions\n    {\n        Cluster = \"PUSHER_APP_CLUSTER\",\n        Encrypted = true\n    };\n    var pusher = new Pusher(\n        \"PUSHER_APP_ID\",\n        \"PUSHER_APP_KEY\",\n        \"PUSHER_APP_SECRET\",\n        options\n    );\n    var result = await pusher.TriggerAsync(\n        \"private-\" + message.GroupId,\n        \"new_message\",\n    new { new_message },\n    new TriggerOptions() { SocketId = message.SocketId });      \n```\nMake sure you use your own Pusher app details above.\n\nWe have added `new TriggerOptions() { SocketId = message.SocketId }`, so as not to broadcast to the user that triggered the event. \n\nAlso, add this to the top of `GroupController.cs`:\n```\n    using PusherServer;\n```\n\n### Display the new group when a user creates a group\n\nWhen a new group is created, we will reload the groups for every user. Add the following function to `wwwroot/js/site.js`:\n``` javascript\n    function reloadGroup(){\n        $.get(\"/api/group\", function( data ) {\n            let groups = \"\";\n                    \n           data.forEach(function(group){\n               groups += `\u003cdiv class=\"group\" data-group_id=\"` \n                               +group.groupId+ `\"\u003e` +group.groupName+  \n                          `\u003c/div\u003e`;\n           });\n           \n           $(\"#groups\").html(groups);\n        });\n    }\n```\n### Listen for new group\n\nWhen a new group is created, we will call the `reloadGroup()` function. To listen for events, we need to initialize Pusher’s Javascript library. Add the following code to `/wwwroot/js/site.js`:\n\n``` javascript\n    let currentGroupId = null;\n    \n    var pusher = new Pusher('PUSHER_APP_KEY', {\n                 cluster: 'PUSHER_APP_CLUSTER',\n                 encrypted: true\n    });\n    \n    var channel = pusher.subscribe('group_chat');\n    channel.bind('new_group', function(data) {\n       reloadGroup();\n    });\n```\nMake sure to add this to the top part of the code because some other code in the file will be using it.\n\nIn the preceding code:\n\n1. We initiated the Pusher JavaScript library using our Pusher key.\n2. Then we suscribed to a channel - `group_chat`. \n3. Then we bound that channel to an event - `new_group`. So when a new group is created, we call the function `reloadGroup()`.\n\n### Listen for new message\n\nWhen a user sends a message, we need to show it to other users in the group. To do this, we will subscribe to a channel and bind that channel to an event.\nAdd this to the `$(\"#groups\").on(\"click\", \".group\", function()…` event in `/wwwroot/js/site.js`:\n``` javascript\n    if( !pusher.channel('private-'+group_id) ){ // check if the user have subscribed to the channel before.\n        let group_channel = pusher.subscribe('private-'+group_id);\n         \n        group_channel.bind('new_message', function(data) { \n         \n          if (currentGroupId == data.new_message.GroupId) {\n              $(\".chat_body\").append(`\u003cdiv class=\"row chat_message\"\u003e\u003cb\u003e` \n                  +data.new_message.AddedBy+ `: \u003c/b\u003e` +data.new_message.message+ ` \u003c/div\u003e`\n              );\n          ']}\n        \n        });  \n    }           \n```\n\nSo it should now look like this:\n``` javascript\n    // When a user clicks on a group, Load messages for that particular group.\n    $(\"#groups\").on(\"click\", \".group\", function(){\n        let group_id = $(this).attr(\"data-group_id\");\n        \n        $('.group').css({\"border-style\": \"none\", cursor:\"pointer\"});\n        $(this).css({\"border-style\": \"inset\", cursor:\"default\"});\n        \n        $(\"#currentGroup\").val(group_id); // update the current group_id to a html form...\n        currentGroupId =  group_id;\n        \n        // get all messages for the group and populate it...\n        $.get( \"/api/message/\"+group_id, function( data ) {\n            let message = \"\";\n            \n            data.forEach(function(data){\n                    let position = ( data.addedBy == $(\"#UserName\").val() ) ? \" float-right\" : \"\";\n                    message += `\u003cdiv class=\"row chat_message` + position +`\"\u003e\u003cb\u003e`+ data.addedBy +`: \u003c/b\u003e`+ data.message +` \u003c/div\u003e`;\n            });\n            \n            $(\".chat_body\").html(message);\n        });\n        if( !pusher.channel('private-'+group_id) ){ // check the user have subscribed to the channel before.\n            let group_channel = pusher.subscribe('private-'+group_id);\n         \n            group_channel.bind('new_message', function(data) { \n                 if( currentGroupId == data.new_message.GroupId){\n         \n                      $(\".chat_body\").append(`\u003cdiv class=\"row chat_message\"\u003e\u003cb\u003e`+ data.new_message.AddedBy +`: \u003c/b\u003e`+ data.new_message.message +` \u003c/div\u003e`);\n                 }\n              });  \n        }\n    });\n```\n## Conclusion\n\nSo far, we have seen how to create a group chat application in ASP.NET Core MVC by leveraging Pusher as a technology for adding realtime functionality.  You can find the complete code on [Github](https://github.com/dongido001/Dotnet_GroupChat_Using_Pusher).","metaTitle":"Build a group chat app using .NET Core","metaDescription":"Tutorial showing how to build a group chat app using .NET, C#, jQuery and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Qx8I5EmhOGu4eIAyAK2ie","type":"Entry","createdAt":"2018-03-05T16:13:45.181Z","updatedAt":"2018-03-05T16:13:45.181Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build read receipts using Kotlin","url":"read-receipts-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/Message-Delivery-Status-Feature-Using-Kotlin","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}}],"reviewDate":"2018-03-05","description":"Discover how to build read receipts and integrate it in your Kotlin chat app.","prerequisite":"A basic understanding of Kotlin and Node.js is needed to follow this tutorial.","content":"If you have ever used messaging services like iMessage, WhatsApp or Messenger you’ll notice that when you send a message, you get a ‘Delivered’ notice when the message is delivered. This helps improve engagement because knowing when the message hits the users device is just good information to have.\n\nIn this article, we will consider how to build a read receipts using the Kotlin and Pusher. We will be building a simple messaging application to demonstrate this feature.\n\nHere is a screen recording of the application we will be building in action:\n![read-receipts-kotlin-demo](//images.contentful.com/1es3ne0caaid/1JJHhEZQ28oGaYwSS6Iogi/763b2c65f2a2a1f95ed77103512b0af7/read-receipts-kotlin-demo.gif)\n\n# Prerequisites\n- Knowledge of the Kotlin programming language. \n- [Android Studio](https://developer.android.com/studio/archive.html) installed locally (version 3.0.1 or newer is recommended).\n- [Node.js and NPM](https://docs.npmjs.com/getting-started/installing-node) installed on your machine.\n- Basic knowledge of JavaScript.\n- A Pusher application. Create one [here](https://pusher.com).\n\nWhen you have all the requirements you can proceed with the tutorial.\n\n# Setting up a Node.js Backend\n\nFor our application, we need a server to trigger the messages and delivery status to the Pusher channel and events we subscribe to. For the backend, we will use the Express Node.js framework.\n\nCreate a new folder for your project, we will name ours **message-delivery-backend**. Open the empty folder, create a `package.json` file and paste this:\n\n```\n    {\n      \"name\": \"realtime-status-update\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\"\n      },\n      \"keywords\": [],\n      \"author\": \"\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.2\",\n        \"express\": \"^4.16.2\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nThis file contains dependencies needed by our server and some other key details for the server. \n\nNext, let’s create the `index.js` file:\n\n```\n    // Load packages\n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const app = express()\n    const Pusher = require('pusher');\n    \n    // Middleware\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // Temp Variables\n    var userId = 0;\n    var messageId = 0;\n    \n    // Pusher instance\n    var pusher = new Pusher({\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    \n    // POST: /message\n    app.post('/message', (req, res) =\u003e {\n        messageId++;\n        \n        pusher.trigger('my-channel', 'new-message', {\n            \"id\": messageId,\n            \"message\": req.query.msg,\n            \"sender\": req.query.sender,\n        }); \n    \n        res.json({id: messageId, sender: req.query.sender, message: req.query.msg})\n    })\n    \n    // POST: /delivered\n    app.post('/delivered', (req, res) =\u003e {\n        pusher.trigger('my-channel', 'delivery-status', {\n            \"id\": req.query.messageId,\n            \"sender\": req.query.sender,\n        }); \n        \n        res.json({success: 200})\n    })\n    \n    // POST: /auth\n    app.post('/auth', (req, res) =\u003e {\n        userId++;\n        res.json({id: \"userId\" + userId})\n    })\n    \n    // GET: /\n    app.get('/', (req, res, next) =\u003e res.json(\"Working!!!\"))\n    \n    // Serve application\n    app.listen(9000, _ =\u003e console.log('Running application...'))\n```\n\nIn the code above, we have the `messageId` variable to giver every message a unique ID and the `userId` variable to give every user a unique id. This will help us clearly distinguish messages and users so as to know when and where to place the delivery status tags under each message.\n\nYou are expected to add the keys from your dashboard into the above code replacing the `PUSHER_APP_*` values. \n\nOpen your terminal, and `cd` to the root directory of your project. Run the commands below to install the NPM packages and start our Node.js server:\n\n```\n    $ npm install\n    $ node index.js\n```\n\nWith this, our server is up and running on port **9000**.\n\n# Setting up the Android client\n## Creating a Project\n\nOpen Android studio, create a new project and fill in your application name and package name. It is recommended that your minimum SDK should not be less than API 14. Then, select an ‘Empty Activity’, name it `LoginActivity` and click finish.\n\n## Setting up Retrofit\n\n[Retrofit](https://github.com/square/retrofit) is a type-safe HTTP client that will enable us make requests to our node server. The first step in making this happen is adding the Retrofit dependency. In your app module `build.gradle` file, add the following to the dependencies list:\n\n```\n    implementation 'com.squareup.retrofit2:retrofit:2.3.0'\n    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'\n```\n\nSync the gradle files after adding the dependencies. Thereafter, we create an interface that provides the endpoints we will access during this demo. Create a new Kotlin class, name it `ApiService.kt` and paste this:\n\n```\n    import retrofit2.Call\n    import retrofit2.http.POST\n    import retrofit2.http.Query\n    \n    interface ApiService {\n    \n        @POST(\"/message\")\n        fun sendMessage(@Query(\"sender\") sender:String, @Query(\"msg\") message:String): Call\u003cString\u003e\n        \n        @POST(\"/delivered\")\n        fun delivered(@Query(\"sender\") sender:String, @Query(\"messageId\") messageId:String): Call\u003cString\u003e\n    \n        @POST(\"/auth\")\n        fun login(): Call\u003cString\u003e\n    }\n```\n\nIn the code above, we have interfaced our three endpoints. The first, `/message`, is where we will send the message to, `/delivered` where we will tell the server that a message with a particular `id` has delivered, and finally, `/auth` for a make-believe user login.\n\nNext, create a class that that will provide a Retrofit object to enable us make requests. Create a new Kotlin class named `RetrofitClient.kt`:\n\n```\n    import retrofit2.Retrofit\n    import okhttp3.OkHttpClient\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    \n    class RetrofitClient {\n    \n        companion object {\n            fun getRetrofitClient(): ApiService {\n                val httpClient = OkHttpClient.Builder()\n                val builder = Retrofit.Builder()\n                        .baseUrl(\"http://10.0.2.2:9000/\")\n                        .addConverterFactory(ScalarsConverterFactory.create())\n    \n                val retrofit = builder\n                        .client(httpClient.build())\n                        .build()\n                return retrofit.create(ApiService::class.java)\n            }\n        }\n    }  \n```\n\n\u003e We are using the `10.0.2.2` instead of `127.0.0.1` used for localhost because this is how the Android emulator recognizes it. Using `127.0.0.1` will not work.\n\nThat’s all for setting up the Retrofit client. Let’s move on to setting up Pusher.\n\n## Setting up Pusher\n\nPusher provides the realtime functionalities we need to know when a message has been delivered to another user. To use Pusher, we need to add the dependency in our app-module `build.gradle` file:\n\n```\n    implementation 'com.pusher:pusher-java-client:1.5.0'\n```\n\nSync the gradle files to make the library available for use. That’s all.\n\n\n## Designing Our Layouts\n\nOur app will have two screens. We already have the `LoginActivity` created. We need to create the second activity and name it `ChatActivity`. Our `LoginActivity` will have just one button to log the user in and its layout file `activity_login.xml` will look have this:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_margin=\"16dp\"\n        tools:context=\"com.example.android.messagedeliverystatus.LoginActivity\"\u003e\n        \u003cButton\n            android:layout_gravity=\"center\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/login\"\n            android:text=\"Anonymous Login\" /\u003e\n    \u003c/LinearLayout\u003e\n```\n\nThe `activity_chat.xml` will contain a `RecyclerView` and a `FloatingActionButton`. For these views to be available, you have to add the design support library in the `build.gradle` file:\n\n```\n    implementation 'com.android.support:design:26.1.0'\n```\n\nSync your gradle file to keep the project up to date. Next, paste this code in the `activity_chat.xml` file:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_margin=\"16dp\"\u003e\n    \n        \u003candroid.support.v7.widget.RecyclerView\n            android:layout_width=\"match_parent\"\n            android:id=\"@+id/recyclerView\"\n            android:layout_height=\"match_parent\"/\u003e\n    \n        \u003candroid.support.design.widget.FloatingActionButton\n            android:id=\"@+id/fab\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_margin=\"16dp\"\n            android:layout_alignParentBottom=\"true\"\n            android:layout_alignParentRight=\"true\"\n            app:srcCompat=\"@android:drawable/ic_input_add\"\n            android:layout_alignParentEnd=\"true\" /\u003e\n    \u003c/RelativeLayout\u003e\n```\n\nThe recycler view will contain the chat messages while the `FloatingActionButton` will open a dialog to help us add a new message. There are other things that go with a recycler view: a custom layout of how a single row looks like, an adapter that handles items on the list and sometimes a custom model class. \n\nThe model class mimics the data that each item in the list will have. So, we have to create these three things. Create a new layout named `custom_chat_row.xml` and paste this:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:orientation=\"vertical\"\n        android:layout_margin=\"16dp\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\u003e\n        \u003cTextView\n            android:textAppearance=\"@style/Base.TextAppearance.AppCompat.Medium\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            tools:text=\"Neo Ighodaro\"\n            android:id=\"@+id/message\" /\u003e\n        \u003cTextView\n            android:layout_below=\"@+id/message\"\n            android:textAppearance=\"@style/Base.TextAppearance.AppCompat.Small\"\n            tools:text=\"sent\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/delivery_status\" /\u003e\n    \u003c/RelativeLayout\u003e\n```\n\nEach row will be styled according to our layout above. There are two `TextView`s, one to show the main message and the other to show the delivery status which can either be send or delivered. Next, create a new file named `MessageAdapter.kt` and paste this:\n\n```\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.RelativeLayout\n    import android.widget.TextView\n    import java.util.*\n    \n    class MessageAdapter : RecyclerView.Adapter\u003cMessageAdapter.ViewHolder\u003e() {\n    \n        private var messages = ArrayList\u003cMessageModel\u003e()\n        \n        fun addMessage(message: MessageModel){\n            messages.add(message)\n            notifyDataSetChanged()\n        }\n    \n        override fun getItemCount(): Int {\n            return messages.size\n        }\n    \n        override fun onCreateViewHolder(parent: ViewGroup?, viewType: Int): ViewHolder {\n            return ViewHolder(\n                LayoutInflater.from(parent!!.context)\n                              .inflate(R.layout.custom_chat_row,parent, false)\n            )\n        }\n    \n        override fun onBindViewHolder(holder: ViewHolder?, position: Int) {\n            val params = holder!!.message.layoutParams as RelativeLayout.LayoutParams\n            val params2 = holder!!.deliveryStatus.layoutParams as RelativeLayout.LayoutParams\n    \n            if (messages[position].sender == App.currentUser){\n                params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT)\n                params2.addRule(RelativeLayout.ALIGN_PARENT_RIGHT)\n            }\n    \n            holder.message.text = messages[position].message\n            holder.deliveryStatus.text = messages[position].status\n        }\n    \n        inner class ViewHolder(itemView: View?): RecyclerView.ViewHolder(itemView) {\n            var message: TextView = itemView!!.findViewById(R.id.message)\n            var deliveryStatus: TextView = itemView!!.findViewById(R.id.delivery_status)\n        }\n    \n        fun updateData(id: String) {\n            for(item in messages) {\n                if (item.messageId == id) {\n                    item.status = \"delivered\"\n                    notifyDataSetChanged()\n                }\n            }\n        }\n    }\n```\n\nThe adapter handles the display of items. We used the overridden functions to structure how many items will be on the list, how each row should be styled, and how o get data from each row. We also created our own functions to add a new message to the list and update an item on the list. \n\nNext, create a new class named `MessageModel.kt` and paste this:\n\n```\n    data class MessageModel(var sender:String,\n                            var messageId:String,\n                            var message:String,\n                            var status:String)\n```\n\nThis is known as a data class. A data class is used to hold data. This replaces the usual POJO (Plain Old Java Object) classes we would have created if we were using Java. We will be using a dialog to send messages in this demo, so we need to create a layout for it. \n\nCreate a new layout file named `dialog_message.xml` and past this:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n        android:padding=\"16dp\"\n        android:layout_height=\"match_parent\"\u003e\n        \u003cEditText\n            android:id=\"@+id/edit_message\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\" /\u003e\n        \u003cButton\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/send\"\n            android:text=\"Send message\"/\u003e\n    \u003c/LinearLayout\u003e\n```\n\nThe layout contains an `EditText` for text input and a `Button` to send the message and they are wrapped in a vertical `LinearLayout`.\n\n\n## Adding logic to our application\n\nWe will create a class that extends `Application`. Create a new class named `App.kt` and paste this:\n\n```\n    import android.app.Application\n    \n    class App: Application() {\n        companion object {\n            lateinit var currentUser:String\n        }\n    }\n```\n\nThis class will be used to store our unique user ID globally so that it can easily be accessed by all other classes.\n\nNext, open the `LoginActivity.kt` class and paste this:\n\n```\n    import android.app.Activity\n    import android.content.Intent\n    import android.os.Bundle\n    import kotlinx.android.synthetic.main.activity_login.*\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class LoginActivity : Activity() {\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            \n            setContentView(R.layout.activity_login)\n    \n            login.setOnClickListener {\n                RetrofitClient.getRetrofitClient().login().enqueue(object: Callback\u003cString\u003e {\n                    override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n                        // Do something on failure\n                    }\n                    \n                    override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                        val jsonObject = JSONObject(response!!.body().toString())\n                        val currentUserId = jsonObject[\"id\"].toString()\n                        App.currentUser = currentUserId\n                        startActivity(Intent(this@LoginActivity, ChatActivity::class.java))\n                    }\n                })\n            }\n        }\n    }\n```\n\nIn this activity, we assigned a click listener to our button so when the button is clicked, a request is then made to the `/auth` endpoint of the server to log the user in. A unique user ID is returned to the client. After the ID is received, we store it in our `App` class and open the next activity, `ChatActivity`.\n\nNext, create a file called `ChatActivity.kt` and paste the following into the file:\n\n```\n    import android.os.Bundle\n    import android.support.design.widget.FloatingActionButton\n    import android.support.v7.app.AlertDialog\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import android.widget.Button\n    import android.widget.EditText\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_chat.*\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class ChatActivity: AppCompatActivity() {\n    \n        private lateinit var myUserId: String\n        private lateinit var adapter: MessageAdapter\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_chat)\n            myUserId = App.currentUser\n            setupRecyclerView()\n            setupFabListener()\n            setupPusher()\n        }\n    }\n```\n\nThis class is minimized into various functions for proper clarity. Before getting to the functions, we have a class variable which takes in the value of our unique user ID from the `App` class, this is for easy accessibility.  \n\nThe first function `setupRecyclerView()` is used to initialize the recycler view and its adapter. Add the function below to the class:\n\n```\n    private fun setUpRecyclerView() {\n        recyclerView.layoutManager = LinearLayoutManager(this)\n        adapter = MessageAdapter()\n        recyclerView.adapter = adapter\n    }\n```\n\nNext, we created a vertical layout manager and assigned it to our recycler view, we also initialized `MessageAdapter` and assigned it to the recycler view as well.\n\nThe next function, `setupFabListener()` is used to add a listener to the `FloatingActionButton`. Paste the function below into the same class:\n\n```\n    private fun setupFabListener() {\n        val fab: FloatingActionButton = findViewById(R.id.fab)\n        fab.setOnClickListener({\n            createAndShowDialog()\n        })\n    }\n```\n\nThe next function is `createAndShowDialog()`. Paste the function below into the same class:\n\n```\n    private fun createAndShowDialog() {\n        val builder: AlertDialog = AlertDialog.Builder(this).create()\n    \n        // Get the layout inflater\n        val view = this.layoutInflater.inflate(R.layout.dialog_message, null)\n        builder.setMessage(\"Compose new message\")\n        builder.setView(view)\n    \n        val sendMessage: Button = view.findViewById(R.id.send)\n        val editTextMessage: EditText = view.findViewById(R.id.edit_message)\n        sendMessage.setOnClickListener({\n    \n            if (editTextMessage.text.isNotEmpty())\n                RetrofitClient.getRetrofitClient().sendMessage(myUserId, editTextMessage.text.toString()).enqueue(object : Callback\u003cString\u003e {\n                    override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                        // message has sent\n                        val jsonObject = JSONObject(response!!.body())\n                        val newMessage = MessageModel(\n                                jsonObject[\"sender\"].toString(),\n                                jsonObject[\"id\"].toString(),\n                                jsonObject[\"message\"].toString(),\n                                \"sent\"\n                        )\n                        adapter.addMessage(newMessage)\n                        builder.dismiss()\n                    }\n    \n                    override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n                        // Message could not send\n                    }\n                })\n        })\n    \n        builder.show()\n    }\n```\n\nThis function builds a dialog and displays it for the user to enter a new message. When the send button on the dialog is clicked, the message entered is sent to the server through the `/message` endpoint. \n\nAfter the message is received, the server assigns a unique ID to the message then `Pusher` triggers data which contains the message just received together with its ID and the sender’s ID to the `new-message` event. \n\nMeanwhile, as soon as a message is sent, we add it to our recycler view and update the adapter using the `adapter.addMessage()` function.\n\nThe final function to add to the class is `setupPusher()` , this will initialize `Pusher` and listen for events. Paste the function below into the class:\n\n```\n    private fun setupPusher() {\n        val options = PusherOptions()\n        options.setCluster(\"PUSHER_APP_CLUSTER\")\n    \n        val pusher = Pusher(\"PUSHER_APP_KEY\", options)\n        val channel = pusher.subscribe(\"my-channel\")\n    \n        channel.bind(\"new_message\") { channelName, eventName, data -\u003e\n            val jsonObject = JSONObject(data)\n            val sender = jsonObject[\"sender\"].toString()\n    \n            if (sender != myUserId) {\n                // this message is not from me, instead, it is from another user\n                val newMessage = MessageModel(\n                        sender,\n                        jsonObject[\"id\"].toString(),\n                        jsonObject[\"message\"].toString(),\n                        \"\"\n                )\n                \n                runOnUiThread {\n                    adapter.addMessage(newMessage)\n                }\n    \n                // tell the sender that his message has delivered\n                RetrofitClient.getRetrofitClient().delivered(sender, jsonObject[\"id\"].toString()).enqueue(object : Callback\u003cString\u003e {\n                \n                    override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                        // I have told the sender that his message delivered\n                    }\n    \n                    override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n                        // I could not tell the sender\n                    }\n                })\n            }\n        }\n    \n        channel.bind(\"delivery-status\") { channelName, eventName, data -\u003e\n            val jsonObject = JSONObject(data)\n            val sender = jsonObject[\"sender\"]\n            \n            if (sender == myUserId) {\n                runOnUiThread {\n                    adapter.updateData(jsonObject[\"id\"].toString())\n                }\n            }\n        }\n    \n        pusher.connect()\n    }\n```\n\nIn the above snippets, we initialized `Pusher`, subscribed to a channel - `my-channel` and listened to events. We have two events: the first is `new_message` which enables us receive new messages. Since messages sent by us are already added to the list, we won’t add them here again. Instead, we only look for messages from other users hence the need for a unique user ID.\n\nWhen we receive messages from other users, we send a network call to the `/delivered` endpoint passing the message ID and the current sender’s ID as a parameter. The endpoint then triggers a message to the `delivery-status` event to alert the the sender at the other end that the message has been delivered. Note that from our server setup, each message also has a unique ID.\n\nThe second event we listen to is the `delivery-status` event. When we receive data in this event, we check the data received to see if the sender matches the current user logged in user and if it does, we send the message ID to our `updateData()` function. This function checks the list to see which message has the unique ID in question and updates it with “delivered”.\n\n# Conclusion\n\nIn this article, we have been able to demonstrate how to implement a  read receipt feature in Kotlin. Hopefully, you have picked up a few things on how you can use Pusher and Kotlin.","metaTitle":"Build read receipts using Kotlin","metaDescription":"In this tutorial, you will discover how to build read receipts using Kotlin and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mvL2FffogC6iqkUWAo8i4","type":"Entry","createdAt":"2018-03-05T16:12:52.906Z","updatedAt":"2019-01-02T15:29:29.645Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app using Struts 2","url":"chat-struts","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}}],"reviewDate":"2018-03-05","description":"In this tutorial, discover the basics of how to add chat to a Java Struts 2 application, using Pusher for the realtime features.","prerequisite":"A basic understanding of Apache Struts 2 is needed to follow this tutorial","content":"The need for realtime chat can’t be overemphasized. This includes realtime communication with your users which increases customer satisfaction and, as a result, make your business more credible, convenient and reduces wait times etc.\n\nHave you ever wondered how you could add a realtime chat to your Struts 2 web application? Have you considered the number of plugins or libraries that you might need to pull in to make it work? Worry no more, Pusher got your back. In this article, I'll work you through how to build a realtime chat app in Java Struts 2 by leveraging Pusher realtime technology.\n\nAt the end of this tutorial, we’ll have an application similar to this:\n\n![chat-struts-demo](//images.contentful.com/1es3ne0caaid/7KTt9nURMWW2OqmQ2k0siI/03ff6d7fd55aa3c179f2ca2404626754/chat-struts-demo.gif)\n\nStruts 2 is an excellent MVC Web application framework for developing enterprise Java web applications. It enables rapid development of Web applications and handles most of the plumbing required in large Web applications.\n\n\n## What is Pusher?\n\nPusher is a hosted service that makes it *super-easy* to add realtime data and functionality to web and mobile applications.\n\n\n\u003e 💡 Pusher sits as a realtime layer between your servers and your clients. Pusher maintains persistent connections to the clients - over WebSocket if possible and falling back to HTTP-based connectivity - so that as soon as your servers have new data that they want to push to the clients they can do, instantly via Pusher.\n\n\n## Requirements\n\nThe following tools are used in this article:\n\n\n- Java SDK – Download and install [Java SDK from Oracle site](http://www.oracle.com/technetwork/java/javase/downloads/index.html) if you don’t have it installed already.\n- Eclipse IDE – Download and install eclipse from their [website](https://www.eclipse.org). \n- JavaScript (JQuery).\n- Java language (you should know the basics).\n- [Maven](https://maven.apache.org/) (Most recent Eclipse include the Maven tooling already)\n\n\n## Step 1: Setting Up A Pusher App\nSign up or login to your [Pusher](https://pusher.com/signup) account and create a new pusher app.\n\n![chat-strut-create-app](//images.contentful.com/1es3ne0caaid/46ShmTbtXO8Q0OW4sa0eUG/64f3af0846ee33f66dc6fda38ec98357/chat-strut-create-app.png)\n\nNote down your Pusher app details you just created:\n\n```\n    app_id  = \"*********\"\n    key     = \"***********************\"\n    secret  =  \"*********************\"\n    cluster = \"**\"\n```\n\n## Step 2: Setting up Struts 2 Application in Eclipse\n\nA Struts 2 application is an ordinary Java Web application with a set of additional libraries. \n\nOpen your Eclipse IDE then go to **File** \u003e\u003e **New** \u003e\u003e **Others** from the menu. You should get a prompt just like the image below:\n\n![chat-struts-create-new-project](//images.contentful.com/1es3ne0caaid/1wHCiXZzCU0g2ewy6m8mmA/122de5171bc6f112fccfe8fd4969761f/chat-struts-create-new-project.png)\n\nNow, Select **Maven** \u003e\u003e **Maven Project** then click on **Next.**\n\nYou should have another prompt window:\n\n![chat-struts-new-maven-project](//images.contentful.com/1es3ne0caaid/1duYUGRvvWuo4qkEQiWECI/35b4c40809bb8f309d8d9a5625be1fb4/chat-struts-new-maven-project.png)\n\n\nNow select your project location, this is where you want your project's files to be stored. After that click on **Next** to proceed. In my case, I used the default location by just clicking next.\n\nYou will have another prompt to select an Archetype:\n\n![chat-struts-select-archetype](//images.contentful.com/1es3ne0caaid/Lrd6QUASMEGq8W8yc8w0m/e35ad856a7144aa778203e8d2942d7dd/chat-struts-select-archetype.png)\n\nSelect **org.apache.maven.achetypes maven-achetype-webapp 1.0** then click on **Next.**\n\nOn this window, put in the `**Group Id**` and `**Artifact**` `**Id**` then click on **Finish.**\n\n![chat-struts-archetype-parameter](//images.contentful.com/1es3ne0caaid/4MZqcWdVza2qu2OUugAQMG/5626d8526826e737e941f4e040315d0b/chat-struts-archetype-parameter.png)\n\n\u003e 💡 **groupId** will identify your project uniquely across all projects, so we need to enforce a naming schema. It has to follow the package name rules and you can create as many subgroups as you want. Look at [More information about package names](http://java.sun.com/docs/books/jls/third_edition/html/packages.html#7.7). eg. org.apache.maven, org.apache.commons \n\u003e \n\u003e 💡 **artifactId** is the name of the jar without version. If you created it then you can choose whatever name you want. If it's a third party jar you have to take the name of the jar as it's distributed. eg. maven, commons-math\n\nOnce done, a new project will be created for you:\n\n![chat-struts-file-structure](//images.contentful.com/1es3ne0caaid/57xvDFVgre0aICUuesE2uS/c3c6b44961b9d0ed2279531566c3940e/chat-struts-file-structure.png)\n  \nSince we’ll use [maven](http://www.vogella.com/tutorials/EclipseMaven/article.html) to run the application, we need to add `jetty-maven-plugin` to the `pom.``xml` file.\n\nUpdate **pom.xml** with the following **jetty plugin:**\n\n```\n    \u003cbuild\u003e\n        ... \n        \u003cplugins\u003e\n            \u003cplugin\u003e\n                \u003cgroupId\u003eorg.eclipse.jetty\u003c/groupId\u003e\n                \u003cartifactId\u003ejetty-maven-plugin\u003c/artifactId\u003e\n                \u003cversion\u003e9.4.7.v20170914\u003c/version\u003e\n                \u003cconfiguration\u003e\n                    \u003cwebApp\u003e\n                        \u003ccontextPath\u003e/${build.finalName}\u003c/contextPath\u003e\n                    \u003c/webApp\u003e\n                    \u003cstopKey\u003eCTRL+C\u003c/stopKey\u003e\n                    \u003cstopPort\u003e8999\u003c/stopPort\u003e\n                    \u003cscanIntervalSeconds\u003e10\u003c/scanIntervalSeconds\u003e\n                    \u003cscanTargets\u003e\n                        \u003cscanTarget\u003esrc/main/webapp/WEB-INF/web.xml\u003c/scanTarget\u003e\n                    \u003c/scanTargets\u003e\n                \u003c/configuration\u003e\n            \u003c/plugin\u003e\n        \u003c/plugins\u003e\n    \u003c/build\u003e\n```\n\nNow, from your Eclipse IDE, right click on the project name - `**chatApp**` - or any name you have chosen. Then go to `**Run As**` \u003e\u003e `**Maven build**`.\n\n![chat-struts-running-project-editing-configuration](//images.contentful.com/1es3ne0caaid/17ovAPA972eUuaOcusUeuk/96c2ea4fb646a5dd36601c0d1833a6f1/chat-struts-running-project-editing-configuration.png)\n\nNow type in `jetty:run` in the goals then click  `**Apply**` and then click on `**Run**`.\n\nVisit http://localhost:8080/chatApp from your browser:\n\n![chat-struts-hello-world](//images.contentful.com/1es3ne0caaid/4HCT81UwPugEOkMWoWWO8E/278e815fe7c17b09b354a6f3a5a6bb8c/chat-struts-hello-world.png)\n\n\u003e Note that `chatApp` is the folder name of your project. If you have used a different name, you should change the URL accordingly.\n\nNext, We’ll add Struts 2 to the Classpath. Now that we know we have a working Java web application, let’s add the minimal required Struts 2 framework Jar files to our web application’s class path. In `pom.xml` add the following to the dependency node:\n\n```\n    \u003cdependency\u003e\n        \u003cgroupId\u003eorg.apache.struts\u003c/groupId\u003e\n        \u003cartifactId\u003estruts2-core\u003c/artifactId\u003e\n        \u003cversion\u003e2.5.14\u003c/version\u003e\n    \u003c/dependency\u003e\n```\n\nStruts 2 libraries Jar files will be downloaded and added to our project when you save.\n\nNext, add the Struts 2 plugin that will enable us to work with JSON. Add the following `**pom.xml**` dependency node:\n\n```\n    \u003cdependency\u003e\n           \u003cgroupId\u003eorg.apache.struts\u003c/groupId\u003e\n           \u003cartifactId\u003estruts2-json-plugin\u003c/artifactId\u003e\n           \u003cversion\u003e2.5\u003c/version\u003e\n    \u003c/dependency\u003e\n```\n\n## Step 3: Add Logging\n\nTo see what’s happening under the hood, like when errors occur which will help during debugging, let’s add a logging dependency to our application.\n\nAdd the following dependencies to `**pom.xml**` dependency node:\n\n```\n    \u003cdependency\u003e\n        \u003cgroupId\u003eorg.apache.logging.log4j\u003c/groupId\u003e\n        \u003cartifactId\u003elog4j-core\u003c/artifactId\u003e\n        \u003cversion\u003e2.8.2\u003c/version\u003e\n    \u003c/dependency\u003e\n    \u003cdependency\u003e\n        \u003cgroupId\u003eorg.apache.logging.log4j\u003c/groupId\u003e\n        \u003cartifactId\u003elog4j-api\u003c/artifactId\u003e\n        \u003cversion\u003e2.8.2\u003c/version\u003e\n    \u003c/dependency\u003e\n```\n\nNext, setup a `log4j2.xml` configuration in the `src/main/resources` folder which contains the following:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n    \u003cConfiguration\u003e\n        \u003cAppenders\u003e\n            \u003cConsole name=\"STDOUT\" target=\"SYSTEM_OUT\"\u003e\n                \u003cPatternLayout pattern=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/\u003e\n            \u003c/Console\u003e\n        \u003c/Appenders\u003e\n        \u003cLoggers\u003e\n            \u003cLogger name=\"com.opensymphony.xwork2\" level=\"debug\"/\u003e\n            \u003cLogger name=\"org.apache.struts2\" level=\"debug\"/\u003e\n            \u003cRoot level=\"warn\"\u003e\n                \u003cAppenderRef ref=\"STDOUT\"/\u003e\n            \u003c/Root\u003e\n        \u003c/Loggers\u003e\n    \u003c/Configuration\u003e\n```\n\n\n## Step 4: Adding Pusher Java Library\n\nPusher has a Java library that we can use to interact with it’s API. We’ll add this to our application.\n\nUpdate **pom.xml** dependency node ****with the below**:**\n\n```\n    \u003cdependency\u003e\n      \u003cgroupId\u003ecom.pusher\u003c/groupId\u003e\n      \u003cartifactId\u003epusher-http-java\u003c/artifactId\u003e\n      \u003cversion\u003e1.0.0\u003c/version\u003e\n    \u003c/dependency\u003e\n```\n\nThis will download and add pusher java libraries to our application.\n\n## Step 5: Adding Struts 2 Servlet Filter\n\nTo enable the Struts 2 framework to work with our web application we need to add a Servlet filter class and filter mapping to `web.xml`. Below is the filter and filter-mapping nodes you should add.\n\nAdd the following to `**webapp**` node in  `src/main/webapp/WEB-INF/web.xml` file:\n\n```\n    \u003cfilter\u003e\n        \u003cfilter-name\u003estruts2\u003c/filter-name\u003e\n        \u003cfilter-class\u003eorg.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter\u003c/filter-class\u003e\n    \u003c/filter\u003e\n    \n    \u003cfilter-mapping\u003e\n        \u003cfilter-name\u003estruts2\u003c/filter-name\u003e\n        \u003curl-pattern\u003e/*\u003c/url-pattern\u003e\n    \u003c/filter-mapping\u003e\n```\n\n## Step 6: Create struts.xml\n\nYou can see this as the router for our application. Struts 2 can use either an XML configuration file or annotations (or both) to specify the relationship between a URL, a Java class, and a view page (such as `index.jsp`). For our basic Struts 2 application, we’ll use a minimal XML configuration. \n\nCreate a new file as  `struts.xml` in the `src/main/resources` folder and add the following code to it:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n    \u003c!DOCTYPE struts PUBLIC\n        \"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\"\n        \"http://struts.apache.org/dtds/struts-2.5.dtd\"\u003e\n    \n    \u003cstruts\u003e\n    \n        \u003cconstant name=\"struts.devMode\" value=\"true\" /\u003e\n      \n        \u003cpackage name=\"default\" namespace=\"/\" extends=\"json-default\"\u003e\n         \u003cdefault-action-ref name=\"index\"/\u003e \n         \n            \u003caction name=\"index\"\u003e\n                \u003cresult\u003e/index.jsp\u003c/result\u003e\n            \u003c/action\u003e\n        \u003c/package\u003e\n    \n    \u003c/struts\u003e\n```\n\nWith the above, we now have a route of `http://localhost:8080/chatApp/index.action` available in our application:\n\n```\n    \u003caction name=\"index\"\u003e\n        \u003cresult\u003e/index.jsp\u003c/result\u003e\n    \u003c/action\u003e\n```\n\n## Step 7: Crafting the chat interface\n\nOpen `src/main/webapp/index.jsp` and add the following code to it:\n\n```\n    \u003c!DOCTYPE html\u003e\n    \u003c%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\" %\u003e\n    \u003chead\u003e\n      \u003ctitle\u003eWelcome To Struts 2 chat!\u003c/title\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"assets/custom.css\"\u003e\n      \u003cscript src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.0/jquery.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \n    \u003c/head\u003e\n    \u003cbody\u003e\n       \u003ch1 class=\"text-center\"\u003eWelcome To Struts 2 chat!\u003c/h1\u003e\n        \u003cdiv class=\"container\" style=\"border: 2px solid gray;\"\u003e\n          \u003c!--msgbox--\u003e\n          \u003cdiv id=\"msgItems\" class=\"container-fluid\"\u003e\n          \n          \u003c/div\u003e\n                  \n                \u003c!-- querybox--\u003e\n                \u003cdiv class=\"row text-center\" id=\"queryText\"\u003e\n                      \n                   \u003cdiv class=\"hideForm\"\u003e\n                        \u003cdiv class=\"row\"\u003e\n                            \u003cdiv class=\"col-xs-9\"\u003e\n                                 \u003cinput type=\"text\" class=\"form-control\" placeholder=\"Type your Message Here\" id=\"message\"\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"col-xs-3\"\u003e\n                                \u003cbutton type=\"button\" class=\"btn btn-primary\" id=\"submitMessage\"\u003eSend Message\u003c/button\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                   \u003c/div\u003e\n                   \n                   \u003cdiv id=\"chatName\"\u003e\n                         \u003cform class=\"form-inline\"\u003e\n                            \u003cdiv class=\"form-group\"\u003e\n                                 \u003cinput type=\"text\" class=\"form-control\" id=\"userName\" placeholder=\"your username\"\u003e\n                            \u003c/div\u003e\n                                 \u003cbutton type=\"button\" class=\"btn btn-primary\" id=\"startChating\"\u003eStart Chating!\u003c/button\u003e\n                        \u003c/form\u003e\n                   \u003c/div\u003e\n                        \n               \u003c/div\u003e\n                           \n        \u003c/div\u003e\n    \n       \u003cscript src=\"assets/custom.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \n    \u003c/html\u003e\n```\n\nNext create new files called `src/main/webapp/assets/custom.css` and `src/main/webapp/assets/custom.js`. Note that the assets folder is not created by default, we need to create it.\n\nIn the `src/main/webapp/assets/``custom.css` file, add the following code:\n\n```\n    body {\n      padding-top: 50px;\n    }\n    \n    #queryText {\n      position : relative;\n      bottom : 4%;\n      padding: 0.3%;\n      background : grey;\n      min-width : 200px;\n    }\n    \n    #queryText  input {\n      width : 100%;\n    }\n    \n    \n    #queryText form div {\n      margin-left: auto;\n      margin-right: auto;\n    }\n    \n    #queryText {\n      border : 0px solid black;\n      padding: 10px;\n    }\n    \n    #chat-item {\n      border-bottom : 1px solid grey;\n    }\n    \n    #msgItems div img {\n      background : blue;\n      display : inline;\n    }\n    \n    #msgItems {\n       height: 400px;\n       overflow: scroll;\n    }\n    .hideForm{\n      display: none;\n    }\n    .input-large {\n     padding: 5px 150px;\n    }\n```\n\nIn the `src/main/webapp/assets/``custom.js` file, add the following code:\n\n```\n    // Indentify every user uniquely\n    var uniqueId = Math.random().toString(36).substring(2) + (new Date()).getTime().toString(36);\n    \n    $(\"#startChating\").click(function() {\n           \n        if( $(\"#userName\").val() ) { // if user provides username\n           $(\"#chatName\").hide();\n           $(\".hideForm\").show();\n        }\n    });\n```\n\nNote that we have included Pusher’s JavaScript Library in `index.jsp` which will help us listen to events so we can act on them.\n\nNow, visit the webpage again at https://localhost:8080/chatApp/.\n\n![chat-struts-interface](//images.contentful.com/1es3ne0caaid/30n4tdlmaIKqIiQqq4UAWI/a0256dc6c6c57d39c136a3fff9e038e3/chat-struts-interface.png)\n\n## Step 8: Creating a Struts 2 Action Class\n\nHere, we’ll create an action class that will serve as the server for sending data to Pusher.\n\nCreate a new folder called `java` in the `src/main` folder.\n\nThen create a new file  `src/main/java/MessageAction.java` and add the following code to it:\n\n```\n    package com.menusms.chatApp.action;\n        \n    import com.opensymphony.xwork2.ActionSupport;\n        \n    import com.pusher.rest.Pusher;\n        \n    import java.util.LinkedHashMap;\n    import java.util.Map;\n        \n    public class MessageAction extends ActionSupport{\n                 \n         private Map\u003cString, String\u003e data = new LinkedHashMap\u003cString, String\u003e();\n            \n         private String message, userName, uniqueId;\n                \n         public String execute() {\n                        \n              //Pusher pusher = new Pusher(\"app_id\", \"key\", \"secret\");\n               Pusher pusher = new Pusher(\"******\", \"****************\", \"*************\");\n               pusher.setCluster(\"**\"); // update with your pusher cluster\n               pusher.setEncrypted(true);\n                        \n               data.put(\"message\", this.getMessage());\n               data.put(\"userName\", this.getUserName());\n               data.put(\"uniqueId\", this.getUniqueId());\n                   \n               pusher.trigger(\"struts-chat\", \"message\", data);\n                        \n               return SUCCESS;\n          }\n            \n    }\n```\n\nHere, we have declared some variables - `message`, `userName`, `uniqueId` and `data` - which will be sent to Pusher. When the execute method is called, the data is sent to Pusher (make sure you change pusher details in the execute method with the details you saved earlier). \n\nWith this, we are sending the data to the `struts-chat` **channel** and also triggering the `message` **event.**\n\n\u003e 💡 [Channels](http://pusher.com/docs/channels) provide a great way of organizing streams of real-time data. Here, we are \n\u003e  subscribing to the `struts-chat` channel (NB: The channel name can be any name you like).  Once we are subscribed to a channel, we bind that channel to an event.\n\n\n\u003e 💡 [Events](http://pusher.com/docs/client_api_guide/client_events) can be seen as a notification of something happening on your system and are ideal for linking updates to changes in the View. In this case we want to bind to an event which is triggered whenever a user sends a message. \n\nNext, lets add a setter and getter for the variables we have declared. Update `src/main/java/MessageAction.java` with the below:\n\n```\n    ...\n           public Map\u003cString, String\u003e getData() {\n                return data;\n            }\n            \n            public void setData(Map\u003cString, String\u003e data) {\n               this.data = data;\n            }\n      \n            public String getUniqueId() {\n               return uniqueId;\n            }\n        \n            public void setUniqueId(String uniqueId) {\n               this.uniqueId = uniqueId;\n             }\n        \n             public String getUserName() {\n                return userName;\n             }\n        \n             public void setUserName(String userName) {\n                this.userName = userName;\n             }\n        \n             public String getMessage() {\n                return message;\n             }\n        \n             public void setMessage(String message) {\n                this.message = message;\n             }\n    }\n```  \n\nUpdate `src/main/resources/struts.xml` with the below:\n\n```\n    \u003caction name=\"message\" class=\"com.menusms.chatApp.action.MessageAction\" method=\"execute\"\u003e\n        \u003cresult type=\"json\"\u003e\u003c/result\u003e\n    \u003c/action\u003e\n```\n\nNow, we have a route available - `http://localhost:8080/chatApp/message`. When this URL is visited, the execute method in the class `MessageAction.java` will be invoked.\n\n## Step 9: Sending messages\n\nWhen a user submits a message from the HTML form, we’ll send this data to our Java class where it will be sent to Pusher.\n\nUsing jQuery, we’ll send this data to the `message.action` route.\n\nUpdate `src/main/webapp/assets/custom.js` with the following code:\n\n```\n    $(\"#submitMessage\").click(function() {\n        \n       var userName = $(\"#userName\").val();\n       var message  = $(\"#message\").val();\n           \n    $.post(\"message.action\", {\n            message: message,\n            userName: userName,\n            uniqueId: uniqueId\n        })\n        .done(function(data) {\n            //empty the message input\n            $(\"#message\").val(\"\");\n        });\n    });\n```\n\n## Step 10: Printing messages\n\nWe need to listen for incoming messages from Pusher and display them when they are received. We’ll do this easily with the Pusher JavaScript library we have included earlier.\n\nWe’ll subscribe to a channel (this is the channel that we are pushing data to in our java code above) and bind that channel to an event.\n\nAdd the below code to `src/main/webapp/assets/custom.js`:\n\n```\n       var pusher = new Pusher('***************', {// Replace with your PUSHER_APP_KEY\n          cluster: '**', // Replace with your PUSHER_APP_CLUSTER\n          encrypted: true\n        });\n    \n        var channel = pusher.subscribe('struts-chat');\n        channel.bind('message', function(data) {\n         \n         var textDirection = (data.uniqueId == uniqueId) ? \" text-right\" : \"\";\n          \n          $(\"#msgItems\").append(\n                `\u003cdiv id=\"chat-item\" class=\"row` +textDirection+ `\"\u003e\n          \u003cdiv class=\"cols-xs-4\"\u003e\n                \u003cp\u003e\n                    \u003cp\u003e\u003cb\u003e` +data.userName+ `\u003c/b\u003e\u003c/p\u003e\u003cimg src=\"http://placehold.it/30X30\" class=\"img-circle img-responsive\"\u003e`\n                    +data.message+ `\n                \u003c/p\u003e\n                      \n          \u003c/div\u003e\n      \u003c/div\u003e`\n          );\n        });\n```\n\nWith this:\n\n```\n    var channel = pusher.subscribe('struts-chat');\n    channel.bind('message', function(data) { ...\n```\n\nWe have subscribed to the `struts-chat` channel and bind it to `message` event.\n\n\n## Conclusion\n\nPusher really makes life easy when it comes to adding realtime features to web applications. In this tutorial, we have been able to learn the basics of how to add chat to a Java Struts 2 application.\n\nIf you have any questions or observations, feel free to drop them in the comments section below. I would be happy to respond to you.","metaTitle":"Build a chat app using Struts 2","metaDescription":"Create a chat app using Java's framework Apache Struts 2 and Pusher for the realtime features."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1i86k0I4cASq4UyMSqcmoy","type":"Entry","createdAt":"2018-02-22T15:02:44.929Z","updatedAt":"2018-03-13T14:51:01.847Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build live comments using JavaScript","url":"live-comments-javascript","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"wQhwNciAKWOW8SI2MSKww","type":"Entry","createdAt":"2018-02-13T10:47:12.980Z","updatedAt":"2018-02-14T10:09:05.816Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Rahat Khanna","url":"rahat-khanna","email":"rahat.khanna@yahoo.co.in","twitter":"https://twitter.com/mappmechanic","github":"https://github.com/mappmechanic","guestWriter":true}}],"projectRepo":"https://github.com/mappmechanic/flash-comments","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}}],"reviewDate":"2018-03-03","description":"Create a realtime comment feature for web applications using with JavaScript on frontend and Node.js on the backend.","prerequisite":"A basic understanding of JavaScript, HTML and CSS are needed to follow this tutorial.","content":"These days Social has become the buzzword and we all want our apps to be the centre of these amazing social conversations. Comments on a post, video, update or any feature of your new app is a great way to add fun and enriching social conversations to your app.\n\nIf these conversations can be Realtime, then it's even better, so in this blog post we will be discussing how we can create a realtime comment feature for our web apps using Pusher with Vanilla JavaScript on frontend and Node.js on the backend.\n\nWe will call this realtime comment system Flash Comments, which can be re-used for multiple posts/features in your app and can generate amazing conversations in real time. Our app will look something like this:\n\n![live-comments-javascript-demo](//images.contentful.com/1es3ne0caaid/1BhCVpuXIQck82ageYuwOs/b0a26816d2ea05c7d65176412506aae3/live-comments-javascript-demo.gif)\n \n*Skip the next section, if you have already signed up with Pusher.*\n\n## Signing up with Pusher\n\nYou can create a free account in Pusher [here](http://pusher.com/signup). After you signup and login for the first time, you will be asked to create a new app as seen in the picture below. You will have to fill in some information about your project and also the frontend library or backend language you will be building your app with. You also have an option to select the cluster of Pusher based on your users location distribution, I have chosen `ap2 (Mumbai, India)` as I may be building an app for the India region.\n\n![live-comments-javascript-pusher-create-app](//images.contentful.com/1es3ne0caaid/5xzHX5l0k06GOA0mscaWQ6/15e51b2e8bc2054428c4e68eb7e85199/live-comments-javascript-pusher-create-app.png)\n\nFor this particular blog post, we will be selecting Vanilla JavaScript for the frontend and Node.js for the backend as seen in the picture above. This will just show you a set of starter sample codes for these selections, but you can use any integration kit later on with this app.\n\n![live-comments-javascript-pusher-getting-started](//images.contentful.com/1es3ne0caaid/7JfFi9Ql7qoUuqUwwYcAUW/686e20ab6d067da94c6db2eb1acab4ea/live-comments-javascript-pusher-getting-started.png)\n\n## Node.js App\n\n### Initialising Node Project\n\nYou can create a new folder named flash-comments and run the following command at the root of the folder:\n\n```\nnpm init\n```\n\nIt will ask you bunch of information regarding the app and it will create a new package.json file inside your folder.\n\nWe will be using the fairly simple and popular Express framework in Node. Now, we will install the important packages that will be used in our minimal Express app.\n\n```\nnpm install -g express body-parser path --save\n```\n\nAfter installing all required `npm` modules, now we will create an entry point file for our Node app as `server.js` inside the root folder. Add the following basic code for a basic HTTP Server to be run using port `9000`.\n\n```\nvar express = require('express');\nvar path = require('path');\nvar bodyParser = require('body-parser');\n\nvar app = express();\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(express.static(path.join(__dirname, 'public')));\n\n// Error Handler for 404 Pages\napp.use(function(req, res, next) {\n    var error404 = new Error('Route Not Found');\n    error404.status = 404;\n    next(error404);\n});\n\nmodule.exports = app;\n\napp.listen(9000, function(){\n  console.log('Example app listening on port 9000!')\n});\n```\n\nPusher has an open source NPM module for Node.js integrations which we will be using. It provides a set of utility methods to integrate with Pusher APIs using a unique `appId`, `key` and a `secret`. We will first install the pusher `npm` module using the following command:\n\n```\nnpm install pusher --save\n```\nNow, we can use require to get the Pusher module and to create a new instance passing an options object with important keys to initialise our integration. For this blog post, I have put random keys; you will have to obtain it for your app from the Pusher dashboard.\n\n```\nvar Pusher = require('pusher');\n\nvar pusher = new Pusher({\n  appId: '303964',\n  key: '82XXXXXXXXXXXXXXXXXb5',\n  secret: '7bXXXXXXXXXXXXXXXX9e',\n  cluster: 'ap2',\n  encrypted: true\n});\n\nvar app = express();\n...\n```\n\nYou will have to replace the `appId`, `key` and `secret` with values specific to your own app. After this, we will write code for a new API which will be used to create a new comment. This api will expose the route `/comment` with HTTP `POST` method and will expect an object for comment with the properties name, email and comment. Add the following code to your `server.js` file before the app.listen part.\n\n```\napp.post('/comment', function(req, res){\n  console.log(req.body);\n  var newComment = {\n    name: req.body.name,\n    email: req.body.email,\n    comment: req.body.comment\n  }\n  pusher.trigger('flash-comments', 'new_comment', newComment);\n  res.json({ created: true });\n});\n```\nIn the above code, we have extracted the data from `req.body` into a `newComment` object and then used it to call the trigger method on Pusher instance.\n\n## Important Pusher Concepts\n\n### Channel\n\nIn Pusher, we have a conceptual grouping called channel and it provides the basic way to filter data in Pusher. A channel can represent many entities in a real world application. For example: In our comments app, a channel can be comments for a specific article, video, blog post, photo, live streaming of an event etc.\n\nWe would create a new unique channel id for each of these entities to uniquely identify or group data like comments associated with any one of these. Two unique live streaming videos should also have separate channel so that we can show the respective live comments stream on their respective pages.\n\nSo we will create a new unique channel for each entity with their unique id, so for example a Youtube video comments channel can be named `comments-youtube-234`.\n\nThere are three types of channel\n\n- **Public Channel** - can be subscribed by anyone who knows the name of the channel.\n- **Private Channel** - channel which can be subscribed by authorised users only. If the channel name has a `private-` prefix, it will be regarded as a private channel.\n- **Presence Channel** - this is a special channel type similar to private as only authorised users can subscribe, where the subscribers list is also maintained and notified to other users also. Channel name should have a prefix `presence-`\n \nWe will use a public channel in our blog post which we are naming as flash-comments but you should ideally use a private channel for commenting systems with unique name for each entity you want to enable commenting feature.\n\n### Event\n\nNow, the real data in pusher is transmitted through events which is the primary way of packaging messages. An event can be triggered by a backend or even client in special cases for any particular channel. A channel is required to ensure that your message reaches the intended recipient.\n\nWe give a unique name to each event so that we can setup handlers for receiving and processing these event messages at each of our client end who has subscribed to any channel.\n\n### Pusher Trigger Method\n\nNow we will understand our server side code for sending an Event to the pusher channel flash-comments.\n\n```\n...\npusher.trigger('flash-comments', 'new_comment', newComment);\n...\n```\nWe are using the `.trigger(channel-name,event-name, payload)`** to send an Event from the server whenever the `POST API` is called for creating a new comment. For the simplicity of this blog post, we will not use any database to save and persist the comments but in a production system, you would be required to store a comment corresponding to a unique entity id like a Youtube Video ID or a Blog Post ID.\n\nNow, we can run our server using `node server` command. Our web service will be accessible on the URL `http://localhost:9000/comment`.We can write a POST request using any chrome extension like POSTMan or even CURL to test if it returns `{ \"created\":\"true\" }` .\n\nThe Curl command to test your POST api will be as follows:\n\n``` \ncurl -H \"Content-Type: appliaction/json\" -X POST -d '{\"name\":\"Rahat Khanna\",\"email\":\"rahat.khanna@yahoo.co.in\",\"comment\":\"Creating a sample comment\"}' http://localhost:9000/comment\n```\n\n## Frontend using Vanilla JavaScript\n\nNow, we will be writing the most crucial part, the frontend code using Vanilla JavaScript. In the frontend code we will be developing a Comments box section which would have following 2 features:\n\n- **Display** all the Live Comments added to the channel with a smooth animation\n- **Add** new comment to the live comments by hitting the POST Api we have just created\n \n### Step 1: Create a folder named public and create an index.html\n\nWe have already written code in our `server.js` to serve static content from `public` folder, so we will write all our frontend code in this folder.\n\nPlease create a new folder `public` and also create an empty `index.html` for now.\n\n### Step 2: Add boilerplate Code to our index.html\n\nWe will be adding some basic boilerplate code to setup the base structure for our web app like Header, Sections where content like video or blog post can be put and also the section which will contain our **Flash Comments** box.\n\n```\n\u003c!DOCTYPE\u003e\n\u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eMaking Social Comments Realtime \u0026 Fun with Pusher using Javascript like the Flash\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://unpkg.com/purecss@0.6.2/build/pure-min.css\" integrity=\"sha384-UQiGfs9ICog+LwheBSRCt1o5cbyKIHbwjWscjemyBMT9YCUMZffs6UqUTd0hObXD\" crossorigin=\"anonymous\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Raleway:200\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"./style.css\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cheader\u003e\n            \u003cdiv class=\"logo\"\u003e\n                \u003cimg src=\"./assets/pusher-logo.png\" /\u003e\n            \u003c/div\u003e\n        \u003c/header\u003e\n        \u003csection\u003e\n            \u003cimg class=\"flash-logo\" src=\"./assets/flash-logo.jpg\" /\u003e\n            \u003ch2\u003eFlash Comments - Super Fast\u003c/h2\u003e\n            \u003cdiv class=\"post\"\u003e\n      \u003c!-- Put here Content like Youtube Video, Blog Post or Live Stream --\u003e\n            \u003c/div\u003e\n        \u003c/section\u003e\n        \u003csection\u003e\n\n           \u003cdiv class=\"flash-comments\"\u003e\n                \u003cdiv class=\"header\"\u003e\n                    \u003cdiv\u003e\u003cimg src=\"./assets/comments.png\"\u003e\u003c/div\u003e\n                    \u003cdiv class=\"text\"\u003eComments\u003c/div\u003e\n                \u003c/div\u003e\n                \u003cform class=\"pure-form\" id=\"comment-form\"\u003e\n                    \u003c!-- Here we will put a form to create new comment --\u003e\n                \u003c/form\u003e\n                 \u003cdiv class=\"comments-list\" id=\"comments-list\"\u003e\n                    \u003c!-- Here we will display live comments --\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/section\u003e\n    \u003c/body\u003e\n\u003c/html\u003e\n```\n### Step 3: Create style.css file\n\nNow we will also create a `style.css` file to contain the important css code for styling our web app and the **flash comments** component. We will add basic styles to render our skeleton.\n\n```\nbody{\n    margin:0;\n    padding:0;\n    overflow: hidden;\n    font-family: Raleway;\n}\n\nheader{\n    background: #2b303b;\n    height: 50px;\n    width:100%;\n    display: flex;\n    color:#fff;\n}\n\n.flash-logo{\n    height:60px;\n    border-radius: 8px;\n    float: left;\n    margin-right: 15px;\n}\n\n\nsection{\n    padding: 15px;\n    width:calc(100% - 45px);\n}\n\n.logo img{\n    height: 35px;\n    padding: 6px;\n    margin-left: 20px;\n}\n\n\n.flash-comments{\n    border:1px solid #aeaeae;\n    border-radius: 10px;\n    width:50%;\n    overflow: hidden;\n}\n\n.post{\n    padding-top:10px;\n}\n\n.flash-comments .header{\n    display: flex;\n    padding: 5px 20px;\n    border-bottom: 1px solid #eaeaea;\n}\n\n.flash-comments .header .text{\n    padding-left:15px;\n    line-height: 25px;\n}\n\n.flash-comments .comment{\n    display: flex;\n    border-bottom:1px solid #eaeaea;\n    padding: 4px;\n}\n```\n### Step 4: Add the Pusher JS library and create app.js\n\nNow we will add the Pusher Vanilla JavaScript Library available on its CDN to use it to integrate with the Pusher system using plain JavaScript code. Please add the following script tag at the end of the body before its closing tag:\n\n```\n...\n\u003cscript type=\"text/javascript\" src=\"https://js.pusher.com/3.2/pusher.min.js\"\u003e\u003c/script\u003e\n\u003c/body\u003e\n...\n```\n\nAlso, create a new `app.js` file where we will be writing all our code and also import the same in our `index.html` file after the script tag to import Pusher JS file.\n\n``` \n\u003cscript type=\"text/javascript\" src=\"https://js.pusher.com/3.2/pusher.min.js\"\u003e\u003c/script\u003e\n\u003cscript type=\"text/javascript\" src=\"./app.js\"\u003e\u003c/script\u003e\n\u003c/body\u003e\n```\n\nIn our file `app.js` now, we will write code to initialise the Pusher instance using the unique client API key we have got from the Pusher dashboard. We will also pass an object specifying the cluster and setting the flag encrypted to true so that all messaging \u0026 communication is encrypted. We will also use the `pusher.subscribe('channel-name')` to listen to all events for a specific channel.\n\nWe will create a JavaScript IIFE (Immediately Invoking Functions) to create a private scope so that we do not pollute global scope. Please add the following code to `app.js` file:\n\n```\n// Using IIFE for Implementing Module Pattern to keep the Local Space for the JS Variables\n(function() {\n    // Enable pusher logging - don't include this in production\n    Pusher.logToConsole = true;\n\n    var serverUrl = \"/\",\n        comments = [],\n        pusher = new Pusher('82XXXXXXXXXXXXXX5', {\n          cluster: 'ap2',\n          encrypted: true\n        }),\n        // Subscribing to the 'flash-comments' Channel\n        channel = pusher.subscribe('flash-comments');\n\n})();\n```\n\n### Step 5: Creating Form for adding new comment\n\nNow, we will create the form controls for letting the user input their name, email and comment text for creating a new comment using our Node API and Pusher. We will add the following HTML code inside the existing form tag to create form.\n\n```\n\u003cform class=\"pure-form\" id=\"comment-form\"\u003e\n  \u003cdiv class=\"comment-form\"\u003e\n      \u003cdiv class=\"left-side\"\u003e\n           \u003cdiv class=\"row\"\u003e\n               \u003cinput type=\"text\" required placeholder=\"enter your name\" id=\"new_comment_name\"\u003e\n               \u003cinput placeholder=\"enter valid email\" required type=\"email\" id=\"new_comment_email\"\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003ctextarea placeholder=\"enter comment text\" required id=\"new_comment_text\" rows=\"3\"\u003e\u003c/textarea\u003e\n            \u003c/div\u003e\n      \u003c/div\u003e\n     \u003cdiv class=\"right-side\"\u003e\n            \u003cbutton type=\"submit\" class=\"button-secondary pure-button\"\u003eSend Comment\u003c/button\u003e\n     \u003c/div\u003e\n \u003c/div\u003e\n\u003c/form\u003e\n```\n\nIn the form code above, we have used HTML5 validations like required \u0026 type=email which would not allow user to keep these fields blank or submit an invalid email. These validations will automatically work in most browsers which support HTML5 form validations.\n\nAlso, we will be adding the following css to style the form:\n\n```\n.flash-comments form{\n    margin-bottom: 0px;\n}\n\n.flash-comments .comment-form{\n    display: flex;\n    padding: 6px;\n    border-bottom:1px solid #eaeaea;\n}\n\n.comment-form .left-side{\n    flex: 5;\n    display: flex;\n    flex-direction: column;\n    padding-right: 5px;\n}\n\n.comment-form .left-side .row{\n    flex: 0 auto;\n    display: flex;\n    align-content: center;\n}\n\n.comment-form .left-side .row input{\n    height: 32px;\n    width: 50%;\n}\n\n.comment-form .left-side .row textarea{\n    height: 42px;\n    margin-top:8px;\n}\n\n.comment-form .right-side{\n    flex:1;\n    display: flex;\n    justify-content: center;\n}\n\n.comment-form .right-side button{\n    white-space: pre-wrap;\n}\n\n.comment-form textarea{\n    width:100%;\n}\n\n.button-secondary {\n    background: rgb(66, 184, 221); /* this is a light blue */\n    color: white;\n    border-radius: 4px;\n    text-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);\n}\n```\n\nAfter building the visual form, now we need to attach an event handler to the Submit event of the form. We will do that using the following code in the `app.js` file probably at the top after the var declarations:\n\n```\nvar commentForm = document.getElementById('comment-form');\n\n// Adding to Comment Form Submit Event\ncommentForm.addEventListener(\"submit\", addNewComment);\n```\n\nNow, we will write the code for implementation of the handler `addNewComment` with the following code:\n\n```\nfunction addNewComment(event){\n      event.preventDefault();\n      var newComment = {\n        \"name\": document.getElementById('new_comment_name').value,\n        \"email\": document.getElementById('new_comment_email').value,\n        \"comment\": document.getElementById('new_comment_text').value\n      }\n\n      var xhr = new XMLHttpRequest();\n      xhr.open(\"POST\", serverUrl+\"comment\", true);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState != 4 || xhr.status != 200) return;\n\n        // On Success of creating a new Comment\n        console.log(\"Success: \" + xhr.responseText);\n        commentForm.reset();\n      };\n      xhr.send(JSON.stringify(newComment));\n}\n```\n\nWe are using native XHR request to make an AJAX request to the Node API. You can use either jQuery Ajax or any framework-specific Ajax method in your app. Now if we run our application, then fill the form and submit it, then we will see a `Success: { created: true }`message in our browser developer tools console.\n\nAlso, we can see the Pusher Dashboard to see the stats about Event Messages sent for any channel:\n\n![live-comments-javascript-pusher-debug-console](//images.contentful.com/1es3ne0caaid/3KcihUCGjCMqAemywQ6WMO/fc45f25b84487e5430754e5e29b41b14/live-comments-javascript-pusher-debug-console.png)\n\n### Step 6: Display list of comments received for this channel\n\nNow, we will bind to the `new_comment` event on this channel `flash-comments` so that we can receive any message about new comment creation done from any client in realtime, and we can display all those comments.\n\nWe will first add a template for a new comment in our `index.html` file inside the div tag with `id=\"comments-list\"`.\n\n```\n\u003cdiv class=\"comments-list\" id=\"comments-list\"\u003e\n    \u003cscript id=\"comment-template\" type=\"text/x-template\"\u003e\n        \u003cdiv class=\"user-icon\"\u003e\n            \u003cimg src=\"./assets/user.png\" /\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"comment-info\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                  \u003cdiv class=\"name\"\u003e{{name}}\u003c/div\u003e\n                  \u003cdiv class=\"email\"\u003e{{email}}\u003c/div\u003e\n             \u003c/div\u003e\n             \u003cdiv class=\"row\"\u003e\n                   \u003cdiv class=\"text\"\u003e{{comment}}\u003c/div\u003e\n             \u003c/div\u003e\n         \u003c/div\u003e\n     \u003c/script\u003e\n\u003c/div\u003e\n```\n\nNow, we will write the JavaScript code to bind to the new_comment event on the pusher channel instance we have subscribed. Whenever the `new_comment` event will be fired, we will take the template innerHTML content and replace the placeholders `{{name}}, {{email}} \u0026 {{comment}}`with the data passed along with the event and append them to the `comments-list` div element.\n\n```\nvar commentsList = document.getElementById('comments-list'),\n    commentTemplate = document.getElementById('comment-template');\n\n// Binding to Pusher Event on our 'flash-comments' Channel\nchannel.bind('new_comment',newCommentReceived);\n\n// New Comment Received Event Handler\n    // We will take the Comment Template, replace placeholders \u0026 append to commentsList\n    function newCommentReceived(data){\n      var newCommentHtml = commentTemplate.innerHTML.replace('{{name}}',data.name);\n      newCommentHtml = newCommentHtml.replace('{{email}}',data.email);\n      newCommentHtml = newCommentHtml.replace('{{comment}}',data.comment);\n      var newCommentNode = document.createElement('div');\n      newCommentNode.classList.add('comment');\n      newCommentNode.innerHTML = newCommentHtml;\n      commentsList.appendChild(newCommentNode);\n    }\n\n```\n\nUsing the above code, a new div tag representing the new comment will automatically be created and appended to the `comments-list` container. We will now add the following css to nicely display the list of comments and also animate whenever a new comment appears on the list.\n\n```\n.flash-comments .user-icon{\n    flex: 0 80px;\n    display: flex;\n    justify-content: center;\n}\n\n.flash-comments .user-icon img{\n    height:45px;\n}\n\n.flash-comments .comment-info{\n    flex:5;\n}\n\n.flash-comments .comment-info .row{\n    display: flex;\n}\n\n.flash-comments .comment-info .name{\n    color: #000;\n}\n\n.flash-comments .comment-info .email{\n    color: #aeaeae;\n    margin-left: 10px;\n}\n\n.flash-comments .comment-info .text{\n    padding-top:6px;\n    font-size: 13px;\n}\n\n/* CSS Code for Animating Comment Element */\n.flash-comments .comment{\n  animation: animationFrames ease 1s;\n  animation-iteration-count: 1;\n  transform-origin: 50% 50%;\n  animation-fill-mode:forwards; /*when the spec is finished*/\n  -webkit-animation: animationFrames ease 1s;\n  -webkit-animation-iteration-count: 1;\n  -webkit-transform-origin: 50% 50%;\n  -webkit-animation-fill-mode:forwards; /*Chrome 16+, Safari 4+*/ \n  -moz-animation: animationFrames ease 1s;\n  -moz-animation-iteration-count: 1;\n  -moz-transform-origin: 50% 50%;\n  -moz-animation-fill-mode:forwards; /*FF 5+*/\n  -o-animation: animationFrames ease 1s;\n  -o-animation-iteration-count: 1;\n  -o-transform-origin: 50% 50%;\n  -o-animation-fill-mode:forwards; /*Not implemented yet*/\n  -ms-animation: animationFrames ease 1s;\n  -ms-animation-iteration-count: 1;\n  -ms-transform-origin: 50% 50%;\n  -ms-animation-fill-mode:forwards; /*IE 10+*/\n}\n\n@keyframes animationFrames{\n  0% {\n    opacity:0;\n    transform:  translate(-1500px,0px)  ;\n  }\n  60% {\n    opacity:1;\n    transform:  translate(30px,0px)  ;\n  }\n  80% {\n    transform:  translate(-10px,0px)  ;\n  }\n  100% {\n    opacity:1;\n    transform:  translate(0px,0px)  ;\n  }\n}\n\n@-moz-keyframes animationFrames{\n  0% {\n    opacity:0;\n    -moz-transform:  translate(-1500px,0px)  ;\n  }\n  60% {\n    opacity:1;\n    -moz-transform:  translate(30px,0px)  ;\n  }\n  80% {\n    -moz-transform:  translate(-10px,0px)  ;\n  }\n  100% {\n    opacity:1;\n    -moz-transform:  translate(0px,0px)  ;\n  }\n}\n\n@-webkit-keyframes animationFrames {\n  0% {\n    opacity:0;\n    -webkit-transform:  translate(-1500px,0px)  ;\n  }\n  60% {\n    opacity:1;\n    -webkit-transform:  translate(30px,0px)  ;\n  }\n  80% {\n    -webkit-transform:  translate(-10px,0px)  ;\n  }\n  100% {\n    opacity:1;\n    -webkit-transform:  translate(0px,0px)  ;\n  }\n}\n\n@-o-keyframes animationFrames {\n  0% {\n    opacity:0;\n    -o-transform:  translate(-1500px,0px)  ;\n  }\n  60% {\n    opacity:1;\n    -o-transform:  translate(30px,0px)  ;\n  }\n  80% {\n    -o-transform:  translate(-10px,0px)  ;\n  }\n  100% {\n    opacity:1;\n    -o-transform:  translate(0px,0px)  ;\n  }\n}\n\n@-ms-keyframes animationFrames {\n  0% {\n    opacity:0;\n    -ms-transform:  translate(-1500px,0px)  ;\n  }\n  60% {\n    opacity:1;\n    -ms-transform:  translate(30px,0px)  ;\n  }\n  80% {\n    -ms-transform:  translate(-10px,0px)  ;\n  }\n  100% {\n    opacity:1;\n    -ms-transform:  translate(0px,0px)  ;\n  }\n}\n```\n\nNow, you can run the app we have built, either in 2 different browsers or one in normal browser and the other in incognito window, and add multiple comments. We can see that the live comments will be added in realtime with a smooth animation.\n\n![live-comments-javascript-demo](//images.contentful.com/1es3ne0caaid/1BhCVpuXIQck82ageYuwOs/b0a26816d2ea05c7d65176412506aae3/live-comments-javascript-demo.gif)\n\nThe complete code for this tutorial is available on [Github](https://github.com/mappmechanic/flash-comments).\n\n## Conclusion\n\nWe have built a nice web app with live comments using Pusher, Node.js and Vanilla JavaScript. We can use this component with any of our applications and enable live comments for variety of social entities like Videos, Blog Post, Polls, Articles and live streams.\n\nWe have used the Node.js server to create a REST API to get a new comment and then trigger a Pusher event on a specific channel. For any real world application, we can take a unique id for each entity and use a unique channel name for any entity. In a production scenario we can also store the comments in a persistent storage and then later retrieve them.\n\nWe have also created a frontend app, which will connect to the Pusher API using Pusher JS library. We have created a form to hit the Node API which will trigger new_comment event. Comments are displayed in realtime with an animation using the bind method on the channel instance.","metaTitle":"Build live comments using JavaScript","metaDescription":"Create a realtime comment feature for web applications using with JavaScript on frontend and Node.js on the backend."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2uXH4790aAKiQUMswwWcmm","type":"Entry","createdAt":"2018-02-28T12:22:30.031Z","updatedAt":"2018-02-28T16:26:48.079Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Making Angular 5 realtime with WebSockets","url":"angular-realtime","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/angular5-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}}],"reviewDate":"2018-02-23","description":"Build an app with realtime features in Angular 5 and Pusher.","prerequisite":"A basic understanding of Angular 5 and Node.js is needed to follow this tutorial.","content":"The demand for realtime functionality in applications these days has grown tremendously. People want to see how users interact with their applications in realtime. Here comes Pusher, allowing you to add realtime functionality to your application by using concepts such as events and channels. In this article, we are going to look at how to add realtime functionality to your Angular 5 application. \n\n\n## Introduction\n\nWe are going to make an application that gives realtime feedback when a picture is liked. In other words, you get to see in realtime when users like a picture - interesting, right? To do this, we will be using [Angular](https://angular.io) 5 and [Pusher](https://pusher.com) API. \n\n![angular-realtime-likes](//images.contentful.com/1es3ne0caaid/6DOzL2ede8i4E6KMYUA8sy/3b027d45e96b87e142bcb45b3b973c0a/angular-realtime-likes.png)\n\n## Getting started\n\nTo get started, you need to make sure your have [Node](https://nodejs.org) and [NPM](https://npmjs.com) installed on your machine. You can confirm you installation by running:\n\n```\n    npm --version\n    node --version\n```\n\nIf you get version numbers as results then you have them installed. Node 6+ and NPM 4+ should be your target.\n\n## Building the Angular 5 application\n\nNow we are not going to dwell too much on the intricacies of building an Angular application, rather, we will be more concerned about adding realtime functionality to the application itself.\n\nTo create your Angular application, you need to ensure that you have Angular 5 installed on your machine. You can confirm your installation by running:\n\n```\n    ng --version\n```\n\nIf you don’t have Angular installed or your version is less than 1.2, run this command in your terminal:\n\n```\n    npm install -g @angular/cli\n```\n\nFor more information about Angular basics, head [here](https://angular.io).\n\nWe can now create our application by running: \n\n```\n    ng new angular5-pusher\n```\n\nAfter running this, we get a basic Angular starter project which we are going to build upon.\n\n\n## App component \n\nNow the view of the application is pretty simple. We have an image, a button to like the image and the count of images that have been liked. The `app.component.html` file looks like this:\n\n```\n    \u003cdiv class=\"main-app\"\u003e\n      \u003ch1\u003e\n        {{ title }}!\n      \u003c/h1\u003e\n      \u003cimg width=\"300\" alt=\"Pusher Logo\" src=\"../assets/pusher.svg\" /\u003e\n      \u003cdiv class=\"like\"\u003e\n        \u003cdiv style=\"margin-right: 1rem\"\u003e\n          \u003ch2\u003e{{ likes }} likes\u003c/h2\u003e\n        \u003c/div\u003e\n        \u003cbutton class=\"btn btn-lg btn-success\" (click)=\"liked()\"\u003eLike Image\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nWe can see from the above that the `buttonClick` event has been tied to a function called `liked()` which we will take a look at now.\n\nIn our `app.component.ts` file, we have the following: \n\n```\n    import { Component, OnInit } from '@angular/core';\n    //..\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    \n    export class AppComponent implements OnInit {\n      title = 'Pusher Liker';\n      likes: any =  10;\n      \n      constructor() {\n        // the pusher service will be injected as part of the constructor later\n      }\n      ngOnInit() {\n        // ..\n      }\n      // add to the number of likes to the server\n      liked() {\n        this.likes = parseInt(this.likes, 10) + 1;\n        // ..\n      }\n    }\n```\n\nNow we can see when we examine the component that we specify the `title` and the number of `likes` for starters. \n\n**NB:** In a real world application, you will want to make a request to your backend server to get the actual number of likes instead of  using static data.\n\nWe can also see that we plan on injecting a `pusherService` in the constructor of our app component. We are going to explain more about this in the next section.\n\n## Adding Pusher to your application\n\nAt this point, we have our application that allows us to like pictures, but other users don’t get realtime feedback as to the number of likes the picture actually has. In comes [Pusher](https://pusher.com) to save the day. Pusher allows you to add realtime functionality to your application without you having to stress so much about the logic of making this work.\n\nAll you need to do is to  `subscribe` to a channel and then `listen` for `events` - in simpler terms it’s like turning on a TV to a football match (channel ) and then waiting for a team to score a goal ( event ).\n\nNow lets see how to add this to our existing Pusher Liker Application .To use Pusher with Angular, we first need to install and load Pusher’s client library:\n\n```\n    npm install --save pusher-js\n```\n\nNow that we have successfully installed the library, the next thing we need to do is to add it as one of the third party scripts that will be loaded by Angular when our page is being loaded.\n\nIn the `.angular-cli.json` we include the following:\n\n\n    //...\n    \n    \"scripts\": [\"../node_modules/pusher-js/dist/web/pusher.min.js\"]\n    \n    //...\n\nNow lets get to using the pusher client.\n\nEarlier on, we spoke about the `PusherService` and now we are going to see how it works. In angular, there is a concept called `services` - which, as the name suggests,  helps you to do one thing really well. \n\nWe create our `PusherService` by running the command:\n\n```\n    ng generate service Pusher\n```\n\nThis creates the `pusher.service.ts`  and `pusher.service.spec.``ts` files. We are only going to be concerned with the `pusher.service.ts`\n\nAt he top of the `pusher.service.``ts` file we declare our Pusher constant so that Angular knows that we know what we are doing, and we are going to use the `Pusher` class from an external script which we loaded earlier:\n\n```\n    // pusher.service.ts \n    declare const Pusher: any;\n    // ...\n```\n\n \n Then, we import the necessary classes we are going to need:\n \n```\n    // .... pusher.service.ts\n    import { Injectable } from '@angular/core';\n    import { environment } from '../environments/environment';\n    import { HttpClient } from '@angular/common/http';\n    // .....\n```\n \nIf you used older versions of Angular, the new `HttpClient` may seem strange to you because it was just introduced with this new version to make life easier for Angular developers. With this new `HttpClient`, responses are defaulted to `JSON` and interceptors are now being used for easier error handling. You can read more about it [here](https://angular.io/api/common/http/HttpClient).\n\nWe also included the `environment` class, which contains some enviroment variables for pusher to work. The `enviroment.ts` file looks like this:\n\n```\n    // ... environment.ts \n    export const environment = {\n      production: false,\n      pusher: {\n        key: 'PUSHER_API_KEY',\n        cluster: 'PUSHER_CLUSTER',\n      }\n    };\n```\n\nThese details can be obtained from your Pusher app [dashboard](https://dashboard.pusher.com/).\n\nTo create a new app:\n1. Click “Create New App” from the left sidebar.\n2. Configure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n  \n![angular-realtime-create-app](//images.contentful.com/1es3ne0caaid/4xyhbHkzOEWwYACWQMUsy8/77b6407f347fd38dd348ec6e9478c4b1/angular-realtime-create-app.png)\n \n Now, back to our `pusher.service.``ts` file:\n \n```\n    //...pusher.service.ts\n    @Injectable()\n    export class PusherService {\n      pusher: any;\n      channel: any;\n      constructor(private http: HttpClient) {\n        this.pusher = new Pusher(environment.pusher.key, {\n          cluster: environment.pusher.cluster,\n          encrypted: true\n        });\n        this.channel = this.pusher.subscribe('events-channel');\n      }\n      \n      like( num_likes ) {\n        his.http.post('http://localhost:3120/update', {'likes': num_likes})\n        .subscribe(data =\u003e {});\n      }\n    }\n```\n \nIn the constructor for the `PusherService` , we included the `HttpClient` and  then `subscribed` to the `events-channel` . We also have another function that makes a `POST` request to our backend server with the number of likes as part of the `body`  of the request when the `like` button is clicked. \n\n\u003e NB : The implementation details of our  backend server will be built later in the article\n\nNow we will go back to our `app.component.``ts` file to see how we factor in the new Pusher service:\n\n```\n    //-- app.component.ts\n    import { Component, OnInit } from '@angular/core';\n    import { PusherService } from './pusher.service';\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent implements OnInit {\n      title = 'Pusher Liker';\n      likes: any =  10;\n      constructor(private pusherService: PusherService) {\n      }\n      ngOnInit() {\n        this.pusherService.channel.bind('new-like', data =\u003e {\n          this.likes = data.likes ;\n        });\n      }\n      // add to the number of likes to the server\n      liked() {\n        this.likes = parseInt(this.likes, 10) + 1;\n        this.pusherService.like( this.likes );\n      }\n    }\n```\n\nIn the above, we import the `pusherService` and then add it to our constructor. Now, when the component is created, we then bind the `pusherService` to the `new-like` event and we update the number of likes with the new number of likes that we get.\n\nNow you may be wondering, “it’s cool that we can now tell when the number of likes have increased and the update them, but what when someone actually clicks the button, what triggers the event?”\n\nAs we can see in the `liked()` function above, the `pusherService.like()` is also called to help make the request to the backend server to actually trigger the like event. \n\nNow that our front-end is ready, we can run the application by running:\n\n```\n    npm start\n```\n\n![angular-realtime-demo](//images.contentful.com/1es3ne0caaid/zuNaz7pMFaK8oeuey4As8/ef9d1369c3af410d0afc5d88a2e0be5f/angular-realtime-demo.gif)\n\n## Building the backend Server\n\nNow, we’ll take a quick look at the backend server that triggers the event and how it works. In the project directory we create a folder called `server` and in there is where we do all the work:\n\n```\n    mkdir server\n```\n\nIn the `server` directory, we run:\n\n```\n    npm init\n```\n\nAnd then we install the necessary modules we are going to need:\n\n```\n    npm install --save cors pusher express body-parser dotenv\n```\n\nOnce that’s done, we can now create our `server.js` in the same directory \n\nIn our `server.js` file, we do the following: \n\n### Import Node modules\n\n```\n    // -------------------------------\n    // Import Node Modules\n    // -------------------------------\n    require(\"dotenv\").config();\n    const cors = require(\"cors\");\n    const Pusher = require(\"pusher\");\n    const express = require(\"express\");\n    const bodyParser = require(\"body-parser\");\n```\n\n### Create app and load Middlewares\n\n```\n    // ------------------------------\n    // Create express app\n    // ------------------------------\n    const app = express();\n    // ------------------------------\n    // Load the middlewares\n    // ------------------------------\n    app.use(cors());\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n```\n\n### Create Pusher client\n\n```\n    // ....\n    const pusher = new Pusher({\n        appId: `${process.env.PUSHER_APP_ID}`,\n        key: `${process.env.PUSHER_API_KEY}`,\n        secret: `${process.env.PUSHER_API_SECRET}`,\n        cluster: `${process.env.PUSHER_APP_CLUSTER}`,\n        encrypted: true\n    });\n```\n\nNow add a `.env` file at the root of the `server`  folder with the following lines:\n\n```\n    PUSHER_APP_ID=[PUSHER_APP_ID]\n    PUSHER_API_KEY=[PUSHER_API_KEY]\n    PUSHER_API_SECRET=[PUSHER_API_SECRET]\n    PUSHER_APP_CLUSTER=[PUSHER_APP_CLUSTER]\n```\n\nThese details for the Pusher client can be obtained from your [Pusher dashboard](https://dashboard.pusher.com/).\n\n### Create application routes\n\n```\n    // -------------------------------\n    // Create app routes\n    // -------------------------------\n    app.post(\"/update\", function(req, res) {\n        // -------------------------------\n        // Trigger pusher event\n        // ------------------------------\n        pusher.trigger(\"events-channel\", \"new-like\", {\n          likes : `${req.body.likes}`\n        });\n    });\n```\nThis application only has one route that triggers the `new-like` event to the `events-channel` which our Angular frontend listens for and then updates accordingly.\n\n### Assign application\n\n```\n    app.listen(\"3120\");\n    console.log(\"Listening on localhost:3120\");\n```\n\nNow, the backend server will be run at `localhost:3120`.\n\n## Conclusion\n\nIn this article we have seen how to add realtime functionality to an Angular 5 application. The use cases for this are endless. You can give users realtime feedback as they interact with your applications — Twitter has a feature similar to this where you can actually see the number of likes, replies and retweets in realtime. \n\nThe ball is in your court now to implement that realtime feature you know your users will love to have.","metaTitle":"Making Angular 5 realtime with WebSockets","metaDescription":"Build an application that gives realtime feedback when a picture is liked with Angular 5 and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2jXImCuurO66mYOOuyUkSo","type":"Entry","createdAt":"2018-02-28T12:38:00.459Z","updatedAt":"2018-02-28T12:38:00.459Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a simple social network with Kotlin","url":"social-network-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/status-update-kotlin","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-02-19","description":"Social feed have become a major feature of many apps and websites. Learn how to build one with Kotlin and Node.js.","prerequisite":"A basic understanding of Kotlin and Node.js is needed to follow this tutorial.","content":"Social networks require live updates to your status stack. Take for instance, Facebook. If you are on your main profile page and you post a new status, it is reflected immediately on the page without need to refresh it.\n\nIt is engaging and saves users the extra muscle of having to click the refresh button. Taking this to a mobile context, if this feature is not present, we would have to restart the ativity or have to wait till the user closes the app and opens it again before he can see anything new. This is obviously a bad user experience.\n\n## What we will build\n\nIn this article, we will build a simple android app that shows our status as soon as it is posted.\n\n![social-network-kotlin-demo](//images.contentful.com/1es3ne0caaid/5a4CDFW9rqi2oM2KQIE8Sw/9a75e68b3c6f77616bd1558305b3f74b/social-network-kotlin-demo.gif)\n\n## Prerequisites \n\nYou need the following;\n\n- Knowledge of the Kotlin programming language\n- A Pusher application\n- Node JS - This is to enable us to setup a server.\n- [Android Studio](https://developer.android.com/studio/archive.html) - Android studio 3.0.1 is recommended as it is the latest stable version at the time of this publication and it integrates Kotlin support with ease.\n\n## Pusher app setup\n\nHead to the [Pusher dashboard](https://dashboard.pusher.com/), create an account if you have none, login to your dashboard, and create a new Pusher app.\n\n![social-network-kotlin-create-app](//images.contentful.com/1es3ne0caaid/5b4kPGLl8k2K6YcyUwgG4C/3ce3541b4296019db93c57021d0c43b8/social-network-kotlin-create-app.png)\n\nBe careful to take not of the cluster used, `eu` in our case. Open your app details and note the keys in the App Keys tab. You will need these later in the article.\n\n## Server setup\n\nWe will build a Node.js server and run it locally. We first create a new folder and name it accordingly, say `user-status-backend`.  `cd` to the folder, create a `package.json` file and paste this:\n \n```\n    {\n      \"name\": \"realtime-status-update\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\"\n      },\n      \"keywords\": [],\n      \"author\": \"\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.2\",\n        \"express\": \"^4.16.2\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nWe also create an `index.js` file within the folder and paste this:\n\n```\n    // Load dependencies\n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const app = express()\n    \n    // App middlewares\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // Initialize Pusher\n    var Pusher = require('pusher');\n    var pusher = new Pusher({\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    \n    // app's routes\n    app.post('/update-status', (req, res) =\u003e {\n    \n        pusher.trigger('my-channel', 'my-event', {\n            \"message\": req.query.status\n        });\n    \n        res.json(req.query.status)\n    \n    })\n    \n    app.get('/', (req, res, next) =\u003e {\n        res.json(\"Yeaaaa!!!!\")\n    })\n    \n    app.listen(3000, () =\u003e console.log('Running application...'))\n```\n\nOur server has one major endpoint, `update-status` which accepts an `HTTP POST` method with the message to be posted sent as one of the parameters. \n\n\u003e Use your app keys in this file.\n\nWe then install the Node and Pusher modules in our folder directory using the following commands:\n\n```\n    npm install\n```\n\nFinally, we run the server:\n\n```\n    node index.js\n```\n\nWith this, our server is up and running on port `3000`, you can check it out on your browser first before forging ahead.\n\n## Building our realtime Kotlin application\n\n### Setting up the project\n\nOpen android studio and create a new project. Details to be provided include: the application name and the domain name. Click the “include kotlin support” checkbox to enable Kotlin in the project. \n\nNext up, you select the `minimum SDK` which is the least Android version our app will support. Choose Empty Activity when asked to add an activity.\n\n![social-network-kotlin-create-new-project](//images.contentful.com/1es3ne0caaid/2PevzqZ2UUeywQ8keIeIoq/df1386314dbdfd0db3857fcde0a05391/social-network-kotlin-create-new-project.png)\n\nThe next screen gives you a chance to customize the name of the activity. We will leave ours as the default `MainActivity`  and click finish. \n\n### Adding dependencies\n\nWe need the support library dependencies, Pusher client dependency and Retrofit dependency. The first will give us extra features to access while using the Android SDK, Pusher will provide us with the much needed real-time feature and Retrofit will enable us make network requests to our server. These dependencies will be added in our app-module `build.gradle`:\n\n```\n    // pusher dependency\n    compile 'com.pusher:pusher-java-client:1.5.0'\n    \n    // part of the support libraries\n    implementation 'com.android.support:design:26.1.0'\n    \n    // retrofit dependency\n    implementation 'com.squareup.retrofit2:retrofit:2.3.0'\n    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'\n```\n\nAfter adding the dependencies, we sync it so that it can be downloaded and made available for use in our app.\n\n### Setting up Retrofit\n\n[Retrofit](https://github.com/square/retrofit) is a type-safe HTTP client for Android and Java built by [Square, Inc](https://github.com/square). It is used for making network requests. For us to use Retrofit, we need an interface to define our endpoints. Create a new Kotlin file named `ApiInterface.kt` and paste this:\n\n```\n    import retrofit2.Call\n    import retrofit2.http.POST\n    import retrofit2.http.Query\n    \n    interface ApiInterface {\n        @POST(\"/update-status\")\n        fun updateStatus(@Query(\"status\") status:String): Call\u003cString\u003e\n    }\n```\n\nThereafter, we need to provide a Retrofit object. We will do this by creating a class named `RetrofitClient.kt` and pasting this: \n\n```\n    import okhttp3.OkHttpClient\n    import retrofit2.Retrofit\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    \n    class RetrofitClient {\n        fun getClient(): ApiInterface {\n            val httpClient = OkHttpClient.Builder()\n            val builder = Retrofit.Builder()\n                    .baseUrl(\"http://10.0.2.2:3000/\")\n                    .addConverterFactory(ScalarsConverterFactory.create())\n    \n            val retrofit = builder\n                    .client(httpClient.build())\n                    .build()\n            return retrofit.create(ApiInterface::class.java)\n        }\n    }\n```\n\nThe `getClient` function gives us an instance of Retrofit. While declaring the Retrofit object, the base url for our network requests and the converter to be used are defined.\n\n\n\u003e We are using `10.0.2.2`  because this is how the Android emulator recognizes localhost as against the usual  `127.0.0.1` \n\nWe also add the internet permission in the `AndroidManifest.xml` file. This should be done under the `\u003cmanifest\u003e` tag:\n\n```\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        package=\"YOUR_APP_PACKAGE_NAME\"\u003e\n    \n        \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n    \n    \u003c/manifest\u003e    \n```\n\n### Designing our layout\n\nIn this app, we will have just one screen. It will contain an `EditText` for our input, a `Button` to send the message inputted and trigger a request to the server, and finally a `RecyclerView` to display our status messages. This will be housed in the `activity_main.xml` layout file:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_margin=\"16dp\"\n        android:layout_height=\"match_parent\"\n        tools:showIn=\"@layout/activity_main\"\u003e\n    \n        \u003cLinearLayout\n            android:layout_width=\"match_parent\"\n            android:orientation=\"vertical\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n            \u003cEditText\n                android:paddingLeft=\"10dp\"\n                android:hint=\"Whats on your mind?\"\n                android:background=\"@drawable/background\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:minHeight=\"100dp\"\n                android:id=\"@+id/newStatus\" /\u003e\n    \n            \u003cButton\n                android:layout_gravity=\"end\"\n                android:id=\"@+id/buttonPost\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"post\" /\u003e\n    \n            \u003candroid.support.v7.widget.RecyclerView\n                android:id=\"@+id/recyclerView\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"/\u003e\n    \n        \u003c/LinearLayout\u003e\n    \n    \u003c/ScrollView\u003e\n```    \n\nWe added a seprate drawable as background for the `EditText` tag. This gives it a box like look. Create a new drawable resource named `background.xml` and paste this:\n\n```\n    \u003cshape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:thickness=\"0dp\"\n        android:shape=\"rectangle\"\u003e\n        \u003csolid android:color=\"#FFFFFF\" /\u003e\n        \u003cstroke android:width=\"2dp\"\n            android:color=\"@color/colorAccent\"/\u003e\n    \n    \u003c/shape\u003e\n```\n\nIf you build the project right now our layout will look like this:\n\n\n![social-network-kotlin-app-ui](//images.contentful.com/1es3ne0caaid/7DAvEkCwRqOeKsAWkGA86g/40f69dce56f672d2ba0fdba46f76cc3f/social-network-kotlin-app-ui.png)\n\n\nThis takes the shape of a generic social media platform where status updates are made. Next up, we create an adapter to handle the display of status messages on a list. Create a new class `StatusAdapter.kt` and paste this:\n\n```\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    import java.util.*\n    \n    class StatusAdapter : RecyclerView.Adapter\u003cStatusAdapter.ViewHolder\u003e() {\n    \n        private var statusList = ArrayList\u003cString\u003e()\n        private var reversedList = ArrayList\u003cString\u003e()\n    \n        fun addMessage(newMessage: String){\n            statusList.add(newMessage)\n            reversedList = statusList\n            Collections.reverse(reversedList)\n            notifyDataSetChanged()\n        }\n    \n        override fun getItemCount(): Int {\n            return statusList.size\n        }\n    \n        override fun onCreateViewHolder(parent: ViewGroup?, viewType: Int): ViewHolder {\n            val view = LayoutInflater.from(parent!!.context).inflate(android.R.layout.simple_list_item_1,parent,false)\n            return ViewHolder(view)\n        }\n    \n        override fun onBindViewHolder(holder: ViewHolder?, position: Int) {\n            holder!!.statusText.text = reversedList[position]\n        }\n    \n        inner class ViewHolder(itemView: View?): RecyclerView.ViewHolder(itemView) {\n            var statusText: TextView = itemView!!.findViewById(android.R.id.text1)\n        }\n    \n    }\n```\n\nThe `onCreateViewHolder` function returns an instance of our `ViewHolder`  coupled with the view that gives us the layout design for each list item. The `addMessage` function adds a new message to the list. Still in this function, we also assign `list` to `reversedList` and reverse `reversedList` so that we can have the most recent updates on top of the list. The `reversedList` is used based on position to display each item in the `onBindViewHolder` function.\n\nIn the `MainActivity` class, paste this:\n\n```\n    import android.app.Activity\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.view.View\n    import android.view.inputmethod.InputMethodManager\n    import android.widget.Toast\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_main.*\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class MainActivity : AppCompatActivity() {\n    \n        lateinit var pusher:Pusher\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n    \n            // setup recycler view and adapter\n            val adapter = StatusAdapter()\n            recyclerView.layoutManager = LinearLayoutManager(this)\n            recyclerView.adapter = adapter\n    \n            // setup pusher to receive status update\n            val options = PusherOptions()\n            options.setCluster(PUSHER_CLUSTER)\n            pusher = Pusher(PUSHER_API_KEY, options)\n            val channel = pusher.subscribe(\"my-channel\")\n            channel.bind(\"my-event\") { channelName, eventName, data -\u003e\n                val jsonObject = JSONObject(data)\n                runOnUiThread { adapter.addMessage(jsonObject.getString(\"message\")) }\n            }\n    \n            // post status to server\n            buttonPost.setOnClickListener {\n    \n                if (newStatus.text.isNotEmpty())\n                    RetrofitClient().getClient().updateStatus(newStatus.text.toString()).enqueue(object : Callback\u003cString\u003e {\n                        override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                            newStatus.text.clear()\n                            hideKeyboard()\n                        }\n    \n                        override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n                            Toast.makeText(this@MainActivity,\"Error occurred\",Toast.LENGTH_SHORT).show()\n                        }\n                    })\n            }\n    \n        }\n    \n        private fun hideKeyboard() {\n            val imm = this.getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager\n            var view = this.currentFocus\n            if (view == null)\n                view = View(this)\n            imm.hideSoftInputFromWindow(view.windowToken, 0)\n        }\n    \n        override fun onResume() {\n            super.onResume()\n            pusher.connect()\n        }\n    \n        override fun onPause() {\n            super.onPause()\n            pusher.disconnect()\n        }\n    \n    }\n```\n \nIn this snippet, we initialized the recycler view together with its adapter, we initialized Pusher using our keys from our dashboard and subscribed to a channel so as to get realtime updates, then we created a listener for our button that posts a message to the server when clicked. \n\nFinally, we connected and disconnected Pusher in the `onResume` and `onPause` functions.\n\nWith this, the application is ready! When we run it, we see results like this example:\n\n![social-network-kotlin-demo-2](//images.contentful.com/1es3ne0caaid/494w4EZhOMaquswAs2wAQ6/2ca493bb960040d48ea088c997afb0ec/social-network-kotlin-demo-2.gif)\n\n## Conclusion\n\nIn this article, we have used Pusher to quickly and easily add realtime updates to the social network app.","metaTitle":"Build a simple social network with Kotlin","metaDescription":"Learn how to build a live social feed with Kotlin and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5PGtao88o0iWAGs6kaocMc","type":"Entry","createdAt":"2018-02-28T12:35:03.059Z","updatedAt":"2018-02-28T12:35:03.059Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime payment dashboard with Stripe","url":"realtime-payment-dashboard-stripe","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/realtime-payment-dashboard","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-02-14","description":"Build a live admin dashboard with Vue.js and Node.js, accepting payments through Stripe.","prerequisite":"A basic understanding of Vue.js and Node.js is needed to follow this tutorial.","content":"In this article, we are going to be looking at how to accept payments from a user using [Stripe](https://stripe.com) and displaying sales on an admin dashboard in realtime using*text in italic* [Pusher](https://pusher.com).\n\n## How it works\n\nStripe is used to handle user payments and Pusher adds realtime functionality to our application.\n\n![realtime-payment-dashboard-stripe-demo](//images.contentful.com/1es3ne0caaid/1LkoYsTPec4goWWyAGYaSu/fe6153d7fc28ccc4a5e74c6ffbc4ba33/realtime-payment-dashboard-stripe-demo.gif)\n\n## Dependencies\n\nBefore you begin, you need [Node](https://nodejs.org/) and Node Package Manager( [npm](https://npmjs.com) ) installed on your machine. To verify your installation, please run the following commands on your terminal\n\n```\n    npm -v\n    node -v\n```\n\nIf you get version numbers as your response, then it means that you already have them installed and you are good to go.\n\n## Setting up a Stripe account\n\n[Stripe](https://stripe.com) is a platform that helps process online payment. We will use this to process payments in our store.\n\nTo set up a Stripe account, head over [here](https://dashboard.stripe.com/register) and then fill out the form.\n\n![realtime-payment-dashboard-stripe-signup](//images.contentful.com/1es3ne0caaid/1fQGvRyQIYEsgY2WOMymy0/025045bdb5c077268f01e9226935c3e0/realtime-payment-dashboard-stripe-signup.png)\n\nOnce this step is completed, you will be redirected to your [dashboard](https://dashboard.stripe.com/test/dashboard):\n\n![realtime-payment-dashboard-stripe-dashboard](//images.contentful.com/1es3ne0caaid/3zxY5XAJJYgIYAksWKOkqA/a846796ec876519937068bd59d0c4dfb/realtime-payment-dashboard-stripe-dashboard.png)\n\n![realtime-payment-dashboard-stripe-api-keys](//images.contentful.com/1es3ne0caaid/2fY7XiOmeQYAAiEIEsmqY8/857b3b2dee3d73a20f9c41935bb00ed4/realtime-payment-dashboard-stripe-api-keys.png)\n\nNote your `STRIPE_PUBLISHABLE_KEY` and `STRIPE_SECRET_KEY`. We are going to use them later on as we build our application\n\n## Setting up a Pusher account\n\n[Pusher](https://pusher.com) allows you to incorporate realtime functionality into your applications. To get started with Pusher, head over [here](https://dashboard.pusher.com/accounts/sign_up).\n\nOnce you're signed in, you will be redirected to your dashboard. You then need to create a new app.\nAfter your new app is created, you need to note your `PUSHER_APP_ID`, `PUSHER_API_KEY`, `PUSHER_API_SECRET`, `PUSHER_API_CLUSTER` .\n\nOnce you have these details, you are ready to begin building your app.\n\n**Note** : All source code is available [here](https://github.com/oreHGA/realtime-payment-dashboard) \n\n## Setting up the backend server\n\nTo handle your API calls to Stripe and Pusher, we will use an Express server.\n\n### Install node modules\n\nWe need some node modules that are essential for our application to work:\n\n- cors - to enable cross origin resource sharing on our app\n- express - this is our web server\n- pusher - this package enables us and makes it easy to make calls to pushers api\n- body-parser - used in parsing the contents of a request in a json format\n- multipart - to enable multipart on our app\n- stripe - to allow us communicate seamlessly with our stripe api\n- ejs - this will be our view engine for the user facing side of the application\n\nMake a new directory and change directory into it:\n\n```\n    mkdir realtime-dashboard \u0026\u0026 cd realtime-dashboard\n```\n\nThen initialize a node project and install the node modules:\n\n```\n    # Initialze\n    npm init -y\n    # Install\n    npm install cors express ejs body-parser connect-multiparty pusher stripe --save\n```\n\nYou have now installed all the modules necessary for you to build the project.\n\n### Create our server.js file\n\nNow we need to create a file that will contain the instructions needed for our server to work\nIn your `realtime-dashboard` directory:\n\n```\n    touch server.js\n```\n\nThis is the start up file that will be referenced when your server is running\nIn your server.js file, you need to:\n\n#### Import the node modules\n\n```\n    const cors  = require('cors')\n    const Pusher = require('pusher')\n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const multipart = require('connect-multiparty')\n    const stripe = require('stripe')('STRIPE_API_KEY')\n        [...]\n```\n\nOnce you have imported your node modules, you can then use them freely all through your script.\n\n#### Create your express app\n\nNow we create our express app by adding the following to the `server.js`:\n\n```\n    [...]\n    const app = express()\n    [...]\n```\n\n#### Load the middleware\n\nWe load the middleware in our `server.js` by adding the following:\n\n```\n    ...\n    app.use(cors());\n    app.set('view engine', 'ejs');\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false}));\n    const multipartMiddleware = multipart();\n    ...\n```\n\nHere, we set our app to use `cors` and set the view engine to `ejs`. We also instructed the app the parse the requests in JSON format.\n\n#### Create the Pusher client\n\nWe need to create our Pusher client to enable us to trigger events from our app to a specific channel. Our admin dashboard will also be listening for events on the same channel (more details on this as we progress). \nWe create the client by adding this to our file:\n\n```\n    [...]\n    const pusher = new Pusher({\n        appId: 'PUSHERE_APP_ID',\n        key: 'PUSHER_API_KEY',\n        secret: 'PUSHER_API_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    [...]\n```\n\nOnce this is done, we have successfully created our Pusher client.\n\n#### Create app routes\n\nWe need to decide what the user sees when visiting different parts of our app. Since this is a simple application, we only need two routes for the user facing side:\n\n- Route that loads the checkout page.\n- Route that handles the payment and communicated with the stripe API.\n\nEarlier on, we set our  `view engine` to `ejs` and we will use this here:\n\n```\n    [...]\n    app.get('/', function(req, res){\n        res.render('index');\n    });\n    \n    app.post('/gen-payment', multipartMiddleware, function(req, res){\n        let amount = 500;\n        stripe.customers.create({\n            email: req.body.stripeEmail,\n            source: req.body.stripeToken\n        })\n        .then(customer =\u003e\n            stripe.charges.create({\n                amount,\n                description: 'One camera bought from shop',\n                currency: \"usd\",\n                customer: customer.id\n            })\n        )\n        .then(charge =\u003e {\n            pusher.trigger('sales', 'payment-completed', {\n                \"time\" : new Date().toDateString(),\n                \"value\" : `\\$${charge.amount/100}`,\n                \"message\" : \"payment complete...duh!\",\n                \"description\" : charge.description\n            });\n            console.log( charge );\n            res.render(\"charge\");\n        });\n    });\n    [...]\n```\n\nLet's shed more light on the `gen-payment` route. We accept the `stripeEmail` and the `stripeToken` which would be passed as part of the body in the post request to the route. We then create a new `customer` using the `stripeEmail` and the `stripeToken`. The `create` function returns a `promise` and so once the customer is created, we initiate a new `charge` for the customer. If this charge is successful, i.e we are able to completely charge the customer, then we trigger a `payment-completed` event to the `sales` channel.\n\n#### Assign a port to your app\n\nYou need to choose a port you want your app to run on. You do this by adding this following to your `server.js` file:\n\n```\n    [...]\n    app.listen('3120')\n    [...]\n```\n\nAt this point the backend server is all set up. Now we need to go to the views to see how data is passed to the server.\n\n## Setting up the frontend\n\nCreate a `views` directory. In the views directory create your `index.ejs` and `charge.ejs`:\n\n```\n    mkdir views \u0026\u0026 cd views\n    touch index.ejs charge.ejs\n```\n\nIn our `index.ejs` we need to accept user payment. To make it more secure when handling card information, Stripe has an embedded payment form called [Checkout](https://stripe.com/docs/checkout/tutorial) which we will use to collect user's card data securely. The following is a truncated version of the form that sends data to our server. You can see the complete [code on github](https://github.com/christiannwamba/realtime-payment-dashboard/blob/master/views/index.ejs).\n\n```\n    \u003cform method=\"POST\" action=\"http://localhost:3120/gen-payment\" enctype=\"multipart/form-data\"/\u003e\n        \u003cscript\n            src=\"https://checkout.stripe.com/checkout.js\" class=\"stripe-button\"\n            data-key=\"PUSBLISHABLE_API_KEY\"\n            data-amount=\"500\"\n            data-name=\"Pay OG\"\n            data-description=\"Send money to OG\"\n            data-image=\"https://stripe.com/img/documentation/checkout/marketplace.png\"\n            data-locale=\"auto\"\u003e\n        \u003c/script\u003e\n    \u003c/form\u003e\n```\n\nWe submit the form to the `/gen-payment` route on our server. We include the `checkout.js` script and the following :\n\n- data-key: your publishable `API_KEY` gotten from your [dashboard](https://dashboard.stripe.com/account/apikeys)\n- data-amount: the amount you plan on charging\n- data-name: name of the store\n- data-description: description of your payment\n- data-image: store image\n\nOnce this is sent to the server and the request is completed successfully, we render the `charge.ejs` view to the user telling the use that their payment is complete:\n\n```\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003ctitle\u003eRealtime Payment Dashboard\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e \n        \u003clink rel=\"stylesheet\" href=\"https://codepen.io/drehimself/pen/VvYLmV.css\"\u003e \n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cnav\u003e\n            \u003cdiv class=\"container\"\u003e\n                \u003cul class=\"navbar-left\"\u003e\n                \u003cli\u003e\u003ca href=\"#\"\u003eHome\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#about\"\u003eAbout\u003c/a\u003e\u003c/li\u003e\n                \u003c/ul\u003e\n            \n                \u003cul class=\"navbar-right\"\u003e\n                \u003cli\u003e\u003ca href=\"#\" id=\"cart\"\u003e\u003ci class=\"fa fa-shopping-cart\"\u003e\u003c/i\u003e Cart \u003cspan class=\"badge\"\u003e0\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e \n        \u003c/nav\u003e\n                \n        \u003cscript\u003e\n            alert(\"Payment Complete\");\n        \u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\" integrity=\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n## Setting up the admin dashboard\n\nWe want our admin dashboard to show completed payments as they are made without having to refresh the page. To do this, we are going to make use of [Vue.js](https://vuejs.org) and [Pusher](https://pusher.com).\n\nBefore we begin, we need to install the `vue-cli` by running the following command:\n\n```\n    npm install -g vue-cli\n```\n\nThis will install it globally on our local machine. To confirm your installation of the `vue-cli` you can run:\n\n```\n    vue --version\n```\n\nIf you get the version number as a result then you're all set!\n\nTo create the `admin` server, run the following command in the `realtime-dashboard` directory:\n\n```\n    vue init webpack admin\n```\n\nThis will ask you a few questions on project name, description, author, etc. then it will create a new Vue project for us with some boilerplate already set up.\n\n## Installing the pusher-js module\n\nWe need to install `pusher-js` module that allows us to use pusher with our vue frontend. To do this, change directory into the admin directory and run the following command:\n\n```\n    npm install -S pusher-js\n```\n\n### Creating the dashboard component\n\nNow we want to create our `dashboard` component:\n\n```\n    cd admin/src/components\n    touch Dashboard.vue\n```\n\nIn the `Dashboard.vue`, we need to import the `pusher.js` module:\n\n```\n    \u003cscript\u003e\n    import Pusher from 'pusher-js'\n    [...]\n```\n\nWe then create some mock payments to populate the dashboard:\n\n```\n    [...]\n    const MOCK_PAYMENTS = [\n      {time : '12th Dec, 2017', description: \"Shoes\", value : \"$5\"},\n      {time : '12th Dec, 2017', description: \"Maga don pay\", value : \"$12\"}\n    ]\n    [...]\n```\n\nNow we describe our component itself:\n\n```\n    [...]\n    export default {\n      name: 'Dashboard',\n      data () {\n        return {\n          payments : MOCK_PAYMENTS\n        }\n      },\n      created () {\n        this.subscribe();\n      },\n      methods: {\n        subscribe () {\n          let pusher = new Pusher('PUSHER_API_KEY', {\n              cluster: 'PUSHER_CLUSTER',\n              encrypted: true\n          });\n          pusher.subscribe('sales');\n          pusher.bind('payment-completed', data =\u003e {\n            this.payments.unshift(data);\n          });\n        }\n      }\n    }\n    \u003c/script\u003e\n    [...]\n```\n\nIn the `subscribe` method above, we subscribe to the `sales` channel and then listen for the `payment-completed` event. When a new `payment-completed` event is broadcast from the backend server on the `sales`, our frontend server picks it up and the adds it to the `payments` array of the component.\n\nThe `Dashboard.vue` also has a template which looks like this:\n\n```\n    [...]\n    \u003ctemplate\u003e\n      \u003cdiv class=\"container-fluid\"\u003e\n        \u003ctable class=\"table table-striped\"\u003e\n          \u003cthead\u003e\n            \u003ctr\u003e\n              \u003ctd\u003eTime\u003c/td\u003e\n              \u003ctd\u003eValue\u003c/td\u003e\n              \u003ctd\u003eDescription\u003c/td\u003e\n            \u003c/tr\u003e\n          \u003c/thead\u003e\n    \n          \u003ctbody\u003e\n            \u003ctr v-for=\"payment in payments\"\u003e\n              \u003ctd\u003e{{ payment.time }}\u003c/td\u003e \n              \u003ctd\u003e{{ payment.value }}\u003c/td\u003e   \n              \u003ctd\u003e{{ payment.description }}\u003c/td\u003e   \n            \u003c/tr\u003e \n          \u003c/tbody\u003e\n        \u003c/table\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    [...]\n```\n\nAnd some scoped css styling: \n\n```\n    \u003cstyle scoped\u003e\n    h1, h2 {\n      font-weight: normal;\n    }\n    ul {\n      list-style-type: none;\n      padding: 0;\n    }\n    li {\n      display: inline-block;\n      margin: 0 10px;\n    }\n    a {\n      color: #42b983;\n    }\n    .table{\n      background-color : white;\n    }\n    \u003c/style\u003e\n```\n\n### Importing the dashboard component in our App.vue\n\nNow that our dashboard component is ready, we need to import it in our `App.vue` so that I would be picked up when the view is being compiled\n\n```\n    [...]\n    import Dashboard from './components/Dashboard'\n    export default {\n      name: 'app',\n      components: {\n        Dashboard\n      }\n    }\n    [...]\n```\n\nOnce this is done, you should be ready to run your frontend server. You can can do this using the command:\n\n```\n    npm run dev\n```\n\nNow you can run the `Dashboard` side-by-side with the `Store` and then see as purchases are being made in realtime:\n\n![realtime-payment-dashboard-stripe-demo](//images.contentful.com/1es3ne0caaid/1LkoYsTPec4goWWyAGYaSu/fe6153d7fc28ccc4a5e74c6ffbc4ba33/realtime-payment-dashboard-stripe-demo.gif)\n\n## Conclusion\n\nWe have seen how to build a realtime payment dashboard using Pusher, Stripe and some Vue.js. There are many more use cases where realtime functionality will give you an edge. A big advantage is that you get to obtain realtime insights as to how users interact with your application.","metaTitle":"Build a realtime payment dashboard with Stripe","metaDescription":"Learn how to build a live payment dashboard with Stripe, Vue.js and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2U9mAVUR3aeeW2YIM24W2O","type":"Entry","createdAt":"2018-02-22T15:02:42.776Z","updatedAt":"2018-02-28T14:43:57.656Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an activity feed in Android ","url":"activity-feed-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/feed-pusher-android","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-02-14","description":"Discover how you can create a realtime activity feed for your Android app.","prerequisite":"A basic understanding of Java and Node.js is needed to follow this tutorial.","content":"We'd like to track and visualize our applications in a central place. Feeds are great for this! Let's build an Android app with an activity feed showing the temperature of your home.\n\nIn this tutorial, using [Pusher](https://pusher.com), we are going to build a feed as an Android app to monitor the activity of a [Node.js](https://nodejs.org) REST API. Every time an endpoint of the API is hit, it will publish an event with some information (let's say temperatures) to a channel. This event will be received in realtime, on all the connected Android devices.\n\nThis is how our final Android app will look like:\n\n![activity-feed-android-demo](//images.contentful.com/1es3ne0caaid/1WGAtH6OC86GEaAKKWm2YS/1b76e83dad7a0470f499e2ccbd382b59/activity-feed-android-demo.gif)\n\nFor the back-end, we will be using [Node.js](https://nodejs.org) with [Express](https://expressjs.com) to create a simple REST API. A basic knowledge of Node/Express is required to understand the code, but we won't be using a database or anything special so you can replace this stack with the one you're most comfortable with. The source code of this part is also available on [Github](https://github.com/eh3rrera/node-api-pusher).\n\nSo let's get started!\n\n## Setting up Pusher\n\nCreate a free account at [https://pusher.com/signup](https://pusher.com/signup).\n\nWhen you first log in, you'll be asked to enter some configuration options:\n\n![activity-feed-android-create-app](//images.contentful.com/1es3ne0caaid/2yiZXxFDc4ys0Ui0acuK8E/e942424e38712df4c88e55a5e4d0ad44/activity-feed-android-create-app.png)\n\nEnter a name, choose *Android* as your front-end tech, and *Node.js* as your back-end tech. This will give you some sample code to get you started:\n\n![activity-feed-android-pusher-libraries](//images.contentful.com/1es3ne0caaid/4Yi7ILOJhCE46KmqeKC4yy/acef29d86deb38cdf3d95d1b1b739e12/activity-feed-android-pusher-libraries.png)\n\nBut don't worry, this won't lock you into this specific set of technologies, you can always change them. With Pusher, you can use any combination of libraries.\n\nThen go to the *App Keys* tab to copy your App ID, Key, and Secret credentials, we'll need them later.\n\n## The Node server\n\nFirst, let's create a default `package.json` configuration file with:\n\n``` \nnpm init -y\n```\n\nWe'll need Express, Pusher, and other dependencies, let's add them with:\n\n``` \nnpm install --save express body-parser pusher\n```\n\nIn case a future version of a dependency breaks the code, here's the dependencies section on the `package.json` file:\n\n```\n{\n  ...\n    \"dependencies\": {\n    \"body-parser\": \"1.16.0\",\n    \"express\": \"4.14.1\",\n    \"pusher\": \"1.5.1\"\n  }\n}\n```\n\nNext, create a [server.js](https://github.com/eh3rrera/node-api-pusher/blob/16b75dcd39cde3bb0f454bfed808a7e80e8c8c93/server.js) file. First, let's require the modules we're going to need:\n\n```\nvar express = require('express');\nvar bodyParser = require('body-parser');\nvar crypto = require('crypto');\nvar Pusher = require('pusher');\n```\n\nThen, configure the Express object:\n\n```\nvar app = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n```\n\nNext, the Pusher object is created by passing the configuration object with the ID, key, and the secret for the app created in the [Pusher Dashboard](https://dashboard.pusher.com):\n\n```\nvar pusher = new Pusher({\n  appId      : process.env.PUSHER_APP_ID,\n  key        : process.env.PUSHER_APP_KEY,\n  secret     : process.env.PUSHER_APP_SECRET,\n  encrypted  : true,\n});\n```\n\nPusher will be used to publish any events that happen in our application. These events have a *channel*, which allows events to relate to a particular topic, an *event-name* used to identify the type of the event, and a *payload*, which you can attach any additional information to the message.\n\nWe are going to publish an event to a Pusher channel when an endpoint of our API is called to create/update/delete a record, and send the information as an attachment so we can show it in an activity feed.\n\nHere's the definition of our API's REST endpoints. Notice how an ID for the record is created using the first four characters of the `hex` string generated by `crypto.randomBytes(16)` (to avoid using an external library):\n\n```\napp.post('/api', function (req, res) {\n  var event = {\n    data: req.body.data,\n    id: crypto.randomBytes(16).toString('hex').substring(0, 4),\n  };\n\n  // Do something with the data...\n\n  // Publish event to the Pusher channel\n  pusher.trigger(channel, 'created', event);\n\n  res.status(200).json(event);\n});\n\napp.route('/api/:id')\n  // PUT  endpoint to update a record\n  .put(function (req, res) {\n    var event = {\n     data: req.body.data,\n     id: req.params.id,\n    };\n\n    // Do something with the data...\n\n    // Publish event to the Pusher channel\n    pusher.trigger(channel, 'updated', event);\n\n    res.status(200).json(event);\n  })\n\n  // DELETE  endpoint to delete a record\n  .delete(function (req, res) {\n    var event = {\n      id: req.params.id,\n    };\n\n    // Do something with the data...\n\n    // Publish event to the Pusher channel\n    pusher.trigger(channel, 'deleted', event);\n\n    res.status(200).json(event);\n  });\n```\n\nThis way, a POST request like this:\n\n``` \n{\n  \"data\": \"Temperature: 75°F\"\n}\n```\n\nWill return something like the following:\n\n``` \n{\n  \"data\": \"Temperature: 75°F\",\n  \"id\": \"d2t6\"\n}\n```\n\nWe start the server with:\n\n```\napp.listen(3000, function () {\n  console.log('Node server running on port 3000');\n});\n```\n\nAnd that's all. To run the server, execute the following command passing your Pusher credentials:\n\n``` \nPUSHER_APP_ID=XXXXXX PUSHER_APP_KEY=XXXXXX PUSHER_APP_SECRET=XXXXXX node server.js\n```\n\n## The android app\n\nOpen Android Studio and create a new project:\n\n![activity-feed-android-create-project](//images.contentful.com/1es3ne0caaid/1Kv2lAKIY4mwoY2Mywq0gI/8c26426d81ec3da7247246baff95fc9a/activity-feed-android-create-project.png)\n\nWe're not going to use anything special, so we can safely support a low API level:\n\n![activity-feed-android-target-device](//images.contentful.com/1es3ne0caaid/27mSDfxqYowQs80KIOcQAM/96714408b4c7866569e31c57eaa54aa3/activity-feed-android-target-device.png)\n\nNext, create an initial empty activity:\n\n![activity-feed-android-add-activity](//images.contentful.com/1es3ne0caaid/5LmK2Ij7NemKwsmoe4Es84/47eb17b20b83969fd71ce839df85865c/activity-feed-android-add-activity.png)\n\nAnd use the default name of `MainActivity` with backward compatibility:\n\n![activity-feed-android-customize-activity](//images.contentful.com/1es3ne0caaid/3q9QEPf3NmOKco6S2aiciM/121fdec6ed6f91779d08ddd69e0488b8/activity-feed-android-customize-activity.png)\n\nOnce everything is set up, let's install the project dependencies. In the `dependencies` section of the `build.gradle` file of your application module add:\n\n```\ndependencies {\n    ...\n    compile 'com.pusher:pusher-java-client:1.4.0'\n    compile 'com.android.support:recyclerview-v7:25.1.1'\n    compile 'com.android.support:cardview-v7:25.1.1'\n    compile 'com.github.curioustechizen.android-ago:library:1.3.2'\n    compile 'com.google.code.gson:gson:2.4'\n    ...\n}\n```\n\nAt the time of this writing, the latest SDK version is 25, so that's my target SDK version.\n\nWe're going to use the `RecyclerView` and `CardView` components from the [Support Library](https://developer.android.com/topic/libraries/support-library/features.html), so make sure you have it installed (in *Tools -\u003e Android -\u003e SDK Manager -\u003e SDK Tools tab* the *Android Support Repository* must be installed).\n\nSync the Gradle project so the modules can be installed and the project built.\n\nBefore we forget (I always do), let's add the `INTERNET` permission to the `AndroidManifest.xml` file. This is required so we can connect to Pusher and get the events in realtime:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.pusher.feed\"\u003e\n\n    \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n\n    \u003capplication\n        ...\n    \u003c/application\u003e\n\n\u003c/manifest\u003e\n```\n\nIf you want to modify the style of the app, in the `res/values` folder, modify the [colors.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/values/colors.xml) file so it looks like this:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\n\u003cresources\u003e\n    \u003ccolor name=\"primary\"\u003e#03A9F4\u003c/color\u003e\n    \u003ccolor name=\"primary_dark\"\u003e#0288D1\u003c/color\u003e\n    \u003ccolor name=\"primary_light\"\u003e#B3E5FC\u003c/color\u003e\n    \u003ccolor name=\"accent\"\u003e#FF4081\u003c/color\u003e\n    \u003ccolor name=\"primary_text\"\u003e#212121\u003c/color\u003e\n    \u003ccolor name=\"secondary_text\"\u003e#757575\u003c/color\u003e\n    \u003ccolor name=\"icons\"\u003e#FFFFFF\u003c/color\u003e\n    \u003ccolor name=\"divider\"\u003e#BDBDBD\u003c/color\u003e\n\u003c/resources\u003e\n```\n\nAs well as the [styles.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/values/styles.xml) file to match these color definitions:\n\n```\n\u003cresources\u003e\n\n    \u003c!-- Base application theme. --\u003e\n    \u003cstyle name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\"\u003e\n        \u003c!-- Customize your theme here. --\u003e\n        \u003citem name=\"colorPrimary\"\u003e@color/primary\u003c/item\u003e\n        \u003citem name=\"colorPrimaryDark\"\u003e@color/primary_dark\u003c/item\u003e\n        \u003citem name=\"colorAccent\"\u003e@color/accent\u003c/item\u003e\n    \u003c/style\u003e\n\n\u003c/resources\u003e\n```\n\nNow, modify the layout file [activity_main.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/layout/activity_main.xml) so it looks like this:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n    tools:context=\"com.pusher.feed.MainActivity\"\u003e\n\n    \u003candroid.support.v7.widget.RecyclerView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_alignParentTop=\"true\"\n        android:layout_alignParentLeft=\"true\"\n        android:layout_alignParentStart=\"true\"\n        android:id=\"@+id/recycler_view\"\n        android:scrollbars=\"vertical\" /\u003e\n\u003c/RelativeLayout\u003e\n```\n\nWe're going to use a [RecyclerView](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html) to display the events, which we'll store in a list. Each item in this list is displayed in an identical manner, so let's define another layout file to inflate each item.\n\nCreate the file [event_row.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/layout/event_row.xml) with the following content:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003candroid.support.v7.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:card_view=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    card_view:cardCornerRadius=\"4dp\"\n    card_view:cardElevation=\"4dp\"\n    card_view:cardUseCompatPadding=\"true\"\n    card_view:contentPadding=\"8dp\"\u003e\n\n    \u003cRelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n\n        \u003cTextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textAppearance=\"?android:attr/textAppearanceLarge\"\n            android:text=\"Event\"\n            android:id=\"@+id/event\"\n            android:layout_alignParentTop=\"true\"\n            android:textAlignment=\"center\" /\u003e\n\n        \u003cTextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textAppearance=\"?android:attr/textAppearanceMedium\"\n            android:text=\"ID\"\n            android:id=\"@+id/id\"\n            android:layout_below=\"@+id/event\"\n            android:textAlignment=\"center\" /\u003e\n\n        \u003ccom.github.curioustechizen.ago.RelativeTimeTextView\n            android:id=\"@+id/timestamp\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textAppearance=\"?android:attr/textAppearanceSmall\"\n            android:layout_below=\"@+id/id\"\n            android:textAlignment=\"center\" /\u003e\n\n        \u003cTextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Data\"\n            android:id=\"@+id/data\"\n            android:layout_below=\"@+id/timestamp\"\n            android:textAlignment=\"center\"\n            android:layout_marginTop=\"8dp\" /\u003e\n    \u003c/RelativeLayout\u003e\n\n\u003c/android.support.v7.widget.CardView\u003e\n```\n\nHere we're using a [CardView](https://developer.android.com/reference/android/support/v7/widget/CardView.html) to show the information inside a card, with shadows and rounded corners. For each item, we're going to present:\n\n- A `TextView` for the name of the event (*created*, *updated*, or *deleted*).\n- A `TextView` for the ID of the record (for example, *c2d6*).\n- A [RelativeTimeTextView](https://github.com/curioustechizen/android-ago), a custom `TextView` that displays the relative time with respect to the reference point (the moment the event is received), automatically refreshing the text as needed.\n- A `TextView` for the data contained in the record (anything the user sends, for example, *Temperature: 80°F*).\n \nNow, to store the information of each event, let's create a class, [com.pusher.feed.Event](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/java/com/pusher/feed/Event.java):\n\n```\npublic class Event  {\n    private String name;\n    private String id;\n    private String data;\n\n    public Event(String name, String eventId, String data) {\n        this.name = name;\n        this.id = eventId;\n        this.data = data;\n    }\n\n    // Getters and setters\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getData() {\n        return data;\n   }\n}\n```\n\n`RecyclerView` works with an [Adapter](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html) to manage the items of its data source (in this case a list of `Event` instances), and a [ViewHolder](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html) to hold a view representing a single list item, so first create the class [com.pusher.feed.EventAdapter](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/java/com/pusher/feed/EventAdapter.java) with the following code:\n\n```\npublic class EventAdapter extends RecyclerView.Adapter\u003cEventAdapter.EventViewHolder\u003e {\n    private List\u003cEvent\u003e items;\n\n    public EventAdapter(List\u003cEvent\u003e items) {\n        this.items = items;\n    }\n\n    public void addEvent(Event event) {\n        // Add the event at the beginning of the list\n        items.add(0, event);\n        // Notify the insertion so the view can be refreshed\n        notifyItemInserted(0);\n    }\n\n    @Override\n    public int getItemCount() {\n        return items.size();\n    }\n\n    @Override\n    public EventViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n\n    }\n\n    @Override\n    public void onBindViewHolder(EventViewHolder viewHolder, int i) {\n\n    }\n}\n```\n\nWe initialize the class with a list of `Event`, provide a method to add `Event` instances at the beginning of the list (`addEvent(Event)`) and then notify the insertion so the view can be refreshed, and implement `getItemCount` so it returns the size of the list.\n\nThen, let's add the `ViewHolder` as an inner class, it references the `View` components for each item in the list:\n\n```\npublic class EventAdapter extends RecyclerView.Adapter\u003cEventAdapter.EventViewHolder\u003e {\n    private ArrayList\u003cEvent\u003e items;\n\n    public static class EventViewHolder extends RecyclerView.ViewHolder {\n        // Card fields\n        public TextView event;\n        public TextView id;\n        public RelativeTimeTextView timestamp;\n        public TextView data;\n\n        public EventViewHolder(View v) {\n            super(v);\n            event = (TextView) v.findViewById(R.id.event);\n            id = (TextView) v.findViewById(R.id.id);\n            timestamp = (RelativeTimeTextView) v.findViewById(R.id.timestamp);\n            data = (TextView) v.findViewById(R.id.data);\n        }\n    }\n\n    ...\n}\n```\n\nAnd implement the methods `onCreateViewHolder` and `onBindViewHolder`:\n\n```\npublic class EventAdapter extends RecyclerView.Adapter\u003cEventAdapter.EventViewHolder\u003e {\n    ...\n\n    @Override\n    public EventViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n        View v = LayoutInflater.from(viewGroup.getContext())\n                .inflate(R.layout.event_row, viewGroup, false);\n\n        return new EventViewHolder(v);\n    }\n\n    @Override\n    public void onBindViewHolder(EventViewHolder viewHolder, int i) {\n        Event event = items.get(i);\n\n        viewHolder.event.setText(event.getName());\n        viewHolder.id.setText(event.getId());\n        viewHolder.timestamp.setReferenceTime(System.currentTimeMillis());\n        viewHolder.data.setText(event.getData());\n    }\n}\n```\n\nIn the `onCreateViewHolder` method, we inflate the layout with the content of the `event_row.xml` file we created earlier, and in `onBindViewHolder`, we set the values of the views with the event in turn. Notice how we set the reference time on `RelativeTimeTextView` so it can display a text like *Just now* or *10 minutes ago*.\n\nIn the class [com.pusher.feed.MainActivity](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/java/com/pusher/feed/MainActivity.java), let's start by defining the private fields we're going to need:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    private RecyclerView.LayoutManager lManager;\n    private EventAdapter adapter;\n    private Pusher pusher = new Pusher(\"ENTER_PUSHER_APP_KEY_HERE\");\n    private static final String CHANNEL_NAME = \"events_to_be_shown\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ....\n    }\n}\n```\n\n`RecyclerView` works with a [LayoutManager](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html) to handle the layout and scroll direction of the list. We declare the `EventAdapter`, the `Pusher` object and the identifier for the Pusher channel. Remember to replace your Pusher app key, if you still don't have one, this would be a good time to [sign up for a free account](https://pusher.com/signup) and [create you app](https://dashboard.pusher.com).\n\nInside the `onCreate` method, let's assign a [LinearLayoutManager](https://developer.android.com/reference/android/support/v7/widget/LinearLayoutManager.html) to the `RecyclerView` and create the `EventAdapter` with an empty list:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // Get the RecyclerView\n        RecyclerView recycler = (RecyclerView) findViewById(R.id.recycler_view);\n\n        // Use LinearLayout as the layout manager\n        lManager = new LinearLayoutManager(this);\n        recycler.setLayoutManager(lManager);\n\n        // Set the custom adapter\n        List\u003cEvent\u003e eventList = new ArrayList\u003c\u003e();\n        adapter = new EventAdapter(eventList);\n        recycler.setAdapter(adapter);\n    }\n}\n```\n\nFor the Pusher part, we first subscribe to the channel:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n\n        Channel channel = pusher.subscribe(CHANNEL_NAME);\n}\n```\n\nThen, we create the listener that will be executed when an event arrives:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n    ...\n    SubscriptionEventListener eventListener = new SubscriptionEventListener() {\n            @Override\n            public void onEvent(String channel, final String event, final String data) {\n                runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        System.out.println(\"Received event with data: \" + data);\n                        Gson gson = new Gson();\n                        Event evt = gson.fromJson(data, Event.class);\n                        evt.setName(event + \":\");\n                        adapter.addEvent(evt);\n                        ((LinearLayoutManager)lManager).scrollToPositionWithOffset(0, 0);\n                    }\n                });\n            }\n        };\n    }\n}\n```\n\nHere, the JSON string that we receive is converted to an `Event` object, the name of the event is set to the name of the event received, and the object is added to the adapter. Finally, we move to the top of the list.\n\nNext, bind the events to this listener and call the `connect` method on the Pusher object:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n        channel.bind(\"created\", eventListener);\n        channel.bind(\"updated\", eventListener);\n        channel.bind(\"deleted\", eventListener);\n\n        pusher.connect();\n    }\n}\n```\n\nThe `connect` method can take a listener that can be helpful to debug problems you might have:\n\n```\npusher.connect(new ConnectionEventListener() {\n    @Override\n    public void onConnectionStateChange(ConnectionStateChange change) {\n        System.out.println(\"State changed to \" + change.getCurrentState() +\n            \" from \" + change.getPreviousState());\n    }\n\n   @Override\n    public void onError(String message, String code, Exception e) {\n        System.out.println(\"There was a problem connecting!\");\n        e.printStackTrace();\n    }\n});\n```\n\nFinally, `MainActivity` also needs to implement the `onDestroy()` method so we can have the opportunity to unsubscribe from Pusher when the activity is destroyed:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        pusher.disconnect();\n    }\n}\n```\n\nAnd that's all the code on the Android part. Let's test it.\n\n## Testing the app\n\nExecute the app, either on a real device or a virtual one:\n\n![activity-feed-android-deploy-app](//images.contentful.com/1es3ne0caaid/CFHd4HGgfYmmOc42MgO40/f530f27b6586deb77c4d711817697e80/activity-feed-android-deploy-app.png)\n\nYou'll be presented with an almost blank screen:\n\n![activity-feed-android-app](//images.contentful.com/1es3ne0caaid/63EKVtRYqcssUa6MmcwGY4/27d4d24fdb3dc81d4366dba37fc441f1/activity-feed-android-app.png)\n\nFor the back-end, you can use something to call the API endpoints with a JSON payload, like [cURL](https://curl.haxx.se/):\n\n``` \n# POST\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"data\":\"Temperature: 80°F\"}' http://localhost:3000/api\n# PUT\ncurl -H \"Content-Type: application/json\" -X PUT -d '{\"data\":\"Temperature: 85°F\"}' http://localhost:3000/api/aqw3\n# DELETE\ncurl -X DELETE http://localhost:3000/api/aqw3\n\n# In Windows, change single quotes to quotation marks and escape the ones inside curly brackets\ncurl -H \"Content-Type: application/json\" -X POST -d \"{\\\"data\\\":\\\"Temperature: 80°F\\\"}\" http://localhost:3000/api\n\n# Or use file, for example data.json\ncurl -H \"Content-Type: application/json\" -X POST --data @data.json http://localhost:3000/api\n```\n\nOr use a tool like [Postman](https://www.getpostman.com/):\n\n![activity-feed-android-postman](//images.contentful.com/1es3ne0caaid/3jUxsuEEgUM8c6mmEwiuGU/ab37f83253c98a637d66b8837a45baf9/activity-feed-android-postman.png)\n\nWhen a request is received on the API side, the event will show up in the app:\n\n![activity-feed-android-app-test](//images.contentful.com/1es3ne0caaid/4XKXil7es0EGkICAqgUA4S/cb52327f73792a6adb269b506bbd36fa/activity-feed-android-app-test.png)\n\nOr if you only want to test the app, you can use the [Pusher Debug Console on your dashboard](http://dashboard.pusher.com/):\n\n![activity-feed-android-pusher-debug-console](//images.contentful.com/1es3ne0caaid/74tDZ8NMlyosmg6MU6kWIG/1cfe3514ad6666e8578c3e196a53431b/activity-feed-android-pusher-debug-console.png)\n\n## Conclusion\n\nHopefully, this tutorial has shown you in an easy way how to build an activity feed for Android apps with Pusher. You can improve the app by changing the design, showing more information, or saving it to a database.\n\n## Further reading\n\n- [Pusher Java client](https://github.com/pusher/pusher-websocket-java)\n- [Android-ago](https://github.com/curioustechizen/android-ago)\n- [Activity's lifecycle](https://developer.android.com/guide/components/activities/activity-lifecycle.html)\n- [Creating Lists and Cards](https://developer.android.com/training/material/lists-cards.html)","metaTitle":"Build an activity feed in Android ","metaDescription":"Build a live activity feed in Android using Java, Node.js and Pusher for the realtime features."}}],"defaultValue":"Channels","queryType":"product","pages":33,"route":"/tutorials","query":{"product":"Channels","page":"23"}}},"page":"/tutorials","query":{"product":"Channels","page":"23"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&page=23 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:09 GMT -->
</html>