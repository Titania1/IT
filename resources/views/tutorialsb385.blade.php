<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?page=30 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:52 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1">Learn &amp; Discover Pusher</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="1v9vy9q">.css-1v9vy9q{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;text-align:center;}@media all and (min-width:400px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1v9vy9q a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1v9vy9q a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:400px){.css-1v9vy9q{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}</style><p scale="h5" class="css-1v9vy9q e5jrto45"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">447</span> tutorials to help you build great apps</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials0e67.html?product=Channels" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials1bbb.html?product=Beams" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value=""/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:none;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/live-blog-swift-go.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live blog app using Swift and Go</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Build a live blogging app for iOS with Swift. Create a backend using Go. Admin users will be able to add blog posts, wit...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-comments-gatsby-blog.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Add realtime comments to a Gatsby blog</h3><p class="css-k12xad e5jrto45">Build a simple blog with a live commenting feature. Use Gatsby, the React-based static site generator, to create the blo...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-emberjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Ember.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live comments feature with Ember.js</h3><p class="css-k12xad e5jrto45">Build a comments system using Ember.js and Node.js. Users will be able to post comments and see other comments in realti...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-emberjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Ember.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app using Ember.js</h3><p class="css-k12xad e5jrto45">Build a chat app with Ember.js. The app features emoji suggestions with sentiment analysis. It provides a realtime messa...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-terminal-python.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Python<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app in the terminal using Python</h3><p class="css-k12xad e5jrto45">Build a chat app with Python that allows users to log in and chat from within a terminal. Use Pysher to subscribe to Pus...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-comments-gatsby.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Add live comments in Gatsby</h3><p class="css-k12xad e5jrto45">Build a simple website with Gatsby and React featuring realtime comments. Create a football blog, where users can post c...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/collaborative-editor-gatsby-draftjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a collaborative text editor with Gatsby and Draft.js</h3><p class="css-k12xad e5jrto45">Build a collaborative text editor using Gatsby. Implement realtime functionality to allow multiple people to work on the...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-blog-ruby-rails.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Ruby<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Ruby on Rails<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live blog app using Ruby on Rails</h3><p class="css-k12xad e5jrto45">Build a simple blog app with realtime post updates. Host images with Cloudinary and display new posts instantly.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/carpooling-react-native-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a carpooling app with React Native - Part 2: Creating the frontend</h3><p class="css-k12xad e5jrto45">This two-part series uses React Native, Docker and several Google services (Maps, Places, Directions and Geocoding) to c...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials219f.html?page=29" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials2679.html?page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialse459.html?page=28" class="css-za1ua3 edg0byb1">28</a><a href="tutorials219f.html?page=29" class="css-za1ua3 edg0byb1">29</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsb385.html?page=30" class="css-2wakph edg0byb1">30</a><a href="tutorialsdcf3.html?page=31" class="css-za1ua3 edg0byb1">31</a><a href="tutorialsfa9c.html?page=32" class="css-za1ua3 edg0byb1">32</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials02d1.html?page=50" class="css-5s6711 edg0byb1">50</a><a href="tutorialsdcf3.html?page=31" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":447,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mROLAeJqdUOeyyeIOaY6e","type":"Entry","createdAt":"2018-06-22T15:26:32.144Z","updatedAt":"2020-06-19T12:35:25.717Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live blog app using Swift and Go","url":"live-blog-swift-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/liveblog-swift-go-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2018-06-20","description":"Build a live blogging app for iOS with Swift. Create a backend using Go. Admin users will be able to add blog posts, with the homepage showing the updates in realtime.","prerequisite":"You will need Xcode, Go, SQLite and Cocoapods installed on your machine. Some knowledge of Swift will be helpful.","content":"Live blogs allow users to follow events live without audio or video. It's particularly useful when you are in situations where you cannot consume audio/video media. Live blogs have been used to cover things like football commentary, political commentary, and more.\n\nIn this article, we are going to consider how to build a live blogging application. We will be building it using Swift for iOS and we will use Go as the backend language for the application.\nWhen we are done with the application, this is what it will look like:\n\n![swift-liveblog-demo](//images.ctfassets.net/1es3ne0caaid/DXndn8OaXYOsmIYImoc4g/57197aefae945c69127b5289f6566b3c/swift-liveblog-demo.gif)\n\n## Prerequisites\n\nTo get started you need the following:\n\n\n- Xcode (v9.x) running on your machine. [Download Xcode](https://developer.apple.com/xcode/).\n- Go (v0.10 or later) installed on your machine. [Installation guide](https://golang.org/doc/install#install).\n- SQLite installed on your machine.\n- Knowledge of the Swift programming language.\n- Basic knowledge of the Go programming language.\n- Knowledge of using the Xcode IDE.\n- Cocoapods installed on your machine. [Installation guide](https://guides.cocoapods.org/using/getting-started.html).\n  \n\nLet's get started.\n\n## Creating the Swift application\n\nLaunch Xcode and create a new 'Single View App' project. We will creatively name ours ... *drum rolls* ... LiveBlog. Next, close Xcode and `cd` to the root directory of your Xcode project and run the following command:\n\n```\n    $ pod init\n```\n\nThis command will create a new `Podfile` in the root of your project. Open the `Podfile` in your code editor and paste the following code:\n\n```\n    platform :ios, '11.0'\n    \n    target 'LiveBlog' do\n      use_frameworks!\n    \n      pod 'Alamofire', '~\u003e 4.7.2'\n      pod 'PusherSwift', '~\u003e 6.1.0'\n      pod 'PushNotifications', '~\u003e 0.10.8'\n      pod 'NotificationBannerSwift', '~\u003e 1.6.3'\n    end\n```\n\nNext, run the following command to install the packages listed above using Cocoapods:\n\n```\n    $ pod install\n```\n\nWhen the installation is complete, you will see a `LiveBlog.xcworkspace` file in the project directory. Open this file in Xcode.\n\nLet's create our application's storyboard. Open the `Main.storyboard` file and what we want to do is create something similar to the board below:\n\n![swift-liveblog-storyboard](//images.ctfassets.net/1es3ne0caaid/4KTjm5s42c84E4OU0EyqcW/9fd1fe99e09b565aec3f032cd4a34b7d/swift-liveblog-storyboard.png)\n\nTo create this, we added a new navigation controller and made it the entry point of the storyboard. We then assigned a reuse identifier to the cell on the table view controller called post. We also set the title of the view controller using the interface builder.\n\nNext, create a table view controller called `PostsTableViewController` and set this as the custom class for the table view controller in the main storyboard.\n\nIn the `PostsTableViewController` paste in the following code:\n\n``` swift\n    import UIKit\n    import Alamofire\n    import NotificationBannerSwift\n    \n    struct Post: Codable {\n        let id: Int64\n        let content: String\n    }\n    \n    struct Posts: Codable {\n        var items: [Post]\n    }\n    \n    class PostsTableViewController: UITableViewController {\n    \n        var posts = Posts(items: [])\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n    \n            Alamofire.request(\"http://127.0.0.1:9000/posts\").validate().responseJSON { resp in\n                guard resp.result.isSuccess, let data = resp.data else {\n                    return StatusBarNotificationBanner(title: \"Unable to fetch posts\", style: .danger).show()\n                }\n    \n                if let posts = try? JSONDecoder().decode(Posts.self, from: data) {\n                    self.posts = posts\n                    self.tableView.reloadData()\n                }\n            }\n        }\n    \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return posts.items.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"post\", for: indexPath)\n            let post = posts.items[indexPath.row]\n    \n            cell.textLabel?.text = post.content\n    \n            return cell\n        }\n    \n    }\n```\n\nAbove we have a two `Codable` structs for the `Post` and `Posts` objects. We will decode the response from the API to these objects and make working with JSON responses easier.\n\n**Recommended:** [**Decoding JSON using Codable in Swift 4**](https://blog.pusher.com/swift-4-decoding-json-codable/)\n\nIn our `viewDidLoad` method, we make a request to the API to fetch the posts and then we save them to the `posts` property of the controller then we reload the `tableView`.\nThe rest of the methods in the controller should be familiar to you. They are used to override the table view's rendering.\n\n### Adding realtime functionality\nBecause we are creating a live blog, we want to add the realtime functionality to the application so that when a new post is made, we get an instant update.\n\nIn the `PostsTableViewController`, import the Pusher Swift SDK:\n\n``` swift\n    import PusherSwift\n```\n\nNow in the `viewDidLoad` method, we can add our Pusher functionality. At the top of the method after `super.viewDidLoad()`, add the following code:\n\n``` swift\n    let pusher = Pusher(\n        key: \"PUSHER_APP_KEY\", \n        options: PusherClientOptions(\n            host: .cluster(\"PUSHER_APP_CLUSTER\")\n        )\n    )\n    \n    let channel = pusher.subscribe(\"live-blog-stream\")\n    \n    let _ = channel.bind(eventName: \"new-post\") { data in\n        if let data = data as? [String: AnyObject] {\n            if let id = data[\"id\"] as? Int64, let content = data[\"content\"] as? String {\n                self.posts.items.insert(Post(id: id, content: content), at: 0)\n                self.tableView.reloadData()\n            }\n        }\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the value from your Pusher dashboard.\n\nIn the code above, we create an instance of the Pusher SDK and then we `subscribe` to the `live-blog-stream` channel. We then `bind` a callback to the `new-post` event on the channel.\n\nWhenever this event is triggered, the callback is fired. In the callback, we update the `posts` with the new post that was passed with the event then we reload the `tableView` so the changes are reflected immediately.\n\nWith those few lines, we have implemented realtime functionality to the application. Easy right?\n\n## Creating the Go backend for our realtime application\n\nThe next thing we want to do is create the backend for our application. We will make it as simple as possible so we can easily demonstrate how to trigger events on a channel in Pusher using Go.\n\nCreate a new project directory for the Go application. Let's call it `liveblog-backend` and in that directory create a `public` directory:\n\n```\n    $ mkdir liveblog-backend\n    $ cd liveblog-backend\n    $ mkdir public\n```\n\nIn the root directory, create a new file called `main.go` and in here is where all our Go code will reside.\n\nOpen the `main.go` file in your favorite editor and paste the following code into the file:\n\n``` go\n    package main\n    \n    import (\n        \"database/sql\"\n        \"net/http\"\n    \n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/middleware\"\n        _ \"github.com/mattn/go-sqlite3\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    func main() {\n        e := echo.New()\n    \n        e.Use(middleware.Logger())\n        e.Use(middleware.Recover())\n    \n        db := initialiseDatabase(\"./storage.db\")\n        migrateDatabase(db)\n    \n        e.File(\"/admin\", \"public/admin.html\")\n        e.GET(\"/posts\", getPosts(db))\n        e.POST(\"/posts\", savePost(db))\n    \n        e.Logger.Fatal(e.Start(\":9000\"))\n    }\n```\n\nAbove, we import the packages we will need for the Go application to function properly. We also defined a `main` function which will be the sole entry point of the application.\n\nIn the `main` function, we instantiated the [Echo framework](https://echo.labstack.com/) and we added some middlewares to the instance of `echo`.\n\nNext, we initialized the database and ran a migration on the database. This will create a `storage.db` file in the root directory. This is the file SQLite will use to operate. Finally, we defined some routes for our application and specified the port we want our application to start on, 9000.\nIn the `main` function, we referenced some functions we had not created so let's add these functions.\n\nIn the `main.go` file, add the following above the `main` function:\n\n``` go\n    func initialiseDatabase(filepath string) *sql.DB {\n        db, err := sql.Open(\"sqlite3\", filepath)\n    \n        if err != nil {\n            panic(err)\n        }\n    \n        if db == nil {\n            panic(\"db nil\")\n        }\n    \n        return db\n    }\n    \n    func migrateDatabase(db *sql.DB) {\n        sql := `\n            CREATE TABLE IF NOT EXISTS posts(\n                    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n                    content TEXT\n            );\n    `\n        _, err := db.Exec(sql)\n        if err != nil {\n            panic(err)\n        }\n    }\n    \n    func getPosts(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            rows, err := db.Query(\"SELECT * FROM posts ORDER BY id DESC\")\n            if err != nil {\n                panic(err)\n            }\n    \n            defer rows.Close()\n    \n            result := PostCollection{}\n    \n            for rows.Next() {\n                post := Post{}\n                err2 := rows.Scan(\u0026post.ID, \u0026post.Content)\n                if err2 != nil {\n                    panic(err2)\n                }\n    \n                result.Posts = append(result.Posts, post)\n            }\n    \n            return c.JSON(http.StatusOK, result)\n        }\n    }\n    \n    func savePost(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            postContent := c.FormValue(\"content\")\n            stmt, err := db.Prepare(\"INSERT INTO posts (content) VALUES(?)\")\n            if err != nil {\n                panic(err)\n            }\n    \n            defer stmt.Close()\n    \n            result, err := stmt.Exec(postContent)\n            if err != nil {\n                panic(err)\n            }\n    \n            insertedID, err := result.LastInsertId()\n            if err != nil {\n                panic(err)\n            }\n    \n            post := Post{\n                ID:      insertedID,\n                Content: postContent,\n            }\n    \n            client.Trigger(\"live-blog-stream\", \"new-post\", post)\n    \n            return c.JSON(http.StatusOK, post)\n        }\n    }\n```\n\nAbove, we have four functions. The first is the `initialiseDatabase` function. We use this to create the database file if it does not exist and then create a connection to the database once it exists. The `migrateDatabase` function does just what the name suggests. It executes migrations for the database if it was not previously run.\n\nThe `getPosts` function gets the list of posts from the database and returns it as a JSON response. The `savePost` function saves a new post to the database and triggers an update to Pusher on the `live-blog-stream` channel.\n\nThe `savePost` function is referencing a Pusher client instance that does not exist so let's create that. In the `main.go` file right after the `import` statements, add the following:\n\n``` go\n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the keys from your Pusher application dashboard.\n\nIn the above, we instantiate the Pusher Go client with the credentials from the dashboard. This will make it possible to trigger events using the Pusher instance.\n\nThe final thing we want to do is add the object structures for our `Post` and `PostCollection`. In the same `main.go` file, add the following code below the Pusher instance above:\n\n``` go\n    // Post type\n    type Post struct {\n        ID      int64  `json:\"id\"`\n        Content string `json:\"content\"`\n    }\n    \n    // PostCollection type\n    type PostCollection struct {\n        Posts []Post `json:\"items\"`\n    }\n```\n\nNow save and close the file.\n\nCreate a new `admin.html` file in the `public` directory and paste the following into it:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003ctitle\u003eAdmin Panel\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"\u003e\n        \u003cstyle\u003e\n            .container {\n                max-width: 500px;\n            }\n            .logo-space {\n                text-align: center;\n                padding: 50px 0;\n                background-color: #bada55;\n                margin: 10px 0;\n            }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n            \u003cdiv class=\"container\"\u003e\n                \u003cdiv class=\"logo-space\"\u003e\n                    \u003ch1\u003eLive Blog\u003c/h1\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"alert alert-success\" role=\"alert\" v-show=\"successfulPost\"\u003e\n                    Post added successfully!\n                \u003c/div\u003e\n                \u003cform action=\"/posts\" method=\"POST\" id=\"post-stuff\" v-on:submit.prevent=\"submitForm\"\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003ctextarea class=\"form-control\" v-model=\"content\" placeholder=\"Enter Post\"\u003e\u003c/textarea\u003e\n                    \u003c/div\u003e\n                    \u003cinput type=\"submit\" class=\"form-control btn btn-primary\" name=\"submit\" value=\"Update Stream\"\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript\u003e\n            new Vue({\n                el: \"#app\",\n                data: {\n                    content: \"\",\n                    successfulPost: false\n                },\n                methods: {\n                    submitForm() {\n                        if (this.content.length \u003e 0 \u0026\u0026 this.content !== \"\") {\n                            let data = new FormData()\n                            data.append(\"content\", this.content)\n    \n                            axios.post(\"/posts\", data).then(res =\u003e {\n                                this.content = \"\"\n                                this.successfulPost = true\n                                setTimeout(() =\u003e this.successfulPost = false, 3000)\n                            })\n                        }\n                    }\n                }\n            })\n        \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe code above is for the admin page where we can add our new posts. This will then make a POST request to the API to add a new post to the database. When the post is added to the database, an event will be triggered by the Pusher Go client. This event will then be picked up by the Swift application and the iOS app will be updated in realtime.\n\nSave the file and execute the following command to run our Go application:\n\n```\n    $ go run main.go\n```\n\nThis will start a server on port 9000.\n\n## Testing our live blogging application\n\nThe next thing we need to do is test our application. Open your project in Xcode using the `.xcworkspace` file. Before building the application though, we need to do one last thing. Open the `info.plist` file and apply the following changes:\n\n![swift-liveblog-info-plist](//images.ctfassets.net/1es3ne0caaid/3soymv0P2Miks2EsGQEEOk/a8fad768891f219b1ae10f7710047207/swift-liveblog-info-plist.png)\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n![swift-liveblog-demo](//images.ctfassets.net/1es3ne0caaid/DXndn8OaXYOsmIYImoc4g/57197aefae945c69127b5289f6566b3c/swift-liveblog-demo.gif)\n\n## Conclusion\n\nIn this article, we have seen how we can easily create a live blog using Swift, Go and Pusher Channels.\n\nPusher Channels makes it very easy to implement realtime features into almost any application in all languages. You should check out the [documentation](https://pusher.com/docs) here to get started.\nThe source code for this article is available on [GitHub](https://github.com/neoighodaro/liveblog-swift-go-pusher).","metaTitle":"Create a live blog app using Swift and Go","metaDescription":"Use Swift and Go to create an iOS app that allows admins to publish blog posts quickly. The homepage shows new posts in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2G3VeHkp6MMqM6sqeG6Qw2","type":"Entry","createdAt":"2018-06-18T15:48:16.505Z","updatedAt":"2018-06-18T15:48:16.505Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Add realtime comments to a Gatsby blog","url":"realtime-comments-gatsby-blog","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/HackAfro/gatsby-blog","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-06-18","description":"Build a simple blog with a live commenting feature. Use Gatsby, the React-based static site generator, to create the blog. Add realtime comments functionality using Node and Express.","prerequisite":"You will need Node 6+ and npm installed on your machine. Some knowledge of React and Node may be helpful.","content":"## Introduction\n\nWe all dream of not just owning a blog but actually having the time to write and keep the blog up to date. Creating a blog has been made easy by static site generators like Jekyll but today we’ll be using [Gatsby](https://gatsbyjs.org). Gatsby is a blazing-fast static site generator for React.\n\nIn this tutorial, you’ll learn how to set up a blog using [Gatsby](https://gatsbyjs.org). Also, we’ll add realtime comments into our blog with the help of [Pusher](https://pusher.com).\n\nHere’s a screenshot of the final product:\n\n![gatsby-blog-comments-demo-1](//images.ctfassets.net/1es3ne0caaid/1dpknCjcNigMiQsWWSm0m4/c3b4d42d2c6f417481841c85c1f02ac5/gatsby-blog-comments-demo-1.png)\n\n### Realtime comments demo\n\n![gatsby-blog-comments-demo-2](//images.ctfassets.net/1es3ne0caaid/14gER7taz2oysa0o6goWU/b4ed5756b9424450703e96e7ef5879aa/gatsby-blog-comments-demo-2.gif)\n\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of how to use Gatsby, React and Node.js. Please ensure that you have at least Node version 6\u003e= installed before you begin.\n\nWe’ll be using these tools to build our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Gatsby](https://gatsbyjs.com)\n- [React](https://reactjs.org)\n\nWe’ll be sending messages to the server and using [Pusher’s](https://pusher.com) pub/sub pattern, we’ll listen to and receive messages in realtime. To make use of Pusher you’ll have to create an account [here](https://pusher.com). \n\nAfter account creation, visit the dashboard. Click **Create new Channels app**, fill out the details, click **Create my app**, and make a note of the details on the **App Keys** tab.\n\n\n## Initializing the application and installing dependencies\n\nTo get started, we will use the blog starter template to initialize our application. The first step is to install the Gatsby CLI. To install the CLI, run the following command in the terminal:\n\n```\n    npm install -g gatsby-cli\n```\n\nIf you use Yarn run:\n\n```\n    yarn global add gatsby-cli\n```\n\nThe next step is to create our project with the help of the CLI.  Run the command below to create a project called `realtime-blog` using the blog starter template:\n\n```\n    gatsby new realtime-blog https://github.com/HackAfro/gatsby-blog-starter-kit.git\n```\n\nNext, run the following commands in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher uuid \n    \n    // front-end dependencies\n    npm install pusher-js\n```\n\nStart the app server by running `npm run develop` in a terminal in the root folder of your project.\n\nA browser tab should open on http://localhost:8000. The screenshot below should be similar to what you see in your browser:\n\n![gatsby-blog-default](//images.ctfassets.net/1es3ne0caaid/eeekSIdLlQmWyI02YgIk2/451f319edbc7abbfed58f943aa1a5633/gatsby-blog-default.png)\n\n## Building our server\n\nWe’ll build our server using [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/).\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.PUSHER_CLUSTER,\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```\n\n\nThe calls to our endpoint will be coming in from a different origin. Therefore, we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nCreate a [Pusher](https://pusher.com) account and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`. \n\nCreate a file in the root folder of the project and name it `.env`. Copy the code snippet below into the `.env` file and ensure to replace the placeholder values with your Pusher credentials.\n\n```\n    // .env\n    \n    // Replace the placeholder values with your actual pusher credentials\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n    PUSHER_CLUSTER=PUSHER_CLUSTER\n```\n\nWe’ll make use of the `dotenv` library to load the variables contained in the `.env` file into the Node environment. The `dotenv` library should be initialized as early as possible in the application.\n\nStart the server by running `node server` in a terminal inside the root folder of your project.\n\n### Draw route\n\nLet’s create a post route named `comment`, the Gatsby application will send requests to this route containing the comment data needed to update the application.\n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    const { v4 } = require('uuid');\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      ...\n    });\n    \n    \n    app.post('/comment', (req, res) =\u003e {\n      const {body} = req;\n      const data = {\n        ...body,\n        timestamp: new Date(),\n        id: v4(),\n      };\n      pusher.trigger('post-comment', 'new-comment', data);\n      res.json(data);\n    });\n    \n     ...\n```\n\n- The request body will be sent as the data for the triggered Pusher event. An object `data`  is created containing the request body. An `id` is added to the comment data to identify it as well as a timestamp. The `data` object will be sent as a response to the user.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`post-comment`), an event name (`new-comment`), and a payload(`data`).\n\n\n\n## Building our blog index page\n\nThe current look of our blog is too generic, we’d like to have our blog represent our budding personality. To get that look, we’ll change the layout of the blog and add a few CSS styles to update the look and feel of the blog.\n \n Here’s the current look of our blog index page: \n \n![gatsby-blog-default](//images.ctfassets.net/1es3ne0caaid/eeekSIdLlQmWyI02YgIk2/451f319edbc7abbfed58f943aa1a5633/gatsby-blog-default.png)\n\nHere’s what we want our blog to look like:\n\n![gatsby-blog-comments-demo-1](//images.ctfassets.net/1es3ne0caaid/1dpknCjcNigMiQsWWSm0m4/c3b4d42d2c6f417481841c85c1f02ac5/gatsby-blog-comments-demo-1.png)\n\nI hope this new look will represent your budding personality because it really represents mine. Let’s go through the steps we’ll take to achieve this new look.\n \n Open the `index.js` file in the `src/pages/` directory. Update the file to look like the snippet below:\n \n``` javascript\n    // src/pages/index.js\n    \n    import React from 'react';\n    import GatsbyLink from 'gatsby-link';\n    import Link from '../components/Link';\n    import Tags from '../components/Tags';\n    import '../css/index.css';\n    \n    export default function Index({ data }) {\n      const { edges: posts } = data.allMarkdownRemark;\n      return (\n        \u003cdiv className=\"blog-posts\"\u003e\n          {posts\n            .filter((post) =\u003e post.node.frontmatter.title.length \u003e 0)\n            .map(({ node: post }, index) =\u003e {\n              return (\n                \u003cdiv\n                  className={`blog-post-preview ${\n                    index % 2 !== 0 ? 'inverse' : ''\n                  }`}\n                  key={post.id}\n                \u003e\n                  \u003cdiv className=\"post-info\"\u003e\n                    \u003ch1 className=\"title\"\u003e\n                      \u003cGatsbyLink to={post.frontmatter.path}\u003e\n                        {post.frontmatter.title}\n                      \u003c/GatsbyLink\u003e\n                    \u003c/h1\u003e\n                    \u003cdiv className=\"meta\"\u003e\n                      \u003cdiv className=\"tags\"\u003e\n                        \u003cTags list={post.frontmatter.tags} /\u003e\n                      \u003c/div\u003e\n                      \u003ch4 className=\"date\"\u003e{post.frontmatter.date}\u003c/h4\u003e\n                    \u003c/div\u003e\n                    \u003cp className=\"excerpt\"\u003e{post.excerpt}\u003c/p\u003e\n                    \u003cdiv\u003e\n                      \u003cLink to={post.frontmatter.path} className=\"see-more\"\u003e\n                        Read more\n                      \u003c/Link\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                  \u003cdiv className=\"post-img\"\u003e\n                    \u003cimg src={post.frontmatter.image} alt=\"image\" /\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              );\n            })}\n        \u003c/div\u003e\n      );\n    }\n    export const pageQuery = graphql`\n      query IndexQuery {\n        allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n          edges {\n            node {\n              excerpt(pruneLength: 250)\n              id\n              frontmatter {\n                title\n                date(formatString: \"MMMM DD, YYYY\")\n                path\n                tags\n                image\n              }\n            }\n          }\n        }\n      }\n    `;\n```\n\n    \n\nThere’s really not much going on here. First, made the blog content separate from the blog image. Then we checked if the index of the current post was an odd number, if true, we added an inverse class to the post. \n\nSince we’ll be using `flex` for the layout, if we make the `flex-direction: row-inverse` it will invert the layout making the image appear on the left side rather than the right. Finally, we included an image for each blog post even though the posts don’t have an image front matter variable.\n\nAfter this update you’ll get an error in your terminal similar to the screenshot below:\n\n![gatsby-blog-comments-error](//images.ctfassets.net/1es3ne0caaid/6EJUxcdeOAicEuoyMwcsQW/218249111f21e57ea49011d87e0d2ca3/gatsby-blog-comments-error.png)\n\nThis is because the image variable doesn’t exist on the markdown files that we currently have. We’ll get to updating the markdown files so ignore the error for now.\n\nNext step is to update the stylesheet associated with the index page. Open the `index.css` file in the `/src/css` directory and update it like so:\n\n``` css\n    // /src/css/index.css\n    \n    .blog-post-preview {\n      display: flex;\n      align-items: flex-start;\n      justify-content: center;\n      padding: 1rem 0.25rem;\n      border-bottom: 2px solid rgba(0, 0, 0, 0.04);\n      margin-bottom: 20px;\n    }\n    .blog-post-preview.inverse{\n      flex-direction: row-reverse;\n    }\n    .blog-post-preview:last-child {\n      border-bottom-width: 0;\n    }\n    .post-info {\n      flex: 1;\n    }\n    .blog-post-preview.inverse \u003e .post-img{\n      margin-left: 0;\n      margin-right: 1rem;\n    }\n    .post-img {\n      flex: 1;\n      margin-left: 1rem;\n    }\n    .post-img \u003e img {\n      max-width: 100%;\n      max-height: 100%;\n    }\n    .title {\n      font-size: 22px;\n      text-transform: uppercase;\n      margin-bottom: 2px;\n      line-height: 1.2;\n    }\n    .title \u003e a {\n      color: black;\n      text-decoration: none;\n      opacity: 0.7;\n      letter-spacing: -0.2px;\n    }\n    .date {\n      font-size: 13px;\n      opacity: 0.5;\n      margin: 0;\n    }\n    .meta {\n      display: flex;\n      align-items: center;\n      margin-bottom: 8px;\n    }\n    .excerpt {\n      font-size: 15px;\n      opacity: 0.7;\n      letter-spacing: 0.4px;\n      margin-bottom: 10px;\n    }\n```\n\n\n\nNext, we’ll update the components associated with the index page. Currently, we have the `Link` and `Tags` components being used on the index page. Let’s update them to match the current flow of our application.\n\n\n## Tags component\n\nOpen the `Tags.js` file in the `/src/components` directory and update it with the content below:\n\n``` javascript\n    // /src/components/Tags.js\n    \n    import React from 'react';\n    import Link from 'gatsby-link';\n    import TagIcon from 'react-icons/lib/fa/tag';\n    \n    import '../css/tags.css';\n    \n    export default function Tags({ list = [] }) {\n      return (\n        \u003cul className=\"tags\"\u003e\n          {list.map(tag =\u003e\n            \u003cli key={tag}\u003e\n              \u003cLink to={`/tags/${tag}`} className=\"tag\"\u003e\n                \u003cTagIcon size={15} className=\"icon white\" /\u003e\n                {tag}\n              \u003c/Link\u003e\n            \u003c/li\u003e\n          )}\n        \u003c/ul\u003e\n      );\n    }\n```\n\n\nTo update the stylesheet associated with it, open the `tags.css` file in the `src/css/` directory. Copy the contents below into it:\n\n``` css\n    // /src/css/tags.css\n    \n    .tags {\n      display: flex;\n      margin-right: 6px;\n      list-style: none;\n      padding: 0;\n      margin: 0 4px 0 0;\n    }\n    .tag {\n      color: white;\n      background: purple;\n      font-size: 11px;\n      text-transform: uppercase;\n      font-weight: bold;\n      margin: 3px;\n      border-radius: 35px;\n      padding: 5px 12px;\n      line-height: 12px;\n      font-family: 'Rajdhani', cursive;\n      text-decoration: none;\n    }\n```\n\n\n## Link component\n\nThis component will build ontop the `GatsbyLink` component provided by Gatsby. It’ll add a custom class to the `GatsbyLink` component. The `Link.js` file will stay the same. We’ll only be updating the stylesheet associated with this component. Open the `link.css` file in the `src/css` folder and update it by adding the following styles to it:\n\n``` css\n    .link {\n      color: black;\n      opacity: 0.6;\n      background: white;\n      box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.07);\n      text-decoration: none;\n      padding: 7px 15px;\n      border-radius: 34px;\n      font-size: 12px;\n      text-transform: uppercase;\n      font-weight: bold;\n      border: 1px solid rgba(0, 0, 0, 0.05);\n    }\n```\n\nFinally, we’ll update the blog header. The header can be found in the `index.js`  file in the `src/layouts` directory. Open it and replace the contents with the code below:\n\n``` javascript\n    // src/layouts/index.js\n    \n    import React from 'react';\n    import PropTypes from 'prop-types';\n    import Link from 'gatsby-link';\n    import Helmet from 'react-helmet';\n    import '../css/typography.css';\n    import '../css/layout.css';\n    \n    export default class Template extends React.Component {\n      static propTypes = {\n        children: PropTypes.func,\n      };\n      render() {\n        const { location } = this.props;\n        const isRoot = location.pathname === '/';\n        return (\n          \u003cdiv\u003e\n            \u003cHelmet\n              title=\"Gatsby Default (Blog) Starter\"\n              meta={[\n                { name: 'description', content: 'Sample' },\n                { name: 'keywords', content: 'sample, something' },\n              ]}\n            /\u003e\n            \u003cdiv\n              style={{\n                background: `white`,\n                marginBottom: `1.45rem`,\n                boxShadow: '0 2px 4px 0 rgba(0,0,0,0.1)',\n              }}\n            \u003e\n              \u003cdiv\n                style={{\n                  margin: `0 auto`,\n                  maxWidth: 960,\n                  padding: isRoot ? `0.7rem 1.0875rem` : `.5rem 0.75rem`,\n                }}\n              \u003e\n                \u003ch1 style={{ margin: 0, fontSize: isRoot ? `2rem` : `1.5rem` }}\u003e\n                  \u003cLink\n                    to=\"/\"\n                    style={{\n                      color: 'purple',\n                      textDecoration: 'none',\n                      fontFamily: \"'Lobster', sans-serif\",\n                    }}\n                  \u003e\n                    The Food Blog\n                  \u003c/Link\u003e\n                \u003c/h1\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv\n              style={{\n                margin: `0 auto`,\n                maxWidth: 960,\n                padding: `0px 1.0875rem 1.45rem`,\n                paddingTop: 0,\n              }}\n            \u003e\n              {this.props.children()}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n```\n\n\nIn the snippet above, we added a stylesheet `layout.css` and updated the inline styles in the component. Let’s create the `layout.css` in the `src/css/` directory. Open the file and copy the code snippet below into it:\n\n``` css\n    // layout.css\n    \n    @import url('https://fonts.googleapis.com/css?family=Lobster|Rajdhani:600|Source+Sans+Pro:400,600,700');\n    * {\n      font-family: 'Source Sans Pro', sans-serif;\n    }\n    body {\n      background: rgba(0, 0, 0, 0.06);\n    }\n    .icon {\n      color: purple;\n      margin: 0 3px;\n    }\n    .icon.white {\n      color: white;\n    }\n```\n\n\nNow our index page should look like the screenshot of the potential index page we saw above. Now that’s progress.\n\n\n## Adding and updating blog posts\n\nSo far we’ve updated the look and layout of our blog. Let’s add a new blog post just to see how our index page handles it. Also, we’ll update the markdown files to include an image variable in the front matter section. \n\nUpdate all the current posts to have the same structure as the content below:\n\n```\n    ---\n    path: \"/post-new.html\"\n    date: \"2018-06-10T13:56:24.754Z\"\n    title: \"A post by me\"\n    tags: [\"new\", \"creative\"]\n    image: \"https://source.unsplash.com/random/1000x500\"\n    ---\n    \n    Post content ...\n```\n\nWe’ll be including random images from [Unsplash](https://unsplash.com) for our blog images. Update all the markdown files to include an image variable. Then restart the server or you’ll end up like me debugging the application for ten minutes trying to figure out the error. The error on the terminal should be cleared once you updated the markdown files and restart the server.\n\n\n## Updating the blog detail page\n\nNow that our index page reflects our personality, let’s do the same with the blog details page. Open the `blog-post.js` file in the `src/templates` directory and update it to look like the snippet below:\n\n``` javascript\n    // src/templates/blog-post.js\n    \n    import React from 'react';\n    import Helmet from 'react-helmet';\n    import BackIcon from 'react-icons/lib/fa/chevron-left';\n    import ForwardIcon from 'react-icons/lib/fa/chevron-right';\n    import Link from '../components/Link';\n    import Tags from '../components/Tags';\n    import '../css/blog-post.css';\n    \n    export default function Template({ data, pathContext }) {\n      const { markdownRemark: post } = data;\n      const { next, prev } = pathContext;\n      return (\n        \u003cdiv className=\"blog-post-container\"\u003e\n          \u003cHelmet title={`The Food Blog - ${post.frontmatter.title}`} /\u003e\n          \u003cdiv className=\"blog-post\"\u003e\n            \u003cdiv\u003e\n              \u003ch1 className=\"title\"\u003e{post.frontmatter.title}\u003c/h1\u003e\n              \u003ch2 className=\"date\"\u003e{post.frontmatter.date}\u003c/h2\u003e\n              \u003cdiv className=\"post-body\"\u003e\n                \u003cdiv className=\"post-img\"\u003e\n                  \u003cimg src={post.frontmatter.image} alt=\"\" /\u003e\n                \u003c/div\u003e\n                \u003cdiv\n                  className=\"blog-post-content post-info\"\n                  dangerouslySetInnerHTML={{ __html: post.html }}\n                /\u003e\n              \u003c/div\u003e\n              \u003cTags list={post.frontmatter.tags || []} /\u003e\n              \u003cdiv className=\"navigation\"\u003e\n                {prev \u0026\u0026 (\n                  \u003cLink className=\"link prev\" to={prev.frontmatter.path}\u003e\n                    \u003cBackIcon size={16} className=\"icon\" /\u003e {prev.frontmatter.title}\n                  \u003c/Link\u003e\n                )}\n                {next \u0026\u0026 (\n                  \u003cLink className=\"link next\" to={next.frontmatter.path}\u003e\n                    {next.frontmatter.title}{' '}\n                    \u003cForwardIcon size={16} className=\"icon\" /\u003e\n                  \u003c/Link\u003e\n                )}\n              \u003c/div\u003e\n              \u003cdiv className=\"comment-section\"\u003e\n                \u003ch4 className=\"comment-header\"\u003eComments\u003c/h4\u003e\n                {/* Comment component comes here */}\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      );\n    }\n    export const pageQuery = graphql`\n      query BlogPostByPath($path: String!) {\n        markdownRemark(frontmatter: { path: { eq: $path } }) {\n          html\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            tags\n            title\n            image\n          }\n        }\n      }\n    `;\n```\n\n\nLet’s update the stylesheet associated with it. Open the `blog-post.css` file in the `src/css` directory. Make the content similar to the snippet below:\n\n``` css\n    // src/css/blog-post.css\n    \n    .blog-post .link.prev {\n      float: left;\n    }\n    .blog-post .link.next {\n      float: right;\n    }\n    .blog-post .title,\n    .blog-post .date {\n      text-align: center;\n      margin: 0;\n      padding: 0;\n    }\n    .blog-post .date {\n      color: #555;\n      margin-bottom: 1rem;\n    }\n    .blog-post .navigation {\n      min-height: 60px;\n      margin-top: 15px;\n    }\n    .blog-post-content {\n      font-size: 15px;\n      opacity: 0.8;\n    }\n    .post-info {\n      flex: 2;\n    }\n    .post-img {\n      margin-right: 1.3rem;\n      padding: 2% 2% 1%;\n    }\n    .post-img \u003e img {\n      box-shadow: 0 3px 5px 1px rgba(0, 0, 0, 0.3);\n    }\n    .comment-section{\n      margin-top: 30px;\n    }\n    .comment-header {\n      font-size: 16px;\n      text-transform: uppercase;\n      color: purple;\n      letter-spacing: -0.3px;\n      margin-bottom: 10px;\n    }\n```\n\n## Realtime comments using Pusher\n\nWe’ve created a working blog and then updated the layout and styles to suit our needs yet we still don’t have a comments section for our readers to leave their thought on a blog post. We want our comment section to have some realtime functionalities where users get updates on the post as it happens. Using Pusher’s pub/sub functionality we can achieve this.\n\nWe already have Pusher dispatching events on the server, the next step is creating a listener to act on the events.\n\nCreate a folder called `comments` in the `components` folder. Create a file called `form.js` in the `comments` folder. Update the contents of the file with the snippet below:\n\n``` javascript\n    // src/components/comments/form.js\n    \n    import React from 'react';\n    class CommentForm extends React.Component {\n      constructor() {\n        super();\n        this.state = {\n          name: '',\n          comment: '',\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n      }\n      async handleSubmit(e) {\n        e.preventDefault();\n        const body = JSON.stringify({ ...this.state });\n        const response = await fetch('http://localhost:4000/comment', {\n          method: 'post',\n          body,\n          headers: {\n            'content-type': 'application/json',\n          },\n        });\n        const data = await response.json();\n        this.setState({ comment: '', name: '' });\n      }\n      handleChange({ target }) {\n        const { name, value } = target;\n        this.setState({ [name]: value });\n      }\n      render() {\n        const { name, comment } = this.state;\n        return (\n          \u003cform onSubmit={this.handleSubmit} className=\"comment-form\"\u003e\n            \u003cinput\n              placeholder=\"Your Name\"\n              value={name}\n              name=\"name\"\n              onChange={this.handleChange}\n            /\u003e\n            \u003ctextarea\n              placeholder=\"Enter your comment\"\n              rows=\"4\"\n              name=\"comment\"\n              value={comment}\n              onChange={this.handleChange}\n            /\u003e\n            \u003cdiv\u003e\n              \u003cbutton className=\"button submit-button\"\u003eSubmit\u003c/button\u003e\n            \u003c/div\u003e\n          \u003c/form\u003e\n        );\n      }\n    }\n    export default CommentForm;\n```\n\n\nThe form component will handle the commenting functionality for users. We’ll place the `form` component in the `CommentList` component. The `CommentList` component hasn’t been created yet, we’ll get to that. \n\nThe next step is to create a `Comment.js` file. This component will display a comment from the list of comments. Update the contents of the file with the snippet below:\n\n``` javascript\n    // src/components/comments/Comment.js\n    \n    import React from 'react';\n    const Comment = ({ comment }) =\u003e (\n      \u003cdiv className=\"comment\"\u003e\n        \u003cdiv className=\"comment__meta\"\u003e\n          \u003ch5\u003e{comment.name}\u003c/h5\u003e\n          \u003cspan\u003e{new Date(comment.timestamp).toDateString()}\u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp className=\"comment__body\"\u003e{comment.comment}\u003c/p\u003e\n      \u003c/div\u003e\n    );\n    export default Comment;\n```\n\nThe final step is to create a file called `CommentList.js` in the `comments` folder. The component will the hold the `form` and `Comment` components.  Open the file and update it with the code below:\n\n``` javascript\n    // src/components/comments/CommentList.js\n    \n    import React from 'react';\n    import Pusher from 'pusher-js';\n    import CommentForm from './form';\n    import Comment from './Comment';\n    import '../../css/comment.css';\n    \n    class Comments extends React.Component {\n      constructor() {\n        super();\n        this.state = {\n          comments: [],\n        };\n        this.pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'eu',\n        });\n      }\n      componentDidMount() {\n        const channel = this.pusher.subscribe('post-comment');\n        channel.bind('new-comment', (data) =\u003e {\n          this.setState((prevState) =\u003e ({\n            comments: [...prevState.comments, data],\n          }));\n        });\n      }\n      \n      render() {\n        const { comments } = this.state;\n        return (\n          \u003cdiv\u003e\n            \u003cCommentForm /\u003e\n            \u003chr /\u003e\n            \u003cdiv className=\"comment-list\"\u003e\n              {comments.length ? (\n                comments.map((comment) =\u003e (\n                  \u003cComment comment={comment} key={comment.id} /\u003e\n                ))\n              ) : (\n                \u003ch5 className=\"no-comments-alert\"\u003e\n                  No comments on this post yet. Be the first\n                \u003c/h5\u003e\n              )}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default Comments;\n```\n\n\nThere’s quite a bit going on in here. We’ll walk through it. \n\n\n- In the component’s `constructor`, we initialized the Pusher library using the `appKey` that can be found in the Pusher dashboard. Be sure to replace the placeholder string with your real `appKey`.\n\n\n- In the `componentDidMount` lifecycle, we subscribed to the `post-comment` channel and listened for a `new-comment` event. In the event callback, we appended the data returned to the list of comments.\n\n\n- Also, we included a new stylesheet that hasn’t been created yet. Create a file called `comment.css` in the `src/css` directory. \n\nOpen the file and update it with the content below:\n\n``` css\n    // src/css/comment.css\n    \n    .comment-form {\n      display: flex;\n      flex-direction: column;\n      width: 50%;\n      padding: 10px 25px 20px 0;\n    }\n    .comment-form \u003e input,\n    .comment-form \u003e textarea {\n      width: 100%;\n      border: 3px solid rgb(143, 51, 143);\n      margin: 12px 0;\n      padding: 7px 14px;\n      font-size: 14px;\n      opacity: 0.8;\n      font-weight: bold;\n      box-shadow: 0 2px 3px 0 rgba(0, 0, 0, 0.3);\n      border-radius: 8px;\n    }\n    .comment-form \u003e div \u003e .submit-button {\n      padding: 8px 45px;\n      background: rgb(143, 51, 143);\n      color: whitesmoke;\n      border-radius: 35px;\n      box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.3);\n      text-transform: uppercase;\n      font-size: 16px;\n      font-weight: bold;\n      cursor: pointer;\n    }\n    .comment__meta \u003e h5 {\n      font-size: 15px;\n      color: purple;\n      opacity: 0.7;\n      margin-bottom: 3px;\n      line-height: 1;\n    }\n    hr {\n      background: rgba(0, 0, 0, 0.2);\n      height: 3px;\n    }\n    .comment__meta \u003e span {\n      font-size: 14px;\n      font-weight: bold;\n      opacity: 0.5;\n    }\n    .comment__body {\n      font-size: 18px;\n      opacity: 0.8;\n      font-family: 'Rajdhani', cursive;\n    }\n    .no-comments-alert {\n      font-size: 16px;\n      color: purple;\n      opacity: 0.7;\n      text-transform: uppercase;\n      letter-spacing: -0.3px;\n    }\n```\n\n\n## Including comments in blog posts\n\nLet’s include the comment section we just created in the blog post template. Open the `blog-post.js` file and include the `comments` component where we had the comment `comment component comes here`.  \n\n``` javascript\n    // src/templates/blog-post.js\n    ...\n    import '../css/blog-post.css';\n    import Comments from '../components/Comments/CommentList';\n    ...\n    \n    export default function Template({ data, pathContext }) {\n      ...\n      return (\n        ...\n        \u003cdiv className=\"comment-section\"\u003e\n          \u003ch4 className=\"comment-header\"\u003eComments\u003c/h4\u003e\n          \u003cComments /\u003e\n        \u003c/div\u003e\n        ...\n      )\n    };\n    ...\n```\n\nLet’s have a look at our blog details page. Click on the link for any blog list item. The view should be similar to the screenshot below: \n\n\n\u003e **P.S:** Ensure you have the server and the Gatsby dev server running.\n\n![gatsby-blog-comments-single-entry](//images.ctfassets.net/1es3ne0caaid/5qTVwTafVSMcI2IsgWSo4c/d13e83e510c1b49b3a5857c6dd9b06cc/gatsby-blog-comments-single-entry.png)\n\nYou can also test the realtime functionality of the application by opening two browsers side by side. A Comment placed on one browser window can be seen in the other.\n\n![gatsby-blog-comments-two-browser](//images.ctfassets.net/1es3ne0caaid/4P2YjscTiMmmAugIWcICm2/c3f7a985a83c791568e79f7747929f5b/gatsby-blog-comments-two-browser.png)\n\n## Conclusion\n\nWe’ve created a blog using Gatsby and included realtime commenting functionality using Pusher. You could do one extra and include a way to persist comments on a blog post. You can find the source code for this tutorial on [GitHub](https://github.com/HackAfro/gatsby-blog).","metaTitle":"Add realtime comments to a Gatsby blog","metaDescription":"This tutorial will show you how to add realtime comments to a Gatsby blog. You will use Node and Express to create a simple backend, allowing users to add and view comments instantly."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1YrboytjMUU6GUo0YiwYsk","type":"Entry","createdAt":"2018-06-18T14:31:09.719Z","updatedAt":"2018-06-18T14:31:09.719Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live comments feature with Ember.js","url":"live-comments-emberjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/yemiwebby/live-comments-ember","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"oh5mPeR5cGqMImEyKoWwQ","type":"Entry","createdAt":"2018-02-12T14:46:47.672Z","updatedAt":"2018-02-12T14:46:47.672Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ember.js","url":"ember-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-06-15","description":"Build a comments system using Ember.js and Node.js. Users will be able to post comments and see other comments in realtime. Emojis are automatically added using sentiment analysis.","prerequisite":"You will need Node and npm installed on your machine.","content":"## Introduction\n\nWe are in 2018, users of your web application don’t have the luxury of time to wait for a page refresh before getting an update or properly interacting when carrying out a basic activity as posting a comment irrespective of the web technology of your choice. \n\nIf you are like me and very passionate about properly improving interactivity and engaging your users, then this post is for you!\n\nTogether in this tutorial, we’ll build a simple realtime commenting system where users can add comments to a blog post and see the update in realtime. In addition to the realtime functionality, we will also use a technique called sentiment analysis to determine the attitude of users based on the context of the received post. The application will be built using Ember.js and powered by Pusher.\n\nHere is what the application will look like once we are done:\n\n![ember-comments-demo](//images.ctfassets.net/1es3ne0caaid/NX7qFBupm8ISmu4OEiaKs/e1154e27f6cfed83dea7db0ba0831bba/ember-comments-demo.gif)\n\n## Prerequisites\n\nIt is important that you have [Node.js](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) installed on your machine in order to properly run the basic setups, [learn how to install Node.js and npm here](https://docs.npmjs.com/getting-started/installing-node). A quick run-down of the core technologies we will be using include:\n\n\n- [Ember.js](https://www.emberjs.com/): a productive frontend framework built for ambitious web developers.\n- [Pusher](https://pusher.com/): a [Node.js](http://nodejs.org/) client to interact with the Pusher REST API\n- [Express](https://expressjs.com/): Node utility for handling HTTP requests via routes\n- [Axios](https://www.npmjs.com/package/axios): a promise-based HTTP client that works both in the browser and in a Node.js environment.\n- [Body Parser](https://github.com/expressjs/body-parser): attaches the request payload on Express’s `req`, hence `req.body` stores this payload for each request.\n- [Sentiment](https://github.com/thisandagain/sentiment): Sentiment is a module that uses the [AFINN-165](http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010) wordlist and [Emoji Sentiment Ranking](http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0144296) to perform [sentiment analysis](http://en.wikipedia.org/wiki/Sentiment_analysis) on arbitrary blocks of input text.\n\n\n## Setting up the project\n\nThe most convenient and recommended way of getting an Ember app up and running with a single command is by using the Ember CLI tool. You can install it with npm, open your terminal and type this command:\n\n```\n     npm install -g ember-cli\n```\n\nThe [Ember CLI](https://github.com/ember-cli/ember-cli) will give us access to the `ember` command that will be used to set up our project easily.\n\n\n## Creating the comment application\n\nWe can now proceed to create our application by using the `ember new` command. Open up the terminal on your machine and run a command that will create an application named `live-comments-ember` in your project directory or any location specified:\n\n```\n     ember new live-comments-ember\n```\n\nNext, change directory into the newly created project and start the development server:\n\n```\n     // change directory\n     cd live-comments-ember\n     \n     // start the development server\n     ember serve\n```\n\nThis will start the development server on http://localhost:4200. Open your favorite browser and navigate to that URL, you should see a default welcome page by Ember.js as shown below:\n\n![ember-start-page](//images.ctfassets.net/1es3ne0caaid/2Z3q7KbdrOEWGs8McO8gyC/86f812aacd929bbcd81e6a45873f91b6/ember-start-page.png)\n\n## Installing server dependencies\n\nRun the following command to install the dependencies required for this project using:\n\n```\n    npm install --save axios pusher pusher-js\n    npm install --save body-parser cors dotenv express sentiment\n    ember install ember-browserify\n```\n\n## Pusher account setup\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![ember-pusher-signup](//images.ctfassets.net/1es3ne0caaid/2NeDEhMbuwYsECuqGyWCUE/646d9e28c3c1ecc1517361035836a8ec/ember-pusher-signup.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![ember-pusher-create-app](//images.ctfassets.net/1es3ne0caaid/5YHrOKL5AIQk6E2OiCIeMW/473f43255c5a820f1523387487884757/ember-pusher-create-app.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with to be provided with some boilerplate code:\n\n![ember-pusher-config-app](//images.ctfassets.net/1es3ne0caaid/38gUNRKzT2UuEcQIq2GgS6/d7ef41d5c3f3afb724373fd976caef4c/ember-pusher-config-app.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![ember-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/1QiXDu6gpy0CKQCosqgcgE/1ffc23a7859704465b1a9357c07151b5/ember-pusher-app-keys.png)\n\n\n## Setting the environment variables\n\nCreate a `.env` file in the root directory of your application and add your application credentials as obtained from your Pusher dashboard as follows:\n\n```\n      PUSHER_APP_ID=YOUR_APP_ID\n      PUSHER_APP_KEY=YOUR_APP_KEY\n      PUSHER_APP_SECRET=YOUR_APP_SECRET_KEY\n      PUSHER_APP_CLUSTER=CLUSTER\n```\n\nWe will make use of the variables specified in the above snippet later in our project. And do ensure that you replace `YOUR_APP_ID`, `YOUR_APP_KEY`, `YOUR_APP_SECRET_KEY` and `CLUSTER` placeholders with the appropriate credentials.\n\n\n## Setting up the server\n\nThis application needs to be able to process a `POST` request with a new comment as submitted by the users. So we’ll set up a simple server that will receive the `comment` and publish it to a designated channel for the client side to listen and subscribe to. We’ll set it up by using Node and Express and run it on http://localhost:3000.\n\nSince the Ember application that we configured earlier is running on a different domain, we’ll enable CORS in order to ensure communication between the Express server and Ember.\n\nCreate a `app.js`  file in the root directory of your application and add the following code snippet to it to set up the server:\n\n\n``` javascript\n    // app.js\n    \n      const express = require('express');\n      const bodyParser = require('body-parser');\n      const cors = require('cors');\n      const Pusher = require('pusher');\n      const Sentiment = require('sentiment');\n      require('dotenv').config();\n      const app = express();\n      app.use(cors());\n      app.use(bodyParser.urlencoded({extended: false}));\n      app.use(bodyParser.json());\n      const pusher = new Pusher({\n          appId: process.env.PUSHER_APP_ID,\n          key: process.env.PUSHER_APP_KEY,\n          secret: process.env.PUSHER_APP_SECRET,\n          cluster: process.env.PUSHER_APP_CLUSTER,\n          encrypted: true\n      });\n      app.set('port', process.env.PORT || 3000);\n      app.post('/posts', (req, res) =\u003e {\n          const sentiment = new Sentiment();\n          const sentimentScore = sentiment.analyze(req.body.text).score;\n          const payload = {\n              text: req.body.text,\n              sentiment: sentimentScore\n          }\n          pusher.trigger('chat', 'post', payload);\n          res.send(payload)\n      })\n      app.listen(app.get('port'), () =\u003e {\n          console.log(\"Listening at \" + app.get('port'));\n      })\n```\n\nHere we loaded all the necessary middlewares for the express server and then configure Pusher using the credentials we added to our environment variables earlier. \n\nFurthermore, we also created the `/posts` endpoint that will receive and process comments sent in from our Ember app. Finally, we trigger an event named `post` to Pusher Channels on a channel called `chat`. The `chat` channel holds a payload that contains the `comment`  posted by the user and the overall sentiment score of the comment.\n\nOpen another terminal and run the command below to start the server on http://localhost:3000\n\n```\n    node app.js\n```\n\nThis will log a message to the console stating that Node is running on port 3000.\n\nNext, we’ll create components required for our application.\n\n\n## Creating the UI components\n\nEmber supports the usage and sharing of UI elements on multiple pages. We will leverage on this and generate components for separate parts of our application. The components required for our application are:\n\n\n1. `comments-app`: this will encompass the entire application\n2. `comment-post`: this component will display each comment submitted by users in realtime\n3. `list-``posts`: this component will list all the existing comments\n\nThe Ember component generally consist of two parts: a JavaScript component file that defines behavior and a Handlebars template that defines the markup for the component’s UI.\n\n\n## Comment app component\n\nWe’ll start by generating a component for the `comments-app`, by using the command below:\n\n```\n    ember g component comments-app\n```\n\n### Comments app template\nThis component will basically be used to display the sample post and all the comments submitted by readers. Locate `./app/templates/components/comments-app.hbs` and update it as shown below:\n\n``` html\n    {{!-- ./app/templates/components/comments-app.hbs --}}\n    \n      \u003cdiv class=\"row comment-box\"\u003e\n          \u003cdiv class=\"col-md-6 col-md-offset-3\"\u003e\n               \u003cdiv class=\"sample-post\"\u003e\n                 \u003cp\u003eDoes your team know which product feature really makes a difference \n                  for customers? Monitor industry and customer\n                  trends on a broad scale with our advanced sentiment technology \n                  to develop products that succeed.\n                 \u003c/p\u003e\n              \u003c/div\u003e\n          \u003c/div\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"row comment-box\"\u003e\n         \u003cdiv class=\"col-md-6 col-md-offset-3\"\u003e\n            \u003cdiv class=\"panel panel-white post panel-shadow\"\u003e\n                 {{#list-posts}}{{/list-posts}}\n            \u003c/div\u003e\n         \u003c/div\u003e\n      \u003c/div\u003e\n```\n\n## Comment post component\n\nNext, we’ll create a component to render each comment once submitted. Open your terminal and run this command:\n\n```\n      ember g component comment-post\n```\n\n### Comment post component template\n\nThe `comment-post` template file will display individual comment with emojis to represent the mood of the users. Add the following content to your `./app/templates/components/comment-post.hbs` file:\n\n``` html\n      {{!-- ./app/templates/components/comment-post.hbs --}}\n      \n      \u003cdiv class=\"post-heading\"\u003e\n          \u003cdiv class=\"pull-left image\"\u003e\n            \u003cimg src=\"http://bootdey.com/img/Content/user_1.jpg\" class=\"img-circle avatar\" alt=\"user profile image\"\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"pull-left meta\"\u003e\n                  \u003cdiv class=\"title h5\"\u003e\n                   \u003ca href=\"#\"\u003e\u003cb\u003e Anonymous \u003c/b\u003e\u003c/a\u003e\n                     posted a comment.\n                  \u003c/div\u003e\n            \u003ch6 class=\"text-muted time\"\u003e{{ comment.mood }}\u003c/h6\u003e\n             \u003cp\u003e{{comment.text}}\u003c/p\u003e\n          \u003c/div\u003e\n      \u003c/div\u003e \n```\n\n\n## List posts component\n\nThe last component required here is `list-``posts`. As stated earlier, it will be used to list all the existing comments submitted by readers. Run the command below to generate it:\n\n```\n     ember g component list-posts\n```\n\n### List posts component file\n\nAdd the following content to `./app/components/list-posts.js`:\n\n``` javascript\n    // ./app/components/list-posts.js\n      \n      import Component from '@ember/component';\n      import axios from 'npm:axios';\n      import Pusher from 'npm:pusher-js';\n      \n      const SAD_EMOJI = [55357, 56864];\n      const HAPPY_EMOJI = [55357, 56832];\n      const NEUTRAL_EMOJI = [55357, 56848];\n      \n      export default Component.extend({\n          comments: null,\n          init() {\n              this._super(...arguments);\n              this.set('comments', []);\n              let pusher = new Pusher('YOUR_APP_KEY', { // update your APP_KEY\n                  cluster: 'CLUSTER',\n                  encrypted: true\n              });\n              const channel = pusher.subscribe('chat');\n              channel.bind('post', data =\u003e {\n                  const analysis = data.sentiment \u003e 0 ? HAPPY_EMOJI : (data.sentiment === 0 ? NEUTRAL_EMOJI : SAD_EMOJI);\n                  const response = {\n                      text: data.text,\n                      mood: String.fromCodePoint(...analysis)\n                  }\n                  this.get('comments').pushObject(response);\n              });\n          },\n          actions: {\n              newPost() {\n                  const text = this.get('newPost');      \n                  axios.post('http://localhost:3000/posts', { text });\n                  this.set('newPost', '');\n              }\n          }\n      });\n```\n\nFirst, we imported the required modules for this component and we added some constants of code points for a particular sentiment emoji. This will help us rendered an emoji corresponding to the mood of the user as analyzed by the sentiment module once a comment is submitted.\n\nNext, we initialize Pusher with the `APP_KEY` and `CLUSTER` as obtained from our Pusher account dashboard and then proceeded to use the `subscribe()` method from Pusher to subscribe to the created `chat` channel.\n\nFinally, the `newPost()` action basically receives the comment submitted by a user and `POST` it to the server. This action will be triggered once the **Post Comment** button in the template file for this component is clicked.\n\nDon’t forget to replace the `YOUR_APP_KEY` and `CLUSTER` placeholder with the appropriate details from your Pusher account dashboard.\n\n### List posts component template\n\nHere in the template file for `list``-posts` component, we’ll loop over each comment and render a `comment-post` component. Open `./app/templates/components/list-posts.hbs` and edit as shown below:\n\n``` html\n    {{!-- ./app/templates/components/list-posts.hbs --}}\n    \n      {{#each comments as |comment|}}\n      \u003cdiv class=\"row msg_container base_receive\"\u003e\n            {{#comment-post comment=comment}}{{/comment-post}}\n      \u003c/div\u003e\n      {{/each}}\n      \n      \u003cdiv class=\"footer\"\u003e\n          \u003cdiv class=\"input-group\"\u003e\n            {{ input value=newPost id=\"btn-input\" type=\"text\" class=\"form-control input-sm\" placeholder=\"Write a comment\"}}\n            \u003cspan class=\"input-group-btn\"\u003e\n                \u003cbutton class=\"btn btn-primary btn-sm\" id=\"btn-chat\" {{action \"newPost\"}}\u003ePost Comment\u003c/button\u003e\n            \u003c/span\u003e\n         \u003c/div\u003e\n      \u003c/div\u003e\n```\n\n\n## Update the app template\n\nUpdate the application template with:\n\n``` html\n    {{!-- ./app/templates/application.hbs --}}\n      \n      {{#comments-app}}{{/comments-app}}\n      {{outlet}}\n```\n\n## Stylesheet\n\nTo add some minimal styling to the page, open `./app/styles/app.css` and paste this code in it:\n\n``` css\n    // ./app/styles/app.css\n    \n      .post .post-heading {\n        height: 95px;\n        padding: 20px 15px;\n      }\n      .post .post-heading .avatar {\n        width: 60px;\n        height: 60px;\n        display: block;\n        margin-right: 15px;\n      }\n      .post .post-heading .meta .title a {\n        color: black;\n      }\n      .post .post-image .image {\n        width: 100%;\n        height: auto;\n      }\n      .comment-box {\n        padding: 20px;\n        font-size: 18px;\n      }\n      .sample-post {\n        background: #f5f5f5;\n        padding: 20px;\n      }\n      .footer{\n        margin-top: 20px;\n      }\n      .msg_container {\n        border: 1px solid #f5f5f5;\n        margin: 4px 0;\n      }\n```\n\n## Updating the index page\n\nOpen the `./app/index.html` file and include the CDN file for Bootstrap to enhance the styling and layout of our application. Open up the file and add update as shown below:\n\n``` html\n     \u003c!-- ./app/index.html --\u003e\n     \n    \u003c!DOCTYPE html\u003e\n      \u003chtml\u003e\n        \u003chead\u003e\n          \u003cmeta charset=\"utf-8\"\u003e\n          \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n          \u003ctitle\u003eLiveCommentsEmber\u003c/title\u003e\n          \u003cmeta name=\"description\" content=\"\"\u003e\n          \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n          {{content-for \"head\"}}\n          \u003clink integrity=\"\" rel=\"stylesheet\" href=\"{{rootURL}}assets/vendor.css\"\u003e\n          \u003clink integrity=\"\" rel=\"stylesheet\" href=\"{{rootURL}}assets/live-comments-ember.css\"\u003e\n          \u003c!-- add the CDN file --\u003e\n          \u003clink href=\"http://maxcdn.bootstrapcdn.com/bootstrap/3.3.0/css/bootstrap.min.css\" rel=\"stylesheet\" id=\"bootstrap-css\"\u003e\n          {{content-for \"head-footer\"}}\n        \u003c/head\u003e\n        \u003cbody\u003e\n          {{content-for \"body\"}}\n          \u003cscript src=\"{{rootURL}}assets/vendor.js\"\u003e\u003c/script\u003e\n          \u003cscript src=\"{{rootURL}}assets/live-comments-ember.js\"\u003e\u003c/script\u003e\n          {{content-for \"body-footer\"}}\n        \u003c/body\u003e\n      \u003c/html\u003e\n```\n\n## Testing the application\n\nStop the Ember development server if it is currently running by typing `Ctrl + C`  in the terminal and restart it with `ember serve`. In addition, don’t forget to also run `node app.js` from another terminal to start the Express server incase you haven’t done that. Next, open http://localhost:4200 to test the application:\n\n![ember-comments-screenshot](//images.ctfassets.net/1es3ne0caaid/38hcbNGNPagQccYA0ySmyY/e1609b3167351887659777078138e963/ember-comments-screenshot.png)\n\n## Conclusion\n\nThe importance of realtime engagement of users on any platform cannot be overemphasized. As seen in this tutorial, we were able to implement a realtime commenting system and also show emojis based on the mood of the users by using sentiment analysis. I hope you found this tutorial helpful.\n\nFeel free to explore the code for this tutorial on [GitHub](https://github.com/yemiwebby/live-comments-ember) and add more features as you deem fit.","metaTitle":"Build a live comments feature with Ember.js","metaDescription":"This brief tutorial shows how to add live comments functionality to a web app using Ember.js and Node.js. Use sentiment analysis to automatically add emojis to messages."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4yfGW0jaL6GKKiooaOGscW","type":"Entry","createdAt":"2018-06-18T14:33:06.576Z","updatedAt":"2019-01-02T15:35:11.438Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app using Ember.js","url":"chat-emberjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/yemiwebby/chat-app-ember","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"oh5mPeR5cGqMImEyKoWwQ","type":"Entry","createdAt":"2018-02-12T14:46:47.672Z","updatedAt":"2018-02-12T14:46:47.672Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ember.js","url":"ember-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-06-15","description":"Build a chat app with Ember.js. The app features emoji suggestions with sentiment analysis. It provides a realtime messaging experience.","prerequisite":"You will need Node and npm installed on your machine.","content":"## Introduction\n\nBuilding an engaging online chat application will definitely boost interaction between the involved parties, be it an online store with chat app for customer support in order to improve sales and ensure customers satisfaction, or a social platform with numerous users. In addition to the realtime engagement, wouldn’t it be nice to be able to determine the attitude of users based on a particular response during a chat?\n\nIn this tutorial, we will build a chat application with sentiments. Sentiment analysis will help us to computationally identify and categorize opinions expressed in a message during a chat. Using sentiment analysis, we will then proceed to suggest emojis based on the context of the received message.\n\nHere’s what the completed demo will look like:\n\n![ember-chat-demo](//images.ctfassets.net/1es3ne0caaid/4SFFr9rsykIEoSwQgU0e0W/e216e68237d1c73141b6265a985c5fd0/ember-chat-demo.gif)\n\nThis chat application will be built using Ember.js and Pusher. We will approach the project by setting up the client side first and then proceed to configure the server side of the application by using [Express](https://expressjs.com/).\n\n## Prerequisites\n\nIt is important that you have [Node.js](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) installed on your machine in order to properly run the basic setups, [learn how to install Node.js and npm here](https://docs.npmjs.com/getting-started/installing-node). A quick run-down of the core technologies we will be using include:\n\n\n- [Ember.js](https://www.emberjs.com/): a productive frontend framework built for ambitious web developers.\n- [Pusher](https://pusher.com/): a [Node.js](http://nodejs.org/) client to interact with the Pusher REST API\n- [Express](https://expressjs.com/): Node utility for handling HTTP requests via routes\n- [Axios](https://www.npmjs.com/package/axios): a promise-based HTTP client that works both in the browser and in a Node.js environment.\n- [Body Parser](https://github.com/expressjs/body-parser): Attaches the request payload on Express’s `req`, hence `req.body` stores this payload for each request.\n- [Sentiment](https://github.com/thisandagain/sentiment): Sentiment is a module that uses the [AFINN-165](http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010) wordlist and [Emoji Sentiment Ranking](http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0144296) to perform [sentiment analysis](http://en.wikipedia.org/wiki/Sentiment_analysis) on arbitrary blocks of input text.\n\n\n## Setting up the application\n\nInstalling Ember.js is quite easy. The most convenient and recommended way of getting an Ember app up and running with a single command is by using the Ember CLI tool. You can install it with npm, open your terminal and type this command:\n\n```\n     npm install -g ember-cli\n```\n\nThe [Ember CLI](https://github.com/ember-cli/ember-cli) will give us access to the `ember` command that will be used to set up our project easily.\n\n\n## Creating the chat application\n\nWe can now proceed to create our application by using the `ember new` command. Open up the terminal on your machine and run a command that will create an application named `chat-app-ember` in your project directory or any location specified:\n\n```\n     ember new chat-app-ember\n```\n\nNext, change directory into the newly created project and start the development server:\n\n```\n     // change directory\n     cd chat-app-ember\n     \n     // start the development server\n     ember serve\n```\n\nThis will start the development server on http://localhost:4200. Open your favorite browser and navigate to that URL, you should see this:\n\n![ember-start-page](//images.ctfassets.net/1es3ne0caaid/2Z3q7KbdrOEWGs8McO8gyC/86f812aacd929bbcd81e6a45873f91b6/ember-start-page.png)\n\nThat is the default welcome page by Ember.js, we will restructure this in a bit.\n\n## Install server dependencies\n\nRun the following command to install the dependencies required for this project using:\n\n```\n    npm install --save axios pusher pusher-js he strftime\n    npm install --save body-parser cors dotenv express sentiment\n    ember install ember-browserify\n```\n\n## Pusher account setup\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![ember-pusher-signup](//images.ctfassets.net/1es3ne0caaid/2NeDEhMbuwYsECuqGyWCUE/646d9e28c3c1ecc1517361035836a8ec/ember-pusher-signup.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![ember-pusher-create-app](//images.ctfassets.net/1es3ne0caaid/5YHrOKL5AIQk6E2OiCIeMW/473f43255c5a820f1523387487884757/ember-pusher-create-app.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with to be provided with some boilerplate code:\n\n![ember-pusher-config-app](//images.ctfassets.net/1es3ne0caaid/38gUNRKzT2UuEcQIq2GgS6/d7ef41d5c3f3afb724373fd976caef4c/ember-pusher-config-app.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![ember-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/1QiXDu6gpy0CKQCosqgcgE/1ffc23a7859704465b1a9357c07151b5/ember-pusher-app-keys.png)\n\n## Setting the environment variables\n\nCreate a `.env` file in the root directory of your application and add your application credentials as obtained from your Pusher dashboard as follows:\n\n```\n      PUSHER_APP_ID=YOUR_APP_ID\n      PUSHER_APP_KEY=YOUR_APP_KEY\n      PUSHER_APP_SECRET=YOUR_APP_SECRET_KEY\n      PUSHER_APP_CLUSTER=CLUSTER\n```\n\nWe will make use of the variables specified in the above snippet later in our project. And do ensure that you replace `YOUR_APP_ID`, `YOUR_APP_KEY`, `YOUR_APP_SECRET_KEY` and `CLUSTER` placeholders with the appropriate credentials.\n\n\n## Setting up the server\n\nOur application will need and work better with a simple server that will receive and process a `POST` request with a new message during chat. It’ll trigger an event on the Pusher channel that the client side can subscribe to. We’ll set it up by using Node and Express and run it on http://localhost:3000.\n\nSince the Ember application that we configured earlier is running on a different domain, we’ll enable CORS in order to ensure communication between the Express server and Ember.\n\nCreate an `app.js`  file in the root directory of your application and add the following code snippet to it to set up the server:\n\n``` javascript\n    // app.js\n    \n      const express = require('express');\n      const bodyParser = require('body-parser');\n      const cors = require('cors');\n      const Pusher = require('pusher');\n      const Sentiment = require('sentiment');\n      require('dotenv').config();\n      \n      const app = express();\n      \n      app.use(cors());\n      app.use(bodyParser.urlencoded({extended: false}));\n      app.use(bodyParser.json());\n    \n    // Ensure that your pusher credential are properly set in the .env file  \n      const pusher = new Pusher({\n          appId: process.env.PUSHER_APP_ID,\n          key: process.env.PUSHER_APP_KEY,\n          secret: process.env.PUSHER_APP_SECRET,\n          cluster: process.env.PUSHER_APP_CLUSTER,\n          encrypted: true\n      });\n      \n      app.set('port', process.env.PORT || 3000);\n      \n      app.post('/messages', (req, res) =\u003e {\n          const sentiment = new Sentiment();\n          const sentimentScore = sentiment.analyze(req.body.text).score;\n          const payload = {\n              text: req.body.text,\n              username: req.body.username,\n              time: req.body.time,\n              sentiment: sentimentScore\n          }\n          pusher.trigger('chat', 'message', payload);\n          res.send(payload)\n      })\n      app.listen(app.get('port'), () =\u003e {\n          console.log(\"Listening on port \" + app.get('port'));\n      })\n```\n\nHere we loaded all the necessary middlewares for the Express server and then configured Pusher using the credentials we added to our environment variables earlier. \n\nFurthermore, we also created `/messages` endpoint that will receive and process messages sent in from our Ember app. Finally, we triggered an event named `message` to Pusher Channels on a channel called `chat`.\n\nOpen another terminal and run the command below to start the server on http://localhost:3000\n\n```\n    node app.js\n```\n\nThis will log a message to the console as shown by the image below:\n\n![ember-chat-node-running](//images.ctfassets.net/1es3ne0caaid/62I54alxBYyYcsmw84GWmu/7721512f40ceb9cc32d9cf290869915f/ember-chat-node-running.png)\n\n## Back to the client side\n\nNow that we are done setting up the server, it’s time to switch our focus to the client. Next, we’ll create components and services required for our application.\n\n## Creating the Ember service\n\nOur application will require a username so that we can identify the chatting individuals. In order to keep things simple, we won’t setup a registration and login process but rather use [Ember service](https://guides.emberjs.com/release/applications/services/) to store data that components within our application needs to access.\n\nWe are going to create a service that will be responsible for storing the name of the active user. Once created, the service can be accessed by injecting it into the UI components as we’ll see later. \n\nGenerate a new [Ember service](https://guides.emberjs.com/release/applications/services/) by running the command below from your terminal:\n\n```\n    // generate a service\n      ember g service active-user\n```\n\n\nThe command above will create a new file `app/services/active-user.js` and a corresponding test file that is not required for now. `active-user` service will be responsible for storing the user’s name before they can start chatting. Open the file and update it with:\n\n``` javascript\n      // ./app/services/active-user.js \n      \n      import Service from '@ember/service';\n      export default Service.extend({\n          user: null,\n          setUser(username) {\n              this.set('user', username);\n          },\n          hasUser() {\n              return this.get('user') != undefined;\n          }\n      });\n```\n\n\nWe created a property `user` and provided a method for setting the user. The second method `hasUser` will return true if we have an active user so that we can decide if a user is logged in or not.\n\n\n## Create the UI components\n\nEmber supports the usage and sharing of UI elements on multiple pages. We will leverage this and generate components for separate parts of our application. The components required for our application are:\n\n\n1. `chat-app`: this will encompass the entire chat application\n2. `chat-username`: this component will be used to show the user a form to enter their username\n3. `chat-message`: component to display each chat message\n4. `list``-messages`: will list all the existing messages\n\nThe Ember component generally consist of two parts: a JavaScript component file that defines behavior and a Handlebars template that defines the markup for the component’s UI.\n\n\n## Chat component\n\nWe’ll start by generating a component for the `chat-app`, by using the command below:\n\n```\n      ember g component chat-app\n```\n\n### Component file\n\nLocate the component file `./app/components/chat-app.js` and update it with: \n\n``` javascript\n    // ./app/components/chat-app.js\n    \n      import Component from '@ember/component';\n      import { inject as service } from '@ember/service';\n      import { computed } from '@ember/object';\n      export default Component.extend({\n          activeUserService: service('active-user'),\n          nameIsSet: computed('activeUserService.user',function() {\n              return this.get('activeUserService').hasUser();\n          })\n      });\n```\n\nHere we injected the `active-user` service into the `chat-app` component by using the `inject` function from the `@ember/service` module.\n\nWe then created a [computed property](https://guides.emberjs.com/release/object-model/computed-properties/) which will be set to true or false if a username for a user is set.\n\n### Chat app template\nThe template for the `chat-app` component will conditionally render two other components `list-messages` and `chat-username` if the username of a user is set. Open the template file `./app/templates/components/chat-app.hbs` and update it as shown below:\n\n``` html\n    {{!-- ./app/templates/components/chat-app.hbs --}}\n    \n      \u003cdiv\u003e\n        {{#if nameIsSet}}\n        \u003cdiv class=\"container\"\u003e\n          \u003cdiv class=\"row chat-window col-xs-12 col-md-5 col-md-offset-3\" id=\"chat_window_1\"\u003e\n            \u003cdiv class=\"col-xs-12 col-md-12\"\u003e\n              \u003cdiv class=\"panel panel-default\"\u003e\n                \u003cdiv class=\"panel-heading top-bar\"\u003e\n                  \u003cdiv class=\"col-md-8 col-xs-8\"\u003e\n                    \u003ch3 class=\"panel-title\"\u003e\u003cspan class=\"glyphicon glyphicon-comment\"\u003e\u003c/span\u003e Welcome \u003cb\u003e{{ userName }}\u003c/b\u003e\u003c/h3\u003e\n                  \u003c/div\u003e\n                  \u003cdiv class=\"col-md-4 col-xs-4\" style=\"text-align: right;\"\u003e\n                    \u003ca href=\"#\"\u003e\u003cspan class=\"glyphicon glyphicon-remove icon_close\" data-id=\"chat_window_1\"\u003e\u003c/span\u003e\u003c/a\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"panel-body msg_container_base\"\u003e\n                   {{#list-messages}}{{/list-messages}}\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n      \u003c/div\u003e\n      {{else}}\n      \u003cdiv class=\"text-center\"\u003e\n          {{#chat-username}}{{/chat-username}}\n      \u003c/div\u003e\n      {{/if}} \n      \u003c/div\u003e\n```\n\n## Username component\n\nThe username component will show the user a form to enter their name. Run this command to generate the component:\n\n```\n    ember g component chat-username\n```\n\n### Username component file\n\nOnce a user inputs a username and submits the form, we will use the `userSubmittedName` action to get the name and send it to the `active-user` service. Update the username component file as shown here:\n\n``` javascript\n     // ./app/components/chat-username.js\n     \n      import Component from '@ember/component';\n      import { inject as service } from '@ember/service';\n      export default Component.extend({\n          activeUserService: service('active-user'),\n          actions: {\n              userSubmittedName() {\n                  const user = this.get('userName');\n                  this.get('activeUserService').setUser(user);\n              }\n          }\n      });\n```\n\n### Username component template\n\nThe username template just shows the input field and a button that calls the `userSubmittedName` action that we defined earlier. Add the content below to `./app/templates/components/chat-username.hbs` file:\n\n``` html\n     {{!-- ./app/templates/components/chat-username.hbs --}}\n     \n      \u003cdiv class=\"intro\"\u003e\n          \u003cp\u003eEnter your username name and start chatting! \u003c/p\u003e\n          \u003cdiv class=\"start-chat\"\u003e\n              {{input placeholder=\"jack\" value=userName }}\n              \u003cbutton {{action \"userSubmittedName\"}}\u003e\n                  Start chat\n              \u003c/button\u003e\n          \u003c/div\u003e\n      \u003c/div\u003e\n```\n\n## Chat message component\n\nNext, we’ll generate the `chat-message` component with:\n\n```\n    ember g component chat-message\n```\n\n### Chat message component file\n\nThis component will display each individual’s message:\n\n``` javascript\n      // ./app/components/chat-message.js\n      \n      import Component from '@ember/component';\n      import { computed } from '@ember/object';\n      import strftime from 'npm:strftime';\n      import he from 'npm:he';\n      export default Component.extend({\n          timestamp: computed('message.time', function() {\n              return strftime('%H:%M:%S %P', new Date(this.get('message').time));\n          }),\n          text: computed('message.text', function() {\n              return he.decode(this.get('message').text);\n          }),\n      });\n```\n\nIn the code snippet above, we defined two computed properties; `timestamp` and `text`.  The `timestamp` property uses the [strftime library](https://github.com/samsonjs/strftime) to format time while we used the [he library](https://github.com/mathiasbynens/he) to decode our HTML from the server.\n\n### Chat message component template\n\nThis template will display the username along with two properties that we defined earlier in our component. Open `./app/templates/components/chat-message.hbs` and update it like this:\n\n``` html\n    {{!-- ./app/templates/components/chat-message.hbs --}}\n    \n      \u003cdiv class=\"col-md-2 col-xs-2 avatar\"\u003e\n          \u003cimg src=\"http://www.bitrebels.com/wp-content/uploads/2011/02/Original-Facebook-Geek-Profile-Avatar-1.jpg\" class=\" img-responsive \"\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"col-md-10 col-xs-10\"\u003e\n          \u003cdiv class=\"messages msg_receive\"\u003e\n              \u003cp\u003e{{ text }}\u003c/p\u003e\n               \u003ctime datetime=\"2009-11-13T20:00\"\u003e{{ message.username }} • {{ timestamp }}\u003c/time\u003e\n              \u003cp\u003e{{ message.mood }}\u003c/p\u003e\n          \u003c/div\u003e\n      \u003c/div\u003e\n```\n\n## List messages component\n\nAll the existing messages posted by an individual user will be listed by this component. To generate it, open your terminal and run the command below:\n\n```\n     ember g component list-messages\n```\n\n### List messages component file\n\nOpen the `./app/components/list``-messages``.js` file and add the following content:\n\n``` javascript\n    // ./app/components/list-messages.js\n    \n      import Component from '@ember/component';\n      import { inject as service } from '@ember/service';\n      import axios from 'npm:axios';\n      import Pusher from 'npm:pusher-js';\n      \n      const SAD_EMOJI = [55357, 56864];\n      const HAPPY_EMOJI = [55357, 56832];\n      const NEUTRAL_EMOJI = [55357, 56848];\n      \n      export default Component.extend({\n          activeUserService: service('active-user'),\n          messages: ['Welcome to your chat app!'].map((message) =\u003e {\n              return {\n                username: 'Admin',\n                time: new Date(),\n                text: message,\n              };\n            }),\n          init() {\n              this._super(...arguments);\n              let pusher = new Pusher('YOUR_APP_KEY', { // update your APP_KEY\n                  cluster: 'CLUSTER',\n                  encrypted: true\n              });\n              const channel = pusher.subscribe('chat');\n              channel.bind('message', data =\u003e {\n                  const analysis = data.sentiment \u003e 0 ? HAPPY_EMOJI : (data.sentiment === 0 ? NEUTRAL_EMOJI : SAD_EMOJI);\n                  const response = {\n                      text: data.text,\n                      username: data.username,\n                      time: data.time,\n                      mood: String.fromCodePoint(...analysis)\n                  }\n                  this.get('messages').pushObject(response);\n              });\n          },\n          actions: {\n              newMessage() {\n                  const text = this.get('newMessage');\n                  const username = this.get('activeUserService').get('user');\n                  const time = new Date();\n            \n                  axios.post('http://localhost:3000/messages', { text, username, time });\n                  this.set('newMessage', '');\n              }\n          }\n      });\n```\n\nFirst, we imported the required module for this component and we added some constants of code points for a particular sentiment emoji. This will help us rendered an emoji corresponding to the mood of the user during the chat as analyzed by the sentiment module.\n\nIn addition, we injected the `active-user` service and set a default chat message for every user to see before starting a chat.\n\nNext, we initialize Pusher with the `APP_KEY` and `CLUSTER` as obtained from our Pusher account dashboard and then proceeded to use the `subscribe()` method from Pusher to subscribe to the created `chat` channel.\n\nFinally, the `newMessage()` action basically receives the message posted by a user and `POST` it to the server alongside the `username` and timestamp. This action will be triggered once the **Send** button in the template for this component is clicked.\n\nDon’t forget to replace the `YOUR_APP_KEY` and `CLUSTER` placeholder with the appropriate details from your Pusher account dashboard.\n\n### List messages component template\n\nThe responsibility of this template is to loop over each message and render a `chat-message` component.\n\n``` html\n    {{!-- ./app/templates/components/list-messages.hbs --}}\n    \n      {{#each messages as |message|}}\n      \u003cdiv class=\"row msg_container base_receive\"\u003e\n            {{#chat-message message=message}}{{/chat-message}}\n      \u003c/div\u003e\n      {{/each}}\n      \u003cdiv class=\"panel-footer\"\u003e\n          \u003cdiv class=\"input-group\"\u003e\n            {{ input value=newMessage id=\"btn-input\" type=\"text\" class=\"form-control input-sm chat_input\" placeholder=\"Write your message here...\"}}\n            \u003cspan class=\"input-group-btn\"\u003e\n                \u003cbutton class=\"btn btn-primary btn-sm\" id=\"btn-chat\" {{action \"newMessage\"}}\u003eSend\u003c/button\u003e\n            \u003c/span\u003e\n         \u003c/div\u003e\n      \u003c/div\u003e\n```\n\n## Updating the app template \n\nUpdate the application template with:\n\n``` html\n    {{!-- ./app/templates/application.hbs --}}\n      \n      {{#chat-app}}{{/chat-app}}\n      {{outlet}}\n```\n\n## Styling\n\nTo add some minimal styling to the page, open `./app/styles/app.css` and paste the code in it:\n\n``` css\n    // ./app/styles/app.css\n      \n      .col-md-2, .col-md-10{\n        padding:0;\n      }\n      .chat-window{\n        margin-top: 50px;\n      }\n      .chat-window \u003e div \u003e .panel{\n        border-radius: 5px 5px 0 0;\n      }\n      .icon_minim{\n        padding:2px 10px;\n      }\n      .msg_container_base{\n      background: #e5e5e5;\n      margin: 0;\n      padding: 0 10px 10px;\n      min-height:150px;\n      overflow-x:hidden;\n      }\n      .top-bar {\n      background: #666;\n      color: white;\n      padding: 10px;\n      position: relative;\n      overflow: hidden;\n      }\n      .msg_sent{\n        padding-bottom:20px !important;\n        margin-right:0;\n      }\n      .messages {\n      background: white;\n      padding: 10px;\n      border-radius: 2px;\n      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\n      max-width:100%;\n      }\n      .messages \u003e p {\n        font-size: 16px;\n        margin: 0 0 0.2rem 0;\n      }\n      .messages \u003e time {\n        font-size: 13px;\n        color: #ccc;\n      }\n      .msg_container {\n        padding: 10px;\n        overflow: hidden;\n        display: flex;\n      }\n      img {\n        display: block;\n        width: 100%;\n      }\n      .avatar {\n        position: relative;\n      }\n      .base_receive \u003e .avatar:after {\n        content: \"\";\n        position: absolute;\n        top: 0;\n        right: 0;\n        width: 0;\n        height: 0;\n        border: 5px solid #FFF;\n        border-left-color: rgba(0, 0, 0, 0);\n        border-bottom-color: rgba(0, 0, 0, 0);\n      }\n      .msg_container_base::-webkit-scrollbar-track\n      {\n        -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\n        background-color: #F5F5F5;\n      }\n      .msg_container_base::-webkit-scrollbar\n      {\n        width: 12px;\n        background-color: #F5F5F5;\n      }\n      .msg_container_base::-webkit-scrollbar-thumb\n      {\n        -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);\n        background-color: #555;\n      }\n      .btn-group.dropup{\n        position:fixed;\n        left:0px;\n        bottom:0;\n      }\n      .red-gradient-background {\n        background: #300D4F;\n        background-image: -webkit-linear-gradient(top, #300D4F, #d14e37);\n        background-image: linear-gradient(to bottom, #300D4F, #d14e37);\n      }\n      .red-gradient-background h2 {\n        color: #ffffff;\n        text-transform: capitalize;\n      }\n      .intro {\n        margin-top: 50px;\n        font-size: 16px;\n      }\n      .intro p {\n        margin-bottom: 20px;\n        font-size: 16px;\n      }\n```\n\n\n## Update the index page\n\nOpen the `./app/index.html` file and include the CDN file for Bootstrap to enhance the styling and layout of our application, also include a navigation bar code snippet just after the opening of the `\u003cbody\u003e` tag. Open up the file and add update as shown below:\n\n``` html\n        \u003c!-- ./app/index.html --\u003e\n        \u003c!DOCTYPE html\u003e\n      \u003chtml\u003e\n        \u003chead\u003e\n          \u003cmeta charset=\"utf-8\"\u003e\n          \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n          \u003ctitle\u003eChatAppEmber\u003c/title\u003e\n          \u003cmeta name=\"description\" content=\"\"\u003e\n          \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n          {{content-for \"head\"}}\n          \u003clink integrity=\"\" rel=\"stylesheet\" href=\"{{rootURL}}assets/vendor.css\"\u003e\n          \u003clink integrity=\"\" rel=\"stylesheet\" href=\"{{rootURL}}assets/chat-app-ember.css\"\u003e\n          \u003clink href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.0/css/bootstrap.min.css\" rel=\"stylesheet\" id=\"bootstrap-css\"\u003e\n      \n          {{content-for \"head-footer\"}}\n        \u003c/head\u003e\n        \u003cbody\u003e\n            \u003cnav class=\"navbar navbar-expand-lg navbar-light bg-light red-gradient-background\"\u003e\n                \u003cdiv class=\"collapse navbar-collapse justify-content-md-center\" id=\"navbarsExample08\"\u003e\n                  \u003ch2\u003eRealtime chat app\u003c/h2\u003e\n                \u003c/div\u003e\n              \u003c/nav\u003e\n          {{content-for \"body\"}}\n          \u003cscript src=\"{{rootURL}}assets/vendor.js\"\u003e\u003c/script\u003e\n          \u003cscript src=\"{{rootURL}}assets/chat-app-ember.js\"\u003e\u003c/script\u003e\n          {{content-for \"body-footer\"}}\n        \u003c/body\u003e\n      \u003c/html\u003e\n```\n\n## Test the application\n\nStop the Ember development server if it is currently running by typing `Ctrl + C`  in the terminal and restart it with: \n\n```\n    // start the server\n    ember serve\n```\n\nDon’t forget to run `node app.js` to start the Express server incase you haven’t done that. Once you are done, navigate to http://localhost:4200 to test the application:\n\n![ember-chat-screenshot](//images.ctfassets.net/1es3ne0caaid/3yDt7eXbKE6woeyKsaE8wa/28d658edaafedabfe07de9750b7ddefc/ember-chat-screenshot.png)\n\n## Conclusion\n\nIn this tutorial, we have been able to build a basic chat application with sentiment. Sentiment analysis was used here to detect the mood of users during a chat. This tutorial can be improved on by adding extra features to make it go beyond just a basic chat application.\n\nI hope you found this helpful. The source code can be found here on [GitHub](https://github.com/yemiwebby/chat-app-ember).","metaTitle":"Build a chat app using Ember.js","metaDescription":"This tutorial will show you how to create a a chat app with Ember.js. The app features sentiment analysis and realtime messaging."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3VEglrEeqASMosuQEcaEQo","type":"Entry","createdAt":"2018-06-15T10:48:02.874Z","updatedAt":"2019-01-02T15:34:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app in the terminal using Python","url":"chat-terminal-python","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/terminal-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-06-12","description":"Build a chat app with Python that allows users to log in and chat from within a terminal. Use Pysher to subscribe to Pusher events on the backend.","prerequisite":"You will need Python 3 and pip installed on your machine. Some knowledge of Python is useful.","content":"Realtime chat is virtually any online communication that provides a realtime or live transmission of text messages from sender to receiver. This tutorial will show you how to build a realtime terminal chat using Python and Pusher Channels.\n\nIt’s lightweight to use the terminal for our chat, as there is no opening of the browser, loading of JS libraries or any frontend code. Also, it allows us to quickly test our ideas without worrying about what the user interface would look like.\n\n\u003e Python in this tutorial refers to Python 3.x\n\n![terminal-chat-python-demo](//images.ctfassets.net/1es3ne0caaid/SSI8gfhYe2WqGqC8826CM/16df9691cc56bea6c6bb8442c6da884b/terminal-chat-python-demo.gif)\n\n## Prerequisites\n\nA basic understanding of Python is needed to follow this tutorial.\nYou also need to have Python 3 and pip installed and configured on your machine.\n\n## Set up an app on Pusher\n\n[Pusher](https://pusher.com/) is a hosted service that makes it super-easy to add realtime data and functionality to web and mobile applications.\n\nPusher acts as a realtime layer between your servers and clients. Pusher maintains persistent connections to the clients - over Web-socket if possible and falling back to HTTP-based connectivity - so that as soon as your servers have new data they want to push to the clients they can do, via Pusher.\n\nIf you do not already have one, head over to Pusher and create a free account. We will register a new app on the dashboard. The only compulsory options are the app name and cluster. A cluster represents the physical location of the Pusher server that will handle your app’s requests. Also, copy out your App ID, Key, and Secret from the App Keys section, as we will need them later on.\n\n\n## Creating our application\n\n### Initial steps\n\nFirst, we need to install a package called `virtualenv`. Virtualenv helps to manage environments in Python. This is so we do not end up with conflicting libraries due to install operations from project to project. To install Virtualenv, we run:\n\n```\n    sudo pip install virtualenv\n```\n\nFor Windows users,  open Powershell as admin, and run:\n\n```\n    pip install virtualenv\n```\n\nOnce the install is completed, we can verify by running:\n\n```\n    virtualenv --version\n```\n\nNext, let us create a new environment with Virtualenv:\n\n```\n    virtualenv terminal-chat\n```\n\nOnce the environment is done creating, we move into the new directory created and we activate the environment:\n\n```\n    # change directory\n    cd terminal-chat\n    # activate environment\n    source bin/activate\n```\n\nFor Windows users, you can activate by running:\n\n```\n    # change directory\n    cd terminal-chat\n    # activate environment\n    Scripts\\activate\n```\n\nWe need to install libraries, which we will use during this project. To install them, run:\n\n```\n    pip install termcolor pusher git+https://github.com/nlsdfnbch/Pysher.git python-dotenv\n```\n\nWhat are these packages we have installed? And what do they do? I’ll explain.\n\n\n- `termcolor`: ANSII Color formatting for output in the terminal. This package will format the color of the output to the terminal. Note that the colors won't display in Powershell or Windows Command Prompt.\n- `pusher`: the official Python library for interacting with the Pusher HTTP API.\n- `pysher`: Python module for handling pusher WebSockets. This will handle event subscriptions using Pusher\n- `python-dotenv`: Python module that reads the key, value pair from `.env` file and adds them to the environment variable. \n\n### Creating the entry point\nLet us create a new `.env` file which will hold our environment variables, which will be used in connecting to Pusher. Create a new file called `.env` and add your pusher app id, key, secret and cluster respectively:\n\n```\n    PUSHER_APP_ID=YOUR_APP_ID\n    PUSHER_APP_KEY=YOUR_APP_KEY\n    PUSHER_APP_SECRET=YOUR_APP_SECRET\n    PUSHER_APP_CLUSTER=YOUR_APP_CLUSTER\n```\n\nNext, create a file called `terminalChat.py` and add:\n\n``` python\n    import getpass\n    from termcolor import colored\n    from dotenv import load_dotenv\n    load_dotenv(dotenv_path='.env')\n    class terminalChat():\n        pusher = None\n        channel = None\n        chatroom = None\n        clientPusher = None\n        user = None\n        users = {\n            \"samuel\": \"samuel'spassword\",\n            \"daniel\": \"daniel'spassword\",\n            \"tobi\": \"tobi'spassword\",\n            \"sarah\": \"sarah'spassword\"\n        }\n        chatrooms = [\"sports\", \"general\", \"education\", \"health\", \"technology\"]\n    \n        ''' The entry point of the application'''\n        def main(self):\n            self.login()\n            self.selectChatroom()\n            while True:\n                self.getInput()\n    \n        ''' This function handles login to the system. In a real-world app, \n        you might need to connect to API's or a database to verify users '''\n    \n        def login(self):\n            username = input(\"Please enter your username: \")\n            password = getpass.getpass(\"Please enter %s's Password:\" % username)\n            if username in self.users:\n                if self.users[username] == password:\n                    self.user = username\n                else:\n                    print(colored(\"Your password is incorrect\", \"red\"))\n                    self.login()\n            else:\n                print(colored(\"Your username is incorrect\", \"red\"))\n                self.login()\n    \n        ''' This function is used to select which chatroom you would like to connect to '''\n        def selectChatroom(self):\n            print(colored(\"Info! Available chatrooms are %s\" % str(self.chatrooms), \"blue\"))\n            chatroom = input(colored(\"Please select a chatroom: \", \"green\"))\n            if chatroom in self.chatrooms:\n                self.chatroom = chatroom\n                self.initPusher()\n            else:\n                print(colored(\"No such chatroom in our list\", \"red\"))\n                self.selectChatroom()\n                \n        ''' This function is used to get the user's current message '''\n        def getInput(self):\n            message = input(colored(\"{}: \".format(self.user), \"green\"))\n    \n    if __name__ == \"__main__\":\n        terminalChat().main()\n```\n\nWhat is going on in the code above?\n\nWe import the colored module which will give colors to our console output and the `load_env` module to load environment variables from our `.env` file. We then called the `load_env`\nfunction.\n\nThe `terminalChat` class is then defined, with some properties:\n\n\n- `pusher` : this property will hold the Pusher server instance once it is available.\n- `channel`: this property will hold the Pusher instance of the channel subscribed to.\n- `chatroom`: this property will hold the name of the channel the user wants to chat in.\n- `clientPusher`: this property will hold the Pusher client instance once it is available.\n- `user`: this property will hold the details of the currently logged in user.\n- `users`: this property holds a static list of users who can log in, with their values as the password. In a real-world application, this would usually be gotten from some database\n- `chatrooms`: this property holds a list of all available chat-rooms one can join.\n\n### Understanding the defined functions\nWe have four functions defined, which I will explain how they work respectively:\n\n`main`: this is the entry point into our application. Here, we call the function to log in, and the function to select a chat room. After this, we have a while loop that calls the `getInput`  function. This while loop means the `getInput` function will always be running. This is to enable us always have an input to type in new messages to the terminal.\n\n`login`: the login function is as simple as the name implies. It is used to manage login into the app. In the function, we ask for both the username and password of the user. Next, we check if the username exists in our user’s dictionary. Also, we check if the password correlates with the user’s password. If all is well, we assign the user variable to the value of the user input.\n\n\n\u003e Note: for the sake of this tutorial, we have a pre-defined dictionary of users. In your application, you may need to verify that the user exists in your database. \n\n`selectChatroom`: as the name implies, this function enables the user to select a chat-room. First, it informs the user of the available chat-rooms, before proceeding to ask us to select a chat-room. Once a valid chat-room has been selected, we assign the chat-room variable to the selected room, and we call a method called `initPusher` (which we will create soon), which initializes and sets up Pusher to send and receive messages.\n\n`getInput`:  this function is simple. It shows an input with the logged in user’s name in front, waiting for the user to enter a message and send. For now, it does nothing to the message, we will revisit this function once Pusher has been set up correctly.\n\n### Connecting the Pusher server and client to our app\nIf we remember, in the previous section above, we discussed the `initPusher` method which initializes and sets up Pusher to send and receive messages. Here is where we implement that function. \nFirst, we need to add the following imports to the top of our file:\n\n``` python\n    #terminalChat.py\n    from pusher import Pusher\n    import pysher\n    import os\n    import json \n```\n\nNext, let’s go ahead and defined `initPusher` and some other functions within our terminalChat class:\n\n``` python\n    ''' This function initializes both the Http server Pusher as well as the clientPusher'''\n    def initPusher(self):\n        self.pusher = Pusher(app_id=os.getenv('PUSHER_APP_ID', None), key=os.getenv('PUSHER_APP_KEY', None), secret=os.getenv('PUSHER_APP_SECRET', None), cluster=os.getenv('PUSHER_APP_CLUSTER', None))\n        self.clientPusher = pysher.Pusher(os.getenv('PUSHER_APP_KEY', None), os.getenv('PUSHER_APP_CLUSTER', None))\n        self.clientPusher.connection.bind('pusher:connection_established', self.connectHandler)\n        self.clientPusher.connect()\n        \n    ''' This function is called once pusher has successfully established a connection'''\n    def connectHandler(self, data):\n        self.channel = self.clientPusher.subscribe(self.chatroom)\n        self.channel.bind('newmessage', self.pusherCallback)\n    \n    ''' This function is called once pusher receives a new event '''\n    def pusherCallback(self, message):\n        message = json.loads(message)\n        if message['user'] != self.user:\n            print(colored(\"{}: {}\".format(message['user'], message['message']), \"blue\"))\n            print(colored(\"{}: \".format(self.user), \"green\"))\n```\n\nIn the init function, we initialize a new Pusher instance to the `pusher` variable, passing in our `APP_ID`, `APP_KEY`, `APP_SECRET` and `APP_CLUSTER` respectively. Next, we initialize a new `Pysher`  client for Pusher, passing in our `APP_KEY`. We then bind to the connection, the `pusher:connection_established` event, and pass the `connectHandler` function as it’s callback. The reason we do this is to ensure that the client has been connected before we try to subscribe to a channel. After this is done, we call `connect` on the `clientPusher`.\n\n\n\u003e You might have been wondering why we are using [Pysher](https://github.com/nlsdfnbch/Pysher) as the client library for Pusher here. It is because the default Pusher library only allows for triggering of events and not subscribing to them. [Pysher](https://github.com/nlsdfnbch/Pysher) is a community library which allows us to subscribe for events using Python on the server. \n\nIn the `connectHandler` function, we receive an argument called `data`. This comprises connection data that comes from the established connection between the Pusher WebSockets. \nWe subscribe to the channel, which has been chosen with Pusher, then bind to an event called `newmessage`, passing in the `pusherCallback` function as it’s callback.\n\nIn the `pusherCallback` method, we receive an argument called `message`, which returns the object of the new message received from Pusher. Here, we convert the message to a readable JSON format for Python, then check if the message isn't for the currently logged in user before printing the message to the screen alongside the sender’s name. We also print the logged in user’s name to the screen, with a colon in its front, so the user knows he can still type.\n\n### Updating the getInput function\nLet’s update our `getInput` function, so we can trigger the message to Pusher once it is received:\n\n``` python\n    ''' This function is used to get the user's current message '''\n    def getInput(self):\n        message = input(colored(\"{}: \".format(self.user), \"green\"))\n        self.pusher.trigger(self.chatroom, u'newmessage', {\"user\": self.user, \"message\": message})\n```\n\nHere, after receiving the message, we trigger a `newmesage`  event to the current chat-room, passing the current user and the message sent.\n\n### Bringing it all together as one piece\nHere is what our `terminalChat.py` looks like:\n\n``` python\n    import getpass\n    from termcolor import colored\n    from pusher import Pusher\n    import pysher\n    from dotenv import load_dotenv\n    import os\n    import json\n    \n    load_dotenv(dotenv_path='.env')\n    \n    class terminalChat():\n        pusher = None\n        channel = None\n        chatroom = None\n        clientPusher = None\n        user = None\n        users = {\n            \"samuel\": \"samuel'spassword\",\n            \"daniel\": \"daniel'spassword\",\n            \"tobi\": \"tobi'spassword\",\n            \"sarah\": \"sarah'spassword\"\n        }\n        chatrooms = [\"sports\", \"general\", \"education\", \"health\", \"technology\"]\n    \n        ''' The entry point of the application'''\n        def main(self):\n            self.login()\n            self.selectChatroom()\n            while True:\n                self.getInput()\n    \n        ''' This function handles logon to the system. In a real world app, \n        you might need to connect to API's or a database to verify users '''\n    \n        def login(self):\n            username = input(\"Please enter your username: \")\n            password = getpass.getpass(\"Please enter %s's Password:\" % username)\n            if username in self.users:\n                if self.users[username] == password:\n                    self.user = username\n                else:\n                    print(colored(\"Your password is incorrect\", \"red\"))\n                    self.login()\n            else:\n                print(colored(\"Your username is incorrect\", \"red\"))\n                self.login()\n    \n        ''' This function is used to select which chatroom you would like to connect to '''\n        def selectChatroom(self):\n            print(colored(\"Info! Available chatrooms are %s\" % str(self.chatrooms), \"blue\"))\n            chatroom = input(colored(\"Please select a chatroom: \", \"green\"))\n            if chatroom in self.chatrooms:\n                self.chatroom = chatroom\n                self.initPusher()\n            else:\n                print(colored(\"No such chatroom in our list\", \"red\"))\n                self.selectChatroom()\n    \n        ''' This function initializes both the Http server Pusher as well as the clientPusher'''\n        def initPusher(self):\n            self.pusher = Pusher(app_id=os.getenv('PUSHER_APP_ID', None), key=os.getenv('PUSHER_APP_KEY', None), secret=os.getenv('PUSHER_APP_SECRET', None), cluster=os.getenv('PUSHER_APP_CLUSTER', None))\n            self.clientPusher = pysher.Pusher(os.getenv('PUSHER_APP_KEY', None), os.getenv('PUSHER_APP_CLUSTER', None))\n            self.clientPusher.connection.bind('pusher:connection_established', self.connectHandler)\n            self.clientPusher.connect()\n            \n        ''' This function is called once pusher has successfully established a connection'''\n        def connectHandler(self, data):\n            self.channel = self.clientPusher.subscribe(self.chatroom)\n            self.channel.bind('newmessage', self.pusherCallback)\n        \n        ''' This function is called once pusher receives a new event '''\n        def pusherCallback(self, message):\n            message = json.loads(message)\n            if message['user'] != self.user:\n                print(colored(\"{}: {}\".format(message['user'], message['message']), \"blue\"))\n                print(colored(\"{}: \".format(self.user), \"green\"))\n        \n        ''' This function is used to get the user's current message '''\n        def getInput(self):\n            message = input(colored(\"{}: \".format(self.user), \"green\"))\n            self.pusher.trigger(self.chatroom, u'newmessage', {\"user\": self.user, \"message\": message})\n    \n    \n    if __name__ == \"__main__\":\n        terminalChat().main()\n```\n\nHere is what our chat looks like if we run `python terminalChat.py`:\n\n![terminal-chat-python-demo](//images.ctfassets.net/1es3ne0caaid/SSI8gfhYe2WqGqC8826CM/16df9691cc56bea6c6bb8442c6da884b/terminal-chat-python-demo.gif)\n\n## Conclusion\n\nWe’ve seen how straightforward it is to add realtime chats to our terminal, thanks to Pusher Channels. Our demo app is a simple example. The same functionality could be used in many real world scenarios. You can check out the source code of the completed application on [GitHub](https://github.com/samuelayo/terminal-chat), and dive deeper into Pusher services [here](https://pusher.com/docs).","metaTitle":"Build a chat app in the terminal using Python","metaDescription":"In this short tutorial you will create a simple chat app using Python and Pysher. Users will be able to log in, join channels and chat from within their terminal."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3n5lQ5Ma4g4IYo6agGmECC","type":"Entry","createdAt":"2018-06-15T10:48:50.972Z","updatedAt":"2018-06-15T10:48:50.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Add live comments in Gatsby","url":"realtime-comments-gatsby","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/Robophil/gatsby-site-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-06-12","description":"Build a simple website with Gatsby and React featuring realtime comments. Create a football blog, where users can post comments and see others' responses instantly.","prerequisite":"You will need Node and npm or Yarn installed on your machine. A basic understanding of JavaScript will be helpful.","content":"According to Wikipedia, a static web page (sometimes called a flat page/stationary page) is a web page that is delivered to the user exactly as stored, in contrast to [dynamic web pages](https://en.wikipedia.org/wiki/Dynamic_web_page) which are generated by a web application\n\n[Gatsby](https://www.gatsbyjs.org/blog/2017-05-31-introduction-to-gatsby/) is a modern static site generator that allows you to build static web pages using [React](https://reactjs.org/) and [GraphQl](https://graphql.org/). Getting started with Gatsby is pretty easy and its installation is an `npm install` or `yarn install` away.\n\nToday we’ll be adding a realtime comment section to the sports blog we’ll be building. We’ll call our blog the “Football transfer buzz with Gordon Mc-gossip”.\nOur application will contain a post and allow users to leave comments and everyone gets to see it in realtime.\n\n![gatsby-comments-demo](//images.ctfassets.net/1es3ne0caaid/5DaAhewQDuME6q6MgMmuis/d5595eb8ac39c81c13d15ba193e1241f/gatsby-comments-demo.gif)\n\n## Prerequisites\n\n1. Kindly ensure you have [Node](https://nodejs.org/en/download/), [Npm](https://www.npmjs.com/get-npm) or [Yarn](https://yarnpkg.com/en/docs/install) installed on your machine before moving past this section. This will be needed for running and managing the dependencies needed by our application. \n2. Also, no knowledge of React is required, but a basic understanding of JavaScript may be helpful.\n3. [Pusher](https://pusher.com/): this is a framework that allows you to build realtime applications with its easy to use pub/sub messaging API.\n4. [Gatsby](https://www.gatsbyjs.org/): this is a static site generator. ( minimum version `\"gatsby\": \"^1.9.247\"`)\n\n\n\n## Install Gatsby\n\nInstalling [Gatsby](https://www.gatsbyjs.org/) is pretty easy once you have Node installed on your machine. Simply run:\n\n```\n    # for npm users\n    npm i -g gatsby-cli\n```\n\n```\n    # for yarn users\n    yarn global add gatsby-cli\n```\n\nThis Gatsby CLI comes with a few helpful commands that can help you build and test your apps locally.\n\n\n## Create your app\n\nTo create our project, simply run:\n\n```\n    # new gatsby project\n    gatsby new gatsby-site-pusher\n```\n\nThis will create our new project `Transfer-Buzz` and install its dependencies. If you `cd` into your new project directory, it will look like this.\n\n![gatsby-comments-structure](//images.ctfassets.net/1es3ne0caaid/6MyCLMe22IYIowK4wIGGyI/922325c14c5258e67a58d50ae8601221/gatsby-comments-structure.png)\n\nMost of the work we’ll be doing would be in the `src/` directory. The components we’ll create would go into the `src/components` directory and pages would go into the `src/pages` directory.\n\nInstall dependency:\n\n```\n    # for npm users\n    npm i --save pusher-js\n```\n\n```\n    # for yarn users\n    yarn add pusher-js\n```\n\n## Get our Pusher credentials\n\nIf you don't have a Pusher account already, kindly create one [here](https://pusher.com/signup). Once you have an account, simply head down to your [dashboard](https://dashboard.pusher.com/) and create an app. Once that is done, click on **App Keys** and note your credentials. We'll be needing them in a bit.\n\n![gatsby-comments-app-keys](//images.ctfassets.net/1es3ne0caaid/3abrlRyXEkoGs0AcsuYoGA/e3362163d26b7cf5027894f8509381f6/gatsby-comments-app-keys.png)\n\n\n## Creating our app components\n\nThe first component we’ll create is our `CommentList` component. This will be responsible for listing the comments left by users.\n\n``` javascript\n    // src/components/comment-list.js\n    \n    import React from 'react'\n    \n    export default ({comments}) =\u003e {\n      comments = comments.map((comment, i) =\u003e (\n        \u003cdiv key={i} style={{\n          padding: '5px',\n          border: '1px solid grey'\n        }}\u003e\n          \u003cp\u003e\u003cstrong\u003e{comment.author}:\u003c/strong\u003e\u003c/p\u003e\n          \u003cp\u003e{comment.message}\u003c/p\u003e\n        \u003c/div\u003e\n      ))\n      return (\n        \u003csection\u003e\n          \u003cstrong\u003eComments: \u003c/strong\u003e{comments}\n        \u003c/section\u003e\n      )\n    }\n```    \n\nThis simply takes an array of comments with attributes `{author, message}` and returns a `CommentList` component.\n\nNext, is the `Comment` component, which will have a form for accepting new comments and list comments below.\n\n``` javascript\n    // src/components/comment.js\n    import React, { Component } from 'react'\n    import CommentList from './comment-list'\n    import Pusher from 'pusher-js'\n    \n    /**\n    * initialize pusher with your credentials.\n    * Get 'key' from pusher dashboard\n    */\n    const pusher = new Pusher('key', {\n      cluster: 'eu',\n      encrypted: true\n    })\n    \n    // subscribe your pusher instance to the channel 'sport-buzz-news'\n    const channel = pusher.subscribe('sport-buzz-news')\n    \n    /* global fetch */\n    export default class Comment extends Component {\n      constructor (props) {\n        super(props)\n        this.state = {\n          comments: [],\n          author: '',\n          message: ''\n        }\n      }\n    \n    /**\n    * This will load components from the server on app startup,\n    * and also subscribe our app to listen for updates\n    */\n      async componentDidMount () {\n        const comments = await fetch('http://localhost:8080/comments').then(res =\u003e res.json())\n        this.setState({comments: [...comments, ...this.state.comments]})\n        this.receiveUpdateFromPusher()\n      }\n    \n      componentWillUnmount () {\n        pusher.unsubscribe('sport-buzz-news')\n      }\n    \n      /**\n      * add new comments to the top of the list\n      * once there's an update\n      */\n      receiveUpdateFromPusher () {\n        channel.bind('new-comment', comment =\u003e {\n          this.setState({\n            comments: [comment, ...this.state.comments]\n          })\n        })\n        console.log('app subscription to event successful')\n      }\n    \n      handleChange (type, event) {\n        if (type === 'author') {\n          this.setState({author: event.target.value})\n          return\n        }\n        if (type === 'message') {\n          this.setState({message: event.target.value})\n        }\n      }\n    \n      /**\n      * post comment to the server\n      */\n      async postComment (author, message) {\n        await fetch('http://localhost:8080/comment', {\n          body: JSON.stringify({author, message}),\n          method: 'POST',\n          headers: {\n            'user-agent': 'Mozilla/4.0 ',\n            'content-type': 'application/json'\n          }\n        })\n      }\n    \n      handleSubmit (event) {\n        event.preventDefault()\n        this.postComment(this.state.author, this.state.message)\n        this.setState({author: '', message: ''})\n      }\n    \n      render () {\n        return (\n          \u003cdiv\u003e\n            \u003cform onSubmit={this.handleSubmit.bind(this)}\u003e\n              \u003clabel\u003e\n              Name:\n                \u003cinput type='text' value={this.state.author} onChange={this.handleChange.bind(this, 'author')} /\u003e\n              \u003c/label\u003e\n              \u003clabel\u003e\n                \u003cbr /\u003e\n              Message:\n                \u003ctextarea type='text' value={this.state.message} onChange={this.handleChange.bind(this, 'message')} /\u003e\n              \u003c/label\u003e\n              \u003cbr /\u003e\n              \u003cinput type='submit' value='Submit' /\u003e\n            \u003c/form\u003e\n            \u003cCommentList comments={this.state.comments} /\u003e\n          \u003c/div\u003e\n        )\n      }\n    }\n```\n\nHere, when the component gets mounted, we try to load previous comments from the server and pass that data as `props` to the `CommentList` component.\n\n\n\u003e Note: please remember to updated placeholders with your pusher credentials.\n\n\n## Putting content on our page\n\nOpen your `src/pages/index.js` file which should already exist. You should replace its content with this:\n\n``` javascript\n    // src/pages/index.js\n    \n    import React from 'react'\n    import Comment from '../components/comment'\n    \n    const IndexPage = () =\u003e (\n      \u003cdiv\u003e\n        \u003ch1\u003eLeroy Aziz Sané left out of German squad for the world cup\u003c/h1\u003e\n        \u003cp\u003e\n          A lot of talks is currently ongoing about the Manchester City winger Leroy Sane being left out of the German team.\n          He was a prolific player this season with Mancity winning the premier league andthe significant contribution he brought to the team in front of Goal.\n          The decision by the German coach, Low to leave him out of the squad list was totally unexpected. Football really is a funny sport.\n        \u003c/p\u003e\n        \u003cp\u003e\n          Let me know your thoughts in the comment section below\n        \u003c/p\u003e\n        \u003cComment /\u003e\n      \u003c/div\u003e\n    )\n    \n    export default IndexPage\n```\n\nThis contains a post we made and the `Comment` component we imported above.\n\n\n## Getting data in Gatsby\n\nGatsby uses GraphQL for getting data. It could be from any source. There are a few files where changes need to be made to get data. We have `gatsby-node.js`, `gatsby-browser.js`, `gatsby-config.js` among others.\n\nWhat we’re concerned about right now is `gatsby-config.js`. It is responsible for passing data down to our `src/components/header.js` component. This gets data locally from the file and it’s an easy way to initialize your application with data.\n\nOpen up your `src/components/header.js` file and you should see this:\n\n``` javascript\n    // src/components/header.js\n    \n    import React from 'react'\n    import Link from 'gatsby-link'\n    \n    const Header = ({ siteTitle }) =\u003e (\n      \u003cdiv\n        style={{\n          background: 'rebeccapurple',\n          marginBottom: '1.45rem'\n        }}\n      \u003e\n        \u003cdiv\n          style={{\n            margin: '0 auto',\n            maxWidth: 960,\n            padding: '1.45rem 1.0875rem'\n          }}\n        \u003e\n          \u003ch1 style={{ margin: 0 }}\u003e\n            \u003cLink\n              to='/'\n              style={{\n                color: 'white',\n                textDecoration: 'none'\n              }}\n            \u003e\n              {siteTitle}\n            \u003c/Link\u003e\n          \u003c/h1\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    )\n    \n    export default Header\n```\n\nIt takes a prop called `siteTitle` which was exported from the file `gatsby-config.js`.\n\nFeel free to go ahead and change the value for `title` in `gatsby.js` to `Football transfer buzz with Gordon Mc-Gossip'`. \n\n\n## Setting up the server\n\nComments sent by users need to go somewhere, that’s what the server is for. It will save the comment, and publish it to Pusher who will trigger an update to all clients subscribed to that channel and listening for that event.\n\nFirst, we’ll need to add the dependencies needed by our server.\n\n```\n    # for yarn users\n    yarn add express body-parser cors pusher\n```\n\n```\n    # for npm users\n    npm i express body-parser cors pusher\n```\n\nCreate the file `server.js` and add the following:\n\n``` javascript\n    // server.js\n    const express = require('express')\n    const app = express()\n    const bodyParser = require('body-parser')\n    const cors = require('cors')\n    const Pusher = require('pusher')\n    \n    app.use(cors())\n    app.use(bodyParser.urlencoded({ extended: true }))\n    app.use(bodyParser.json())\n    \n    const port = process.env.PORT || 8080\n    \n    const pusher = new Pusher({\n      appId: 'appId',\n      key: 'key',\n      secret: 'secret',\n      cluster: 'eu',\n      encrypted: true\n    })\n    \n    let comments = [\n      {\n        author: 'robo',\n        message: 'i totally didn\\'t see that coming'\n      }\n    ]\n    \n    /**\n    * receive new comment from the client\n    * update the comments array with the new entry\n    * publish update to Pusher\n    */\n    app.post('/comment', function (req, res) {\n      const {author, message} = req.body\n      comments = [...[{author, message}], ...comments]\n      pusher.trigger('sport-buzz-news', 'new-comment', {author, message})\n      res.sendStatus(200)\n    })\n    \n    // send all comments to the requester\n    app.get('/comments', function (req, res) {\n      res.json(comments)\n    })\n    \n    app.listen(port, function () {\n      console.log('Node app is running at localhost:' + port)\n    })\n```    \n\nHere, we initialize Pusher with our credentials gotten from our dashboard. When we get a request on `localhost:8080/comments` we return all comments gotten so far and receive comments sent to `POST localhost:8080/comment`.\n\n\n## Running the app\n\nWe’ll use one of Gatsby’s helpful CLI commands to start our application. Simply run:\n\n```\n    # gatsby cli command\n    gatsby develop\n```\n\nThis will start our application on port  `8000` and can be accessed here `http://localhost:8000/`. \n\nYou’ll also need to start the server by running:\n\n```\n    # start node server\n    node server.js\n```\n\nOur server application will run on `http://localhost:8080/` and all API calls would go here.\n\n## More\n\nGatsby allows you to export as a static content when going to production. It could prefetch your data from any data source and bundle it into the generated static file.\n\nTo do that, simply run:\n\n```\n    # make production build\n    gatsby build\n```\n\n\u003e Gatsby will perform an optimized production build for your site generating static HTML and per-route JavaScript code bundles.\n\n## Conclusion\n\nWe’ve been able to build a simple blog application with a live comment section. This was done using Pusher and Gatsby.\nThe repo for this tutorial lives [here](https://github.com/Robophil/gatsby-site-pusher). Feel free to contribute.","metaTitle":"Add live comments in Gatsby","metaDescription":"This tutorial will show you how to create a football blog site using Gatsby and React. Users will be able to post comments and view updates instantly."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3t51o9pbwIUMo0o6CU2wcg","type":"Entry","createdAt":"2018-06-15T10:50:04.874Z","updatedAt":"2018-06-15T10:50:04.874Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a collaborative text editor with Gatsby and Draft.js","url":"collaborative-editor-gatsby-draftjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/9jaswag/pusher-editor","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-06-12","description":"Build a collaborative text editor using Gatsby. Implement realtime functionality to allow multiple people to work on the same text simultaneously, seeing updates instantly.","prerequisite":"You will need Node and npm installed on your machine. Some knowledge of React will be helpful.","content":"## Introduction\n\n[Gatsby](https://www.gatsbyjs.org/) is a static site generator for React that uses latest frontend technologies like Webpack and GraphQL. It can generate optimized and blazing-fast sites from Markdown, APIs, Databases, YAML, JSON, CSV and even CMSs like Contentful, Drupal and Wordpress.\n\n[Draft.js](https://draftjs.org/) is an open source framework from Facebook for building rich text editors in React. It is powered by an immutable model and abstracts over cross-browser differences.\n\nIn this post we’ll be combining the power of Gatsby, Draft.js and Pusher to build a realtime editor. Here’s a sneak-peak into what we’ll be building:\n\n![gatsby-collaborative-editing-demo](//images.ctfassets.net/1es3ne0caaid/7mnFUlTqrmQ2ew40SmQ8Cu/af2e3874e921fde0e286c018e51f4248/gatsby-collaborative-editing-demo.gif)\n\n## Prerequisites\n\nTo follow this tutorial, you need Node and NPM installed on your machine. A basic understanding of React will help you get the most out of this tutorial.\n\n\n## Install Gatsby\n\nGatsby supports versions of Node.js back to v6 and NPM to v3. If you don’t have Node.js installed, go to [https://nodejs.org/](https://nodejs.org/) and install the recommended version for your operating system.\nTo start a Gatsby app, we need to first install the Gatsby command line by running the following in the terminal:\n\n```\n    $ npm install --global gatsby-cli\n```\n\nOnce that is installed, still in your terminal, run the following command to create a new Gatsby site in a directory called `pusher-editor` and then move to this new directory:\n\n```\n    $ gatsby new pusher-editor\n    $ cd pusher-editor\n```\n\nOnce in the `pusher-editor` directory, you can run Gatsby’s built-in development server by running the following command:\n\n```\n    $ gatsby develop\n```\n\nThis starts up the development server which you can access at http://localhost:8000 from your browser. The Gatsby built in development server uses “hot reloading” which means changes made are instantly visible in the browser without reloading.\n\n![gatsby-default-page](//images.ctfassets.net/1es3ne0caaid/3KFX34LP56qI6YmcsUGWa2/5b9308f2074e36d54195343f94d66afe/gatsby-default-page.png)\n\n## Create a Pusher app\n\nTo create a Pusher app, you must have a Pusher account. Head over to Pusher and [create a free account](https://dashboard.pusher.com/accounts/sign_up).\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![gatsby-collaborative-editing-create-app](//images.ctfassets.net/1es3ne0caaid/2ogDscREokQcYGGMw8swKs/5340d88d24c82cf0a9b671ebdc20e9e0/gatsby-collaborative-editing-create-app.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate with Pusher, to be provided with some boilerplate setup code:\n\n![gatsby-collaborative-editing-configure-app](//images.ctfassets.net/1es3ne0caaid/fD5oG4WcHQyWSmMWuCMWw/6a86887340ceb803b172add91c464500/gatsby-collaborative-editing-configure-app.png)\n\nClick the **App Keys** tab to retrieve your keys\n\n![gatsby-collaborative-editing-app-keys](//images.ctfassets.net/1es3ne0caaid/5n5pzu9wmQ0ACEIymC4eS2/9e795a4fcb4a8ecdc40b70a350616607/gatsby-collaborative-editing-app-keys.png)\n\n## Setup the application\n\nNow that we have our Pusher app, let’s make some minor changes to our new Gatsby site. `Draft.js` supports unicode, and as a result, we need to add the `charset` meta tag in the `head` block of our app.\nIn the `index.js` file which can be found in `src/layouts/index.js`, there is a `Layout` functional component. Replace its contents with the following code:\n\n``` javascript\n    // src/layouts/index.js\n    \n    const Layout = ({ children, data }) =\u003e (\n      \u003cdiv\u003e\n        \u003cHelmet\n          title={data.site.siteMetadata.title}\n          meta={[\n            { name: 'description', content: 'Sample' },\n            { name: 'keywords', content: 'sample, something' },\n            { name: 'charset', content: 'utf-8' } # add the 'charset' meta tag\n          ]}\n        /\u003e\n        \u003cHeader siteTitle={data.site.siteMetadata.title} /\u003e\n        \u003cdiv className=\"container-fluid\"\u003e # apply bootstrap class to this div\n          {children()}\n        \u003c/div\u003e\n      \u003c/div\u003e\n    )\n```\n\nNext, we’ll change the name in the header of our app. In the root directory lives a `gatsby-config.js` file. Change the site meta data title property:\n\n``` javascript\n    # gatsby-config.js\n    \n    module.exports = {\n      siteMetadata: {\n        title: 'Pusher Realtime Editor', # change this line to any title of your choice\n      },\n      plugins: ['gatsby-plugin-react-helmet'],\n    }\n```\n\nLastly, let’s add some styles to our editor. In the `index.css` file, add the following code:\n\n``` css\n    /* src/layouts/index.css */\n    \n    /* top of the file */\n    @import url('https://fonts.googleapis.com/css?family=Muli');\n    \n    body {\n      margin: 0;\n      font-family: 'Muli', sans-serif !important; /* add this line to the body tag */\n    }\n    \n    .RichEditor-root {\n      background: #fff;\n      border: 1px solid #ddd;\n      font-family: 'Georgia', serif;\n      font-size: 14px;\n      padding: 15px;\n    }\n    .RichEditor-editor {\n      border-top: 1px solid #ddd;\n      cursor: text;\n      font-size: 16px;\n      margin-top: 10px;\n    }\n    .RichEditor-editor .public-DraftEditorPlaceholder-root,\n    .RichEditor-editor .public-DraftEditor-content {\n      margin: 0 -15px -15px;\n      padding: 15px;\n    }\n    .RichEditor-editor .public-DraftEditor-content {\n      min-height: 100px;\n    }\n    .RichEditor-hidePlaceholder .public-DraftEditorPlaceholder-root {\n      display: none;\n    }\n    .RichEditor-editor .RichEditor-blockquote {\n      border-left: 5px solid #eee;\n      color: #666;\n      font-family: 'Hoefler Text', 'Georgia', serif;\n      font-style: italic;\n      margin: 16px 0;\n      padding: 10px 20px;\n    }\n    .RichEditor-editor .public-DraftStyleDefault-pre {\n      background-color: rgba(0, 0, 0, 0.05);\n      font-family: 'Inconsolata', 'Menlo', 'Consolas', monospace;\n      font-size: 16px;\n      padding: 20px;\n    }\n    .RichEditor-controls {\n      font-family: 'Helvetica', sans-serif;\n      font-size: 14px;\n      margin-bottom: 5px;\n      user-select: none;\n      display: inline;\n    }\n    .RichEditor-styleButton {\n      color: #999;\n      cursor: pointer;\n      margin-right: 16px;\n      padding: 2px 0;\n      display: inline-block;\n    }\n    .RichEditor-activeButton {\n      color: #5890ff;\n    }\n    blockquote {\n      background: #f9f9f9;\n      border-left: 0.3rem solid #ccc;\n      margin: 1.5em 10px;\n      padding: 0.2em 0.5rem;\n      font-family: 'Hoefler Text', 'Georgia', serif;\n      font-style: italic;\n      border-top-left-radius: 0.2rem;\n      border-bottom-left-radius: 0.2rem;\n    }\n```\n\n## Create a simple server\n\nWith our Gatsby app set up, we need a simple server from where we’ll notify Pusher of updates to our editor. Let’s install some packages we need for our realtime editor. In your terminal, run the following command:\n\n```\n    $ yarn add draft-js draft-js-export-html pusher-js axios dotenv express body-parser pusher bootstrap\n```\n\nIn the command above, we added some dependencies for our app. Here’s what each package does:\n\n- `draft-js` - for creating our rich text editor.\n- `draft-js-export-html` - for converting our editor state to HTML.\n- `pusher-js` and `pusher` - for communicating with Pusher.\n- `axios` - for making HTTP requests from Node.js.\n- `dotenv` - for storing environmental variables.\n- `express` - for creating a web application server framework for Node.js.\n- `body-parser` - a Node.js body parsing middleware for parsing incoming request bodies.\n- `bootstrap` - for designing and styling HTML/CSS.\n\nNow we’ll create a simple Express server. In your code editor, open the `pusher-editor` directory and create a `server.js` and `.env` file in the root directory of your app. Add the following code to both files respectively:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config()\n    let express = require('express');\n    let bodyParser = require('body-parser');\n    let Pusher = require('pusher');\n    let app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // enable cross-origin resource sharing\n    app.use(function (req, res, next) {\n      res.header(\"Access-Control-Allow-Origin\", \"*\");\n      res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n      next();\n    });\n    \n    // create a Pusher client\n    let pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n    });\n    \n    // create a home route to test if the server works\n    app.get('/', function (req, res) {\n      res.send('all green');\n    });\n    \n    // create a \"save-text\" route to update Pusher when a new text is added to the editor\n    app.post('/save-text', function (req, res) {\n      if (req.body.text \u0026\u0026 req.body.text.trim() !== '') {\n        // send a 'text-update' event on the 'editor' channel with the editor text\n        pusher.trigger('editor', 'text-update', { text: req.body.text });\n        res.status(200).send({ success: true, message: 'text broadcasted' })\n      } else {\n        res.status(400).send({ success: false, message: 'text not broadcasted' })\n      }\n    })\n    \n    // create a \"editor-text\" route to update Pusher the latest state of our editor\n    app.post('/editor-text', function (req, res) {\n      if (req.body.text) {\n      // send a 'editor-update' event on the 'editor' channel with the editor current state\n        pusher.trigger('editor', 'editor-update', { text: req.body.text, selection: req.body.selection });\n        res.status(200).send({ success: true, message: 'editor update broadcasted' })\n      } else {\n        res.status(400).send({ success: false, message: 'editor update not broadcasted' })\n      }\n    })\n    \n    let port = process.env.PORT || 5000;\n    console.log(`server running on port ${port}`)\n    // run the server on our specified port\n    app.listen(port);\n\n\n    // .env\n    // add your Pusher keys here\n    PUSHER_APP_ID=\"YOUR APP ID\"\n    PUSHER_APP_KEY=\"YOUR APP KEY\"\n    PUSHER_APP_SECRET=\"YOUR APP SECRET\"\n    PUSHER_APP_CLUSTER=\"YOUR APP CLUSTER\"\n```\n\nIn the `server.js` file, we created a simple server with two routes for updating Pusher with the editor state and the editor’s HTML content. With this, Pusher is aware our editor text and current state.\nTo run this server, open the `pusher-editor` directory in another terminal window and run the following command:\n\n```\n    $ node server.js\n```\n\n## Create the editor component\n\nIn your code editor, open the `pusher-editor` directory and locate the `index.js` file in `src/pages/index.js`. Clear out all the code in the file and let’s import our packages and some components:\n\n``` javascript\n    // src/pages/index.js\n    \n    import React, { Component } from 'react'\n    import { Editor, EditorState, RichUtils, getDefaultKeyBinding, convertToRaw, convertFromRaw, SelectionState } from 'draft-js';\n    import { stateToHTML } from 'draft-js-export-html'\n    import Pusher from 'pusher-js';\n    import axios from 'axios'\n    import BlockStyleControls from '../components/blockStyleControls'\n    import InlineStyleControls from '../components/inlineStylesControls'\n    import 'bootstrap/dist/css/bootstrap.css'\n    \n    const styleMap = {\n      CODE: {\n        backgroundColor: 'rgba(0, 0, 0, 0.05)',\n        fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n        fontSize: 16,\n        padding: 2,\n      },\n    };\n```\n\nNext let’s create our rich editor component:\n\n``` javascript\n    // src/pages/index.js\n    \n    ...\n    class RichEditor extends Component {\n      constructor(props) {\n        super(props);\n        this.state = { editorState: EditorState.createEmpty(), text: '', };\n        this.focus = () =\u003e this.refs.editor.focus();\n        this.onChange = (editorState) =\u003e {\n          this.setState({ editorState })\n        };\n        this.handleKeyCommand = this._handleKeyCommand.bind(this);\n        this.mapKeyToEditorCommand = this._mapKeyToEditorCommand.bind(this);\n        this.toggleBlockType = this._toggleBlockType.bind(this);\n        this.toggleInlineStyle = this._toggleInlineStyle.bind(this);\n        this.getBlockStyle = this._getBlockStyle.bind(this);\n      }\n    }\n    export default RichEditor\n```\n\nIn the code snippet above, we created a class component with a constructor that contains our component’s state and methods.\n\nJust before our component mounts, we want to connect to Pusher and subscribe to the `editor` channel. To achieve this, we’ll use React’s `componentWillMount` life cycle method. Add the following code inside the `RichEditor` component:\n\n``` javascript\n    // src/pages/index.js\n    \n    ...\n    class RichEditor extends Component {\n    \n      ...\n      componentWillMount() {\n        this.pusher = new Pusher('YOUR PUSHER KEY', {\n          cluster: 'eu',\n          encrypted: true\n        });\n        this.channel = this.pusher.subscribe('editor');\n      }\n    }\n    export default RichEditor\n```\n\nRemember to add your Pusher key in the code above.\n\nNow that our Pusher client is subscribed to the `editor` channel, we want to listen for the `text-update` and `editor-update` events, so we can update our component state with new data.\n\nTo achieve this, we’ll use React’s `componentDidMount` life cycle method. Add the following code inside the `RichEditor` component:\n\n``` javascript\n    // src/pages/index.js\n    \n    ...\n    class RichEditor extends Component {\n    \n      ...\n      componentDidMount() {\n        let self = this;\n        // listen to 'text-update' events\n        this.channel.bind('text-update', function (data) {\n          // update the text state with new data\n          self.setState({ text: data.text })\n        });\n        // listen to 'editor-update' events \n        this.channel.bind('editor-update', function (data) {\n          // create a new selection state from new data\n          let newSelection = new SelectionState({\n            anchorKey: data.selection.anchorKey,\n            anchorOffset: data.selection.anchorOffset,\n            focusKey: data.selection.focusKey,\n            focusOffset: data.selection.focusOffset,\n          });\n          // create new editor state\n          let editorState = EditorState.createWithContent(convertFromRaw(data.text))\n          const newEditorState = EditorState.forceSelection(\n            editorState,\n            newSelection\n          );\n          // update the RichEditor's state with the newEditorState\n          self.setState({ editorState: newEditorState })\n        });\n      }\n    }\n    export default RichEditor\n```\n\n`Draft.js` only provides the building blocks for a text editor, this means we have to write out all the functionality of our text editor ourselves. In our `RichEditor` component, we’ll add some methods for simple editor functions like handling key commands, adding inline and block styles to text.\nAdd the following code inside your `RichEditor` component:\n\n``` javascript\n    # src/pages/index.js\n    \n    ...\n    class RichEditor extends Component {\n    \n      ...\n      // handle blockquote\n      _getBlockStyle(block) {\n        switch (block.getType()) {\n          case 'blockquote': return 'RichEditor-blockquote';\n          default: return null;\n        }\n      }\n      // handle key commands\n      _handleKeyCommand(command, editorState) {\n        const newState = RichUtils.handleKeyCommand(editorState, command);\n        if (newState) {\n          this.onChange(newState);\n          return true;\n        }\n        return false;\n      }\n      // map the TAB key to the editor\n      _mapKeyToEditorCommand(e) {\n        if (e.keyCode === 9 /* TAB */) {\n          const newEditorState = RichUtils.onTab(\n            e,\n            this.state.editorState,\n            4, /* maxDepth */\n          );\n          if (newEditorState !== this.state.editorState) {\n            this.onChange(newEditorState);\n          }\n          return;\n        }\n        return getDefaultKeyBinding(e);\n      }\n      // toggle block styles\n      _toggleBlockType(blockType) {\n        this.onChange(\n          RichUtils.toggleBlockType(\n            this.state.editorState,\n            blockType\n          )\n        );\n      }\n      // toggle inline styles\n      _toggleInlineStyle(inlineStyle) {\n        this.onChange(\n          RichUtils.toggleInlineStyle(\n            this.state.editorState,\n            inlineStyle\n          )\n        );\n      }\n    }\n    export default RichEditor\n```\n\nNext, let’s render the actual component:\n\n``` javascript\n    // src/pages/index.js\n    \n    ...\n    class RichEditor extends Component {\n    \n      ...\n      render() {\n        const { editorState } = this.state;\n        // If the user changes block type before entering any text, hide the placeholder.\n        let className = 'RichEditor-editor';\n        var contentState = editorState.getCurrentContent();\n        if (!contentState.hasText()) {\n          if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n            className += ' RichEditor-hidePlaceholder';\n          }\n        }\n        return (\n          \u003cdiv className=\"container-fluid\"\u003e\n            \u003cdiv className=\"row\"\u003e\n              \u003cdiv className=\"RichEditor-root col-12 col-md-6\"\u003e\n                {/* render our editor block style controls components */}\n                \u003cBlockStyleControls\n                  editorState={editorState}\n                  onToggle={this.toggleBlockType}\n                /\u003e\n                {/* render our editor's inline style controls components */}\n                \u003cInlineStyleControls\n                  editorState={editorState}\n                  onToggle={this.toggleInlineStyle}\n                /\u003e\n                \u003cdiv className={className} onClick={this.focus}\u003e\n                  {/* render the Editor exposed by Draft.js */}\n                  \u003cEditor\n                    blockStyleFn={this.getBlockStyle}\n                    customStyleMap={styleMap}\n                    editorState={editorState}\n                    handleKeyCommand={this.handleKeyCommand}\n                    keyBindingFn={this.mapKeyToEditorCommand}\n                    onChange={this.onChange}\n                    placeholder=\"What's on your mind?\"\n                    ref=\"editor\"\n                    spellCheck={true}\n                  /\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \u003cdiv className=\"col-12 col-md-6\"\u003e\n                {/* render a preview for the text in the editor */}\n                \u003cdiv dangerouslySetInnerHTML={{ __html: this.state.text }} /\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default RichEditor\n```\n\nLastly, let’s create the two components which we earlier imported into our `RichEditor` component. In the `src/components` directory, create three files;  `inlineStylesControls.js`, `blockStyleControls.js` and `styleButton.js` and add the following code respectively:\n\n``` javascript\n    // src/components/inlineStylesControls.js\n    \n    import React from 'react'\n    import StyleButton from './styleButton'\n    \n    // define our inline styles\n    let INLINE_STYLES = [\n      { label: 'Bold', style: 'BOLD' },\n      { label: 'Italic', style: 'ITALIC' },\n      { label: 'Underline', style: 'UNDERLINE' },\n      { label: 'Monospace', style: 'CODE' },\n    ];\n    const InlineStyleControls = (props) =\u003e {\n      const currentStyle = props.editorState.getCurrentInlineStyle();\n      return (\n        \u003cdiv className=\"RichEditor-controls\"\u003e\n        {/* map through our inline styles and display a style button for each /*}\n          {INLINE_STYLES.map((type) =\u003e\n            \u003cStyleButton\n              key={type.label}\n              active={currentStyle.has(type.style)}\n              label={type.label}\n              onToggle={props.onToggle}\n              style={type.style}\n            /\u003e\n          )}\n        \u003c/div\u003e\n      );\n    };\n    export default InlineStyleControls\n```\n\n``` javascript\n    // src/components/blockStyleControls.js\n    \n    import React, { Component } from 'react'\n    import StyleButton from './styleButton'\n    \n    // define our block styles\n    const BLOCK_TYPES = [\n      { label: 'H1', style: 'header-one' },\n      { label: 'H2', style: 'header-two' },\n      { label: 'H3', style: 'header-three' },\n      { label: 'H4', style: 'header-four' },\n      { label: 'H5', style: 'header-five' },\n      { label: 'H6', style: 'header-six' },\n      { label: 'Blockquote', style: 'blockquote' },\n      { label: 'UL', style: 'unordered-list-item' },\n      { label: 'OL', style: 'ordered-list-item' },\n      { label: 'Code Block', style: 'code-block' },\n    ];\n    const BlockStyleControls = (props) =\u003e {\n      const { editorState } = props;\n      const selection = editorState.getSelection();\n      const blockType = editorState\n        .getCurrentContent()\n        .getBlockForKey(selection.getStartKey())\n        .getType();\n      return (\n        \u003cdiv className=\"RichEditor-controls\"\u003e\n       {/* map through our block styles and display a style button for each */}\n          {BLOCK_TYPES.map((type) =\u003e\n            \u003cStyleButton\n              key={type.label}\n              active={type.style === blockType}\n              label={type.label}\n              onToggle={props.onToggle}\n              style={type.style}\n            /\u003e\n          )}\n        \u003c/div\u003e\n      );\n    };\n    export default BlockStyleControls\n```\n\n``` javascript\n    // src/components/styleButton.js\n    \n    import React, { Component } from 'react'\n    \n    class StyleButton extends React.Component {\n      constructor() {\n        super();\n        this.onToggle = (e) =\u003e {\n          e.preventDefault();\n          this.props.onToggle(this.props.style);\n        };\n      }\n      render() {\n        let className = 'RichEditor-styleButton';\n        if (this.props.active) {\n          className += ' RichEditor-activeButton';\n        }\n        return (\n          \u003cspan className={className} onMouseDown={this.onToggle}\u003e\n            {this.props.label}\n          \u003c/span\u003e\n        );\n      }\n    }\n    export default StyleButton;\n```\n\nIn the code snippets above, we have a `StyleButton` component in `src/components/styleButton.js`, which basically receives a text style and renders it in a `span` tag on the page. In `blockStyleControls.js` and `inlineStylesControls.js` we have arrays that contain both block and inline text styles. We map through each style and pass them to the `StyleButton` component which renders them.\n\n\n## Bringing it together\n\nIf you have followed the post to this point, you should have a working text editor on your page. To make the editor realtime, we need to notify Pusher every time there is a change in the editor’s state.\n\nTo do this, in our `RichEditor`  component’s `onChange` method, we’ll make an AJAX request to our server with the new editor’s state so it can be broadcasted in realtime.\n\nUpdate the `RichEditor` component’s `onChange` method with the following:\n\n``` javascript\n    // src/pages/index.js\n    \n    class RichEditor extends Component {\n      constructor(props) {\n        super(props);\n        this.state = { editorState: EditorState.createEmpty(), text: '', };\n        this.focus = () =\u003e this.refs.editor.focus();\n        this.onChange = (editorState) =\u003e { // update this line\n          // onChange, update editor state then notify pusher of the new editorState\n          this.setState({ editorState }, () =\u003e {\n            // call the function to notify Pusher of the new editor state\n            this.notifyPusher(stateToHTML(this.state.editorState.getCurrentContent()));\n            this.notifyPusherEditor(this.state.editorState)\n          })\n        }; // update ends here\n        this.handleKeyCommand = this._handleKeyCommand.bind(this);\n        this.mapKeyToEditorCommand = this._mapKeyToEditorCommand.bind(this);\n        this.toggleBlockType = this._toggleBlockType.bind(this);\n        this.toggleInlineStyle = this._toggleInlineStyle.bind(this);\n        this.getBlockStyle = this._getBlockStyle.bind(this);\n        this.notifyPusher = this._notifyPusher.bind(this); // add this line\n        this.notifyPusherEditor = this._notifyPusherEditor.bind(this); // add this line\n      }\n    \n      ...\n      // send the editor's text with axios to the server so it can be broadcasted by Pusher\n      _notifyPusher(text) {\n        axios.post('http://localhost:5000/save-text', { text })\n      }\n      \n      // send the editor's current state with axios to the server so it can be broadcasted by Pusher\n      _notifyPusherEditor(editorState) {\n        const selection = editorState.getSelection()\n        let text = convertToRaw(editorState.getCurrentContent())\n        axios.post('http://localhost:5000/editor-text', { text, selection })\n      }\n      ...\n      render() {\n        ....\n      }\n    }\n    export default RichEditor\n```\n\nWith that, if you open your app in a second browser tab and type in your editor, you should get realtime updates in your second tab. Ensure the server we added is running.\n\n\n## Conclusion\n\nThat’s it! In this post, you’ve learned how to build a realtime collaborative editor with Gatsby, Draft.js and Pusher. I can’t wait to see what you build with the new knowledge you’ve gained. You can find the source code for the demo app on [GitHub](https://github.com/9jaswag/pusher-editor).","metaTitle":"Build a collaborative text editor with Gatsby and Draft.js","metaDescription":"This short tutorial implements realtime functionality in a Gatsby-based text editor. Several users can work on the same text simultaneously."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3HXaRCz90cI2UgoMassMMC","type":"Entry","createdAt":"2018-06-15T10:54:47.337Z","updatedAt":"2018-06-15T10:54:47.337Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live blog app using Ruby on Rails","url":"live-blog-ruby-rails","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/ruby-live-blog","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6S5luSjtlYk4i8eM8AyO4I","type":"Entry","createdAt":"2018-02-02T13:39:48.331Z","updatedAt":"2018-02-12T14:41:19.307Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby","url":"ruby","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"hPWAADkjVmomS68E6seqQ","type":"Entry","createdAt":"2018-02-12T14:48:52.613Z","updatedAt":"2018-02-12T14:48:52.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby on Rails","url":"ruby-on-rails","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-06-12","description":"Build a simple blog app with realtime post updates. Host images with Cloudinary and display new posts instantly.","prerequisite":"You will need Ruby 2.2+ and Rails 4.2+ installed on your machine. ","content":"With the advancements of technology came new ways of doing things. About 20 years ago, the major source of obtaining information was from printed publications. Now, people don’t buy as many printed publications as before. They visit the websites of media publications, consume information and then continue with the rest of their days. This has come with numerous advantages with the major advantage being how fast it is to get the new articles to the readers.\n\n\n## What we’ll build\n\nIn this article, we are going to create a live blog application that allows readers to see new posts in realtime as editors publish them. To do this, we are going to use Ruby on Rails and Pusher.\n\n![ruby-live-blog-demo](//images.ctfassets.net/1es3ne0caaid/7sOXPRNnpuq0OAeYiKCcAE/804ad02ee143d0bab36d8fae1797f5e6/ruby-live-blog-demo.gif)\n\n## Prerequisites\n\nTo follow through this tutorial, you’ll need the following:\n\n- Ruby installed on your machine\n- Rails on your machine\n\nTo confirm your installation, run the following command:\n\n```\n    rails --version # minimum version 4.2\n    ruby --version # minimum version 2.2.2 \n```\n\nIf you get their version numbers as results then you’re good to go.\n\n## Getting started\n\n### Creating a new Ruby project\nTo create a new rails project, run the following command:\n\n```\n    rails new ruby-live-blog\n```\n\nThis creates a starter project for you with the following structure:\n\n![ruby-live-blog-structure](//images.ctfassets.net/1es3ne0caaid/Den3gVCCWW4soMoCmusIm/a8e0845cdeafd4446c701c1b0788e6ad/ruby-live-blog-structure.png)\n\nNow, you can view the demo application by running:\n\n```\n    rails server --binding=127.0.0.1\n```\n\nOpen your browser and navigate to http://127.0.0.1:3000/ to see the application at work\n\n![youre-on-rails](//images.ctfassets.net/1es3ne0caaid/3sOsgC4S80gOKM8Waqkgui/87c5c9e64375cbb2f8f2516223f4e515/youre-on-rails.png)\n\n### Configuring the database\nTo display blog posts to users, there has to be a place where the application stores blog posts. To store the blog posts, we need a database. For this live blog application, we are going to use SQLite as the database for storing information.\n\nTo create your database, run the command:\n\n```\n    rake db:create\n```\n\nThis creates the database in the `db/` directory of the project if they weren’t automatically created before.\n\n### Creating the post model\nTo represent a sample blog post in our application, let’s create a model. A simple blog post will contain the following properties:\n\n- Title - the title of the post\n- Body - the post content\n- Author - the name of the author of the post\n- Media - a link to the post media\n\nCreate the model by running the command:\n\n```\n    rails generate model Post title:text body:text author:text media:text\n```\n\nThis creates the post model and a migration file for the new model located in the `db/migrate/`  directory. A migration file is a form of version control for the database. Your posts migration file will look like this:\n\n``` ruby\n    # db/migrate/{timestamp}_create_posts.rb\n    \n    class CreatePosts \u003c ActiveRecord::Migration[5.2]\n      def change\n        create_table :posts do |t|\n          t.text :title\n          t.text :body\n          t.text :author\n          t.text :media\n    \n          t.timestamps\n        end\n      end\n    end\n```    \n\nTo effect the changes in the database, run the migration by using the command:\n\n```\n    rails db:migrate\n```\n\nOn a successful run, you get the following output:\n\n```\n    ➜ rails db:migrate\n    == 20180609132632 CreatePosts: migrating ======================================\n    -- create_table(:posts)\n       -\u003e 0.0016s\n    == 20180609132632 CreatePosts: migrated (0.0017s) =============================\n```\n\nAt this stage, the database structure is all set and we have created the post model. The next thing to do now is to allow editors upload new blog posts.\n\n## Creating the homepage\n\nThe homepage displays created blog posts to readers when the page is loaded. Let’s create a controller that is responsible for fetching and displaying posts on the homepage. To do this, run the following command:\n\n```\n    rails generate controller Home index\n```   \n\nThis creates a new controller and related template files. Update the home controller to look like this:\n\n``` ruby\n    # app/controllers/home_controller.rb \n    \n    class HomeController \u003c ApplicationController\n      def index\n        @posts = Post.all.order(\"created_at DESC\")\n      end\n    end\n```    \n\nThe next thing to do is to then update the index view as follows:\n\n``` html\n    \u003c!-- app/views/home/index.html.erb --\u003e\n    \u003cdiv class=\"wrapper\"\u003e\n        \u003cdiv class=\"title\"\u003e\n            \u003ch1\u003eLive blog with Ruby and Pusher\u003c/h1\u003e\n            \u003cp\u003eNew posts will be displayed in realtime\u003c/p\u003e    \n        \u003c/div\u003e\n    \n        \u003cdiv class=\"posts\" id=\"post_section\"\u003e\n            \u003c% @posts.each do |post| %\u003e\n                \u003cdiv class=\"post-card\"\u003e\n                    \u003cimg class=\"image\" src=\"\u003c%= post.media %\u003e\"\u003e\n                    \u003cdiv class=\"title\"\u003e\n                        \u003ch2\u003e\u003c%= post.title %\u003e\u003c/h2\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"body-trunc\"\u003e\n                        \u003cp\u003e\u003c%= post.body %\u003e\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c% end %\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nThe index view also has the following styling:\n\n``` scss\n    // app/assets/stylesheets/home.scss\n    \n    * {\n      font-family: \"Lora\", serif;\n    }\n    \n    .title {\n      text-align: center;\n    }\n    \n    .posts {\n      margin-top: 50px;\n      display: flex;\n      flex-direction: row;  \n      justify-content: space-around;\n      flex-wrap: wrap;\n    }\n    \n    .post-card {\n      display: flex;\n      flex-direction: column;\n      min-width: 300px;\n      max-width: 300px;\n      height: 400px;\n      box-shadow: 1px 1px rgb(68, 68, 68);\n      border: 1px solid rgb(68, 68, 68);\n      border-radius: 5px;\n      margin: 20px 0px;\n    }\n    \n    .image {\n      width: 100%;\n      height: 170px;\n    }\n    \n    .body-trunc {\n      margin-left: 10px;\n      margin-right: 10px;\n    }\n``` \n\n## Creating and storing posts\n\nThe Post controller is responsible for accepting new post data and storing the post data in the database. To create the controller, run the following command:\n\n```\n    rails generate controller Post create store\n```\n\nThis command also creates route entries for the controller methods. At this point, your `routes.rb` file should look like this:\n\n``` ruby\n    # config/routes.rb\n    \n    Rails.application.routes.draw do\n      get 'post/create'\n      post 'post/store'\n      \n      root 'home#index'\n    end\n```\n\nThe `create` route is responsible for accepting the post data from the editor and the `store` route is responsible for storing the data in the database.\n\nUpdate the create view to look like this:\n\n``` html\n    \u003c!-- app/views/post/create.html.erb --\u003e\n    \n    \u003cdiv class=\"title\"\u003e\n        \u003ch1\u003eLive Blog\u003c/h1\u003e\n        \u003cp\u003eEditor View\u003c/p\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv style=\"text-align:center\"\u003e\n        \u003cp\u003e\u003cstrong\u003eFill and submit the form below to create a new post\u003c/strong\u003e\u003c/p\u003e\n    \n        \u003cform method=\"POST\" action=\"/post/store\" enctype=\"multipart/form-data\" class=\"post-form\"\u003e\n            \u003c%= token_tag %\u003e\n    \n            \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"title\"\u003eTitle\u003c/label\u003e\n                \u003cinput type=\"text\" name=\"title\" class=\"form-control\"\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"media\"\u003ePost Media\u003c/label\u003e\n                \u003cinput type=\"file\" name=\"media\" class=\"form-control media-upload\"\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"author\"\u003ePost Author\u003c/label\u003e\n                \u003cinput type=\"text\" name=\"author\" class=\"form-control\" /\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"body\"\u003ePost Content\u003c/label\u003e\n                \u003ctextarea name=\"body\" class=\"form-control\" cols=\"30\" rows=\"10\"\u003e\u003c/textarea\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"from-group\"\u003e\n                \u003cdiv\u003e\u003cinput type=\"submit\" value=\"Create Post\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/form\u003e\n    \n    \u003c/div\u003e\n```\n\nThe view also has the following styling:\n\n``` scss\n    // app/assets/stylesheets/posts.scss\n    \n    .post-form{\n        display: flex;\n        width: 50%;\n        flex-direction: column;\n        margin: 20px auto;\n    }\n    .form-group{\n        display: flex;\n        justify-content: space-between;\n        margin: 5px 0px;\n        align-items: center;\n    }\n    \n    input[type=\"submit\"]{\n        background-color: #333333;\n        border: none;\n        color: white;\n        padding: 10px 32px;\n        text-align: center;\n        text-decoration: none;\n        display: inline-block;\n        font-size: 16px;\n    }\n```\n\nWhen you navigate to the `/``post``/create` route on the web browser, you get the following view:\n\n![ruby-live-blog-create-post-1](//images.ctfassets.net/1es3ne0caaid/oWsqxLx9IGgc6Uk0s8iUY/ea6b016c0ee8a2964b1646d5c039f67a/ruby-live-blog-create-post-1.png)\n\nAt this point, the application is almost complete. Notice that in the create view, we specified that the form should be submitted to the `/post/store` route but we did not show how the post was saved. We will look at how to save posts in the next section.\n\n## Saving images with Cloudinary\n\nTo save images for the new posts, we will use [Cloudinary](https://cloudinary.com). Cloudinary takes care of all your image and video manipulation needs when building applications.\n\nCloudinary has a [Ruby gem](https://github.com/cloudinary/cloudinary_gem) that will be used to handle the file uploads.\n\nAdd the Cloudinary as a dependency in your `Gemfile`:\n\n```\n    # adding cloudinary to gemfile\n    gem 'cloudinary'\n```\n\nInstall it by running the command:\n\n```\n    bundle install\n```\n\n### Configuring Cloudinary\n\nTo use the Cloudinary gem, you need to have a Cloudinary developer account to use it in your applications. Head over [here](https://cloudinary.com/signup) to create one if you don’t have one already. \n\nCloudinary automatically checks for a `cloudinary.yml` in the `config` directory that contains the configuration file for your Cloudinary account. You can download your own customized file for your account [here](https://cloudinary.com/console/cloudinary.yml). Once it’s downloaded, place the file in the `config` directory. \n\n### Saving posts\n\nThe module will be used in the post controller as follows:\n\n``` ruby\n    # app/controllers/post_controller.rb\n    \n    class PostController \u003c ApplicationController\n      def create\n      end\n    \n      def store\n        # upload image to cloudinary\n        @image = Cloudinary::Uploader.upload(params[:media])\n        # create a new post object and save to db\n        @post = Post.new({:title =\u003e params[:title], :text =\u003e params[:text], :author =\u003e params[:author],  :media =\u003e @image['secure_url']})\n        @post.save\n        # trigger an event with pusher\n        [...]\n        redirect_to('/')\n      end\n    end\n```\n\nNow, when a post is created and saved, you can see it on the homepage:\n\n![ruby-live-blog-create-post-2](//images.ctfassets.net/1es3ne0caaid/1ofpCGnhUoAeYGsyiSe6CS/e0210ec4f1ad96b448cbb20e65540782/ruby-live-blog-create-post-2.png)\n\n![ruby-live-blog-display-posts](//images.ctfassets.net/1es3ne0caaid/l1bnDAg0SckGCM20segws/a94903baa75e7d68a72f737786850d70/ruby-live-blog-display-posts.png)\n\n## Adding realtime functionality with Pusher\n\nCurrently, the only way users get access to new posts is if they refresh their browsers. We need a way to automatically add new posts to the page as they are created and this is where Pusher comes in. Pusher allows you to integrate realtime functionality in your applications with ease without worrying about infrastructure. To get started with Pusher, sign up for a developer account here. When you’re done with that, create a new application and note your credentials as you’ll need them as we progress.\n\nPusher has a Ruby gem which we are going to use. To install it, add the following to your `Gemfile` :\n\n```\n    # adding Pusher to Gemfile\n    \n    gem 'pusher'\n```\n\nAnd then install the gem by running the command:\n\n```\n    bundle install\n```\n\nTo confirm your installation, run:\n\n```\n    bundle info pusher\n```\n\n**Configuring the Pusher package**\nCreate a `config/initializers/pusher.rb` file and add the following content to it:\n\n``` ruby\n    # config/initializers/pusher.rb\n    require 'pusher'\n    \n    Pusher.app_id = 'PUSHER_APP_ID'\n    Pusher.key = 'PUSHER_APP_KEY'\n    Pusher.secret = 'PUSHER_APP_SECRET'\n    Pusher.cluster = 'PUSHER_APP_CLUSTER'\n    Pusher.logger = Rails.logger\n    Pusher.encrypted = true\n```\n\nThe Pusher credentials can be obtained from the pusher application [dashboard](https://dashboard.pusher.com/).\n\n### Triggering events from controller\nTo trigger a new post event, update the post controller:\n\n``` ruby\n    # app/controllers/post_controller.rb\n    class PostController \u003c ApplicationController\n      def create\n      end\n    \n      def store\n        # upload image to cloudinary\n        @image = Cloudinary::Uploader.upload(params[:media])\n        # create a new post object and save to db\n        @post = Post.new({:title =\u003e params[:title], :body =\u003e params[:body], :author =\u003e params[:author],  :media =\u003e @image['secure_url']})\n       \n        if @post.save\n          # broadcasting posts using pusher\n          Pusher.trigger('posts-channel','new-post', {\n            id: @post.id,\n            title: @post.title,\n            media: @post.media,\n            body: @post.body\n          })\n        end \n        \n        redirect_to('/')\n      end\n    end\n```\n\nWhen a post is successfully saved in the database, a `new-post` event is triggered in the `posts-channel`. For debugging purposes, you can see events that have been triggered by your application on the Pusher dashboard.\n\n### Displaying new posts in realtime for readers\nTo use Pusher in the frontend of your application, you need to do the following:\n\nInclude the Pusher script in the header of the application layout:\n\n``` html\n    # app/views/layouts/application.html.erb\n    [...]\n      \u003chead\u003e\n        [...]\n        \n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n       \n         [...]\n      \u003c/head\u003e\n    [...]\n```\n\nAfterward, create a Pusher client in the home page view\n\n``` javascript\n    # app/views/home/index.html.erb\n    \u003cscript\u003e\n        var pusher = new Pusher('YOUR_APP_KEY', {\n          cluster: 'eu',\n          encrypted: true\n        });\n    \u003c/script\u003e\n    \n    \u003cdiv class=\"wrapper\"\u003e\n    [...]\n```\n\nFinally, you’ll need to subscribe to the `post-channel` and listen for `new-post` events. Update the `app/views/home/index.html.erb` to look like this:\n\n``` html\n    # app/views/home/index.html.erb\n    \n    \u003cscript\u003e\n        var pusher = new Pusher('YOUR_APP_KEY', {\n          cluster: 'eu',\n          encrypted: true\n        });\n    \u003c/script\u003e\n    \n    \u003cdiv class=\"wrapper\"\u003e\n      [...]\n    \u003c/div\u003e\n    \n    \u003cscript\u003e\n        var channel = pusher.subscribe('posts-channel');\n        channel.bind('new-post', function(data) {\n            let post_media = data.media;\n            let post_id = data.id\n            let post_body = data.body;\n            let post_title = data.title;\n    \n            let div = document.getElementById('post_section');\n            let new_content = document.createElement(\"div\");\n            new_content.innerHTML = `\n                \u003cdiv class=\"post-card\"\u003e\n                    \u003cimg class=\"image\" src=\"${post_media}\"\u003e\n                    \u003cdiv class=\"title\"\u003e\n                        \u003ch2\u003e${post_title}\u003c/h2\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"body-trunc\"\u003e\n                        \u003cp\u003e${post_body}\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e`;\n            div.insertBefore(new_content, div.firstChild);\n        });\n    \u003c/script\u003e \n```\n\nWhen an event is broadcast, we update the UI to show the new blog post. To see the application at work, start the rails server using the command:\n\n```\n    rails server --binding=127.0.0.1\n```\n\nNavigate to the home page and the editor view to see the application:\n \n![ruby-live-blog-demo](//images.ctfassets.net/1es3ne0caaid/6VoDt4JwWIqA4cyU4uYywq/d04b9e20abba3d88e84722a0c2dabaa2/ruby-live-blog-demo.gif)\n\n## Conclusion\n\nIn this article, we looked at how to use Ruby and Pusher to build a live blog with realtime updates when new posts are created. You can leverage the concepts shared here when building your own application that needs realtime functionality. The complete source code of this demo application is available on [GitHub](https://github.com/oreHGA/ruby-live-blog).","metaTitle":"Create a live blog app using Ruby on Rails","metaDescription":"This brief tutorial shows you how to create a blog application with realtime post updates, and images hosted with Cloudinary."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"30ZzU6JKpagkAakOoK4igW","type":"Entry","createdAt":"2018-06-07T16:31:42.992Z","updatedAt":"2018-06-19T14:31:18.893Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a carpooling app with React Native - Part 2: Creating the frontend","url":"carpooling-react-native-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/Ridesharer","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-06-07","description":"This two-part series uses React Native, Docker and several Google services (Maps, Places, Directions and Geocoding) to create a carpooling app. In part twoyou will set up the frontend.","prerequisite":"You will need to have completed the first part of the series. For part two you need experience with React Native.","content":"This is the second part of a two-part series on creating a carpooling app with React Native. This is the part where we will be creating the actual app. I’ll be showing you how to set up the app so you can run it on an Android emulator (Genymotion) or an iOS device.\n\n## Prerequisites\n\nYou need to have completed [part one](https://pusher.com/tutorials/carpooling-react-native-part-1) before moving on to this tutorial.\n\nTo effectively follow this tutorial, you should have a good grasp of the following React concepts:\n\n- props \n- refs\n- state\n- component lifecycle\n\nAs for building the app with React Native, knowing how to do the following will be helpful:\n\n- How to use primitive React Native components such as the `View` or `Text`. \n- How to add styles to the components.\n- How to create your own components.\n\n## What we’ll be building\n\nThe complete details on what we’ll be building are available in the first part of the series. As a refresher, we’ll be building a carpooling app. This allows the user to share the vehicle they’re currently riding in so someone else can hop in the same vehicle. The app is responsible for:\n\n- Matching the users so that only the users who are going the same route can share a ride with each other.\n- After two users are matched, the app provides realtime tracking on where each other currently are.\n\nFor the rest of the tutorial, I’ll be referring to the user who is sharing the ride as the “rider”. While the user who is searching for a ride as the “hiker”.\n\n## Installing the dependencies\n\nStart by generating a new React Native project:\n\n```\n    react-native init Ridesharer\n```\n\nThis will create a `Ridesharer` directory. This will serve as the root directory that we’ll be using for the rest of the tutorial.\n\nThe app relies on the following libraries to implement specific features:\n\n- [**axios**](https://github.com/axios/axios) - for making requests to the server. Although React Native already comes with [fetch](https://facebook.github.io/react-native/docs/network.html), axios gives us a simpler API to work with.\n- [**pusher-js**](https://github.com/pusher/pusher-js) - the official Pusher JavaScript library. This allows us connect to a Pusher app and send realtime data.\n- [**react-native-geocoding**](https://github.com/marlove/react-native-geocoding) - for converting latitude and longitude pairs to the actual name of the place.\n- [**react-native-google-places-autocomplete**](https://github.com/FaridSafi/react-native-google-places-autocomplete) - for searching the user’s destination.\n- [**react-native-maps**](https://github.com/react-community/react-native-maps) - for showing a map inside the app. This is also used for showing markers on where the users are and their destinations. \n- [**react-native-maps-directions**](https://github.com/bramus/react-native-maps-directions) - for showing the route from the user’s origin to their destination. \n- [**react-native-vector-icons**](https://github.com/oblador/react-native-vector-icons) - for using icons inside the app.\n- [**react-navigation**](https://github.com/react-navigation/react-navigation) - for easily implementing navigation between screens.\n\nTo ensure that we’re both using the same package versions, open the `package.json` file and update the `dependencies` with the following:\n\n``` json\n    \"dependencies\": {\n      \"axios\": \"0.18.0\",\n      \"prop-types\": \"15.6.1\",\n      \"pusher-js\": \"4.2.2\",\n      \"react\": \"16.3.1\",\n      \"react-native\": \"0.55.4\",\n      \"react-native-geocoding\": \"0.3.0\",\n      \"react-native-google-places-autocomplete\": \"1.3.6\",\n      \"react-native-maps\": \"0.20.1\",\n      \"react-native-maps-directions\": \"1.6.0\",\n      \"react-native-vector-icons\": \"4.6.0\",\n      \"react-navigation\": \"2.0.1\"\n    },\n```\n\nOnce that’s done, save the file and execute `npm install`. \n\n## Setting up the dependencies\n\nNow that you’ve installed all the dependencies, there’s one more thing you have to do before you can start coding the app. Additional setup is required for the following dependencies:\n\n- [react-native-vector-icons](https://github.com/oblador/react-native-vector-icons)\n- [react-native-maps](https://github.com/react-community/react-native-maps)\n\nInstructions on how to set up the dependencies are available on the Github repos for each library. Here are the links to the setup instructions to the specific version we’re using:\n\n- [react-native-vector-icons v4.6.0](https://github.com/oblador/react-native-vector-icons/tree/v4.6.0#installation)\n- [react-native-maps v0.20.1](https://github.com/react-community/react-native-maps/blob/v0.20.1/docs/installation.md)\n\nNote that if you’re reading this sometime in the future, you’ll probably have to install the latest package versions and follow their latest installation instructions.\n\n## Building the app\n\nNow we’re ready to build the app. Navigate inside the `Ridesharer` directory as that’s going to be our working directory.\n\nNote that anytime you feel confused on where to add a specific code, you can always visit the [GitHub](https://github.com/anchetaWern/Ridesharer/tree/master/app) [repo](https://github.com/anchetaWern/Ridesharer/tree/master/app) and view the file.\n\n### Index\nOpen the `index.js` file and make sure you’re registering the same name that you used when you generated the project. In this case, it should be `Ridesharer`:\n\n``` javascript\n    // Ridesharer/index.js\n    import { AppRegistry } from 'react-native';\n    import App from './App';\n    \n    AppRegistry.registerComponent('Ridesharer', () =\u003e App);\n```\n\n### Root component\n\nCreate a `Root.js` file. This will serve as the Root component of the app. This is where we set up the navigation so we include the two pages of the app: Home and Map. We will be creating these pages later:\n\n``` javascript\n    // Ridesharer/Root.js\n    import React from 'react';\n    import { StackNavigator } from 'react-navigation';\n    \n    import HomePage from './app/screens/Home';\n    import MapPage from './app/screens/Map';\n    \n    const RootStack = StackNavigator(\n      {\n        Home: {\n          screen: HomePage\n        },\n        Map: {\n          screen: MapPage\n        }\n      },\n      { \n        initialRouteName: 'Home', // set the home page as the default page \n      }\n    );\n    \n    export default RootStack;\n```\n\nIn the above code, we’re using the `StackNavigator`, one of the navigators that comes with the React Navigation library. This allows us to push and pop pages to and from a stack. Navigating to a page means pushing it in front of the stack, going back means popping the page that’s currently in front of the stack.\n\n### App component\n\nOpen the `App.js` file and render the `App` component:\n\n``` javascript\n    // Ridesharer/App.js\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      View\n    } from 'react-native';\n    \n    import Root from './Root';\n    \n    export default class App extends Component {\n    \n      render() {\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cRoot /\u003e\n          \u003c/View\u003e\n        );\n      }\n    \n    }\n    \n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        backgroundColor: '#fff'\n      }\n    });\n```\n\n### Tapper component\n\nThe `Tapper` component is simply a button created for convenience. We can’t really apply a custom style to the built-in React Native `Button` component so we’re creating this one. This component wraps the `Button`  component in a `View` in which the styles are applied:\n\n``` javascript\n    // Ridesharer/app/components/Tapper/Tapper.js\n    import React from 'react';\n    import { View, Button } from 'react-native';\n    \n    import styles from './styles';\n    \n    const Tapper = (props) =\u003e {\n      return (\n        \u003cView style={styles.button_container}\u003e\n          \u003cButton\n            onPress={props.onPress}\n            title={props.title}\n            color={props.color}\n          /\u003e\n        \u003c/View\u003e\n      );\n    }\n    \n    export default Tapper;\n```\n\nHere’s the style declaration:\n\n``` javascript\n    // Ridesharer/app/components/Tapper/styles.js\n    import { StyleSheet } from 'react-native';\n    \n    export default StyleSheet.create({\n      button_container: {\n        margin: 10\n      },\n    });\n```\n\nLastly, we export it using an `index.js` file so that we can simply refer to the component as `Tapper` without including the `Tapper.js` file in the `import` statement later on:\n\n``` javascript\n    // Ridesharer/app/components/Tapper/index.js\n    import Tapper from './Tapper';\n    \n    export default Tapper;\n```\n\nIf you don’t want to create a separate component, you can always use the `TouchableOpacity` and `TouchableHighlight` components. Those two allow you to add a custom style.\n\n### Home page\n\nThe `Home` page is the default page the user sees when they open the app. \n\nStart by including all the React Native packages that we need:\n\n``` javascript\n    // Ridesharer/app/screens/Home.js\n    import React, { Component } from 'react';\n    import { \n      View, \n      Text, \n      StyleSheet, \n      TextInput, \n      Alert, \n      ActivityIndicator, \n      PermissionsAndroid, \n      KeyboardAvoidingView \n    } from 'react-native';\n```\n\nAmong the packages above, only these three warrants an explanation:\n\n- `PermissionsAndroid` - for asking permissions to use the device’s Geolocation feature on Android. \n- `KeyboardAvoidingView` - for automatically adjusting the View when the on-screen keyboard pops out. This allows the user to see what they’re inputting while the keyboard is open. Most of the time, especially on devices with small screen, the input is hidden when the keyboard is open. \n\nNext, include the third-party packages we installed earlier:\n\n``` javascript\n    import axios from 'axios';\n    import Icon from 'react-native-vector-icons/FontAwesome';\n    import Tapper from '../components/Tapper';\n```\n\nAdd your ngrok URL (this was created in the first part of the series):\n\n``` javascript\n    const base_url = 'YOUR NGROK URL';\n```\n\nDeclare the function that will ask for the [Geolocation](https://facebook.github.io/react-native/docs/geolocation.html) permission and then call it:\n\n``` javascript\n    async function requestGeolocationPermission() {\n      try{\n        const granted = await PermissionsAndroid.request(\n          PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,\n          {\n            'title': 'Ridesharer Geolocation Permission',\n            'message': 'Ridesharer needs access to your current location so you can share or search for a ride'\n          }\n        );\n    \n        if(granted === PermissionsAndroid.RESULTS.GRANTED){\n          console.log(\"You can use the geolocation\")\n        }else{\n          console.log(\"Geolocation permission denied\")\n        }\n      }catch(err){\n        console.warn(err)\n      }\n    }\n    \n    requestGeolocationPermission();\n```\n\nHide the header. The `Home` page doesn’t need it:\n\n``` javascript\n    export default class Home extends Component {\n      static navigationOptions = {\n        header: null,\n      };\n    }\n```\n\nSet the default state for the loader (for controlling the visibility of the `ActivityIndicator`) and username:\n\n``` javascript\n    state = {\n      is_loading: false,\n      username: ''\n    }\n```\n\nRender the `Home` page. In this page we have:\n\n- An input that asks for the user’s name\n- A button for sharing a ride\n- A button for hitching a ride\n\nNote that we’re using the `KeyboardAvoidingView` as a wrapper. This way, everything inside it will adjust accordingly when the on-screen keyboard becomes visible:\n\n``` javascript\n    render() {\n    \n      return (\n        \u003cKeyboardAvoidingView style={styles.container} behavior=\"padding\" enabled\u003e\n          \u003cView style={styles.jumbo_container}\u003e\n            \u003cIcon name=\"question-circle\" size={35} color=\"#464646\" /\u003e\n            \u003cText style={styles.jumbo_text}\u003eWhat do you want to do?\u003c/Text\u003e\n          \u003c/View\u003e\n      \n          \u003cView\u003e\n            \u003cTextInput\n              placeholder=\"Enter your username\"\n              style={styles.text_field}\n              onChangeText={(username) =\u003e this.setState({username})}\n              value={this.state.username}\n              clearButtonMode={\"always\"}\n              returnKeyType={\"done\"}\n            /\u003e\n            \u003cActivityIndicator size=\"small\" color=\"#007ff5\" style={{marginTop: 10}} animating={this.state.is_loading} /\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.close_container}\u003e\n            \u003cTapper\n              title=\"Share a Ride\"\n              color=\"#007ff5\"\n              onPress={() =\u003e {\n                this.enterUser('share');\n              }}\n            /\u003e\n         \n            \u003cTapper \n              title=\"Hitch a Ride\" \n              color=\"#00bcf5\" \n              onPress={() =\u003e {\n                this.enterUser('hike');\n              }} \n            /\u003e\n          \u003c/View\u003e\n        \n        \u003c/KeyboardAvoidingView\u003e\n      );\n    }\n```\n\nWhen either of the buttons is pressed, the function below gets executed. All it does is create the user if they don’t already exist:\n\n``` javascript\n    enterUser = (action) =\u003e {\n      if(this.state.username){ // user should enter a username before they can enter\n    \n        this.setState({\n          is_loading: true\n        });\n        \n        // make a POST request to the server for creating the user\n        axios.post(`${base_url}/save-user.php`, {\n          username: this.state.username // the username entered in the text field\n        })\n        .then((response) =\u003e {\n          \n          if(response.data == 'ok'){\n            // hide the ActivityIndicator\n            this.setState({\n              is_loading: false\n            });\n            \n            // navigate to the Map page, submitting the user's action (ride or hike) and their username as a navigation param (so it becomes available on the Map page)\n            this.props.navigation.navigate('Map', {\n              action: action,\n              username: this.state.username\n            });\n          }\n          \n        });\n    \n      }else{\n        Alert.alert(\n          'Username required',\n          'Please enter a username'\n        );\n      }\n    }\n```\n\nAdd the styles for the Home page:\n\n``` javascript\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'space-around'\n      },\n      jumbo_container: {\n        padding: 50,\n        alignItems: 'center'\n      },\n      jumbo_text: {\n        marginTop: 20,\n        textAlign: 'center',\n        fontSize: 25,\n        fontWeight: 'bold'\n      },\n      text_field: {\n        width: 200,\n        height: 50,\n        padding: 10,\n        backgroundColor: '#FFF', \n        borderColor: 'gray', \n        borderWidth: 1\n      }\n    });\n```\n\n### Map page\n\nThe Map page contains the main meat of the app. This allows the user to share or search for a ride. The tracking of location is implemented via Google Maps, Pusher Channels, and React Native’s Geolocation feature. \n\nStart by including all the React Native packages that we need:\n\n``` javascript\n    // Ridesharer/app/screens/Map.js\n    import React, { Component } from 'react';\n    import { \n      View, \n      Text, \n      StyleSheet, \n      Alert, \n      Dimensions, \n      ActivityIndicator\n    } from 'react-native';\n```\n\nNext, include the packages that we installed earlier:\n\n``` javascript\n    import { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\n    import MapView, { Marker, Callout } from 'react-native-maps';\n    import MapViewDirections from 'react-native-maps-directions';\n    import Icon from 'react-native-vector-icons/FontAwesome';\n    import Pusher from 'pusher-js/react-native'; \n    import Geocoder from 'react-native-geocoding';\n    import axios from 'axios';\n```\n\nInclude the location library. We will be creating this later, but for now, know that these functions are used to center the map correctly (`regionFrom()`) and getting the difference of two coordinates in meters (`getLatLonDiffInMeters()`):\n\n``` javascript\n    import { regionFrom, getLatLonDiffInMeters } from '../lib/location';\n    import Tapper from '../components/Tapper';\n```\n\nInitialize your API keys and ngrok base URL:\n\n``` javascript\n    const google_api_key = 'YOUR GOOGLE PROJECT API KEY';\n    const base_url = 'YOUR NGROK BASE URL';\n    const pusher_app_key = 'YOUR PUSHER APP KEY';\n    const pusher_app_cluster = 'YOUR PUSHER APP CLUSTER';\n    \n    Geocoder.init(google_api_key); // initialize the geocoder\n```\n\nNext, also declare the timeouts for searching and sharing a ride. We will be using these values later to reset the app’s UI if it couldn’t match two users within these timeouts:\n\n``` javascript\n    const search_timeout = 1000 * 60 * 10; // 10 minutes\n    const share_timeout = 1000 * 60 * 5; // 5 minutes\n```\n\nSetup a default region that the map will display:\n\n``` javascript\n    const default_region = {\n      latitude: 37.78825,\n      longitude: -122.4324,\n      latitudeDelta: 0.0922,\n      longitudeDelta: 0.0421,\n    };\n```\n\nGet the device width. We will be using this later to set the width of the auto-complete text field for searching places:\n\n``` javascript\n    var device_width = Dimensions.get('window').width; \n```\n\nNext, create the `Map`  component and set the `navigationOptions`. Unlike the `Home` page earlier, we need to set a few options for the navigation. This includes the header title and the styles applied to it. Putting these navigation options will automatically add a back button to the header to allow the user to go back to the `Home` page:\n\n``` javascript\n    export default class Map extends Component {\n    \n      static navigationOptions = ({navigation}) =\u003e ({\n        headerTitle: 'Map',\n        headerStyle: {\n          backgroundColor: '#007ff5'\n        },\n        headerTitleStyle: {\n          color: '#FFF'\n        }\n      });\n    \n      // next: add the code for initializing the state\n    }\n```\n\nNext, initialize the state:\n\n``` javascript\n    state = {\n      start_location: null, // the coordinates (latitude and longitude values) of the user's origin\n      end_location: null, // the coordinates of the user's destination\n      region: default_region, // the region displayed in the map\n      from: '', // the name of the place where the user is from (origin)\n      to: '', // the name of the place where the user is going (destination)\n      rider_location: null, // the coordinates of the rider's current location\n      hiker_location: null, // the coordinates of the hiker's origin\n      is_loading: false, // for controlling the visibility of the ActivityIndicator\n      has_journey: false // whether the rider has accepted a hiker's request or a hiker's request has been accepted by a rider \n    }\n    \n    // next: add the constructor\n```\n\nNext, add the constructor:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      this.from_region = null;\n      this.watchId = null; // unique ID for the geolocation watcher. Storing it in a variable allows us to stop it at a later time (for example: when the user is done using the app)\n      this.pusher = null; // variable for storing the Pusher instance\n      this.user_channel = null; // the Pusher channel for the current user\n      this.journey_id = null; // the hiker's route ID\n      this.riders_channel = []; // if current user is a hiker, the value of this will be the riders channel\n      this.users_channel = null; // the current user's channel\n      this.hiker = null // for storing the hiker's origin coordinates; primarily used for getting the distance between the rider and the hiker\n    }\n```\n\nOnce the component is mounted, you want to get the `username` that was passed from the Home page earlier. This `username` is used later on as the unique key for identifying each user that connects to Pusher Channels:\n\n``` javascript\n    componentDidMount() {\n      const { navigation } = this.props;\n      const username = navigation.getParam('username');\n    \n      this.pusher = new Pusher(pusher_app_key, {\n        authEndpoint: `${base_url}/pusher-auth.php`,\n        cluster: pusher_app_cluster,\n        encrypted: true\n      });  \n      \n      // next: add the code for subscribing to the current user's own channel\n    }  \n```\n\nNext, add the code for subscribing to the current user's own channel. This allows the user to send and receive data in realtime through this channel. In the hiker’s case, they use it to make a request to the matching rider. In the rider’s case, they use it to receive requests coming from hikers as well as sending an acceptance and their current location to the hiker:\n\n``` javascript\n    this.users_channel = this.pusher.subscribe(`private-user-${username}`); // note that the private-* is required when using private channels \n```\n\nWhen a rider receives a request, the code below is executed. This alerts the rider that someone wants to ride with them. They can either accept or decline it:\n\n``` javascript\n    this.users_channel.bind('client-rider-request', (hiker) =\u003e {\n    \n      Alert.alert(\n        `${hiker.username} wants to ride with you`,\n        `Pickup: ${hiker.origin} \\nDrop off: ${hiker.dest}`,\n        [\n          {\n            text: \"Decline\",\n            onPress: () =\u003e {\n              // do nothing\n            },\n            style: \"cancel\"\n          },\n          {\n            text: \"Accept\", \n            onPress: () =\u003e {\n              this.acceptRide(hiker);\n            }\n          },\n        ],\n        { cancelable: false } // no cancel button\n      );\n    \n    });\n    \n    // next: add code for getting the user's origin\n```\n\nNote that in the code above, we’re not really handling declines. This is to keep the focus on the key feature of the app.\n\nNext, get the user’s current location via the Geolocation API. At this point, we can already use the API without problems (unless the user didn’t approve the permission). We’ll just focus our attention on the “happy path” to keep things simple so we’ll assume that the user approved the permission request:\n\n``` javascript\n    navigator.geolocation.getCurrentPosition(\n      (position) =\u003e {\n        // get the region (this return the latitude and longitude delta values to be used by React Native Maps)\n        var region = regionFrom(\n          position.coords.latitude, \n          position.coords.longitude, \n          position.coords.accuracy\n        );\n        \n        // convert the coordinates to the descriptive name of the place\n        Geocoder.from({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        })\n        .then((response) =\u003e {\n          // the response object is the same as what's returned in the HTTP API: https://developers.google.com/maps/documentation/geocoding/intro\n          \n          this.from_region = region; // for storing the region in case the user presses the \"reset\" button\n          \n          // update the state to indicate the user's origin on the map (using a marker)\n          this.setState({\n            start_location: {\n              latitude: position.coords.latitude,\n              longitude: position.coords.longitude\n            },\n            region: region, // the region displayed on the map\n            from: response.results[0].formatted_address // the descriptive name of the place\n          });\n    \n        });\n    \n      }\n    );\n```\n\nNext, add the `acceptRide()` function. This function is executed when the rider accepts a hiker’s ride request:\n\n``` javascript\n    acceptRide = (hiker) =\u003e {\n      \n      const username = this.props.navigation.getParam('username');\n      \n      let rider_data = {\n        username: username,\n        origin: this.state.from, // descriptive name of the rider's origin\n        dest: this.state.to, // descriptive name of the rider's destination\n        coords: this.state.start_location // the rider's origin coordinates\n      };\n    \n      this.users_channel.trigger('client-rider-accepted', rider_data); // inform hiker that the rider accepted their request; send along the rider's info\n      \n      // make a request to delete the route so other hikers can no longer search for it (remember the 1:1 ratio for a rider to hiker?)\n      axios.post(`${base_url}/delete-route.php`, {\n        username: username\n      })\n      .then((response) =\u003e {\n        console.log(response.data);\n      })\n      .catch((err) =\u003e {\n        console.log('error excluding rider: ', err);\n      });\n    \n      this.hiker = hiker; // store the hiker's info\n      \n      // update the state to stop the loading animation and show the hiker's location\n      this.setState({\n        is_loading: false,\n        has_journey: true,\n        hiker_location: hiker.origin_coords\n      });\n      \n    }\n```\n\nNext, add the function for rendering the UI:\n\n``` javascript\n    render() {\n      const { navigation } = this.props;\n      // get the navigation params passed from the Home page earlier\n      const action = navigation.getParam('action'); // action is either \"ride\" or \"hike\"\n      const username = navigation.getParam('username');\n    \n      let action_button_label = (action == 'share') ? 'Share Ride' : 'Search Ride';\n    \n      // next: add code for rendering the UI\n    }\n```\n\nThe map UI contains the following:\n\n- `MapView` component for rendering the map. Inside it are the following: \n  - `Marker` component for showing the origin and destination of the user, as well as for showing the location of the rider (if the user is a hiker), or the hiker (if the user is a rider).\n  - `MapViewDirections` component for showing the route from the origin to the destination of the current user.\n- `GooglePlacesAutocomplete` component for rendering an auto-complete text field for searching and selecting a destination.\n- `ActivityIndicator` for showing a loading animation while the rider waits for someone to request a ride, or when the hiker waits for the app to find a matching rider.\n- `Tapper` component for sharing a ride or searching a ride.\n- `Tapper` component for resetting the selection (auto-complete text field and marker).\n\n``` javascript\n    return (\n      \u003cView style={styles.container}\u003e\n    \n        \u003cMapView\n          style={styles.map}\n          region={this.state.region}\n          zoomEnabled={true}\n          zoomControlEnabled={true}\n        \u003e\n          {\n            this.state.start_location \u0026\u0026\n            \u003cMarker coordinate={this.state.start_location}\u003e\n              \u003cCallout\u003e\n                \u003cText\u003eYou are here\u003c/Text\u003e\n              \u003c/Callout\u003e\n            \u003c/Marker\u003e\n          }\n    \n          {\n            this.state.end_location \u0026\u0026\n            \u003cMarker\n              pinColor=\"#4196ea\"\n              coordinate={this.state.end_location}\n              draggable={true}\n              onDragEnd={this.tweakDestination}\n            /\u003e\n          }\n    \n          {\n            this.state.rider_location \u0026\u0026\n            \u003cMarker \n              pinColor=\"#25a25a\"\n              coordinate={this.state.rider_location}\n            \u003e\n              \u003cCallout\u003e\n                \u003cText\u003eRider is here\u003c/Text\u003e\n              \u003c/Callout\u003e\n            \u003c/Marker\u003e\n          }\n    \n          {\n            this.state.hiker_location \u0026\u0026\n            \u003cMarker \n              pinColor=\"#25a25a\"\n              coordinate={this.state.hiker_location}\n            \u003e\n              \u003cCallout\u003e\n                \u003cText\u003eHiker is here\u003c/Text\u003e\n              \u003c/Callout\u003e\n            \u003c/Marker\u003e\n          }\n          \n          {\n            this.state.start_location \u0026\u0026 this.state.end_location \u0026\u0026\n            \u003cMapViewDirections\n              origin={{\n                'latitude': this.state.start_location.latitude,\n                'longitude': this.state.start_location.longitude\n              }}\n              destination={{\n                'latitude': this.state.end_location.latitude,\n                'longitude': this.state.end_location.longitude\n              }}\n              strokeWidth={5}\n              strokeColor={\"#2d8cea\"}\n              apikey={google_api_key}\n            /\u003e\n          }\n          \n        \u003c/MapView\u003e\n    \n        \u003cView style={styles.search_field_container}\u003e\n        \n          \u003cGooglePlacesAutocomplete\n            ref=\"endlocation\"\n            placeholder='Where do you want to go?'\n            minLength={5} \n            returnKeyType={'search'} \n            listViewDisplayed='auto' \n            fetchDetails={true}            \n            onPress={this.selectDestination}\n          \n            query={{\n              key: google_api_key,\n              language: 'en', \n            }}\n            \n            styles={{\n              textInputContainer: {\n                width: '100%',\n                backgroundColor: '#FFF'\n              },\n              listView: {\n                backgroundColor: '#FFF'\n              }\n            }}\n            debounce={200} \n          /\u003e\n        \u003c/View\u003e\n    \n        \u003cActivityIndicator size=\"small\" color=\"#007ff5\" style={{marginBottom: 10}} animating={this.state.is_loading} /\u003e\n        \n        {\n          !this.state.is_loading \u0026\u0026 !this.state.has_journey \u0026\u0026\n          \u003cView style={styles.input_container}\u003e\n    \n            \u003cTapper \n              title={action_button_label}\n              color={\"#007ff5\"}\n              onPress={() =\u003e {\n                this.onPressActionButton();\n              }} /\u003e\n           \n            \u003cTapper\n              title={\"Reset\"}\n              color={\"#555\"}\n              onPress={this.resetSelection} \n            /\u003e\n            \n          \u003c/View\u003e\n        }\n    \n      \u003c/View\u003e\n    );\n```\n\nThe code above should be pretty self-explanatory. If you’re unsure what a specific prop does, how the component works, or what children is it expecting, you can always check the Github repo of the package we’re using.\n\nNext, let’s move on to the functions used in the UI. The `resetSelection()` is executed when the reset button is pressed by the user. This empties the auto-complete text field for searching for places, it also updates the state so the UI reverts back to its previous state before the destination was selected. This effectively removes the marker showing the user’s destination, as well as the route going to it:\n\n``` javascript\n    resetSelection = () =\u003e {\n      this.refs.endlocation.setAddressText('');\n      this.setState({\n        end_location: null,\n        region: this.from_region,\n        to: ''\n      });\n    }\n```\n\nThe `tweakDestination()` function is executed when the user drops the destination marker somewhere else:\n\n``` javascript\n    tweakDestination = () =\u003e {\n      // get the name of the place\n      Geocoder.from({\n        latitude: evt.nativeEvent.coordinate.latitude,\n        longitude: evt.nativeEvent.coordinate.longitude\n      })\n      .then((response) =\u003e {\n        this.setState({\n          to: response.results[0].formatted_address\n        });\n      });\n      \n      this.setState({\n        end_location: evt.nativeEvent.coordinate\n      });\n    }\n```\n\nThe `selectDestination()` function is executed when the user selects their destination. This function will update the state so it shows the user’s destination in the map:\n\n``` javascript\n    selectDestination = (data, details = null) =\u003e {\n    \n      const latDelta = Number(details.geometry.viewport.northeast.lat) - Number(details.geometry.viewport.southwest.lat)\n      const lngDelta = Number(details.geometry.viewport.northeast.lng) - Number(details.geometry.viewport.southwest.lng)\n    \n      let region = {\n        latitude: details.geometry.location.lat,\n        longitude: details.geometry.location.lng,\n        latitudeDelta: latDelta,\n        longitudeDelta: lngDelta\n      };\n    \n      this.setState({\n        end_location: {\n          latitude: details.geometry.location.lat,\n          longitude: details.geometry.location.lng,\n        },\n        region: region,\n        to: this.refs.endlocation.getAddressText() // get the full address of the user's destination\n      });\n    \n    }\n```\n\nWhen the user presses the **Share a Ride** or **Search a Ride** button, the `onPressActionButton()` function is executed. This executes either the `shareRide()` function or the `hikeRide()` function depending on the action selected from the Home page earlier:\n\n``` javascript\n    onPressActionButton = () =\u003e {\n    \n      const action = this.props.navigation.getParam('action');\n      const username = this.props.navigation.getParam('username');\n    \n      this.setState({\n        is_loading: true\n      });\n    \n      if(action == 'share'){\n        this.shareRide(username);\n      }else if(action == 'hike'){\n        this.hikeRide(username);      \n      }\n    \n    }\n```\n\nThe `shareRide()` function is executed when a rider shares their ride after selecting a destination. This makes a request to the server to save the route. The response contains the unique ID assigned to the rider’s route. This ID is assigned as the value of `this.journey_id`. This will be used later to:\n\n- Make a request to the server to update the route record stored in the Elasticsearch index. \n- Know when to start doing something with the current location data. This is because the current position begins to be watched right after the user presses on the **Share a Ride** button as you’ll see on the code block after this:\n\n``` javascript\n    shareRide = (username) =\u003e {\n    \n      axios.post(`${base_url}/save-route.php`, {\n        username: username,\n        from: this.state.from, \n        to: this.state.to, \n        start_location: this.state.start_location,\n        end_location: this.state.end_location\n      })\n      .then((response) =\u003e {\n        this.journey_id = response.data.id;\n        Alert.alert(\n          'Ride was shared!',\n          'Wait until someone makes a request.'\n        );\n      })\n      .catch((error) =\u003e {\n        console.log('error occurred while saving route: ', error);\n      });\n      \n      // next: add code for watching the rider's current location\n    \n    }\n```\n\nNext, start watching the user’s current location. Note that we won’t actually do anything with the location data unless the rider has already shared their ride and that they have already approved a hiker to ride with them. Once both conditions are met, we make a request to the server to update the previously saved route with the rider’s current location. This way, when a hiker searches for a ride, the results will be biased based on the rider’s current location and not their origin:\n\n``` javascript\n    this.watchId = navigator.geolocation.watchPosition(\n      (position) =\u003e {\n      \n        let latitude = position.coords.latitude;\n        let longitude = position.coords.longitude;\n        let accuracy = position.coords.accuracy;\n    \n        if(this.journey_id \u0026\u0026 this.hiker){ // needs to have a destination and a hiker\n          // update the route with the rider's current location\n          axios.post(`${base_url}/update-route.php`, {\n            id: this.journey_id,\n            lat: latitude,\n            lon: longitude\n          })\n          .then((response) =\u003e {\n            console.log(response);\n          });\n    \n          // next: add code for sending rider's current location to the hiker\n        \n        }\n    \n      },\n      (error) =\u003e {\n        console.log('error occured while watching position: ', error);\n      },\n      { \n        enableHighAccuracy: true, // get more accurate location\n        timeout: 20000, // timeout after 20 seconds of not being able to get location\n        maximumAge: 2000, // location has to be atleast 2 seconds old for it to be relevant\n        distanceFilter: 10 // allow up to 10-meter difference from the previous location before executing the callback function again\n      }\n    );\n    \n    // last: add code for resetting the UI after 5 minutes of sharing a ride \n```\n\nNext, we send a `client-rider-location` event to the rider’s own channel. Later, we’ll have the hiker subscribe to the rider’s channel (the one they matched with) so that they’ll receive the location updates:\n\n``` javascript\n    let location_data = {\n      username: username,\n      lat: latitude,\n      lon: longitude,\n      accy: accuracy \n    };\n    \n    this.users_channel.trigger('client-rider-locationchange', location_data); // note: client-* is required when sending client events through Pusher\n    \n    // update the state so that the rider’s current location is displayed on the map and indicated with a marker\n    this.setState({\n      region: regionFrom(latitude, longitude, accuracy),\n      start_location: {\n        latitude: latitude,\n        longitude: longitude\n      }\n    });\n    \n    // next: add code for updating the app based on how near the rider and hiker are from each other\n```\n\nNext, we need to get the difference (in meters) between the rider’s coordinates and the hiker’s origin:\n\n``` javascript\n    let diff_in_meters = getLatLonDiffInMeters(latitude, longitude, this.hiker.origin_coords.latitude, this.hiker.origin_coords.longitude);\n    \n    if(diff_in_meters \u003c= 20){\n      this.resetUI();\n    }else if(diff_in_meters \u003c= 50){\n      Alert.alert(\n        'Hiker is near',\n        'Hiker is around 50 meters from your current location'\n      );\n    }\n```\n\nNext, add the code for resetting the UI after five minutes without anyone requesting to share a ride with the rider:\n\n``` javascript\n    setTimeout(() =\u003e {\n      this.resetUI();\n    }, share_timeout);\n```\n\nHere’s the code for resetting the UI:\n\n``` javascript\n    resetUI = () =\u003e {\n    \n      this.from_region = null;\n      this.watchId = null; \n      this.pusher = null; \n      this.user_channel = null; \n      this.journey_id = null;\n      this.riders_channel = []; \n      this.users_channel = null; \n      this.hiker = null;\n    \n      this.setState({\n        start_location: null,\n        end_location: null,\n        region: default_region,\n        from: '',\n        to: '',\n        rider_location: null, \n        hiker_location: null,\n        is_loading: false,\n        has_journey: false\n      });\n      \n      this.props.navigation.goBack(); // go back to the Home page\n    \n      Alert.alert('Awesome!', 'Thanks for using the app!');\n    \n    }\n```\n\nNow let’s move on to the hiker’s side of things. When the hiker presses the **Search a Ride** button, the `hikeRide()` function is executed. This function is executed every five seconds until it finds a rider which matches the hiker’s route. If a rider cannot be found within ten minutes, the function stops. Once the server returns a suitable rider, it responds with the rider’s information (username, origin, destination, coordinates). This is then used to subscribe to the rider’s channel so the hiker can request for a ride and receive location updates. Note that this is done automatically, so the hiker doesn’t have control over who they share a ride with:\n\n``` javascript\n    hikeRide = (username) =\u003e {\n    \n      var interval = setInterval(() =\u003e {\n        // make a request to the server to get riders that matches the hiker's route\n        axios.post(`${base_url}/search-routes.php`, {\n          origin: this.state.start_location,\n          dest: this.state.end_location\n        })\n        .then((response) =\u003e {\n          \n          if(response.data){\n    \n            clearInterval(interval); // assumes the rider will accept the request\n            \n            let rider = response.data; // the rider's info\n            \n            // subscribe to the rider's channel so the hiker can make a request and receive updates from the rider\n            this.riders_channel = this.pusher.subscribe(`private-user-${rider.username}`);\n            \n            this.riders_channel.bind('pusher:subscription_succeeded', () =\u003e {\n              // when subscription succeeds, make a request to the rider to share the ride with them\n              this.riders_channel.trigger('client-rider-request', {\n                username: username, // username of the hiker\n                origin: this.state.from, // descriptive name of the hiker's origin\n                dest: this.state.to, // descriptive name of the hiker's destination\n                origin_coords: this.state.start_location // coordinates of the hiker's origin\n              });\n            });\n    \n            // next: add code for listening for when the rider accepts their request\n          }      \n        })\n        .catch((error) =\u003e {\n          console.log('error occurred while searching routes: ', error);\n        });\n    \n      }, 5000);\n    \n      setTimeout(() =\u003e {\n        clearInterval(interval);\n        this.resetUI();\n      }, ten_minutes);\n    \n    }\n```\n\nOnce the rider accepts the ride request, the function below is executed:\n\n``` javascript\n    this.riders_channel.bind('client-rider-accepted', (rider_data) =\u003e {\n      Alert.alert(\n        `${rider_data.username} accepted your request`,\n        `You will now receive updates of their current location`\n      );\n      \n      // update the map to show the rider's origin\n      this.setState({\n        is_loading: false,\n        has_journey: true,\n        rider_location: rider_data.coords\n      });\n    \n      // next: add code for subscribing to the rider's location change\n    });\n```\n\nAs you’ve seen earlier, when the rider’s location changes, it triggers an event called `client-rider-location-change`. Any user who is subscribed to the rider’s channel and is listening for that event will get the location data in realtime:\n\n``` javascript\n    this.riders_channel.bind('client-rider-locationchange', (data) =\u003e {\n      // update the map with the rider's current location\n      this.setState({\n        region: regionFrom(data.lat, data.lon, data.accy),\n        rider_location: {\n          latitude: data.lat,\n          longitude: data.lon\n        }\n      });\n      \n      let hikers_origin = this.state.start_location;\n      let diff_in_meters = getLatLonDiffInMeters(data.lat, data.lon, hikers_origin.latitude, hikers_origin.longitude);\n        \n      if(diff_in_meters \u003c= 20){\n        this.resetUI();\n      }else if(diff_in_meters \u003c= 50){\n        Alert.alert(\n          'Rider is near',\n          'Rider is around 50 meters from your location'\n        );\n      }\n    });\n```\n\nAdd the styles for the `Map` page:\n\n``` javascript\n    const styles = StyleSheet.create({\n      container: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n      },\n      map: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n      },\n      search_field_container: {\n        height: 150, \n        width: device_width, \n        position: 'absolute', \n        top: 10\n      },\n      input_container: {\n        alignSelf: 'center',\n        backgroundColor: '#FFF',\n        opacity: 0.80,\n        marginBottom: 25\n      }\n    });\n```\n\n### Location library\n\nHere’s the code for getting the latitude and longitude delta values. As you have seen from the code earlier, this function is mainly used to get the region displayed on the map:\n\n``` javascript\n    // Ridesharer/app/lib/location.js\n    export function regionFrom(lat, lon, accuracy) {\n      const oneDegreeOfLongitudeInMeters = 111.32 * 1000;\n      const circumference = (40075 / 360) * 1000;\n    \n      const latDelta = accuracy * (1 / (Math.cos(lat) * circumference));\n      const lonDelta = (accuracy / oneDegreeOfLongitudeInMeters);\n    \n      return {\n        latitude: lat,\n        longitude: lon,\n        latitudeDelta: Math.max(0, latDelta),\n        longitudeDelta: Math.max(0, lonDelta)\n      };\n    }\n```\n\nAnd here’s the function for getting the difference (in meters) between two coordinates. This is mainly used for notifying the users when they’re already near each other, and to reset the app UI when they’re already very near each other:\n\n``` javascript\n    export function getLatLonDiffInMeters(lat1, lon1, lat2, lon2) {\n      var R = 6371; // radius of the earth in km\n      var dLat = deg2rad(lat2-lat1);  // deg2rad below\n      var dLon = deg2rad(lon2-lon1); \n      var a = \n        Math.sin(dLat/2) * Math.sin(dLat/2) +\n        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * \n        Math.sin(dLon/2) * Math.sin(dLon/2)\n        ; \n      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n      var d = R * c; // distance in km\n      return d * 1000;\n    }\n```\n\nThe `deg2rad()` function used above converts the degrees value to radians:\n\n``` javascript\n    function deg2rad(deg) {\n      return deg * (Math.PI/180)\n    }\n```\n\n## Running the app\n\nBefore you can run the app on Android, you need to make sure you have the following Android SDK packages installed, you can find these under SDK Tools on the SDK manager:\n\n- Google Play services\n- Android Support Repository\n- Google Repository\n\nIf you’re going to test the app on Genymotion, you need to install Google Play services first. Since the app is using Google Maps, you need Google Play services for the feature to work. If you have version 2.10 or above, they provide an easy way to install it. Just click on **Open GAPPS** on a running emulator instance and go through the installation wizard. After that, restart the device and you should be good to go:\n\n![carpooling-react-native-install-google-play-on-genymotion](//images.ctfassets.net/1es3ne0caaid/7cjYmvjaRG4UQQImAquy4S/67f48d96692b5bbfbedcda652e964f97/carpooling-react-native-install-google-play-on-genymotion.png)\n\nTo run the app on Android, execute the following command. This will run the app either on an opened emulator instance (for example: Genymotion) or an Android device (if you have connected one):\n\n```\n    react-native run-android\n```\n\nIf you’re having problems with getting the app to run on Android, be sure to check my article on Debugging common React Native issues on Android.\n\nFor iOS, you just have to make sure you have the latest version of Xcode installed. Note that if you want to run the app on a device, you can only do it via Xcode by opening the `.xcworkspace` file. \n\nTo run the app on an iOS device, select your device on Xcode and click the big play button.\n\nTo run the app in the iOS simulator, you can also do it via Xcode using the method above. But if you want to run it from the terminal, you can execute the following command from the root directory of your project:\n\n```\n    react-native run-ios\n```\n\nIf you want to run the app on a specific simulator, you first have to list which devices are available:\n\n```\n    xcrun simctl list devicetypes\n```\n\nThis will return the list of devices:\n\n![carpooling-react-native-device-list](//images.ctfassets.net/1es3ne0caaid/4joEh2Gg80Y2KsQMuCOuWe/114b76551af9ee51f19f96edf39f6e2f/carpooling-react-native-device-list.png)\n\nYou can then copy the device name (for example: iPhone 5s) and specify it as a value for the `--simulator` option:\n\n```\n    react-native run-ios --simulator=\"iPhone 5s\"\n```\n\nIf you’re having problems with running the app on an iOS simulator or device, be sure to check my article on Debugging common React Native issues on iOS.\n\n## Conclusion\n\nThat’s it! In this series, you’ve learned how to create a carpooling app with React Native. Along the way, you also learned the following:\n\n- How to use axios to make requests to the server.\n- How to use React Native’s Geolocation feature.\n- How to add Google Play Services to Genymotion.\n- How to use Genymotion’s GPS emulation tool.\n- How to use Pusher Channels.\n- How to use Google’s Geocoding API.\n\nYou can find all the codes used in this series on this [GitHub repo](https://github.com/anchetaWern/Ridesharer).","metaTitle":"Create a carpooling app with React Native - Part 2","metaDescription":"Build a carpooling app using React Native, Docker and Google SDKs and APIs. In the second part, create the frontend using React Native and demo it with Genymotion."}}],"defaultValue":"","queryType":"","pages":50,"route":"/tutorials","query":{"page":"30"}}},"page":"/tutorials","query":{"page":"30"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?page=30 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:53 GMT -->
</html>