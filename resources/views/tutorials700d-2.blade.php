<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=no%20pusher%20tech&tag=Android&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:45:20 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dash.pusher.com/no pusher tech" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dash.pusher.com/authenticate/register?product=no%20pusher%20tech" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dash.pusher.com/no pusher tech" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dash.pusher.com/authenticate/register?product=no%20pusher%20tech" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="no pusher tech" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dash.pusher.com/no pusher tech" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dash.pusher.com/authenticate/register?product=no%20pusher%20tech" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">27</span> tutorials for “<span class="css-npldjc ehwuahf2">no pusher tech &amp; Android</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialsa785.html?product=Beams&amp;tag=Android" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials0be1.html?product=no%20pusher%20tech&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials9f36.html?product=no%20pusher%20tech&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsdfdb.html?product=no%20pusher%20tech&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials0e4c.html?product=no%20pusher%20tech&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials01a4.html?product=no%20pusher%20tech&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials78c7.html?product=no%20pusher%20tech" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path fill="#C223CE" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#C223CE" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#C223CE" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#C223CE" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials7632.html?product=no%20pusher%20tech&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials8e84.html?product=no%20pusher%20tech&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials6f6a.html?product=no%20pusher%20tech&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="no pusher tech &amp; Android"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/wordpress-react-native.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Linking WordPress and React Native</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial discusses the pros and cons of using WordPress and React Native together, before walking through a practic...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/introducing-flutter-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with Flutter - Part 2: Creating your first app</h3><p class="css-k12xad e5jrto45">This two-part series introduces Flutter, a framework for building cross-platform mobile apps with native interfaces, bas...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/introducing-flutter-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with Flutter - Part 1: Introduction to Flutter</h3><p class="css-k12xad e5jrto45">This two-part series introduces Flutter, a framework for building cross-platform mobile apps with native interfaces, bas...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/constraintlayout-kotlin-part-5.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with ConstraintLayout in Kotlin - Part 5: building a simple app using ConstraintLayout</h3><p class="css-k12xad e5jrto45">This five-part series takes a detailed look at the ConstraintLayout feature in Android. You will learn about its key fea...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/constraintlayout-kotlin-part-4.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with ConstraintLayout in Kotlin - Part 4: using MotionLayout for animations</h3><p class="css-k12xad e5jrto45">This five part series takes a detailed look at the ConstraintLayout feature in Android. You will learn about its key fea...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/constraintlayout-kotlin-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with ConstraintLayout in Kotlin - Part 3: using helpers - guidelines, groups, and barriers</h3><p class="css-k12xad e5jrto45">This five-part series takes a detailed look at the ConstraintLayout feature in Android. You will learn about its key fea...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/constraintlayout-kotlin-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with ConstraintLayout in Kotlin - Part 2: understanding constraints, bias, and chains</h3><p class="css-k12xad e5jrto45">This five-part series takes a detailed look at the ConstraintLayout feature in Android. You will learn about its key fea...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/constraintlayout-kotlin-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with ConstraintLayout in Kotlin - Part 1: introduction to ConstraintLayout</h3><p class="css-k12xad e5jrto45">This five-part series takes a detailed look at the ConstraintLayout feature in Android. You will learn about its key fea...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/accessible-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Making accessible React Native apps</h3><p class="css-k12xad e5jrto45">This tutorial looks at ways to improve the accessibility of React Native apps. You will take a (provided) starter app an...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials0bc3.html?product=no%20pusher%20tech&amp;tag=Android&amp;page=2" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialseaac.html?product=no%20pusher%20tech&amp;tag=Android&amp;page=1" class="css-5s6711 edg0byb1">1</a><a href="tutorials0bc3.html?product=no%20pusher%20tech&amp;tag=Android&amp;page=2" class="css-5s6711 edg0byb1">2</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials700d-2.html?product=no%20pusher%20tech&amp;tag=Android&amp;page=3" class="css-2wakph edg0byb1">3</a><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":27,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"laaErpOtnUaMO4Mmsu8Es","type":"Entry","createdAt":"2018-11-30T19:34:27.841Z","updatedAt":"2020-04-16T12:45:03.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Linking WordPress and React Native","url":"wordpress-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4j1ezB9yPmUYsSoSUG6eKK","type":"Entry","createdAt":"2018-03-05T16:21:11.688Z","updatedAt":"2018-11-16T09:41:40.564Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Pusher team","url":"pusher-team","email":"team@pusher.com","twitter":"https://twitter.com/pusher","github":"https://github.com/pusher","guestWriter":false}}],"projectRepo":"https://github.com/samuelayo/wordpress_react_by_example","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-11-30","description":"This tutorial discusses the pros and cons of using WordPress and React Native together, before walking through a practical build of a simple blogging app, supported by a WordPress API.","prerequisite":"You will need a WordPress install to work with. You will also need Node 8.3+ and the React Native CLI installed on your machine.","content":"In this tutorial we are going to be building a simple mobile app using React Native called ‘Music News’ which will pull posts from a WordPress website via the WP REST API and display them to the user every time they tap to read more about the news. We’ll start with this and you can dig more and do more by reading and understanding the documentation.\n\nAs mobile developers, integrating a data source is a very important aspect of building mobile apps. Having an organized data source ready for integration would make development easy and also reduce the time taken to build and develop mobile apps.\n\nWordPress as a backend can be very effective if you're building mobile applications that have a lot of consumable content such as a mobile application for a blog, e-commerce website, and so on.\n\nIt can provide standard endpoints to return the data you need and also provides standard documentation for all the endpoints you'll require.\n\n\n## Prerequisites\n\nTo follow through with this lesson, a basic understanding of the following are required:\n\n- WordPress\n- React Native\n\nYou also need to have the following installed:\n\n- PHP 5.6+\n- Node 8.3+\n- React Native CLI\n\n## Getting started\n\n### What is WordPress?\n\nWordPress is the easiest and fastest way to build your website. It's free and open source and it's based off two very popular technologies, PHP and MySQL.\n\nIt is stated that over 29% of websites on the internet are WordPress powered websites.\n\nWordPress is also a content management tool. It allows you to manage content posted on your website easily without the need for you to know anything technical and that's great because you don't have to be a programmer to be able to create and manage your website by yourself.\nThere's a wide variety of websites you can build using WordPress and some of them includes:\n\n- Blogs\n- Resumes\n- Creative portfolios\n- Forums\n- Brand or business websites\n- E-commerce or shopping websites\n\n\nWordPress can be an excellent tool to create your website because:\n\n- **It's free and open source:** that means you'll never need to pay for WordPress and if you're technical, you can also go ahead to add your own feature and functionality to it.\n- **It is easy to install:** you can easily install WordPress and get started as the installation process is fast, easy to understand and not technical so therefore can be done by anyone.\n- **It's extensible:** WordPress can be extended and customized by using themes to change how your website looks. There is a large plugin ecosystem to add custom functionality.\n- **Support:** finding help when you run into issues while setting up or managing your WordPress site is very easy. There's the official support and also so many other WordPress blogs, companies, and communities that provide free and premium support for websites using WordPress.\n\n### What is React Native?\n\nReact Native is a mobile JavaScript framework for building real native mobile applications for iOS and Android. It’s based on React made by Facebook's engineering team which is a JavaScript library for building user interfaces.\n\nUnlike a hybrid application that allows you to write your code in HTML and CSS and then renders it in a native web view container or component, React Native calls Objective-C and Java APIs respectively to render your JSX (a combination of JavaScript and XML-esque markup which is the standard way React applications are written) codes into user interface components on your device.\n\nSome of the known pros of React Native:\n\n- **Cross Platform:** React Native allows you to use the same codebase to compile and build for multiple platforms like Android and iOS. This also eventually saves development cost.\n- **Performance:** applications built using React Native have good performance on the device since they are rendered natively.\n- **Community**: the React and React Native community is solid despite it still being considered an emerging technology. There's a lot of communities and blogs that provide support for React Native issues.\n- **Fast Development:** because of its ability to build cross-platform, it saves time while developing application since you don't need to rewrite any special code for another platform and code re-usability is supported.\n\nSome of the known cons of React Native:\n\n- **It's new:** it's still considered as a new technology and therefore not stable as it comes with the caveats of using an unstable technology\n- **Future Plans**: React Native was built by the engineering team at Facebook and has since led to the concern of copyright and privacy issues and also its future because the project can be discontinued by the team.\n\n### What is an API?\n\nAPI stands for *Application Programming Interface.* It can be seen as a component that allows for interaction between two programming languages, software libraries, software tools, and so on. It also specifies a set of rules that should be followed in order to interact and communicate with underlying data.\n\nAn API could mean something else, depending on the context used and in this context, an API refers to a software component we will interact with to provide us with relevant raw data to be used inside our application.\n\n\n## Configuring WordPress to have an API\n\nTo get started, the first step would be to install the WordPress REST API plugin to our already existing WordPress installation. My WordPress site is on my local device so I'll be installing it there.\n\n- Go to **Plugins** \u003e **Add New** \u003e **Upload Plugin**.\n\n![rn-wordpress-upload-plugin](//images.ctfassets.net/1es3ne0caaid/99Ke8RRnhKIw4SwUqsWSs/e0f7015f349c71db8827ed86acf7956a/rn-wordpress-upload-plugin.png)\n\n- After uploading the plugin, make sure you activate it\n\n![rn-wordpress-install-plugin](//images.ctfassets.net/1es3ne0caaid/GZXGoUrek6qayeiCSeCas/cdeb68d495d4af433394acdf2a61c761/rn-wordpress-install-plugin.png)\n\n- Enable pretty permalinks under **Settings** \u003e **Permalinks** because the REST API uses custom rewrite rules.\n\n![rn-wordpress-permalinks](//images.ctfassets.net/1es3ne0caaid/1CUBJxRksEceAmgyayImiW/e96d507b8b289b8da3889424e6302b4d/rn-wordpress-permalinks.png)\n\n- Visit http://your-domain.com/wp-json/wp/v2/posts/ to make sure everything is working fine. In my own case, I have my WordPress instance installed locally on my device and in yours, visit the host you have your WordPress installed to confirm. You should see a page containing raw data of all your posts on the websites. In order to get the data in the best visual representation, you can install [Postman](https://www.getpostman.com) and use it for all API calls.\n\nWe can now proceed to make more Music News posts on our WordPress normally and then visit the endpoint to see it translated into raw data that can be used in our mobile app.\n\n![rn-wordpress-data](//images.ctfassets.net/1es3ne0caaid/5GlcPOUp3OsEgKIk6SQIIA/7b1d3bf3cd4b08dfe97179d01d33bca8/rn-wordpress-data.png)\n\n## Setting up our React Native app\n\nTo get started on this, you can follow the official docs on how to set up your React  Native environment on your computer. \n\nOnce that is done, we need to initiate and create our application project.\n\n```\n    $ react-native init MusicNews\n```\n\nOnce that is completed, we need to compile and build the application.\n\n```\n    $ react-native run-ios\n    # if using android, you can run the command below\n    $ react-native run-android\n```\n\n### Configuring routing in our app\n\nHow our users navigate around our mobile app is important as developers, we should make navigation as easy and smooth as possible. To configure navigation in our Music News app, we'll use the `react-native-router-flux` library to manage navigation between the screens of our app where all the music news posts are, to the screen where we'll read each individual post.\nReact-native-router-flux is an API on top of React Navigation and it allows you to define routes in one central place for easy management and configuration. To get started with `react-native-router-flux`\n\n```\n    $ npm install react-native-router-flux --save\n```\n\nNow that we have it installed, we go ahead and create our route file and configure all application routing. In the root directory of our Music News app, create a `Routes.js` file and the contents would look like:\n\n``` javascript\n    // Routes.js\n    import React, { Component } from 'react';\n    import {Platform} from 'react-native';\n    \n    // import components from react-native-router-flux\n    import {Router, Stack, Scene} from 'react-native-router-flux';\n    \n    // import our screens as components \n    import Home from './screens/Home';\n    import ViewNews from './screens/ViewNews';\n    \n    export default class Routes extends Component\u003c{}\u003e {\n    \n        render() {\n            return(\n                \u003cRouter\u003e\n                    \u003cStack key=\"root\" hideNavBar={true}\u003e\n                        \u003cScene key=\"home\" component={Home} title=\"Home\" /\u003e\n                        \u003cScene key=\"viewnews\" component={ViewNews} title=\"View News\"/\u003e\n                    \u003c/Stack\u003e\n                \u003c/Router\u003e\n                )\n        }\n    }\n```\n\n- Router is the main routing component.\n- A Stack is a group of Scenes with its own navigator, so you can have multiple stacks for navigating.\n- A Scene is the basic routing component for the main router and all Scene components require a key prop that must be unique.\n- A key prop is used to call the screen transition and must be unique to all screens.\n\nAlso, edit your `App.js` file to look like this:\n\n``` javascript\n    //App.js\n    import React, { Component } from 'react';\n    \n    import {\n      StyleSheet,\n      View,\n      StatusBar,\n    } from 'react-native';\n    \n    import Routes from './Routes';\n    \n    export default class App extends Component\u003c{}\u003e {\n    \n      render() {\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cStatusBar\n              backgroundColor=\"#fff\"\n              barStyle=\"dark-content\"\n            /\u003e\n            \u003cRoutes/\u003e\n          \u003c/View\u003e\n        );\n      }\n    }\n    \n    const styles = StyleSheet.create({\n      container : {\n        flex: 1,\n      }\n    }); \n```\n\n### Designing screens for our app\n\nReact Native offers inbuilt UI components like the `FlatList`, `Modal`, `Slider`, `Text`, and so on. For the design of our home page, we will be using the `Shoutem UI` and `react-native-render-html` to render all the posts fetched from our WordPress backend.\n\nNow that we've successfully configured routing, we need to create the screens as specified in the Routes file. \nWe'll create a screen folder and create the files as seen below:\n\n```\n    $ npm install --save react-native-render-html\n    $ npm install --save @shoutem/ui\n    $ react-native link\n    $ mkdir screens \u0026\u0026 cd screens\n    $ touch Home.js ViewNews.js\n```\n\nCopy the code below and paste into your `/screens/Home.js` \n\n``` javascript\n    //screens/Home.js\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      SafeAreaView,\n    } from 'react-native';\n    \n    import {\n      Subtitle,\n      Screen,\n      Divider,\n      View, \n      Row,\n      ListView,\n    } from '@shoutem/ui';\n    \n    import {Actions} from 'react-native-router-flux';\n    \n    export default class Home extends Component\u003c{}\u003e {\n    \n      home(){\n        Actions.home();\n      }\n    \n      viewNews(newspost){\n        Actions.viewnews({newspost: newspost});\n      }\n    \n      componentWillMount() {\n        this.fetchMusicNews();\n      }\n    \n      fetchMusicNews = async () =\u003e {\n        const response = await fetch(\"http://localhost/wordpress/wp-json/wp/v2/posts/\");\n        const json = await response.json();\n        this.setState({ musicNews: json, isLoadingMusicNews: false });\n      };\n    \n      constructor(props) {\n        super(props);\n        this.renderRow = this.renderRow.bind(this);\n        this.state = {\n          isLoadingMusicNews: true,\n          musicNews: [],\n        }\n      }  \n    \n      renderRow(post) {\n        const regex = /(\u003c([^\u003e]+)\u003e)/ig;\n        let newspost = {\n            postId: post.id,\n            postDate: post.date,\n            postLink: post.guid.rendered,\n            postTitle: post.title.rendered,\n            postExcerpt: post.excerpt.rendered,\n            postContent: post.content.rendered,\n            postCategory: post.categories,\n        }\n        return (\n          \u003cRow style={{height: 80}}\u003e\n            \u003cView styleName=\"vertical stretch space-between\"\u003e\n              \u003cSubtitle \n                numberOfLines={2} \n                newspost={newspost} \n                onPress={() =\u003e this.viewNews(newspost)}\u003e\n                {post.title.rendered.replace(regex, '').toUpperCase()}\n              \u003c/Subtitle\u003e\n            \u003c/View\u003e\n          \u003c/Row\u003e\n        );\n      }\n    \n      render() {\n        const regex = \"/(\u003c([^\u003e]+)\u003e)/ig\"\n        const musicNews = this.state.musicNews;\n        return (\n          \u003cSafeAreaView style={styles.safeArea}\u003e\n            \u003cScreen\u003e\n              \u003cView\u003e\n                  \u003cListView\n                    data={musicNews}\n                    renderRow={this.renderRow}\n                  /\u003e\n              \u003c/View\u003e\n            \u003c/Screen\u003e\n          \u003c/SafeAreaView\u003e\n        );\n      }\n    }\n    \n    const styles = StyleSheet.create({\n      container: {\n        flexDirection: 'column',\n        backgroundColor: '#fff'\n      },\n      safeArea: {\n        flex: 1,\n        backgroundColor: '#fff'\n      },\n    });\n```\n\nIn the `Home.js` file, we import all the necessary components to build our interface. We create routing functions so we can navigate from page to page. The `fetchMusicNews()` is an asynchronous function that allows us to fetch data from our API configured WordPress backend and the `componentWillMount()` allows us to fetch the async data after the screen is rendered. \nThe fetched data is stored in the musicNews state and will be passed to our component during rendering. \n\nIn the `renderRow()` we define a prop that holds data fetched from our WordPress API and we pass it to the `ViewNews` page so we don't have to do a network fetch to get the same data on the next screen. The data fetched is rendered as a list view using the `ListView` component imported from our UI library and the data is also rendered accordingly. \n\nOur `render()` function renders the screen and we use the `SafeAreaView` component to handle the screens of newer device screen like the ones of the iPhone X and higher so the screen doesn't overlap. Our styles are also defined for different components and the applied to style individual components based on the defined rules.\n\nCopy the code below and paste into your `/screens/ViewNews.js` \n\n``` javascript\n    // screens/ViewNews.js\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      SafeAreaView,\n      ScrollView,\n      Dimensions,\n    } from 'react-native';\n    \n    import {\n      Tile,\n      Title,\n      Screen,\n      Divider,\n      View, \n      Overlay\n    } from '@shoutem/ui';\n    \n    import {Actions} from 'react-native-router-flux';\n    import HTML from 'react-native-render-html';\n    \n    export default class ViewNews extends Component\u003c{}\u003e {\n    \n      home(){\n        Actions.reset('home');\n        Actions.home();\n      }\n    \n      constructor(props) {\n        super(props);\n        this.state = {\n          newspost: [],  \n        }\n      }\n      render() {\n        const news = this.state.newspost;\n        const regex = /[!@#$%^\u0026*\u003c\u003e0-9;]/g;\n        console.log(\"newspost: \"+this.props.newspost);\n        return (\n          \u003cSafeAreaView style={styles.safeArea}\u003e\n            \u003cScreen style={{ flex: 1 }}\u003e\n              \u003cScrollView\u003e\n              { \n                \u003cView\u003e\n                  \u003cTile\u003e\n                      \u003cOverlay styleName=\"image-overlay\"\u003e\n                        \u003cTitle style={{color: '#fff', fontWeight: '800'}} styleName=\"md-gutter-bottom\"\u003e{this.props.newspost.postTitle.replace(regex, \"\").toUpperCase()}\u003c/Title\u003e\n                        \u003c/Overlay\u003e\n                    \u003c/Tile\u003e\n                  \u003cScreen style={{paddingLeft: 15, paddingRight: 15, paddingTop: 15, paddingBottom: 15, width:375}} styleName=\"paper\"\u003e\n                    \u003cHTML \n                      tagsStyles={{ \n                        body: {fontSize: 20}, \n                        p: {fontSize: 20, fontWeight: \"normal\"}, \n                        strong: {fontSize: 20,}, \n                        blockquote: {fontSize: 20}, \n                        a: {fontSize: 20, color: \"#000\"}, \n                        em: {fontSize: 20,}, \n                        img: {height: 250, width: 350}, \n                      }}\n                      styleName=\"paper md-gutter multiline\" \n                      html={this.props.newspost.postContent} \n                      imagesMaxWidth={Dimensions.get('window').width} \n                      ignoredStyles={['width', 'height', 'video']}\n                      onLinkPress={(evt, href) =\u003e this.onLinkPress(href)}\n                    /\u003e\n                    \u003cDivider styleName=\"line\" /\u003e\n                  \u003c/Screen\u003e\n                \u003c/View\u003e\n              }  \n              \u003c/ScrollView\u003e\n            \u003c/Screen\u003e\n    \n          \u003c/SafeAreaView\u003e\n        );\n      }\n    };\n    \n    const styles = StyleSheet.create({\n      container: {\n        flex: 1, // 1:1\n        flexDirection: 'column',\n        backgroundColor: '#fff'\n      },\n      safeArea: {\n        flex: 1,\n        backgroundColor: '#fff'\n      },\n    });\n```\n\nIn the `ViewNews.js` file, we also import all the necessary components to build our interface. We create routing functions so we can navigate from page to page. The regex variable is a regular expression. We use it to remove some unwanted characters and symbols from our WordPress data.\n\nIn the `render()` function, we go ahead to fetch the data we stored in props from our `Home.js` and render it using our HTML component. The HTML component is used to render the data because the news item body sent from our WordPress API is sent with an HTML format and we can perform some extra functions like setting image size and dimensions, ignore styles, etc.\n\n## Using WordPress data\n\nTo build and compile our code:\n\n```\n    $ react-native run-ios\n    # If you want to build for android,you can use the command below\n    $ react-native run-android\n```\n\n\u003e If you are running this on your local host, chances are that you would get a network error. This is because `localhost` and `127.0.0.1`  would refer to the internal React native app. You should replace them with the public IP of your machine or tunnel your localhost via [ngrok](http://ngrok.io)\n\nIf you want to tunnel your WordPress app via ngrok, you can take the following steps:\n\n- Update ngrok (Ctrl+u when ngrok is running)\n- Adding the following two lines to `wp-config`:\n    define('WP_SITEURL', 'http://' . $_SERVER['HTTP_HOST']);\n    define('WP_HOME', 'http://' . $_SERVER['HTTP_HOST']);\n- Installing [https://wordpress.org/plugins/relative-url/](https://wordpress.org/plugins/relative-url/) in WordPress\n\nAfter the build is successful, your application should look like\n\n- Home Screen\n\n![rn-wordpress-home-screen](//images.ctfassets.net/1es3ne0caaid/5pGUcRLT20Gu0oAwE2UGgG/495aa971b6e8b3751dc15e6ab458bf70/rn-wordpress-home-screen.png)\n\n- Post Screen\n\n![rn-wordpress-post-screen](//images.ctfassets.net/1es3ne0caaid/QInEIkVm0MwcCeo2eSCiI/96fc05a31128c9fc16d54f7304aa73e1/rn-wordpress-post-screen.png)\n\n## Conclusion\n\nWe can see how easy it is to use our WordPress data in our mobile application using the WP REST API Plugin. Our data can be integrated with any mobile development framework and web development framework also.\n\nOur Music News app is simple right now, but you can go ahead to add some more styling and explore the Plugin documentation more to be able to build complex and robust applications on top of your WordPress data.\n\nThe code base to this tutorial is available in a publicly hosted [GitHub](https://github.com/samuelayo/wordpress_react_by_example) repository. Feel free to experiment around with it.","metaTitle":"Linking WordPress and React Native","metaDescription":"This tutorial discusses the pros and cons of using WordPress and React Native together, before walking through a practical build of a simple blogging app, supported by a WordPress API."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3ggUKRDURi2sEmaYcqsyya","type":"Entry","createdAt":"2018-10-25T06:38:14.063Z","updatedAt":"2020-06-19T12:32:40.456Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with Flutter - Part 2: Creating your first app","url":"introducing-flutter-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/flutter_doglister","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}}],"reviewDate":"2018-10-23","description":"This two-part series introduces Flutter, a framework for building cross-platform mobile apps with native interfaces, based on Dart. In part two, build a simple demo app and learn the basics of practical Flutter development.","prerequisite":"Prior knowledge of Flutter and Dart is not required.","content":"This is the second part of a two-part series on getting started with Flutter. You can find part one [here](https://pusher.com/tutorials/introducing-flutter-part-1). In this part, we’ll be setting up our machine for Flutter development and create a simple app.\n\n\n## Prerequisites\n\nThis tutorial assumes no previous knowledge of Flutter. Though you need to have previous programming experience in order to follow along. Specifically, you need to know basic object-oriented programming concepts such as variables, conditionals, loops, classes, and objects.\n\nKnowledge of the Dart language is optional. If you’ve done any sort of programming work previously, the syntax should be easy to pick up.\n\nJavaScript knowledge will be helpful as well, especially ES6 features.\n\nWe’ll be setting up the development environment in this tutorial so your machine doesn’t need to have Flutter installed already. This tutorial assumes that you know your way around the operating system you’re using. This means you should know how to add environment variables, and install different pieces of software.\n\n\n## App Overview\n\nWe’re going to build a dog lister app. Here’s what the final output will look like:\n\n![flutter-demo](//images.ctfassets.net/1es3ne0caaid/6GiKQhgSxamCUQEOaY6o8M/b84fab343bb8e6fb0d1ce6498a9c4808/flutter-demo.png)\n\nAs you might already imagine, this app allows the user to view a list of dog photos. They can click on the floating action button to load a new photo which will get appended to the end of the list.\n\nYou can find the full source code of the app on this [GitHub repo](https://github.com/anchetaWern/flutter_doglister).\n\n\n## Setting up Flutter\n\nIn this section, we’ll be setting up Flutter. There are sub-sections for the general setup, Android-specific, and iOS-specific setup. Note that you cannot develop for iOS if you’re on Windows or Linux. If you’re on Mac, you can develop both Android and iOS apps. This tutorial was tested on Windows 7, Ubuntu 16.04, and Mac OS High Sierra. But it should work as well if you’re using any other flavors or versions of those operating systems.\n\n\n### General Setup\n\nThese are the steps you need to follow regardless of the operating system you’re using.\n\n\n1. Install [Git](https://git-scm.com/) and [set up a user account](https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup).\n2. Install [Android Studio](https://developer.android.com/studio/). Setting it up should be fairly straightforward. It will also prompt you to install the essential packages so I’m no longer going to go into details. Once installed, make sure the following platforms and SDK tools are installed:\n![flutter-sdk-tools-required](//images.ctfassets.net/1es3ne0caaid/1QgBCTd8UAQse8MsWQgmaw/206b15c893fa529f84f6a23a34289947/flutter-sdk-tools-required.png)\n![flutter-android-api-required](//images.ctfassets.net/1es3ne0caaid/4Uea5NS9k44MMyKOYwuoYY/3b06e54fca8d2709695ece172bfae2de/flutter-android-api-required.png)\nThese are the build tools in text form:\n\n- CMake\n- Android Emulator\n- Android SDK Platform - Tools\n- Android SDK Tools\n- Google Play services\n- Intel x86 Emulator Accelerator\n- NDK\n- Support Repository\n\nAs for the Android platform, the only requirement is the Android SDK Platform 28.\n\n3. Install [Visual Studio Code](https://code.visualstudio.com/). After that, install the Flutter extension. Installing the Flutter extension will install Dart extension as well:\n![flutter-visual-studio-code-extension](//images.ctfassets.net/1es3ne0caaid/3Lr0d2pcSsEE4gY8eaAYM0/182aafbc8cdc9439ddd8a8765a58911a/flutter-visual-studio-code-extension.png)\n4. Download and install [Genymotion emulator](https://www.genymotion.com/fun-zone/). You can also use the Android emulator in Android Studio if you want, but we’ll be using Genymotion in this tutorial. As for the virtual device, I had good luck with devices using API 19 and above.\n5. Flutter will also require the Flutter and Dart plugin for Android Studio, you can install those if you want but we’re not really going to use Android Studio in this tutorial so you can skip it. If you want to use Android Studio then go to **Preferences** → **Plugins** then click on **Browse Repositories**, search for “Flutter” and install it. This will ask you to install Dart as well so just agree.\n\n\n### Mac OS setup\n\nThis section shows the steps to follow to setup Flutter on Mac. Mac OS High Sierra version 10.13.6 was used for testing. But it should also work if you have a lower or higher version of High Sierra installed.\n\n#### General setup\n\nThese are the general steps in setting up Flutter on Mac OS.\n\n\n1. Make sure that you have curl, and unzip installed. You can install these via [Homebrew](https://brew.sh/) if you don’t already have them.\n2. Download the Flutter SDK [from here](https://flutter.io/sdk-archive/#macos). At the time of writing this tutorial, the most recent version is [0.6.0](https://storage.googleapis.com/flutter_infra/releases/beta/macos/flutter_macos_v0.6.0-beta.zip). Always stick with the latest available version.\n3. Extract the zip file using the `unzip` command or the archive manager that you have on your machine:\n\n```\n    unzip ~/Downloads/flutter_macos_v0.6.0-beta.zip\n```\n\n4. Copy the `flutter` folder to where you store your development tools. Mine is in the root of my user directory.\n\n\n5. Open your bash profile and add Flutter to your path:\n\n```\n    nano ~/.bash_profile # open bash profile\n    export PATH=/Users/$USER/flutter/bin:$PATH # add this with the rest of your exports\n```\n\n6. Source your bash profile for the changes to take effect:\n\n```\n    source ~/.bash_profile\n```\n\n#### Android-specific setup\n\nIf you want to develop Android apps with Flutter, here are the steps:\n\n\n1. Run `flutter doctor` to check what else your system lacks before you can start developing apps in Flutter. Mine looks like this:\n![flutter-doctor-missing-requirements](//images.ctfassets.net/1es3ne0caaid/2TXlg5HR448ykuAAaaiU24/52044f1d1db8bd9407522f11a4194df5/flutter-doctor-missing-requirements.png)\n\n2. After that, all you need to do is run `flutter doctor --android-licenses` and accepting the licenses by responding with `y` to each of the questions asked.\n\n\n#### iOS-specific setup\nFollow these steps if you want to develop iOS apps with Flutter.\n\n\n1. If you want to develop iOS apps with Flutter, install the latest stable version of Xcode via the App Store.\n2. Configure the Xcode command-line tools:\n\n```\n    sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n```\n\n3. Accept the license agreement:\n\n```\n    sudo xcodebuild -license\n```\n\n### Installing on Windows\n\nFollow these steps if you’re using Windows. This was specifically tested on Windows 7 so there’s a high chance that it will work on higher versions of the OS as well.\n\n#### Android-specific setup\n\n\n1. Download the latest copy of the Flutter SDK from the [SDK Archive page for Windows](https://flutter.io/sdk-archive/#windows). At the time of writing this tutorial, the latest is version [0.6.0](https://storage.googleapis.com/flutter_infra/releases/beta/windows/flutter_windows_v0.6.0-beta.zip).\n2. Once downloaded, extract the zip file and copy the resulting `flutter` folder to your `C:` drive. After copying, the resulting path should be `C:\\flutter` and there should be a `flutter_console.bat` file at the root of that directory.\n3. Double-click on the `flutter_console.bat` file inside `C:\\flutter`. This should open a new command line window. Run `flutter doctor` to check which system requirement you’re still lacking to develop Flutter apps. In my case, it required me to accept the licenses for Android by running `flutter doctor --android-licenses` and responding with `y` (yes) to all the licenses.\n4. `flutter doctor` should also complain about not having a connected device. To solve this, boot up the Genymotion or Android emulator and run `flutter doctor` again.\n5. The requirement for the Flutter and Dart plugin for Android Studio is optional because we’re not really going to use Android Studio to write code in this tutorial.\n6. Go to your advanced system settings. You can find this one either in the **Control Panel** or right-clicking on **Computer** and select **System** **properties**. Once you see a window similar to the one below, click on **Environment Variables**:\n\n![flutter-windows-system-properties](//images.ctfassets.net/1es3ne0caaid/15oe8yx9v8cc4ca0o4sKqg/371217c4279b0540ed12af464923ed7f/flutter-windows-system-properties.png)\n\n\n9. Under **User Variables**, edit the `Path` variable:\n\n![flutter-windows-env-variables](//images.ctfassets.net/1es3ne0caaid/5h8JIWBVscuk62ySOs2weK/a56bad0e04f6421dec0b6dd8ce1c5d64/flutter-windows-env-variables.png)\n\n\n10. Append `;C:\\flutter\\bin` after the last value. Mine looks like this after adding the path to Flutter:\n\n```\n    ;C:\\Program Files\\Docker Toolbox;C:\\Users\\wern\\AppData\\Roaming\\npm;C:\\Users\\wern\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\flutter\\bin\n```\n\n11. Save the changes. This will allow you to execute any Flutter command from either the default command line, PowerShell, or Git Bash. I personally prefer Git Bash because its character set doesn’t mess up the check mark and it’s a whole lot more readable than the other two:\n\n\n![flutter-doctor-git-bash](//images.ctfassets.net/1es3ne0caaid/47bMXCpldK6Cqo00GQYEUk/bce200b5eb4863a3f3a8b9415c848081/flutter-doctor-git-bash.png)\n\n### Installing on Ubuntu\n\nFollow these steps if you’re on Ubuntu or any Linux distribution. Just execute the equivalent command for your particular flavor of Linux if it’s different. Ubuntu 16.04 LTS is used for testing.\n\n#### Android-specific setup\n\n\n1. Before anything else, make sure to update the packages installed on your operating system first. You can do so by opening the software updater and installing all the relevant updates. Alternatively, you can also run `sudo apt-get update` from the terminal.\n2. Download the latest version of the Flutter SDK from the [SDK archives page](https://flutter.io/sdk-archive/#linux). At the time of writing this tutorial, the most recent version is [0.6.0](https://storage.googleapis.com/flutter_infra/releases/beta/linux/flutter_linux_v0.6.0-beta.tar.xz).\n3. Extract the `.tar.xz` file in the root of your home directory. For me, it’s in `/home/wern/flutter`, where the `flutter` directory is the extracted folder containing a `flutter_console.bat` file in its root.\n4. Update the `.bash_profile` file to include the path to the `flutter/bin` folder. Make sure you have the Android paths in there as well:\n\n```\n    export ANDROID_HOME=$HOME/Android/Sdk\n    export PATH=$PATH:$ANDROID_HOME/tools\n    export PATH=$PATH:$ANDROID_HOME/tools/bin\n    export PATH=$PATH:$ANDROID_HOME/platform-tools\n    \n    export PATH=$HOME/flutter/bin:$PATH\n```\n\n4. Run `flutter doctor` to check your system for software requirements. If you followed the general setup, the only thing left for you to do is execute `flutter doctor --android-licenses` to accept the Android licenses. Just respond with `y` to all of those to accept it.\n\n\n## Building the hello world app\n\nStart by generating a new Flutter app:\n\n```\n    flutter create doglister\n```\n\n### Directory structure\n\nOnce the project is created, drag it into VS code. We’re using VS code because it has the most complete Flutter support (Dart syntax, code completion, debugging tools).\n\nBy default, you should see the following directory structure:\n\n\n- `android` - where Android-related files are stored. If you’ve done any sort of cross-platform mobile app development before, this, along with the `ios` folder should be pretty familiar.\n- `ios` - where iOS-related files are stored. \n- `lib` - this is where you’ll be working on most of the time. By default, it contains a `main.dart` file, this is the entry point file of the Flutter app. \n- `test` - this is where you put the unit testing code for the app. We won’t really be working on it in this tutorial.\n- `pubspec.yaml` - this file defines the version and build number of your app. It’s also where you define your dependencies. If you’re coming from a web development background, this file has the same job description as the `package.json` file so you can define the external packages (from the [Dart packages website](https://pub.dartlang.org/)) you want to use in here.\n\nNote that I’ve skipped on other folders and files because most of the time you won’t really need to touch them.\n\n### Running the app\n\nNext, open an iOS simulator or Android emulator and run the app once it has completely booted:\n\n```\n    flutter run\n```\n\nThe command above detects any running instance of an Android or iOS simulator so it should automatically pick up the one you launched beforehand. \n\nAnytime you make a change to the code and you want to preview the change, simply hit the `r` key while in the terminal window. This hot reloads the app but the state will still be retained. But if you notice that the change doesn’t appear, you might need to hit the `Shift + R` key to hot restart the app. Note that this wouldn’t retain the app state like hot reload does.\n\n![flutter-run](//images.ctfassets.net/1es3ne0caaid/9bzwLHg8ik6goaWWUUiqi/46adc1262d25ebbcaaece6472ce1facb/flutter-run.png)\n\nIf you find it cumbersome to be hitting the  `r` key each time you make a change, consider going into debug mode in Visual Studio code. You can do that by going to **Debug** → **Start Debugging**, or simply hit `Ctrl + Shift + F5` or `⌘ + Shift + F5` on your keyboard. While on debug mode, everytime you hit save, the app is hot reloaded so you don’t have to go back and forth between your text editor, simulator, and the terminal while you’re working.\n\n\n### Hello world app\n\nThe code that comes with the Flutter starter app is a bit complicated, so we’ll stick with the same hello world app from this [CodeLab](https://flutter.io/get-started/codelab/) first. Open the `lib/main.dart` file in the project directory and put the following code:\n\n``` dart\n    import 'package:flutter/material.dart'; // import the material package\n    \n    void main() =\u003e runApp(MyApp()); // render the MyApp widget\n    \n    // define a stateless widget\n    class MyApp extends StatelessWidget {\n      @override // override the build method from the StatelessWidget\n      Widget build(BuildContext context) { // define the method for rendering the app\n        return MaterialApp(\n          title: 'Welcome to Flutter', // the title of the app\n          home: Scaffold( // specify the screen structure\n            // the app's header\n            appBar: AppBar( // the widget for rendering an app header\n              title: Text('Welcome to Flutter'), // the header text\n            ),\n            // the contents of the body\n            body: Center( // center the contents\n              child: Text('Hello World'), // render some text\n            ),\n          ),\n        );\n      }\n    }\n```\n\nTo have a better understanding of what’s going on, let’s break down the code above.\n\nFirst, we import the [Material library](https://docs.flutter.io/flutter/material/material-library.html) from Flutter:\n\n``` dart\n    import 'package:flutter/material.dart';\n```\n\nThis allows us to use widgets that implement [Material Design](https://material.io/design/). Among those are the `MaterialApp`, `Scaffold`, and `AppBar` widgets that we’re using above. The methods that we’re using are either part of a library you’ve imported, or part of the Flutter framework itself.\n\nNote that almost everything in Flutter is a widget, and each one can have its own set of properties and child widgets. So `Center` and `Text` are also widgets.\n\nFor most packages, you’ll have to search for it on the Dart packages website and add it to your `pubspec.yaml` file:\n\n![example-dart-package](//images.ctfassets.net/1es3ne0caaid/1Yn149u8Ug2eoS4kMuOkyy/81d0158ee363d60893824990c6eb1ca1/example-dart-package.png)\n\nBut in this case, the library that we’re working with is a part of Flutter. When we create a new app with `flutter create`, the Flutter library is already installed, and with that, the material library among others is also installed.\n\nNext, we define the `main` method. If you’ve worked with languages such as Java, this method should look familiar. This is the entry point of the whole program so it must always be defined if you want to render something on the screen:\n\n``` dart\n    void main() =\u003e runApp(MyApp())\n```\n\nBut what about the fat-arrow (`=\u003e`)? If you’re familiar with ES6 features in JavaScript, this is pretty much the same. It’s just a more concise way of defining functions, so we’re actually running the `runApp()` function inside the `main()` function. This function makes the `MyApp` widget the root of the widget tree. This effectively renders the widget, along with its children into the screen.\n\nIn Flutter, there are two types of widget that you’ll commonly work with: stateless and stateful. The difference between the two is that stateless widgets don’t manage it’s own internal state, while a stateful widget does. For example, a button widget doesn’t need to keep track of anything internally while a counter widget needs to keep track of its current count because it needs it for display. In our case, we’re creating a stateless widget because all we need to do is render something on the screen. To create a stateless widget, you need to extend the `StatelessWidget` [class](https://docs.flutter.io/flutter/widgets/StatelessWidget-class.html):\n\n``` dart\n    class MyApp extends StatelessWidget {\n      // ...\n    }\n```\n\nThat class requires you to override its `build` method which should return the actual contents of the widget. In this case, we’re using the `MaterialApp` [widget](https://docs.flutter.io/flutter/material/MaterialApp-class.html) as a wrapper. This allows us to easily implement Material Design for the widgets that we’re going to render as its child:\n\n``` dart\n    @override\n    Widget build(BuildContext context) { \n      return MaterialApp(\n        title: 'Welcome to Flutter', \n        home: Scaffold( \n          ... \n        ),\n      );\n    }\n```\n\nNote that the `MaterialApp` widget doesn’t only allow us to use the Material Design theme, it also handles navigation and navigation animations. So the `home` property actually allows us to define the widget to render on the `home` route. For that, we’re using the `Scaffold` [widget](https://docs.flutter.io/flutter/material/Scaffold-class.html) which provides the structure for the layout that we’re trying to build.\n\nThe `Scaffold` widget accepts the `appBar` (app header) and the `body` (main content of the app): \n\n``` dart\n    appBar: AppBar( \n      title: Text('Welcome to Flutter'),\n    ),\n    body: Center(\n      child: Text('Hello World'), \n    ),\n```\n\nThose are the basics of building the UI in Flutter. Basically, everything in Flutter is a widget. There are widgets used for specifying the UI structure (for example, `Scaffold`). There are also widgets that allow you to render something on the screen (for example, `Text`). Each widget can have their own child, and those child widgets can also have their own children and so on. The only caveat is that some widgets won’t accept just any child. For example, widgets like the `Scaffold` only accept a handful of widget types.\n\nIf you’re like me and you’re coming from a framework like React Native, then you must be thinking that it’s a whole lot of work! And I agree with you. Building the UI of the app will definitely take longer especially if you’re just starting out. But once you get used to it, you’ll be productive in no time. This is where the documentation really shines because everything you need is literally just [one search away](https://docs.flutter.io/flutter/widgets/widgets-library.html#classes).\n\n\n## Building the dog lister app\n\nNow it’s time for us to build the app that we’ve set out to build, the dog lister app. For this, we’ll be using the same Flutter project that we created earlier.\n\n### Directory structure\n\nFirst, let’s talk about the directory structure. We’ll be following the default directory structure set by Flutter, but we’re going to add a few folders inside the `lib` directory as well:\n\n```\n- `src`\n  - `models` \n    - `dog_model.dart`\n  - `widgets`\n    - `card_list.dart`\n  - `app.dart`\n- `main.dart`\n```\nGo ahead and create those folders and files. Feel free to consult the [GitHub repo](https://github.com/anchetaWern/flutter_doglister) as a basis.\n\n### Entry point file\n\nOpen the `lib/main.dart` file and replace the existing contents with the following:\n\n``` dart\n    import 'package:flutter/material.dart'; // import the material library\n    import 'src/app.dart'; // import the app.dart local file\n    void main() {\n      runApp(App());\n    }\n```\n\nAll of these lines should look familiar except for the second line if you haven’t previously worked with relative linking. In the first line, we’re trying to link a Flutter package, thus the `package:` prefix. But for Dart files that are inside the project directory, all you have to do is specify the path in which they’re stored.\n\nThe third to fifth lines is just the long way of doing this:\n\n```\n    void main() =\u003e runApp(App())\n```\n\n### Initializing the main app file\n\nNext, open the `lib/src/app.dart` file. This is where we will add the main content of the app. Start by importing the Material library:\n\n``` dart\n    import 'package:flutter/material.dart';\n```\n\nUnlike the hello world app from earlier, we will be using a stateful widget for this app. A stateful widget requires a `createState()` [method](https://docs.flutter.io/flutter/widgets/StatefulWidget/createState.html) to be implemented. Inside the method body is where you return the stateful widget:\n\n``` dart\n    // lib/src/app.dart\n    class App extends StatefulWidget {\n      createState() {\n        return AppState();\n      }\n    }\n```\n\nNext, declare the actual stateful widget. From the name of the method above (`createState`) which returns this widget, and also the class that the widget below extends (`State`), it can look like we’re just declaring the state of the stateful widget. But in reality, we’re creating the actual widget, not just its state. It still requires us to declare a `build` method which returns the contents of the widget, the only difference is that we’re going to add an internal state to this widget later on. For now, we’ll simply return the UI components:\n\n``` dart\n    // lib/src/app.dart\n    class AppState extends State\u003cApp\u003e {\n      \n      Widget build(context) {\n        return MaterialApp(\n          home: Scaffold(\n            body: Container(),\n            floatingActionButton: FloatingActionButton(\n              child: Icon(Icons.refresh),\n              onPressed: () =\u003e {\n                // nothing for now..\n              },\n              backgroundColor: Colors.deepPurpleAccent[700],\n            ),\n            appBar: AppBar(\n              title: Text('Doggos'),\n              backgroundColor: Colors.black54,\n            ),\n          ),\n        );\n      }\n    }\n```\n\nIn case you’re wondering what this weird-looking syntax means, this means that we want to create a copy of the `State` class that will work specifically for the `App` class we created right above this class. And since the `App` class is extending the `StatefulWidget` class, this means that we’re inheriting the methods from the `StatefulWidget` class as well. One of these methods is the `setState` method which allows us to update the state. You’ll see this in action later on:\n\n``` dart\n    class AppState extends State\u003cApp\u003e {\n      // ...\n    }\n```\n\nThe code above should look familiar except for the `Container` and `floatingActionButton` widget that we’re using:\n\n- `Container` - used as a [wrapper](https://docs.flutter.io/flutter/widgets/Container-class.html) for other widgets for them to occupy the available space in the screen. In this case, we’re not really wrapping anything so it simply acts as a placeholder. If you don’t pass in another widget to a `Container`, it won’t actually occupy the screen.\n- `FloatingActionButton` - this [widget](https://docs.flutter.io/flutter/material/FloatingActionButton-class.html) is used for creating, you guessed it, a floating action button! In case you’re not familiar, these are the buttons that seemingly hover over the rest of the UI. They’re usually circular in shape and are often used with the `Icon` [widget](https://docs.flutter.io/flutter/widgets/Icon-class.html). The `FloatingActionButton` widget is special because the `Scaffold` [widget](https://docs.flutter.io/flutter/material/Scaffold-class.html) accepts it as a parameter. As mentioned earlier, not all widgets can accept all other types of widget.\n\nAside from that, we’re also adding custom colors to the `appBar` and `floatingActionButton` widgets. In Flutter, colors are not represented using hex color codes, instead they’re represented in [ARGB format](https://docs.flutter.io/flutter/dart-ui/Color-class.html). There are also [color constants](https://docs.flutter.io/flutter/material/Colors-class.html), which can be controlled to be lighter or darker based on the number you specify. Note that the Material theme comes with default colors which are automatically applied to some of the UI elements (for example, `appBar` and `floatingActionButton`), so by specifying a color, we’re basically overriding the default color assigned by the theme.\n\nIn case you’re wondering why we had to create two separate classes just to implement a stateful widget, this is because of the way widgets work in Flutter. We already know that stateless widgets have this method called `build`. This method automatically gets called whenever the data that you pass to it gets updated from a parent widget. In effect, this wipes out the current state of that widget. And that’s why it’s called a stateless widget.\n\nOn the other hand, we have stateful widgets. As you have seen, they require two separate classes in order to work. This is because the primary widget (in this case, the `App` class) will also get its current state wiped out if a data that it’s depending on gets updated from its parent widget. So the reason why we’re returning a second class which serves as the widget’s state is so we could keep the current data from being over-written. If you’re familiar with [JavaScript closures](http://javascriptissexy.com/understand-javascript-closures-with-ease/), stateful widgets work similarly. In the example below, the `counter()` function is the primary widget class while the function inside is the widget’s state:\n\n``` dart\n    function counter(num){\n      var x = num;\n      return function(y){\n       return x = x + y;\n      }\n    }\n    \n    var num = counter(3);\n    num(4); // outputs: 7\n    num(3); // outputs: 10\n```\n\nThat’s it for now. We’ll come back to this file later once we’ve created the widget for rendering a list of cards.\n\n### Dog model\n\nModels in Dart allows us to define a new data type to be used inside our app. This provides structure and uniformity to the different kinds of data that we’re using inside the app. It also serves as a nice tool for documenting what type of data we’re expecting for the properties of an object. This is very useful when working on a [collection of objects](https://api.dartlang.org/stable/2.0.0/dart-core/List-class.html).\n\nTo define a model in Dart, you use the same syntax as for defining a class, only this time you’re not going to need to extend another class. Inside the class, you define the properties. In this case, we only have one property called `url`. Below that, we declare the constructor which accepts a parsed JSON as its argument. We’re using `Map\u003cString, dynamic\u003e` to annotate its type. The parsed JSON is basically a JavaScript object so we used the equivalent data type in Dart which is `Map`. Lastly, `\u003cString, dynamic\u003e` is the type of the key and value pairs for each object:\n\n``` dart\n    // lib/src/models/dog_model.dart\n    class DogModel {\n      String url;\n      DogModel(Map\u003cString, dynamic\u003e parsedJson) {\n        url = parsedJson['message'];\n      }\n    }\n```\n\nBut what about the `message` property we’re accessing from the `parsedJson`? Its response looks something like this:\n\n``` dart\n    {\n      \"status\": \"success\",\n      \"message\": \"https://images.dog.ceo/breeds/shihtzu/n02086240_10785.jpg\"\n    }\n```\n\nThe `DogModel` is extracting that `message` property to get the image URL. Later on, you’ll see how we’re actually passing the `parsedJson` to the `DogModel`.\n\n\n### CardList widget\n\nThe CardList widget is used for rendering the cards which shows a dog picture. This is a stateless widget which depends on the data that comes from the `lib/src/app.dart` file.\n\nStart by importing the Material library and Dog model:\n\n``` dart\n    import 'package:flutter/material.dart';\n    import '../models/dog_model.dart';\n```\n\nNext, create the widget. Below, we’re using the `List` [class](https://api.dartlang.org/stable/2.0.0/dart-core/List-class.html) as the data type for the collection of dog `images`. In Dart, a `List` is pretty similar to an array, it allows us to add a collection of objects to it. Note that not just any object can be added because we’ve added the `DogModel` as a constraint,  this means that only objects of type `DogModel` can be added to the list. After that, we set `images` as the context for the widget. Later on in the `lib/src/app.dart` file you will see how to pass these images to the widget:\n\n``` dart\n    class CardList extends StatelessWidget {\n      final List\u003cDogModel\u003e images;\n     \n      CardList(this.images); // set the widget's context\n      \n      // next: add build method\n      \n    }\n```\n\nNext, add the `build()` function. Here we’re checking if there are any images in the list. If there is, then we use the `ListView` [widget](https://docs.flutter.io/flutter/widgets/ListView-class.html) to render a list. This requires an `itemCount` and `itemBuilder` properties to be passed in. These are the total number of images in the list and the function for rendering each list item. \n\nThe `context` and the item’s `index` is passed as an argument to the `itemBuilder`. This allows us to extract a specific index from the list. The `context` is a [handle](https://docs.flutter.io/flutter/widgets/BuildContext-class.html) to the location of a widget in the widget tree. We don’t really have any use for it so I’m not going to expound further.\n\nIf no images are available, we simply render a `Text` widget with some text in it:\n\n``` dart\n    Widget build(context) {\n     \n      if(this.images.length \u003e 0){\n        return ListView.builder(\n          itemCount: images.length, // the total number of images\n          itemBuilder: (context, int index) { // the function for rendering each list item\n            return buildCard(images[index]);\n          }\n        );\n      }\n      return Center(child: Text('No doggos for you yet...'));   \n    }\n    \n    // next: add buildCard widget\n```\n\nNote that unlike JavaScript, we have to explicitly define the condition which returns a boolean value. So we can’t simply do something like this:\n\n``` dart\n    if(this.images.length){\n      // ...\n    }\n```\n\nNext is the widget for rendering each list item. Each item represents a single instance of the `DogModel` class. We’re using a `Container` widget as the main wrapper. This allows us to add a `decoration`, `padding`, `margin` and `child` widgets:\n\n``` dart\n    Widget buildCard(DogModel image) {\n      return Container(\n        decoration: BoxDecoration(\n          border: Border.all(color: Colors.grey),\n        ),\n        padding: EdgeInsets.all(10.0),\n        margin: EdgeInsets.all(10.0),\n        child: Image.network(image.url),\n      );\n    }\n```\n\nMost of the properties that the `Container` widget expects are part of Flutter’s painting library:\n\n\n- `decoration` - used for painting things like borders, box shadows, and fills on the screen. In this case, we’re using it to surround the container with a grey border on all sides.\n- `padding` - used for adding an empty space inside the surrounding area of the container.\n- `margin` - used for adding an empty space outside the surrounding area of the container.\n\nIf you’ve worked with [CSS](https://en.wikipedia.org/wiki/Cascading_Style_Sheets) before, these concepts should look familiar. The only difference is the syntax that we’re using.\n\nAs for the `child`, we’re rendering an `Image` widget. The `network()` method allows us to [display an image from the internet](https://flutter.io/cookbook/images/network-image/), all it requires is the URL that points out to the image resource.\n\n### Bringing everything together\n\nGoing back to the `lib/src/app.dart` file, we’re now ready to make use of the `CardList` widget. \n\nAt the top of the file, import the libraries, models, and widgets that we’re going to need:\n\n``` dart\n    // lib/src/app.dart\n    import 'package:flutter/material.dart';\n    \n    // add these:\n    import 'package:http/http.dart' show get; // for making http requests\n    import 'models/dog_model.dart'; // dog model\n    import 'dart:convert'; // for parsing JSON strings\n    import 'widgets/card_list.dart'; // CardList widget\n```\n\nNote that these libraries come pre-installed when you create a new Flutter project. Some of these are libraries are really big like Dart’s HTTP library. That’s why we’re only extracting the `get` method from it.\n\nNext, update the `AppState` class to include the initialization of the two states that we’ll be using:\n\n``` dart\n    class AppState extends State\u003cApp\u003e {\n      bool _loaderIsActive = false;  // whether the loader is currently showing or not\n      List\u003cDogModel\u003e images = []; // the list of images\n      \n      // next: add fetchDog method\n    }\n```\n\nThe `fetchDog()` function is responsible for updating the state whenever the user taps on the button for loading a new image. When this happens, we want to show a loading animation in the screen. This animation will only be hidden once the HTTP request is done:\n\n``` dart\n    void fetchDog() async {\n      // show the loader\n      setState(() {\n        _loaderIsActive = true;\n      });\n      \n      // make an HTTP request to get the dog photo\n      var response = await get('https://dog.ceo/api/breeds/image/random');\n      var dogModel = DogModel(json.decode(response.body));\n      \n      // hide the lower and add the newly loaded image into the state\n      setState(() {\n        _loaderIsActive = false;\n        images.add(dogModel);\n      });\n    }\n    \n    // next: add build method\n```\n\nIn Flutter, the `setState()` method is used for updating the state of a Stateful widget. Before we request for a new image, we update the state so the loader will show up, then we call it again once the image has been loaded, this time to add the new image to the list and hide the loader.\n\nThe `fetchDog()` function uses the same [async/await pattern](https://codeburst.io/javascript-es-2017-learn-async-await-by-example-48acc58bad65) that we use in JavaScript. The `get()` function in Dart’s HTTP library returns a `Future` which is just a fancy term for [Promises](https://developers.google.com/web/fundamentals/primers/promises) in JavaScript. This `Future` represents a potential value which will be available in the future. So by default, the `response` variable doesn’t actually contain the value that we’re expecting right after we call the `get()` function. By using the async/await pattern, we make the program wait for this future value to become available before we execute the rest of the code inside the function. Meanwhile, all the codes outside the function will continue to execute.\n\nNext, update the widget’s `build` method to show the loader when `_loaderIsActive` is `true` and show the `CardList` if it’s `false`. Then execute the `fetchDog()` function when the `floatingActionButton` is pressed:\n\n``` dart\n    Widget build(context) {\n      return MaterialApp(\n        home: Scaffold(\n          body: Center(child: _loaderIsActive == true ? CircularProgressIndicator() : CardList(images)), // update this: \n          floatingActionButton: FloatingActionButton(\n            child: Icon(Icons.refresh),\n            onPressed: fetchDog, // update this: use fetchDog instead of the empty function\n            backgroundColor: Colors.deepPurpleAccent[700],\n          ),\n        )\n      );\n    }\n```\n\nOnce that’s done, the app should already be functional. Pressing the button should show the loader, and once the image has been loaded it should be added to the list. If you don’t already have the app running, launch an Android emulator or iOS simulator instance and execute the following command from the root of the project directory:\n\n```\n    flutter run\n```\n\n## Conclusion\n\nThat’s it! In this tutorial, you learned how to create your very first Flutter app. Along the way, you also learned some of the important Flutter concepts like stateful and stateless widgets, how to use Dart packages, how to make HTTP requests and parse JSON strings, and lastly, rendering things on the screen.\n\nThat also concludes this series. I hope you gained the necessary knowledge in order to continue exploring Flutter. Flutter is a very young technology, so early adopters are really important for its growth. The more people who use Flutter, the better the technology gets.\n\nYou can find the code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/flutter_doglister).","metaTitle":"Getting started with Flutter - Part 2","metaDescription":"This series is an introduction to Flutter, Google's mobile app SDK. It allows developers to create native interfaces for both Android and iOS. In part two, build a simple demo app and learn the basics of practical Flutter development."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"OCJqPJOQ0eUWmwaYeKqKo","type":"Entry","createdAt":"2018-10-23T12:24:27.087Z","updatedAt":"2018-10-23T12:24:54.238Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with Flutter - Part 1: Introduction to Flutter","url":"introducing-flutter-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}}],"reviewDate":"2018-10-19","description":"This two-part series introduces Flutter, a framework for building cross-platform mobile apps with native interfaces, based on Dart. In part one, examine the pros and cons of Flutter, and compare it to React Native.","prerequisite":"This article assumes no prior knowledge of Flutter or Dart.","content":"In this series, we’ll take a look at a new mobile app development framework called Flutter. \n\nIn the past few years, many tools were developed to help developers create cross-platform apps. This was brought about by the need to release mobile apps that can run on both Android and iOS platforms a lot more quicker. Having two or more teams working on each platform is expensive, and most startups can’t really afford it. That’s why tools like [Cordova](https://cordova.apache.org/), [Ionic](https://ionicframework.com/), [React Native](https://facebook.github.io/react-native/), [Xamarin](https://visualstudio.microsoft.com/xamarin/), [NativeScript](https://www.nativescript.org/), [Fuse](https://www.fusetools.com/), and many others were developed.\n\nIn this part, you’ll learn what it is, how it works, some of its pros and cons, and how it compares to React Native.\n\nIn the second part, you’ll learn how to create an app with Flutter.\n\n## Prerequisites\n\nThis tutorial assumes no previous knowledge of Flutter.\n\n\n## What is Flutter?\n\nFlutter is a new mobile app development SDK from Google. It allows you to develop apps which run on both iOS and Android. Flutter has built-in Material Design and Cupertino widgets which you can use to create beautiful and professional looking apps.\n\nFlutter uses the Dart language for both its SDK and the code written by the developer. \n\nFlutter is a complete framework. This means that everything that you need to build and test a mobile application is included out of the box:\n\n- UI rendering\n- Widget library\n- Navigation\n- State management\n- Hardware APIs\n- Testing\n\n\n## How does Flutter work?\n\nFlutter is built with C, C++, Dart, and Skia, a 2D rendering engine.\n\nEach Flutter app is composed of the Flutter SDK and the Dart code written by the developer. Flutter uses ahead of time (AoT) compiling to compile both the Flutter SDK and the Dart code into a native ARM library. This is then executed by a \"runner\" that handles all the rendering, input and event handling inside the app.\n\nThe diagram below is a high-level representation of the Flutter system architecture. At the very top are the themes for both the [Android (Material Design)](https://flutter.io/widgets/material/) and [iOS (Cupertino)](https://flutter.io/widgets/cupertino/) platforms. As the developer, you wrap [Flutter’s basic widgets](https://flutter.io/widgets/basics/) with these themes depending on which platform you’re working with. \n\nNote that these widgets are Flutter’s own widgets, they don’t actually use the platform’s OEM widgets like React Native or NativeScript does. This brings us to the “Rendering” part in the diagram below. Flutter uses Skia to draw these widgets into the screen. If you’re familiar with [Unity](https://unity3d.com/), Flutter works in a similar way. The underlying framework takes care of the animation, painting, and gestures as the user interacts with the widgets that were rendered. Behind the scenes, Skia takes care of updating what the user sees on the screen. The Flutter SDK and the Dart code written by the developer is executed via the Dart VM.\n\n![flutter-system-architecture](//images.ctfassets.net/1es3ne0caaid/75Zca9ADtK8aGCASu4O6su/be3598840aed81c14c09bbd31838db26/flutter-system-architecture.png)\n\nThat was only a quick overview of how Flutter works. If you’re interested in diving deeper, be sure to check out these technical documents:\n\n- [Flutter system architecture](https://docs.google.com/presentation/d/1cw7A4HbvM_Abv320rVgPVGiUP2msVs7tfGbkgdrTy0I/edit?usp=sharing)\n- [Flutter technical Overview](https://flutter.io/technical-overview/)\n\n\n## Pros and cons of Flutter\n\nIn this section, we’ll take a quick look at some of Flutter’s advantages and disadvantages. These are in terms of developer productivity, widget support, and app performance. Note that these are true at the time of writing this tutorial. Flutter is in constant development, so what’s missing today might already be supported tomorrow.\n\n### Pros\n\n- Flutter is open-source. On top of the dedicated Google team that works on Flutter, everyone is also welcome to [contribute to the development of Flutter](https://github.com/flutter/flutter) and [publish their own packages](https://pub.dartlang.org/flutter). \n- Flutter has great [documentation](https://flutter.io/docs/). Everything you need to know about the Flutter APIs and internals is well-documented.\n- Allows your existing Java, Swift, and Objective-C code to be reused to work with native functionality on iOS and Android.\n- Flutter uses its own widgets, not the one which comes with Android and iOS (OEM widgets). This means we don’t have to deal with implementation details for both platforms.\n- Performance is very close to native performance. Unlike React Native which needs to go through a “bridge” to interact with native components, Flutter has a “runner” which renders the widgets and handles interactions. \n- Flutter comes with nice developer tooling out of the box. \n- Flutter’s interop and plugin system are designed to allow developers to access new mobile OS features and capabilities immediately when Apple or Google releases them.  \n\n### Cons\n\n- Fewer widgets are available for iOS. Flutter’s Cupertino widget library lacks some of the essentials like the [datepicker](https://developer.apple.com/design/human-interface-guidelines/ios/controls/pickers#date-pickers), [stepper](https://developer.apple.com/design/human-interface-guidelines/ios/controls/steppers/), and [progress indicator](https://developer.apple.com/design/human-interface-guidelines/ios/controls/progress-indicators/).\n- Doesn't have much support when it comes to text-editors and IDE's. Currently, it's only compatible with IntelliJ IDEA, Visual Studio Code, and Android Studio. \n- Unlike in React Native, styling is a bit messier in Flutter. Each widget has their own styling which you put right in the rendering code. Each widget can have children so things can get really messy because the structure and styling are mixed together.\n- You can’t transfer your existing CSS knowledge to style your widgets. Though a few concepts still apply (for example, margins and paddings), CSS properties and values are not applicable to Flutter.\n- Not a lot of third-party library support. If you need to use services like [Auth0](https://auth0.com/), [Pusher](https://pusher.com/), [Twilio](https://www.twilio.com/), or [Realm](https://realm.io/), you will most likely have to create your own custom integration.\n- No built-in support for common functionality such as maps and camera. Though you might find someone who’s currently working on it on the [Dart packages website](https://pub.dartlang.org/flutter).\n- Flutter hasn't been tested on tablets so there might be some UI issues on tablets. At the time of writing this article, tablet support isn’t really a priority so be sure to check out this [issue](https://github.com/flutter/flutter/issues/12310) to keep track of tablet support if you plan on developing for tablets.\n\n\n## How does Flutter compare to React Native?\n\nThe most popular cross-platform app development framework today is React Native, so developers trying to check out Flutter will naturally come to ask this question: “How does Flutter compare to React Native?”. \n\nIf you do a quick Google search, you will come across articles which compare the two, and probably with some other framework like Ionic, NativeScript, and Xamarin. There are probably others, but the main question you’re really asking is: “is Flutter a viable solution for cross-platform app development?”. And that’s why I chose React Native as the framework to compare with Flutter. Because it’s already been battle-tested, [lots of well-known companies are using it](https://facebook.github.io/react-native/showcase.html) and it has a huge community behind it.\n\nWe will be using the following criteria for comparing the two:\n\n\n- Developer Productivity\n- User Experience\n- Hardware API Support\n\nThe criteria above are arranged according to its level of importance. Developer Productivity and User Experience are more important while Hardware API Support is less important. Note that this prioritization is hugely based on my own personal experience as well as the research that went into writing this article.\n\n\n### Developer productivity\n\nWe already know that both React Native and Flutter allow us to write code once and it will run everywhere. If you have worked with React Native in a fair amount of time, you already know that this isn’t completely true. You still have to deal with configuration files (`Podfile`, `build.gradle`) on both platforms, you still have to deal with the different UI implementations, and work with either Java, Objective-C, or Swift code whenever you need to work with native functionality.\n\nIn Flutter, things are a bit different. You still have the `android` and `ios` folders in your project but most of the time you won’t really need to touch the files in there. \n\nHow fast the hot reload is is another important factor. Nothing kills productivity more than having to wait a minute for one simple change to show up in the live preview. Both React Native and Flutter have a hot reload feature, but the one in Flutter is faster. \n\nOther than that, there are other areas which developer productivity depends on:\n\n- Documentation\n- Learning curve\n- Community\n- Tooling\n\n#### Documentation\n\nThe first thing that developers will look at when learning a new technology is the documentation, so it plays a big role in developer productivity. Even advanced users will need to use it from time to time when they’re working with a new API.\n\nIf you give yourself a few minutes to scan through the documentation of React Native and Flutter, you will quickly see the effort that went into creating the documentation. The documentation is not just about describing the different APIs, functionalities, components and other features that are available in the framework. It’s also about making it easy for both newcomers and advanced users to find what they need to know about.\n\nReact Native’s documentation is very shallow, it teaches you one thing and then moves on to the next. It doesn’t allow you to easily dig deeper into one specific concept. If you’re a React Native developer, you might have noticed that there are lots of poorly documented (or not documented at all) APIs. So you have to look for it somewhere else, or just go on with your life not knowing that such capability (or bug) exists. \n\nFlutter’s documentation is very easy to use, all the important concepts and features that you need to know are visible in their sidebar. If you want to dig deeper, they also have API documentation. For example, all the classes that are available for constructing widgets with the material library are well-documented. It includes information about what the constructor expects, which properties you can pass in. Best of all, their search has auto-suggest, this is very helpful if you’re not exactly sure what you’re looking for.\n\nThey even take one step further with their Codelabs section, where it teaches the beginners how to create their very first Flutter app.\n\n#### Learning curve\n\nThe learning curve is the rate at which developers can learn a new technology. Though we can’t disregard the fact that previous experience can make the learning curve less steep. With that in mind, we’ll consider that developers can have previous experience with web technology, JavaScript, CSS, and programming as well.\n\nThis is where React Native takes the crown. Developers who have worked with JavaScript, CSS, and especially React, will easily feel at home when working with React Native. Their experience in creating components, stylesheets, and web APIs will make it easier to pick up React Native. All they have to learn about are the differences between the web and mobile environment, hardware APIs, and the third-party modules that they need to use. After that, they should be pretty productive when working with React Native.\n\nOn the other hand, Flutter uses Dart, a not so popular technology (according to the [Stack Overflow developer survey 2018](https://insights.stackoverflow.com/survey/2018/) at least), as the language for writing Flutter apps. But if you’ve worked with JavaScript before, Dart syntax should be pretty familiar. \n\nThey also introduced the idea that everything is a widget, and that includes adding styles to other widgets:\n\n``` dart\n    new Padding(\n      padding: new EdgeInsets.all(8.0),\n      child: const Card(child: const Text('Hello World!')),\n    )\n```\n\nIn the code above, we’re adding an 8px padding all around a card widget. Just by looking at this code, you’ll see that you can’t really transfer your existing CSS knowledge in styling Flutter apps, although basic concepts like margin and padding still apply.\n\nIn the beginning, most of your time will be spent on familiarizing yourself with how to build widgets, learning the Dart syntax for the different Flutter APIs, and the tooling around the Flutter framework.\n\nOverall, Flutter’s learning curve is only steep in the beginning, but it should reach a plateau once you get the basic concepts down.\n\n#### Community\n\nWithout further explanation, we already know who the winner is, it’s React Native. This is mainly because of two facts:\n\n\n- React Native entered the scene first. It was initially released in 2015 while Flutter is only released in 2017.\n- JavaScript and React developers who want to build mobile apps are naturally drawn to the technology. \n\nEven though this is the case, let’s take a moment to examine how well Flutter is doing compared to React Native when it comes community and overall public interest:\n\n**React Native**\n\n- GitHub stars: [68k](https://discordapp.com/invite/reactiflux)\n- GitHub issues: [13.5k](https://github.com/facebook/react-native/issues)\n- Stack Overflow: [37k questions](https://stackoverflow.com/questions/tagged/react-native)\n- Discord group: [35k members](https://discordapp.com/invite/reactiflux)\n- reactnative reddit: [15.6k subscribers](https://www.reddit.com/r/reactnative/)\n\n**Flutter**\n\n- GitHub stars: [36k](https://github.com/flutter/flutter)\n- GitHub issues: [12.5k issues](https://github.com/flutter/flutter/issues)\n- Stack Overflow: [5k questions](https://stackoverflow.com/questions/tagged/flutter)\n- Gitter: [5k members](https://gitter.im/flutter/flutter)\n- FlutterDev reddit: [5.8k subscribers](https://www.reddit.com/r/FlutterDev/)\n\nWith the numbers above, you can really see the difference between Flutter’s community and React Native. That said, those numbers shouldn’t be underestimated as it’s expected to grow as more and more people realizes the potential of Flutter.\n\nIf we go over at [Google Trends](https://trends.google.com/trends/explore?q=flutter,react%20native), we can see that the overall public interest with React Native and Flutter is climbing up at a steady pace in the past 12 months. Flutter peaked at around the first quarter of 2018. This suggests that companies and independent developers worldwide are checking out Flutter as an alternative for their mobile app development needs:\n\n![flutter-vs-react-trends](//images.ctfassets.net/1es3ne0caaid/5Pu7yMKCjY4I2SKosQKK4K/1348c71249f345f50a3be57ac9699676/flutter-vs-react-trends.png)\n\n#### Tooling\n\nThe availability of tools that makes the work of a developer easier and more pleasing plays a huge role in their productivity as well. Tooling includes:\n\n\n- **Text-editor and IDE support** - code completion, debugger, simulator integration.\n- **Command-line tools** - for checking system requirements, creating a new project, hot reload.\n- **Libraries and UI kits** - for implementing different kinds of functionality like payment processing and social login.\n- **Third-party services** - continuous integration, error reporting.\n\nThis is another area where the huge community support in React Native really trumps Flutter. \n\nReact Native is supported in popular text-editors like Atom, Sublime Text, WebStorm, Visual Studio Code. While Flutter is only supported in IntelliJ IDEA, Visual Studio Code, and Android Studio.\n\nFor command-line tools, while Flutter only has its built-in CLI, it comes packed with a lot of features. Some of the most useful ones include `doctor` which checks if your machine has all the necessary software to build apps with Flutter, `create`  for generating a new Flutter app, `install`  for installing Flutter packages and `build` for building the app:\n\n![flutter-cli](//images.ctfassets.net/1es3ne0caaid/93ECCB6DIW2aMgOuYkIys/3c238654c51f3e6ba57f9225451a287b/flutter-cli.png)\n\nThis is a far cry from what the React Native CLI offers as it only allows you to generate a new project, link native modules, and run the development server. But even though this is the case, the community compensates by creating tools like the [Ignite CLI](https://github.com/infinitered/ignite) and [Haul](https://callstack.github.io/haul/).\n\nIn terms of libraries, React Native taps into the huge repository of [JavaScript packages over at npm](https://www.npmjs.com/). Existing React packages can be easily converted to work with React Native, while libraries that don’t need to access native features can be used immediately (for example, MomentJS).\n\nOn the other hand, Flutter taps into the [Dart package repository](https://pub.dartlang.org/flutter) for its third-party library needs. Unlike React Native, these packages will often need to be written from scratch to utilize the Dart syntax as well as work with the APIs exposed by the Flutter SDK.\n\nFor third-party services, they usually have a JavaScript client that works with their HTTP API. Again, React Native has the advantage. Services like Sentry, Pusher, and Twilio all have JavaScript clients that work with the web. Making those clients work inside the React Native environment is fairly straightforward.\n\nOverall, the winner in the developer productivity criteria is React Native. The only sub-criteria where Flutter won is the documentation, while React Native took all the rest. \n\n**Winner:** React Native \n\n\n### User experience\n\nWhen it comes to User Experience, Flutter has the clear advantage because it’s drawing the UI directly on the native platform’s canvas. As explained earlier in the section on how Flutter works, this is theoretically faster than how React Native works, which is to communicate with the native platform via a “bridge”.\n\nI can’t really present you with hard numbers, but someone has already done the benchmarking before. If you want to know the details, be sure to check out this tutorial: [Examining performance differences between Native, Flutter, and React Native mobile development](https://robots.thoughtbot.com/examining-performance-differences-between-native-flutter-and-react-native-mobile-development). The results in that tutorial say that React Native uses more CPU while Flutter uses more memory. The difference is only small for both instances, but the app used as an example is a simple one (a stopwatch app). What we don’t know is whether the usage continue to rise at the same rate as the app demands more memory and CPU from the device.\n\nUsing those results, I’m not going to give credit to either. CPU and memory usage should be both efficient. But then again, it all depends on the app that you’re building. If your app requires a certain CPU intensive task to finish at the least amount of time then CPU efficiency is the least of your concern, because you need all that juice to complete the task faster. On the other hand, if you expect your users to be running your app along with others, then you should prioritize CPU efficiency instead. \n\n**Winner:** None\n\n\n### Hardware API support\n\nWhen it comes to hardware capability support, both React Native and Flutter come with a decent set of hardware APIs out of the box. \n\nEven though React Native doesn’t have support for camera, Bluetooth, and biometrics, developers who need them usually create a native module and upload them on GitHub. \n\nIn Flutter, most hardware APIs that are needed for most apps are already included in their built-in collection of APIs. If you need something that isn’t already supported, you can search for it on the [Dart packages website](https://pub.dartlang.org/flutter/). Most likely, someone has already started developing a package for it. But just like in React Native, some packages only support one platform.\n\nYet again, React Native wins this round because of the sheer number of hardware capabilities being exposed by other developers. Even though some of those have bugs or have poor support, it’s still better than implementing something from scratch.\n\n**Winner:** React Native\n\nBased on what you’ve read, you already know that React Native is the overall winner. That’s already expected because the criteria in which it won is closely tied to the number of developers using it. React Native came out first, and it has the advantage of the whole JavaScript and React community behind it. \n\n\n## Further reading\n\nIf you want to learn more about Flutter, here a few tutorials that can help you understand it further:\n\n\n- [What’s Revolutionary about Flutter](https://hackernoon.com/whats-revolutionary-about-flutter-946915b09514)\n- [Why we chose Flutter and how it’s changed our company for the better](https://medium.com/@matthew.smith_66715/why-we-chose-flutter-and-how-its-changed-our-company-for-the-better-271ddd25da60)\n- [Flutter FAQ](https://flutter.io/faq/)\n\n\n## Conclusion\n\nThat’s it! In this tutorial, we’ve taken a quick look at Flutter, a promising new mobile app development from Google. You learned some of its pros and cons, and how it compares to React Native. \n\nIn my own opinion, even though Flutter isn’t as battle-tested as React Native, I think it’s production-ready. The only downside is the initial developer productivity. React Native’s learning curve isn’t as steep as Flutter, especially for developers who already have experience in JavaScript and React. Furthermore, because of the huge community behind React Native, there are lots of third-party packages already written for integrating with popular services such as Pusher, Auth0, and Realm.\n\nAt the end, which framework you choose all depends on whether you can afford to invest more time and resources in learning Flutter or not. Flutter definitely has a lot of potential, and it deserves to be checked out by native and cross-platform developers alike.\n\nStay tuned for the second part of this tutorial series where we’ll take a look at the basics of creating an app with Flutter!","metaTitle":"Getting started with Flutter - Part 1","metaDescription":"This series is an introduction to Flutter, Google's mobile app SDK. It allows developers to create native interfaces for both Android and iOS. In part one, examine the pros and cons of Flutter, and compare it to React Native."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NOqW8xsqIaiQWmKS6kwOg","type":"Entry","createdAt":"2018-09-17T16:19:28.957Z","updatedAt":"2018-09-17T16:19:28.957Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with ConstraintLayout in Kotlin - Part 5: building a simple app using ConstraintLayout","url":"constraintlayout-kotlin-part-5","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/constraint-layout-demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}}],"reviewDate":"2018-09-17","description":"This five-part series takes a detailed look at the ConstraintLayout feature in Android. You will learn about its key features, and build two sample apps in Kotlin. In part five, build on what you've learned to create a sample application.","prerequisite":"You will need Android Studio 3+ installed on your machine. Familiarity with Android development will be helpful. You should have completed the previous parts of the series.","content":"In the previous parts of the series, we looked into `ConstraintLayout` and how you can use them to develop Android applications. \n\nIn this tutorial, we will use what we learned to create a sample application using `ConstraintLayout`. It is expected that you have completed the previous four parts of the series. We will replicate the design below using `ConstraintLayout`.\n\n![constraintLayout-5-demo](//images.ctfassets.net/1es3ne0caaid/141fDhrthU2mKI422kGAw0/913c644e09b132fa8fa2f90d2d655771/constraintLayout-5-demo.png)\n\n## Prerequisites\n\nTo follow along in this part of the series you must have:\n\n\n- Completed the previous parts of the series.\n- Android Studio installed on your machine. You can check [here](https://developer.android.com/studio/index.html) for the latest stable versions available. A minimum version of 3.0 is recommended.\n- A basic knowledge on Android development and the ability to navigate through the Android Studio IDE.\n\n\n## Building our app layout\n\nTo get started, create your Android project in Android Studio. In the wizard, enter your project name, let’s name it ConstraintLayoutSample. Enter your package name for the application and select a minimum SDK of 19. Choose an **Empty Activity** template and leave the name as `MainActivity`. After this, Android studio will build your project and prepare it for you.\n\nDuring the course of building this application, we will use a circular image view and we need a library for this. \n\nOpen your app `build.gradle` file and add this dependency:\n\n``` gradle\n    implementation 'de.hdodenhof:circleimageview:2.2.0'\n    implementation 'com.android.support:design:28.0.0-rc01'\n```\n\nGo ahead and sync your files after adding it.\n\nWe will implement the design in the `MainActivity` layout file. Open the `activity_main.xml` and replace it with this:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/layout/activity_main.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout \n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\"\u003e\n    \n        [...]\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nAbove, we added the opening and closing tags of the `ConstraintLayout`. Within it, we will place our other views.\n\nThe first element we will add is the image of the artist. The image is [included in our repository](https://github.com/neoighodaro/constraint-layout-demo/blob/master/Part5/app/src/main/res/drawable/avicii.jpg) in the drawable folder as `avicii.jpg`. Paste this snippet inside the `ConstraintLayout` tag replacing any previous default views that may have existed there:\n\n``` xml\n    \u003cImageView\n        android:id=\"@+id/avinciiImage\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"260dp\"\n        android:scaleType=\"fitXY\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:srcCompat=\"@drawable/avicii\" /\u003e\n```\n\nAs seen above, the image is constrained to the top of the layout, the start, and the end. The image has an height of `260dp` and a `scaleType` of `fitXY`, which means it stretches the image to fit the size of the `ImageView`. \n\nNext, we will add a `View`, which we can customise to give the image an orange overlay. In the same file, paste the following code:\n\n``` xml\n    \u003cView\n        android:id=\"@+id/view\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"260dp\"\n        android:alpha=\"0.7\"\n        android:background=\"#FF602D\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"@id/avinciiImage\" /\u003e\n```\n\nThe view has the same height as the image and similar constraints. It has an orange background whose opacity is reduced slightly using the `alpha` attribute. This view is constrained to the top of the image.\n\nNotice, from the design, that the elements on the left side of the layout all start from the same point, so, instead of applying margins to each, we will use a guideline. \n\nAdd this snippet to your layout:\n\n``` xml\n    \u003candroid.support.constraint.Guideline\n        android:id=\"@+id/guideline\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        app:layout_constraintGuide_begin=\"20dp\" /\u003e\n```\n\nAbove, we have a starting guideline of `20dp`. Since all the elements on the right end at the same point also, we will apply a guideline for that too. \n\nTo do this, add the following to your layout `XML`:\n\n``` xml\n    \u003candroid.support.constraint.Guideline\n        android:id=\"@+id/guideline2\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        app:layout_constraintGuide_end=\"20dp\" /\u003e\n```\n\nFinally, let’s add a horizontal guideline to the layout. To do this, add the following code to the XML layout file:\n\n``` xml\n    \u003candroid.support.constraint.Guideline\n        android:id=\"@+id/guideline4\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\"\n        app:layout_constraintGuide_begin=\"20dp\" /\u003e\n```\n\nAt this point, your design should look like this:\n\n![constraintLayout-5-stage-1](//images.ctfassets.net/1es3ne0caaid/5EYNBpK9RSuciu8EqCs0WU/db7e3e75a0b529b9bf9c742ce203f91d/constraintLayout-5-stage-1.png)\n\nLet’s start adding other views. \n\nSwitch back to the text view by clicking **Text** and then add the following `ImageView` after the guideline we added above:\n\n``` xml\n    \u003cImageView\n        android:id=\"@+id/imageView5\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintStart_toStartOf=\"@+id/guideline\"\n        app:layout_constraintTop_toTopOf=\"@+id/guideline4\"\n        app:srcCompat=\"@drawable/ic_close\" /\u003e\n```\n\nAbove, we used a vector drawable file and we referenced it using `app:srcCompat`. The image is constrained to the top guideline and the left guideline. \n\nNext, let’s create the vector drawable file we referenced above. Click  **File \u003e New \u003e Vector Asset**. In the vector modal, set the name to `ic_close`, and click the **Clip Art** button then search for the **close** icon. Next, set the color of the icon to `#ffffff` then click  **Next \u003e Finish**.\n\n![constraintLayout-5-config-asset](//images.ctfassets.net/1es3ne0caaid/1tQKc9RwwUYiQMgSUAwIys/f5b206464ad4eecba2012e4710e3d114/constraintLayout-5-config-asset.png)\n\nNext, let’s add the `TextView` to hold the name of the artist:\n\n``` xml\n    \u003cTextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Avincii\"\n        android:textAppearance=\"@style/Base.TextAppearance.AppCompat.Headline\"\n        android:textColor=\"#FFF\"\n        android:textSize=\"32sp\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/avinciiImage\"\n        app:layout_constraintStart_toStartOf=\"@+id/guideline\"\n        app:layout_constraintTop_toTopOf=\"@+id/guideline4\" /\u003e\n```\n\nIn the design, this text is close to the center between the top guideline and the bottom of the image. So we added a top and bottom constraint to the view. \n\nNext, let’s add the smaller text under the artist name. Add this snippet to your layout:\n\n``` xml\n    \u003cTextView\n        android:id=\"@+id/textView2\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"5dp\"\n        android:text=\"Trance/ House\"\n        android:textColor=\"#FFF\"\n        app:layout_constraintStart_toStartOf=\"@+id/guideline\"\n        app:layout_constraintTop_toBottomOf=\"@+id/textView\" /\u003e\n```\n\nFor the **START RADIO** text add this snippet:\n\n``` xml\n    \u003cTextView\n        android:id=\"@+id/textView3\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"START RADIO\"\n        android:textColor=\"#FFF\"\n        android:textSize=\"18sp\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/avinciiImage\"\n        app:layout_constraintStart_toStartOf=\"@+id/guideline\"\n        app:layout_constraintTop_toBottomOf=\"@+id/textView2\" /\u003e\n```\n\nThis view is constraint to the bottom of the image, the starting left guideline and the bottom of the `TextView` added before this. \n\nAfter that, add the **+FOLLOW** text like this:\n\n``` xml\n    \u003cTextView\n        android:id=\"@+id/textView4\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"24dp\"\n        android:text=\"+FOLLOW\"\n        android:textColor=\"#FFF\"\n        android:textSize=\"18sp\"\n        app:layout_constraintStart_toEndOf=\"@+id/textView3\"\n        app:layout_constraintTop_toTopOf=\"@+id/textView3\" /\u003e\n```\n\nThis `TextView` is constrained such that it starts at the end of the start radio text. It is also constrained to the top of the start radio `TextView`, which means, its vertically aligned with it.\n\nNext, let’s add the **Top tracks** text and the play icon using chains. Add this to your layout:\n\n``` xml\n    \u003cTextView\n        android:id=\"@+id/textView5\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"20dp\"\n        android:text=\"Top tracks\"\n        android:textSize=\"16sp\"\n        app:layout_constraintEnd_toStartOf=\"@+id/imageView6\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintHorizontal_chainStyle=\"spread_inside\"\n        app:layout_constraintStart_toEndOf=\"@+id/guideline\"\n        app:layout_constraintStart_toStartOf=\"@+id/guideline\"\n        app:layout_constraintTop_toBottomOf=\"@+id/view\" /\u003e\n    \n    \u003cImageView\n        android:id=\"@+id/imageView6\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginEnd=\"8dp\"\n        android:layout_marginRight=\"8dp\"\n        android:layout_marginTop=\"8dp\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/textView5\"\n        app:layout_constraintEnd_toStartOf=\"@+id/guideline2\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toEndOf=\"@+id/textView5\"\n        app:layout_constraintTop_toTopOf=\"@+id/textView5\"\n        app:srcCompat=\"@drawable/ic_play_circle\" /\u003e\n```\n\nThese two views are chained using the `spread_inside` chain mode. This means, they are attached to the end of the chain, in this case, the guidelines. If we had more than two views, the views inside would be spread evenly.\n\nNext, let’s create the vector drawable file we referenced above. Click  **File \u003e New \u003e Vector Asset**. In the vector modal, set the name to `ic_play_circle`, and click the Clip Art button then search for the **play circle outline** icon. Next, set the color of the icon to `#000` then click **Next \u003e Finish**.\n\nNext, we lets add more guidelines. Add this to your layout:\n\n``` xml\n    \u003candroid.support.constraint.Guideline\n        android:id=\"@+id/guideline5\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        app:layout_constraintGuide_percent=\"0.2\" /\u003e\n    \n    \u003candroid.support.constraint.Guideline\n        android:id=\"@+id/guideline6\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        app:layout_constraintGuide_percent=\"0.85\" /\u003e\n```\n\nAs we mentioned earlier, guidelines prevent repetitive margins. For the guidelines we created above, we opted to use percent. \n\nYour layout should look like this now:\n\n![constraintLayout-5-stage-2](//images.ctfassets.net/1es3ne0caaid/5KGb9mCIScas0G8IEE2yAa/3dbc8a799ea82f2e176f8befc9e11531/constraintLayout-5-stage-2.png)\n\nThe first guideline is placed at the 20% of the layout and the second at 85%.\n\nNext, let’s add an image for the first track as seen on the design we are implementing. We are using a circular image view. Add this to your snippet:\n\n``` xml\n    \u003cde.hdodenhof.circleimageview.CircleImageView \n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:id=\"@+id/profile_image\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"50dp\"\n        android:layout_marginTop=\"8dp\"\n        android:src=\"@drawable/album\"\n        app:civ_border_color=\"#FF000000\"\n        app:civ_border_width=\"2dp\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/textView7\"\n        app:layout_constraintEnd_toStartOf=\"@+id/guideline5\"\n        app:layout_constraintStart_toStartOf=\"@+id/guideline\"\n        app:layout_constraintTop_toTopOf=\"@+id/textView6\" /\u003e\n```\n\nThe image above is constrained to the start guideline and it ends before the start of the `0.2` percent guideline. It is also constrained to the top tracks text. \n\nNext, let’s add the name of the first track:\n\n``` xml\n    \u003cTextView\n        android:id=\"@+id/textView6\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"20dp\"\n        android:text=\"Wake me up\"\n        android:textColor=\"#232323\"\n        android:textSize=\"15sp\"\n        android:textStyle=\"bold\"\n        app:layout_constraintEnd_toStartOf=\"@+id/guideline6\" \n        android:layout_marginStart=\"10dp\"\n        app:layout_constraintStart_toStartOf=\"@+id/guideline5\"\n        app:layout_constraintTop_toBottomOf=\"@+id/textView5\" /\u003e\n```\n\nThis textview is constrained to the start of the `0.2` percent guideline and a start margin of `10dp` was also added. It’s also constrained to end at the `0.85` percent guideline, and finally, it’s constrained to the bottom of top tracks text.\n\nNext, let’s add a text under the song title:\n\n``` xml\n    \u003cTextView\n        android:id=\"@+id/textView7\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"4dp\"\n        android:text=\"True\"\n        android:layout_marginStart=\"10dp\"\n        app:layout_constraintEnd_toStartOf=\"@+id/guideline6\"\n        app:layout_constraintStart_toStartOf=\"@+id/guideline5\"\n        app:layout_constraintTop_toBottomOf=\"@+id/textView6\" /\u003e\n```\n\nWe then add an horizontal line as seen in the design:\n\n``` xml\n    \u003cView\n        android:id=\"@+id/view2\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"0.5dp\"\n        android:layout_marginTop=\"4dp\"\n        android:background=\"#232323\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"@+id/guideline5\"\n        app:layout_constraintTop_toBottomOf=\"@+id/profile_image\" /\u003e\n```\n\nNext we need to add options icon for the track as seen in the design. To do this, add the following code to the layout file:\n\n``` xml\n    \u003cImageView\n        android:id=\"@+id/imageView7\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"0dp\"\n        android:layout_marginEnd=\"8dp\"\n        android:layout_marginStart=\"8dp\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/textView7\"\n        app:layout_constraintEnd_toStartOf=\"@+id/guideline2\"\n        app:layout_constraintStart_toStartOf=\"@+id/guideline6\"\n        app:layout_constraintTop_toTopOf=\"@+id/textView6\"\n        app:srcCompat=\"@drawable/ic_more_vert\" /\u003e\n```\n\nThis icon is aligned to the bottom of the **True** text. That means it ends on the same vertical position as the text. It also starts on the same vertical position as the title of the song - **Wake me up**.\n\nNext, let’s create the vector drawable file we referenced above. Click  **File \u003e New \u003e Vector Asset**. In the vector modal, set the name to `ic_more_vert`, and click the Clip Art button then search for the **more vert** icon. Next, set the color of the icon to `#000` then click **Next \u003e Finish**.\n\nAs seen in the design, we have two tracks. Since they have the same design, we just duplicated and made few constraint adjustments. \n\nAdd this to your layout:\n\n``` xml\n    \u003cde.hdodenhof.circleimageview.CircleImageView \n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:id=\"@+id/profile_image2\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"50dp\"\n        android:layout_marginTop=\"8dp\"\n        android:src=\"@drawable/album\"\n        app:civ_border_color=\"#FF000000\"\n        app:civ_border_width=\"2dp\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/textView9\"\n        app:layout_constraintEnd_toStartOf=\"@+id/guideline5\"\n        app:layout_constraintStart_toStartOf=\"@+id/guideline\"\n        app:layout_constraintTop_toTopOf=\"@+id/textView8\" /\u003e\n    \n    \u003cTextView\n        android:id=\"@+id/textView8\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"20dp\"\n        android:text=\"Levels\"\n        android:textColor=\"#232323\"\n        android:textSize=\"15sp\"\n        android:textStyle=\"bold\"\n        android:layout_marginStart=\"10dp\"\n        app:layout_constraintEnd_toStartOf=\"@+id/guideline6\"\n        app:layout_constraintHorizontal_bias=\"0.0\"\n        app:layout_constraintStart_toStartOf=\"@+id/guideline5\"\n        app:layout_constraintTop_toBottomOf=\"@+id/view2\" /\u003e\n    \n    \u003cTextView\n        android:id=\"@+id/textView9\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"4dp\"\n        android:text=\"Stories\"\n        android:layout_marginStart=\"10dp\"\n        app:layout_constraintEnd_toStartOf=\"@+id/guideline6\"\n        app:layout_constraintStart_toStartOf=\"@+id/guideline5\"\n        app:layout_constraintTop_toBottomOf=\"@+id/textView8\" /\u003e\n    \n    \u003cView\n        android:id=\"@+id/view3\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"0.5dp\"\n        android:layout_marginTop=\"4dp\"\n        android:background=\"#232323\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"@+id/guideline5\"\n        app:layout_constraintTop_toBottomOf=\"@+id/profile_image2\" /\u003e\n    \n    \u003cImageView\n        android:id=\"@+id/imageView8\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"0dp\"\n        android:layout_marginEnd=\"8dp\"\n        android:layout_marginLeft=\"8dp\"\n        android:layout_marginRight=\"8dp\"\n        android:layout_marginStart=\"8dp\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/textView9\"\n        app:layout_constraintEnd_toStartOf=\"@+id/guideline2\"\n        app:layout_constraintStart_toStartOf=\"@+id/guideline6\"\n        app:layout_constraintTop_toTopOf=\"@+id/textView8\"\n        app:srcCompat=\"@drawable/ic_more_vert\" /\u003e\n```\n\nFinally, let’s add the `FloatingActionButton` like so:\n\n``` xml\n    \u003candroid.support.design.widget.FloatingActionButton\n      android:id=\"@+id/floatingActionButton\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:layout_marginBottom=\"16dp\"\n      android:clickable=\"true\"\n      app:elevation=\"16dp\"\n      app:backgroundTint=\"#FF602D\"\n      app:layout_constraintBottom_toBottomOf=\"parent\"\n      app:layout_constraintEnd_toStartOf=\"@+id/guideline2\"\n      app:srcCompat=\"@drawable/ic_shuffle\" /\u003e\n```\n\nNext, let’s create the vector drawable file we referenced above. Click **File \u003e New \u003e Vector Asset**. In the vector modal, set the name to `ic_shuffle`, and click the **Clip Art** button then search for the **shuffle** icon. Next, set the color of the icon to `#fff` then click **Next \u003e Finish**.\n\nYou can remove the application toolbar by updating it in your `styles.xml` file:\n\n``` xml\n    \u003cresources\u003e\n        \u003cstyle name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\"\u003e\n            \u003citem name=\"windowActionBar\"\u003efalse\u003c/item\u003e\n            \u003citem name=\"windowNoTitle\"\u003etrue\u003c/item\u003e\n        \u003c/style\u003e\n    \u003c/resources\u003e\n```\n\nNow, If you run your app, you should see this:\n\n![constraintLayout-5-demo](//images.ctfassets.net/1es3ne0caaid/141fDhrthU2mKI422kGAw0/913c644e09b132fa8fa2f90d2d655771/constraintLayout-5-demo.png)\n\n\n## Conclusion\n\nThis ends our constraint layout part series. In this series, we have learned about Android’s most powerful layout system. In this part, we went through the process of building a layout from ground up using `ConstraintLayout`. \n\nYou can find the repository for this project [here](https://github.com/neoighodaro/constraint-layout-demo).","metaTitle":"Getting started with ConstraintLayout in Kotlin- Part 5","metaDescription":"This five-part series takes a detailed look at the ConstraintLayout feature in Android. You will learn about its key features, and build two sample apps in Kotlin. In part five, build on what you've learned to create a sample application."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6aeYodNpMk6W68cAqSWkGG","type":"Entry","createdAt":"2018-09-13T19:04:29.217Z","updatedAt":"2018-09-13T19:04:29.217Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with ConstraintLayout in Kotlin - Part 4: using MotionLayout for animations","url":"constraintlayout-kotlin-part-4","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/constraint-layout-demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}}],"reviewDate":"2018-09-13","description":"This five part series takes a detailed look at the ConstraintLayout feature in Android. You will learn about its key features, and build two sample apps in Kotlin. In part four, explore using animations with ConstraintLayout.","prerequisite":"You will need Android Studio 3+ installed on your machine. Familiarity with Android development will be helpful. You should have completed the previous parts of the series.","content":"In the previous part of this series, we talked about helpers available to you when using `ConstraintLayout`. In this part, we will focus on using animations when working with `ConstraintLayout`s.\n\nWe all love animations, but building animations on Android appears daunting at first. Many times we have to settle for less than what we want or none at all. Before now, Android already offered various ways of implementing animations in our apps:\n\n\n- [View Animations](https://developer.android.com/guide/topics/graphics/view-animation): these were used specifically to animate the visual properties of views like opacity and transparency. This is the initial way animations were implemented on Android.\n- [Property Animations](https://developer.android.com/guide/topics/graphics/prop-animation): this helps us to alter properties of `view objects` to perform various view animations. View properties that can be altered include its translate, scale, and rotate properties.\n- [Drawable Animations](https://developer.android.com/reference/android/graphics/drawable/AnimationDrawable): this uses an XML file to specify a list of drawables and runs them one after another to make an animation.\n- [Layout Transitions](https://developer.android.com/reference/android/animation/LayoutTransition): this enables us to easily implement fade/move/resize animations when items are added to or removed from a `ViewGroup`, usually with just one line of code.\n- [ConstraintLayout](https://developer.android.com/reference/android/support/constraint/ConstraintSet) [with](https://developer.android.com/reference/android/support/constraint/ConstraintSet) `[ConstraintSet](https://developer.android.com/reference/android/support/constraint/ConstraintSet)`[s](https://developer.android.com/reference/android/support/constraint/ConstraintSet) - this gives us the ability to animate between two sets of constraints through the [TransitionManager](https://developer.android.com/reference/android/transition/TransitionManager.html)). The `TranstionManager` helps manage transitions when there is a change of scene. A scene represents either the entire user interface or a subset of the layout represented by a `ViewGroup`.\n\n\n\n## Prerequisites\n\nFor you to follow along in the entire series, you need to have the following requirements:\n\n\n- Completed previous parts of the series.\n- Android Studio (v3.0 or higher) installed on your machine. [Download here](https://developer.android.com/studio/).\n- Ability to navigate the Android Studio IDE.\n- Ability to use the layout editor provided by the Android Studio IDE.\n- A basic understanding of Android development, especially layouts.\n\nLet’s get started.\n\n\n## The MotionLayout\n\nCompared to the other methods of creating animations on Android, `MotionLayout` offers us a lot more flexibility in specifying animations for our apps. \n\nA `MotionLayout` is actually a subclass of the `ConstraintLayout` and allows you to make animations between two sets of constraints. As we already know, constraints are the building blocks for the layout, and every view must have constraints. \n\nThe `MotionLayout` is also fully declarative. This means you can easily describe, in your `XML` file, how a transition should occur without any Java or Kotlin code. It can also animate any property of the system, not just layout attributes. \n\nAs shown in the image below, the background color of the info button crossfades between the image being animated:\n\n![constraintLayout-4-crossfade-demo](//images.ctfassets.net/1es3ne0caaid/20pRdrddGoYu8eWeugG6gk/469b1c2399ed10a23778b9e534e0e948/constraintLayout-4-crossfade-demo.gif)\n\nFinally `MotionLayout` supports touch events and keyframes. This makes it possible to easily customize transitions to your own needs. In later parts of this article, we will see how this works using some examples.\n\n### Difference between ConstraintLayout and MotionLayout\n\nAlthough `MotionLayout` is a part of `ConstraintLayout`, there are some key differences. One key difference between `ConstraintLayout` and `MotionLayout`, at the `XML` level, is that the description of what `MotionLayout` will do is **not** necessarily contained in the same layout file. It is instead kept in a separate `XML` file, a `MotionScene`, that it references. This description will take precedence over the description in the layout file.\n\nThis approach is very helpful as the layout file will contain only the views and their properties  and not their positioning or movement.\n\nThe `MotionLayout` is only available as part of the `ConstraintLayout` version 2.0 and above. As at the time of writing this article, this version of the library is still in its alpha stage. \n\nTo add support for `MotionLayout` on your project, add the following code to your app modules `build.gradle` file:\n\n``` gradle\n    dependencies {\n        // [...]\n        \n        implementation 'com.android.support.constraint:constraint-layout:2.0.0-alpha1'\n        \n        // [...]\n    }\n```\n\nSync your gradle files after that to make the library available for use.\n\n### Making a simple animation with MotionLayout\n\nBefore diving deep into making animations with `MotionLayout`, it is important we understand the purpose of the motion. The [material design guideline](https://material.io/design/introduction/) says:\n\n\n\u003e Motion provides meaning. Objects are presented to the user without breaking the continuity of experience even as they transform and reorganize.\n\nFor our very first animation with `MotionLayout`, we are going to try to achieve the animation below. The `ImageView` increases in size as it moves to the bottom of the layout.\n\n![constraintLayout-4-image-size](//images.ctfassets.net/1es3ne0caaid/1IUIB9B5U4um8gEkieOMyi/5338787d5a64bb6227cfab4a316a7115/constraintLayout-4-image-size.gif)\n\nIn order to achieve this animation, we have to create two layout files, one for the initial position of the image and another for the final position of the image.\n\nFor the initial position of the image, our layout looks like this:\n\n![constraintLayout-4-initial-position](//images.ctfassets.net/1es3ne0caaid/3OMonpMQbYaUAGmKAAKuES/3f4c6fdedf08dadc0552e788d5aca9ff/constraintLayout-4-initial-position.png)\n\nThis layout was named: `motion_one_img_start`. And this is how the `XML` code looks like:\n\n``` xml\n    \u003c!-- File: app/res/layout/motion_one_img_start.xml --\u003e \n    \u003candroid.support.constraint.ConstraintLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n    \n        \u003cImageView\n            android:id=\"@+id/imageView\"\n            android:layout_width=\"64dp\"\n            android:layout_height=\"64dp\"\n            android:layout_marginTop=\"16dp\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            app:srcCompat=\"@drawable/ic_android_black_24dp\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nNext, let’s create the Android vector drawable. To do so, make sure the `app` directory in the Android file list is selected then click **File** \u003e **New** \u003e **Vector Asset** then set the hex color to `#4CAF50` then click **Next \u003e Finish.**\n\n![constraintLayout-4-config-asset](//images.ctfassets.net/1es3ne0caaid/7579HOjPWwYSo8ugwsscuA/a826bbfabb9a60b2615159ce7c1377a9/constraintLayout-4-config-asset.png)\n\nFor our final image position our layout looks like this:\n\n![constraintLayout-4-final-position](//images.ctfassets.net/1es3ne0caaid/3ICgB0yXVm2Ay2aqueuiW2/302d2fa7d90b4f47552806a2758d4c49/constraintLayout-4-final-position.png)\n\nThis layout was named `motion_one_img_end` and this is the supporting `XML` code:\n\n``` xml\n    \u003c!-- File: app/res/layout/motion_one_img_end.xml --\u003e \n    \u003candroid.support.constraint.ConstraintLayout \n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n    \n        \u003cImageView\n            android:id=\"@+id/imageView\"\n            android:layout_width=\"180dp\"\n            android:layout_height=\"180dp\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            app:layout_constraintVertical_bias=\"0.75\"\n            app:srcCompat=\"@drawable/ic_android_black_24dp\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nNow that we have defined our initial and final position for our images, we need to create a `MotionLayout` layout file, we will call it `motion_layout_01`. This file will be very similar to our initial layout file except that instead of the root layout being a `ConstraintLayout` we will replace it with a `MotionLayout`.\n\nHere are the changes:\n\n``` xml\n    \u003c!-- File: app/res/layout/motion_layout_01.xml --\u003e\n    \u003candroid.support.constraint.motion.MotionLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:layoutDescription=\"@xml/motion_scene_01\"\n        app:showPaths=\"true\"\u003e\n    \n        \u003cImageView\n            android:id=\"@+id/imageView\"\n            android:layout_width=\"64dp\"\n            android:layout_height=\"64dp\"\n            android:layout_marginTop=\"16dp\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            app:srcCompat=\"@drawable/ic_android_black_24dp\" /\u003e\n    \n    \u003c/android.support.constraint.motion.MotionLayout\u003e\n```\n\nWe also introduced two new attributes that we didn’t declare in our initial layout file. The `app:layoutDescription` and `app:showPaths` attributes. The `showPaths` attribute was used here to show the animation path in our example. This attribute is mainly for debugging and should not be used in a production app.\n\nThe `layoutDescription` attribute references an `XML` file called `motion_scene_01`. It is the `MotionScene` element that will tell the `MotionLayout` how to transition between the initial layout and final layout. All `MotionScene` files should be kept in `res/xml` directory:\n\n![constraintLayout-4-res-xml](//images.ctfassets.net/1es3ne0caaid/5k7YYNPxjqqwGCA6SWkGSS/ee01f6ed84988e7575bd79cc00bd80d8/constraintLayout-4-res-xml.gif)\n\nCreate a new file in the `res/xml` directory named `motion_scene_01` and paste this:\n\n``` xml\n    \u003c!-- File: app/res/xml/motion_scene_01.xml --\u003e\n    \u003cMotionScene xmlns:motion=\"http://schemas.android.com/apk/res-auto\"\u003e\n        \u003cTransition\n            motion:constraintSetStart=\"@layout/motion_one_img_start\"\n            motion:constraintSetEnd=\"@layout/motion_one_img_end\"\n            motion:duration=\"1000\"\u003e\n            \u003cOnClick\n                motion:target=\"@+id/imageView\"\n                motion:mode=\"toggle\" /\u003e\n        \u003c/Transition\u003e\n    \u003c/MotionScene\u003e\n```\n\nHere we defined the default transition by specifying the `constraintSetStart`, `constraintSetEnd` and `duration` attributes. \n\n\n- The `constraintSetStart` attribute tells `MotionLayout` the constraints for the initial position of the layout file `motion_one_img_start` we created earlier.\n- The `constraintSetEnd` attribute tells `MotionLayout` the constraints for the final position of the layout file `motion_one_img_end` we created earlier.\n- The `duration` attribute specifies the duration of the transition between the initial and final position.\n\nFinally to we used the `OnClick`  event with a handler to instruct `MotionLayout` to start its transition. On the `OnClick`  we specified the ID of the view that triggers the animation using the `target` attribute and the `mode` attribute. \n\nThe `mode` attribute specifies the direction for the target view to move the animation. We used the `toggle` mode here so we can achieve a smooth back and forth transition between the initial and final position. Other available modes include: `transitionToEnd`, `transitionToStart`, `jumpToEnd`, `jumpToStart`. \n\nFinally, open the `MainActivity` class and change the `setContentView` parameter from `R.layout.activity_main` to `R.layout.motion_layout_01` in the `onCreate` method.\n\n``` xml\n    import android.support.v7.app.AppCompatActivity\n    import android.os.Bundle\n    \n    class MainActivity : AppCompatActivity() {\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.motion_layout_01)\n        }\n    }\n```\n\nWe can now run our app. When we click on the image it will transition between the initial and final positions as seen in our GIF below:\n\n![constraintLayout-4-image-size](//images.ctfassets.net/1es3ne0caaid/1IUIB9B5U4um8gEkieOMyi/5338787d5a64bb6227cfab4a316a7115/constraintLayout-4-image-size.gif)\n\n\n## Deeper dive into MotionScene\n\nAs mentioned before, the `MotionScene` drives the animation for `MotionLayout` by instructing the  `MotionLayout` what to do. It is the engine room of our animations. \n\nTo specify an animation, the `MotionScene` element could contain:\n\n\n- A `StateSet` element that describes the states supported by the system. A `state` can be used to define the position of a layout before, during, and after the transition.\n- A `ConstraintSet` that encapsulates all the positioning rules for your layout. It is always important to make sure that each `ConstraintSet` element contains all the constraints you want to apply to the view. It’s important because each  constraint set will replace all existing constraints of the affected views.\n- A `Transition` element that describes the transition between two `states` or `ConstraintSet`s. Under the transition element, you can also specify event triggers like `OnClick` or `OnSwipe` and a `KeyFrameSet`.\n\nBelow is a typical structure of a `MotionScene` file:\n\n``` xml\n    \u003cMotionScene\u003e\n        \u003cTransition\u003e\n            \u003cOnClick /\u003e\n            \u003cOnSwipe /\u003e\n            \u003cKeyFrameSet \u003e\n                \u003cKeyPosition /\u003e\n                \u003cKeyAttribute /\u003e\n                \u003cKeyCycle /\u003e\n            \u003c/KeyFrameSet\u003e\n        \u003c/Transition\u003e\n    \n        \u003cConstraintSet\u003e\n            \u003cConstraint \u003e\n                \u003cCustomAttribute/\u003e\n            \u003c/Constraint\u003e\n        \u003c/ConstraintSet\u003e\n    \n        \u003cStateSet\u003e\n            \u003cState\u003e\n                \u003cVariant /\u003e\n            \u003c/State\u003e\n        \u003c/StateSet\u003e\n    \u003c/MotionScene\u003e\n```\n\n### Using ConstraintSet to replace Multiple Layout files\n\nWhile making our first animation with `MotionLayout` above, we defined two layout files. One for the initial position, and one for the final position. An alternative to doing this is we can specify what constraints the initial and final layout positions will use directly in our `MotionScene` file.\n\nTo do this we use the `ConstraintSet` element and define the initial constraints and the final constraints to be applied during the transition. \n\nLet's look at the example below of how it could look:\n\n``` xml\n    \u003cMotionScene xmlns:motion=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e\n        \u003cTransition\n            motion:constraintSetStart=\"@+id/start\"\n            motion:constraintSetEnd=\"@+id/end\"\n            motion:duration=\"1000\"\u003e\n            \u003cOnClick\n                motion:target=\"@+id/imageView\"\n                motion:mode=\"toggle\" /\u003e\n        \u003c/Transition\u003e\n    \n        \u003cConstraintSet android:id=\"@+id/start\"\u003e\n            \u003cConstraint\n                android:id=\"@+id/imageView\"\n                android:layout_width=\"64dp\"\n                android:layout_height=\"64dp\"\n                android:layout_marginTop=\"16dp\"\n                motion:layout_constraintEnd_toEndOf=\"parent\"\n                motion:layout_constraintStart_toStartOf=\"parent\"\n                motion:layout_constraintTop_toTopOf=\"parent\"\n                motion:srcCompat=\"@drawable/ic_android_black_24dp\"/\u003e\n        \u003c/ConstraintSet\u003e\n    \n        \u003cConstraintSet android:id=\"@+id/end\"\u003e\n            \u003cConstraint\n                android:id=\"@+id/imageView\"\n                android:layout_width=\"180dp\"\n                android:layout_height=\"180dp\"\n                motion:layout_constraintBottom_toBottomOf=\"parent\"\n                motion:layout_constraintEnd_toEndOf=\"parent\"\n                motion:layout_constraintStart_toStartOf=\"parent\"\n                motion:layout_constraintTop_toTopOf=\"parent\"\n                motion:layout_constraintVertical_bias=\"0.75\"\n                motion:srcCompat=\"@drawable/ic_android_black_24dp\"  /\u003e\n        \u003c/ConstraintSet\u003e\n    \u003c/MotionScene\u003e\n```\n\nAbove, we have defined two `ConstraintSet` elements. One for our initial layout with an ID - `start`, and one for our final layout with ID - `end`. \n\nIf we compare this to the animation we created earlier, we see that the constraint attributes for our `start` constraint set is similar to the constraint declared for the `ImageView` in our initial layout position in the file `motion_one_img_start` earlier. The same goes for our end `ConstraintSet` attributes.\n\nFinally instead of `constraintSetStart` and `constraintSetEnd` referencing the initial and final layouts we now reference the `ids` of the `ConstraintSet` for the initial and final constraint declared in our `MotionScene` file.\n\nOne major reason to use a single file to manage our constraints is future-proofing. The upcoming `MotionEditor` in Android Studio will likely only support self-contained `MotionScene` files.\n\n### Custom attributes\n\nEarlier, we mentioned that with `MotionLayout` we can perform transitions on attributes that are not related to the position only - these are called custom attributes. \n\nOne example of such an attribute is the background color:\n\n![constraintLayout-4-color-demo](//images.ctfassets.net/1es3ne0caaid/3qLhj5y5WUKeawAqiykUWc/67c9da89630e0837db79c55862ca6dd8/constraintLayout-4-color-demo.gif)\n\nIn the image above, you can see how the background color gradually changes during the animation and not just an abrupt change. Let’s see an example of how we can achieve this.\n\nFirst create a new XML file in the `res/layouts` directory named `motion_layout_02.xml` and paste this:\n\n``` xml\n    \u003c!-- File: app/res/layout/motion_layout_02.xml --\u003e\n    \u003candroid.support.constraint.motion.MotionLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:layoutDescription=\"@xml/motion_scene_02\"\n        app:showPaths=\"true\"\u003e\n    \n        \u003cView\n            android:id=\"@+id/view\"\n            android:layout_width=\"64dp\"\n            android:layout_height=\"64dp\"\n            android:layout_marginTop=\"8dp\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n    \u003c/android.support.constraint.motion.MotionLayout\u003e\n```\n\nA key thing to notice is that the view element we are going to apply the background color on has no `backgroundColor` attribute. We will instead declare this in our `MotionScene` file.\n\nFor the contents of our `MotionScene`, create a new file named `motion_scene_02` in the `res/xml` directory and paste this:\n\n``` xml\n    \u003c!-- File: app/res/xml/motion_scene_02.xml --\u003e\n    \u003cMotionScene xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:motion=\"http://schemas.android.com/apk/res-auto\"\u003e\n    \n        \u003cTransition\n            motion:constraintSetEnd=\"@+id/end\"\n            motion:constraintSetStart=\"@+id/start\"\n            motion:duration=\"1000\"\n            motion:interpolator=\"linear\"\u003e\n            \u003cOnClick\n                motion:target=\"@+id/view\"\n                motion:mode=\"toggle\" /\u003e\n        \u003c/Transition\u003e\n    \n        \u003cConstraintSet android:id=\"@+id/start\"\u003e\n            \u003cConstraint\n                android:id=\"@+id/view\"\n                android:layout_width=\"64dp\"\n                android:layout_height=\"64dp\"\n                android:layout_marginTop=\"8dp\"\n                motion:layout_constraintEnd_toEndOf=\"parent\"\n                motion:layout_constraintStart_toStartOf=\"parent\"\n                motion:layout_constraintTop_toTopOf=\"parent\"\u003e\n                \u003cCustomAttribute\n                    motion:attributeName=\"backgroundColor\"\n                    motion:customColorValue=\"#000000\" /\u003e\n            \u003c/Constraint\u003e\n        \u003c/ConstraintSet\u003e\n    \n        \u003cConstraintSet android:id=\"@+id/end\"\u003e\n            \u003cConstraint\n                android:id=\"@+id/view\"\n                android:layout_width=\"180dp\"\n                android:layout_height=\"180dp\"\n                motion:layout_constraintBottom_toBottomOf=\"parent\"\n                motion:layout_constraintEnd_toEndOf=\"parent\"\n                motion:layout_constraintStart_toStartOf=\"parent\"\n                motion:layout_constraintTop_toTopOf=\"parent\"\n                motion:layout_constraintVertical_bias=\"0.90\" \u003e\n                \u003cCustomAttribute\n                    motion:attributeName=\"backgroundColor\"\n                    motion:customColorValue=\"#0e0e96\" /\u003e\n            \u003c/Constraint\u003e\n        \u003c/ConstraintSet\u003e\n        \n    \u003c/MotionScene\u003e\n```\n\nWhen defining a custom attribute, you need to define it both at the start and end `ConstraintSet`. A custom attribute is specified with an `attributeName` - this is case sensitive and must match the getter/setter methods of an object such that:\n\n\n- getter - getAttributeName (e.g getBackgroundColor)\n- setter - setAttributeName (e.g setBackgroundColor)\n\nThe value type of the setter also needs to be specified. The following value types are supported:\n\n``` \n    customColorValue\n    customIntegerValue\n    customFloatValue\n    customStringValue\n    customDimension\n    customBoolean\n```\n\nWe can now update the `MainActivity` to use the `motion_layout_02` and run our app to see the animation replicated.\n\n### KeyFrames\n\nSo far we have only made transitions between two states - the start and end state. Sometimes we want the start state to pass through intermediary states before arriving at the end state as seen below:\n\n![constraintLayout-4-keyframes-demo](//images.ctfassets.net/1es3ne0caaid/1gC5jea7zmUIq2Uo6QkIeg/b697e37fd1ef532f01973d256f1f8b01/constraintLayout-4-keyframes-demo.gif)\n\nThis is the same animation we implemented in our first example. The difference here is that before arriving at the final state, the image moves to the left and rotates at an angle before reaching the final state.\n\nTo achieve this sort of animation, `MotionLayout` offers us keyframes. Keyframes allow us to specify a point on the timeline of the animation where we can make additional changes to the animation. \n\nIn the example above, we specified that at 50% of the animation timeline, the image should move to the left of the screen and rotate before arriving at the final state. To do this we will need to add the `KeyFrameSet` element to our `MotionScene`. Let’s consider how we would do this.\n\nOpen the `motion_scene_01` file and add the `KeyFrameSet`  between the `Transition` tag as seen below:\n\n``` xml\n    \u003c!-- File: app/res/xml/motion_scene_01.xml --\u003e\n    [...]\n        \n        \u003cTransition\n            motion:constraintSetStart=\"@layout/motion_one_img_start\"\n            motion:constraintSetEnd=\"@layout/motion_one_img_end\"\n            motion:duration=\"1000\"\u003e\n            \n            [...]\n                \n          \u003cKeyFrameSet\u003e\n              \u003cKeyPosition\n                  motion:type=\"parentRelative\"\n                  motion:percentX=\"0.25\"\n                  motion:framePosition=\"50\"\n                  motion:target=\"@+id/imageView\"/\u003e\n              \u003cKeyAttribute\n                  android:rotation=\"-45\"\n                  motion:framePosition=\"50\"\n                  motion:target=\"@id/imageView\" /\u003e\n          \u003c/KeyFrameSet\u003e\n                \n        \u003c/Transition\u003e\n    \n    [...]\n```\n\n\nTo make a position change during the transition, we need to add a `KeyPosition` element under the `KeyFrameSet`. Above we specify the `type` and the direction, which is `percentX` for the x-axis, `percentY` for the y-axis.\n\nTo make an attribute change during the transition, we add a `KeyAttribute` element to the `KeyFrameSet`. We can add any `attribute` of the `view`, `widget` or `layout` that we want to change here. For this example, we only want to change the rotation of the `ImageView`.\n\nFinally, the `framePosition` attribute is used to specify at what time during the animation the changes should be applied. Notice we did not need to change anything in our `MotionLayout`. We only specified the changes to be made in our `MotionScene` file. \n\nHere is what that file now contains:\n\n``` xml\n    \u003c!-- File: app/res/xml/motion_scene_01.xml --\u003e\n    \u003cMotionScene xmlns:motion=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e\n      \u003cTransition\n          motion:constraintSetStart=\"@+id/start\"\n          motion:constraintSetEnd=\"@+id/end\"\n          motion:duration=\"1000\"\u003e\n          \u003cOnClick\n              motion:target=\"@+id/imageView\"\n              motion:mode=\"toggle\" /\u003e\n    \n          \u003cKeyFrameSet\u003e\n              \u003cKeyPosition\n                  motion:type=\"parentRelative\"\n                  motion:percentX=\"0.25\"\n                  motion:framePosition=\"50\"\n                  motion:target=\"@+id/imageView\"/\u003e\n              \u003cKeyAttribute\n                  android:rotation=\"-45\"\n                  motion:framePosition=\"50\"\n                  motion:target=\"@id/imageView\" /\u003e\n          \u003c/KeyFrameSet\u003e\n      \u003c/Transition\u003e\n    \n    \u003c/MotionScene\u003e\n```\n\n## Limitations of MotionLayout\n\nWith great power comes great responsibility. However, so far `MotionLayout` will only provide its capabilities for its direct children . `TransitionManager` mentioned earlier can work with nested layout hierarchies as well as Activity transitions.\n\n\n## Conclusion\n\nIn this article, we learned how to make a simple animation using `MotionLayout`. We also learned how the motion scene file helps `MotionLayout` drive animations. Making animations in Android has never been easier. Can’t wait to see what crazy animations you do with `MotionLayout`.\n\nIn [the final part of this series](https://pusher.com/tutorials/constraintlayout-kotlin-part-5), we will concatenate all the knowledge we learned in all previous parts and build an application using `ConstraintLayout`. \n\nYou can find the repository for this project [here](https://github.com/neoighodaro/constraint-layout-demo).","metaTitle":"Getting started with ConstraintLayout in Kotlin - Part 4","metaDescription":"This five part series takes a detailed look at the ConstraintLayout feature in Android. You will learn about its key features, and build two sample apps in Kotlin. In part four, explore using animations with ConstraintLayout."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2P36j6FrRuMegAQgakqsMg","type":"Entry","createdAt":"2018-09-12T17:18:57.888Z","updatedAt":"2018-09-12T17:18:57.888Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with ConstraintLayout in Kotlin - Part 3: using helpers - guidelines, groups, and barriers","url":"constraintlayout-kotlin-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/constraint-layout-demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}}],"reviewDate":"2018-09-12","description":"This five-part series takes a detailed look at the ConstraintLayout feature in Android. You will learn about its key features, and build two sample apps in Kotlin. In part three, explore ConstraintLayout helpers: guidelines, groups, and barriers.","prerequisite":"You will need Android Studio 3+ installed on your machine. Familiarity with Android development will be helpful. You should have completed the previous parts of the series.","content":"This is the third part of our five-part series. In [the first part](https://pusher.com/tutorials/constraintlayout-kotlin-part-1), we introduced `ConstraintLayout` and some of its features and in [the second part](https://pusher.com/tutorials/constraintlayout-kotlin-part-2), we went deeper to look at constraints, bias, and chains. \n\nIn this part, we will look at `ConstraintLayout` helpers. The helpers are not necessarily core components, they only aid the efficiency and effectiveness of using the layout. We will explore the three helpers here - guidelines, groups, and barriers.\n\n\n## Prerequisites\n\nFor you to follow along in the entire series, you need to have the following requirements:\n\n\n- Completed [part two](https://paper.dropbox.com/doc/Getting-started-with-ConstraintLayout-in-Kotlin-Part-2-understanding-constraints-bias-and-chains--AKV8Toy_0qzG~DquvZuuOgFYAQ-cqDOkZz5mQRmnrfVhyrGr) of the series.\n- Android Studio (v3.0 or higher) installed on your machine. [Download here](https://developer.android.com/studio/).\n- Ability to navigate the Android Studio IDE.\n- A basic understanding of Android development, especially layouts.\n\n\n## Guidelines\n\nA guideline is a visual guide visible in the layout editor but not visible on the device. A guideline comes in handy when you have to align multiple views that have a similar margin. For instance, you have two views aligned to the left of the layout and you intend to give them both a margin of `20dp`, you can create a guideline instead which has the `20dp` start value and align the views to the guideline. \n\nIt is the most necessary when you have the same margin values duplicated on a lot of elements.  Guidelines bring flexibility because if you wish to adjust the spacing, later on, you can adjust just the guideline and the other widgets will fall into place. \n\nThere are two types of guidelines, horizontal and vertical. Vertical guidelines have a width of zero and the height of their constraint layout parent. Horizontal guidelines have a height of zero and the width of their constraint layout parent.\n\n### Creating a guideline\n\nThere are multiple ways of creating a guideline. You can add it directly on the `XML` file, or by using the layout design editor. To use the layout design editor, open the layout then right click on it and choose **Helpers** and select **Add Vertical Guideline**. \n\nHere is a screenshot:\n\n![constraintLayout-3-add-vertical-guide](//images.ctfassets.net/1es3ne0caaid/WznfOSPtqSmuOEAAwKmWY/953de5d31c31a7bc6886c962166e1529/constraintLayout-3-add-vertical-guide.png)\n\nThis adds this snippet to your layout `XML` file:\n\n``` xml\n    \u003candroid.support.constraint.Guideline\n      android:id=\"@+id/guideline\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:orientation=\"vertical\"\n      app:layout_constraintGuide_begin=\"20dp\" /\u003e\n```\n\nThe guideline here has a vertical `orientation` because we selected that. A horizontal guideline will make the orientation horizontal. An `id` was generated so that other views can be aligned to it. Another attribute to look out for is the positioning attribute - `layout_constraintGuide_begin=\"20dp\"` . This means that the guideline starts `20dp` after the start of the layout.\n\n### Positioning our guidelines\n\nThere are three ways of positioning our guidelines:\n\n\n- Specifying a fixed distance from the left or the top of a layout - (`layout_constraintGuide_begin`)\n- Specifying a fixed distance from the right or the bottom of a layout -(`layout_constraintGuide_end`)\n- Specifying a percentage of the width or the height of a layout -(`layout_constraintGuide_percent`)\n\nBy default, when you create a vertical guideline on the layout design editor, it is positioned at the start. It will look like this:\n\n![constraintLayout-3-default-guidelines](//images.ctfassets.net/1es3ne0caaid/21FFaj19FG6QmYGi088OUW/60b109bba9592617e32e37f0cb5902ec/constraintLayout-3-default-guidelines.png)\n\nThe guideline has a value of `20dp`. If you want to position the guideline at the end, remove the `app:layout_constraintGuide_begin` attribute and add this - `layout_constraintGuide_end` or you drag the guideline to the right and click the play-like icon located on the toolbar like so:\n\n![constraintLayout-3-mod-guide-demo](//images.ctfassets.net/1es3ne0caaid/1vKIEmIjc8WSGwWkEOwCmA/99c3cb7752c855bf8f716ee1d522fdcb/constraintLayout-3-mod-guide-demo.gif)\n\nAnother method of positioning guidelines is using percents. You can achieve this by using the `app:layout_constraintGuide_percent` attribute. This expects a value between 0 and 1 to know where to place the guideline. \n\nJust like with bias, a value of 0 will be at the start, left side, of the layout, 0.5 will be in the middle, and 1 will be at the end of the layout. On the design layout view, it’s shown as a value from 0 to 100.\n\nIn the same way we created a vertical guideline, you can create a horizontal one too. A guideline for a horizontal guideline can look like this:\n\n``` xml\n    \u003candroid.support.constraint.Guideline\n        android:id=\"@+id/guideline\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\"\n        app:layout_constraintGuide_begin=\"20dp\" /\u003e\n```\n\nSince it is a horizontal guideline, and has a horizontal orientation, it will start `20dp` at the top of the layout. The `app:layout_constraintGuide_end` attribute will set the guideline to the bottom of the layout. You can start adding your views and align them with the guidelines.\n\n\n## Groups\n\nA group is one of the helper components of the constraint layout. Its main aim is to categorize views together. This is different from the usual `ViewGroup` we already know about in Android. While a group only contains a reference to IDs of other elements, a `ViewGroup` contains the actual views itself. A group is used to set the visibility of the views referenced in it.\n\nTo create a group, right click on the layout, choose **helpers**, then select **add group.** After that, in the component tree, drag the views to the group you wish to add them to. See the screen recording below to see how to create a group:\n\n![constraintLayout-3-add-group](//images.ctfassets.net/1es3ne0caaid/5Ax1PmG8soC2WMIckEGY4m/3af0df2a50daf4a4c2ae24e790505e84/constraintLayout-3-add-group.gif)\n\nThis generates the following snippet in the `XML` file for us:\n\n``` xml\n    \u003candroid.support.constraint.ConstraintLayout\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".MainActivity\"\u003e\n    \n      \u003cTextView\n        android:id=\"@+id/textView2\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"8dp\"\n        android:layout_marginTop=\"8dp\"\n        android:layout_marginEnd=\"8dp\"\n        android:text=\"TextView\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n      \u003cButton\n        android:id=\"@+id/button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"8dp\"\n        android:layout_marginTop=\"8dp\"\n        android:layout_marginEnd=\"8dp\"\n        android:text=\"Button\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/textView2\" /\u003e\n    \n      \u003candroid.support.constraint.Group\n        android:id=\"@+id/group\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        app:constraint_referenced_ids=\"button,textView2\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nNotice that the IDs of the button and the `TextView` are referenced in the group. With this, you can set the visibility of the group and it will influence the visibility of the views whose IDs are in the group. This can come in handy when you have something like a group of input error messages you want to display or hide.\n\n\n## Barriers\n\nSometimes, we need to create dynamic layouts and views with dimensions that scale based on inputs we have no details about. \n\nFor instance, if we want to create a user profile data with a bunch of `TextView`s and we want to put the corresponding elements to the end of each. Typically, we could use nested linear layouts. However, we can use constraints to handle this a lot more efficiently by simply creating a barrier, and referencing the necessary IDs to the barrier.\n\nA barrier is a virtual view that contains a reference to the views we wish to form a barrier against. It forms a virtual guideline based on the most extreme view in your reference list. If those elements increase in size, the biggest will be the one controlling the dimensions; the distance of the barrier to the side. \n\nThey can be created to the top, bottom, left or right of the referenced views. It allows other views to constrain themselves to the barrier and stops them from jumping or overlapping each other. This is particularly handful when dealing with different widget sizes that depends on some configuration or even applications that supports different languages. \n\nBarriers could be horizontal or vertical. Let us look at the images below for a clearer understanding:\n\n![constraintLayout-3-barriers](//images.ctfassets.net/1es3ne0caaid/3hBGbTIygoy806yO402qey/961dc1693766aca7c3ec6ac7876e4fe4/constraintLayout-3-barriers.png)\n\nAbove, notice that view C is constrained to the barrier. The barrier references the IDs of B and A. This means that the barrier is placed at the most extreme view out of these two views whose IDs are referenced. This is very useful when you don’t actually know the size of widgets.\n\n### Creating barriers\n\nLet’s do a quick example of using barriers with three `TextView`s. Drag three `TextView`s to your the layout as seen below:\n\n![constraintLayout-3-add-barriers](//images.ctfassets.net/1es3ne0caaid/5aYh9NyzLi22as4meMeO8/4e67877608a6a069c451f084233500e7/constraintLayout-3-add-barriers.png)\n\nFrom the image above, we have three `TextView`s that are constrained to the left. We will now create a barrier. \n\nTo create a barrier, you can use the helper tool and select **Add Vertical Barrier**:\n\n![constraintLayout-3-add-vertical-barrier](//images.ctfassets.net/1es3ne0caaid/49bYsx4ZE4E82WSKYwua4m/22966a0f34fe24693aabb70523ffee1f/constraintLayout-3-add-vertical-barrier.png)\n\nIn the component tree, drag and drop the views you want to create a barrier around and drop it on the barrier like this:\n\n![constraintLayout-3-add-vertical-barrier-demo](//images.ctfassets.net/1es3ne0caaid/5rbuneZddYCQiISG0AgmgW/bf7c6637159d7c107a0308788b339fdb/constraintLayout-3-add-vertical-barrier-demo.gif)\n\nThis generates this snippet in the layout XML file:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".MainActivity\"\u003e\n    \n      \u003cTextView\n        android:id=\"@+id/textView3\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"8dp\"\n        android:layout_marginTop=\"20dp\"\n        android:text=\"FirstText\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n      \u003cTextView\n        android:id=\"@+id/textView4\"\n        android:layout_marginTop=\"20dp\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"8dp\"\n        android:text=\"SecondTextLong\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/textView3\" /\u003e\n    \n      \u003cTextView\n        android:id=\"@+id/textView5\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"8dp\"\n        android:layout_marginTop=\"40dp\"\n        android:text=\"ThirdText\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/textView4\" /\u003e\n    \n        \u003candroid.support.constraint.Barrier\n          android:id=\"@+id/barrier2\"\n          android:layout_width=\"wrap_content\"\n          android:layout_height=\"wrap_content\"\n          app:barrierDirection=\"left\"\n          app:constraint_referenced_ids=\"textView4,textView3\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nBy default, the barrier direction is set to the left and so it will position itself to be on the left-hand edge of the view that is furthest to the left. \n\nIn this sample, we want the barrier to be towards the right. We can change that by selecting the barrier from the **Component Tree**, changing its **barrierDirection** in the attributes window. You can also set the `app:barrierDirection` in the XML directly to right.\n\nFinally, we then constrain the third TextView to the barrier instead of the parent by adding this to the TextView:\n\n``` xml\n    app:layout_constraintStart_toStartOf=\"@id/barrier\"\n```\n\nWe will now have something like this:\n\n![constraintLayout-3-barrier-direction](//images.ctfassets.net/1es3ne0caaid/5EESNnUC6AOQWq02KA2YgI/58b0a07556a83d6ffb3de8b84172e82e/constraintLayout-3-barrier-direction.png)\n\nIf the text of the second `TextView` adjusts, the barrier adjusts with it. With barriers, we have prevented a potential overlapping of views.\n\n\n## Conclusion\n\nIn this part of the series, we have learned about the constraint layout helpers - guidelines, groups, and barriers. We have seen how we can use them instead of nested layouts and how they can speed up development time. \n\nIn the [next part](https://pusher.com/tutorials/constraintlayout-kotlin-part-4), we will look at animations in `ConstraintLayout`. \n\nYou can find the repository for this project [here](https://github.com/neoighodaro/constraint-layout-demo).","metaTitle":"Getting started with ConstraintLayout in Kotlin - Part 3","metaDescription":"This five-part series takes a detailed look at the ConstraintLayout feature in Android. You will learn about its key features, and build two sample apps in Kotlin. In part three, explore ConstraintLayout helpers: guidelines, groups, and barriers."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3A6s9siGQU8wOAswaEcgq6","type":"Entry","createdAt":"2018-09-11T19:27:36.221Z","updatedAt":"2018-09-13T19:02:03.068Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with ConstraintLayout in Kotlin - Part 2: understanding constraints, bias, and chains","url":"constraintlayout-kotlin-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/constraint-layout-demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}}],"reviewDate":"2018-09-12","description":"This five-part series takes a detailed look at the ConstraintLayout feature in Android. You will learn about its key features, and build two sample apps in Kotlin. In part two, explore constraints, bias and chains.","prerequisite":"You will need Android Studio 3+ installed on your machine. Familiarity with Android development will be helpful. You should have completed the previous parts of the series.","content":"In [the first part](https://pusher.com/tutorials/constraintlayout-kotlin-part-1) of this series, we took baby steps into `ConstraintLayout` and how it compares to other layouts. In this part, we will go deeper into `ConstraintLayout`s. Specifically looking into constraints, bias, and chains.\n\n\n## Prerequisites\n\nFor you to follow along in the entire series, you need to have the following requirements:\n\n\n- Completed [part one](https://paper.dropbox.com/doc/Getting-started-with-ConstraintLayout-in-Kotlin-Part-1-introduction-to-ConstraintLayout--AKUN7YSEqyM6AGsq~wbbQSMiAg-XqiLzbQdq0i5DZ8US095E) of the series.\n- Android Studio (v3.0 or higher) installed on your machine. [Download here](https://developer.android.com/studio/).\n- Ability to navigate the Android Studio IDE.\n- A basic understanding of Android development, especially layouts.\n\nIf you have these prerequisites, let’s start.\n\n\n## Constraints\n\nAs the name suggests, the `ConstraintLayout` works based on a set of constraints. A constraint is simply a relationship between two components within the layout that controls how the view will be positioned.\n\nWhen creating constraints, there are a few rules to follow:\n\n\n- Every view must have at least two constraints: one horizontal and one vertical. If a constraint for any axis is not added, your view jumps to the zero point of that axis.\n- You can create constraints only between a constraint handle and an anchor point that share the same plane. So a vertical plane (the left and right sides) of a view can be constrained only to another vertical plane, and baselines can constrain only to other baselines.\n- Each constraint handle can be used for just one constraint, but you can create multiple constraints (from different views) to the same anchor point.\n\n### Adding constraints\n\nBy default, when you add an element to your layout, for instance a `Button`:\n\n``` xml\n    \u003cButton\n      android:id=\"@+id/button\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:text=\"Button\" /\u003e\n```\n\nIt takes the (0,0) position, which is essentially point zero on the horizontal and vertical axis. On the layout design view, you can easily drag this button to any part of the screen you want like the center of the screen. If you do this, your button tag in the `XML` will have additional attributes similar to this:\n\n``` xml\n    tools:layout_editor_absoluteX=\"148dp\"\n    tools:layout_editor_absoluteY=\"231dp\"\n```\n\nThe tools attributes are introduced in order to position elements. Tools attributes are ignored at runtime, so, the button will eventually revert to position (0,0).  To properly place this button, and keep it in place, we need to add constraints to it.\n\n#### Adding constraints automatically\nAndroid Studio has a capability to automatically add constraints as you add your elements through the layout design screen. The following GIF illustrates this in action:\n\n![constraintLayout-2-autoadd-constraints](//images.ctfassets.net/1es3ne0caaid/1rY4eNOLTumcY4UUEOIKe6/d3e9591513acf57bdf9fc61ff0dfc17d/constraintLayout-2-autoadd-constraints.gif)\n\nBy default, the **Autoconnect icon** (the U like icon) is disabled. To enable autoconstraint, we clicked the icon, which will remove the strikethrough on the icon. We then dragged the textview to the left part of the layout. This then gave us these constraints automatically:\n\n``` xml\n    app:layout_constraintStart_toStartOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" \n```\n\nWhen you build more complex layouts however, autoconstraints might not give you what you want. In such cases, you are better off creating and manipulating the constraints manually.\n\n#### Adding constraints manually\nAs said before, when working with more complex layouts, you are better off creating and manipulating the constraints manually.\n\nTo add constraints manually, drag the points on the either of the four sides of the view as seen below:\n\n![constraintLayout-2-manual-add-constraints](//images.ctfassets.net/1es3ne0caaid/4HvTVMHx20cSSkOEMiAUWe/db00d7ed833022f00f4f1d235180b4a5/constraintLayout-2-manual-add-constraints.gif)\n\nDoing this will add two attributes to the `TextView` in our `XML`:\n\n``` xml\n    app:layout_constraintStart_toStartOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" \n```\n\nIf you noticed, it is the same constraints we got when we created them automatically. In addition to that, however, it added two margin attributes:\n\n\n    android:layout_marginStart=\"8dp\"\n    android:layout_marginTop=\"8dp\"\n  \n\u003e It is important to note that margins only take effect only when a constraint has been added. The margin enforces the space between the target and the source side.\n\n### Relative constraints\n\nRelative constraints are those constraints that allow you to position an element relative to another just like we had in the `RelativeLayout`. \n\nLet us look at the commonly used relative constraints:\n\n#### Constrain view bottom to the bottom of another view\n\n``` xml\n    app:layout_constraintBottom_toBottomOf=\"@+id/referenced_view\"\n```\n\n![constraintLayout-2-bottom-to-bottom](//images.ctfassets.net/1es3ne0caaid/3rA4OtYucoiew2scCUeaC2/d79bbf5e233f1acfa6e34071833504e9/constraintLayout-2-bottom-to-bottom.png)\n\nApplying this constraint aligns the view to the bottom part of the view whose ID is referenced, in this case - `referenced_view`. \n\nIn the image above, we have two sample text views. The first `TextView` has a height of `400dp` and the second text view has the constraint just mentioned. Notice that the second `TextView` does not go below, but rather ends on the point the first textview ends? \n\nIf you want to place a view at the bottom of the layout, you use `parent` instead of the ID of the other view, something like this: `app:layout_constraintStart_toStartOf=\"parent\"`.\n\n#### Constrain view top to the top of another view\n\n``` xml\n    app:layout_constraintTop_toTopOf=\"@+id/referenced_view\"\n```\n\n![constraintLayout-2-top-to-top](//images.ctfassets.net/1es3ne0caaid/6jv9sFYNP2g2QK4YuCWGcU/184ceea35bb66a07e9a97b62771f8a50/constraintLayout-2-top-to-top.png)\n\nThis constraint above places a view on the same top starting position as the view whose ID is referenced. In the image above, the first `TextView` with text - **Hello World** - is constrained to the parent, so, we were able to add a margin for it. \n\nThe second `TextView` has the same constraint to the first `TextView`, so, it starts at the same point as the first `TextView`.\n\n#### Constrain view start to the start of another view\n\n``` xml\n    app:layout_constraintStart_toStartOf=\"@+id/referenced_view\"\n```\n\n![constraintLayout-2-start-to-start](//images.ctfassets.net/1es3ne0caaid/4rqR3eISyk8G4O0o8Qq20E/8b403f516dcaef782ec8e6b9c91e3fcd/constraintLayout-2-start-to-start.png)\n\nThis constraint places the view on the same start position with the view whose ID is referenced, irrespective of margins. \n\nIn the screenshot, the first `T``extView` with text **Hello World** has a starting margin of `40dp`. While the second text view only has the above-mentioned constraint. The second `T``extView` still starts at the same point as the first. \n\nThis constraint is similar to the `app:layout_constraintLeft_toLeftOf=\"@id/view\"` constraint, with the sole difference being that the `layout_constraintLeft_toLeftOf` constraint always start at the left. The `layout_constraintStart_toStartOf` constraint could start at the left or right depending on the layout type. For RTL (Right To Left) layouts, for instance, text starts from the right not the left. In such a case, the start constraint will be added to the right.\n\n#### Constrain view end to the end of another view\n\n``` xml\n    app:layout_constraintEnd_toEndOf=\"@+id/referenced_view\"\n```\n\n![constraintLayout-2-end-to-end](//images.ctfassets.net/1es3ne0caaid/1zvNt9MBsYcwMQIaoaawWG/2e592d7636478748dcab4032b02c5ba5/constraintLayout-2-end-to-end.png)\n\nAny view that has this constraint ends at the same point the referenced view ends. For instance, in the image above, the first `TextView` with **Hello World!** has a width of `200dp`. The next `TextView`, which has this constraint, ends at the same `200dp` mark just like as the first text. \n\nBased on the locale of the user, `end` could either be to the right or the left of the layout as earlier mentioned. If you are using LTR (Left To Right) layouts, this constraint will give us same result as the `app:layout_constraintRight_toRightOf=\"@id/referenced_view\"` constraint.\n\n\n#### Constrain view start to the end of another view\n\n``` xml\n    app:layout_constraintStart_toEndOf=\"@+id/referenced_view\"\n```\n\n![constraintLayout-2-start-to-end](//images.ctfassets.net/1es3ne0caaid/6wCHve2ASI8cmoMck8aEo2/a4ca21da6684ef8327927c6950d08769/constraintLayout-2-start-to-end.png)\n\nThis constraint makes a view start just at the end of the view referenced. In the image, the first `TextView` has a width of `200dp`. The second textview, which has this constraint, starts just at the end of the `200dp` mark of the first text.\n\n#### Constrain view end to the start of another view\n \n``` xml\n    app:layout_constraintEnd_toStartOf=\"@+id/referenced_view\"\n```\n\n![constraintLayout-2-end-to-start](//images.ctfassets.net/1es3ne0caaid/L7ozAgxU8SKSG6wUEe2Qi/872376f5f4a29a6eeb0a86b85a6b6a0e/constraintLayout-2-end-to-start.png)\n\nThis constraint makes a view end at the start of the view it references. In the image above, the first `TextView` with the **Hello World** text has a start constraint to the parent with a starting margin. The second `TextView`, which has this constraint ends just before the first textview starts.\n\n#### Constrain view bottom to the top of another view\n \n``` xml\n    app:layout_constraintBottom_toTopOf=\"@+id/referenced_view\"\n```\n\n![constraintLayout-2-bottom-to-top](//images.ctfassets.net/1es3ne0caaid/43YMWsLNNYaMCkOA4cYcmA/4081347bdddcf963f15fbf48e0979588/constraintLayout-2-bottom-to-top.png)\n\nThis constraint aligns a view to start above the view it references. Notice that at the point where the height of the second `TextView` ends, is where the first `TextView` starts.\n\n### Centered constraints\n\nCentered constraints are constraints that put views in the center of two elements. When trying to achieve a centered constraint, you add constraints to both ends of the elements. \n\nFor example, see how the **BUTTON** below has constraints added to both ends of the element:\n\n![constraintLayout-2-centered](//images.ctfassets.net/1es3ne0caaid/35FYFbG8nm8kiQqAGwMw68/c8ff7805e35702ed1e4202fd87ff90af/constraintLayout-2-centered.png)\n\nFor the button to be centered horizontally, we added constraints to both ends of the parent.\n\n\n### Circular positioning\n\nYou can constrain a widget's center relative to another widget’s center, at an angle and a distance. This allows you to position a widget on a circle. \n\nThe following attributes can be used:\n\n- `layout_constraintCircle`: references the other widget’s ID you want to constrain it to.\n- `layout_constraintCircleRadius`: the distance to the center of the other widget referenced.\n- `layout_constraintCircleAngle`: the angle the widget should be at (in degrees, between 0 and 360).\n\nSee the example below:\n\n![constraintLayout-2-circular](//images.ctfassets.net/1es3ne0caaid/1j1lz5zAgCqKSwscSsyaqs/e6af57f9ad6622faa2598b63c44c6d8b/constraintLayout-2-circular.png)\n\nThe `XML` code to achieve this layout is:\n\n``` xml\n    \u003candroid.support.constraint.ConstraintLayout \n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".MainActivity\"\u003e\n    \n      \u003cButton\n        android:id=\"@+id/buttonA\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"8dp\"\n        android:layout_marginTop=\"8dp\"\n        android:layout_marginEnd=\"8dp\"\n        android:layout_marginBottom=\"8dp\"\n        android:text=\"Button A\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n      \u003cButton\n        android:id=\"@+id/buttonB\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Button B\"\n        app:layout_constraintCircle=\"@+id/buttonA\"\n        app:layout_constraintCircleAngle=\"45\"\n        app:layout_constraintCircleRadius=\"110dp\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\n### Removing constraints\n\nApart from removing the constraint attributes from the `XML` file, you can remove them from the design layout directly as seen below:\n\n![constraintLayout-2-removing-constraints](//images.ctfassets.net/1es3ne0caaid/6LWbBeeqwEesiUWSkEI0wA/1f315d941eb41d92523e918c0a74f0d0/constraintLayout-2-removing-constraints.gif)\n\n\u003e It is always best to constrain your views to two views on one axis and use a `match_constraint` or `0dp`. Using `wrap_content` without a constraint makes your view to overlap on that axis.\n\n\n## Bias\n\nBias is used to adjust the spacing between a view and what it is constrained to. They specifically work with centered constraint views and it can be added vertically or horizontally. \n\nLet us consider we have a `TextView` that is constrained like this:\n\n``` xml\n    \u003cButton\n      android:id=\"@+id/button\"\n      android:text=\"Button\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      app:layout_constraintLeft_toLeftOf=\"parent\"\n      app:layout_constraintRight_toRightOf=\"parent\"/\u003e\n```\n\nBy default, this button has a horizontal bias of 0.5 even without specifying the bias attribute. \n\nLet’s see how this will look in a layout:\n\n![constraintLayout-2-bias-1](//images.ctfassets.net/1es3ne0caaid/4MAkxEAYrYGisY0yYWgqiU/c89f88a6a529cae44d4ad2eb80e59261/constraintLayout-2-bias-1.png)\n\nNow if you want to adjust this button a little to the right or left, a thing to remember is: values between 0 to 0.4 will nudge the button towards the left of the screen. While values between 0.6 and 1 will nudge the button to the right of the screen. \n\nSo, If we, for instance, add a horizontal bias of 0.7 like this:\n\n``` xml\n    app:layout_constraintHorizontal_bias=\"0.7\"\n```\n\nOur layout will then look like this:\n\n![constraintLayout-2-bias-2](//images.ctfassets.net/1es3ne0caaid/7JZk3lVZPa0cs22uuacaI/cfe586b151410ac7e653319279b8b8aa/constraintLayout-2-bias-2.png)\n\n## Chains\n\nA chain is a group of views linked together with bi-directional positional constraints. The aim of chains is to control the space between views and how the views use the space inside a layout. We have vertical and horizontal chains.\n\n### Adding chains\n\nTo create chains, you select multiple views on the same axis, right-click, choose **Chains** and add any chain of your choice. You can see a demonstration below:\n\n![constraintLayout-2-add-chains](//images.ctfassets.net/1es3ne0caaid/59wbGuLGcMaooGQsOYUiQy/27dab0d1bc546900f2385d813c08762c/constraintLayout-2-add-chains.gif)\n\n### Chain modes\n\nOnce chains are set, we can distribute the views horizontally or vertically with the following styles.\n\n#### Chain mode: spread\nIn this mode, the views are distributed evenly. The spacing between the views themselves and their parent is the same. We can see an example in the image below:\n\n![constraintLayout-2-chain-mode-spread](//images.ctfassets.net/1es3ne0caaid/4FniR7iXW84uYU4qCKAmKy/8a99d5fe1e0d70d97ac14e8b669803c2/constraintLayout-2-chain-mode-spread.png)\n\nIn the above image, we have two buttons that are constrained vertically to the center of the layout. Then, there are chained horizontally. The `XML` file generated is this:\n\n``` xml\n    \u003candroid.support.constraint.ConstraintLayout\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".MainActivity\"\u003e\n    \n      \u003cButton\n        android:id=\"@+id/firstButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\"\n        android:layout_marginBottom=\"8dp\"\n        android:text=\"Button\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toStartOf=\"@+id/secondButton\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toStartOf=\"parent\"/\u003e\n    \n      \u003cButton\n        android:id=\"@+id/secondButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\"\n        android:layout_marginBottom=\"8dp\"\n        android:text=\"Button\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toEndOf=\"@+id/firstButton\"/\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nNotice that chain mode is not specified directly through the chain attribute. The spread chain mode is just a product of constraints and bias, two concepts we’ve discussed. The constraint added for the first button makes the button end just at the starting point of the second button. A start constraint was also added to it.\n\nThe second button has a constraint that makes it start at the end of the first button and end at the parent. \n\nBoth buttons have a horizontal bias added to them.\n\n#### Chain mode: spread inside\nIn this chain mode, the first and last views are affixed to the constraints on each end of the chain and the rest are evenly distributed between them. \n\nHere is an example:\n\n![constraintLayout-2-chain-mode-spread-inside](//images.ctfassets.net/1es3ne0caaid/ls0n0jz7RQG6AMyumewsm/1ff84e434ede6c122529951bfeb6f235/constraintLayout-2-chain-mode-spread-inside.png)\n\nThe first and last button are attached to the parents of the layout, and then the other button is evenly distributed in the center. \n\nThe `XML` file for this is:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout \n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".MainActivity\"\u003e\n    \n      \u003cButton\n        android:id=\"@+id/firstButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\"\n        android:layout_marginBottom=\"8dp\"\n        android:text=\"Button\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toStartOf=\"@+id/secondButton\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintHorizontal_chainStyle=\"spread_inside\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n      \u003cButton\n        android:id=\"@+id/secondButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"47dp\"\n        android:layout_marginTop=\"8dp\"\n        android:layout_marginBottom=\"8dp\"\n        android:text=\"Button\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toStartOf=\"@+id/thirdButton\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toEndOf=\"@+id/firstButton\"\n        app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n      \u003cButton\n        android:id=\"@+id/thirdButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\"\n        android:layout_marginBottom=\"8dp\"\n        android:text=\"Button\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toEndOf=\"@+id/secondButton\"\n        app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nAbove, we see the chain attribute being declared in the first button - `app:layout_constraintHorizontal_chainStyle=\"spread_inside\"`. The constraints used in all the buttons are similar to that being used in the spread chain mode.\n\n#### Chain mode: packed\nIn this chain mode, the views are packed together after including margins. Here is an example:\n\n![constraintLayout-2-chain-mode-packed](//images.ctfassets.net/1es3ne0caaid/54J96CjQyQg4oyKkwIguMS/efc05af6e2abce66e7a6b510891fa46e/constraintLayout-2-chain-mode-packed.png)\n\nThe generated `XML` file for this is:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".MainActivity\"\u003e\n    \n      \u003cButton\n        android:id=\"@+id/firstButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\"\n        android:layout_marginBottom=\"8dp\"\n        android:text=\"Button\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toStartOf=\"@+id/secondButton\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintHorizontal_chainStyle=\"packed\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n      \u003cButton\n        android:id=\"@+id/secondButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"47dp\"\n        android:layout_marginTop=\"8dp\"\n        android:layout_marginBottom=\"8dp\"\n        android:text=\"Button\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toStartOf=\"@+id/thirdButton\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toEndOf=\"@+id/firstButton\"\n        app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n      \u003cButton\n        android:id=\"@+id/thirdButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\"\n        android:layout_marginBottom=\"8dp\"\n        android:text=\"Button\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toEndOf=\"@+id/secondButton\"\n        app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nAs seen before, the chain mode is declared in one of the buttons - in this case, the first button. The attribute is - `app:layout_constraintHorizontal_chainStyle=\"packed\"`. Constraints and bias are then added to the views.\n\n### Chain weighting\n\nThere are attributes that help to add weights to views when using chains. They are `layout_constraintHorizontal_weight` and `layout_constraintVertical_weight`. These control how space will be distributed amongst the elements. To use this attribute, the view must be using `match_constraint` for either width or height depending on which axis your chain is.\n\nFor example, on a chain containing two elements using `match_constraint`, with the first element using a weight of 2 and the second a weight of 1, the space occupied by the first element will be twice that of the second element as seen below:\n\n![constraintLayout-2-chain-weight-1](//images.ctfassets.net/1es3ne0caaid/2lTJur8XmEIooQk0QgQy4W/598fea06c3e5e1870654053bedc05cfe/constraintLayout-2-chain-weight-1.png)\n\nThe image above is a `spread_inside` chain mode with weights added to them and we used the `layout_constraintHorizontal_weight` attribute to achieve this. The first button has a weight of 2 while the rest have a weight of 1.\n\nWith your layout editor, you can easily switch the chain modes as seen below:\n\n![constraintLayout-2-chain-weight-2](//images.ctfassets.net/1es3ne0caaid/7D3XVeflq8ykysYSgGUQia/d735fa5f6d54ec012d1900e7e3a6e077/constraintLayout-2-chain-weight-2.gif)\n\n\n## Conclusion\n\nIn this part, we have learned about constraints, bias, and chains. We have seen how they relate with each other when creating layouts. In [the next part](https://pusher.com/tutorials/constraintlayout-kotlin-part-3), we will learn about helpers in `ConstraintLayout`.\n\nYou can find the repository for this project [here](https://github.com/neoighodaro/constraint-layout-demo).","metaTitle":"Getting started with ConstraintLayout in Kotlin- Part 2","metaDescription":"This five-part series takes a detailed look at the ConstraintLayout feature in Android. You will learn about its key features, and build two sample apps in Kotlin. In part two, explore constraints, bias and chains."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"BVsQmMvAuyuSUKYWs0M4G","type":"Entry","createdAt":"2018-09-11T18:34:16.014Z","updatedAt":"2018-09-11T18:34:41.125Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with ConstraintLayout in Kotlin - Part 1: introduction to ConstraintLayout","url":"constraintlayout-kotlin-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/constraint-layout-demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}}],"reviewDate":"2018-09-10","description":"This five-part series takes a detailed look at the ConstraintLayout feature in Android. You will learn about its key features, and build two sample apps in Kotlin. In part one, learn why ConstraintLayout was created and look at some of the problems it solves.","prerequisite":"You will need Android Studio 3+ installed on your machine. Familiarity with Android development will be helpful.","content":"## Introduction\n\nThis is the first part of a five-part series. In this series, we will be looking at one of the recently released layouts in Android - the `ConstraintLayout`. We will cover various building blocks of the layout, how they work collectively, and we will round off the series by creating a complex layout in the final part. \n\nFor this first part, however, we will look at the features and the problems the layout attempts to solve. Plus we will set up an Android project, which we will be playing around with through the series.\n\n\n## Prerequisites\n\nFor you to follow along in the entire series, you need to have the following requirements:\n\n\n- Android Studio (v3.0 or higher) installed on your machine. [Download here](https://developer.android.com/studio/).\n- Ability to navigate the Android Studio IDE.\n- A basic understanding of Android development, especially layouts.\n\nIf you have these prerequisites, let’s start.\n\n\n## The advent of the ConstraintLayout\n\nThe `ConstraintLayout` is a new layout available in the Android Support repository for building flexible and efficient layouts. Unlike preceding layouts, it is not bundled into the support library dependency. This is to enable frequent releases to be shipped easily and so the Android framework releases do not affect them directly. \n\nThis layout was introduced in May 2016 during the [Google I/O event](https://www.youtube.com/watch?v=sO9aX87hq9c). The layout comes with higher advantages, better performance, and more flexibility as compared to other layouts. This layout is backward compatible with API 9 (Android 2.3).\n\nThe `ConstraintLayout` system has three parts: constraints, equations, and solver. Constraints are relationships between your views and are determined when you set up your UI. Once you create these relationships, the system will translate them into a linear system of equations. In subsequent parts of this series, we will take a deeper look at constraints. \n\nBased on the constraints you’ve set, the unknowns as to where the views are supposed to be, are resolved. It uses the popular [cassowary](https://en.wikipedia.org/wiki/Cassowary_(software)) algorithm to know how to solve the equations (position its constraints). This algorithm is used in other popular platforms too like the AutoLayout in iOS development. The equations go in the solver and it returns the positions, and view sizes to be used in the layout.\n\nThe `ConstraintLayout` becomes very necessary most especially when building complex layouts. Android actually has other layouts, which have their own unique features. Some of which could be used to build complex layouts also. However, they have their own bottlenecks, hence the need to introduce a new layout. \n\nThese older layouts have rules that tend to be too rigid. As a result of this, the tendency to nest layouts become higher. For instance, the `LinearLayout` only permits placing views linearly, either horizontally or vertically. The `FrameLayout` places views in a stacked manner, the topmost view hides the rest. The `RelativeLayout` places views relative to each other. \n\nThe release of a much more diverse and flexible layout was long overdue.\n\n\n## Bottlenecks of other layouts\n\nOne of the major bottlenecks endured in using previous layouts is having a deep view hierarchy. A deep view hierarchy arises when your layout is deeply nested. Deeply nested in the sense that layouts are embedded in other layouts. \n\nA deeply nested layout looks like this:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout\u003e\n       \u003cLinearLayout\u003e\n           \u003cLinearLayout\u003e\n             \u003cTextView\u003e\u003c/TextView\u003e       \n           \u003c/LinearLayout\u003e\n           \u003cImageView\u003e\u003c/ImageView\u003e\n       \u003c/LinearLayout\u003e\n       \u003cTextView\u003e\u003c/TextView\u003e\n       \u003cLinearLayout\u003e\n           \u003cButton\u003e\u003c/Button\u003e\n       \u003c/LinearLayout\u003e\n    \u003c/LinearLayout\u003e\n```\n\nIn the above sample, we have a parent linear layout that contains a `LinearLayout`, a `TextView`, and another `LinearLayout`. \n\nThe first linear layout furthermore contains another `LinearLayout`, which houses a `TextView`, and an `ImageView`. Drawing this layout to the screen by the Android system is actually expensive and bad for performance.\n\n`ConstraintLayout` comes with a better approach. It actually offers a flatter view hierarchy than the snippet we have above. \n\nIf the above layout is converted to a `ConstraintLayout`, we can have something similar to this:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cConstraintLayout\u003e\n       \u003cTextView\u003e\u003c/TextView\u003e\n       \u003cImageView\u003e\u003c/ImageView\u003e\n       \u003cTextView\u003e\u003c/TextView\u003e\n       \u003cButton\u003e\u003c/Button\u003e\n    \u003c/ConstraintLayout\u003e\n```\n\nBecause the view hierarchy here is flat, it means it will take a shorter time to draw the layout, hence, an improved performance over the former. This is one of the major reasons for the advent of `ConstraintLayout`s. \n\nLayouts are key to the overall user experience of an application and so its performance should be optimized. One layout that looks similar to the `ConstraintLayout` is the `RelativeLayout`, which you may have used at some point. They are both powerful layout systems but the `ConstraintLayout` is a lot more powerful.\n\nIt is also worthy to note that they are both smart responsive layouts that scale to most device screens.\n\n\n## Some more interesting features of ConstraintLayout\n\nApart from the `ConstraintLayout` giving us a better performance and giving us scalable layouts that fit into multiple screens, there are other interesting features embedded in the layout:\n\n\n- Ability to handle `GONE` views well. `GONE` views are views that have their visibility set to gone, that is, they are as good as not being part of the layout. Ordinarily, on a `RelativeLayout` or any other layout, this can distort your design especially when views are relative to each other. \n\n\n  The `ConstraintLayout`, however, handles this scenario by adding a dimension of zero to these kinds of views, meaning their constraints are respected and the layout will eventually not be distorted.\n  \n- The `ConstraintLayout` introduces a new attribute called bias. A bias is a ratio of how the view is placed between its constraints on an axis. This is similar to the `weight` attribute provided by the `LinearLayout`. We will look deeper into bias in the next part of the series. By default, the bias is set to 0.5 and it is used for centered constrained elements.\n  \n- The layout also has another feature called chains, which is quite similar to bias. With this, the `ConstraintLayout` looks to have the dual power of the `LinearLayout` and `RelativeLayout`.\n  \n- The `ConstraintLayout` also offers the ability to perform animations. Recently, a sub-layout under the `ConstraintLayout` called `MotionLayout` was released. This is specifically for animations. We will take a look at it in part four of the series.\n\n\n## Setting up our Android project\n\nGoing forward, we will be demonstrating how to use `ConstraintLayout` in our project. For this, we will need to set up a dummy Android project. Launch Android Studio IDE and create a new Android project. \n\nWhen you open your IDE, you should see something like this:\n\n![constraintLayout-1-android-new-project](//images.ctfassets.net/1es3ne0caaid/18wO0RFvNqSimk4G6IU4O6/2fca522f276c42d6523d69096f1a3d23/constraintLayout-1-android-new-project.png)\n\nSelect the **Start a new Android Studio project** option and follow the wizard to setup your project. As usual, your app’s name and package name will be required, along with a minimum SDK of 19. Select an **Empty Activity** template and wait for Android Studio to build your project.\n\nSince Android Studio 3.0, the `ConstraintLayout` dependency comes by default when you create a new project. However, if you do not see it, you can add it following the instructions below.\n\nEnsure you have the `maven.google.com` repository declared in your project-level `build.gradle` file like this:\n\n``` gradle\n    buildscript {\n        repositories {\n            google()\n        }\n        [...]\n    }\n```\n\nThen add the dependency it in the app module `build.gradle` file like this:\n\n``` gradle\n    dependencies {\n        [...]\n        implementation 'com.android.support.constraint:constraint-layout:1.1.2'\n    }\n```\n\n\u003e If you are already following Android’s new naming conventions as announced [here](https://developer.android.com/topic/libraries/support-library/androidx-overview), you should add this instead:\n\n``` gradle\n    implementation 'androidx.constraintlayout:constraintlayout:1.1.2'\n```\n\nBe sure to sync your gradle files after adding it to make the library available for use. You are now ready to explore `ConstraintLayout`s! \n\nYou can add `ConstraintLayout`s to your `XML` file like this:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout \n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\u003e\n    \n      \u003c!-- Other views go here --!\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\n# Conclusion\n\nIn this first part of this series, we have learned that the `ConstraintLayout` comes in as a better and more efficient layout than other ones. We have also learned how to include it in our app. In subsequent parts, we will delve into deeper `ConstraintLayout`s. \n\nYou can find the repository for this project [here](https://github.com/neoighodaro/constraint-layout-demo).","metaTitle":"Getting started with ConstraintLayout in Kotlin - Part 1","metaDescription":"This five part series takes a detailed look at the ConstraintLayout feature in Android. You will learn about its key features, and build two sample apps in Kotlin. In part one, learn why ConstraintLayout was created and look at some of the problems it solves."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1CtUK8rOmUWskec6qKQ04E","type":"Entry","createdAt":"2018-08-17T22:30:49.340Z","updatedAt":"2018-08-17T22:30:49.340Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Making accessible React Native apps","url":"accessible-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNa11y","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-08-13","description":"This tutorial looks at ways to improve the accessibility of React Native apps. You will take a (provided) starter app and enhance it with various accessibility features. You will also learn how to test and measure your app's accessibility.","prerequisite":"You will need React Native and Yarn installed on your machine. Some familiarity with React Native will be helpful.","content":"In this tutorial, you’re going to learn how to make React Native apps more accessible. Specifically, we’re going to cover the following:\n\n- What is accessibility?\n- Designing apps with accessibility in mind\n- Accessibility in React Native apps\n- Accessibility testing tools\n\nOf course, we cannot hope to cover everything about accessibility. It’s a pretty big subject and it’s a continuous journey. There’s always something that you can improve in order to make the experience just a little bit more pleasant for a certain user. Instead, what we hope to achieve in this tutorial, is to take that first step into making more accessible apps.\n\nYou can view the code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/RNa11y). The `starter` branch contains the not so accessible version of the app, while the `a11y` branch contains the more accessible version.\n\n\n## Prerequisites\n\nTo follow this tutorial, you need to know the basics of creating a React Native app. \nThe React Native development environment should also be set up on your machine.\n\nWe will be using React Native version 0.56 in this tutorial. We’ll also be using [Yarn](https://yarnpkg.com/en/) to install packages.\n\n\n## What is accessibility?\n\nBefore we proceed, it’s important that we all agree on what accessibility is, in the context of a mobile app. Accessibility or a11y, means making your apps usable to both normal users and users with disabilities. Any person can have one or more form of disability. That usually includes but not limited to the following:\n\n\n- **Visual impairments** - examples include low vision, color-blindness, and total blindness.\n- **Physical or motor disabilities** - cerebral palsy, bone and joint deformities.\n- **Mental disorders** - autism spectrum disorders such as Asperger’s syndrome, and autistic disorder.\n- **Hearing impairment** - deafness and partial hearing loss.\n- **Reading disabilities** - Dyslexia.\n\nAccessibility means designing your apps in such a way that it takes all of these disabilities into consideration in order to make the user experience pleasant for everyone. \n\n\n## What you’ll be building\n\nWe won’t actually be building anything from scratch. Instead, we’re going to make a pre-built app more accessible. Here’s what the starter app looks like:\n\n![accessible-rn-starter](//images.ctfassets.net/1es3ne0caaid/5o4PrPT43eGaCw8yGswg4A/1fe4265f13dd87224aae737a8c9f95b6/accessible-rn-starter.png)\n\nThis won’t be how the final output will look like because we’ll also be taking design into consideration (though, only a little because I’m not really a designer). \n\nIf you want to follow along, clone the repo, switch to the `starter` branch and install the dependencies:\n\n```\n    git clone https://github.com/anchetaWern/RNa11y.git\n    cd RNa11y\n    git checkout starter\n    yarn install\n    react-native upgrade\n    react-native link\n    react-native run-android\n    react-native run-ios\n```\n\n## Designing apps with accessibility in mind\n\nIn this section, we’ll redesign the app so that it becomes more accessible. We will be using the [dos and don'ts on designing for accessibility](https://accessibility.blog.gov.uk/2016/09/02/dos-and-donts-on-designing-for-accessibility/) from the [GOV.UK](https://accessibility.blog.gov.uk/2016/09/02/dos-and-donts-on-designing-for-accessibility/) website as a guide. Specifically, we’re going to adopt the following dos from their guide:\n\n\n- Use simple colors\n- Make buttons descriptive\n- Build simple and consistent layouts\n- Follow a linear, logical layout\n- Write descriptive links and heading\n- Use good contrasts and a readable font size\n- Use a combination of color, shapes, and text\n- Make large clickable actions\n\nRight off the bat, you can see that the starter app violates some of these rules. The app is already following a few, but we can still improve on it.\n\n### Use simple colors\n\nThe starter app violates this rule because it’s using a dark color for its background. It’s not really easy on the eyes, so we need to update the app and card background:\n\n``` javascript\n    // file: App.js\n    const styles = {\n      container: {\n        flex: 10,\n        backgroundColor: \"#FFF\" // update this\n      }\n    };\n```\n\n``` javascript\n    // src/components/Card.js\n    const styles = StyleSheet.create({\n      card: {\n        width: 120,\n        height: 140,\n        backgroundColor: \"#3e3e3e\", // update this\n      }\n    });\n```\n\nAlso, update the `Header` component to match. This is because the items in the status bar aren’t really very readable when using a dark background:\n\n``` javascript\n    // src/components/Header.js\n    const styles = StyleSheet.create({\n      header: {\n        paddingTop: 10,\n        backgroundColor: \"#ccc\" // update this\n      },\n      header_text: {\n        fontWeight: \"bold\",\n        color: \"#333\", // update this\n      }\n    });\n```\n\nOnce that’s done, the content should now be more readable.\n\n### Make large clickable actions\n\nNext, we need to make the buttons larger. This change is specifically useful for people with physical and motor disabilities, as they’re often the ones who have difficulty in pressing small buttons.\n\nIf you inspect the app right now, you’ll see that there’s not much space we can work with. So even if we make the buttons larger, it will still be difficult to target a specific one because there won’t be ample whitespace between them. Though we still have some free space between each card so we’ll make use of that instead.\n\nIn your `Card` component, include the `Dimensions` module so that we can get the device’s width. We’ll use it to determine how much width each card can use. In this case, we have two cards in each row so we’ll just divide it by two and add a padding. We’re also making the `height` bigger because we’re anticipating the buttons to become bigger:\n\n``` javascript\n    // src/components/Card.js\n    \n    import { View, Text, Image, StyleSheet, Dimensions } from \"react-native\"; // add Dimensions\n    \n    const { width } = Dimensions.get(\"window\");\n    \n    const cardPadding = 20;\n    const styles = StyleSheet.create({\n      card: {\n        width: (width / 2) - cardPadding, // update this\n        height: 150, // update this\n      }\n    });\n```\n\nNext, we can now proceed with updating the size and padding of the button:\n\n``` javascript\n    // src/components/IconButton.js:\n    \n    const icon_color = \"#586069\";\n    const icon_size = 25; // update this\n    \n    const styles = StyleSheet.create({\n      icon: {\n        // update these:\n        paddingLeft: 10, \n        paddingRight: 10\n      }\n    });\n```\n\nAt this point, each button should be huge and visible enough to click on.\n\n### Make buttons descriptive\n\nUnfortunately, this isn’t really something that can be implemented all the time because of design constraints. If you check the app now, you’ll see that there’s not really enough space to accommodate labels for each button. \n\nThere is a solution, but we will end up giving up the current layout (two cards per row) for a one card per row layout. So the only feasible solution is to have a walkthrough for new users. This way, you can teach what each button is used for. I won’t really be covering how to do that, but there’s a [good component](https://github.com/okgrow/react-native-copilot) which allows you to implement it easily.\n\n### Use good contrasts and a readable font size\n\nIn my opinion, the app already has pretty good contrast. But to be on the safe side, we’ll tweak it some more.\n\nFirst, we have to differentiate between each individual card and the app’s background. We can do that by applying a darker background color:\n\n``` javascript\n    // src/components/Card.js\n    const cardPadding = 20;\n    const styles = StyleSheet.create({\n      card: {\n        width: width / 2 - cardPadding,\n        height: 150,\n        backgroundColor: \"#e0e0e0\", // update this\n      }\n    });\n```\n\nNext, we need to differentiate between the card’s body and its contents:\n\n``` javascript\n    // src/components/Card.js\n    const styles = StyleSheet.create({\n      name: {\n        fontSize: 16,\n        color: \"#3a3f46\", // update this\n      }\n    });\n```\n\n``` javascript\n    // src/components/IconButton.js\n    \n    const icon_color = \"#3a3f46\"; // update this\n    const icon_size = 25;\n```\n\nLastly, we need to make the text larger. While there’s no general agreement as to what font size should we be using to optimize accessibility, a [few](https://ux.stackexchange.com/questions/102813/minimum-font-size-for-mobile-view) [people](https://accessibleweb.com/wcag_2_0_developers/minimum-font-size/) seem to swear by `16px` so we’re also going with that:\n\n``` javascript\n    const styles = StyleSheet.create({\n      name: {\n        fontSize: 16, // update this\n      }\n    });\n```\n\nWe’ve skipped the following because we’re already following them:\n\n\n- Write descriptive links and heading\n- Follow a linear, logical layout\n- Use a combination of color, shapes, and text\n- Build simple and consistent layouts\n\nOnce that’s done, the app’s design should be pretty accessible. \n\n\n## Accessibility in React Native apps\n\nThe previous section discussed mainly the visual component of accessibility. In this section, we’ll look at how to make the app more accessible for people who use screen readers.\n\nFor those unfamiliar, a screen reader reads to users what they’re currently touching on the screen. This technology is mainly used by blind or visually impaired people. If a screen reader is enabled, the user has to double tap in order to activate the intended action.\n\nIn order for a screen reader to be useful, we need to properly label all the relevant components that a user will most likely interact upon. In React Native, this can be done by adding accessibility props. Here’s an example of how we can add these props:\n \n``` javascript\n    // src/components/Header.js\n    const Header = ({ title }) =\u003e {\n      return (\n        \u003cView\n          style={styles.header}\n          accessible={true}\n          accessibilityLabel={\"Main app header\"}\n          accessibilityRole={\"header\"}\n        \u003e\n          \u003cText style={styles.header_text}\u003e{title}\u003c/Text\u003e\n        \u003c/View\u003e\n      );\n    };\n```\n\nLet’s go through each of the accessibility props we’ve added to the `Header` component:\n\n\n- `accessible` - accepts a boolean value that’s used to mark whether a specific component is an accessible element or not. This means that the screen reader will read whatever label you put on it. Be careful with using this though, as it makes all of its children inaccessible. In the `Header` component above, this makes the `Text` component inside the `View` inaccessible. So the screen reader won’t actually read the title indicated in the header. It will only read the `accessibilityLabel` you’ve passed to the `View` instead. It’s a good practice to only set the `accessible` prop to `true` if you know that the component doesn’t have any child that’s supposed to be treated as an accessible element.\n- `accessibilityLabel` - the text you want the screen reader to read when the user touches over it. A good practice when using this prop is to be as descriptive as possible. Remember that the user will only rely on what’s being read by the screen reader. They actually have no idea of the context a specific component is in, so it’s always useful to repeat it in your labels. For example, each of the buttons in each card should still mention the name of the Pokemon.\n- `accessibilityRole` - the general role of the component in this app. Examples include: `button`, `link`, `image`, `text`, and in this case `header`. Note that `header` doesn’t only indicate the app’s main header. It can also indicate a section header or a list header.\n\nThe next component we’ll update is the IconButton because it’s important that the user knows that those buttons we’ve added are actually buttons:\n\n````javascript\n    // src/components/IconButton.js\n    const IconButton = ({ icon, onPress, data, label }) =\u003e {\n      return (\n        \u003cTouchableOpacity\n          accessible={true}\n          accessibilityLabel={label}\n          accessibilityTraits={\"button\"}\n          accessibilityComponentType={\"button\"}\n          onPress={() =\u003e {\n            onPress(data.name);\n          }}\n        \u003e\n          \u003cIcon\n            name={icon}\n            style={styles.icon}\n            size={icon_size}\n            color={icon_color}\n          /\u003e\n        \u003c/TouchableOpacity\u003e\n      );\n    };\n```\n\nFrom the code above, you can see that we’re accepting a new `label` prop which we then use as the value for the `accessibilityLabel`. We’ve also set the component to be `accessible` which means that when the user’s finger goes over it, the screen reader will read out the `accessibilityLabel`. \n\nBut what about `accessibilityTraits` and `accessibilityComponentType`? Well, they are the old way of setting the `accessibilityRole`. `accessibilityTraits` is only for iOS and `accessibilityComponentType` is only for Android. As [mentioned in the docs](https://facebook.github.io/react-native/docs/accessibility#accessibilitytraits-ios), these props will be deprecated soon. We’re only using it because `TouchableOpacity` doesn’t seem to be accepting `accessibilityRole`. The trait (button) wouldn’t show up as I was testing with the accessibility inspector. We’ll go over this tool in the next section.\n\nLastly, we update the `Card` component so it passes the correct labels to each of the IconButton. We’re also making the Pokemon Image and Text accessible:\n\n``` javascript\n    // src/components/Card.js\n    const Card = ({ item, viewAction, bookmarkAction, shareAction }) =\u003e {\n      return (\n        \u003cView style={styles.card}\u003e\n          \u003cImage\n            source={item.pic}\n            style={styles.thumbnail}\n            accessible={true}\n            accessibilityRole={\"image\"}\n            accessibilityLabel={`${item.name} image`}\n          /\u003e\n          \u003cText style={styles.name} accessibilityRole={\"text\"}\u003e\n            {item.name}\n          \u003c/Text\u003e\n          \u003cView style={styles.icons}\u003e\n            \u003cIconButton\n              icon=\"search\"\n              onPress={viewAction}\n              data={item}\n              label={`View Pokemon ${item.name}`}\n            /\u003e\n            \u003cIconButton\n              icon=\"bookmark\"\n              onPress={bookmarkAction}\n              data={item}\n              label={`Bookmark Pokemon ${item.name}`}\n            /\u003e\n            \u003cIconButton\n              icon=\"share\"\n              onPress={shareAction}\n              data={item}\n              label={`Share Pokemon ${item.name}`}\n            /\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    };\n```\n\nIn case you’re wondering why we didn’t add the `accessible` and `accessibilityLabel` prop in the Pokemon label, it’s because the `Text` component is [accessible by default](https://facebook.github.io/react-native/docs/text#accessible). This also means that the screen reader automatically reads the text inside of this component.\n\n\n## Accessibility testing tools\n\nIn this section, we’ll take a look at four tools you can use to test the accessibility of your React Native app.\n\n### Testing accessibility while developing the app\n\nIn iOS, you can use the Accessibility Inspector tool in Xcode. Because it’s in Xcode, you have to run the app from Xcode. You can do that by opening the `RNa11y.xcodeproj` or `RNa11y.xcworkspace` file inside your project’s `ios` directory. Then run the app using the big play button located on the upper left side of the screen. \n\nOnce the app is running, you can open the Accessibility Inspector tool by going to **Xcode** → **Open Developer Tool** → **Accessibility Inspector**.\n\nFrom there, you can select the running iOS simulator instance:\n\n![ios-accessibility-inspector-1](//images.ctfassets.net/1es3ne0caaid/6qNgPqBzxY2gQCya28EQCe/18c5511aaa2c0c91d2627c6e4af89e05/ios-accessibility-inspector-1.png)\n\nOnce you’ve selected the simulator, click on the target icon right beside the drop-down. This activates the inspection mode. You can then hover over the components which we updated earlier and verify whether the inspector is reading the labels correctly:\n\n![ios-accessibility-inspector-2](//images.ctfassets.net/1es3ne0caaid/2SeBUm2GQM08QYMyu8acM2/bc43ab7293dfc5cdb317cd5b92585106/ios-accessibility-inspector-2.png)\n\nFor Android testing, you can use the [Accessibility Scanner](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor) app. Unlike the Accessibility Inspector in iOS, you have to install it on your emulator or device in order to use it. Once installed, go to **Settings** → **Accessibility** → **Accessibility Scanner** and enable it. \n\n![android-accessibility-scanner](//images.ctfassets.net/1es3ne0caaid/23c3rdh3BeOOQuGCQoKEUk/ccd4b3393e5c944ef0d4dd661864fcd6/android-accessibility-scanner.png)\n\nOnce it’s enabled, switch to the app that we’re working on and click the floating blue button. This will scan the app for any accessibility issues. Once it’s done scanning, you can click on any of the indicated areas to view the suggestion:\n\n![image-contrast-warning](//images.ctfassets.net/1es3ne0caaid/4RRVksnQ3YsSsuQuYGo8Cg/91e7e74829222b88ac984bd166517f72/image-contrast-warning.png)\n\nThe easiest way to solve this issue is by making the card’s background color lighter. You can also try increasing the contrast of the image as suggested.\n\nInterestingly, if you remove the accessibility props from the image and scan again, you’ll see that it will no longer complain about the contrast:\n\n``` javascript\n    // src/components/Card.js\n    const Card = ({ item, viewAction, bookmarkAction, shareAction }) =\u003e {\n      return (\n        \u003cView style={styles.card}\u003e\n          \u003cImage\n            source={item.pic}\n            style={styles.thumbnail}\n          /\u003e\n          ...\n        \u003c/View\u003e\n      );\n    };\n```\n\nThis can mean that the scanner only gets picky when you’ve marked a component as accessible. To test this assumption, try removing the accessibility props from the IconButton:\n\n``` javascript\n    // src/components/IconButton.js\n    const IconButton = ({ icon, onPress, data, label }) =\u003e {\n      return (\n        \u003cTouchableOpacity\n          onPress={() =\u003e {\n            onPress(data.name);\n          }}\n        \u003e\n        ...\n        \u003c/TouchableOpacity\u003e\n      );\n    };\n```\n\nIf you run the scanner again, you’ll see that it actually picks up on the issue:\n\n![item-description-warning](//images.ctfassets.net/1es3ne0caaid/5XT7FDpT32QQW640uuy664/b711061ff8d32bb41f09996a83c82cea/item-description-warning.png)\n\n### Manual accessibility testing\n\nAs with anything, it’s always important to test things manually so you know the actual experience your users are getting. After all, accessibility is all about improving the user experience that your users get when using the app. \n\n#### Testing in iOS\nTo test things manually in iOS, open Xcode and run the app on your iOS device. You can also do this from the simulator but that kinda beats the purpose of manual testing. You won’t really have an accurate “feel” of the experience if you’re just testing from a screen.\n\nOnce the app is running on your device, go to **Settings** → **Accessibility** → **VoiceOver**. From there, you can select the **Speech** menu to change the voice (I personally prefer Siri Female). You can also adjust the speaking rate. Adjust a little bit more from the mid-point should be fast enough for most people.\n\nOnce you’re done adjusting the settings, enable the **VoiceOver** setting then switch to the app. From there, you can tap on each of the accessibility areas that we’ve set to verify if it’s being read correctly.\n\n#### Testing in Android\nTo test in Android, run the app on your Android device. Once the app is running, go to **Settings** → **Language** and set it to your preferred language. \n\nNext, go to **Accessibility** → **Text-to-speech** options and make sure the **Default language status** is fully supported. If not, you have to go to the language settings again and select a supported language. \n\nThe equivalent of VoiceOver in Android is TalkBack, you can enable it by going to **Accessibility** → **TalkBack** then enable the setting**.** Once enabled, switch to the app and verify if the labels are read correctly as you tap.\n\n\n## Further reading\n\nHere are some resources to learn more about accessibility:\n\n\n- [Accessibility by Rob Dodson](https://www.youtube.com/watch?v=KPN31sB7v8c)\n- [React Native Accessibility: Creating Inclusive Apps in React Native](https://medium.com/@larenelg/creating-inclusive-apps-in-react-native-the-coding-bit-bd3832349009)\n- [React Native: Accessibility](https://facebook.github.io/react-native/docs/accessibility)\n- [Accessibility Testing on Android](https://robots.thoughtbot.com/accessibility-testing-on-android)\n- [iOS Accessibility Tutorial: Getting Started](https://www.raywenderlich.com/845-ios-accessibility-tutorial-getting-started)\n\n\n## Conclusion\n\nThat’s it! In this tutorial, you’ve learned how to make React Native apps more accessible to a person with disabilities. I hope that you’ll use the knowledge you’ve gained in order to make accessibility a part of your development workflow. Because all of your users deserve an equal or similar ease of use.\n\nYou can view the code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/RNa11y).","metaTitle":"Making accessible React Native apps","metaDescription":"Using a starter app, learn to implement improved accessibility in React Native apps. Work through practical examples, and discover accessibility tools."}}],"defaultValue":"no pusher tech \u0026 Android","queryType":"tag","pages":3,"route":"/tutorials","query":{"product":"no pusher tech","tag":"Android","page":"3"}}},"page":"/tutorials","query":{"product":"no pusher tech","tag":"Android","page":"3"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=no%20pusher%20tech&tag=Android&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:45:20 GMT -->
</html>