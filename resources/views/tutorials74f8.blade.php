<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=GraphQL&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:39:57 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">9</span> tutorials for “<span class="css-npldjc ehwuahf2">GraphQL</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials79b9.html?product=Channels&amp;tag=GraphQL" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialse001.html?product=Beams&amp;tag=GraphQL" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="GraphQL"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/serverless-react-native-aws-amplify.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">React Native<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to build a serverless mobile app with React Native and AWS Amplify</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial is a step-by-step guide to connect AWS Amplify and AWS AppSync services with your React Native application...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-ionic-part-4.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Cordova<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">CSS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">GraphQL<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Java</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an Instagram clone with Ionic: Part 4 - Testing your Ionic application on mobile devices</h3><p class="css-k12xad e5jrto45">This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functional...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-ionic-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Cordova<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">CSS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">GraphQL<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an Instagram clone with Ionic: Part 3 - Adding data dynamically and enabling realtime functionality</h3><p class="css-k12xad e5jrto45">This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functional...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-ionic-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">CSS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Cordova<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">GraphQL<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an Instagram clone with Ionic: Part 2 - Connecting to GraphQL servers using Apollo client</h3><p class="css-k12xad e5jrto45">This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functional...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-ionic-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">CSS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">TypeScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an Instagram clone with Ionic: Part 1 - Creating the interface</h3><p class="css-k12xad e5jrto45">This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functional...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/learning-graphql-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">GraphQL<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with GraphQL in React Native</h3><p class="css-k12xad e5jrto45">GraphQL makes it easier for developers to get the specific data we want with less code. In this tutorial you will learn ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/graphql-typescript.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">GraphQL<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with GraphQL and TypeScript</h3><p class="css-k12xad e5jrto45">This tutorial provides an introduction to using TypeScript with GraphQL. You will build a simple GraphQL server in TypeS...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/authorization-graphql.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">GraphQL</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Handling authorization in GraphQL</h3><p class="css-k12xad e5jrto45">This tutorial shows how to use GraphQL to manage authorization and user roles. You will build on a previous app to creat...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-graphql-subscriptions.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">GraphQL</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building live chat app with GraphQL subscriptions</h3><p class="css-k12xad e5jrto45">This brief tutorial takes you through building a simple chat app using GraphQL and Vue.js. Users will be able to talk on...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Prev</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials74f8.html?tag=GraphQL&amp;page=1" class="css-2wakph edg0byb1">1</a><a href="#" disabled="" class="css-69ho49 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":9,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1Cf9pX8xJ3StD1AdFkys30","type":"Entry","createdAt":"2019-08-14T16:58:22.267Z","updatedAt":"2020-06-19T13:22:43.365Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to build a serverless mobile app with React Native and AWS Amplify","url":"serverless-react-native-aws-amplify","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6ac2UAo0ZUWeUYiMg2w8eK","type":"Entry","createdAt":"2018-10-03T18:51:52.293Z","updatedAt":"2018-10-03T18:51:52.293Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Aman Mittal","url":"aman-mittal","email":"amanmittal.work@gmail.com","twitter":"https://twitter.com/amanhimself","github":"https://github.com/amandeepmittal","guestWriter":true}}],"projectRepo":"https://github.com/amandeepmittal/tbrlist-amplify","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"NnKmQxhMC4UySeaEaK4K6","type":"Entry","createdAt":"2018-10-18T18:00:28.031Z","updatedAt":"2018-10-18T18:00:28.031Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Expo","url":"expo","type":"library"}}],"reviewDate":"2019-08-14","description":"This tutorial is a step-by-step guide to connect AWS Amplify and AWS AppSync services with your React Native application. Build a cross-platform mobile app by integrating frameworks like React Native and Expo CLI, with services AWS AppSync and Amplify.","prerequisite":"You will need Node 10+, npm, watchman, expo-cli 2.13+ and aws-amplify/cli 1+ installed on your machine.","content":"## Introduction\n\n[AWS Amplify](https://aws-amplify.github.io/) is a command line tool-chain that helps you to develop and connect AWS cloud services directly to any frontend environment, whether a library such as ReactJS or a mobile development framework, React Native. Building a full-stack mobile app in the real world requires a lot of basic requirements to be fulfilled. AWS Amplify tries to reduce the amount of time spent on building an application using it.\n\nThis tutorial is a step-by-step guide to connect AWS Amplify and AWS AppSync services with your React Native application. You are also going to use Expo CLI to scaffold a React Native app quickly.\n\n\n## Prerequisites\n\nYou are going to need the following installed on your local dev machine in order to follow this tutorial.\n\n- [Node.js/npm installed on your local machine](https://nodejs.org/) version \u003e= `10.x.x`\n- [watchman](https://facebook.github.io/watchman/) to watch file changes in a React Native app\n- `[expo-cli](https://www.npmjs.com/package/expo-cli)` version \u003e= `2.13.0`\n- [AWS account](https://aws.amazon.com/console/)\n- [@aws-amplify/cli version](https://www.npmjs.com/package/@aws-amplify/cli) \u003e= `1.1.18`\n\nYou should have some familiarity with React Native and mobile development, and be able to troubleshoot your own dev environment.\n\n\n\u003e **Note**: Working with development environments can be a bit tricky. Since, you are going to use Expo CLI for this tutorial.\n\n\n## What is AWS Amplify?\n\nAmazon Web Services is a well-known technology that provides cloud services. These services include hosting, storage, database technologies and managing serverless applications for both mobile and web. React Native already has an advantage by quickly and easily bootstrapping an app using tools like Expo (previously known as create-react-native-app). However, writing and managing a backend service for your app can be challenging. To help us JavaScript developers the AWS mobile team is exclusively managing a project called AWS Amplify that helps to embed cloud services and provide an infrastructure with features in the form of APIs as follows:\n\n- Authentication\n- GraphQL Client through an API, in most uses cases, AWS AppSync with offline and real-time features\n- Push Notifications\n- Interactions in the form of conversational bots\n- Cloud Storage\n- Internationalization\n\nTo install amplify CLI tool, run the following command.\n\n```\n    npm install -g @aws-amplify/cli\n```\n\n## Creating the Expo app\n\nTo create a new Expo application, run the following command from a terminal window.\n\n```\n    expo init tbrlist-amplify\n```\n\nThe Expo command line interface will prompt a few questions regarding the template of the project to be generated and the name and which package manager (*npm/yarn?*) to use to install npm dependencies. On initializing the new project it will ask you follow questions. Choose the below:\n\n- **Choose a template**: expo-template-blank\n- **Please enter a few initial configuration values**: “name”: “trblist Amplify”\n\nTake a look below for the first two questions and use npm to install app dependencies.\n\n\n![serverless-react-native-aws-amplifiy-img1](//images.ctfassets.net/1es3ne0caaid/11Tdi9VfeNgpFwxfJOgE4g/9f25e4dfee3b16c25155530aced1f51e/serverless-react-native-aws-amplifiy-img1.png)\n\nAfter scaffolding a new Expo project navigate inside the directory using `cd tbrlist-amplify`.\n\n\n## Configure AWS amplify app\n\nTo begin with configuration, it is important to have an AWS account signup. This will make it easier for you to follow the rest of the tutorial. After logging in your default browser into the AWS console, open up the command line window in the Expo app project’s root. Run the following command:\n\n```\n    amplify configure\n```\n\nPress enter to continue and it will ask you to login to AWS console account with your login credentials by opening a new browser window. Once logged in, go back to terminal window and press enter to continue, again. The CLI tool will now prompt you with a different set of questions in order to set up a cloud service and create a user in the cloud. Follow closely.\n\n\n- **Choose a region**: us-east-2\n- **Specify the username of the new IAM user**: tbrlist-amplify\n\nOn entering the username, press **enter** and it will open AWS console again in a browser window for you to add a user.\n\n\n![serverless-react-native-aws-amplifiy-img2](//images.ctfassets.net/1es3ne0caaid/2RbgoV6PexVcuPnmnlOdex/38c5c7720eb0f8d9897c0436efb4eb5c/serverless-react-native-aws-amplifiy-img2.png)\n\nMake sure in the above screen that **Programmatic access** is checked as shown. This allows you to add the user you are now creating to create resources in the form of different APIs and tools by providing you with an access key and secret key. Click on the button **Next: Permissions**.\n\n\n![serverless-react-native-aws-amplifiy-img3](//images.ctfassets.net/1es3ne0caaid/C1V9qA9mzIshk3cf660ef/23017a7dc992adeb58fe5078e7452c9e/serverless-react-native-aws-amplifiy-img3.png)\n\nOn the next page, you will see that policy has already been selected by default. This provides you the full access to AWS services by enabling your user to be as an administrator. Click **Next: Tags**. On the next page, leave it blank.\n\n\n![serverless-react-native-aws-amplifiy-img4](//images.ctfassets.net/1es3ne0caaid/1EtCiFt2dJUUDJwggPE4xR/e8aff678642fd01749e1c8248cdaa72a/serverless-react-native-aws-amplifiy-img4.png)\n\nNow, click **Next: Review**.\n\n\n![serverless-react-native-aws-amplifiy-img5](//images.ctfassets.net/1es3ne0caaid/4T9yN8gjRk06b76QqwbrsL/aafbf043e5f426b1ddb68ec365bc714b/serverless-react-native-aws-amplifiy-img5.png)\n\nEverything is good, now click **Create user**.\n\n\n![serverless-react-native-aws-amplifiy-img6](//images.ctfassets.net/1es3ne0caaid/SVooMFRmReMQTtcKOcQBE/89dc04c86c26001616e8f98cfd7f5a2d/serverless-react-native-aws-amplifiy-img6.png)\n\nYou will get an **Access key** and a **secret key**. Copy them and please enter these keys on your terminal.\n\n\n![serverless-react-native-aws-amplifiy-img7](//images.ctfassets.net/1es3ne0caaid/STxR4F1ktSHYXIFlJFzTY/90f30dcf53d94241ae0dcef8414cb6d0/serverless-react-native-aws-amplifiy-img7.png)\n\nFor **Profile Name**, we are going to enter the project name to keep things simple for now.\n\n\n![serverless-react-native-aws-amplifiy-img8](//images.ctfassets.net/1es3ne0caaid/28r9v1kZAQyJeAUyahiu2y/05540898362fe078014964582b7669a0/serverless-react-native-aws-amplifiy-img8.png)\n\nYou will get a success message that the new user has been setup and the command line prompt will exit as you can see this from the above image. The configuration of the AWS Amplify user is complete.\n\n\n## Initializing AWS Amplify\n\nIn this section, you will be initializing the Expo app in order to make it work with the AWS cloud services. The first step in this process is to run the below command from a terminal window inside the app directory.\n\n```\n    amplify init\n```\n\nThis command will you ask another set of questions in order to setup amplify SDK inside the Expo project. In the below screen you will find these questions and the answers you need to select. Most of them are default as prompted by the CLI tool. Except for the name of the environment and the default editor, you can choose the settings as default. \n\nFor the **name of the environment** you can either choose the name of the operating system you are working on or the environments such as `dev`, `local` or `production`. To choose a default editor, you are prompter with different options such as `Visual Studio Code`.\n\n\n\n![serverless-react-native-aws-amplifiy-img9](//images.ctfassets.net/1es3ne0caaid/61xEL6SqtihiutldI8WdGA/083125687393ad2d5a0c520f8afeaebd/serverless-react-native-aws-amplifiy-img9.png)\n\nWhen asked if you would like to use an AWS profile, choose **Yes**, using the user profile you created when configuring the CLI earlier: `tbrlist-amplify`.\n\n\n![serverless-react-native-aws-amplifiy-img10](//images.ctfassets.net/1es3ne0caaid/58o7L299GRNa33hAXz3ker/31843bff487e7405c5fb258355d881f0/serverless-react-native-aws-amplifiy-img10.png)\n\nAfter a few moments, it will create a new directory inside our Expo app called `amplify` that mostly contains configuration files. It will also edit `.gitignore` file so make sure you have that file at the root of your project.\n\n\n![serverless-react-native-aws-amplifiy-img11](//images.ctfassets.net/1es3ne0caaid/2cuNGI7XucVWgSZbsrOV6w/dcd96298303d5620b154fe641670f429/serverless-react-native-aws-amplifiy-img11.png)\n\nTo see if everything is connected and working, from the terminal, run `npm start` and then choose either `ios` or `android` simulator to run the React Native app.\n\n![serverless-react-native-aws-amplifiy-img12](//images.ctfassets.net/1es3ne0caaid/2qYzX9Qj5H6nlcMKFw6yjD/0cb327888c4a33fe8ccb4b1bdaad8a1b/serverless-react-native-aws-amplifiy-img12.png)\n\n\u003e **Note**: Android developers make sure that a virtual device (AVD) is already running or a device is connected to your dev machine in order to run the app. If everything runs successfully, you will get the following screen in your simulator or a real device.\n\n![serverless-react-native-aws-amplifiy-img13](//images.ctfassets.net/1es3ne0caaid/1UjxNzY4zwhiZcmWIco7Mc/5bec1b1e5c06a84a1ed72b540e1618aa/serverless-react-native-aws-amplifiy-img13.png)\n\n## Building the app\n\nIn this section, you are going to build the UI part of the React Native and Expo application. The idea behind the demo application for this tutorial is to create a \"To-be-read\" listing app such that if you read books (like me), you can track which books you want to read this year. In the application, you are going to provide two input fields. One to record the name of the book and the other one is for the author of the book. Open the `App.js` file and define an initial state.\n\n```javascript\n    // App.js\n    state = {\n      title: '',\n      author: '',\n      books: []\n    };\n```\n\nThe state in the App component contains three properties. The `title` is equivalent to the title of a book, `author` for a book's author name and last one is an array that keeps records of all whole list. Modify the App component further as below.\n\n```javascript\n    // App.js\n    import React from 'react';\n    import { StyleSheet, Text, TextInput, Button, View } from 'react-native';\n    export default class App extends React.Component {\n      state = {\n        title: '',\n        author: '',\n        books: []\n      };\n      onChangeText = (key, val) =\u003e {\n        this.setState({ [key]: val });\n      };\n      render() {\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cTextInput\n              style={styles.input}\n              value={this.state.title}\n              onChangeText={val =\u003e this.onChangeText('title', val)}\n              placeholder=\"What do you want to read?\"\n            /\u003e\n            \u003cTextInput\n              style={styles.input}\n              value={this.state.author}\n              onChangeText={val =\u003e this.onChangeText('author', val)}\n              placeholder=\"Who wrote it?\"\n            /\u003e\n            \u003cButton\n              onPress={() =\u003e alert('Success!')}\n              title=\"Add to TBR\"\n              color=\"#eeaa55\"\n            /\u003e\n          \u003c/View\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        paddingHorizontal: 10,\n        paddingTop: 50\n      },\n      input: {\n        height: 50,\n        borderBottomWidth: 2,\n        borderBottomColor: 'blue',\n        marginVertical: 10\n      }\n    });\n```\n\nThe above `App` component is a close version of how the app is going to behave in the future. So far you have both the input fields and a button. Each input field has an `onPress` method that will trigger the API to update the database later when making connections to the GraphQL API. The `Button` component above also displays a success alert message when clicked.\n\nOn running the command `npm start`, open the app on the desired simulator. You will get the following result.\n\n![serverless-react-native-aws-amplifiy-img14](//images.ctfassets.net/1es3ne0caaid/6Jfa6EgHbguj2h3LDl4xjl/6e03303a624801179e6f49936e4c9d76/serverless-react-native-aws-amplifiy-img14.png)\n\n## Adding a GraphQL API using AppSync\n\nTo add a GraphQL API to the current app, we are going to leverage AWS AppAsync. It uses GraphQL, an API query language solely focus on data-driven applications. You don’t have to write and hook a complete backend infrastructure. It offers realtime updates and built-in offline support along with first-class integration with ElasticSearch, DynamoDB, and AWS Lambda.\n\nFrom the terminal window, run the below command.\n\n```\n    amplify add api\n```\n\nOn the running the above command, the CLI tool prompts you whether to initiate a GraphQL API or a REST API. Note that any REST API created using this service will lead to the use of Lambda functions that require Node.js functions to be written. Choose the option GraphQL API here.\n\n\n![serverless-react-native-aws-amplifiy-img15](//images.ctfassets.net/1es3ne0caaid/2QNaDi9hIxJknBNqQDzS0J/e37ddbb37a9b1a959c5be3f4b9a35213/serverless-react-native-aws-amplifiy-img15.png)\n\nIt will continue to ask you a set of questions. Here is the recommended answer to each question that you need to fill in order to proceed with this tutorial.\n\n- **Provide API name**: tbrlist\n- **Choose an authorization type for the API**: API key\n- **Do you have an annotated GraphQL schema?** No\n- **Do you want a guided schema creation?** Yes\n- **What best describes your project**: Single object with fields (e.g., “Todo” with ID, name, description)\n- **Do you want to edit the schema now?** Yes\n\nAnswering **Yes** to the last question will open the default text editor on your local machine with a new file called `schema.graphql`. In this file, you can modify the default schema for your GraphQL API object. Since you choose a single object that can have multiple fields, edit the file as follows:\n\n```\n    type Book @model {\n      id: ID!\n      title: String!\n      author: String\n    }\n```\n\nThe `@model` is for storing types in Amazon DynamoDB. Yes, behind the scenes, the data passed through the GraphQL API to store will be stored in DynamoDB. Note that this schema represents a single model of how data is going to be saved. Also, you can completely change this schema or tweak a little according to your needs later from the AWS Console. Once you have edited the schema as above, save the file and go back to terminal window and press enter to continue. It will then complete the setup.\n\nThis step creates a local configuration for the AppSync API. If you need to modify anything, you can before executing the next command. Once the next command `amplify push` is executed, it will write all those changes you did in the cloud services in the real time. Now run the command.\n\n\n![serverless-react-native-aws-amplifiy-img16](//images.ctfassets.net/1es3ne0caaid/ORq6rygU1WLBQPHChNBiK/a4351e910bb41a95ac7448381650030a/serverless-react-native-aws-amplifiy-img16.png)\n\n \nYou will get a prompt, **Do you want to generate code for your newly created GraphQL API?** We are going to with the default and press **Y** for yes. Once the GraphQL schema compilation is done you will get a success message and a new configuration file in the project's root called `aws-export.js`. You are going to use this file to send queries and mutations.\n\nTo make sure that the API is created, visit **AWS Console** and in the AWS services section on the home page, search for AWS AppSync. You will be directed to a page where the GraphQL APIs are stored such as below.\n\n\n![serverless-react-native-aws-amplifiy-img17](//images.ctfassets.net/1es3ne0caaid/WbLCFiQb18EV1T1UeMYRW/e3f5ebc51f205bd866843a2ebc4b7c98/serverless-react-native-aws-amplifiy-img17.png)\n\n\n## Mutating the GraphQL API\n\nIn order to proceed, you are now required to install a dependency related to AWS Amplify. Open a terminal window and execute the following command.\n\n```\n    npm install --save aws-amplify\n```\n\nThis dependency will allow you to make API calls to the GraphQL service. Open up `App.js` file and let us first configure a little more to be able to communicate with the database API. Add the following just after you have imported everything.\n\n```javascript\n    import Amplify from '@aws-amplify/core';\n    import config from './aws-exports';\n    Amplify.configure(config);\n```\n\nNext, import `API` and `graphqlOperation` helpers from `@aws-amplify/api`. Using both of them will help you execute any query on performing an action, such as fetching books or any mutation such as creating a new record.\n\n```\n    import API, { graphqlOperation } from '@aws-amplify/api';\n```\n\nLet us create the first mutation to add a new book. Mutations in GraphQL are similar to modifying data in a REST API using either HTTP `POST` or `PUT`.\n\n```javascript\n    const AddBook = `\n    mutation ($title: String! $author: String) {\n      createBook(input: {\n        title: $title\n        author: $author\n      }) {\n        id title author\n      }\n    }\n    `;\n```\n\nThis mutation `AddBook` take a title and an author field of type String. In the end, it just returns the whole book object along with an `id` that is automatically created by the GraphQL API in the database. However, this mutation will be useful when it executes. In the next snippet of code, you are going to add a new asynchronous function called `addBook` just before the render function of the `App` component.\n\n```javascript\n    addBook = async () =\u003e {\n      if (this.state.title === '' || this.state.author === '') return;\n      const book = { title: this.state.title, author: this.state.author };\n      try {\n        const books = [...this.state.books, book];\n        this.setState({ books, title: '', author: '' });\n        await API.graphql(graphqlOperation(AddBook, book));\n        console.log('success');\n      } catch (err) {\n        console.log('error: ', err);\n      }\n    };\n```\n\nIn the above snippet, there is an `if` statement to check whether there is an empty field or not. If there is one, don’t mutate data to the database and just return in our case for this demo. You can, however, extend this and show an error to the user on the UI. Next, using `try/catch` syntax, `API.graphql` is executed to add the record to the database by running the mutation `AddBook`.\nAlso, add this function to the `onPress` prop on the `Button` component.\n\n```javascript\n    \u003cButton onPress={this.addBook} title=\"Add to TBR\" color=\"#eeaa55\" /\u003e\n```\n\nHere is result you get.\n\n\n![serverless-react-native-aws-amplifiy-img18](//images.ctfassets.net/1es3ne0caaid/1xPjsi5259llX76zvjNZ8F/29288d3f9a800606adafbf276a7a1635/serverless-react-native-aws-amplifiy-img18.gif)\n\nTo verify that the data has been stored there are two ways. First, since there is a `console.log` statement, in the Expo logs generated, on add the book, it should prompt the word **success**.\n\n\n![serverless-react-native-aws-amplifiy-img19](//images.ctfassets.net/1es3ne0caaid/3VFdXyBh2Wbrh9ZUcYECGz/b1270b091afd1131785b5ac04b657a0e/serverless-react-native-aws-amplifiy-img19.png)\n\nThe second way is to visit the API's data source. Select the API first, then from sidebar menu, select **Data Sources** and then click **Resource**.\n\n\n![serverless-react-native-aws-amplifiy-img20](//images.ctfassets.net/1es3ne0caaid/2OflHt2UwBxx7jNQ5B3hj5/b156f44bbab89c801aec456c0a4aa61a/serverless-react-native-aws-amplifiy-img20.png)\n\nYou will now be directed DynamoDB page associated with the API where data table is actually stored as you can see below.\n\n\n![serverless-react-native-aws-amplifiy-img21](//images.ctfassets.net/1es3ne0caaid/1GcgS77xuuslmYMOgDHGc9/307c59f16813d0c46f0345300b4145ad/serverless-react-native-aws-amplifiy-img21.png)\n\nIn the below image do notice that fields such as `_typename`, `id`, `createdAt` and `updatedAt` are automatically created the AppSync API.\n\n\n![serverless-react-native-aws-amplifiy-img22](//images.ctfassets.net/1es3ne0caaid/5BzLKZmJy2Bf0a0r9cFvFC/022d9f041c510b471e7f1f20db4e2baf/serverless-react-native-aws-amplifiy-img22.png)\n\nHere is the complete `App.js` code so far.\n\n```javascript\n    //App.js\n    import React from 'react';\n    import { StyleSheet, Text, TextInput, Button, View } from 'react-native';\n    import Amplify from 'aws-amplify';\n    import config from './aws-exports';\n    Amplify.configure(config);\n    import { API, graphqlOperation } from 'aws-amplify';\n    const AddBook = `\n    mutation ($title: String! $author: String) {\n      createBook(input: {\n        title: $title\n        author: $author\n      }) {\n        id title author\n      }\n    }\n    `;\n    export default class App extends React.Component {\n      state = {\n        title: '',\n        author: '',\n        books: []\n      };\n      onChangeText = (key, val) =\u003e {\n        this.setState({ [key]: val });\n      };\n      addBook = async () =\u003e {\n        if (this.state.title === '' || this.state.author === '') return;\n        const book = { title: this.state.title, author: this.state.author };\n        try {\n          const books = [...this.state.books, book];\n          this.setState({ books, title: '', author: '' });\n          console.log('books: ', books);\n          await API.graphql(graphqlOperation(AddBook, book));\n          console.log('success');\n        } catch (err) {\n          console.log('error: ', err);\n        }\n      };\n      render() {\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cTextInput\n              style={styles.input}\n              value={this.state.title}\n              onChangeText={val =\u003e this.onChangeText('title', val)}\n              placeholder=\"What do you want to read?\"\n            /\u003e\n            \u003cTextInput\n              style={styles.input}\n              value={this.state.author}\n              onChangeText={val =\u003e this.onChangeText('author', val)}\n              placeholder=\"Who wrote it?\"\n            /\u003e\n            \u003cButton onPress={this.addBook} title=\"Add to TBR\" color=\"#eeaa55\" /\u003e\n          \u003c/View\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        paddingHorizontal: 10,\n        paddingTop: 50\n      },\n      input: {\n        height: 50,\n        borderBottomWidth: 2,\n        borderBottomColor: 'blue',\n        marginVertical: 10\n      }\n    });\n```\n\n\n## Querying the data from the API\n\nNow, add a query to fetch the list of books and display them below the input fields in the app's UI. Open `App.js` file and add the below snippet just above the existing GraphQL mutation.\n\n```javascript\n    const Listbooks = `\n    query {\n      listBooks {\n        items {\n          id title author\n        }\n      }\n    }\n    `;\n```\n\nTo fetch the list of books from the data source, add a lifecycle method just below where you have initialized the state inside the `App` component.\n\n```javascript\n    async componentDidMount() {\n            try {\n                const books = await API.graphql(graphqlOperation(ListBooks));\n                console.log('books: ', books);\n                this.setState({ books: books.data.listBooks.items });\n            } catch (err) {\n                console.log('error: ', err);\n            }\n        }\n```\n\nFetching data using a query is simpler than sending a mutation. Here is the complete code of `App.js` file with a query and the list books rendered with its own styling after the `Button` component using JavaScript's map function.\n\n```javascript\n    // App.js\n    import React from 'react';\n    import { StyleSheet, Text, TextInput, Button, View } from 'react-native';\n    import Amplify from 'aws-amplify';\n    import config from './aws-exports';\n    Amplify.configure(config);\n    import { API, graphqlOperation } from 'aws-amplify';\n    const ListBooks = `\n    query {\n      listBooks {\n        items {\n          id title author\n        }\n      }\n    }\n    `;\n    const AddBook = `\n    mutation ($title: String! $author: String) {\n      createBook(input: {\n        title: $title\n        author: $author\n      }) {\n        id title author\n      }\n    }\n    `;\n    export default class App extends React.Component {\n      state = {\n        title: '',\n        author: '',\n        books: []\n      };\n      async componentDidMount() {\n        try {\n          const books = await API.graphql(graphqlOperation(ListBooks));\n          console.log('books: ', books);\n          this.setState({ books: books.data.listBooks.items });\n        } catch (err) {\n          console.log('error: ', err);\n        }\n      }\n      onChangeText = (key, val) =\u003e {\n        this.setState({ [key]: val });\n      };\n      addBook = async () =\u003e {\n        if (this.state.title === '' || this.state.author === '') return;\n        const book = { title: this.state.title, author: this.state.author };\n        try {\n          const books = [...this.state.books, book];\n          this.setState({ books, title: '', author: '' });\n          console.log('books: ', books);\n          await API.graphql(graphqlOperation(AddBook, book));\n          console.log('success');\n        } catch (err) {\n          console.log('error: ', err);\n        }\n      };\n      render() {\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cTextInput\n              style={styles.input}\n              value={this.state.title}\n              onChangeText={val =\u003e this.onChangeText('title', val)}\n              placeholder=\"What do you want to read?\"\n            /\u003e\n            \u003cTextInput\n              style={styles.input}\n              value={this.state.author}\n              onChangeText={val =\u003e this.onChangeText('author', val)}\n              placeholder=\"Who wrote it?\"\n            /\u003e\n            \u003cButton onPress={this.addBook} title=\"Add to TBR\" color=\"#eeaa55\" /\u003e\n            {this.state.books.map((book, index) =\u003e (\n              \u003cView key={index} style={styles.book}\u003e\n                \u003cText style={styles.title}\u003e{book.title}\u003c/Text\u003e\n                \u003cText style={styles.author}\u003e{book.author}\u003c/Text\u003e\n              \u003c/View\u003e\n            ))}\n          \u003c/View\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        paddingHorizontal: 10,\n        paddingTop: 50\n      },\n      input: {\n        height: 50,\n        borderBottomWidth: 2,\n        borderBottomColor: 'blue',\n        marginVertical: 10\n      },\n      book: {\n        borderBottomWidth: 1,\n        borderBottomColor: '#ddd',\n        paddingVertical: 10\n      },\n      title: { fontSize: 16 },\n      author: { color: 'rgba(0, 0, 0, .5)' }\n    });\n```\n\nBelow image is the final result of the application.\n\n\n![serverless-react-native-aws-amplifiy-img23](//images.ctfassets.net/1es3ne0caaid/3Qdia2Q9u4cfJ2flIUxct4/756f9e43395c91b8c3bb7672a476fae0/serverless-react-native-aws-amplifiy-img23.png)\n\n## Conclusion\n\n*Congratulations!* You have successfully built a cross-platform mobile app by integrating frameworks like React Native and Expo with services AWS AppSync and Amplify. If you want to dig deep, possibilities are endless for the serverless architecture. Refer to the [AWS Amplify community page](https://amplify.aws/community/) for more examples and use cases.\n\nYou can find the complete code for this tutorial in this [GitHub repository](https://github.com/amandeepmittal/tbrlist-amplify).","metaTitle":"Build a serverless app with React Native and AWS Amplify","metaDescription":"This tutorial is a step-by-step guide to connect AWS Amplify and AWS AppSync services with your React Native application. Build a cross-platform mobile app by integrating frameworks like React Native and Expo CLI, with services AWS AppSync and Amplify."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7yewCXxjJklEoqK6pkJvnA","type":"Entry","createdAt":"2019-07-15T19:05:47.959Z","updatedAt":"2019-07-15T19:05:47.959Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an Instagram clone with Ionic: Part 4 - Testing your Ionic application on mobile devices","url":"instagram-clone-ionic-part-4","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/ionic-insta-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2019-07-15","description":"This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functionalities. In this fourth and final part, make your servers publicly accessible so you could test the application on mobile devices.","prerequisite":"You will need Node 10+, Node Package Manager 6+, Cordova 8+ and Docker 18+ installed on your machine.","content":"Through the series, our GraphQL and event server have been accessible via `localhost`. Since we have been viewing the application on our local browser, the browser can access the localhost without any issues. These servers need to be accessible on a public URL so that the mobile device can connect to them.\n\n\n## Prerequisites\n- You should have followed through the earlier parts of the series.\n- Basic knowledge of JavaScript.\n- [Node](http://www.nodejs.org) installed on your machine (v10.13.0)\n- [Node Package Manager](https://www.npmjs.com/) installed on your machine (v 6.4.1)\n- [Cordova](https://cordova.apache.org/) installed on your machine (v 8.1.2)\n- Docker installed on your machine. (version 18.09.2) Download [here](https://www.docker.com/community-edition).\n\n\n## Using localhost.run to share your localhost\n\nTo share your localhost on a public URL, let’s use [localhost.run](https://localhost.run). There are no downloads required to use this service. Just open your terminal and paste a code:\n\n```\n    ssh -R 80:localhost:\u003cPORT_YOU_WANT_TO_SHARE\u003e ssh.localhost.run\n```\n\n\u003e Remember to replace `PORT_YOU_WANT_TO_SHARE` with the actual port on the local server your application is running on.\n\n\n## Making the GraphQL server publicly accessible\n\nNow, your GraphQL server was accessible on port 4466 of your local machine, go ahead and then run this in the terminal:\n\n```\n    ssh -R 80:localhost:4466 ssh.localhost.run\n```\n\n\u003e Ensure that the GraphQL server is running by checking docker on your machine\n\nThis command returns a URL as a response. Go ahead and then paste the URL in your `app.module.ts` as the link to your GraphQL server:\n\n```typescript\n    // src/app/app.module.ts\n    \n    // [...] \n    \n    export class AppModule {\n      constructor(apollo: Apollo, httpLink: HttpLink) {\n        apollo.create({\n          link: httpLink.create({ uri: 'LINK_TO_PUBLICLY_ACCESIBLE_URL' }), // uri specifies the endpoint for our graphql server\n          cache: new InMemoryCache()\n        })\n      }\n    }\n```    \n\n\n## Making the event server publicly accessible\n\nEarlier in the series, we created the event server and served it on port 3128 of the localhost. To make it public accessible too, run this command:\n\n```\n    ssh -R 80:localhost:3128 ssh.localhost.run\n```\n\n\u003e Ensure that the event server is still running. If it isn’t running, navigate to the `server/` of the project and run `node server.js`\n\nYou will be provided with a publicly accessible URL for the event server. Now, let’s update the places where requests were made to the event server in the code.\n\nFirst, update the `uploadPost` method in the `CreatePost` page:\n\n```typescript\n    // src/pages/create-post/create-post.ts\n    \n    // [...]\n    \n    export class CreatePostPage {\n      // [...]\n    \n      public uploadPost() {\n        this.apollo.mutate({\n          mutation: createUserPost,\n          variables: {\n            image_url: this.image_url,\n            description: this.description,\n            likes: 10,\n            postedAt: this.posted_at,\n            user: { \"connect\": { \"id\": this.user_id } }\n          }\n        }).subscribe((data) =\u003e {\n          console.log('uploaded successfuly');\n          // after sucessful upload, trigger pusher event\n          let post_response: any = data;\n          this.http.post('LINK_TO_PUBLICLY_ACCESSIBLE_URL/trigger-post-event', post_response.data.createPost)\n            .subscribe(() =\u003e {\n              this.showAlert('Post Shared', 'Your post has been shared with other users');\n              this.navCtrl.push(HomePage);\n            });\n        }, (error) =\u003e {\n          this.showAlert('Error', 'There was an error sharing your post, please retry');\n          console.log('there was an error sending :the query', error);\n        })\n      }\n    \n      // [...]\n    }\n```\n\nAlso, go ahead to update the `postComment` method in the `CommentPage`:\n\n```typescript\n    // src/pages/comment/comment.ts\n    \n    // [...]\n    \n    export class CommentPage {\n      // [...]\n    \n      public postComment() {\n        this.apollo.mutate({\n          mutation: makeComment,\n          variables: {\n            message: this.user_comment,\n            postedAt: (new Date()).toISOString(),\n            user: { connect: { id: \"YOUR_USER_ID_FROM_GRAPHQL_SERVER\" } },\n            post: { connect: { id: this.post_id } }\n          }\n        }).subscribe((data) =\u003e {\n          let post_response: any = data;\n          // after successful upload, trigger new comment event\n          this.http.post('LINK_TO_PUBLICLY_ACCESSIBLE_URL/trigger-comment-event', post_response.data.createComment)\n            .subscribe(() =\u003e {\n              this.showAlert('Success', 'Comment posted successfully');\n            });\n        }, (error) =\u003e {\n          this.showAlert('Error', 'Error posting comment');\n        });\n      }\n    \n      // [...]\n    }\n```\n\nNow that this is all done, we can access both the GraphQL server and event server anywhere the code is run.\n\nNow, navigate to the root directory of your project and run your application:\n\n```\n    ionic serve -c\n```\n\n## Using the IonicDevApp\n\nTo test the application on your mobile device, download the [IonicDevApp](https://ionicframework.com/docs/pro/devapp/) on your mobile device. Ensure that your device and computer are on the same network and you should see this demo application listed there:\n\n\n![instagram-clone-ionic-testing-img1](//images.ctfassets.net/1es3ne0caaid/4lxO3Esb7emGocD27lhtHh/1e6d9a96e8ea8fe1fd802025de0d711b/instagram-clone-ionic-testing-img1.png)\n\nNow, testing with the device, we get the following:\n\n\n![instagram-clone-ionic-testing-img2](//images.ctfassets.net/1es3ne0caaid/2Uhn25upplCXU6iqyfadGh/92b3d3b1fd292f82349c25bce0023faa/instagram-clone-ionic-testing-img2.png)\n![instagram-clone-ionic-testing-img3](//images.ctfassets.net/1es3ne0caaid/6gYK4Js7v0ntF3UXwhaxnO/caf9582f605168f8cb54e474a3e280e3/instagram-clone-ionic-testing-img3.png)\n\n\n\n![instagram-clone-ionic-testing-img4](//images.ctfassets.net/1es3ne0caaid/36egj1E86rMXIeLUUCjhKR/6b8f5656c0e7dcbf2955ae4b07649ddf/instagram-clone-ionic-testing-img4.png)\n![instagram-clone-ionic-testing-img5](//images.ctfassets.net/1es3ne0caaid/1wh9dpUDH4P7aI8UsyEJpq/3f8416656595940fb1b6cefd0af4121d/instagram-clone-ionic-testing-img5.png)\n\n\n![instagram-clone-ionic-testing-img6](//images.ctfassets.net/1es3ne0caaid/36bEcaL8xNWD7uqYYn8mvl/bcda487222cf8b454f33ad01f5509d2f/instagram-clone-ionic-testing-img6.gif)\n\n\nHead over [here](https://ionicframework.com/docs/v3/intro/deploying/) for more information on how to deploy to target devices.\n\n\n## Conclusion\n\nIn this four-part series, we walked through building a simple Instagram clone with Ionic. In the [first part](https://pusher.com/tutorials/instagram-clone-ionic-part-1) of the series, we looked at how to build the interface of the application. In the [second part](https://pusher.com/tutorials/instagram-clone-ionic-part-2), we went through an introduction to GraphQL and how to fetch data dynamically in the application. The [third part](https://pusher.com/tutorials/instagram-clone-ionic-part-3) of the series walked through uploading posts and comments from the application using [Cloudinary](https://cloudinary.com) and Pusher to enable realtime functionality. Finally, in this part of the series, we looked at steps to making your servers publicly accessible so we could test the application on mobile devices.\n\nFeel free to use the concepts learned in this series when you’re building your own applications. Here’s a link to the full [GitHub](https://github.com/oreHGA/ionic-insta-clone) repository.","metaTitle":"Build an Instagram clone with Ionic - Part 4","metaDescription":"This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functionalities. In this fourth and final part, make your servers publicly accessible so you could test the application on mobile devices."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Vtewr1gxpgO251O5fz97K","type":"Entry","createdAt":"2019-07-11T23:06:46.966Z","updatedAt":"2019-07-11T23:06:46.966Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an Instagram clone with Ionic: Part 3 - Adding data dynamically and enabling realtime functionality","url":"instagram-clone-ionic-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/ionic-insta-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2019-07-02","description":"This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functionalities. In part three, create functionality that enables you to feed data into the data store of the application using GraphQL mutations and allowing users to see posts and comments in realtime.","prerequisite":"You will need Node 10+, Node Package Manager 6+, Cordova 8+ and Docker 18+ installed on your machine.","content":"The [first part](https://pusher.com/tutorials/instagram-clone-ionic-part-1) of this series focused on building the interface of the application, and the [second part](https://pusher.com/tutorials/instagram-clone-ionic-part-2) on connecting the application to dynamic data in the GraphQL server. This part of this series will walk through creating functionality that enables you to feed data into the data store of the application using GraphQL mutations and allowing users to see posts and comments in realtime.\n\n\n## Prerequisites\n- You should have followed through the earlier parts of the series.\n- Basic knowledge of JavaScript.\n- [Node](http://www.nodejs.org) installed on your machine (v10.13.0)\n- [Node Package Manager](https://www.npmjs.com/) installed on your machine (v 6.4.1)\n- [Cordova](https://cordova.apache.org/) installed on your machine (v 8.1.2)\n- Docker installed on your machine. (version 18.09.2) Download [here](https://www.docker.com/community-edition).\n\n\n## Uploading posts from the application\n\nAt the moment, the homepage of the application looks like this:\n\n\n![instagram-clone-ionic-realtime-img1](//images.ctfassets.net/1es3ne0caaid/4zNrFPCu0xcufB8Zvsp06y/da90a8409de49c84d6e463990fe19a6b/instagram-clone-ionic-realtime-img1.png)\n\nThe **+** button at the bottom right has no functionality attached to it. Let’s make the button trigger the addition of new posts. Create a new page that we will take the user to when they click the button.\n\n\n    ionic generate page CreatePost\n\n### Registering the new page\nGo ahead to add the `CreatePostPage` to the `declarations` and `entryComponents` in the `src/app/app.module.ts`:\n\n```typescript\n    // src/app/app.module.ts\n    // [...]\n    import { CreatePostPage } from '../pages/create-post/create-post';\n    // [...]\n    \n    @NgModule({\n      declarations: [\n        // [...]\n        CreatePostPage\n      ],\n      // [...]\n      entryComponents: [\n        // [...]\n        CreatePostPage\n      ],\n      // [...]\n    })\n    \n    export class AppModule {\n      // [...]\n    }\n```\n\n### Navigating from the HomePage to the CreatePostPage\nNow that we have that set, update the  `src/pages/home/home.ts`  with the `createPost` function to navigate to the `CreatePostPage`:\n\n```typescript\n    // src/pages/home/home.ts\n    [...]\n    import { CreatePostPage } from '../create-post/create-post';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html',\n      entryComponents: [ProfilePage, CommentPage, CreatePostPage]\n    })\n    \n    export class HomePage implements OnInit {\n      //[...]\n    \n      public createPost() {\n        // this function will redirect the user to the createPost page\n        this.navCtrl.push(\n          CreatePostPage,\n          new NavParams({ user_id: \"USER_ID_FETCHED_FROM_GRAPHQL_SERVER\" })\n        );\n      }\n    }\n```\n\n\u003e **Note**: Currently, the `user_id` is hardcoded. If you want to get yours, navigate to your GraphQL server http://localhost:4466. Run the query to fetch all your users and then pick an `id` of your choice:\n\n```\n    # GraphQL query on the console to fetch users\n    query{\n      users{\n        id\n        username\n        followers\n        following\n      }\n    }\n```\n\n### Update the HomePage to navigate to the CreatePostPage\nOn the `home.html` page, update the view to trigger the `createPost()` method. Now update your `home.html` to look like this:\n\n```html\n    \u003c!-- src/pages/home/home.html --\u003e\n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003eInstagram Clone\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \n    \u003cion-content\u003e\n      \u003c!-- this is where the posts will be --\u003e\n      \u003cdiv *ngFor=\"let post of posts\"\u003e\n        \u003cion-card class=\"single-post-home\"\u003e\n          \u003cion-item (click)=\"toProfilePage(post.user.id)\"\u003e\n            \u003cion-avatar item-start\u003e\n              \u003cimg [src]=\"post.user.avatar\"\u003e\n            \u003c/ion-avatar\u003e\n            \u003ch2\u003e{{post.user.username}}\u003c/h2\u003e\n          \u003c/ion-item\u003e\n    \n          \u003cimg [src]=\"post.image_url\"\u003e\n    \n          \u003cion-card-content\u003e\n            \u003cp\u003e\n              \u003cstrong\u003e{{post.user.username}}\u003c/strong\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp; {{post.description}}\u003c/p\u003e\n          \u003c/ion-card-content\u003e\n    \n          \u003cion-row\u003e\n            \u003cion-col\u003e\n              \u003cbutton ion-button icon-start clear small (click)=\"likePost()\"\u003e\n                \u003cion-icon name=\"heart\"\u003e\u003c/ion-icon\u003e\n                \u003cdiv\u003e{{post.likes}} likes\u003c/div\u003e\n              \u003c/button\u003e\n            \u003c/ion-col\u003e\n            \u003cion-col\u003e\n              \u003cbutton ion-button icon-start clear small (click)=\"toCommentSection(post)\"\u003e\n                \u003cion-icon name=\"text\"\u003e\u003c/ion-icon\u003e\n                \u003cdiv\u003e{{post.comments.length}} Comments\u003c/div\u003e\n              \u003c/button\u003e\n            \u003c/ion-col\u003e\n          \u003c/ion-row\u003e\n    \n        \u003c/ion-card\u003e\n      \u003c/div\u003e\n    \n      \u003cion-fab bottom right\u003e\n        \u003cbutton ion-fab mini (click)=\"createPost()\"\u003e\n          \u003cion-icon name=\"add\"\u003e\u003c/ion-icon\u003e\n        \u003c/button\u003e\n      \u003c/ion-fab\u003e\n    \u003c/ion-content\u003e\n```\n\n### Adding functionality to the CreatePostPage\nEdit your `create-post.html` page to look like this:\n\n```html\n    \u003c!-- src/pages/create-post/create-post.html\n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003eCreate a new post\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \n    \n    \u003cion-content\u003e\n      \u003cdiv style=\"text-align:center; padding: 16px\"\u003e\n        \u003cp\u003eEnter a post description and hit \u003cem\u003eCapture Image\u003c/em\u003e to create a post\u003c/p\u003e\n      \u003c/div\u003e\n    \n      \u003cdiv style=\"display: flex;justify-content: center;align-items: center;flex-direction: column;\"\u003e\n        \u003cion-item style=\"padding:16px\"\u003e\n          \u003cion-label floating\u003ePost Caption:\u003c/ion-label\u003e\n          \u003cion-input [(ngModel)]=\"description\" type=\"text\"\u003e\u003c/ion-input\u003e\n        \u003c/ion-item\u003e\n    \n        \u003cbutton style=\"width:80%; margin-top:20px\" ion-button (click)=\"loadWidget()\"\u003e\n          Capture Image\n        \u003c/button\u003e\n      \u003c/div\u003e\n    \n    \u003c/ion-content\u003e\n```\n\n### Using the Cloudinary Upload Widget to upload images\nTo allow image uploads in the application, let’s use the [Cloudinary Upload Widget](https://cloudinary.com/documentation/upload_widget). [Cloudinary](https://cloudinary.com) is a media full stack that enables you to easily handle image and video storage/manipulations in your applications. The best part about the Upload Widget is that it also allows your users to upload images from multiple sources which include: camera, device storage, web address, Dropbox, Facebook, and Instagram.\n\nTo get started with Cloudinary first sign up for a free account [here](https://cloudinary.com/signup). After creating an account, you will need to [set up an upload preset](https://cloudinary.gitbook.io/cloudy-cam/setting-up-a-cloudinary-account) that will help you upload to Cloudinary with ease.\n\n\n\u003e Note your Cloudinary `CLOUD_NAME` and Cloudinary `UPLOAD_PRESET` for use later in this article.\n\nInclude the Cloudinary Widget JavaScript file in the `\u003chead\u003e` of your `index.html`:\n\n```html\n    \u003c!-- src/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\" dir=\"ltr\"\u003e\n    \n    \u003chead\u003e\n      \u003c!-- other includes --\u003e \n      \u003c!-- include cloudinary javascript --\u003e\n      \u003cscript src=\"https://widget.cloudinary.com/v2.0/global/all.js\" type=\"text/javascript\"\u003e\u003c/script\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003c!-- --\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNow, you’re ready to use Cloudinary in your application. Edit the `create-post.ts` as follows. First include the necessary modules and declare `cloudinary` for use in the application:\n\n```typescript\n    // src/pages/create-post/create-post.ts\n    import { Component } from '@angular/core';\n    import { IonicPage, NavController, NavParams, AlertController } from 'ionic-angular';\n    import { Apollo } from 'apollo-angular';\n    import gql from 'graphql-tag';\n    import { HomePage } from '../home/home';\n    import { HttpClient } from '@angular/common/http';\n    \n    declare var cloudinary;\n    \n    //[...]\n```\n\nLet’s create a new mutation that will be responsible for creating a post on the GraphQL server we have running:\n\n```typescript\n    // src/pages/create-post/create-post.ts\n    //[...]\n    \n    // mutation to create a new post\n    const createUserPost = gql`\n      mutation createPost($image_url: String!, $description: String, $likes: Int, $postedAt: DateTime!,\n      $user: UserCreateOneWithoutPostsInput!){\n        createPost(data: {image_url: $image_url, description: $description, likes: $likes, postedAt: $postedAt, user: $user}){\n          id\n          image_url\n          description\n          likes\n          user{\n            id\n            username\n            avatar\n          }\n          comments {\n            id\n          }\n        }\n      }\n    `;\n    \n    // [...]\n```\n\nNow we update the `create-post.ts` have the functionality for the page:\n\n```typescript\n    //src/pages/create-post/create-post.ts\n    // [...]\n    \n    @IonicPage()\n    @Component({\n      selector: 'page-create-post',\n      templateUrl: 'create-post.html',\n    })\n    \n    export class CreatePostPage {\n      user_id: string;\n      uploadWidget: any;\n      posted_at: string;\n      image_url: string;\n      description: string;\n    \n      constructor(public navCtrl: NavController, public navParams: NavParams, private apollo: Apollo,\n        public alertCtrl: AlertController, public http: HttpClient) {\n        // get the user id of the user about to make post\n        this.user_id = this.navParams.get('user_id');\n    \n        let self = this;\n        this.uploadWidget = cloudinary.createUploadWidget({\n          cloudName: 'CLOUDINARY_CLOUD_NAME',\n          uploadPreset: 'CLOUDINARY_UPLOAD_PRESET',\n        }, (error, result) =\u003e {\n          if (!error \u0026\u0026 result \u0026\u0026 result.event === \"success\") {\n            console.log('Done! Here is the image info: ', JSON.stringify(result.info));\n            // image link\n            self.posted_at = result.info.created_at;\n            self.image_url = result.info.secure_url;\n            self.uploadPost();\n          }\n        })\n      }\n    \n      [...]\n```\n\n\u003e Be sure to replace the `CLOUDINARY_CLOUD_NAME` and `CLOUDINARY_UPLOAD_PRESET` with your credentials.\n\nThe constructor of the class gets the `user_id` from the navigation parameters and then creates the Cloudinary Upload Widget. We specify the `cloudName`, the `uploadPreset` and the functionality to execute when the image has been successfully uploaded to Cloudinary.\n\nOn successful upload, Cloudinary returns a `result` object. From it, we obtain the `secure_url`, `created_at` for the image and then trigger the `uploadPost()` method.\n\nNow, add the other class methods to the `CreatePostPage` class:\n\n```typescript\n    // src/pages/create-post/create-post.ts\n    \n      [...]\n      public uploadPost() {\n        this.apollo.mutate({\n          mutation: createUserPost,\n          variables: {\n            image_url: this.image_url,\n            description: this.description,\n            likes: 10,\n            postedAt: this.posted_at,\n            user: { \"connect\": { \"id\": this.user_id } }\n          }\n        }).subscribe((data) =\u003e {\n          console.log('uploaded successfuly');\n          // after sucessful upload, trigger pusher event\n          this.showAlert('Post Shared', 'Your post has been shared with other users');\n          this.navCtrl.push(HomePage);\n        }, (error) =\u003e {\n          this.showAlert('Error', 'There was an error sharing your post, please retry');\n        })\n      }\n    \n      public showAlert(title: string, subTitle: string) {\n        const alert = this.alertCtrl.create({\n          title: title,\n          subTitle: subTitle,\n          buttons: ['OK']\n        });\n        alert.present();\n      }\n    \n      public loadWidget() {\n        this.uploadWidget.open();\n      }\n    }\n```\n\nThe `loadWidget()` method, displays the upload widget to the user to upload their image. The `uploadPost()` method makes the mutation to the GraphQL server and when that’s complete take the user back to the home page.\n\nNow, your run your application using the command: \n\n```\n    ionic serve -c\n```\nNavigate to `localhost:``8100` on your browser. Now, when you navigate to create a post, you should get a view that looks like this:\n\n\n![instagram-clone-ionic-realtime-img2](//images.ctfassets.net/1es3ne0caaid/4A7V0lFUHwIaLfuRUtQTY5/4cb731c903481fc5e2a842ce0a8a8795/instagram-clone-ionic-realtime-img2.png)\n![instagram-clone-ionic-realtime-img3](//images.ctfassets.net/1es3ne0caaid/1Qob4VTro36fL2eKEav1lN/7d2ab6f3e23ec5ee19c0c4cde651ab26/instagram-clone-ionic-realtime-img3.png)\n\n![instagram-clone-ionic-realtime-img4](//images.ctfassets.net/1es3ne0caaid/5bGtfXifD1hoRABlCdYEuW/97f48caf149f91473ff01dd4051752ac/instagram-clone-ionic-realtime-img4.png)\n![instagram-clone-ionic-realtime-img5](//images.ctfassets.net/1es3ne0caaid/1smaCgPf2LnwRmYuaKubtn/7c740f170394cfd2fa785af6b36c9572/instagram-clone-ionic-realtime-img5.png)\n\n\n\n## Uploading comments on user posts\n\nEarlier in the series, we went through fetching comments on posts from the GraphQL server. Now, let’s walk through how to upload comments on posts to your GraphQL server.\n\nAdd the following mutation to your `comment.ts` file:\n\n```typescript\n    // src/pages/comment/comment.ts\n    \n    import { Component } from '@angular/core';\n    import { IonicPage, NavController, NavParams, AlertController } from 'ionic-angular';\n    import { Apollo } from 'apollo-angular';\n    import gql from 'graphql-tag';\n    import { HomePage } from '../home/home';\n    import { HttpClient } from '@angular/common/http';\n    \n    const makeComment = gql`\n      mutation createComment($message: String, $postedAt: DateTime!, $user: UserCreateOneWithoutCommentsInput!,\n      $post: PostCreateOneWithoutCommentsInput!){\n        createComment(data: {message: $message, postedAt: $postedAt, user: $user, post: $post}){\n          id\n          message\n          user {\n            avatar\n            username\n          }\n        }\n      }\n    `;\n    \n    @IonicPage()\n    @Component({\n      selector: 'page-comment',\n      templateUrl: 'comment.html'\n    })\n    \n    export class CommentPage {\n      // [...]\n```\n\nAfterward, add the `postComment`  to the method `CommentPage` class that is responsible for sending the comment to the GraphQL server:\n\n```typescript\n    // src/pages/comment/comment.ts\n    // [...]\n    \n    export class CommentPage {\n      // [...] other class variables\n    \n      post_id : string;\n      user_comment: string = \"\";\n    \n      constructor(\n        public navCtrl: NavController,\n        public navParams: NavParams,\n        private apollo: Apollo,\n        public alertCtrl: AlertController,\n        public http: HttpClient,\n      ) {\n        this.loadComments(this.post_id);\n      }\n    \n      // [...]  other methods\n    \n      public postComment() {\n        this.apollo.mutate({\n          mutation: makeComment,\n          variables: {\n            message: this.user_comment,\n            postedAt: (new Date()).toISOString(),\n            user: { connect: { id: \"USER_ID_FETCHED_FROM_GRAPHQL_SERVER\" } },\n            post: { connect: { id: this.post_id } }\n          }\n        }).subscribe((data) =\u003e {\n          this.showAlert('Success', 'Comment posted successfully');\n        }, (error) =\u003e {\n          this.showAlert('Error', 'Error posting comment');\n        });\n      }\n      public showAlert(title: string, subTitle: string) {\n        const alert = this.alertCtrl.create({\n          title: title,\n          subTitle: subTitle,\n          buttons: ['OK']\n        });\n        alert.present();\n      }\n    }\n```\n\n\u003e **Note**: The user ID was hardcoded to mimic a signed-in user making a comment.\n\nThe `postComment` method gathers the variables and makes the mutation. Afterwards, a modal is shown to the user to notify them of their successful post.\n\nFinally, in your `comment.html`, bind the comment text field to the `user_comment` variable and let the button trigger the `postComment` method. Update the `\u003cion-footer\u003e` in your `comment.html` file to look like this:\n\n```html\n    \u003c!-- app/pages/comment/comment.html --\u003e\n    \u003c!-- --\u003e\n    \n    \u003cion-footer\u003e\n      \u003cion-grid\u003e\n        \u003cion-row class=\"comment-area\"\u003e\n          \u003cion-col col-9\u003e\n            \u003cion-textarea placeholder=\"Enter your comment...\" [(ngModel)]=\"user_comment\"\u003e\u003c/ion-textarea\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col col-3\u003e\n            \u003cbutton ion-button class=\"comment-button\" (click)=\"postComment()\"\u003e\n              \u003cion-icon name=\"paper-plane\"\u003e\u003c/ion-icon\u003e\n            \u003c/button\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n      \u003c/ion-grid\u003e\n    \u003c/ion-footer\u003e\n```\n\nNow, the comment section of your application will look like this:\n\n\n![instagram-clone-ionic-realtime-img6](//images.ctfassets.net/1es3ne0caaid/6XSB4v5G7UKJH5E1oktDHg/96200763f732e62cbd52072f56396c83/instagram-clone-ionic-realtime-img6.png)\n![instagram-clone-ionic-realtime-img7](//images.ctfassets.net/1es3ne0caaid/5v4OQM92hujIAfCpkiQydP/7703d45197981a654a7fb8fff4ce1b86/instagram-clone-ionic-realtime-img7.png)\n\n\n\n## Enabling realtime functionality for posts and comments\n\nCurrently, new posts and comments are not updated on all the user devices in real time. This means that other users will have to physically reload their application to see when new posts/comments are made. For a social application, seeing posts and comments as they are made is very important. To add this functionality, let’s use [Pusher](https://pusher.com). Pusher allows you add realtime functionality in your applications with ease. \n\nTo get started, [sign up](https://dashboard.pusher.com/accounts/sign_up) for a free Pusher account if you don’t have one yet. Go ahead and create a new Pusher project and then note your `PUSHER_APP_ID`, `PUSHER_APP_KEY`, `PUSHER_APP_SECRET`, `PUSHER_CLUSTER`.\n\n### Creating a web server that triggers events\nLet’s create a simple web server that will trigger events using Pusher when users create new posts and when users add new comments. In your `server` directory, initialize an empty Node project:\n\n```\n    cd server\n    npm init -y\n```\n\nAfterward, install the necessary node modules:\n\n```\n    npm install body-parser express pusher\n```\n\n- `express` will power the web server\n- `body-parser` to handle incoming requests\n- `pusher` to add realtime functionality\n\nNow, create a new `server.js` file in the `server` directory:\n\n```\n    touch server.js\n```\n\nUpdate your `server.js` to look like this:\n\n```javascript\n    // server/server.js\n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const Pusher = require('pusher');\n    \n    const app = express();\n    \n    let pusher = new Pusher({\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n        res.header('Access-Control-Allow-Origin', '*');\n        res.header(\n            'Access-Control-Allow-Headers',\n            'Origin, X-Requested-With, Content-Type, Accept'\n        );\n        next();\n    });\n    \n    [...]\n```\n\nThis includes the necessary libraries we need and creates a Pusher object using your Pusher credentials obtained earlier and then defines some middleware to handle incoming requests.\n\nThe event server will have two routes:\n\n- `/trigger-post-event` -  trigger a new post event on the post channel\n- `/trigger-comment-event` - trigger a new comment event on the comment channel\n\nWhen a user makes a new post, our mobile application makes a request to the `/trigger-post-event` of the web server. The web server will then trigger a `new-post` event in the `post-channel`.\nAlso, when a new comment is added, our mobile application makes a request to the `/trigger-comment-event` of the web server. The web server also triggers a `new-comment` event in the `comment-channel`.\n\n\n\u003e Later in this tutorial, we will walk through how to listen for `new-post` and `new-comment` events on the `post-channel` and `comment-channel` respectively.\n\nAdd the following to your `server.js` file:\n\n```javascript\n    // server/server.js\n    [...]\n    \n    app.post('/trigger-post-event', (req, res) =\u003e {\n        // trigger a new post event via pusher\n        pusher.trigger('post-channel', 'new-post', {\n            'post': req.body.post\n        })\n        res.json({ 'status': 200 });\n    });\n    \n    app.post('/trigger-comment-event', (req, res) =\u003e {\n        // trigger a new comment event via pusher\n        pusher.trigger('comment-channel', 'new-comment', {\n            'comment': req.body.comment\n        });\n        res.json({ 'status': 200 });\n    })\n    \n    let port = 3128;\n    app.listen(port, () =\u003e {\n        console.log('App listening on port ' + port);\n    });\n```\n\nNow that the events server is created, you can run it by entering the command:\n\n```\n    node server.js\n```\n\nYour server will be available on `localhost:3128` as defined in the script. Now, let’s look at how to make requests to the web server from the mobile application.\n\n### Creating a Pusher service\nTo use Pusher in our Ionic application, let’s install the Pusher library:\n\n```\n    npm install pusher-js\n```\n\nAfterward, let’s create a simple Pusher service provider that will handle our connection with Pusher:\n\n```\n    ionic generate provider pusher-service\n```\n\nIn the `pusher-service.ts` we create a new Pusher object in the constructor by specifying the `PUSHER_APP_KEY`, `PUSHER_APP_CLUSTER`. Edit your `pusher-service.ts` file to look like this:\n\n```typescript\n    // src/providers/pusher-service/pusher-service.ts\n    import { Injectable } from '@angular/core';\n    import Pusher from 'pusher-js';\n    \n    @Injectable()\n    export class PusherServiceProvider {\n      pusher: any;\n      constructor() {\n        this.pusher = new Pusher('PUSHER_APP_KEY', {\n          cluster: 'PUSHER_APP_CLUSTER',\n          forceTLS: true\n        });\n      }\n    \n      postChannel() {\n        return this.pusher.subscribe('post-channel');\n      }\n    \n      commentChannel() {\n        return this.pusher.subscribe('comment-channel');\n      }\n    }\n```\n\nThe `constructor` method for the class creates a new Pusher object. The `postChannel` and `commentChannel` methods subscribe to and return the `post-channel` and `comment-channel` respectively. Earlier in the article, we looked at how to push events from the web server to the `post-channel` and `comment-channel`. Here we subscribe to those channels so we can listen for events later on.\n\nNow, go ahead to register the `PusherServiceProvider` in the `app.module.ts`. At this point, your `app.module.ts` should look like this:\n\n```typescript\n    // src/app/app.module.ts\n    \n    import { NgModule, ErrorHandler } from '@angular/core';\n    import { BrowserModule } from '@angular/platform-browser';\n    import { IonicApp, IonicModule, IonicErrorHandler } from 'ionic-angular';\n    import { MyApp } from './app.component';\n    \n    // import modules for apollo client\n    import { HttpClientModule } from '@angular/common/http';\n    import { ApolloModule, Apollo } from 'apollo-angular';\n    import { HttpLinkModule, HttpLink } from 'apollo-angular-link-http';\n    import { InMemoryCache } from 'apollo-cache-inmemory';\n    // import other pages\n    import { HomePage } from '../pages/home/home';\n    import { TabsPage } from '../pages/tabs/tabs';\n    import { ProfilePage } from '../pages/profile/profile';\n    import { CommentPage } from '../pages/comment/comment';\n    import { CreatePostPage } from '../pages/create-post/create-post';\n    \n    import { StatusBar } from '@ionic-native/status-bar';\n    import { SplashScreen } from '@ionic-native/splash-screen';\n    // import pusher sevice provider\n    import { PusherServiceProvider } from '../providers/pusher-service/pusher-service';\n    \n    @NgModule({\n      declarations: [\n        MyApp,\n        HomePage,\n        TabsPage,\n        ProfilePage,\n        CommentPage,\n        CreatePostPage\n      ],\n      imports: [\n        HttpClientModule,\n        ApolloModule,\n        HttpLinkModule,\n        BrowserModule,\n        IonicModule.forRoot(MyApp),\n      ],\n      bootstrap: [IonicApp],\n      entryComponents: [\n        MyApp,\n        HomePage,\n        TabsPage,\n        ProfilePage,\n        CommentPage,\n        CreatePostPage\n      ],\n      providers: [\n        StatusBar,\n        SplashScreen,\n        { provide: ErrorHandler, useClass: IonicErrorHandler },\n        PusherServiceProvider\n      ]\n    })\n    \n    export class AppModule {\n      constructor(apollo: Apollo, httpLink: HttpLink) {\n        apollo.create({\n          link: httpLink.create({ uri: 'http://localhost:4466' }), // uri specifies the endpoint for our graphql server\n          cache: new InMemoryCache()\n        })\n      }\n    }\n```\n\nNow that the `PusherServiceProvider` has been registered, we can then use it in our application to fetch posts in realtime.\n\n### Triggering and displaying posts in realtime\nIn the `uploadPost`  method of the `CreatePostPage`, after a post is created, the user is shown a success alert letting them know the upload is successful. Now, update the `uploadPost` method to send a `POST` request to the event server before displaying the success alert:\n\n```typescript\n    // src/pages/create-post/create-post.ts\n    \n    [...]\n    \n        public uploadPost() {\n        this.apollo.mutate({\n          mutation: createUserPost,\n          variables: {\n            image_url: this.image_url,\n            description: this.description,\n            likes: 10,\n            postedAt: this.posted_at,\n            user: { \"connect\": { \"id\": this.user_id } }\n          }\n        }).subscribe((data) =\u003e {\n          // after sucessful upload, trigger pusher event\n          let post_response: any = data;\n          this.http.post('http://localhost:3128/trigger-post-event', post_response.data.createPost)\n            .subscribe(() =\u003e {\n              this.showAlert('Post Shared', 'Your post has been shared with other users');\n              this.navCtrl.push(HomePage);\n            });\n        }, (error) =\u003e {\n          this.showAlert('Error', 'There was an error sharing your post, please retry');\n          console.log('there was an error sending :the query', error);\n        })\n      }\n    \n    [...]\n```\n\nNow that the event is being triggered, the next thing we need to do is to update the HomePage with new posts in realtime for all users. Add update your `home.ts` file to include the following:\n\n```typescript\n    // app/src/pages/home/home.ts\n    \n    // [...] other imports\n    import { PusherServiceProvider } from '../../providers/pusher-service/pusher-service';\n    \n    // [...]\n    \n    export class HomePage implements OnInit {\n      // [...]\n    \n      post_channel: any;\n    \n      constructor(\n        public navCtrl: NavController,\n        private apollo: Apollo,\n        private pusher: PusherServiceProvider) {\n        // [...]\n        this.initializeRealtimePosts();\n      }\n    \n      initializeRealtimePosts() {\n        this.post_channel = this.pusher.postChannel();\n        let self = this;\n        this.post_channel.bind('new-post', function (data) {\n          let posts_copy = [data.post];\n          self.posts = posts_copy.concat(self.posts);\n        })\n      }\n    \n      // [...]\n    \n    }\n```\n\nNow, your HomePage is ready to display new user posts in realtime. Navigate your application in the browser (`localhost:8100`) and create a new post:\n\n\n![instagram-clone-ionic-realtime-img8](//images.ctfassets.net/1es3ne0caaid/5l1og6W4nqBNkU6Yte68X/1b77afd492bd37ee69424dfaaeb9a7fd/instagram-clone-ionic-realtime-img8.gif)\n\n\n### Triggering and displaying comments in realtime\nIn the `postComment` method of the `CommentPage`, let’s make a request to the event server to after the comment is added to a post. Update the `postComment` method in the `comment.ts` as follows:\n\n```typescript\n    // src/page/comment/comment.ts\n    \n    [...]\n      public postComment() {\n        this.apollo.mutate({\n          mutation: makeComment,\n          variables: {\n            message: this.user_comment,\n            postedAt: (new Date()).toISOString(),\n            user: { connect: { id: \"USER_ID_FETCHED_FROM_GRAPHQL_SERVER\" } },\n            post: { connect: { id: this.post_id } }\n          }\n        }).subscribe((data) =\u003e {\n          let post_response: any = data;\n          // after successful upload, trigger new comment event\n          this.http.post('http://localhost:3128/trigger-comment-event', post_response.data.createComment)\n            .subscribe(() =\u003e {\n              this.showAlert('Success', 'Comment posted successfully');\n              this.navCtrl.push(HomePage);\n            });\n        }, (error) =\u003e {\n          this.showAlert('Error', 'Error posting comment');\n        });\n      }\n    \n    [...]\n```\n\n\u003e **Note**: Get a user ID for the user you want to post the comment for from the GraphQL server. In the previous article in the series, we looked at querying the data store for all users. Pick a user id you want to use.\n\nTo see the comments in realtime after they have been pushed to the `comment-channel` via the web server, we create a `initializeRealtimeComments` method in the `CommentPage` that gets the `comment-channel` from the `PusherServiceProvider`. We then bind the `new-comment`  event to the `comment-channel`. When a `new-comment` event occurs, the comments on the page are the updated automatically. \n\nUpdate the `comment.ts` file to include the following:\n\n```typescript\n    // src/app/pages/comment/comment.ts\n    // [...] other imports\n    import { PusherServiceProvider } from '../../providers/pusher-service/pusher-service';\n    \n    // [...]\n    \n    export class CommentPage {\n      comments: any;\n      username: string;\n      post_desc: string;\n      user_avatar: string;\n      post_id: string;\n    \n      user_comment: string = \"\";\n      comment_channel: any;\n    \n      constructor(\n        public navCtrl: NavController, public navParams: NavParams, private apollo: Apollo, public alertCtrl: AlertController, public http: HttpClient, private pusher: PusherServiceProvider\n      ) {\n        // [...]\n    \n        this.initializeRealtimeComments();\n      }\n    \n      initializeRealtimeComments() {\n        this.comment_channel = this.pusher.commentChannel();\n    \n        let self = this;\n        this.comment_channel.bind('new-comment', function (data) {\n          let comment_copy = self.comments;\n          self.comments = comment_copy.concat(data.comment);;\n        })\n      }\n    \n      // [...]\n    }\n```\n\nNow, when you open your browser and you navigate to `localhost:8100`. Here’s what happens when you create a new comment:\n\n\n![instagram-clone-ionic-realtime-img9](//images.ctfassets.net/1es3ne0caaid/3AlfEyDYdX7oFnfVDH4dJj/cfd8ac1f28777725e8b924a7bd2880bb/instagram-clone-ionic-realtime-img9.gif)\n\nYou can see the application rendering new comments in realtime without any other action from other users.\n\n## Conclusion\n\nIn this part of the series, we went through in detail how upload images from multiple sources seamlessly using [Cloudinary](http://cloudinary.com), how to make mutations to your GraphQL server using the Apollo Client and also enabling realtime functionality for posts and comments using [Pusher](http://pusher.com). Here’s a link to the [GitHub](https://github.com/oreHGA/ionic-insta-clone) repository for reference. Notice that through the series, you have been viewing your application on the browser. In the next part of the series, we will walk through steps to take to testing your Ionic application on mobile devices.","metaTitle":"Build an Instagram clone with Ionic - Part 3","metaDescription":"This four part series will walk you through building a simple Instagram clone with Ionic and adding realtime functionalities. In part three, create functionality that enables you to feed data into the application with GraphQL mutations and allowing users to see realtime posts and comments."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5YiSGJNNnceSCqhBNjKhMx","type":"Entry","createdAt":"2019-06-27T16:48:51.104Z","updatedAt":"2019-06-27T16:48:51.104Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an Instagram clone with Ionic: Part 2 - Connecting to GraphQL servers using Apollo client","url":"instagram-clone-ionic-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/ionic-insta-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2019-06-27","description":"This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functionalities. In part two, create the backend server for the clone application that will serve data to the application.","prerequisite":"You will need Node 10+, Node Package Manager 6+, Cordova 8+ and Docker 18+ installed on your machine.","content":"In the [previous part](https://pusher.com/tutorials/instagram-clone-ionic-part-1) of this series, we looked at how to set up the interface for our Instagram clone application. One thing though, was that we used static data to populate the application. In this part of the series, we will create the backend server for the application that will serve data to the application.\n\n\n## Pre-requisites\n- You should have followed through the first part of the series.\n- Basic knowledge of JavaScript.\n- [Node](http://www.nodejs.org) installed on your machine (v10.13.0)\n- [Node Package Manager](https://www.npmjs.com/) installed on your machine (v 6.4.1)\n- [Cordova](https://cordova.apache.org/) installed on your machine (v 8.1.2)\n- Docker installed on your machine. (version 18.09.2) Download [here](https://www.docker.com/community-edition).\n\n\n## Building the GraphQL server\n\nThe backend server will be responsible for serving the data that we will render in the application. By now, you have probably heard about GraphQL and wondered about how it all works, let’s go through a brief introduction and see what the buzz is all about \n\n### What is GraphQL?\nGraphQL is a query language that helps speed up development by enabling developers to query exactly the data they need from the client without having to fetch other excess data. It was developed by Facebook and was open-sourced in 2015. Since then, it has been used in production by companies like Twitter and GitHub. \n\nThe query language is largely based on two major concepts, queries and mutations. Queries are used to fetch data from your data source and mutations are used to edit the existing data source. \n\n\n\u003e As we progress through this series, we will take a deeper look at understanding what queries and mutations are and how to write them.\n\nThe only caveat though is that creating and managing a GraphQL server seems like a herculean task to people who are new to it. So, in this part of the series, we are going to see how to use [Prisma](https://www.prisma.io/) to automatically turn your database into a GraphQL API thus enabling us to read and write to the application’s database using GraphQL queries and mutations. To read more about Prisma features, head over [here](https://www.prisma.io/docs/).\n\nTo get started, install the Prisma CLI on your machine:\n\n```\n    #install using brew (if you have a mac)\n    brew tap prisma/prisma\n    brew install prisma\n    \n    # or install with npm\n    npm install -g prisma\n```\n\nNext we need to create a Docker compose file in the `server` directory for your project that will configure the Prisma server and let it know what database to connect to. In your `instagram-ionic` project, create a folder `server` that will house the Prisma service:\n\n```\n    mkdir server\n    cd server\n    touch docker-compose.yml\n```\n\nEdit the docker-compose file to look like this:\n\n```\n    version: '3'\n    services:\n      prisma:\n        image: prismagraphql/prisma:1.31\n        restart: always\n        ports:\n        - \"4466:4466\"\n        environment:\n          PRISMA_CONFIG: |\n            port: 4466\n            databases:\n              default:\n                connector: mysql\n                host: mysql\n                port: 3306\n                user: root\n                password: prisma\n                migrations: true\n      mysql:\n        image: mysql:5.7\n        restart: always\n        environment:\n          MYSQL_ROOT_PASSWORD: prisma\n        volumes:\n          - mysql:/var/lib/mysql\n    volumes:\n      mysql:\n```\n\nNow, go ahead and start your Prisma server and the database by running the command:\n\n```\n    docker-compose up -d\n```\n\nYou should get a prompt that looks like this:\n\n\n![instagram-clone-ionic-graphql-img1](//images.ctfassets.net/1es3ne0caaid/6VbZfa5oGguFFZBHDt0dcX/eda52227590779f02216f0725b1e2732/instagram-clone-ionic-graphql-img1.png)\n\nNow, the Prisma server is up and running, let’s create a simple Prisma service in the `server` directory:\n\n```\n    cd server \n    prisma init --endpoint http://localhost:4466\n```\n\n\u003e `http://localhost:4466` represents the port your local Prisma service is running on. To confirm the port, run the command `docker ps` . All the created containers will be listed for you to find the port your container will run on. \n\nInitializing the Prisma service creates two files in the `server` directory:\n\n- `prisma.yml` defines some config for the Prisma service\n- `datamodel.prisma` specifies the data model our database will be based on.\n\nLet’s edit the data model to meet what we need for our Instagram clone application. Update your `datamodel.prisma` to look like this:\n\n```\n    # server/datamodel.prisma\n    type User  {\n      id: ID! @unique @id\n      username: String! @unique\n      fullname: String!\n      avatar: String!\n      bio: String!\n      followers: Int!\n      following: Int!\n      posts: [Post!]! @relation(name: \"UserPosts\")\n      comments: [Comment!]! @relation(name: \"UserComments\")\n    }\n    \n    type Comment{\n      id: ID! @unique @id\n      message: String\n      postedAt: DateTime!\n      user: User! @relation(name: \"UserComments\")\n      post: Post! @relation(name: \"PostComments\")\n    }\n    \n    type Post{\n      id: ID! @unique @id\n      image_url: String!\n      description: String,\n      likes: Int @default(value: 0)\n      postedAt: DateTime!\n      user: User! @relation(name: \"UserPosts\")\n      comments: [Comment!]! @relation(name: \"PostComments\")\n    }\n```\n\nThe data model above specifies that our application has the main models with relationships with one another. The data model is written in GraphQL Schema Definition Language which is largely based on two concepts of `types` and `fields`. Head over [here](https://www.graph.cool/docs/reference/database/data-modelling-eiroozae8u) to learn more about writing in the GraphQL SDL.\n\nThe `prisma.yml` file looks like this:\n\n```\n    endpoint: http://localhost:4466\n    datamodel: datamodel.prisma\n```\n\nNow that we have specified the data model for the application, we then deploy the Prisma service by running the command below in the `server` directory:\n\n```\n    prisma deploy\n```\n\nYou get a prompt that looks like this:\n\n\n![instagram-clone-ionic-graphql-img2](//images.ctfassets.net/1es3ne0caaid/1RbLyQUU2pd72dCbOH0HhY/b45e8e3e2abe6f575f56e98f0f7d878c/instagram-clone-ionic-graphql-img2.png)\n\nNow that we have deployed our Prisma service, let’s go ahead to the playground to see how fetching data using the GraphQL API will look like. Navigate to `http://localhost:4466` and you get a view that looks like this:\n\n\n![instagram-clone-ionic-graphql-img3](//images.ctfassets.net/1es3ne0caaid/44B4yv6GiPzOF1NIMKNiQd/44cd00fa9a8daa7560eb8cc25b4e42fe/instagram-clone-ionic-graphql-img3.png)\n\nNow with Prisma, all the possible queries and mutations possible on the data model are created automatically after we deployed the service. This means that as we update our data model, the possible queries and mutations on our data are also updated accordingly.\n\n### Creating a new user\nCreating a new user from the playground will look like this:\n\n```\n    mutation(\n    $username: String!, $fullname: String!, $avatar: String!, $bio: String!,\n    $followers: Int!, $following: Int!){\n     createUser(data: {username: $username, fullname: $fullname, avatar: $avatar,\n    bio: $bio, followers: $followers, following: $following}){\n              username\n              fullname\n              bio\n            } \n    }\n```\n\nAdd the query variables in the bottom left section:\n\n```\n    {\n      \"username\": \"oreog\",\n      \"fullname\": \"Ore Og!\",\n      \"avatar\": \"https://api.adorable.io/avatars/100/big_dawg@oreog.png\",\n      \"bio\": \"Software Engineer\",\n      \"followers\": 1000,\n      \"following\": 534\n    }\n```\n\nWhen you run the mutation, you will have a view that looks like this. With the created user returned on the right side of the view.\n\n![instagram-clone-ionic-graphql-img4](//images.ctfassets.net/1es3ne0caaid/3eU6InxWbR1QXs8Rddh738/5bdcf917a1b59797e32259b048e755d0/instagram-clone-ionic-graphql-img4.png)\n\n### Fetching the list of users\nNow, to view the available users, create a query that looks like this:\n\n```\n    query{\n      users{\n        id\n        username\n        followers\n        following\n      }\n    }\n```\n\nWhen the query is run, you get the list of users with the requested information.\n\n![instagram-clone-ionic-graphql-img5](//images.ctfassets.net/1es3ne0caaid/1EOZ4SJQRmH4xeqL48vSwY/b20d69fea4dab53a0fd5a41add38da65/instagram-clone-ionic-graphql-img5.png)\n\n### Creating a new post\nTo create a new post, the mutation will look like this:\n\n```\n    mutation(\n      $image_url: String!, $description: String, $likes: Int, $postedAt: DateTime!,\n      $user: UserCreateOneWithoutPostsInput!\n    ){\n      createPost(data: {image_url: $image_url, description: $description,\n      likes: $likes, postedAt: $postedAt, user: $user}){\n        id\n        image_url\n        description\n        user{\n          id\n          username\n        }\n      }\n    }\n```\n\nAdd the query variables to the bottom left of the console. This will specify the content of the post you’re about to create:\n\n```\n    {\n      \"image_url\": \"https://pbs.twimg.com/media/D4hTNmQWsAADzpo?format=jpg\u0026name=medium\",\n      \"description\": \"Hi there\",\n      \"likes\": 1104,\n      \"postedAt\": \"2019-04-21T12:19:05.568Z\",\n            \"user\": {\"connect\": {\"id\": \"USER_ID_FETCHED_FROM_GRAPHQL_SERVER\"}}\n    }\n```\n\n\u003e Pick an `id` of your choice from the previous query above\n\n\n![instagram-clone-ionic-graphql-img6](//images.ctfassets.net/1es3ne0caaid/YdbtGA39X01xBAq9i4HOA/c1a7d2c21334729d97908a93191e844e/instagram-clone-ionic-graphql-img6.png)\n\n## Rendering data in our application\n\nNow that we have seen how to create a GraphQL server using Prisma, let’s go ahead to enable our current Ionic application to fetch data dynamically using GraphQL. To do this, we going to make use of [Apollo Client](https://www.apollographql.com/client). Apollo Client gives developers the ability to bind GraphQL data to their user interface with ease.\n\n\n\u003e We are going to assume that our database has already been populated with some sample data we are going to fetch\n\n### Installing the Apollo client\nLet’s see how to use this with our application. First install the necessary packages in your `ionic-insta-clone` project, because Ionic applications are built with Angular, we are going to install packages that allow us to use the Apollo Client in Angular applications:\n\n```\n    cd instagram-ionic\n    \n    npm install apollo-angular@1.1.2 apollo-angular-link-http@1.1.1 apollo-client@2.3.8 apollo-cache-inmemory@1.2.7 graphql-tag@2.9.2 graphql@0.13.2 pluralize --save\n    \n    npm install apollo-utilities@1.0.22 --no-save\n    npm install typescript@3.0.0 --save-dev\n```\n\nWe then need to import the modules in our `app.module.ts` file:\n\n```typescript\n    // src/app/app.module.ts\n    import { NgModule, ErrorHandler } from '@angular/core';\n    import { BrowserModule } from '@angular/platform-browser';\n    import { IonicApp, IonicModule, IonicErrorHandler } from 'ionic-angular';\n    import { MyApp } from './app.component';\n    \n    // import modules for apollo client\n    import {HttpClientModule} from '@angular/common/http';\n    import {ApolloModule, Apollo} from 'apollo-angular';\n    import {HttpLinkModule, HttpLink} from 'apollo-angular-link-http';\n    import {InMemoryCache} from 'apollo-cache-inmemory';\n    \n    // import other pages\n    [...]\n    \n    @NgModule({\n      declarations: [...],\n      imports: [\n        HttpClientModule,\n        ApolloModule,\n        HttpLinkModule,\n        BrowserModule,\n        IonicModule.forRoot(MyApp)\n      ],\n      // other app specifications\n    })\n    export class AppModule {}\n```\n\n### Configuring the Apollo client\nIn the `app.module.ts` file, we then go ahead to inject Apollo into our application like this:\n\n```typescript\n    // src/app/app.module.ts\n    import {HttpClientModule} from '@angular/common/http';\n    import {ApolloModule, Apollo} from 'apollo-angular';\n    import {HttpLinkModule, HttpLink} from 'apollo-angular-link-http';\n    import {InMemoryCache} from 'apollo-cache-inmemory';\n    // other application imports\n    [...]\n    \n    export class AppModule {\n      constructor(apollo: Apollo, httpLink: HttpLink){\n        apollo.create({\n          link: httpLink.create({uri: 'http://localhost:4466'}), \n          // uri specifies the endpoint for our graphql server\n          cache: new InMemoryCache()\n        })    \n      }\n    }\n```\n\nTo avoid an error when your application is being compiled, add the following to your `tsconfig.json`:\n\n```json\n    // tsconfig.json\n    {\n      \"compilerOptions\": {\n        // other options\n        \"lib\": [\n          \"esnext.asynciterable\"\n        ]\n        // other options\n      }\n      // other options\n    }\n```\n\nNow that we have the client fully configured, let’s get to using it to fetch and render data to the user. \n\n### Fetching and rendering posts on home page\nLet’s head over to the homepage to see how we can achieve this. In your `home.ts` file, import the Apollo client and then create a query to fetch the post as follows:\n\n```typescript\n    // src/pages/home/home.ts\n    import { Component, OnInit } from '@angular/core';\n    import { NavController, NavParams } from 'ionic-angular';\n    import { ProfilePage } from '../profile/profile';\n    import { CommentPage } from '../comment/comment';\n    import gql from 'graphql-tag';\n    import { Apollo } from 'apollo-angular';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html',\n      entryComponents: [ProfilePage, CommentPage]\n    })\n    \n    export class HomePage implements OnInit {\n      posts: any;\n    \n      constructor(public navCtrl: NavController, private apollo: Apollo) { \n      }\n    \n      ngOnInit(){\n        this.fetchPosts();\n      }\n      \n      fetchPosts() {\n        this.apollo\n          .query({\n            query: gql`\n              {\n                posts {\n                  image_url\n                  description\n                  likes\n                  user {\n                    id\n                    username\n                    avatar\n                  }\n                  comments {\n                    id\n                  }\n                }\n              }\n            `\n          })\n          .subscribe(({ data }) =\u003e {\n            let inner_posts: any = data;\n            this.posts = inner_posts.posts;\n          });\n      }\n      \n      [...]\n    }\n```\n\nAfterward, we then go ahead to the `home.html` and then render the posts on the homepage as follows:\n\n```html\n    \u003c!-- src/pages/home/home.html --\u003e\n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003eInstagram Clone\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \n    \u003cion-content\u003e\n      \u003c!-- this is where the posts will be --\u003e\n      \u003cdiv *ngFor=\"let post of posts\"\u003e\n        \u003cion-card class=\"single-post-home\"\u003e\n          \u003cion-item (click)=\"toProfilePage(post.user.id)\"\u003e\n            \u003cion-avatar item-start\u003e\n              \u003cimg [src]=\"post.user.avatar\"\u003e\n            \u003c/ion-avatar\u003e\n            \u003ch2\u003e{{post.user.username}}\u003c/h2\u003e\n          \u003c/ion-item\u003e\n      \n          \u003cimg [src]=\"post.image_url\"\u003e\n      \n          \u003cion-card-content\u003e\n            \u003cp\u003e\u003cstrong\u003e{{post.user.username}}\u003c/strong\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp; {{post.description}}\u003c/p\u003e\n          \u003c/ion-card-content\u003e\n      \n          \u003cion-row\u003e\n            \u003cion-col\u003e\n              \u003cbutton ion-button icon-start clear small (click)=\"likePost()\"\u003e\n                \u003cion-icon name=\"heart\"\u003e\u003c/ion-icon\u003e\n                \u003cdiv\u003e{{post.likes}} likes\u003c/div\u003e\n              \u003c/button\u003e\n            \u003c/ion-col\u003e\n            \u003cion-col\u003e\n              \u003cbutton ion-button icon-start clear small (click)=\"toCommentSection()\"\u003e\n                \u003cion-icon name=\"text\"\u003e\u003c/ion-icon\u003e\n                \u003cdiv\u003e{{post.comments.length}} Comments\u003c/div\u003e\n              \u003c/button\u003e\n            \u003c/ion-col\u003e\n          \u003c/ion-row\u003e\n      \n        \u003c/ion-card\u003e\n      \u003c/div\u003e\n    \n      \u003cion-fab bottom right\u003e\n        \u003cbutton ion-fab mini\u003e\u003cion-icon name=\"add\"\u003e\u003c/ion-icon\u003e\u003c/button\u003e\n      \u003c/ion-fab\u003e\n    \u003c/ion-content\u003e\n```\n\nNow, we also need to update the `toProfilePage()` function, in our `home.ts` file to take us to the profile page.\n\n```typescript\n    // src/pages/home/home.ts\n    \n    [...]\n    \n    export class HomePage implements OnInit {\n      [...]\n      \n      public toProfilePage(user_id: string) {\n        let nav_params = new NavParams({ id: user_id });\n        this.navCtrl.push(ProfilePage, nav_params);\n      }\n    \n      [...]\n    }\n```\n\nWe created a navigation parameter object with the `user_id` passed to the next page. Now, when we run the application:\n\n```\n    ionic serve\n```\nwe have the following view:\n\n\n![instagram-clone-ionic-graphql-img7](//images.ctfassets.net/1es3ne0caaid/4OEqZt7ZrUP7DOC93fR522/3e4392021267ac32449183d57b558d41/instagram-clone-ionic-graphql-img7.png)\n\n### Fetching and rendering data on the profile page\nWhen the username or avatar is clicked, we want to navigate to the user’s profile page. Now, the `profile.ts` page is also updated to fetch the users information from the GraphQL server and display it. Update the file as follows:\n\n```typescript\n    // src/pages/profile/profile.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { IonicPage, NavController, NavParams } from 'ionic-angular';\n    import { Apollo } from 'apollo-angular';\n    import  gql from 'graphql-tag';\n    import pluralize from 'pluralize';\n    \n    @IonicPage()\n    @Component({\n      selector: 'page-profile',\n      templateUrl: 'profile.html',\n    })\n    \n    export class ProfilePage implements OnInit {\n      user: any;\n    \n      constructor(public navCtrl: NavController, public navParams: NavParams,  private apollo: Apollo) {\n      }\n    \n      ngOnInit(){\n        this.fetchProfile( this.navParams.get('id'));\n      }\n    \n    \n      fetchProfile(user_id: string){\n        this.apollo\n          .query({\n            query: gql`\n            {\n              user(where: {id: \"${user_id}\"}){\n                id\n                username\n                fullname\n                avatar\n                bio\n                followers\n                following\n                posts{\n                  image_url\n                }\n              }\n            }\n            `,\n          })\n          .subscribe(({ data }) =\u003e {\n            let result:any = data;\n            this.user = result.user;\n          });\n      }\n    \n      plural(word, number){\n        return pluralize(word, number);\n      }\n    }\n```\n\nAfter the page is created, the Apollo Client makes a query to fetch the user profile using the `user_id` and then assigns the results to the `user` property of the Profile page class.\n\nNext, update the `profile.html` to render the user’s data:\n\n```html\n    \u003c!-- src/pages/profile/profile.html --\u003e\n    \u003cion-header\u003e\n    \n      \u003cion-navbar\u003e\n        \u003cion-title\u003e{{user?.username}}\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \n    \u003c/ion-header\u003e\n    \n    \n    \u003cion-content\u003e\n      \u003c!-- first set should be a row --\u003e\n      \u003cion-grid class=\"profile-intro\"\u003e\n        \u003cion-row\u003e\n          \u003cion-col col-4\u003e\n            \u003cimg class=\"profile-photo\" [src]=\"user?.avatar\"\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col col-8\u003e\n            \u003cdiv class=\"profile-info\"\u003e\n              \u003cdiv class=\"post-count info-square\"\u003e\n                \u003cp\u003e\n                  \u003cstrong\u003e{{ user?.posts.length }}\u003c/strong\u003e\u003cbr\u003e\n                  \u003cem\u003e{{ this.plural('post', user?.posts.length) }}\u003c/em\u003e\n                \u003c/p\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"follower-count info-square\"\u003e\n                \u003cp\u003e\n                  \u003cstrong\u003e{{ user?.followers }}\u003c/strong\u003e\u003cbr\u003e\n                  \u003cem\u003e{{ this.plural('follower', user?.followers) }}\u003c/em\u003e\n                \u003c/p\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"following-count info-square\"\u003e\n                \u003cp\u003e\n                  \u003cstrong\u003e{{ user?.following }}\u003c/strong\u003e\u003cbr\u003e\n                  \u003cem\u003efollowing\u003c/em\u003e\n                \u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv\u003e\n              \u003cbutton ion-button class=\"follow-button\"\u003eFollow\u003c/button\u003e\n            \u003c/div\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n      \u003c/ion-grid\u003e\n    \n      \u003cdiv class=\"more-details\"\u003e\n        \u003cp class=\"user-name\"\u003e\u003cstrong\u003e{{ user?.fullname }}\u003c/strong\u003e\u003c/p\u003e\n        \u003cp class=\"user-bio\"\u003e{{ user?.bio }}\u003c/p\u003e\n      \u003c/div\u003e\n    \n      \u003cion-segment color=\"primary\"\u003e\n        \u003cion-segment-button value=\"posts\" selected\u003e\n          \u003cion-icon name=\"grid\"\u003e\u003c/ion-icon\u003e    \n        \u003c/ion-segment-button\u003e\n        \u003cion-segment-button value=\"tagged\"\u003e\n            \u003cion-icon name=\"contacts\"\u003e\u003c/ion-icon\u003e\n          \u003c/ion-segment-button\u003e\n        \u003cion-segment-button value=\"bookmark\"\u003e\n          \u003cion-icon name=\"bookmark\"\u003e\u003c/ion-icon\u003e\n        \u003c/ion-segment-button\u003e\n      \u003c/ion-segment\u003e\n    \n      \u003cion-grid class=\"image-grid\"\u003e\n        \u003cion-row class=\"single-row\"\u003e\n            \u003cion-col *ngFor = \"let post of user?.posts\" col-4 class=\"single-image\"\u003e\n              \u003cimg width=\"100%\" height=\"100%\" [src]=\"post.image_url\"\u003e\n            \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n      \u003c/ion-grid\u003e\n    \u003c/ion-content\u003e\n```\n\nNow, make sure your server is running and then visit the browser at `http://locahost:8100` - where ionic is serving your application at. You should get a view that looks like this:\n\n\n![instagram-clone-ionic-graphql-img8](//images.ctfassets.net/1es3ne0caaid/5aM0UrVyYnbl1RwoIeYjrs/aaecfe94211d2541cdfa7ccea8ede53f/instagram-clone-ionic-graphql-img8.png)\n\n![instagram-clone-ionic-graphql-img9](//images.ctfassets.net/1es3ne0caaid/23YGE81PFMjRx2c3SVMSgv/4c8049e987fdb97d6c198b017d499fce/instagram-clone-ionic-graphql-img9.gif)\n\n### Fetching and rendering and creating comments on the comments page\nFinally, let’s consider how we handle comments in our application dynamically. In the `home.html` let’s update the `comment button` to send the user to view the post comments:\n\n```html\n    \u003c!-- src/pages/home/home.html --\u003e\n    \n    [...]\n      \u003cion-col\u003e\n        \u003cbutton ion-button icon-start clear small (click)=\"toCommentSection(post)\"\u003e\n          \u003cion-icon name=\"text\"\u003e\u003c/ion-icon\u003e\n          \u003cdiv\u003e{{post.comments.length}} Comments\u003c/div\u003e\n        \u003c/button\u003e\n      \u003c/ion-col\u003e\n    [...]\n```    \n\nAnd then update the `toCommentSection()` function in the `home.ts` to pass the post as a parameter to the Comments page:\n\n```typescript\n    // src/pages/home/home.ts\n    \n    [...]\n      public toCommentSection(post_data: any) {\n        let nav_params = new NavParams({ post: post_data });\n        this.navCtrl.push(CommentPage, nav_params);\n      }\n    [...]\n```\n\nNow, in the `comment.ts`, we import the Apollo client that was configured earlier and fetch the comments for the selected post:\n\n```typescript\n    // src/pages/comment/comment.ts\n    \n    import { Component } from '@angular/core';\n    import { IonicPage, NavController, NavParams } from 'ionic-angular';\n    import { Apollo } from 'apollo-angular';\n    import gql from 'graphql-tag';\n    \n    @IonicPage()\n    @Component({\n      selector: 'page-comment',\n      templateUrl: 'comment.html'\n    })\n    \n    export class CommentPage {\n      comments: any;\n      username: string;\n      post_desc: string;\n      user_avatar: string;\n    \n      constructor(\n        public navCtrl: NavController,\n        public navParams: NavParams,\n        private apollo: Apollo\n      ) {\n        this.username = this.navParams.get('username');\n        this.user_avatar = this.navParams.get('avatar');\n        this.post_desc = this.navParams.get('post_desc');\n        this.loadComments(this.navParams.get('post_id'));\n      }\n    \n      loadComments(post_id: string) {\n        this.apollo\n          .query({\n            query: gql`\n              {\n                comments(where: { post: { id: \"${post_id}\" } }) {\n                  id\n                  message\n                  user {\n                    avatar\n                    username\n                  }\n                }\n              }\n            `\n          })\n          .subscribe(({ data }) =\u003e {\n            let result: any = data;\n            this.comments = result.comments;\n          });\n      }\n    }\n```\n\nAfterwards, we update the `comment.html` to show the users, comments as follows:\n\n```html\n    \u003c!-- src/pages/comment/comment.html --\u003e\n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003eComments\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \n    \u003cion-content\u003e\n      \u003cion-grid\u003e\n        \u003cion-row class=\"post-content\"\u003e\n          \u003cion-col col-2\u003e\n            \u003cion-avatar item-start\u003e\n              \u003cimg class=\"icon-photo\" [src]=\"user_avatar\"\u003e\n            \u003c/ion-avatar\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col col-10\u003e\n            \u003cdiv\u003e\n              \u003cp\u003e\n                \u003cstrong\u003e{{username}}\u003c/strong\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp; {{post_desc}}\n              \u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n    \n        \u003cion-row *ngFor=\"let comment of comments\" class=\"user-comments\"\u003e\n          \u003cion-col col-2\u003e\n            \u003cion-avatar item-start\u003e\n              \u003cimg class=\"icon-photo\" [src]=\"comment.user.avatar\"\u003e\n            \u003c/ion-avatar\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col col-10\u003e\n            \u003cdiv\u003e\n              \u003cp\u003e\n                \u003cstrong\u003e{{comment.user.username}}\u003c/strong\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;{{ comment.message }}\n              \u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n      \u003c/ion-grid\u003e\n    \u003c/ion-content\u003e\n    \n    \u003cion-footer\u003e\n      \u003cion-grid\u003e\n        \u003cion-row class=\"comment-area\"\u003e\n          \u003cion-col col-9\u003e\n            \u003cion-textarea placeholder=\"Enter your comment...\"\u003e\u003c/ion-textarea\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col col-3\u003e\n            \u003cbutton ion-button class=\"comment-button\"\u003e\n              \u003cion-icon name=\"paper-plane\"\u003e\u003c/ion-icon\u003e\n            \u003c/button\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n      \u003c/ion-grid\u003e\n    \u003c/ion-footer\u003e\n```\n\n![instagram-clone-ionic-graphql-img10](//images.ctfassets.net/1es3ne0caaid/4Ynjth5fc0RY2g2FqyXdMR/6062862ba680e665755a96731a4aed02/instagram-clone-ionic-graphql-img10.png)\n\n\n## Conclusion\n![instagram-clone-ionic-graphql-img11](//images.ctfassets.net/1es3ne0caaid/36XSi3JhQrZ0gVWOjabogI/2bcaf9dfdf61bc34dc88b74f1452556e/instagram-clone-ionic-graphql-img11.gif)\n\nIn this part of this series, we examined how to connect our application with some dynamic data using Prisma to generate a GraphQL API and Apollo Client to interact with our GraphQL API seamlessly only requesting data that we need to render. In the next part, we will examine how to add this data from the interface and integrate realtime functionality to the application. Here’s a link to the full [GitHub](https://github.com/oreHGA/ionic-insta-clone) repository for more reference.","metaTitle":"Build an Instagram clone with Ionic - Part 2","metaDescription":"This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functionalities. In part two, create the backend server for the clone application that will serve data to the application."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5qLnzIl2Fok5bGlUdXlWp0","type":"Entry","createdAt":"2019-06-25T17:51:57.349Z","updatedAt":"2019-06-25T17:51:57.349Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an Instagram clone with Ionic: Part 1 - Creating the interface","url":"instagram-clone-ionic-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/ionic-insta-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}}],"reviewDate":"2019-06-25","description":"This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functionalities. In part one, create a simple interface for your Instagram clone and a running demo with Ionic.","prerequisite":"You will need Node 10+, Node Package Manager 6+ and Cordova 8+ installed on your machine.","content":"In this tutorial series, we are going to do a deep dive into how to make a simple Instagram clone with Ionic and add realtime functionalities with Pusher.\n\nYou are likely a part of the billion monthly active users that use Instagram! If you are as curious as I am, you will have given some thought about how it was built. Well, you don’t have to ponder anymore.\n\n## What we’ll build\n\nBy the end of this chapter, you will have created a simple interface for your Instagram clone and have a running demo with Ionic. What you have should look like this:\n\n![instagram-clone-ionic-interface-img1](//images.ctfassets.net/1es3ne0caaid/3x7yO4q3IP6ZCJ1IFDLlnU/bc7a29b062de14f68c1b7a575e3fc1ef/instagram-clone-ionic-interface-img1.gif)\n\n## Prerequisites\n\nTo follow through this series adequately, you’ll need the following:\n\n- Basic knowledge of JavaScript\n- [Node](http://www.nodejs.org) installed on your machine (v10.13.0)\n- [Node Package Manager](https://www.npmjs.com/) installed on your machine (v 6.4.1)\n- [Cordova](https://cordova.apache.org/) installed on your machine (v 8.1.2)\n\n\n## Getting started\n\nIonic is a framework that allows you to build native and progressive web applications using web technologies you’re already familiar with. The best part is that you have one code base for your native applications and the applications are written in Angular a framework that has a very low learning curve. So, you no longer need to know how to write Swift and Kotlin before you can build native applications anymore. To get started, you first need to install the Ionic CLI on your machine.\n\n```\n    npm install -g ionic@3.9.2\n```\n\n\u003e Ensure you have the specified version installed\n\nAfter your installation is complete, go ahead and create a new starter project using the command:\n\n```\n    ionic start instagram-ionic tabs\n```\n\n\u003e When asked to integrate the application with Cordova select `yes`.\n\nThis creates a starter project with a simple tabbed interface. Now, run your application, using the command:\n\n```\n    ionic serve\n```\n\nNavigate to `localhost:8100` on your browser and you get the following view: \n\n![instagram-clone-ionic-interface-img2](//images.ctfassets.net/1es3ne0caaid/yEfoiZ5bsj6CvcJpuC394/b30ba11f8fc7460b9b3fafd196db6f9f/instagram-clone-ionic-interface-img2.png)\n\nThis means that Ionic generates the sample tabs when creating the starter application. Modify your `tabs.html` and `tabs.ts` to look as follows: \n\n```typescript\n    \u003c!-- src/pages/tabs/tabs.html --\u003e\n    \n    \u003cion-tabs\u003e\n      \u003cion-tab [root]=\"tab1Root\" tabTitle=\"Home\" tabIcon=\"home\"\u003e\u003c/ion-tab\u003e\n    \u003c/ion-tabs\u003e\n\n\n\n    // src/pages/tabs/tab.ts\n    \n    import { Component } from '@angular/core';\n    import { HomePage } from '../home/home';\n    @Component({\n      templateUrl: 'tabs.html'\n    })\n    export class TabsPage {\n      tab1Root = HomePage;\n      constructor() {\n      }\n    }\n```\n\nThis makes sure there is only one tab in our application which is the homepage and that will be the first page.\n\n\n\u003e We will look at how to create the homepage later on in this tutorial\n\n\n## Splitting the application into pages\n\nWith Ionic, your application is split into pages. You can create as many pages as you like and these are the views your user interacts with. You can display different pages to users when they interact with your application.\n\nFor this demo, we will have the following pages:\n\n- Home page - displays recent posts for the user to view.\n- Profile page - displays more details about a particular user.\n- Comment page - displays comments made by different users on a particular page.\n\nTo create a new page in Ionic, you run the command:\n\n\n    ionic generate page \u003cname-of-page\u003e\n\n### Home page\nThe homepage will be responsible for displaying users posts when the application launches. Ionic automatically creates a home page by default so you can skip this command:\n\n```\n    ionic generate page Home\n```\n\nThis command stores the new page in the `src/pages` directory. Ideally, after you create a page, you declare the page and add it as an entry component in the `app.module.ts`. Since the homepage is created by default by Ionic, you don’t need to do it for the homepage.\n\n```typescript\n    // src/app/app.module.ts\n    // other imports\n    import { HomePage } from '../pages/home/home';\n    @NgModule({\n      declarations: [\n        MyApp,\n        HomePage,\n        TabsPage,\n      ],\n      imports: [...],\n      bootstrap: [IonicApp],\n      entryComponents: [\n        MyApp,\n        HomePage,\n        TabsPage,\n      ],\n      providers: [\n        ...  \n      ]\n    })\n    export class AppModule {}\n```\n\n\u003e You will realize that the `HomePage` has already been added because Ionic created the page by default when generating the starter application.\n\nNow, we want the homepage to display posts. Ionic comes built in with some wonderful UI components with some preset styling and to display posts, let’s use `Ionic Cards`. Update your `home.html` to look like this:\n\n```html\n    \u003c!-- src/pages/home.html --\u003e\n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003eInstagram Clone\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \u003cion-content\u003e\n      \u003c!-- this is where the posts will be --\u003e\n      \u003cion-card class=\"single-post-home\"\u003e\n        \u003cion-item\u003e\n          \u003cion-avatar item-start\u003e\n            \u003cimg src=\"https://res.cloudinary.com/og-tech/image/upload/s--Ivs1sp-J--/c_scale,w_100/v1529311900/og_icon.jpg\"\u003e\n          \u003c/ion-avatar\u003e\n          \u003ch2\u003ecapt.og\u003c/h2\u003e\n        \u003c/ion-item\u003e\n        \u003cimg src=\"https://res.cloudinary.com/og-tech/image/upload/q_40/v1506850322/blog_g3mexb.jpg\"\u003e\n        \u003cion-card-content\u003e\n          \u003cp\u003eZoned Out 💥\u003c/p\u003e\n        \u003c/ion-card-content\u003e\n        \u003cion-row\u003e\n          \u003cion-col\u003e\n            \u003cbutton ion-button icon-start clear small\u003e\n              \u003cion-icon name=\"heart\"\u003e\u003c/ion-icon\u003e\n              \u003cdiv\u003e12 Likes\u003c/div\u003e\n            \u003c/button\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col\u003e\n            \u003cbutton ion-button icon-start clear small\u003e\n              \u003cion-icon name=\"text\"\u003e\u003c/ion-icon\u003e\n              \u003cdiv\u003e4 Comments\u003c/div\u003e\n            \u003c/button\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n      \u003c/ion-card\u003e\n      \n      \u003cion-fab bottom right\u003e\n        \u003cbutton ion-fab mini\u003e\u003cion-icon name=\"add\"\u003e\u003c/ion-icon\u003e\u003c/button\u003e\n      \u003c/ion-fab\u003e\n    \u003c/ion-content\u003e\n```\n\nThe page also has the following styling:\n\n```css\n    # src/pages/home.scss\n    \n    .single-post-home{\n        margin-left: 0px;\n        margin-right: 0px;\n        margin-bottom: 10px;\n        padding-top: 10px;\n        width:100%;\n        box-shadow: 1px 1px rgba(160, 160, 160, 0.453);\n    }\n```\n\nNow, when you test your application, using `ionic serve`, you have the following:\n\n\n\u003e Right now, none of the action buttons in the application are functional, but as we go through the series, we will see how to bring it all together.\n\n![instagram-clone-ionic-interface-img3](//images.ctfassets.net/1es3ne0caaid/3lUlr7hCnOYAUxTjQ0XBbB/71a5bf287839f39dba7c52caa6be7217/instagram-clone-ionic-interface-img3.png)\n\nIf this was a very bare bones demo application, this could pass for your complete application but, we need to add some extra pages to the demo before we call it a day. To do this, we will add the upcoming pages.\n\n### Profile page\n\n\n![instagram-clone-ionic-interface-img4](//images.ctfassets.net/1es3ne0caaid/6gnDKhOp1vD7ScFAKs4mVs/03828969352533b288193c278eed7382/instagram-clone-ionic-interface-img4.png)\n\nWhen interacting with the application and a user’s name or avatar is clicked, the application redirects to the profile page of the user. The profile page will show a short bio of the user, users follower count, and posts made by the user. To create the profile page, run the command:\n\n```\n    ionic generate page Profile\n```\n\n![instagram-clone-ionic-interface-img5](//images.ctfassets.net/1es3ne0caaid/6TSE7QZe9gNigPz8Z82iOh/7fa408015fcd5bb5c15a12f50939972d/instagram-clone-ionic-interface-img5.png)\n\nThen, register the profile page:\n\n```typescript\n    // src/app/app.module.ts\n    // other imports\n    import { ProfilePage } from '../pages/profile/profile';\n    @NgModule({\n      declarations: [\n        MyApp,\n        HomePage,\n        TabsPage,\n        ProfilePage\n      ],\n      imports: [...],\n      bootstrap: [IonicApp],\n      entryComponents: [\n        MyApp,\n        HomePage,\n        TabsPage,\n        ProfilePage\n      ],\n      providers: [\n        ...  \n      ]\n    })\n    export class AppModule {}\n```\n\nAfter this is done, update the HTML for the profile page to look like this:\n\n```html\n    \u003c!-- src/pages/profile/profile.html --\u003e\n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003ecapt.og\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \n    \u003cion-content\u003e\n      \u003cion-grid class=\"profile-intro\"\u003e\n        \u003cion-row\u003e\n          \u003cion-col col-4\u003e\n            \u003cimg class=\"profile-photo\" src=\"https://res.cloudinary.com/og-tech/image/upload/s--Ivs1sp-J--/c_scale,w_100/v1529311900/og_icon.jpg\"\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col col-8\u003e\n            \u003cdiv class=\"profile-info\"\u003e\n              \u003cdiv class=\"post-count info-square\"\u003e\n                \u003cp\u003e\n                  \u003cstrong\u003e1\u003c/strong\u003e\u003cbr\u003e\n                  \u003cem\u003epost\u003c/em\u003e\n                \u003c/p\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"follower-count info-square\"\u003e\n                \u003cp\u003e\n                  \u003cstrong\u003e1532\u003c/strong\u003e\u003cbr\u003e\n                  \u003cem\u003efollowers\u003c/em\u003e\n                \u003c/p\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"following-count info-square\"\u003e\n                \u003cp\u003e\n                  \u003cstrong\u003e200\u003c/strong\u003e\u003cbr\u003e\n                  \u003cem\u003efollowing\u003c/em\u003e\n                \u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv\u003e\n              \u003cbutton ion-button class=\"follow-button\"\u003eFollow\u003c/button\u003e\n            \u003c/div\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n      \u003c/ion-grid\u003e\n    \n      \u003cdiv class=\"more-details\"\u003e\n        \u003cp class=\"user-name\"\u003e\u003cstrong\u003eOreoluwa Ogundipe\u003c/strong\u003e\u003c/p\u003e\n        \u003cp class=\"user-bio\"\u003eSoftwèrè Engineer\u003c/p\u003e\n      \u003c/div\u003e\n    \n      \u003cion-segment color=\"primary\"\u003e\n        \u003cion-segment-button value=\"posts\" selected\u003e\n          \u003cion-icon name=\"grid\"\u003e\u003c/ion-icon\u003e    \n        \u003c/ion-segment-button\u003e\n        \u003cion-segment-button value=\"tagged\"\u003e\n            \u003cion-icon name=\"contacts\"\u003e\u003c/ion-icon\u003e\n          \u003c/ion-segment-button\u003e\n        \u003cion-segment-button value=\"bookmark\"\u003e\n          \u003cion-icon name=\"bookmark\"\u003e\u003c/ion-icon\u003e\n        \u003c/ion-segment-button\u003e\n      \u003c/ion-segment\u003e\n    \n      \u003cion-grid class=\"image-grid\"\u003e\n        \u003cion-row class=\"single-row\"\u003e\n          \u003cion-col col-4 class=\"single-image\"\u003e\n            \u003cimg height=\"100%\" width=\"100%\" src=\"https://res.cloudinary.com/og-tech/image/upload/q_40/v1506850322/blog_g3mexb.jpg\"\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n      \u003c/ion-grid\u003e\n    \u003c/ion-content\u003e\n```\n\nAlso edit the styling for the page as follows:\n\n```css\n    # src/pages/profile/profile.scss\n    .profile-photo{\n        border-radius:50%;\n        margin-top: 10px;\n        width: 8em !important;\n        height: 8em !important;\n    }\n    \n    .profile-info{\n        display: flex;\n        flex-direction: row;\n        justify-content: space-around;\n        align-items: center;\n        text-align: center;\n    }\n    \n    .info-square{\n        text-align: center;\n    }\n    \n    .follow-button{\n        width:90%;\n        margin: 0px 10px;\n        background-color: #3E99ED;\n    }\n    \n    .more-details{\n        padding-left: 10px;\n    }\n    \n    $segment-button-ios-border-radius: 0px;\n    $segment-button-ios-toolbar-icon-size: 3rem;\n    $segment-button-ios-toolbar-icon-width: 3rem;\n    \n    ion-segment{\n        height: 5rem;\n        border: 1px solid rgba(160, 160, 160, 0.453);\n    }\n    \n    ion-segment-button{\n        border: 0px !important;\n    }\n    \n    .image-grid{\n        padding: 0px;\n        margin: 0px;\n    }\n    \n    .single-row{\n        height: 18rem;\n    }\n    \n    .single-image{\n        padding:0px;\n    }\n```\n\nNow, you may be wondering “wait we haven’t implemented the logic to move from the home page to the profile page”. To do this, we need to trigger the navigation to the next page when the user’s name/avatar is clicked. To do this, update your `home.html` as follows:\n\n```html\n    \u003c!-- src/pages/home/home.html --\u003e\n    \n    \u003cion-content\u003e\n      \u003c!-- this is where the posts will be --\u003e\n      \u003cion-card class=\"single-post-home\"\u003e\n        \u003cion-item (click)=\"toProfilePage()\"\u003e\n          \u003cion-avatar item-start\u003e\n            \u003cimg src=\"https://res.cloudinary.com/og-tech/image/upload/s--Ivs1sp-J--/c_scale,w_100/v1529311900/og_icon.jpg\"\u003e\n          \u003c/ion-avatar\u003e\n          \u003ch2\u003ecapt.og\u003c/h2\u003e\n        \u003c/ion-item\u003e\n        \n        \u003c!-- other card information --\u003e\n      \u003c/ion-card\u003e\n      [...]\n    \u003c/ion-content\u003e\n```\n\nA new `toProfilePage()` function is set to execute when the item is clicked. Let’s take a look at the implementation of the function. Update your `home.ts` file to look like this:\n\n```typescript\n    # src/pages/home/home.ts\n    \n    import { Component } from '@angular/core';\n    import { NavController } from 'ionic-angular';\n    import { ProfilePage } from '../profile/profile';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html'\n    })\n    export class HomePage {\n      constructor(public navCtrl: NavController) {\n      }\n    \n      public toProfilePage(){\n        this.navCtrl.push(ProfilePage);\n      }  \n    }\n```\n\n### Comment page\n\n\n![instagram-clone-ionic-interface-img6](//images.ctfassets.net/1es3ne0caaid/7DLZkzVczkIjW6JjgaplML/7b82f5dafef5751f14b8f9c8e145fd54/instagram-clone-ionic-interface-img6.png)\n\nFinally, to allow for some interactivity among users within our application, let’s create a comment page to allow users to comment on existing posts when the comment button is clicked. To do this, create a new comment page using the command:\n\n```\n    ionic generate page Comment\n```\n\nAfter this is created, you’ll want to add the comment page as an entry module in your `app.module.ts` like this:\n\n```typescript\n    // src/app/app.module.ts\n    // other imports\n    import { CommentPage } from '../pages/comment/comment';\n    @NgModule({\n      declarations: [\n        MyApp,\n        HomePage,\n        TabsPage,\n        ProfilePage,\n        CommentPage,\n      ],\n      imports: [...],\n      bootstrap: [IonicApp],\n      entryComponents: [\n        MyApp,\n        HomePage,\n        TabsPage,\n        ProfilePage,\n        CommentPage\n      ],\n      providers: [\n        ...  \n      ]\n    })\n    export class AppModule {}\n```\n\nAfterwards, we update the HTML markup of the comment page as follows:\n\n```html\n    \u003c!-- src/pages/comment/comment.html --\u003e\n    \u003cion-header\u003e\n    \n      \u003cion-navbar\u003e\n        \u003cion-title\u003eComments\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \n    \u003c/ion-header\u003e\n    \n    \n    \u003cion-content\u003e\n      \u003cion-grid\u003e\n        \u003c!-- first comment grid --\u003e\n        \u003cion-row class=\"post-content\"\u003e\n          \u003cion-col col-2\u003e\n            \u003cion-avatar item-start\u003e\n              \u003cimg class=\"icon-photo\" src=\"https://res.cloudinary.com/og-tech/image/upload/s--Ivs1sp-J--/c_scale,w_100/v1529311900/og_icon.jpg\"\u003e\n            \u003c/ion-avatar\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col col-10\u003e\n            \u003cdiv\u003e\n              \u003c!-- this will contain the main post content --\u003e\n              \u003cp\u003e\u003cstrong\u003ecapt.og\u003c/strong\u003e Zoned Out 💥\u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n    \n        \u003c!-- this rows will represent sample comments --\u003e\n        \u003cion-row class=\"user-comments\"\u003e\n          \u003cion-col col-2\u003e\n            \u003cion-avatar item-start\u003e\n              \u003cimg class=\"icon-photo\" src=\"https://api.adorable.io/avatars/100/big_dawg@adorable.png\"\u003e\n            \u003c/ion-avatar\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col col-10\u003e\n            \u003cdiv\u003e\n              \u003c!-- this will contain the main post content --\u003e\n              \u003cp\u003e\u003cstrong\u003ebig_dawg\u003c/strong\u003e Haha! I feel you bruva! Stay grinding 💯\u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e \n    \n        \u003cion-row class=\"user-comments\"\u003e\n            \u003cion-col col-2\u003e\n              \u003cion-avatar item-start\u003e\n                \u003cimg class=\"icon-photo\" src=\"https://api.adorable.io/avatars/100/broda_shagi@adorable.png\"\u003e\n              \u003c/ion-avatar\u003e\n            \u003c/ion-col\u003e\n            \u003cion-col col-10\u003e\n              \u003cdiv\u003e\n                \u003c!-- this will contain the main post content --\u003e\n                \u003cp\u003e\u003cstrong\u003ebroda_shagi\u003c/strong\u003e Better make sure you write tests 😏\u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/ion-col\u003e\n        \u003c/ion-row\u003e \n      \u003c/ion-grid\u003e\n    \u003c/ion-content\u003e\n    \n    \u003cion-footer\u003e\n      \u003c!-- add the input field fixed to the bottom of the screen --\u003e\n      \u003cion-grid\u003e\n          \u003cion-row class=\"comment-area\"\u003e\n            \u003cion-col col-9\u003e\n              \u003cion-textarea placeholder=\"Enter your comment...\"\u003e\u003c/ion-textarea\u003e\n            \u003c/ion-col\u003e\n            \u003cion-col col-3 \u003e\n              \u003cbutton ion-button class=\"comment-button\"\u003e\n                \u003cion-icon name=\"paper-plane\"\u003e\u003c/ion-icon\u003e\n              \u003c/button\u003e\n            \u003c/ion-col\u003e\n          \u003c/ion-row\u003e\n        \u003c/ion-grid\u003e\n    \u003c/ion-footer\u003e\n```\n\nThe view also has the following styling:\n\n```css\n    # src/pages/commment/comment.scss\n    \n    .icon-photo{\n        border-radius:50% !important;\n        margin-top: 10px;\n        height: 3em !important;\n        width: 3em !important;\n    }\n    \n    .post-content{\n        border-bottom: 1px solid rgba(160, 160, 160, 0.453);\n        padding-bottom: 10px;\n    }\n    \n    .user-comments{\n        padding-bottom: 10px;\n    }\n    \n    .comment-area{\n        border: 1px solid  rgba(160, 160, 160, 0.453);\n        margin: 0px;\n        padding: 0px;\n        border-radius: 5px;\n        width: 100%;\n    }\n    \n    .comment-button{\n        width: 100%;\n        margin: 0px;\n        padding: 0px;\n        height:100%;\n    }\n```    \n\nAfter this, you will need to link the comment page from the home page and you can do this by updating the comment button on the home page like this:\n\n```html\n    \u003c!-- src/pages/home/home.html --\u003e\n    \n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003eInstagram Clone\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \n    \u003cion-content\u003e\n      \u003cion-card class=\"single-post-home\"\u003e\n        [...]\n    \n        \u003cion-row\u003e\n          \u003cion-col\u003e\n            \u003cbutton ion-button icon-start clear small \u003e\n              \u003cion-icon name=\"thumbs-up\"\u003e\u003c/ion-icon\u003e\n              \u003cdiv\u003e12 likes\u003c/div\u003e\n            \u003c/button\u003e\n          \u003c/ion-col\u003e\n          \u003cion-col\u003e\n            \u003cbutton ion-button icon-start clear small (click)=\"toCommentSection()\"\u003e\n              \u003cion-icon name=\"text\"\u003e\u003c/ion-icon\u003e\n              \u003cdiv\u003e2 Comments\u003c/div\u003e\n            \u003c/button\u003e\n          \u003c/ion-col\u003e\n        \u003c/ion-row\u003e\n    \n      \u003c/ion-card\u003e\n      \n      [...]\n    \u003c/ion-content\u003e\n```    \n\nThe `toCommentSection` function is called when the comment button is clicked. Update your `home.ts` file to look like this:\n\n```typescript\n    # src/pages/home/home.ts\n    \n    import { Component } from '@angular/core';\n    import { NavController } from 'ionic-angular';\n    import { ProfilePage } from '../profile/profile';\n    import { CommentPage } from '../comment/comment';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html'\n    })\n    export class HomePage {\n      post_num_likes = 12;\n      constructor(public navCtrl: NavController) {\n    \n      }\n    \n      public toProfilePage(){\n        this.navCtrl.push(ProfilePage);\n      }\n      \n      public toCommentSection(){\n        this.navCtrl.push(CommentPage);\n      }\n      \n    }\n```\n\n## Conclusion\n\nIn this first part of the series, we have created a simple interface for our Instagram clone which we will build upon in future parts of this series. When you run `ionic serve` and navigate to `localhost:8100` on your browser, you will have an application that looks like this:\n\n\n![Application Interface](https://d2mxuefqeaa7sj.cloudfront.net/s_0B96B0BF1E8CEFF17338A5BE72D0028B64EF4B219F273FA1CA9A3758167F1818_1533069377573_ezgif.com-video-to-gif.gif)\n![instagram-clone-ionic-interface-img1](//images.ctfassets.net/1es3ne0caaid/NIHeHMU0iDf0MlKkzh7GN/44c86d0544e7f169ca73a7e2a299676f/instagram-clone-ionic-interface-img1.gif)\n\nNotice that all the data rendered in this chapter was hard-coded into the application. In the next part, we will take a look at how to serve dynamic content by connecting our application to GraphQL servers using Apollo, and Prisma. Here’s a link to the full [GitHub](https://github.com/oreHGA/ionic-insta-clone) repository.","metaTitle":"Build an Instagram clone with Ionic - Part 1","metaDescription":"This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functionalities. In part one, create a simple interface for your Instagram clone and a running demo with Ionic."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6VOxUmjTarGnHon8rnsCga","type":"Entry","createdAt":"2019-06-24T17:02:16.009Z","updatedAt":"2019-06-24T17:02:16.009Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with GraphQL in React Native","url":"learning-graphql-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNGraphQL","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2019-06-24","description":"GraphQL makes it easier for developers to get the specific data we want with less code. In this tutorial you will learn how to implement a simple GraphQL server and query the data from a React Native app, by creating a simple app which fetches, inserts, updates, and deletes data from a GraphQL server. ","prerequisite":"You will need to have Node 11.2+, Yarn 1.13+, React Native CLI 2.0+ and React Native 0.59+ installed on your machine.","content":"GraphQL’s adoption is increasing, and for good reason. Many believe it’s the future for API’s, and big companies (GitHub,  Coursera, PayPal, Shopify) using it just sparks the developer interest even further. \n\nIt’s really an exciting time to learn GraphQL, especially for React Native developers because the apps that we create usually communicate with a server. GraphQL makes it easier for us to get the specific data we want with less code. Gone are the days where we have to hit multiple endpoints just to get the data we want from a REST API.\n\nIn this tutorial, you will learn how to implement a simple GraphQL server and query the data from a React Native app.\n\n\n## Prerequisites\n\nBasic knowledge of React Native and Node.js is required to follow this tutorial.\n\nThe following package versions are used in this tutorial:\n\n\n- Node 11.2.0\n- Yarn 1.13.0\n- React Native CLI 2.0.1\n- React Native 0.59.5\n\nIf you encounter any issues getting the app to work, try using the above versions instead.\n\n\n## App overview\n\nWe will build a Pokemon viewer app. This will pick a random Pokemon and display it on the screen. When the user taps on it, a new Pokemon will be fetched. It’s really simple but it’s still going to demonstrate how to implement the full GraphQL stack.\n\n![learning-graphql-react-native-img1](//images.ctfassets.net/1es3ne0caaid/3yxQ1dJNzxf7XTLzFFJxLm/54582a216270b922c901177eaa08d82e/learning-graphql-react-native-img1.gif)\n\nYou can view the source code of the app on this [GitHub repo](https://github.com/anchetaWern/RNGraphQL).\n\n\n## Bootstrapping the app\n\nTo ensure compatibility, clone the GitHub repo for this project:\n\n```\n    git clone https://github.com/anchetaWern/RNGraphQL\n```\n\nThis contains the `package.json` file for both the server and the React Native app. The `starter` branch contains the starting point for this tutorial:\n\n```\n    git checkout starter\n```\n\nOnce you’ve switched branches, you can go ahead and install the dependencies and re-create the `android` and `ios` folders for the app:\n\n```\n    yarn\n    react-native eject\n```\n\nThat will install all the GraphQL-related packages that we’re going to need in the app. Later on, you’ll learn what each one does once we proceed to code the client side.\n\nLastly, we also need to install the server dependencies:\n\n```\n    cd server\n    yarn\n```\n\n\n## Creating the GraphQL server\n\nIn this section, we will be creating the GraphQL server using [Apollo](https://www.apollographql.com/). As you might already know, GraphQL is only a [specification](https://graphql.github.io/graphql-spec/), not an [implementation](https://graphql.org/code/). That’s why we need something like Apollo to implement it. \n\nApollo is a platform which provides us with all the tools needed for implementing a GraphQL server. This includes both the server and the client. The server component is used for defining the schema and resolvers (provides instructions on how to turn a specific GraphQL operation into data). On the other hand, the client component is responsible for providing tools that we can use for querying the server and binding the results to the UI. \n\n### Defining the schema\nThe first step in creating a GraphQL server is for us to define the schema. This is where you strictly define what data your API is managing. In this case, we’re handling basic Pokemon data. \n\nIf you’ve seen the demo gif earlier, you know exactly which Pokemon data we’re working with:\n\n\n- Name\n- Image\n- Types\n- Description\n\nBut aside from that, we also need to define the queries that the server is going to handle. In this case, we’re using the [PokéAPI](https://pokeapi.co/) as our direct data source so our queries will be limited by the endpoints they’re exposing. We’re only going to need a few data from these endpoints so it’s fine if we use them directly:\n\n\n- `/pokemon/{id}` - used for getting the Pokemon data.\n- `/pokemon-species/{id}` - used for getting the description text.\n\nWith that in mind, we know that we can only have queries which accept the ID of the Pokemon as its argument. \n\n\n\u003e **Note**: We’re not really going to cover caching in this tutorial, but it’s important to implement it if you’re going to use an existing REST API as a direct data source. That way, you won’t get throttled from using the API too much. PokéAPI is actually limited to 100 API requests per IP address per minute.\n\nNow we’re ready to define the schema. Create a `server/schema.js` file and add the following code:\n\n```javascript\n    const { gql } = require('apollo-server');\n    \n    const typeDefs = gql`\n      type Query {\n        pokemon(id: ID!): Pokemon\n      }\n    \n      type Pokemon {\n        id: ID!\n        name: String\n        desc: String\n        pic: String\n        types: [PokemonType!]!\n      }\n    \n      type PokemonType {\n        id: Int!\n        name: String!\n      }\n    `;\n    \n    module.exports = typeDefs;\n```\n\nBreaking down the above code, we first imported the `apollo-server` package. This allows us to define the GraphQL schema. The schema includes the shape of the data we expect to return, as well as the shape of the queries. \n\nLet’s first start with the `Query` type which describes what data we can fetch. In this case, we only want the user to fetch Pokemon data so the query is named `pokemon`. To specify arguments, you need to put them inside the parentheses right after the name of the query. In this case, we want the users to supply the ID of the Pokemon. An exclamation is added after it to indicate that it is a required argument. After that, we specify the return data after the colon (`Pokemon`). This is a custom GraphQL object type which we’ll define next:\n\n```javascript\n    type Query {\n      pokemon(id: ID!): Pokemon\n    }\n```\n\nNext, we need to define the `Pokemon` object type. This is where we specify all the properties (and their data type) that are available for this particular type. Most of the properties that we need to expose are only scalar types (`ID` and `String`):\n \n\n- `ID` is a unique identifier for a specific object of this type. An exclamation is added after it which means it cannot have a value of `null`. \n- `String` is just your usual primitive type for storing string values.\n- `PokemonType` is yet another object type. The `types` property is used for storing an array of objects so we also have to break down the object to its expected properties:\n\n```javascript\n    type Pokemon {\n      id: ID!\n      name: String\n      desc: String\n      pic: String\n      types: [PokemonType]\n    }\n```\n\nHere’s the definition of the `PokemonType`:\n\n```javascript\n    type PokemonType {\n      id: Int\n      name: String\n    }\n```\n\n\u003e You can find more types on this [cheat sheet](https://devhints.io/graphql#schema).\n\n### Connect to a data source\nNow that we’ve defined our schema, the next step is to connect to a data source. Apollo comes with a data source API, which you could use to easily connect to an existing database or a REST API. As mentioned earlier, we will be using PokéAPI as our data source. This API provides Pokemon data from all of the Pokemon games so it’s perfect for our needs.\n\nCreate a `server/datasources/poke.js` file and add the following:\n\n```javascript\n    const { RESTDataSource } = require('apollo-datasource-rest');\n    \n    class PokeAPI extends RESTDataSource {\n      constructor() {\n        super();\n        this.baseURL = 'https://pokeapi.co/api/v2/';\n      }\n    \n      pokemonReducer(pokemon, pokemonSpecies) {\n        return {\n          id: pokemon.id || 0,\n          name: pokemon.name,\n          desc: this.getDescription(pokemonSpecies.flavor_text_entries),\n          pic: pokemon.sprites.front_default, // image URL of the front facing Pokemon\n          types: this.getTypes(pokemon.types)\n        };\n      }\n    \n      getDescription(entries) {\n        return entries.find(item =\u003e item.language.name === 'en').flavor_text;\n      }\n    \n      getTypes(types) {\n        return types.map(({ slot, type }) =\u003e {\n          return {\n            \"id\": slot, // the type's index\n            \"name\": type.name // the type's name (e.g. electric, leaf)\n          }\n        });\n      }\n    \n      async getPokemonById({ id }) {\n        const pokemonResponse = await this.get(`pokemon/${id}`);\n        const pokemonSpeciesResponse = await this.get(`pokemon-species/${id}`);\n        return this.pokemonReducer(pokemonResponse, pokemonSpeciesResponse);\n      }\n    }\n    \n    module.exports = PokeAPI;\n```\n\nIf you’ve consumed any sort of REST API before (and I assume you have), the code above should easily make sense to you. The `apollo-datasource-rest` package really makes this simple. This package exposes the `RESTDataSource` class which allows us to make a request to a REST API:\n\n```\n    const pokemonResponse = await this.get(`pokemon/${id}`); // this.post for POST requests\n    const pokemonSpeciesResponse = await this.get(`pokemon-species/${id}`);\n```\n\nFrom there, all we had to do was to extract the data that we need. The only thing you need to remember is that the data you’re extracting should correspond to the properties that you’ve defined earlier in your schema: `id`, `name`, `desc`, `pic`, and `types`:\n\n```javascript\n    pokemonReducer(pokemon, pokemonSpecies) {\n      return {\n        id: pokemon.id || 0,\n        name: pokemon.name,\n        desc: this.getDescription(pokemonSpecies.flavor_text_entries),\n        pic: pokemon.sprites.front_default, // image URL of the front facing Pokemon\n        types: this.getTypes(pokemon.types)\n      };\n    }\n```\n\n### Define the resolvers\nThe final piece of the puzzle is the resolvers. The resolvers allow us to define the mapping of the queries you’ve defined in your schema to the data source method which returns the data. It follows the format:\n\n```\n    fieldName: (parent, args, context, info) =\u003e data;\n```\n\nHere’s what each one does:\n\n\n- `parent` - an object that contains the result returned from the resolver on the parent type. This is always blank (`_`) because it refers to the root of the graph.\n- `args` - an object containing the arguments passed to the field. In this case, our query only accepts the `id` of the Pokemon. We then need to pass the `id` to the data source method (`getPokemonById()`) as an object property because that’s how we defined it earlier on the `server/datasources/poke.js` file.\n- `context` - this is where we can access our data sources. We can extract the data source from the `dataSources` property. \n- `info` - an object which contains information about the execution state of the operation. We don’t really need to use it in this case so we just won’t supply it at all.\n\nTo define the resolver, create a `server/resolvers.js` file and add the following:\n\n```javascript\n    module.exports = {\n      Query: {\n        pokemon: (_, { id }, { dataSources }) =\u003e\n          dataSources.pokeAPI.getPokemonById({ id })\n      }\n    };\n```\n\n### Creating the server\nThe final step in implementing the GraphQL server is to bring everything together. Create a `server/index.js` file and add the following:\n\n```javascript\n    const { ApolloServer } = require('apollo-server');\n    const typeDefs = require('./schema');\n    const resolvers = require('./resolvers');\n    \n    const PokeAPI = require('./datasources/poke');\n    \n    const server = new ApolloServer({\n      typeDefs,\n      resolvers,\n      dataSources: () =\u003e ({\n        pokeAPI: new PokeAPI()\n      })\n    });\n    \n    server.listen().then(({ url }) =\u003e {\n      console.log(`GraphQL Server is running at ${url}`);\n    });\n```\n\nIn the above code, we import the `ApolloServer` class from the `apollo-server` package. This allows us to fire up an Apollo server which accepts an object containing the schema, resolvers, and data sources we’ve defined earlier.\n\nAt this point, you can now run the server:\n\n```\n    cd server\n    yarn start\n```\n\nYou can play around with it by accessing `http://localhost:4000/` on your browser.\n\nIf you get a blank screen, delete the `node_modules` folder and `yarn.lock` file. After that, remove the `dependencies` property in the `package.json` file and re-install the dependencies with the following command:\n\n```\n    yarn add apollo-datasource-rest@0.4.0 apollo-server@2.5.0 graphql@14.3.0\n```\n\nFrom there, you can view the schema that we’ve defined earlier by clicking on the **SCHEMA** tab located on the right part of the screen:\n\n![learning-graphql-react-native-img2](//images.ctfassets.net/1es3ne0caaid/6AopF3xeN9RakYIRY9OuIt/f3b457ef658620f22c5f3ed37e75013a/learning-graphql-react-native-img2.png)\n\nBut this interface is mostly used for testing out your queries. In this case, we want to fetch the [Pokemon with the ID of 25](https://pokeapi.co/api/v2/pokemon/25):\n\n```javascript\n    query GetPokemonByName {\n      pokemon(id: 25) {\n        id,\n        name,\n        desc,\n        pic\n      }\n    }\n```\n\nThat will return the following result:\n\n```javascript\n    {\n      \"data\": {\n        \"pokemon\": {\n          \"id\": \"25\",\n          \"name\": \"pikachu\",\n          \"desc\": \"Its nature is to store up electricity. Forests\\nwhere nests of Pikachu live are dangerous,\\nsince the trees are so often struck by lightning.\",\n          \"pic\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/25.png\"\n        }\n      }\n    }\n```\n\n![learning-graphql-react-native-img3](//images.ctfassets.net/1es3ne0caaid/fYKS2ND5KabBCdlTXqIPA/ed9895bc2d6cd8fde64007244b1189c7/learning-graphql-react-native-img3.png)\n\nWhat if we also want to get the types of the Pokemon? Intuitively, we would just add `types` to the properties we’ve specified:\n\n```javascript\n    query GetPokemonByName {\n      pokemon(id: 25) {\n        id,\n        name,\n        desc,\n        pic,\n        types\n      }\n    }\n```\n\nBut that’s going to return an error:\n\n![learning-graphql-react-native-img4](//images.ctfassets.net/1es3ne0caaid/4OpuXXnRVLlPzTEcz61IaO/db2a34b74155ec997a3589a7c0ae21d2/learning-graphql-react-native-img4.png)\n\nThe error says:\n\n\n\u003e The field types of type [PokemonType] must have a selection of subfields.\n\nThis means that you also need to specify the subfields that you want to fetch like so:\n\n```javascript\n    query GetPokemonByName {\n      pokemon(id: 25) {\n        id,\n        name,\n        desc,\n        pic,\n        types {\n          id,\n          name\n        }\n      }\n    }\n```\n\nThat will return the following:\n\n```javascript\n    {\n      \"data\": {\n        \"pokemon\": {\n          \"id\": \"25\",\n          \"name\": \"pikachu\",\n          \"desc\": \"Its nature is to store up electricity. Forests\\nwhere nests of Pikachu live are dangerous,\\nsince the trees are so often struck by lightning.\",\n          \"pic\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/25.png\",\n          \"types\": [\n            {\n              \"id\": 1,\n              \"name\": \"electric\"\n            }\n          ]\n        }\n      }\n    }\n```\n\n## Building the app\n\nNow that we’re done implementing the server, it’s time for us to add the code for the React Native app. Open the `App.js` file and add the following:\n\n```javascript\n    import React, { Component } from \"react\";\n    import { View, Text, ActivityIndicator } from \"react-native\";\n    \n    import { ApolloProvider, Query } from \"react-apollo\";\n    import ApolloClient from \"apollo-boost\";\n    import gql from \"graphql-tag\";\n```\n\nHere’s what each package does:\n\n\n- `apollo-boost` - used for connecting to an Apollo server.\n- `react-apollo` - provides React components that allows us to fetch data from the Apollo server.\n- `graphql-tag` - used for parsing GraphQL queries into a format understood by the Apollo client.\n\nNext, connect to the server that we created earlier. Replace the placeholder with your machine’s internal IP address. Be sure that your machine and your device are connected to the same network when you do so. You can also use [ngrok](https://ngrok.com/) if you want:\n\n```\n    const client = new ApolloClient({ uri: 'http://YOUR_INTERNAL_IP_ADDRESS:4000/graphql' })\n```\n\nNext, import the component for rendering the Pokemon data as well as the helper function for generating random integers:\n\n```\n    import Pokemon from \"./src/components/Pokemon\";\n    import getRandomInt from \"./src/helpers/getRandomInt\";\n```\n\nNext, we’re going to use the [Context API](https://reactjs.org/docs/context.html) so we can pass the Pokemon data through the component tree without having to pass props needed by the `Pokemon` component down manually at every level:\n\n```\n    export const AppContext = React.createContext({ data: { pokemon: null } });\n```\n\nNext, create the component and declare its default state. The `query` contains the same query that we used earlier. We’re putting it in the state so the component will re-render every time we update it:\n\n```javascript\n    export default class App extends Component {\n    \n      state = {\n        query: null\n      }\n      \n      // next: add componentDidMount\n    }\n```\nOnce the component is mounted, we generate the query and update the state:\n\n```javascript\n    componentDidMount() {\n      const query = this.getQuery();\n      this.setState({\n        query\n      });\n    }\n```\n\nHere’s the `getQuery()` function. This generates a random ID and uses it for the query:\n\n```javascript\n    getQuery = () =\u003e {\n      const randomID = getRandomInt(1, 807);\n      return `\n        query GetPokemonById {\n          pokemon(id: ${randomID}) {\n            id,\n            name,\n            desc,\n            pic,\n            types {\n              id,\n              name\n            }\n          }\n        }\n      `\n    }\n```\n\nIn the `render()` method, the `\u003cApolloProvider\u003e` component is where we pass the client we created with the `ApolloClient` earlier. Then we add the `\u003cQuery\u003e` component as its child, this is where you pass the `query`. Don’t forget to parse the `query` with the `gql` module. By default, `loading` will have a value of `true`. In that case, we show a loading animation. Once the server responds, it can either be an `error` or `data`. The `data` contains the same data you saw earlier when we tried running some queries. From there, we just pass the Pokemon data and the function for fetching a new one to the app’s context:\n\n```javascript\n    render() {\n      const { query } = this.state;\n      if (!query) return null;\n    \n      return (\n        \u003cApolloProvider client={client}\u003e\n          \u003cQuery query={gql`${query}`} \u003e\n            {({ loading, error, data }) =\u003e {\n              if (loading || error) return \u003cActivityIndicator size=\"large\" color=\"#0000ff\" /\u003e\n              return (\n                \u003cAppContext.Provider value={{...data.pokemon, onPress: this.onGetNewPokemon}} style={styles.container}\u003e\n                  \u003cPokemon /\u003e\n                \u003c/AppContext.Provider\u003e\n              )\n            }}\n          \u003c/Query\u003e\n        \u003c/ApolloProvider\u003e\n      );\n    }\n```\n\nHere’s the `onGetNewPokemon()` function:\n\n```javascript\n    onGetNewPokemon = () =\u003e {\n      const query = this.getQuery();\n      this.setState({\n        query\n      });\n    }\n```\n\n### getRandomInt helper\nHere’s the helper for generating random integers. Create the `src/helpers` folder to house it:\n\n```javascript\n    // src/helpers/getRandomInt.js\n    const getRandomInt = (min, max) =\u003e {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    \n    export default getRandomInt;\n```\n\n### Pokemon component\nThe `Pokemon` component is used for displaying the Pokemon data. Create a `src/components` folder to house it.\n\nStart by importing the packages we need:\n\n```javascript\n    // src/components/Pokemon.js\n    import React from 'react';\n    import { View, Text, Image, FlatList, TouchableOpacity } from 'react-native';\n    import { AppContext } from '../../App'; // import the context we exported earlier on the App.js file\n```\n\nNext, render the component. Wrap it in `\u003cAppContext.Consumer\u003e` so you get access to the data and the `onPress` function that we passed to the context earlier. From there, it’s just a matter of displaying the data using the right components:\n\n```javascript\n    const Pokemon = () =\u003e {\n      return (\n        \u003cAppContext.Consumer\u003e\n          {\n            ({ name, pic, types, desc, onPress }) =\u003e\n            \u003cTouchableOpacity onPress={onPress}\u003e\n              \u003cView style={styles.mainDetails}\u003e\n                \u003cImage\n                  source={{uri: pic}}\n                  style={styles.image} resizeMode={\"contain\"} /\u003e\n                  \u003cText style={styles.mainText}\u003e{name}\u003c/Text\u003e\n    \n                  \u003cFlatList\n                    columnWrapperStyle={styles.types}\n                    data={types}\n                    numColumns={2}\n                    keyExtractor={(item) =\u003e item.id.toString()}\n                    renderItem={({item}) =\u003e {\n                      return (\n                        \u003cView style={[styles[item.name], styles.type]}\u003e\n                          \u003cText style={styles.typeText}\u003e{item.name}\u003c/Text\u003e\n                        \u003c/View\u003e\n                      )\n                    }}\n                  /\u003e\n    \n                  \u003cView style={styles.description}\u003e\n                    \u003cText\u003e{desc}\u003c/Text\u003e\n                  \u003c/View\u003e\n              \u003c/View\u003e\n            \u003c/TouchableOpacity\u003e\n          }\n        \u003c/AppContext.Consumer\u003e\n      );\n    }\n```\n\nLastly, add the styles and export the component. Most of these are just used to change the background color of the types container based on the Pokemon’s type:\n\n```javascript\n    const styles = {\n      mainDetails: {\n        padding: 30,\n        alignItems: 'center'\n      },\n      image: {\n        width: 100,\n        height: 100\n      },\n      mainText: {\n        fontSize: 25,\n        fontWeight: 'bold',\n        textAlign: 'center'\n      },\n      description: {\n        marginTop: 20\n      },\n      types: {\n        flexDirection: 'row',\n        marginTop: 20\n      },\n      type: {\n        padding: 5,\n        width: 100,\n        alignItems: 'center'\n      },\n      typeText: {\n        color: '#fff',\n      },\n      normal: {\n        backgroundColor: '#8a8a59'\n      },\n      fire: {\n        backgroundColor: '#f08030'\n      },\n      water: {\n        backgroundColor: '#6890f0'\n      },\n      electric: {\n        backgroundColor: '#f8d030'\n      },\n      grass: {\n        backgroundColor: '#78c850'\n      },\n      ice: {\n        backgroundColor: '#98d8d8'\n      },\n      fighting: {\n        backgroundColor: '#c03028'\n      },\n      poison: {\n        backgroundColor: '#a040a0'\n      },\n      ground: {\n        backgroundColor: '#e0c068'\n      },\n      flying: {\n        backgroundColor: '#a890f0'\n      },\n      psychic: {\n        backgroundColor: '#f85888'\n      },\n      bug: {\n        backgroundColor: '#a8b820'\n      },\n      rock: {\n        backgroundColor: '#b8a038'\n      },\n      ghost: {\n        backgroundColor: '#705898'\n      },\n      dragon: {\n        backgroundColor: '#7038f8'\n      },\n      dark: {\n        backgroundColor: '#705848'\n      },\n      steel: {\n        backgroundColor: '#b8b8d0'\n      },\n      fairy: {\n        backgroundColor: '#e898e8'\n      }\n    }\n    \n    export default Pokemon;\n```\n\n## Running the app\n\nAt this point, you can now run the app:\n\n```\n    react-native run-android\n    react-native run-ios\n```\n\n## Conclusion\n\nThat’s it! In this tutorial, you learned the basics of using GraphQL in a React Native app. Specifically, you learned how to set up your own GraphQL server using Apollo, use an existing REST API as its data source, consume the data from a React Native app, and display it to the user.\n\nEven though we’ve implemented the full stack on this tutorial, there’s still a lot more to learn. Be sure to check out the [GraphQL](https://graphql.org/learn/) and [Apollo](https://www.apollographql.com/docs/) docs to learn more.\n\nYou can view the source code of the app on this [GitHub repo](https://github.com/anchetaWern/RNGraphQL).","metaTitle":"Getting started with GraphQL in React Native","metaDescription":"In this tutorial you will learn how to implement a simple GraphQL server and query the data from a React Native app, by creating a simple app which fetches, inserts, updates, and deletes data from a GraphQL server. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kYOojW59OAWwKcKY8owUQ","type":"Entry","createdAt":"2019-02-13T19:23:21.208Z","updatedAt":"2020-06-19T11:14:33.684Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with GraphQL and TypeScript","url":"graphql-typescript","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5K3KWA2xvqw4SW2sYI8eCG","type":"Entry","createdAt":"2018-02-12T15:34:14.169Z","updatedAt":"2018-02-14T10:09:19.038Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Chimezie Enyinnaya","url":"chimezie-enyinnaya","email":"meziemichael@gmail.com","twitter":"https://twitter.com/ammezie","github":"https://github.com/ammezie","guestWriter":true}}],"projectRepo":"https://github.com/ammezie/graphql-typescript","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2019-02-13","description":"This tutorial provides an introduction to using TypeScript with GraphQL. You will build a simple GraphQL server in TypeScript for a task manager application. ","prerequisite":"You will need Node and TypeScript installed on your machine.","content":"TypeScript is a superset of JavaScript, and its adoption has skyrocketed in recent years, as many apps are now being rewritten in it. If you have ever created a GraphQL server with TypeScript, then you would know it’s not as straightforward as in the JavaScript counterpart. So in this tutorial, I'll be showing you how to use TypeScript with GraphQL using TypeGraphQL. For the purpose of demonstration, we'll be rebuilding the GraphQL server that was built in the [Getting up and running with GraphQL](https://blog.pusher.com/getting-up-and-running-with-graphql/) tutorial, which is a simple task manager.\n\n## Prerequisites\n\nThis tutorial assumes the following:\n\n- Node.js and NPM installed on your computer\n- Basic knowledge of GraphQL\n- Basic knowledge of TypeScript\n- TypeScript installed on your computer, which you can get from the [official website](https://www.typescriptlang.org/#download-links)\n\n## What’s TypeGraphQL?\n\nTypeGraphQL is a framework building GraphQL APIs in Node.js. It makes use of TypeScript classes and decorators for defining GraphQL schema and types as well as resolvers. With TypeGraphQL, we don’t need to manually define types in SDL or create interfaces for our GraphQL schema. TypeGraphQL allows us to have only one source of truth, that way reducing field type mismatches, typos etc.\n\nAnother interesting thing about TypeGraphQL is how well it integrates with decorator-based libraries, like [TypeORM](https://github.com/typeorm/typeorm), [sequelize-typescript](https://github.com/RobinBuschmann/sequelize-typescript) or [Typegoose](https://github.com/szokodiakos/typegoose). This allows us to define both the GraphQL type and the entity in a single class, so we don’t need to edit multiple files to add or rename some properties.\n\n## Getting started\n\nTo get started with TypeGraphQL, we need to first install it along with its dependencies. We’ll start by creating a new project:\n\n```\n    $ mkdir graphql-typescript\n    $ cd graphql-typescript\n    $ npm init -y\n```\n\nThen we install TypeGraphQL:\n\n```\n    $ npm install type-graphql\n```\n\nNext, we need to install TypeScript as a dev-dependency as well as types for Node.js:\n\n```\n    $ npm install typescript @types/node --save-dev\n```\n\nTypeGraphQL requires the `reflect-metadata` shim, so we need to install that as well:\n\n```\n    $ npm install reflect-metadata\n```\n\nNext, we need to define some TypeScript configurations for our project. Create a `tsconfig.json` file within the project’s root directory, and paste the snippet below into it:\n\n``` json\n    // tsconfig.json\n    \n    {\n      \"compilerOptions\": {\n        \"target\": \"es2016\",\n        \"module\": \"commonjs\",\n        \"lib\": [\"dom\", \"es2016\", \"esnext.asynciterable\"],\n        \"moduleResolution\": \"node\",\n        \"outDir\": \"./dist\",\n        \"strict\": true,\n        \"strictPropertyInitialization\": false,\n        \"sourceMap\": true,\n        \"emitDecoratorMetadata\": true,\n        \"experimentalDecorators\": true\n      },\n      \"include\": [\"./src/**/*\"]\n    }\n```\n\nIf you have ever worked with TypeScript before (which this tutorial assumes), then you should be familiar with some of the settings above. Since TypeGraphQL makes extensive use of decorators, which are an experimental feature of TypeScript, we need to set both `emitDecoratorMetadata` and `experimentalDecorators` as `true`. Also, we need to add `esnext.asynciterable` to the list of library files, since `graphql-subscription` uses `AsyncIterator`.\n\n## Defining the GraphQL schema\n\nWe can start defining the schema for our GraphQL server. Create a new `src` directory, then within it, create a new `schemas` directory. Inside the `schemas` directory, create a `Project.ts` file and add the following code in it:\n\n``` typescript\n    // src/schemas/Project.ts\n    \n    import { Field, Int, ObjectType } from \"type-graphql\";\n    import Task from \"./Task\";\n    \n    @ObjectType()\n    export default class Project {\n      @Field(type =\u003e Int)\n      id: number;\n      \n      @Field()\n      name: string;\n      \n      @Field(type =\u003e [Task])\n      tasks: Task[];\n    }\n```\n\nWe define a `Project` class and use the `@ObjectType()` decorator to define it as a GraphQL type. The `Project` type has three fields: `id`, `name` and `tasks`. We use the `@Field` decorator to define these fields. The `@Field` decorator can also accept optional arguments. We can pass to it the type the field should be or an object containing other options we want for the field. We explicitly set the type of the `id` field to be `Int` while `tasks` is an array of the type `Task` (which we’ll create shortly).\n\nNext, let’s define the schema for the `Task` type. Inside the `schemas` directory, create a `Task.ts` file and add the following code in it:\n\n``` typescript\n    // src/schemas/Task.ts\n    \n    import { Field, Int, ObjectType } from \"type-graphql\";\n    import Project from \"./Project\";\n    \n    @ObjectType()\n    export default class Task {\n      @Field(type =\u003e Int)\n      id: number;\n    \n      @Field()\n      title: string;\n    \n      @Field(type =\u003e Project)\n      project: Project;\n    \n      @Field()\n      completed: boolean;\n    }\n```\n\nThis is pretty similar to the `Project` schema. With our schema defined, we can move on to creating the resolvers.\n\n## Adding sample data\n\nBefore we get to the resolvers, let’s quickly define some sample data we’ll be using to test out our GraphQL server. Create a  `data.ts` file directly inside the `src` directory, and paste the snippet below into it:\n\n``` typescript\n    // src/data.ts\n    \n    export interface ProjectData {\n      id: number;\n      name: string;\n    }\n    \n    export interface TaskData {\n      id: number;\n      title: string;\n      completed: boolean;\n      project_id: number;\n    }\n    \n    export const projects: ProjectData[] = [\n      { id: 1, name: \"Learn React Native\" },\n      { id: 2, name: \"Workout\" },\n    ];\n    \n    export const tasks: TaskData[] = [\n      { id: 1, title: \"Install Node\", completed: true, project_id: 1 },\n      { id: 2, title: \"Install React Native CLI:\", completed: false, project_id: 1},\n      { id: 3, title: \"Install Xcode\", completed: false, project_id: 1 },\n      { id: 4, title: \"Morning Jog\", completed: true, project_id: 2 },\n      { id: 5, title: \"Visit the gym\", completed: false, project_id: 2 },\n    ];\n```\n\n## Creating the resolvers\n\nCreate a new `resolvers` directory inside the `src` directory. Inside the `resolvers` directory, create a `ProjectResolver.ts` file and paste the code below in it:\n\n``` typescript\n    // src/resolvers/ProjectResolver.ts\n    \n    import { Arg, FieldResolver, Query, Resolver, Root } from \"type-graphql\";\n    import { projects, tasks, ProjectData } from \"../data\";\n    import Project from \"../schemas/Project\";\n    \n    @Resolver(of =\u003e Project)\n    export default class {\n      @Query(returns =\u003e Project, { nullable: true })\n      projectByName(@Arg(\"name\") name: string): ProjectData | undefined {\n        return projects.find(project =\u003e project.name === name);\n      }\n      \n      @FieldResolver()\n      tasks(@Root() projectData: ProjectData) {\n        return tasks.filter(task =\u003e {\n          return task.project_id === projectData.id;\n        });\n      }\n    }\n```\n\nWe use the `@Resolver()` decorator to define the class as a resolver, then pass to the decorator that we want it to be of the `Project` type. Then we create our first query, which is `projectByName`, using the `@Query()` decorator. The `@Query` decorator accepts two arguments: the return type of the query and an object containing other options which we want for the query. In our case, we want the query to return a `Project` and it can return `null` as well. The `projectByName` query accepts a single argument (name of the project), which we can get using the `@Arg` decorator. Then we use `find()` on the projects array to find a project by its name and simply return it.\n\nSince the `Project` type has a `tasks` field, which is a custom field, we need to tell GraphQL how to resolve the field. We can do that using the `@FieldResolver()` decorator. We are getting the object that contains the result returned from the root or parent field (which will be the project in this case) using the `@Root()` decorator.\n\nIn the same vein, let’s create the resolvers for the `Task` type. Inside the `resolvers` directory, create a `TaskResolver.ts` file and paste the code below in it:\n\n``` typescript\n    // src/resolvers/TaskResolver.ts\n    \n    import { Arg, FieldResolver, Mutation, Query, Resolver, Root } from \"type-graphql\";\n    import { projects, tasks, TaskData } from \"../data\";\n    import Task from \"../schemas/Task\";\n    \n    @Resolver(of =\u003e Task)\n    export default class {\n      @Query(returns =\u003e [Task])\n      fetchTasks(): TaskData[] {\n        return tasks;\n      }\n      \n      @Query(returns =\u003e Task, { nullable: true })\n      getTask(@Arg(\"id\") id: number): TaskData | undefined {\n        return tasks.find(task =\u003e task.id === id);\n      }\n      \n      @Mutation(returns =\u003e Task)\n      markAsCompleted(@Arg(\"taskId\") taskId: number): TaskData {\n        const task = tasks.find(task =\u003e {\n          return task.id === taskId;\n        });\n        if (!task) {\n          throw new Error(`Couldn't find the task with id ${taskId}`);\n        }\n        if (task.completed === true) {\n          throw new Error(`Task with id ${taskId} is already completed`);\n        }\n        task.completed = true;\n        return task;\n      }\n      \n      @FieldResolver()\n      project(@Root() taskData: TaskData) {\n        return projects.find(project =\u003e {\n          return project.id === taskData.project_id;\n        });\n      }\n    }\n```\n\nWe define two queries: `fetchTasks` and `getTask`. The `fetchTasks` simply returns an array of all the tasks that have been created. The `getTask` query is pretty similar to the `projectByName` query. Then we define a mutation for marking a task as completed, using the `@Mutation`. This mutation will also return a `Task`. Firstly, we get the task that matches the supplied `taskId`. If we can’t find a match, we simply throw an appropriate error. If the task has already been marked as completed, again, we throw an appropriate error. Otherwise, we set the task `completed` value to `true` and lastly return the task.\n\nJust as we did with the `Project` type, we define how we want to resolve the `project` field. \n\n## Building the GraphQL server\n\nWith everything in place, all that is left now is to tie them together by building a GraphQL server. We will be using [graphql-yoga](https://github.com/prisma/graphql-yoga) for building our GraphQL server. First, let’s install it:\n\n```\n    $ npm install graphql-yoga\n```\n\nWith that installed, create an `index.ts` file directly inside the `src` directory, and paste the code below in it:\n\n``` typescript\n    // src/index.ts\n    \n    import { GraphQLServer } from \"graphql-yoga\";\n    import \"reflect-metadata\";\n    import { buildSchema } from \"type-graphql\";\n    import ProjectResolver from \"./resolvers/ProjectResolver\";\n    import TaskResolver from \"./resolvers/TaskResolver\";\n    \n    async function bootstrap() {\n      const schema = await buildSchema({\n        resolvers: [ProjectResolver, TaskResolver],\n        emitSchemaFile: true,\n      });\n      \n      const server = new GraphQLServer({\n        schema,\n      });\n      \n      server.start(() =\u003e console.log(\"Server is running on http://localhost:4000\"));\n    }\n    \n    bootstrap();\n```\n\nSince we need to build our schema first before making use of it in our GraphQL server, we create an `async` function, which we call `bootstrap()` (you can name it however you like). Using the `buildSchema()` from `type-graphql`, we pass to it our resolvers and we set `emitSchemaFile` to `true` (more on this shortly). Once the schema has been built, we instantiate a new GraphQL server and pass to it the schema. Then we start the server. Lastly, we call `bootstrap()`.\n\nSometimes, we might need to see or inspect the schema in SDL (Schema Definition Language) that TypeGraphQL will generate for us. One way we can achieve that is setting `emitSchemaFile` to `true` at the point of building the schema. This will generate a `schema.gql` file directly in project’s root directory. Of course, we can customize the path however we want.\n\n\n\u003e **Note:** make sure to import `reflect-metadata` on top of your entry file (before you use/import `type-graphql` or your resolvers)\n## Testing it out\n\nBefore we start testing our GraphQL, we need to first compile our TypeScript files to JavaScript. For that, we’ll be using the TypeScript compiler. Running the command below directly from the project’s root directory:\n\n```\n    $ tsc\n```\n\nThe compiled JavaScript files will be inside the `dist` directory, as specified in `tsconfig.json`. Now we can start the GraphQL server:\n\n```\n    $ node ./dist/index.js\n```\n\nThe server should be running on `http://localhost:4000`, and we can test it out with the following query:\n\n```\n    # fetch all tasks\n    \n    {\n      fetchTasks {\n        title\n        project {\n          name\n        }\n      }\n    }\n```\n\n![graphql-typescript-demo](//images.ctfassets.net/1es3ne0caaid/44HuoSucfmQcGiK0Q8IYIi/3476565f31cacfc9e8e46090ea5710d4/graphql-typescript-demo.png)\n\n## Conclusion\n\nIn this tutorial, we looked at what is TypeGraphQL and it makes it easy to work with GraphQL and TypeScript. To learn more about TypeGraphQL and other advanced features it provides, as well as the [GitHub repo](https://github.com/19majkel94/type-graphql).\n\nThe complete code for this tutorial is available on [GitHub](https://github.com/ammezie/graphql-typescript).","metaTitle":"Getting started with GraphQL and TypeScript","metaDescription":"This tutorial provides an introduction to using TypeScript with GraphQL. You will build a simple GraphQL server in TypeScript for a task manager application. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2wIuIeFmtigsqWIcKaAgyu","type":"Entry","createdAt":"2018-11-06T11:46:07.300Z","updatedAt":"2018-11-06T11:46:07.300Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Handling authorization in GraphQL","url":"authorization-graphql","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5K3KWA2xvqw4SW2sYI8eCG","type":"Entry","createdAt":"2018-02-12T15:34:14.169Z","updatedAt":"2018-02-14T10:09:19.038Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Chimezie Enyinnaya","url":"chimezie-enyinnaya","email":"meziemichael@gmail.com","twitter":"https://twitter.com/ammezie","github":"https://github.com/ammezie","guestWriter":true}}],"projectRepo":"https://github.com/ammezie/graphql-authorization","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}}],"reviewDate":"2018-11-06","description":"This tutorial shows how to use GraphQL to manage authorization and user roles. You will build on a previous app to create an admin and a general user, and implement different permissions based on user role.","prerequisite":"You will need Node installed on your machine. Basic knowledge of JavaScript and GraphQL will be helpful.","content":"Authorization occurs after a successful authentication, it checks the access levels or privileges of the user, which will determine what the user can see or do with the application. Some time ago, I did a tutorial series on [handling authentication in GraphQL](https://blog.pusher.com/handling-authentication-in-graphql). So in this tutorial, I will be covering authorization.\n\n## Prerequisites\n\nThis tutorial assumes the following:\n\n- Node.js and NPM installed on your computer\n- Basic knowledge of JavaScript and Node.js\n- Basic knowledge of GraphQL\n- Understanding of handling authentication in GraphQL with JWT. You can check out this [tutorial](https://blog.pusher.com/handling-authentication-in-graphql-jwt/).\n\n## What we'll be building\n\nWe will be building on where we left off from [handling authentication in GraphQL – Part 2: JWT](https://blog.pusher.com/handling-authentication-in-graphql-jwt/). To demonstrate authorization, we will add two new features: fetching a list of all users and allowing users to edit their post. Only an admin user will be able to fetch a list of all users. Also, we will make it so users can only edit their own posts.\n\n## Getting started\n\nTo speed things up, we will start by cloning a boilerplate, which I have created for this tutorial:\n\n```\n    $ git clone --branch starter https://github.com/ammezie/graphql-authorization.git\n```\n\nNext, let’s install the project dependencies: \n\n```\n    $ cd graphql-authorization\n    $ npm install\n```\n\nNext, rename `.env.example` to `.env` then enter your JWT secret:\n\n```\n    // .env\n    \n    JWT_SECRET=somereallylongsecretkey\n```\n\nWe will be using SQLite, so create a new `database.sqlite3`  file in the project’s root directory.\n\n```\n    $ touch database.sqlite3\n```\n\nLastly, run the migration:\n\n```\n    $ node_modules/.bin/sequelize db:migrate\n```\n\nIf you followed from the handling authentication in GraphQL series, you will already be familiar with the project. I made some few changes though. The project has been migrated to [Apollo Server 2](https://www.apollographql.com/docs/apollo-server/v2) and the `User` model now has an `is_admin` column as well as a corresponding `isAdmin` field on the `User` type schema definition. Also, a new `Post` model and `Post` type have been added, as well a query to fetch a single post and mutation for creating a new post.\n\n## Creating dump data\n\nTo test out what we will be building, we need to have some data to play with. So let’s create some. First, let’s start the server:\n\n```\n    $ npm run dev\n```\n\nThe project has nodemon as a dev dependency, which will watch our files for changes and restarts the server. So we will leave this running for the rest of the tutorial.\n\nThe server should be running on http://localhost:4000/api. Apollo Server 2 now comes with Playground. Visiting the URL should load it up as seen in the image below:\n\n![graphql-auth-demo-1](//images.ctfassets.net/1es3ne0caaid/6oETHrz2H6CCksCCkAA8em/62aafd2bf961502e1255d3202c37414f/graphql-auth-demo-1.png)\n\nLet’s create two users and a new post created by one of the users. In Playground enter the mutations below one after the other.\n\n``` json\n    // Create first user\n    mutation {\n      signup (username: \"mezie\", email: \"chimezie@tutstack.io\", password: \"password\")\n    }\n    \n    // Create second user\n    mutation {\n      signup (username: \"johndoe\", email: \"johndoe@example.com\", password: \"password\")\n    }\n```\n\nNext, log in as one of the user:\n\n``` json\n    // Log in as the first user\n    mutation {\n      login (email: \"chimezie@tutstack.io\", password: \"password\")\n    }\n```\n\nThe mutation above will return a JWT, which we will attach as an `Authorization` header in our subsequent requests.\n\nClick on **HTTP HEADERS** at the bottom of Playground, then enter the JWT copied from above:\n\n``` json\n    {\n      \"Authorization\": \"Bearer ENTER JWT HERE\"\n    }\n```\n\n![graphql-auth-http-headers](//images.ctfassets.net/1es3ne0caaid/2Uih36qMXSqYak8eUQeS4w/fe209ce026c520ec4e0e6475a83709eb/graphql-auth-http-headers.png)\n\nNow, we can create a new post as the logged in user:\n\n``` json\n    // Create a new post\n    mutation {\n      createPost (title: \"Intro to GraphQL\", content: \"This is an intro to GraphQL.\"){\n        title\n        content\n      }\n    }\n```\n\nThe rest of this tutorial assumes you have at least two users and a post created by one of the users.\n\n## Using a resolver function\n\nWe will be looking at two different methods with which we can handle authorization in GraphQL. This first method is to add the authorization logic directly inside the resolver function, which is pretty straightforward. We will be using this method to implement editing a post.\n\nFirst, let’s define the mutation for editing a post. Open `schemas/index.js` and add the code below inside the `Mutation` object:\n\n``` javascript\n    // schemas/index.js\n    \n    type Mutation {\n      ...\n      editPost(id: Int!, title: String, content: String): Post\n    }\n```\n\nThis mutation accepts three arguments: the ID of the post, the title of the post and the content of the post. Only the `id` argument is required. \n\nNext, let’s write the resolver function for this mutation. Inside `resolvers/index.js`, add the code below immediately after the `createPost` resolver function in the `Mutation` object:\n\n``` javascript\n    // resolvers/index.js\n    \n    async editPost (root, { id, title, content }, { user }) {\n      if (!user) {\n        throw new Error('You are not authenticated!')\n      }\n      \n      const post = await Post.findById(id)\n        \n      if (!post) {\n        throw new Error('No post found')\n      }\n      \n      if (user.id !== post.user_id) {\n        throw new Error('You can only edit the posts you created!')\n      }\n      \n      await post.update({ title, content })\n      \n      return post\n    }\n```\n\nHere, we first check to make sure the user is authenticated. Then we get the post matching the supplied ID. If no match was found, we throw an appropriate error. Then we check to make sure the authenticated user trying to edit the post is the author of the post by checking the user ID against the `user_id` on the `post` object. If the authenticated user is not the author of the post, we throw an appropriate error. Otherwise, we update the post with the supplied details and return the newly updated post.\n\nLet’s test this out. First, let’s trying editing a post we didn’t create. We should get an error as in the image below:\n\n``` json\n    // Editing a post user didn’t create\n    mutation {\n      editPost (id:1, title: \"GraphQL 101\", content: \"This is an intro to GraphQL.\") {\n        title\n        content\n        author {\n          username\n        }\n      }\n    }\n```\n\nWe should get an error like below:\n\n``` json\n    {\n      ...\n      \"errors\": [\n        {\n          \"message\": \"You can only edit the posts you created!\",\n          ...\n        }\n      ]\n    }\n```\n\nBut if we trying to edit our own post, then we should see the updated post:\n\n``` json\n    {\n      \"data\": {\n        \"editPost\": {\n          \"title\": \"GraphQL 101\",\n          \"content\": \"This is an intro to GraphQL.\",\n          \"author\": {\n            \"username\": \"mezie\"\n          }\n        }\n      }\n    }\n```\n\n## Using custom directives\n\nNow, let’s allow an admin to fetch a list of users that have signed up. For this, we will be using the second method, which is using custom directives. A GraphQL directive starts with the `@` symbol. The core GraphQL specification includes two directives: `@include()` and `@skip()`. Visit the [GraphQL directives](https://graphql.org/learn/queries/#directives) page to learn more about directives.\n\nLet’s create the schema for fetching all users. Add the code below inside `schemas/index.js`:\n\n``` javascript\n    // schemas/index.js\n    \n    const typeDefs = gql`\n      directive @isAdmin on FIELD_DEFINITION\n      \n      ...\n      type Query {\n        allUsers: [User]! @isAdmin\n        ...\n      }\n      ...\n    `\n```\n\nFirst, we define a new directive called `@isAdmin`, which will be added to a field (hence, `FIELD_DEFINITION`). Then we define the query for fetching all users and use the `@isAdmin` directive on it. This means only admin users will be able to perform this query.\n\nNow, let’s create the `@isAdmin` implementation. Create a new `directives` directory in the project’s root. Then inside the `directives` directory, create a new `isAdmin.js` file and paste the code below in it:\n\n``` javascript\n    // directives/isAdmin.js\n    \n    const { SchemaDirectiveVisitor } = require('apollo-server-express')\n    const { defaultFieldResolver } = require('graphql')\n    \n    class IsAdminDirective extends SchemaDirectiveVisitor {\n      visitFieldDefinition (field) {\n        const { resolve = defaultFieldResolver } = field\n        \n        field.resolve = async function (...args) {\n          // extract user from context\n          const { user } = args[2]\n          \n          if (!user) {\n            throw new Error('You are not authenticated!')\n          }\n          \n          if (!user.is_admin) {\n            throw new Error('This is above your pay grade!')\n          }\n          \n          return resolve.apply(this, args)\n        }\n      }\n    }\n    \n    module.exports = IsAdminDirective\n```\n\nApollo Server 2 makes it easy to create custom directives by using `SchemaDirectiveVisitor`. We create a new `IsAdminDirective` class which extends `SchemaDirectiveVisitor`. Since we want the directive to be added to a field, we override the `visitFieldDefinition()`, which accepts the field the directive was added to. Inside the resolve function of the field, we get the authenticated user from the context. Then we perform the authentication and authorization checks and throw any appropriate errors.\n\nNext, let’s write the resolver function for the query. Inside `resolvers/index.js`, add the code below immediately after the `post` resolver function in the `Query` object:\n\n``` javascript\n    // resolvers/index.js\n    \n    async allUsers (root, args, { user }) {\n      return User.all()\n    }\n```\n\nBefore we test this out, let’s make our server be aware of the custom directive. Update `server.js` to reflect the changes below:\n\n``` javascript\n    // server.js\n    \n    ...\n    const IsAdminDirective = require('./directives/isAdmin')\n    ...\n    \n    const server = new ApolloServer({\n      typeDefs,\n      resolvers,\n      schemaDirectives: {\n        isAdmin: IsAdminDirective\n      },\n      context: ({ req }) =\u003e ({\n        user: req.user\n      })\n    })\n    ...\n```\n\nWe import the custom directive, then we add a new `schemaDirectives` object (which contains our custom directive) to the object passed to `ApolloServer`.\n\nTo test this out, let’s set one of the users we created earlier as an admin. To keep things simple, we will do this manually directly in the database. Just change the `is_admin` value of the user from `0` to `1`.\n\nIf we try to perform the fetch all users query as a non-admin user:\n\n``` json\n    // fetching all users as a non-admin user\n    \n    {\n      allUsers {\n        username\n        email\n      }\n    }\n```\n\nWe will get an error as below:\n\n``` json\n    {\n      ...\n      \"errors\": [\n        {\n          \"message\": \"This is above your pay grade!\",\n          ...\n        }\n      ]\n    }\n```\n\nOtherwise, we should get an array of all users:\n\n``` json\n    {\n      \"data\": {\n        \"allUsers\": [\n          {\n            \"username\": \"mezie\",\n            \"email\": \"chimezie@tutstack.io\"\n          },\n          {\n            \"username\": \"johndoe\",\n            \"email\": \"johndoe@example.com\"\n          }\n        ]\n      }\n    }\n```\n\n## Conclusion\n\nIn this tutorial, we saw how to handle authorization in GraphQL. We looked at two different methods of achieving it. Using custom directives has some advantages over using resolver function, which include reducing repetition in your resolver function, which in turn keeps your them lean. Another advantage is that it promotes reusability and it’s easier to maintain.\n\nThe complete code is available on [GitHub](https://github.com/ammezie/graphql-authorization).","metaTitle":"Handling authorization in GraphQL","metaDescription":"This tutorial shows how to use GraphQL to manage authorization and user roles. You will build on a previous app to create an admin and a general user, and implement different permissions based on user role."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4cFHa1iHtYyG2oUgkS6U4q","type":"Entry","createdAt":"2018-10-30T15:29:10.088Z","updatedAt":"2019-01-02T15:45:26.747Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building live chat app with GraphQL subscriptions","url":"chat-graphql-subscriptions","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5K3KWA2xvqw4SW2sYI8eCG","type":"Entry","createdAt":"2018-02-12T15:34:14.169Z","updatedAt":"2018-02-14T10:09:19.038Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Chimezie Enyinnaya","url":"chimezie-enyinnaya","email":"meziemichael@gmail.com","twitter":"https://twitter.com/ammezie","github":"https://github.com/ammezie","guestWriter":true}}],"projectRepo":"https://github.com/ammezie/graphql-chat-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}}],"reviewDate":"2018-09-02","description":"This brief tutorial takes you through building a simple chat app using GraphQL and Vue.js. Users will be able to talk one-to-one in realtime, using GraphQL's subscriptions feature.","prerequisite":"You will need Node and the Vue CLI installed on your machine.","content":"One of the exciting things about GraphQL is the ability to build realtime applications with it, through the use of GraphQL subscriptions. In this tutorial, I’ll be showing you how to build a realtime app with GraphQL subscriptions.\n\n## Prerequisites\n\nThis tutorial assumes the following:\n\n- Node.js and NPM installed on your computer\n- Vue CLI 3 installed on your computer\n- Basic knowledge of GraphQL\n- Basic knowledge of JavaScript and Vue.js\n\n## What we'll be building\n\nWe’ll be building a simple chat app. We’ll start by building the GraphQL server, then we’ll build a Vue.js app that will consume the GraphQL server. To keep this tutorial focused, we won’t be working with a database. Instead, we’ll save the chats in an in-memory array.\n\nBelow is a quick demo of the final app:\n\n![graphql-realtime-chat-demo](//images.ctfassets.net/1es3ne0caaid/2O9KqUyxCwgQO0QOAqy0cM/469d8a6e331f641e0e2f1572ae33c366/graphql-realtime-chat-demo.gif)\n\n## What are GraphQL subscriptions?\n\nBefore we dive into code, let’s take a quick look at what is GraphQL subscriptions. GraphQL subscriptions add realtime functionality to GraphQL. They allow a server to send data to clients when a specific event occurs. Just as queries, subscriptions can also have a set of fields, which will be returned to the client. Unlike queries, subscriptions doesn’t immediately return a response, but instead, a response is returned every time a specific event occurs and the subscribed clients will be notified accordingly.\n\nUsually, subscriptions are implemented with WebSockets. You can check out the [Apollo GraphQL subscriptions docs](https://www.apollographql.com/docs/graphql-subscriptions) to learn more.\n\n## Building the GraphQL server\n\nTo speed the development process of our GraphQL server, we’ll be using [graphql-yoga](https://github.com/prisma/graphql-yoga). Under the hood, graphql-yoga makes use of Express and  Apollo Server. Also, it comes bundled with all the things we’ll be needing in this tutorial, such as [graphql-subscriptions](https://github.com/apollographql/graphql-subscriptions). So let’s get started.\n\nWe’ll start by creating a new project directory, which we’ll call `graphql-chat-app`:\n\n```\n    $ mkdir graphql-chat-app\n```\n\nNext, let’s `cd` into the new project directory and create a `server` directory:\n\n```\n    $ cd graphql-chat-app\n    $ mkdir server\n```\n\nNext, `cd` into `server` and run the command below:\n\n```\n    $ cd server\n    $ npm init -y\n```\n\nNow, let’s install `graphql-yoga`:\n\n```\n    $ npm install graphql-yoga\n```\n\nOnce that’s done installing, we’ll create a `src` directory inside the `server` directory:\n\n```\n    $ mkdir src\n```\n\nThe `src` directory is where our GraphQL server code will reside. So let’s create an `index.js` file inside the `src` directory and paste the code below in it:\n\n``` javascript\n    // server/src/index.js\n    \n    const { GraphQLServer, PubSub } = require('graphql-yoga')\n    const typeDefs = require('./schema')\n    const resolvers = require('./resolver')\n    \n    const pubsub = new PubSub()\n    const server = new GraphQLServer({ typeDefs, resolvers, context: { pubsub } })\n    \n    server.start(() =\u003e console.log('Server is running on localhost:4000'))\n```\n\nHere, we import `GraphQLServer` and `PubSub` (which will be used to publish/subscribe to channels) from `graphql-yoga`. Also, we import our schemas and resolvers (which we’ll create shortly). Then we create an instance of `PubSub`. Using `GraphQLServer`, we create our GraphQL server passing to it the schemas, resolvers and a context. Noticed we pass `pubsub` as a context to our GraphQL server. That way, we’ll be able to access it in our resolvers. Finally, we start the server.\n\n### Defining the schemas\nInside the `src` directory, create a `schema.js` file and paste the code below in it:\n\n``` javascript\n    // server/src/schema.js\n    \n    const typeDefs = `\n      type Chat {\n        id: Int!\n        from: String!\n        message: String!\n      }\n      \n      type Query {\n        chats: [Chat]\n      }\n      \n      type Mutation {\n        sendMessage(from: String!, message: String!): Chat\n      }\n      \n      type Subscription {\n        messageSent: Chat\n      }\n    `\n    module.exports = typeDefs\n```\n\nWe start by defining a simple `Chat` type, which has three fields: the chat ID, the username of the user sending the message and the message itself. Then we define a query to fetch all messages and a mutation for sending a new message, which accepts the username and the message. Lastly, we define a subscription, which we are calling `messageSent` and it will return a message.\n\n### Writing the resolver functions\n\nWith the schemas defined, let’s move on to defining the resolver functions. Inside the `src` directory, create a `resolver.js` file and paste the code below in it:\n\n``` javascript\n    // server/src/resolver.js\n    \n    const chats = []\n    const CHAT_CHANNEL = 'CHAT_CHANNEL'\n    \n    const resolvers = {\n      Query: {\n        chats (root, args, context) {\n          return chats\n        }\n      },\n      \n      Mutation: {\n        sendMessage (root, { from, message }, { pubsub }) {\n          const chat = { id: chats.length + 1, from, message }\n          \n          chats.push(chat)\n          pubsub.publish('CHAT_CHANNEL', { messageSent: chat })\n          \n          return chat\n        }\n      },\n      \n      Subscription: {\n        messageSent: {\n          subscribe: (root, args, { pubsub }) =\u003e {\n            return pubsub.asyncIterator(CHAT_CHANNEL)\n          }\n        }\n      }\n    }\n    \n    module.exports = resolvers\n```\n\nWe create an empty chats array, then we define our channel name, which we call `CHAT_CHANNEL`. Next, we begin writing the resolver functions. First, we define the function to fetch all the messages, which simply returns the chats array. Then we define the `sendMessage` mutation. In the `sendMessage()`, we create a chat object from the supplied arguments and add the new message to the chats array. Next, we make use of the `publish()` from the `pubsub` object, which accepts two arguments: the channel (`CHAT_CHANNEL`) to publish to and an object containing the event (`messageSent`, which must match the name of our subscription) to be fired and the data (in this case the new message) to pass along with it. Finally, we return the new chat.\n\nLastly, we define the subscription resolver function. Inside the `messageSent` object, we define a `subscribe` function, which subscribes to the `CHAT_CHANNEL` channel, listens for when the `messageSent` event is fired and returns the data that was passed along with the event, all using the `asyncIterator()` from the `pubsub` object.\n\nLet’s start the server since we’ll be using it in the subsequent sections:\n\n```\n    $ node src/index.js\n```\n\nThe server should be running at `http://localhost:4000`.\n\n## Building the frontend app\n\nWith the GraphQL server ready, let’s start building the frontend app. Using the Vue CLI, create a new Vue.js app directly inside the project’s root directory:\n\n```\n    $ vue create frontend\n```\n\nAt the prompt, we’ll choose the `default (babel, eslint)` preset. \n\nOnce that’s done, let’s install the necessary dependencies for our app:\n\n```\n    $ cd frontend\n    $ npm install vue-apollo graphql apollo-client apollo-link apollo-link-http apollo-cache-inmemory graphql-tag apollo-link-ws apollo-utilities subscriptions-transport-ws\n```\n\nThat’s a lot of dependencies, so let’s go over each of them:\n\n\n- **vue-apollo:** an Apollo/GraphQL integration for Vue.js.\n- **graphql:** a reference implementation of GraphQL for JavaScript.\n- **apollo-client:** a fully-featured, production-ready caching GraphQL client for every server or UI framework.\n- **apollo-link:** a standard interface for modifying control flow of GraphQL requests and fetching GraphQL results.\n- **apollo-link-http:** used to get GraphQL results over a network using HTTP fetch.\n- **apollo-cache-inmemory:** cache implementation for Apollo Client 2.0.\n- **graphql-tag:** a JavaScript template literal tag that parses GraphQL queries.\n- **apollo-link-ws:** allows sending of GraphQL operations over a WebSocket.\n- **apollo-utilities: u**tilities for working with GraphQL ASTs.\n- **subscriptions-transport-ws:** a WebSocket client + server for GraphQL subscriptions.\n\nNext, let’s set up the Vue Apollo plugin. Open `frontend/src/main.js` and update it as below:\n\n``` javascript\n    // frontend/src/main.js\n    \n    import { InMemoryCache } from 'apollo-cache-inmemory'\n    import { ApolloClient } from 'apollo-client'\n    import { split } from 'apollo-link'\n    import { HttpLink } from 'apollo-link-http'\n    import { WebSocketLink } from 'apollo-link-ws'\n    import { getMainDefinition } from 'apollo-utilities'\n    import Vue from 'vue'\n    import VueApollo from 'vue-apollo'\n    import App from './App.vue'\n    \n    Vue.config.productionTip = false\n    \n    const httpLink = new HttpLink({\n      uri: 'http://localhost:4000'\n    })\n    \n    const wsLink = new WebSocketLink({\n      uri: 'ws://localhost:4000',\n      options: {\n        reconnect: true\n      }\n    })\n    \n    const link = split(\n      ({ query }) =\u003e {\n        const { kind, operation } = getMainDefinition(query)\n        return kind === 'OperationDefinition' \u0026\u0026 operation === 'subscription'\n      },\n      wsLink,\n      httpLink\n    )\n    \n    const apolloClient = new ApolloClient({\n      link,\n      cache: new InMemoryCache(),\n      connectToDevTools: true\n    })\n    \n    const apolloProvider = new VueApollo({\n      defaultClient: apolloClient\n    })\n    \n    Vue.use(VueApollo)\n    \n    new Vue({\n      apolloProvider,\n      render: h =\u003e h(App)\n    }).$mount('#app')\n```\n\nHere, we create new instances of both `httpLink` and `WebSocketLink` with the URLs (`http://localhost:4000` and  `ws://localhost:4000`) of our GraphQL server respectively. Since we can have two different types of operations (query/mutation and subscription), we need to configure Vue Apollo to handle both of them. We can easily do that using the `split()`. Next, we create an Apollo client using the `link` created above and specify we want an in-memory cache. Then we install the Vue Apollo plugin, and we create a new instance of the Vue Apollo plugin using the `apolloClient` created as our default client. Lastly, we make use of the `apolloProvider` object by adding it to our Vue instance.\n\n### Adding Bootstrap\nFor quick prototyping of our app, we’ll be using Bootstrap. So add the line below to the `head` section of `public/index.html`:\n\n``` html\n    // frontend/public/index.html\n    \n    \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n```\n\nFor the purpose of this tutorial, we’ll be making use of just one component for everything, that is, the `App` component.\n\n### Joining chat\nSince we won’t be covering user authentication in this tutorial, we need a way to get the users in the chat. For that, we’ll ask the user to enter a username before joining the chat. Update `frontend/src/App.vue` as below:\n\n``` html\n    // frontend/src/App.vue\n    \n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\" class=\"container\" style=\"padding-top: 100px\"\u003e\n        \u003cdiv class=\"row justify-content-center\"\u003e\n          \u003cdiv class=\"col-md-8\"\u003e\n            \u003cdiv class=\"card\"\u003e\n              \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv class=\"row\" v-if=\"entered\"\u003e\n                  \u003cdiv class=\"col-md-12\"\u003e\n                    \u003cdiv class=\"card\"\u003e\n                      \u003cdiv class=\"card-header\"\u003eChatbox\u003c/div\u003e\n                      \u003cdiv class=\"card-body\"\u003e\n                        \u003c!-- messages will be here --\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"row\" v-else\u003e\n                  \u003cdiv class=\"col-md-12\"\u003e\n                    \u003cform method=\"post\" @submit.prevent=\"enterChat\"\u003e\n                      \u003cdiv class=\"form-group\"\u003e\n                        \u003cdiv class='input-group'\u003e\n                          \u003cinput\n                            type='text'\n                            class=\"form-control\"\n                            placeholder=\"Enter your username\"\n                            v-model=\"username\"\n                          \u003e\n                          \u003cdiv class='input-group-append'\u003e\n                            \u003cbutton class='btn btn-primary' @click=\"enterChat\"\u003eEnter\u003c/button\u003e\n                          \u003c/div\u003e\n                        \u003c/div\u003e\n                      \u003c/div\u003e\n                    \u003c/form\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n      name: 'app',\n      data() {\n        return {\n          username: '',\n          message: '',\n          entered: false,\n        };\n      },\n      methods: {\n        enterChat() {\n          this.entered = !!this.username != '';\n        },\n      },\n    };\n    \u003c/script\u003e\n```\n\nWe display a form for entering a username. Once the form is submitted, we call `enterChat()`, which simply updates the `entered` data depending on whether the user entered a username or not. Notice we have conditional rendering in the `template` section. The chat interface will only be rendered when a user has supplied a username. Otherwise, the join chat form will be rendered.\n\nLet’s start the app to see our progress thus far:\n\n```\n    $ npm run serve\n```\n\nThe app should be running at `http://localhost:8080`.\n\n![graphql-realtime-chat-1](//images.ctfassets.net/1es3ne0caaid/4lE40zOhlC2C4C0kOIaQqE/8ad366fd06fa6ddd437c11e60033e640/graphql-realtime-chat-1.png)\n\n### Displaying all chats\n\nNow, let’s display all messages. First, let’s update the template. Replace the `messages will be here` ****comment with the following:\n\n``` html\n    // frontend/src/App.vue\n    \n    \u003cdl\n      v-for=\"(chat, id) in chats\"\n      :key=\"id\"\n    \u003e\n      \u003cdt\u003e{{ chat.from }}\u003c/dt\u003e\n      \u003cdd\u003e{{ chat.message }}\u003c/dd\u003e\n    \u003c/dl\u003e\n    \n    \u003chr\u003e\n```\n\nHere, we are looping through all the messages (which will be populated from our GraphQL server) and displaying each of them.\n\nNext, add the following to the `script` section:\n\n``` javascript\n    // frontend/src/App.vue\n    \n    import { CHATS_QUERY } from '@/graphql';\n    \n    // add this after data declaration\n    apollo: {\n      chats: {\n        query: CHATS_QUERY,\n      },\n    },\n```\n\nWe add a new `apollo` object, then within the `apollo` object, we define the GraphQL query to fetch all messages. This makes use of the `CHATS_QUERY` query (which we’ll create shortly).\n\nNext, let’s create the `CHATS_QUERY` query. Create a new `graphql.js` file inside `frontend/src` and paste the following content in it:\n\n``` javascript\n    // frontend/src/graphql.js\n    \n    import gql from 'graphql-tag'\n    \n    export const CHATS_QUERY = gql`\n      query ChatsQuery {\n        chats {\n          id\n          from\n          message\n        }\n      }\n    `\n```\n\nFirst, we import `graphql-tag`. Then we define the query for fetching all chats from our GraphQL server.\n\nLet’s test this. Enter a username to join the chat. For now, the chatbox is empty obviously because we haven’t sent any messages yet.\n\n![graphql-realtime-chat-2](//images.ctfassets.net/1es3ne0caaid/6lNyKaRF0QgKIQgs8mgkWM/d7727dbbcb290206473be6a1c7f47bae/graphql-realtime-chat-2.png)\n\n### Send a new message\n\nLet’s start sending messages. Add the code below immediately after the `hr` tag in the template:\n\n``` html\n    // frontend/src/App.vue\n    \n    \u003cinput\n      type='text'\n      class=\"form-control\"\n      placeholder=\"Type your message...\"\n      v-model=\"message\"\n      @keyup.enter=\"sendMessage\"\n    \u003e\n```\n\nWe have an input field for entering a new message, which is bound to the `message` data. The new message will be submitted once we press enter key, which will call a `sendMessage()`.\n\nNext, add the following to the `script` section:\n\n``` javascript\n    // frontend/src/App.vue\n    \n    import { CHATS_QUERY, SEND_MESSAGE_MUTATION } from '@/graphql';\n    \n    // add these inside methods\n    async sendMessage() {\n      const message = this.message;\n      this.message = '';\n      \n      await this.$apollo.mutate({\n        mutation: SEND_MESSAGE_MUTATION,\n        variables: {\n          from: this.username,\n          message,\n        },\n      });\n    },\n```\n\nWe define the `sendMessage()`, which makes use of the `mutate()` available on `this.$apollo` (from the Vue Apollo plugin). We use the `SEND_MESSAGE_MUTATION` mutation (which we’ll create shortly) and pass along the necessary arguments (username and message).\n\nNext, let’s create the `SEND_MESSAGE_MUTATION` mutation. Add the code below inside `frontend/src/graphql.js`:\n\n``` javascript\n    // frontend/src/graphql.js\n    \n    export const SEND_MESSAGE_MUTATION = gql`\n      mutation SendMessageMutation($from: String!, $message: String!) {\n        sendMessage(\n          from: $from,\n          message: $message\n        ) {\n          id\n          from\n          message\n        }\n      }\n    `\n```\n\nNow, if we try sending a message, we and the user we are chatting with won’t see the message until the page is refreshed.\n\n![graphql-realtime-chat-3](//images.ctfassets.net/1es3ne0caaid/2hnlVnUqVmUWUAKeAiqYsq/8423738b062d4f8e453af74caca2bade/graphql-realtime-chat-3.png)\n\n### Displaying new messages in realtime\n\nTo resolve the issue above, we’ll add realtime functionality to our app. Let’s start by defining the subscription. Add the code below inside `frontend/src/graphql.js`:\n\n``` javascript\n    // frontend/src/graphql.js\n    \n    export const MESSAGE_SENT_SUBSCRIPTION = gql`\n      subscription MessageSentSubscription {\n        messageSent {\n          id\n          from\n          message\n        }\n      }\n    `\n```\n\nNext, in the `App` component, we also import the `MESSAGE_SENT_SUBSCRIPTION` subscription we just created.\n\n``` javascript\n    // frontend/src/App.vue\n    \n    import {\n      CHATS_QUERY,\n      SEND_MESSAGE_MUTATION,\n      MESSAGE_SENT_SUBSCRIPTION,\n    } from '@/graphql';\n```\n\nNext, we’ll update the query for fetching all messages as below:\n\n``` javascript\n    // frontend/src/App.vue\n    \n    apollo: {\n      chats: {\n        query: CHATS_QUERY,\n        subscribeToMore: {\n          document: MESSAGE_SENT_SUBSCRIPTION,\n          updateQuery: (previousData, { subscriptionData }) =\u003e {\n            return {\n              chats: [...previousData.chats, subscriptionData.data.messageSent],\n            };\n          },\n        },\n      },\n    },\n```\n\nIn addition to just fetching the messages, we now define a `subscribeToMore` object, which contains our subscription. To update the messages in realtime, we define a `updateQuery`, which accepts the previous chats data and the data that was passed along with the subscription. So all we have to do is merge the new data to the existing one and return them as the updated messages.\n\nNow, if we test it out, we should see our messages in realtime.\n\n![graphql-realtime-chat-demo](//images.ctfassets.net/1es3ne0caaid/2O9KqUyxCwgQO0QOAqy0cM/469d8a6e331f641e0e2f1572ae33c366/graphql-realtime-chat-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have seen how to build realtime apps with GraphQL subscriptions. We started by first building a GraphQL server, then a Vue.js app that consumes the GraphQL server.\n\nThe complete code for this tutorial is available on [GitHub](https://github.com/ammezie/graphql-chat-app).","metaTitle":"Building live chat app with GraphQL subscriptions","metaDescription":"This brief tutorial takes you through building a simple chat app using GraphQL and Vue.js. Users will be able to talk one-to-one in realtime, using GraphQL's subscriptions feature."}}],"defaultValue":"GraphQL","queryType":"tag","pages":1,"route":"/tutorials","query":{"tag":"GraphQL","page":"1"}}},"page":"/tutorials","query":{"tag":"GraphQL","page":"1"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=GraphQL&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:39:57 GMT -->
</html>