<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=React%20Native&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:38:08 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">33</span> tutorials for “<span class="css-npldjc ehwuahf2">React Native</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials8811.html?product=Channels&amp;tag=React%20Native" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials7ab3.html?product=Beams&amp;tag=React%20Native" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="React Native"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/pokemon-react-native-part-1.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a Pokemon battle game with React Native - Part 1: Practice mode</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">In this three part series, use React Native and Node.js to create a two-player Pokemon-like game. In part one, implement...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-sharing-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a photo sharing app with React Native</h3><p class="css-k12xad e5jrto45">Use React Native, Node.js and Imgur to create a photo sharing app. Users will be able to follow their friends and share ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/react-native-development-tools-part-2-debugging-tools.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React Native</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">React Native development tools - Part 2: Debugging tools</h3><p class="css-k12xad e5jrto45">This is part two of a three part tutorial series examining development tools for React Native. In this part, learn to de...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/react-native-development-tools-part-1-linting.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React Native</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">React Native development tools - Part 1: Linting tools</h3><p class="css-k12xad e5jrto45">This is part one of a three part tutorial series examining development tools for React Native. In this part, learn how t...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/memory-game-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a two-player memory game with React Native</h3><p class="css-k12xad e5jrto45">This tutorial will show you how to build a two-player memory game using React Native. Players sign in and are randomly a...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/workout-tracker-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1"> Create a live workout tracking app with React Native</h3><p class="css-k12xad e5jrto45">This tutorial takes you through building a workout tracking app in React Native, with a Node backend. Users will be able...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/build-to-do-app-react-native-expo.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React Native<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Expo</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a To Do app with React Native and Expo</h3><p class="css-k12xad e5jrto45">Build a To Do app using React Native and Expo for cross platform development and faster deployment</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/adding-analytics-react-native-app.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React Native</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Adding analytics to a React Native app</h3><p class="css-k12xad e5jrto45">In this tutorial, we’re going to look at how to integrate Segment in a React Native app. We’re specifically going to use...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/persisting-data-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React Native</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Persisting data in React Native</h3><p class="css-k12xad e5jrto45">This tutorial takes a look at four different ways to handle persisting data in React Native. You will be introduced to A...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials716b.html?tag=React%20Native&amp;page=2" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials5b52.html?tag=React%20Native&amp;page=1" class="css-5s6711 edg0byb1">1</a><a href="tutorials716b.html?tag=React%20Native&amp;page=2" class="css-5s6711 edg0byb1">2</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsd2ed.html?tag=React%20Native&amp;page=3" class="css-2wakph edg0byb1">3</a><a href="tutorials51b9.html?tag=React%20Native&amp;page=4" class="css-5s6711 edg0byb1">4</a><a href="tutorials51b9.html?tag=React%20Native&amp;page=4" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":33,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"42CAPFNPAcOKwEqcEqCMKg","type":"Entry","createdAt":"2018-11-28T20:27:47.217Z","updatedAt":"2018-11-28T20:27:47.217Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a Pokemon battle game with React Native - Part 1: Practice mode","url":"pokemon-react-native-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNPokeBattle","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-11-28","description":"In this three part series, use React Native and Node.js to create a two-player Pokemon-like game. In part one, implement a practice mode, allowing users to play against a random computer-generated team.","prerequisite":"You will need Node 8+, Expo and Yarn installed on your machine.","content":"In this tutorial, we’ll be building a Pokemon battle game with React Native and Pusher.\n\nThese are the topics that will be covered in this series:\n\n- Part one: Practice mode\n\nIn this part, we’ll be implementing the game’s practice mode. This is where we’ll be implementing the team selection and battle screen (login screen is already pre-coded in the starter project). First, the user logs in and selects six Pokemon that they want to use for the battle. Once the user has confirmed their team, an opponent Pokemon team will be randomly generated. The user gets to battle each Pokemon in the opponent team, but they won’t fight back. \n\n- Part two: Two-player mode\n\nIn part two, we’ll be implementing the two-player mode. This is where we will use Pusher channels, and a Node server to match users who are currently looking for an opponent. Additionally, we’ll also be showing messages to inform both users on the actual attack that was used and its effectiveness (for example, Pikachu used Thunderbolt! It’s super effective).\n\n- Part three: Animations and sounds\n\nIn part three, we’ll be adding animations and sounds to make the game more interactive and fun to play with. Specifically, we’ll animate the health bar when a Pokemon is attacked, animate a couple of attacks (for example, Fire Punch or Ice Punch), and animate when the user switches to a new Pokemon or their current one faints. As for the sounds, we’ll add background music in each of the screens, and play the specific Pokemon cry as they get switched to or when they faint.\n\n\n## Prerequisites\n\nBasic knowledge of React Native, React Navigation, Redux, and ES6 syntax is required. \n\nWe’ll be using the following package versions:\n\n\n- Node 8.3.0\n- Yarn 1.7.0\n- Expo CLI 2.2.0\n- Expo SDK 30.0.0\n- Pusher 4.3.1\n\nIt’s always recommended to use the most recent versions available to you, but those versions are there as a reference in case there’s a major change with those packages which causes the code used in this series to not work.\n\nWe’ll be using [Expo](https://expo.io/) in order to easily test the app on multiple devices. [Install Expo](https://expo.io/learn) on your computer, then download the Expo client app for your [iOS](https://itunes.apple.com/us/app/expo-client/id982107779?mt=8) or [Android](https://play.google.com/store/apps/details?id=host.exp.exponent\u0026hl=en) device.\n\n\n## App overview\n\nIf you’re not familiar with how Pokemon battles are done, there are usually two Pokemon trainers, each has six Pokemon in hand. Each trainer will select one Pokemon to battle the other trainer’s Pokemon. The goal is to make the other Pokemon lose all of its health points (HP) by using different moves (for example, Thunderbolt or Hydro Pump). Once the Pokemon loses all of its HP, they cannot be used again. \n\nThe trainer can also switch out their Pokemon. This is usually done to take advantage of type-effectiveness (for example, fire type Pokemon is effective on grass types, but is weak against water types). \n\nIn the middle of the battle, the trainer can also bring back the lost HP of their Pokemon by using healing items (for example, potion). There are also items for healing status conditions (for example, sleep or paralysis). These status conditions are invoked by using specific moves like Sleep Powder or Thunder Wave.\n\nThe first trainer who loses all of their Pokemon loses the game, while the trainer who still has Pokemon wins. \n\nFor this app, we’re going to simplify things a bit by omitting the following features:\n\n- Status conditions - no conditions such as frozen, burned, and poisoned.\n- Item usage - no items such as full heal, max potion, berries.\n\nNow that you’re familiar with the game mechanics, it’s time for a quick overview of the final output for the whole series:\n\n1. When the user opens the app, they first have to enter a username: \n\n![rn-pokemon-1-1](//images.ctfassets.net/1es3ne0caaid/4KX8UDT4N2iWqUqcwMYWSy/a587870109055dafa132651791ffd2be/rn-pokemon-1-1.png)\n\n2. Next, they will need to select their team, which composed of six Pokemon. Once they have selected all six, a button for confirming their selection will show up:\n\n![rn-pokemon-1-2](//images.ctfassets.net/1es3ne0caaid/6uOYPOHJPGaOwKMQQeceMO/d560d1857418cbc80d215d4cce8d3897/rn-pokemon-1-2.png)\n\n3. Next, the app will look for an opponent:\n\n![rn-pokemon-1-3](//images.ctfassets.net/1es3ne0caaid/G1eEr1C2WGmKicccQkgI/32bf02419a6c5444456d813a52f12753/rn-pokemon-1-3.png)\n\n4. Once an opponent is found, it will show the battle screen. The first turn will go to the user who confirmed their team first.\n\n5. From the battle screen, the first Pokemon picked by the user is pre-selected to battle the opponent’s first Pokemon:\n\n![rn-pokemon-1-4](//images.ctfassets.net/1es3ne0caaid/2Lk7qxVIbey4GUWAOk406w/4c204ca8645e7ff482f69db88f8d8eb0/rn-pokemon-1-4.png)\n\n6. The user can either pick another Pokemon from their team or use one of the four moves by their current Pokemon:\n\n![rn-pokemon-1-5](//images.ctfassets.net/1es3ne0caaid/3WBPC7kod2IaMAOoqKEOGa/95f495baf2c5be89ec4d05b1a2d598a0/rn-pokemon-1-5.png)\n\n7. Once a move is chosen (either attack or switch), the user can no longer make another move until their opponent has made their move. Each user just takes their turns until such time that someone has defeated the whole team of their opponent.\n\nHere’s a gif of the battle screen:\n\n![rn-pokemon-1-6](//images.ctfassets.net/1es3ne0caaid/5Ims6nO5sQi0o0SQIym04I/c72134444dcaf78369477dba9e29fac2/rn-pokemon-1-6.gif)\n\nIn this part, we won’t be implementing all the features yet. As mentioned in the introduction earlier, the first part will be the practice mode. This is where the user only gets to play the game by themselves. \n\n\n## Clone the starter project\n\nThe app that we’re building is pretty huge, that’s why I created a starter project which contains the Pokemon data, UI components, helper functions, and the bare-bones version of each screen. This way, we don’t have to code everything from scratch and we can focus on the more important parts of the app.\n\nGo ahead and clone the repo, switch to the `starter` branch, and install all the packages we need for this part:\n\n```\n    git clone http://github.com/anchetaWern/RNPokeBattle\n    cd RNPokeBattle\n    git checkout starter\n    yarn install\n```\n\n## Overview of the starter project\n\nBefore we proceed with writing some code, let’s first do a quick tour of the code we have on the `starter` branch.\n\n### data\n\nThe `src/data` folder contains the pokemon (`src/data/pokemon_data.js`) and moves data (`src/data/moves_data`). Open those files so you have an idea of what the data structure looks like. The `moves` array in each of the Pokemon object in the `src/data/pokemon_data.js` file contains the ID’s of the moves in the `src/data/moves_data.js` file. The app will pick four random ID’s from the `moves` array and get its details from the `src/data/moves_data.js` file.\n\n### assets\n\nThe `assets` folder contains app assets such as images, fonts, and later on, the sound files. We’re using three different images for each Pokemon: sprite, front animated, and back animated. I got the sprites from [pokemondb.net](https://pokemondb.net/sprites), while the front and back gifs are from [pokestadium.com](http://www.pokestadium.com/tools/sprites). \n\nFor the custom font, we’re using [Aldrich from Google Fonts](https://fonts.google.com/specimen/Aldrich).\n\n### components\n\nThe `src/components` folder contains all the UI components used in the app:\n\n- `ActionList` - for showing the actions that the user can do. In this case, there are only two: attack and switch.\n- `HealthBar` - for showing the current health of each Pokemon.\n- `MovesList` - for showing the list of Pokemon moves.\n- `PokemonFullSprite` - for showing the back and front animated gifs of each Pokemon.\n- `PokemonList` - for showing a list of Pokemon for the team selection and battle screen.\n- `PokemonOption` - for showing the individual clickable Pokemon in the `PokemonList`.\n- `CustomText` - allows us to use the custom font.\n\nNote that the UI for these components are already written, but we still need to turn a few of them into “connected components” so they can dispatch actions and have access to the app’s global store.\n\n### helpers\n\nThe `src/helpers` folder contains the following helper functions:\n\n- `getMoveEffectivenessAndDamage.js` - for calculating damage made to a Pokemon based on a specific attack and the attacked Pokemon’s type defenses. \n- `randomInt.js` - for generating a random integer between a specific range.\n- `shuffleArray.js` - for sorting arrays in random order. It’s used for sorting the moves data randomly so that random moves can be picked for each Pokemon.\n- `uniqid.js` - for generating a unique ID for each member of your Pokemon team. \n\n### screens\n\nThe `src/screens` folder contains all the screens of the app. Only a placeholder content and the screen’s final styles are pre-written in the starter project. The Login screen is already completed because all it does is pass the username to the team selection screen as a navigation prop. Navigation code is also set up for all the screens, so all you have to do is navigate between the screens.\n\nLastly, to make it easier to debug the app, the initialization code for [Reactotron](https://github.com/infinitered/reactotron) is also pre-written. All you have to do is update the value for the `host` with the internal IP address assigned by your router to your computer. This way, Reactotron can find your Expo app. You can find that code in the `Root.js` file.\n\n\n## Build the app\n\nNow that you know which part of the app is already pre-written, we’re ready to implement the functionality for each screen.\n\n### Team selection screen actions\n\nCreate a `src/actions/types.js` file. This is where we will add all the action types that can be performed in the app. First, let’s add the actions that can be performed in the team selection screen:\n\n``` javascript\n    export const SELECT_POKEMON = \"select_pokemon\"; // for marking Pokemon as selected\n    \n    export const SET_POKEMON = \"set_pokemon\"; // for setting a specific Pokemon as the current Pokemon used for battle\n    export const SET_TEAM = \"set_team\"; // for setting a Pokemon team\n```\n\nNext, create a `src/actions/index.js` file, this is where we will add all the action creators for the whole app. Start by adding the functions that will be dispatched when selecting a Pokemon in the team selection screen, and setting the user’s current Pokemon and Pokemon team:\n\n``` javascript\n    import {\n      SELECT_POKEMON,\n      SET_POKEMON,\n      SET_TEAM\n    } from \"./types\";\n    \n    export const selectPokemon = (id, pokemon_data, is_selected) =\u003e { // accepts the Pokemon ID, Pokemon object, and a boolean representing whether it's selected or not\n      return {\n        type: SELECT_POKEMON,\n        id,\n        pokemon_data,\n        is_selected\n      };\n    };\n    \n    export const setPokemon = pokemon =\u003e { // accepts a single Pokemon object\n      return {\n        type: SET_POKEMON,\n        pokemon\n      };\n    };\n    \n    export const setTeam = team =\u003e { // accepts an array of Pokemon object data (same as the ones you find in src/data/pokemon_data.js)\n      return {\n        type: SET_TEAM,\n        team\n      };\n    };\n```\n\n### Team selection screen reducer\n\nCreate a `src/reducers/TeamReducer.js` file. This reducer is responsible for specifying how the store will change when the action for selecting a Pokemon is dispatched. Specifically, it describes how the `selected_pokemon` array changes when it receives the `SELECT_POKEMON` action. It only processes the request further if less than six Pokemon are currently selected. From there, it pushes the selected Pokemon into the `selected_pokemon` array, and removes it if it’s deselected (when `action.is_selected` is `false`):\n\n``` javascript\n    import { SELECT_POKEMON } from \"../actions/types\";\n    \n    import pokemon_data from \"../data/pokemon_data\";\n    \n    const INITIAL_STATE = {\n      pokemon: pokemon_data,\n      selected_pokemon: [] // stores the currently selected Pokemon\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      switch (action.type) {\n        case SELECT_POKEMON:\n          let pokemon = [...state.pokemon];\n          let selected_pokemon = [...state.selected_pokemon];\n    \n          const is_selected = action.is_selected;\n    \n          if (state.selected_pokemon.length \u003c 6 || is_selected) { // there should only be six selected Pokemon\n            pokemon = pokemon.map(item =\u003e {\n              if (item.id == action.id) { // only modify the Pokemon specified in the action\n                item.is_selected = !is_selected; // flip the current is_selected value \n              }\n              return item;\n            });\n    \n            if (is_selected) {\n              const index_to_remove = selected_pokemon.findIndex(\n                item =\u003e item.id == action.id\n              );\n              selected_pokemon.splice(index_to_remove, 1);\n            } else {\n              selected_pokemon.push(action.pokemon_data);\n            }\n          }\n    \n          return { ...state, pokemon, selected_pokemon };\n    \n        default:\n          return state;\n      }\n    };\n```\n\nAs you noticed in the code above, we’re only processing the `SELECT_POKEMON` action type. This is because `SET_POKEMON` and `SET_TEAM` will be processed in the reducer for the battle screen related actions which we’ll add it shortly. We only added them in the action types and action creators file because they’re needed in the team selection screen.\n\n### Battle screen reducers for Team selection screen\n\nCreate a `src/reducers/BattleReducer.js` file, and add the reducers responsible for setting the user’s Pokemon team and current Pokemon:\n\n``` javascript\n    import {\n      SET_TEAM,\n      SET_POKEMON\n    } from \"../actions/types\";\n    \n    const INITIAL_STATE = {\n      team: [], // the user's Pokemon team\n      pokemon: null // currently selected pokemon by user (the one being shown in the UI)\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      switch (action.type) {\n        case SET_TEAM:\n          const { team } = action;\n          return { ...state, team };\n    \n        case SET_POKEMON:\n          const pokemon = action.pokemon;\n          return { ...state, pokemon };\n    \n        default:\n          return state;\n      }\n    };\n```\n\n### Bringing all the reducers together\n\nCreate a `src/reducers/index.js` file, and combine the two reducer files we created earlier. This allows us to import only this file when we need to include all the reducers that we need:\n\n``` javascript\n    import { combineReducers } from \"redux\";\n    import TeamReducer from \"./TeamReducer\";\n    import BattleReducer from \"./BattleReducer\";\n    \n    export default combineReducers({\n      team_selection: TeamReducer,\n      battle: BattleReducer\n    });\n```\n\n### Add the store to the app\n\nAt this point, we’re now ready to add the global app store:\n\n``` javascript\n    // Root.js\n    import { Provider } from \"react-redux\";\n    import { compose, createStore } from \"redux\";\n    import reducers from \"./src/reducers\";\n```\n\nTo make debugging the store easier, you may also add Reactotron Redux to your existing Reactotron configuration:\n\n``` javascript\n    import { reactotronRedux } from \"reactotron-redux\";\n    Reactotron.configure({ host: \"IP_ADDRESS_ASSIGNED_BY_YOUR_ROUTER\" })\n      .useReactNative()\n      .use(reactotronRedux()) // add this\n      .connect();\n```\n\nDon’t forget to add Reactotron Redux as your dev dependency:\n\n```\n    yarn add --dev reactotron-redux\n```\n\nLastly, update the `render` function so it wraps everything in the `Provider` component which uses the store:\n\n``` javascript\n    // Root.js\n    render() {\n      return (\n        \u003cProvider store={store}\u003e\n          \u003cRootStack /\u003e\n        \u003c/Provider\u003e\n      );\n    }\n```\n\n### Team selection screen\n\nThe team selection screen is where the user gets to pick the Pokemon they want to use to battle their opponent. Start by importing the action creators for setting the team and current Pokemon:\n\n``` javascript\n    // src/screens/TeamSelectionScreen.js\n    import { connect } from \"react-redux\";\n    \n    import { setTeam, setPokemon } from \"../actions\";\n    import moves_data from \"../data/moves_data\";\n```\n\nNext, scroll down to the part where the component is exported and add the function for mapping specific values in the store as props for this component. In this case, we only need values from the team reducer (`src/reducers/TeamReducer.js`). We gave it a name of `team_selection` in the `src/reducers/index.js` file, so that’s what we’re extracting:\n\n``` javascript\n    const mapStateToProps = ({ team_selection }) =\u003e {\n      const { pokemon, selected_pokemon } = team_selection;\n      \n      // return pokemon and selected_pokemon as props for this component\n      return {\n        pokemon, // all the Pokemon available for selection (a copy of src/data/pokemon_data.js)\n        selected_pokemon // array of selected Pokemon\n      };\n    };\n    \n    // next: add mapDispatchToProps\n```\n\nSince we want to set the team and current Pokemon from this screen, we create the function that allows us to dispatch the `setTeam` and `setPokemon` actions. This allows us to update the store with a new `team` and `pokemon` data by executing the similarly named `setTeam` and `setPokemon` functions returned from this function. Note that you don’t need to use the same name we used for the action creators. If it makes sense to use a different name, then do it (for example, if you get confused whether a specific function is referring to the function returned from `mapDispatchToProps` or the action creator itself):\n\n``` javascript\n    const mapDispatchToProps = dispatch =\u003e {\n      // for updating the value of team and pokemon in src/reducers/BattleReducer.js\n      return {\n        setTeam: team =\u003e {\n          dispatch(setTeam(team));\n        },\n        setPokemon: pokemon =\u003e {\n          dispatch(setPokemon(pokemon));\n        }\n      };\n    };\n    \n    // next: convert component into a connected one\n```\n\nNext, convert the component into a connected component. This gives us access to the specific values we returned earlier on `mapStateToProps` as props, and call the functions we returned in `mapDispatchToProps` earlier:\n\n``` javascript\n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps\n    )(TeamSelectionScreen);\n```\n\nAt this point, we’re now ready to update the `render` method of the team selection screen. By default, we only display the `PokemonList`. As mentioned in the **overview of the starter project** section earlier, the `PokemonList` function is responsible for rendering a list of Pokemon. All you have to do is supply an array of Pokemon data to its `data` prop. The `pokemon` data is available in the store and it’s made available as a prop via the `mapStateToProps` function. The same is true of the `selected_pokemon`. We’re using it to determine whether to show the button to confirm the team. Once the user clicks on it, the `ActivityIndicator` will be shown to indicate that the app is looking for an opponent:\n\n``` javascript\n    render() {\n      const { selected_pokemon } = this.props;\n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cCustomText styles={[styles.headerText]}\u003eSelect your team\u003c/CustomText\u003e\n    \n          {selected_pokemon.length == 6 \u0026\u0026 (\n            \u003cView\u003e\n              {this.state.is_loading \u0026\u0026 (\n                \u003cView style={styles.loadingContainer}\u003e\n                  \u003cActivityIndicator size=\"large\" color=\"#ffbf5a\" /\u003e\n                  \u003cCustomText styles={styles.messageText}\u003e\n                    Waiting for opponent..\n                  \u003c/CustomText\u003e\n                \u003c/View\u003e\n              )}\n    \n              {!this.state.is_loading \u0026\u0026 (\n                \u003cTouchableOpacity\n                  style={styles.confirmButton}\n                  onPress={this.confirmTeam}\n                \u003e\n                  \u003cCustomText\u003eConfirm Selection\u003c/CustomText\u003e\n                \u003c/TouchableOpacity\u003e\n              )}\n            \u003c/View\u003e\n          )}\n          \u003cPokemonList\n            data={this.props.pokemon}\n            numColumns={1}\n            action_type={\"select-pokemon\"}\n          /\u003e\n        \u003c/View\u003e\n      );\n    }\n    \n    // next: add confirmTeam function\n```\n\nNext, add the code for the function that gets executed when the button for confirming the team is clicked. This adds some of the required data for the battle screen. This includes the health points, the unique team member ID, and the random Pokemon moves data for each Pokemon in the team:\n\n``` javascript\n    // src/screens/TeamSelectionScreen.js\n    \n    confirmTeam = () =\u003e {\n      const { selected_pokemon, setTeam, setPokemon, navigation } = this.props;\n    \n      let team = [...selected_pokemon]; // the array which stores the data for the Pokemon team selected by the user\n      \n      team = team.map(item =\u003e {\n        let hp = 500; // the total health points given to each Pokemon\n    \n        let shuffled_moves = shuffleArray(item.moves);\n        let selected_moves = shuffled_moves.slice(0, 4);\n    \n        let moves = moves_data.filter(item =\u003e {\n          return selected_moves.indexOf(item.id) !== -1;\n        });\n    \n        let member_id = uniqid();\n    \n        return {\n          ...item,\n          team_member_id: member_id, // unique ID for identifying each Pokemon in the team\n          current_hp: hp, // current HP. This gets updated when an opponent Pokemon attacks\n          total_hp: hp,\n          moves: moves,\n          is_selected: false // no longer needed\n        };\n      });\n      \n      // update the store with the new team and Pokemon data\n      setTeam(team);\n      setPokemon(team[0]);\n      \n      // next: set is_loading to true in state and navigate to Battle screen\n    };\n```\n\nNext, we want to emulate that the app is actually trying to find an opponent for the user, so we’ll trigger the `ActivityIndicator` to be visible for 2.5 seconds before we navigate to the battle screen:\n\n``` javascript\n    this.setState({\n      is_loading: true // show activity indicator\n    });\n    \n    setTimeout(() =\u003e {\n      const username = navigation.getParam(\"username\");\n    \n      this.setState({\n        is_loading: false\n      });\n    \n      navigation.navigate(\"Battle\", {\n        username: username\n      });\n    }, 2500); // 2.5 seconds\n```\n\nWe will update the above code in part two, so it actually tries to find a real opponent for the user.\n\n### Dispatch the action for selecting a Pokemon\n\nWe haven’t actually added the code that actually selects or deselects a specific Pokemon to be added to the team, so let’s go ahead and add it. If you open the `src/components/PokemonList/PokemonList.js` file, you will see that it uses the `PokemonOption` component to render each of the Pokemon items that you see in the team selection screen. We’re not really passing any functions in there so the actual function should be declared in the `PokemonOption` itself. Start by importing the action for selecting a Pokemon:\n\n``` javascript\n    // src/components/PokemonOption/PokemonOption.js\n    \n    import { connect } from \"react-redux\";\n    \n    import { selectPokemon } from \"../../actions\";\n```\n\nNext, use `mapDispatchToProps` so you can dispatch the action via a `togglePokemon` function which you can call inside the component’s body. This expects the `id` of the Pokemon, an object containing the Pokemon data, and a boolean that indicates whether it’s currently selected or not:\n\n``` javascript\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        togglePokemon: (id, pokemon_data, is_selected) =\u003e {\n          dispatch(selectPokemon(id, pokemon_data, is_selected));\n        }\n      };\n    };\n    \n    export default connect(\n      null,\n      mapDispatchToProps\n    )(PokemonOption);\n```\n\nNext, extract the `togglePokemon` function from the props:\n\n``` javascript\n    const PokemonOption = ({\n       // previously added code here..\n       \n      // add this:\n      togglePokemon\n    }) =\u003e {\n      // existing code here...\n    });\n```\n\nWhen the user clicks on the component, the `action_type` is first determined. This component is used for both team selection and Pokemon selection (in the battle screen later), so we need to determine the context in which it was called. An `action_type` of `select-pokemon` means that it was called from the team selection screen, thus we call the `togglePokemon` function to select or deselect it. The `action_type` prop is passed to the `PokemonList` component and down to the `PokemonOption`:\n\n``` javascript\n    onPress={() =\u003e {\n      if (action_type == \"select-pokemon\") {\n        togglePokemon(id, pokemon_data, is_selected);\n      } \n    }}\n```\n\n### Battle screen actions\n\nNow that we’ve implemented the team selection screen, let’s proceed with adding the code for the battle screen. Start by updating the action types file to include the actions that can be performed in the battle screen:\n\n``` javascript\n    // src/actions/types.js\n    \n    // existing code here...\n    \n    // add these:\n    export const SET_OPPONENT_TEAM = \"set_opponent_team\";\n    \n    export const SET_MOVE = \"set_move\";\n    \n    export const SET_OPPONENT_POKEMON = \"set_opponent_pokemon\";\n    export const SET_OPPONENT_POKEMON_HEALTH = \"set_opponent_pokemon_health\";\n    \n    export const REMOVE_POKEMON_FROM_OPPONENT_TEAM =\n      \"remove_pokemon_from_opponent_team\";\n```\n\nNext, create an action creator for the action types we just added:\n\n``` javascript\n    // src/actions/index.js\n    \n    import {\n      // existing action types here...\n      \n      // add these:\n      SET_OPPONENT_TEAM,\n      SET_MOVE,\n      SET_OPPONENT_POKEMON,\n      SET_OPPONENT_POKEMON_HEALTH,\n      REMOVE_POKEMON_FROM_OPPONENT_TEAM\n    } from \"./types\";\n    \n    // add these after the last function:\n    export const setOpponentTeam = team =\u003e { // accepts an array that contains the Pokemon data of the team selected by the user\n      return {\n        type: SET_OPPONENT_TEAM,\n        team \n      };\n    };\n    \n    export const setMove = move =\u003e { // accepts an object containing the move data (same as what you see in src/data/moves_data.js)\n      return {\n        type: SET_MOVE,\n        move\n      };\n    };\n    \n    export const setOpponentPokemon = pokemon =\u003e { // accepts an object containing the data of the Pokemon selected by the opponent\n      return {\n        type: SET_OPPONENT_POKEMON,\n        pokemon\n      };\n    };\n    \n    export const setOpponentPokemonHealth = (team_member_id, health) =\u003e { // accepts the team_member_id of the opponent's Pokemon, and the new health points to be assigned\n      return {\n        type: SET_OPPONENT_POKEMON_HEALTH,\n        team_member_id,\n        health\n      };\n    };\n    \n    export const removePokemonFromOpponentTeam = team_member_id =\u003e { // accepts the team_member_id of the Pokemon to be removed from the opponent's team\n      return {\n        type: REMOVE_POKEMON_FROM_OPPONENT_TEAM,\n        team_member_id\n      };\n    };\n```\n\n### Battle screen reducers for Battle screen\n\nNext, let’s add the reducers for the Battle screen:\n\n``` javascript\n    // src/reducers/BattleReducer.js\n    \n    import {\n      // existing code here...\n      \n      // add these:\n      SET_OPPONENT_TEAM,\n      SET_MOVE,\n      SET_OPPONENT_POKEMON,\n      SET_OPPONENT_POKEMON_HEALTH,\n      REMOVE_POKEMON_FROM_OPPONENT_TEAM\n    } from \"../actions/types\";\n```\n\nNext, include the additional state that we will manage in this reducer. This includes the user’s current `move`. It controls what the user sees in the bottom part of the screen. By default, it’s set to `select-move`, this allows the user to either attack with their current Pokemon or switch to another one from their team. The user also needs to access the data for their opponent’s team so we have the `opponent_team` and `opponent_pokemon` (the opponent’s current Pokemon) as well:\n\n``` javascript\n    const move_display_text = {\n      \"select-move\": \"Select your move\", // main menu (choose whether to attack or switch)\n      \"select-pokemon\": \"Which Pokemon will you use?\", // choose another Pokemon from team\n      \"select-pokemon-move\": \"Which attack will you use?\" // choose a move by their current Pokemon\n    };\n    \n    const default_move = \"select-move\";\n    \n    const INITIAL_STATE = {\n      // existing code here..\n      \n      // add these:\n      move: default_move,\n      move_display_text: move_display_text[default_move],\n      opponent_team: [],\n      opponent_pokemon: null // currently selected pokemon by opponent \n    };\n```\n\nNext, add the reducers that will process the actions. Add these before the default condition of the switch statement:\n\n``` javascript\n    case SET_OPPONENT_TEAM: // for setting the opponent's team\n      return { ...state, opponent_team: action.team };\n    \n    case SET_MOVE: // for setting the controls currently displayed in the user's screen\n      const { move } = action; \n      return { ...state, move, move_display_text: move_display_text[move] };\n    \n    case SET_OPPONENT_POKEMON: // for setting the opponent's current Pokemon\n      const opponent_pokemon = action.pokemon\n        ? action.pokemon\n        : state.opponent_team[0]; // if the action didn't pass a Pokemon, use the first Pokemon in the opponent's team instead\n      return { ...state, opponent_pokemon };\n    \n    case SET_OPPONENT_POKEMON_HEALTH: // for updating the opponent's current Pokemon's health\n      let opponent_team = [...state.opponent_team];\n      opponent_team = opponent_team.map(item =\u003e {\n        if (item.team_member_id == action.team_member_id) {\n          item.current_hp = action.health;\n        }\n        return item;\n      });\n    \n      return { ...state, opponent_team };\n    \n    case REMOVE_POKEMON_FROM_OPPONENT_TEAM: // for removing a specific Pokemon from opponent's team after it faints (when its HP goes below 1)\n      const diminished_opponent_team = [...state.opponent_team].filter(item =\u003e {\n        return item.team_member_id != action.team_member_id;\n      });\n    \n      return { ...state, opponent_team: diminished_opponent_team };\n```\n\n### Battle screen\n\nThe battle screen is where the user battles a random opponent. As mentioned earlier, we’re only going to generate a random Pokemon team and let the user attack each Pokemon in the opponent team one by one. Start by importing all the necessary packages, data, actions, and helper functions:\n\n``` javascript\n    // src/screens/BattleScreen.js\n    \n    import { connect } from \"react-redux\";\n    import pokemon_data from \"../data/pokemon_data.js\";\n    import moves_data from \"../data/moves_data\";\n    \n    import uniqid from \"../helpers/uniqid\";\n    import randomInt from \"../helpers/randomInt\";\n    import shuffleArray from \"../helpers/shuffleArray\";\n    \n    import { setOpponentTeam, setOpponentPokemon, setMove } from \"../actions\";\n```\n\nNext, scroll down to the part where the component class is exported and add the following code before it. These are the data from the store that we’re going to need:\n\n``` javascript\n    const mapStateToProps = ({ battle }) =\u003e {\n      const {\n        team,\n        move,\n        move_display_text,\n        pokemon,\n        opponent_team,\n        opponent_pokemon\n      } = battle;\n      return {\n        team,\n        move,\n        move_display_text,\n        pokemon,\n        opponent_team,\n        opponent_pokemon\n      };\n    };\n```\n\nNext, add the functions that will dispatch the actions for setting what the user sees in their controls UI, setting the opponent team, and setting the opponent Pokemon:\n\n``` javascript\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        backToMove: () =\u003e {\n          dispatch(setMove(\"select-move\"));\n        },\n        setOpponentTeam: team =\u003e {\n          dispatch(setOpponentTeam(team));\n        },\n        setOpponentPokemon: pokemon =\u003e {\n          dispatch(setOpponentPokemon(pokemon));\n        }\n      };\n    };\n```\n\nDon’t forget to pass those functions when exporting the component:\n\n``` javascript\n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps\n    )(BattleScreen);\n```\n\nOnce the component is mounted, this is where we generate the data for the random team:\n\n``` javascript\n    componentDidMount() {\n    \n      const { setOpponentTeam, setOpponentPokemon } = this.props;\n    \n      let random_pokemon_ids = [];\n      for (let x = 0; x \u003c= 5; x++) {\n        random_pokemon_ids.push(randomInt(1, 54));\n      }\n    \n      let opposing_team = pokemon_data.filter(item =\u003e {\n        return random_pokemon_ids.indexOf(item.id) !== -1;\n      });\n    \n      opposing_team = opposing_team.map(item =\u003e {\n        let hp = 500;\n    \n        let shuffled_moves = shuffleArray(item.moves);\n        let selected_moves = shuffled_moves.slice(0, 4);\n    \n        let moves = moves_data.filter(item =\u003e {\n          return selected_moves.indexOf(item.id) !== -1;\n        });\n    \n        let member_id = uniqid();\n    \n        return {\n          ...item,\n          team_member_id: member_id,\n          current_hp: hp,\n          total_hp: hp,\n          moves: moves,\n          is_selected: false\n        };\n      });\n      \n      // update the store with the opponent team and current opponent Pokemon\n      setOpponentTeam(opposing_team);\n      setOpponentPokemon(opposing_team[0]);\n      \n    }\n```\n\nNext, we render the UI for the battle screen. Start by extracting all the data and functions that we need from the store:\n\n``` javascript\n    render() {\n      const {\n        team,\n        move,\n        move_display_text,\n        pokemon,\n        opponent_pokemon,\n        backToMove\n      } = this.props;\n      \n      // next: add code for returning the Battle screen UI\n    }\n```\n\nNext, return the UI. The battle screen is divided into two sections: battleground and controls:\n\n``` javascript\n    return (\n      \u003cView style={styles.container}\u003e\n        \u003cCustomText styles={[styles.headerText]}\u003eFight!\u003c/CustomText\u003e\n    \n        \u003cView style={styles.battleGround}\u003e\n          // next: render Pokemon and opponent Pokemon UI\n        \u003c/View\u003e\n        \n        \u003cView style={styles.controls}\u003e\n          // next: add battle controls UI\n        \u003c/View\u003e\n      \u003c/View\u003e\n    );\n```\n\nThe battleground section displays both the user’s and their opponent’s current Pokemon, along with their health points. This uses the pre-created `HealthBar` and `PokemonFullSprite` components:\n\n``` javascript\n    {opponent_pokemon \u0026\u0026 (\n      \u003cView style={styles.opponent}\u003e\n        \u003cHealthBar\n          currentHealth={opponent_pokemon.current_hp}\n          totalHealth={opponent_pokemon.total_hp}\n          label={opponent_pokemon.label}\n        /\u003e\n        \u003cPokemonFullSprite\n          pokemon={opponent_pokemon.label}\n          spriteFront={opponent_pokemon.front}\n          spriteBack={opponent_pokemon.back}\n          orientation={\"front\"}\n        /\u003e\n      \u003c/View\u003e\n    )}\n    \n    {pokemon \u0026\u0026 (\n      \u003cView style={styles.currentPlayer}\u003e\n        \u003cHealthBar\n          currentHealth={pokemon.current_hp}\n          totalHealth={pokemon.total_hp}\n          label={pokemon.label}\n        /\u003e\n    \n        \u003cPokemonFullSprite\n          pokemon={pokemon.label}\n          spriteFront={pokemon.front}\n          spriteBack={pokemon.back}\n          orientation={\"back\"}\n        /\u003e\n      \u003c/View\u003e\n    )}\n```\n\nThe controls section displays the options that the user can select to control what their move is going to be (either attack with their current Pokemon or switch to another one from their team). These are the default controls that the user is going to see. As you’ve seen in the battle reducer file earlier, this is controlled by the current value of `move`. By default, it is set to `select-move` which renders the main menu. If the user chose to attack, the value of `move` is updated to `select-pokemon-move`, thus displaying the `MovesList` component. On the other hand, if the user chose to switch Pokemon, the value of `move` is updated to `select-pokemon`, which displays the `PokemonList` component. Lastly, if `move` is either `select-pokemon` or `select-pokemon-move`, a back button is displayed. If the user clicks on it, it calls the `backToMove` function which dispatches an action to update the value of `move` back to `select-move`. This basically brings the user back to the control UI’s main menu:\n\n``` javascript\n    \u003cView style={styles.controlsHeader}\u003e\n      {(move == \"select-pokemon\" || move == \"select-pokemon-move\") \u0026\u0026 (\n        \u003cTouchableOpacity\n          style={styles.backButton}\n          onPress={() =\u003e {\n            backToMove();\n          }}\n        \u003e\n          \u003cIonicons name=\"md-arrow-round-back\" size={20} color=\"#333\" /\u003e\n        \u003c/TouchableOpacity\u003e\n      )}\n    \n      \u003cCustomText styles={styles.controlsHeaderText}\u003e\n        {move_display_text}\n      \u003c/CustomText\u003e\n    \u003c/View\u003e\n    \n    {move == \"select-move\" \u0026\u0026 \u003cActionList /\u003e}\n    \n    {move == \"select-pokemon\" \u0026\u0026 (\n      \u003cPokemonList\n        data={team}\n        scrollEnabled={false}\n        numColumns={2}\n        action_type={\"switch-pokemon\"}\n      /\u003e\n    )}\n    \n    {pokemon \u0026\u0026\n      move == \"select-pokemon-move\" \u0026\u0026 (\n        \u003cMovesList moves={pokemon.moves} /\u003e\n      )}\n```\n\n### Dispatch actions for fighting and switching Pokemon \n\nNext, we need to update the `ActionList` component so it dispatches the relevant actions that will update the controls UI. Start by importing `connect` from `react-redux` and the `setMove` action:\n\n``` javascript\n    // src/components/ActionList/ActionList.js\n    \n    import { connect } from \"react-redux\";\n    import { setMove } from \"../../actions\";\n```\n\nNext, add the `setMove` function so you can dispatch the similarly named action:\n\n``` javascript\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        setMove: move =\u003e {\n          dispatch(setMove(move));\n        }\n      };\n    };\n    \n    export default connect(\n      null,\n      mapDispatchToProps\n    )(ActionList);\n```\n\nLastly, call the `setMove` function on each of the `action` function. Pass the value you want the `move` to be: \n\n``` javascript\n    const data = [\n      {\n        label: \"Fight\",\n        action: () =\u003e { // function to execute when the fight button is clicked\n          setMove(\"select-pokemon-move\"); // add this\n        }\n      },\n      {\n        label: \"Switch\",\n        action: () =\u003e { // function to execute when the switch button is clicked\n          setMove(\"select-pokemon\"); // add this\n        }\n      }\n    ];\n```\n\n### Dispatch the action for switching to a specific Pokemon\n\nAt this point, the user can now view the attacks of the current Pokemon, as well as the list of Pokemon in their team. This time, we need to add the code that will update the UI when an attack is made, or when the user switches to another Pokemon. Start by importing the actions: \n\n``` javascript\n    // src/components/PokemonOption/PokemonOption.js\n    \n    import { selectPokemon, setPokemon, setMove } from \"../../actions\";\n```\n\nNext, update `mapDispatchToProps` to include the functions that will set the current Pokemon, and going back to the initial UI of the controls section:\n\n``` javascript\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        // existing code here..\n        \n        // add these:\n        setPokemon: pokemon =\u003e {\n          dispatch(setPokemon(pokemon)); // for setting the current Pokemon\n        },\n        backToMove: () =\u003e {\n          dispatch(setMove(\"select-move\")); // for showing the initial controls UI (the Fight or Switch buttons)\n        }\n      }\n    }\n```\n\nLastly, update the `onPress` handler to include the `switch-pokemon` condition:\n\n``` javascript\n    onPress={() =\u003e {\n      if (action_type == \"select-pokemon\") {\n        // existing code here...\n      } else if (action_type == \"switch-pokemon\") { // add these\n        setPokemon(pokemon_data); // use the pokemon data passed from the PokemonList component\n        backToMove();\n      }\n    }}\n```\n\n### Dispatch action for updating opponent Pokemon’s health\n\nThe final step is for us to update the opponent Pokemon’s health when the user chooses a move to attack with. Import the following actions, and the helper function for getting the move effectiveness and the actual damage:\n\n``` javascript\n    // src/components/MovesList/MovesList.js\n    \n    import { connect } from \"react-redux\";\n    import {\n      setOpponentPokemonHealth, // for setting the current opponent Pokemon's health\n      removePokemonFromOpponentTeam, // for removing the current opponent Pokemon from the opponent team\n      setOpponentPokemon, // for setting the current opponent Pokemon after the previous one has fainted\n      setMove // for going back to the initial controls UI after the opponent Pokemon has fainted\n    } from \"../../actions\";\n    \n    import getMoveEffectivenessAndDamage from \"../../helpers/getMoveEffectivenessAndDamage\";\n```\n\nNext, map the current `opponent_pokemon` as a prop. This gives us access to the opponent Pokemon’s current health points, type defenses, and team member ID. This allows us to calculate the damage made by the attack by passing those data to the `getMoveEffectivenessAndDamage` function:\n\n``` javascript\n    const mapStateToProps = ({ battle }) =\u003e {\n      const { opponent_pokemon } = battle;\n    \n      return {\n        opponent_pokemon\n      };\n    };\n```\n\nNext, add the functions that will dispatch the actions that we imported earlier:\n\n``` javascript\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        setOpponentPokemonHealth: (team_member_id, health) =\u003e {\n          dispatch(setOpponentPokemonHealth(team_member_id, health));\n        },\n    \n        removePokemonFromOpponentTeam: team_member_id =\u003e {\n          dispatch(removePokemonFromOpponentTeam(team_member_id));\n        },\n    \n        setOpponentPokemon: () =\u003e {\n          dispatch(setOpponentPokemon());\n        },\n        setMove: move =\u003e {\n          dispatch(setMove(move));\n        }\n      };\n    };\n```\n\nFinally, update the `onPress` function so it calculates the damage done by an attack, as well as return a description of how effective the attack is (examples: no effect, not very effective, super effective):\n\n``` javascript\n    onPress={() =\u003e {\n      let { damage } = getMoveEffectivenessAndDamage(\n        item,\n        opponent_pokemon\n      );\n      let health = opponent_pokemon.current_hp - damage;\n    \n      setOpponentPokemonHealth(opponent_pokemon.team_member_id, health); // update the opponent Pokemon's health\n    \n      if (health \u003c 1) { // opponent Pokemon has fainted\n        removePokemonFromOpponentTeam(opponent_pokemon.team_member_id);\n    \n        setMove(\"select-move\"); // go back to the initial controls UI\n        setOpponentPokemon(); // set the opponent Pokemon (if there's still one left)\n      }\n      \n    }}\n```\n\n## Conclusion\n\nIn this tutorial, we’ve created a Pokemon battle game app using React Native and Redux. Along the way, you’ve strengthened your basic Redux knowledge by building an app that makes use of all the basic Redux concepts.\n\nStay tuned for the second part where we will implement the two-player mode, so the users actually get to battle another human.\n\nYou can find the full source code of the app on this [GitHub repo](https://github.com/anchetaWern/RNPokeBattle). The code added to this specific part of the series is on the `practice` branch.","metaTitle":"Create a Pokemon battle game with React Native - Part 1","metaDescription":" In part one, implement a practice mode, allowing users to play against a random computer-generated team.\nThis three-part tutorial series, we will be using React Native and Node.js to create a two-player Pokemon-like game."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"xmvFyFo8GyCU6acuyo2My","type":"Entry","createdAt":"2018-10-15T18:24:47.488Z","updatedAt":"2018-11-12T17:12:56.801Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a photo sharing app with React Native","url":"photo-sharing-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNPhotoShare","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-11-12","description":"Use React Native, Node.js and Imgur to create a photo sharing app. Users will be able to follow their friends and share their own photos with their followers. New photos will be published and shared in realtime.","prerequisite":"You will need Node 8+ and the Expo CLI and SDK installed on your machine. Some knowledge of React Native development will be helpful.","content":"In this tutorial, we’ll be creating a realtime photo-sharing app with React Native and Pusher Channels. \n\n## Prerequisites\n\nBasic knowledge of React Native is required is in order to follow along. We’ll also be using [Redux](https://redux.js.org/) in some parts of the app so basic knowledge of it will be helpful as well.\n\nWe’ll be using [Expo](https://expo.io/) in order to easily test the app on multiple devices. Download the Expo client app for your [iOS](https://itunes.apple.com/us/app/expo-client/id982107779?mt=8) or [Android](https://play.google.com/store/apps/details?id=host.exp.exponent\u0026hl=en) device.\n\nThese are the package versions used in creating the app:\n\n\n- Node 8.3.0\n- Yarn 1.7.0\n- Expo CLI 2.0.0\n- Expo SDK 30.0.0\n- Pusher 4.3.1\n- React Navigation 2.14.0\n\nYou don’t necessarily have to use the versions above, but if you encounter problems when using other versions, I recommend you to use the ones above instead. For other packages used in the app, be sure to check out the `package.json` file found in the [GitHub repo](https://github.com/anchetaWern/RNPhotoShare).\n\nWe’ll be using Pusher and Imgur in this tutorial so you need to have an account on both of those services:\n\n\n- [Pusher](http://pusher.com/)\n- [Imgur](https://imgur.com/register)\n\n\n## App overview\n\nWhen the user first opens the app, they’ll be greeted by the following screen. From here, they can either choose to share photos or view them by subscribing to another user who chose to share their photo:\n\n![react-native-photo-share-homepage](//images.ctfassets.net/1es3ne0caaid/3HcHtirrO0uwwgwa8gAQQw/8403a2f60c25d96dd5a27a52ce808cd1/react-native-photo-share-homepage.png)\n\nWhen a user chooses **Share**, they’ll be assigned a unique username, which they can share with anyone. This sharing mechanism will be entirely outside the app, so it can be anything (For example, email or SMS):\n\n![react-native-photo-share-share-screen](//images.ctfassets.net/1es3ne0caaid/5djOaJHu7SEmUEeEYqyKQK/5606ea888ba1d2c57977f323024421c4/react-native-photo-share-share-screen.png)\n\nHere’s what it looks like when someone chooses **View**. On this screen, they have to enter the username assigned to the user they want to follow:\n\n![react-native-photo-share-follow](//images.ctfassets.net/1es3ne0caaid/36VjMRTrAQyCkmWSumYYk8/86034cb4c4f690912d53e6d00f32422b/react-native-photo-share-follow.png)\n\nGoing back to the user who selected **Share**, here’s what their screen will look like when they click on the camera icon from earlier. This will allow the user to take a photo, flip the camera, or close it:\n\n![react-native-photo-share-camera](//images.ctfassets.net/1es3ne0caaid/7GUgMyZVKMCAs0m4m4uACc/4bb3ae4b6ef1b91385dc067196f3f73c/react-native-photo-share-camera.png)\n\nOnce they take a snap, the camera UI will close and the photo will be previewed. At this point, the photo should have already started uploading in the background using the Imgur API:\n\n![react-native-photo-share-preview](//images.ctfassets.net/1es3ne0caaid/67D4M5ttYcKsyo0wuIgwq0/86a3b74cf8aba2e8a895ad2418849f20/react-native-photo-share-preview.png)\n\nSwitching back to the follower (the user who clicked on **View**), once the upload is finished, the Imgur API should return the image URL and its unique ID. Those data are then sent to the Pusher channel which the follower has subscribed to. This allows them to also see the shared photo:\n\n![react-native-photo-share-photo-received](//images.ctfassets.net/1es3ne0caaid/3QWCIyl3w4kuUIysMgoymA/7db155610e74f1d47095cb3f3c7e594e/react-native-photo-share-photo-received.png)\n\nIt’s not shown in the screenshot above, but everytime a new photo is received, it will automatically be appended to the top of the list.\n\nYou can find the app’s source code in this [GitHub repo](https://github.com/anchetaWern/RNPhotoShare).\n\n\n## Create Pusher and Imgur apps\n\nOn your [Pusher dashboard](https://dashboard.pusher.com/), create a new app and name it **RNPhotoShare**. Once it’s created, go to app settings and enable client events. This will allow us to directly trigger events from the app:\n\n![react-native-photo-share-enable-client-events](//images.ctfassets.net/1es3ne0caaid/1PhoIFNEOQKA0AoaKqqoMW/856f0fe856a794e95700342da0fa917b/react-native-photo-share-enable-client-events.png)\n\nNext, after logging in to your Imgur account, go to [this page](https://api.imgur.com/oauth2/addclient) and register an app. The most important setting here is the **Authorization type**. Select **Anonymous usage without user authorization** as we will only be uploading images anonymously. **Authorization callback URL** can be any value because we won’t really be using it. Other than that, you can enter any value for the other fields:\n\n![react-native-photo-share-imgur-app](//images.ctfassets.net/1es3ne0caaid/74FnQEJcdyAqaWgq8qugiK/59e01a1269e38c32cf9494ad3e62ecd3/react-native-photo-share-imgur-app.png)\n\nClick **Submit** to create the app. This will show you the app ID and app secret. We’re only going to need the app ID so take note of that. In case you lose the app ID, you can view all the Imgur apps you created [here](https://imgur.com/account/settings/apps).\n\n\n## Building the app\n\nStart by cloning the project repo and switch to the `starter` branch:\n\n```\n    git clone https://github.com/anchetaWern/RNPhotoShare.git\n    cd RNPhotoShare\n    git checkout starter\n```\n\nThe `starter` branch contains the bare-bones app template, navigation, components, and all of the relevant styles which we will be using later on. Having all of those in the starter allows us to focus on the main meat of the app.\n\nInstall the packages using [Yarn](https://yarnpkg.com/):\n\n```\n    yarn install\n```\n\nHere’s a quick overview of what each package does:\n\n\n- `expo` - the Expo SDK. This includes the Camera API and the icons that we will be using in the app.\n- `random-animal-name-generator` - for generating the unique usernames for users who want to share photos.\n- `pusher-js` - the JavaScript library for working with Pusher.\n- `react-navigation` - for implementing navigation within the app.\n- `prop-types` - for validating the props added to components on runtime.\n- `whatwg-fetch` - there’s a [recent issue](https://forums.expo.io/t/cant-find-variable-self/13547) with the latest version of the `whatwg-fetch` package that Expo uses, so we need to install a lower version through the main project in order to fix the issue.\n- `redux` - for adding and managing global app state.\n- `react-redux` - for working with Redux within the React environment.\n\n### Home screen\n\nLet’s first start with the Home screen by importing all the necessary packages:\n\n``` javascript\n    // src/screens/HomeScreen.js\n    import React, { Component } from \"react\";\n    import { View, Text, Button } from \"react-native\";\n    \n    import Pusher from \"pusher-js/react-native\";\n```\n\nBy default, React Navigation will display a header on every page, we don’t want that in this page so we disable it. In the constructor, we initialize the value of the Pusher client. We will be using this to connect to Pusher and trigger and subscribe to events:\n\n``` javascript\n    export default class HomeScreen extends Component {\n      static navigationOptions = {\n        header: null // don't display header\n      };\n    \n      constructor(props) {\n        super(props);\n        this.pusher = null;\n      }\n      \n      // next: add componentDidMount\n    }\n```\n\nOnce the component is mounted, we initialize the Pusher client using the app key and app cluster from your app settings. As for the `authEndpoint`, retain the value below for now, we will be updating it later before we run the app:\n\n``` javascript\n    componentDidMount() {\n      this.pusher = new Pusher(\"YOUR PUSHER APP KEY\", {\n        authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n        cluster: \"YOUR PUSHER APP CLUSTER\",\n        encrypted: true // false doesn't work, you need to always use https for the authEndpoint\n      });\n    }\n    \n    // next: add render method\n```\n\nNext, we render the UI for the Home screen. This contains two buttons that allow the user to navigate to either the Share screen or the View screen. In both cases, we pass in the reference to the Pusher client as a navigation param. This allows us to use Pusher on both pages:\n\n``` javascript\n    render() {\n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cText style={styles.mainText}\u003eWhat to do?\u003c/Text\u003e\n    \n          \u003cView style={styles.buttonContainer}\u003e\n            \u003cButton\n              title=\"Share\"\n              color=\"#1083bb\"\n              onPress={() =\u003e {\n                this.props.navigation.navigate(\"Share\", {\n                  pusher: this.pusher\n                });\n              }}\n            /\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.buttonContainer}\u003e\n            \u003cButton\n              title=\"View\"\n              color=\"#2f9c0a\"\n              onPress={() =\u003e {\n                this.props.navigation.navigate(\"View\", {\n                  pusher: this.pusher\n                });\n              }}\n            /\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\n### Share screen\n\nNext is the Share screen. This is where the user can take pictures with the in-app camera and share it on realtime to people who have followed their username. \n\nStart by importing all the packages we’ll need. Most of these should look familiar, except for `Clipboard`. We’ll be using it to copy the user’s username to the clipboard so they can easily share it on another app:\n\n``` javascript\n    // src/screens/ShareScreen.js\n    import React, { Component } from \"react\";\n    import {\n      View,\n      Text,\n      TouchableOpacity,\n      Clipboard,\n      Alert,\n      Image,\n      Dimensions,\n      Button,\n      ScrollView\n    } from \"react-native\";\n```\n\nNext are the Expo packages and the random animal name generator. For Expo, we need the `Camera` for rendering a bare-bones camera UI and the `Permissions` to ask the user to access the camera:\n\n``` javascript\n    import { MaterialIcons } from \"@expo/vector-icons\";\n    import { Camera, Permissions } from \"expo\";\n    import generateRandomAnimalName from \"random-animal-name-generator\"; // for generating unique usernames\n```\n\nNext, add a button in the header. This will allow the user to stop sharing their photos. When this button is clicked, all users who are currently subscribed to this user will stop receiving updates:\n\n``` javascript\n    export default class ShareScreen extends Component {\n      static navigationOptions = ({ navigation }) =\u003e {\n        const { params } = navigation.state;\n        return {\n          title: \"Share Photos\",\n          headerTransparent: true,\n          headerRight: (\n            \u003cButton\n              title=\"Finish\"\n              color=\"#333\"\n              onPress={() =\u003e params.finishSharing()}\n            /\u003e\n          ),\n          headerTintColor: \"#333\"\n        };\n      };\n      \n      // next: initialize state\n    }\n```\n\nNext, initialize the state:\n\n``` javascript\n    state = {\n      hasCameraPermission: null, // whether the user has allowed the app to access the device's camera\n      cameraType: Camera.Constants.Type.front, // which camera to use? front or back?\n      isCameraVisible: false, // whether the camera UI is currently visible or not\n      latestImage: null // the last photo taken by the user\n    };\n    \n    // next: add constructor\n```\n\nIn the constructor, we generate a unique username for the user. This is composed of the funny animal name from the `random-animal-name-generator` library and a random number. Here, we also initialize the value for the Pusher client (we’ll get it from the navigation params shortly) and the `user_channel` where we will emit the event for sharing photos. Since this screen is where the Camera UI will be rendered, we also want the user to be able to change the screen orientation. That way, they can capture both portrait and landscape photos:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      // generate unique username\n      const animalName = generateRandomAnimalName()\n        .replace(\" \", \"_\")\n        .toLowerCase();\n      const min = 10;\n      const max = 99;\n      const number = Math.floor(Math.random() * (max - min + 1)) + min;\n      const username = animalName + number;\n      this.username = username;\n      \n      // initialize pusher\n      this.pusher = null;\n      this.user_channel = null;\n      \n      // allow changing of screen orientation\n      Expo.ScreenOrientation.allow(\n        Expo.ScreenOrientation.Orientation.ALL_BUT_UPSIDE_DOWN // enable all screen orientations except upside-down/reverse portrait\n      );\n    }\n    \n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we set the `finishSharing` method as a navigation param. We’ll define this method later, but for now, know that this is used for unsubscribing the user from their own channel. We’re subscribing to that channel right below that code. This allows us to listen to or trigger messages from this channel. Lastly, we ask for permission from the user to access the camera:\n\n``` javascript\n    async componentDidMount() {\n      const { navigation } = this.props;\n    \n      navigation.setParams({\n        finishSharing: this.finishSharing\n      });\n    \n      // subscribe to channel\n      this.pusher = navigation.getParam(\"pusher\");\n      this.user_channel = this.pusher.subscribe(`private-user-${this.username}`);\n    \n      // ask user to access device camera\n      const { status } = await Permissions.askAsync(Permissions.CAMERA);\n      this.setState({ hasCameraPermission: status === \"granted\" });\n    }\n    // next: add render method\n```\n\nFor those who are working with Pusher for the first time, the way it works is that you first have to subscribe the users to a channel. Anyone who is subscribed to this channel will be able to trigger and listen for messages sent through that channel by means of “events”. Not all users who are subscribed to the channel need to know all about the events being sent through that channel, that’s why users can selectively bind to specific events only.\n\nNext, we render the contents of the Share screen. In this case, there are only two possible contents: one where only the camera UI is visible, and the other where only the box containing the username and a button (for opening the camera) is visible:\n\n``` javascript\n    render() {\n      return (\n        \u003cView style={styles.container}\u003e\n          {!this.state.isCameraVisible \u0026\u0026 (\n            \u003cScrollView contentContainerStyle={styles.scroll}\u003e\n              \u003cView style={styles.mainContent}\u003e\n                \u003cTouchableOpacity onPress={this.copyUsernameToClipboard}\u003e\n                  \u003cView style={styles.textBox}\u003e\n                    \u003cText style={styles.textBoxText}\u003e{this.username}\u003c/Text\u003e\n                  \u003c/View\u003e\n                \u003c/TouchableOpacity\u003e\n                \u003cView style={styles.buttonContainer}\u003e\n                  \u003cTouchableOpacity onPress={this.openCamera}\u003e\n                    \u003cMaterialIcons name=\"camera-alt\" size={40} color=\"#1083bb\" /\u003e\n                  \u003c/TouchableOpacity\u003e\n                \u003c/View\u003e\n    \n                {this.state.latestImage \u0026\u0026 (\n                  \u003cImage\n                    style={styles.latestImage}\n                    resizeMode={\"cover\"}\n                    source={{ uri: this.state.latestImage }}\n                  /\u003e\n                )}\n              \u003c/View\u003e\n            \u003c/ScrollView\u003e\n          )}\n    \n          {this.state.isCameraVisible \u0026\u0026 (\n            \u003cCamera\n              style={styles.camera}\n              type={this.state.cameraType}\n              ref={ref =\u003e {\n                this.camera = ref;\n              }}\n            \u003e\n              \u003cView style={styles.cameraFiller} /\u003e\n              \u003cView style={styles.cameraContent}\u003e\n                \u003cTouchableOpacity\n                  style={styles.buttonFlipCamera}\n                  onPress={this.flipCamera}\n                \u003e\n                  \u003cMaterialIcons name=\"flip\" size={25} color=\"#e8e827\" /\u003e\n                \u003c/TouchableOpacity\u003e\n    \n                \u003cTouchableOpacity\n                  style={styles.buttonCamera}\n                  onPress={this.takePicture}\n                \u003e\n                  \u003cMaterialIcons name=\"camera\" size={50} color=\"#e8e827\" /\u003e\n                \u003c/TouchableOpacity\u003e\n    \n                \u003cTouchableOpacity\n                  style={styles.buttonCloseCamera}\n                  onPress={this.closeCamera}\n                \u003e\n                  \u003cMaterialIcons name=\"close\" size={25} color=\"#e8e827\" /\u003e\n                \u003c/TouchableOpacity\u003e\n              \u003c/View\u003e\n            \u003c/Camera\u003e\n          )}\n        \u003c/View\u003e\n      );\n    }\n    \n    // next: add copyUsernameToClipboard\n```\n\nIf you’ve read the app overview earlier, you should already have a general idea on what’s going on in the code above so I’ll no longer elaborate. Take note of the `ref` prop we’ve passed to the `Camera` component though. This allows us to get a reference to that instance of the `Camera` component and assign it to a local variable called `this.camera`. We will be using it later to take a picture using that camera instance.\n\nWhen the user clicks on the box containing the user’s username, this method is called and it sets the username to the clipboard:\n\n``` javascript\n    copyUsernameToClipboard = () =\u003e {\n      Clipboard.setString(this.username);\n      Alert.alert(\"Copied!\", \"Username was copied clipboard\");\n    };\n    \n    // next: add openCamera\n```\n\nNext, are the methods for opening the camera UI, flipping it (use either back or front camera), and closing it:\n\n``` javascript\n    openCamera = () =\u003e {\n      const { hasCameraPermission } = this.state;\n      if (!hasCameraPermission) {\n        Alert.alert(\"Error\", \"No access to camera\");\n      } else {\n        this.setState({ isCameraVisible: true });\n      }\n    };\n    \n    flipCamera = () =\u003e {\n      this.setState({\n        cameraType:\n          this.state.cameraType === Camera.Constants.Type.back\n            ? Camera.Constants.Type.front\n            : Camera.Constants.Type.back\n      });\n    };\n    \n    closeCamera = () =\u003e {\n      this.setState({\n        isCameraVisible: false\n      });\n    };\n    \n    // next: add takePicture\n```\n\nNext is the method for taking pictures. This is where we use the camera reference from earlier (`this.camera`) to call the `takePictureAsync` method from the Camera API. By default, the `takePictureAsync` method only returns an object containing the `width`, `height` and `uri` of the photo that was taken. That’s why we’re passing in an object containing the options we want to use. In this case, `base64` allows us to return the base64 representation of the image. This is what we set in the request body of the request we send to the Imgur API. Once we receive a response from the Imgur API, we extract the data that we need from the response body and trigger the `client-posted-photo` event so any subscriber who is currently listening to that event will receive the image data:\n\n``` javascript\n    takePicture = async () =\u003e {\n      if (this.camera) {\n        let photo = await this.camera.takePictureAsync({ base64: true }); // take a snap, and return base64 representation\n        \n        // construct\n        let formData = new FormData();\n        formData.append(\"image\", photo.base64); \n        formData.append(\"type\", \"base64\");\n    \n        this.setState({\n          latestImage: photo.uri, // preview the photo that was taken\n          isCameraVisible: false // close the camera UI after taking the photo\n        });\n    \n        const response = await fetch(\"https://api.imgur.com/3/image\", {\n          method: \"POST\",\n          headers: {\n            Authorization: \"Client-ID YOUR_IMGUR_APP_ID\" // add your Imgur App ID here\n          },\n          body: formData\n        });\n    \n        let response_body = await response.json(); // get the response body\n        \n        // send data to all subscribers who are listening to the client-posted-photo event\n        this.user_channel.trigger(\"client-posted-photo\", {\n          id: response_body.data.id, // unique ID assigned to the image\n          url: response_body.data.link // Imgur link pointing to the actual image\n        });\n      }\n    };\n    \n    // next: add finishSharing\n```\n\nNote that the name of the event has to have `client-` as its prefix, just like what we did above. This is because we’re triggering this event from the client side. It’s a naming convention used by Pusher so your event won’t work if you don’t follow it. Check out the [docs](https://pusher.com/docs/client_api_guide/client_events#trigger-events) for more information about this.\n\nOnce the user clicks on the **Finish** button, we unsubscribe them from their own channel. This effectively cuts off all communication between this user and all their followers:\n\n``` javascript\n    finishSharing = () =\u003e {\n      this.pusher.unsubscribe(`private-user-${this.username}`);\n      this.props.navigation.goBack(); // go back to home screen\n    };\n```\n\nFor production apps, it’s a good practice to first trigger an “ending” event right before the main user (the one who mainly triggers events) unsubscribes from their own channel. This way, all the other users will get notified and they’ll be able to clean up their connection before their source gets completely shut off.\n\n\n### View screen\n\nThe View screen is where users who want to follow another user go. Again, start by importing all the packages we need:\n\n``` javascript\n    // src/screens/ViewScreen.js\n    import React, { Component } from \"react\";\n    import {\n      View,\n      Text,\n      TextInput,\n      ScrollView,\n      Dimensions,\n      Button,\n      Alert\n    } from \"react-native\";\n    \n    import CardList from \"../components/CardList\";\n```\n\nNothing really new in the code above, except for the `CardList` component. This component is already included in the starter project so we don’t have to create it separately. What it does is render all the images that were sent by the user followed by the current user.\n\nNext, import all the Redux-related packages:\n\n``` javascript\n    // src/screens/ViewScreen.js\n    import { Provider } from \"react-redux\";\n    import { createStore } from \"redux\";\n    import reducers from \"../reducers\";\n    \n    import { addedCard } from \"../actions\";\n    \n    const store = createStore(reducers);\n```\n\nNext, we also add a button in the header. This time, to unfollow the user. We’re also passing in the function used here (`params.unfollow`) as a navigation param later inside the `componentDidMount` method:\n\n``` javascript\n    export default class ViewScreen extends Component {\n    \n      static navigationOptions = ({ navigation }) =\u003e {\n        const { params } = navigation.state;\n        return {\n          title: \"View Photos\",\n          headerTransparent: true,\n          headerTintColor: \"#333\",\n          headerRight: (\n            \u003cButton\n              title=\"Unfollow\"\n              color=\"#333\"\n              onPress={() =\u003e params.unFollow()}\n            /\u003e\n          )\n        };\n      };\n      \n      // next: initialize state\n    }\n```\n\nNext, initialize the state:\n\n``` javascript\n    state = {\n      subscribedToUsername: \"\", // the username of the user the current user is subscribed to\n      isSubscribed: false // is the user currently subscribed to another user?\n    };\n```\n\nIn the constructor, we also set the default value for the Pusher client and the user channel. In this case, the user channel will be whoever the current user is subscribed to. The current user doesn’t really need to trigger any events in the user channel, so we don’t have to generate a unique username and subscribe them to their own channel as we did in the Share screen earlier:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      this.pusher = null;\n      this.user_channel = null;\n    }\n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we set the `unFollow` function as a navigation param and initialize the Pusher client:\n\n``` javascript\n    componentDidMount() {\n      const { navigation } = this.props;\n      navigation.setParams({ unFollow: this.unFollow }); // set the unFollow function as a navigation param\n    \n      this.pusher = navigation.getParam(\"pusher\");\n    }\n    \n    // next: add render\n```\n\nNext, we render the UI of the of the View screen. Here, we wrap everything in the `Provider` component provided by `react-redux`. This allows us to pass down the `store` so we could use it inside the `followUser` to dispatch the action for adding a new Card to the CardList:\n\n``` javascript\n    render() {\n      return (\n        \u003cProvider store={store}\u003e\n          \u003cView style={styles.container}\u003e\n            {!this.state.isSubscribed \u0026\u0026 (\n              \u003cView style={styles.initialContent}\u003e\n                \u003cText style={styles.mainText}\u003eUser to follow\u003c/Text\u003e\n                \u003cTextInput\n                  style={styles.textInput}\n                  onChangeText={subscribedToUsername =\u003e\n                    this.setState({ subscribedToUsername })\n                  }\n                \u003e\n                  \u003cText style={styles.textInputText}\u003e\n                    {this.state.subscribedToUsername}\n                  \u003c/Text\u003e\n                \u003c/TextInput\u003e\n    \n                \u003cView style={styles.buttonContainer}\u003e\n                  \u003cButton\n                    title=\"Follow\"\n                    color=\"#1083bb\"\n                    onPress={this.followUser}\n                  /\u003e\n                \u003c/View\u003e\n              \u003c/View\u003e\n            )}\n    \n            {this.state.isSubscribed \u0026\u0026 (\n              \u003cScrollView\u003e\n                \u003cView style={styles.mainContent}\u003e\n                  \u003cCardList /\u003e\n                \u003c/View\u003e\n              \u003c/ScrollView\u003e\n            )}\n          \u003c/View\u003e\n        \u003c/Provider\u003e\n      );\n    }\n    // next: add followUser\n```\n\nThe `followUser` method is where we add the code for subscribing to the username entered by the user in the text field. Once the subscription succeeds, only then can we listen for the `client-posted-photo` event. When we receive this event, we expect the `id` and `url` of the image to be present. We then use those to dispatch the action for adding a new Card on top of the CardList:\n\n``` javascript\n    followUser = () =\u003e {\n      this.setState({\n        isSubscribed: true\n      });\n      \n      // subscribe to the username entered in the text field\n      this.user_channel = this.pusher.subscribe(\n        `private-user-${this.state.subscribedToUsername}`\n      );\n      \n      // alert the user if there's an error in subscribing\n      this.user_channel.bind(\"pusher:subscription_error\", status =\u003e {\n        Alert.alert(\n          \"Error occured\",\n          \"Cannot connect to Pusher. Please restart the app.\"\n        );\n      });\n    \n      this.user_channel.bind(\"pusher:subscription_succeeded\", () =\u003e { // subscription successful\n        this.user_channel.bind(\"client-posted-photo\", data =\u003e { // listen for the client-posted-photo event to be triggered from the channel\n          store.dispatch(addedCard(data.id, data.url)); // dispatch the action for adding a new card to the list\n        });\n      });\n    };\n    \n    // next: add unFollow\n```\n\nLastly, add the `unFollow` method. This gets called when the user clicks on the **Unfollow** button in the header. This allows us to unsubscribe from the user we subscribed to earlier inside the `followUser` method:\n\n``` javascript\n    unFollow = () =\u003e {\n      this.pusher.unsubscribe(`private-user-${this.state.subscribedToUsername}`);\n      this.props.navigation.goBack(); // go back to the home page\n    };\n```\n\nUnsubscribing from a channel automatically unbinds the user from all the events they’ve previously bound to. This means they’ll no longer receive any new photos.\n\n### Adding the action and reducer\n\nEarlier in the `followUser` method of the `src/screens/ViewScreen.js` file, we dispatched the `addedCard` action. We haven’t really defined it yet so let’s go ahead and do so. Create an `actions` and `reducers` folder inside the `src` directory to house the files we’re going to create.\n\nTo have a single place where we define all the action types in this app, create a `src/actions/types.js` file and add the following:\n\n``` javascript\n    export const ADDED_CARD = \"added_card\";\n```\n\nIn the code above, all we do is export a constant which describes the action type. Nothing really mind-blowing, but this allows us to import and use this constant every time we need to use this specific action. This prevents us from making any typo when using this action.\n\nNext, create a `src/actions/index.js` file, this is where we define and export the action. We pass in the `ADDED_CARD` constant as a type along with the `id` and `url`. These are the unique ID and URL of the image which is received by the reducer everytime this action is dispatched:\n\n``` javascript\n    // src/actions/index.js\n    import { ADDED_CARD } from \"./types\";\n    \n    export const addedCard = (id, url) =\u003e {\n      return {\n        type: ADDED_CARD,\n        id: id,\n        url: url\n      };\n    };\n```\n\nNext, create a `src/``reducers/CardsReducer.js` file, this is where we add the reducer responsible for modifying the value of the `cards` array in the state. This gets executed every time we dispatch the `addedCard` action. When that happens, we simply return a new array containing the existing card objects and the new card object:\n\n``` javascript\n    // src/reducers/CardsReducer.js\n    import { ADDED_CARD } from \"../actions/types\";\n    \n    const INITIAL_STATE = {\n      cards: []\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      switch (action.type) {\n        case ADDED_CARD:\n          const cards = [...state.cards, { id: action.id, url: action.url }]; // return a new array containing the existing card objects and the new card object\n          return { ...state, cards };\n    \n        default:\n          return state;\n      }\n    };\n```\n\nNote that we’re adding it to the end of the new array instead of in the beginning. This is because the `FlatList` component which is responsible for rendering this data is `inverted`. This means that the items are rendered from bottom to top.\n\nLastly, combine all the reducers in a single file:\n\n``` javascript\n    // src/reducers/index.js\n    import { combineReducers } from \"redux\";\n    import CardsReducer from \"./CardsReducer\";\n    \n    export default combineReducers({\n      cards: CardsReducer\n    });\n```\n\nThe code above enabled us to import only a single file to include the reducers and use it for creating the store. Don't add this, as it was already added earlier:\n\n``` javascript\n    // src/screens/ViewScreen.js (don't add as it was already added earlier)\n    import reducers from \"../reducers\"; \n    const store = createStore(reducers);\n```\n\n### Update the CardList component\n\nIf you saw the `CardList` component from the codes of the View screen earlier, you might have noticed that we haven’t really passed any props to it. So how will it have any data to render?\n\n``` javascript\n    // src/screens/ViewScreen.js\n    {this.state.isSubscribed \u0026\u0026 (\n      \u003cScrollView\u003e\n        \u003cView style={styles.mainContent}\u003e\n          \u003cCardList /\u003e\n        \u003c/View\u003e\n      \u003c/ScrollView\u003e\n    )}\n```\n\nThe answer is it doesn’t. Currently, the `CardList` component doesn’t really have the ability to render cards, so we have to update it. Start by importing the `connect` method from the `react-redux` library. This will allow us to create a “connected” component:\n\n``` javascript\n    // src/components/CardList.js\n    import { connect } from \"react-redux\";\n```\n\nAfter the `CardList` prop types, add a `mapStateToProps` method. This allows us to map out any value in the store as a prop for this component. In this case, we only want the `cards` array:\n\n``` javascript\n    CardList.propTypes = {\n      // previous CardList propTypes code here...\n    };\n    \n    // add this:\n    const mapStateToProps = ({ cards }) =\u003e { // extract the cards array from the store\n      return cards; // make it available as props\n    };\n    \n    // replace export default CardList with this:\n    export default connect(mapStateToProps)(CardList);\n```\n\nNow, every time the `addedCard` action is dispatch, the value of `this.props.cards` inside this component will always be in sync with the value of the `cards` array in the store.\n\n\n## Creating the server\n\nThe server is mainly used for authenticating a user who tries to connect to Pusher. If you open the file for the Home screen, we’ve added this code earlier:\n\n``` javascript\n    // src/screens/HomeScreen.js\n    componentDidMount() {\n      this.pusher = new Pusher(\"YOUR PUSHER APP KEY\", {\n        authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n        cluster: \"YOUR PUSHER APP CLUSTER\",\n        encrypted: true\n      });\n    }\n```\n\nThis is where we establish the connection to Pusher’s servers. The `authEndpoint` is responsible for authenticating the user to verify that they’re really a user of your app. So the app hits the server every time the code above is executed.\n\nNow that you know what the server is used for, we’re ready to add its code. Start by navigating inside the `server` directory and install all the packages:\n\n```\n    cd server\n    npm install\n```\n\nImport all the libraries we need and intialize them. This includes Express and a couple of middlewares (JSON and URL encoded body parser), and `dotenv` which allows us to load values from the `.env` file:\n\n``` javascript\n    var express = require(\"express\");\n    var bodyParser = require(\"body-parser\");\n    var Pusher = require(\"pusher\");\n    \n    var app = express(); // Express server\n    app.use(bodyParser.json()); // for parsing the request body into JSON object\n    app.use(bodyParser.urlencoded({ extended: false })); // for parsing URL encoded request body\n    \n    require(\"dotenv\").config(); // initialize dotenv\n```\n\nNext, initialize the Pusher server component using the values from the `.env` file inside your `server` directory:\n\n``` javascript\n    var pusher = new Pusher({\n      // connect to pusher\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret: process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER\n    });\n```\n\nNext, add the route for testing if the server is working correctly:\n\n``` javascript\n    app.get(\"/\", function(req, res) {\n      res.send(\"all green...\");\n    });\n```\n\nNext, add the route for authenticating user requests:\n\n``` javascript\n    app.post(\"/pusher/auth\", function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n```\n\nNote that in the code above, we haven’t really added any form of authentication. All we’re really doing is authenticating the user as they hit this route. This is not what you want to do for production apps. For production apps, you will most likely have some sort of user authentication before a user can use your app. That’s what you need to integrate into this code so you can ensure that the users who are making requests to your Pusher app are real users of your app.\n\nNext, make the server listen to the port indicated in the `.env` file:\n\n``` javascript\n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\nLastly, update the `.env` file and update it with your Pusher app details:\n\n``` javascript\n    APP_ID=YOUR_PUSHER_APP_ID\n    APP_KEY=YOUR_PUSHER_APP_KEY\n    APP_SECRET=YOUR_PUSHER_APP_SECRET\n    APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n    PORT=3000\n```\n\n## Running the app\n\nTo run the app, you need to create an account on [ngrok.com](https://ngrok.com/). Once you have an account, go to your [account dashboard](https://dashboard.ngrok.com/get-started) and download the ngrok binary for your operating system. Extract the zip file and you’ll see an `ngrok` file. Execute that file from the terminal (Note: you’ll probably need to add [execution permissions](https://askubuntu.com/questions/484718/how-to-make-a-file-executable) to it if you’re on Linux) to add your auth token:\n\n```\n    ./ngrok authToken YOUR_NGROK_AUTH_TOKEN\n```\n\nOnce that’s done, run the server and expose port 3000 using ngrok:\n\n```\n    node server.js\n    ./ngrok http 3000\n```\n\nNgrok will provide you with an https URL. Use that as the value for the `authEndpoint` in the `src/screens/HomeScreen.js` file:\n\n``` javascript\n    componentDidMount() {\n      this.pusher = new Pusher(\"YOUR PUSHER APP KEY\", {\n        authEndpoint: \"YOUR_NGROK_HTTPS_URL/pusher/auth\",\n      });\n    }\n```\n\nLastly, navigate inside the root directory of the app and start it:\n\n```\n    expo start\n```\n\nYou can test the app on your machine using the emulator if you have a powerful machine. Personally, I tested it on my iOS and Android device so you might have better luck when running it on your device also.\n\n\n## Conclusion\n\nThat’s it! In this tutorial, you learned how to create a realtime photo-sharing app with React Native and Pusher. Along the way, you learned how to use Expo’s Camera API, Imgur API to anonymously upload images, and Pusher to send and receive data in realtime.\n\nYou can find the app’s source code in this [GitHub repo](https://github.com/anchetaWern/RNPhotoShare).","metaTitle":"Creating a photo sharing app with React Native","metaDescription":"Create a live photo sharing app using Node.js, React Native and Imgur. Users will be able to follow their friends and broadcast their own photos to their followers."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"34MPoF7iFaQ4QOaqIqeAGK","type":"Entry","createdAt":"2018-11-08T11:08:00.172Z","updatedAt":"2018-11-08T11:08:00.172Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"React Native development tools - Part 2: Debugging tools","url":"react-native-development-tools-part-2-debugging-tools","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-11-08","description":"This is part two of a three part tutorial series examining development tools for React Native. In this part, learn to debug React Native apps using Reactotron and React Native Debugger.","prerequisite":"In order to follow this tutorial, you need to have a good grasp of the basic React and React Native concepts. Knowledge of Redux and Redux Saga will be helpful but not required. Those two libraries are used in the sample app that we’re going to debug.\n","content":"In this tutorial, we will cover a couple of debugging tools which will help you uncover why your React Native app isn’t working as expected. Specifically, you’ll learn how to use the following tools:\n\n\n- Reactotron\n- React Native Debugger\n\n\n\u003e This is the second of a three-part series on React Native development tools where we cover the following tools:\n\n\n- \u003ca href=\"http://blog.pusher.com/react-native-linting/\" rel=\"noopener\" target=\"_blank\"\u003ePart 1: Linting tools\u003c/a\u003e\n- Part 2: Debugging tools\n- Part 3: Testing tools\n\n\nThose two tools should cover most of the ground when debugging React Native apps. There are other tools which you can use, but we won’t cover them here today. We also won’t be covering tools for debugging the app performance, and the native side of things (for example: how to find the issue with a specific native module you’ve installed).\n\n\n## Prerequisites\n\nIn order to follow this tutorial, you need to have a good grasp of the basic React and React Native concepts. Knowledge of Redux and Redux Saga will be helpful but not required. Those two libraries are used in the sample app that we’re going to debug.\n\n\n## The debug app\n\nTo make the tutorial more hands-on, I’ve created an app which we will be debugging. By default, it’s not runnable. There are multiple issues that I intentionally placed in there so we can debug it.\n\nNote that running the debug app isn’t required. If you only want to check out the tools and what they offer, feel free to skip this part.\n\nHere’s what the app looks like once all the issues are fixed:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/react-native-debug-demo.gif\" alt=\"react-native-debug-demo\" width=\"322\" height=\"568\" class=\"alignnone size-full wp-image-4888\" /\u003e\n\nIt’s a Pokedex app which shows a random Pokemon everytime you click on it. It uses Redux for state management, and Redux Saga to handle the side effects or potential failures that might be caused by the HTTP requests that it’s going to perform.\n\nHere are the commands that you can use to run a copy of the debug app:\n\n```\n    git clone https://github.com/anchetaWern/RNDebugging.git\n    cd RNDebugging\n    git checkout broken \n    react-native upgrade\n    react-native run-android # or react-native run-ios\n```\n\nIn the above command, we’re switching to the `broken` branch which contains the source code which has problems. The `master` branch contains the working copy of the app.\n\n\n## Setting up Reactotron\n\nThe first tool that we’re going to setup is [Reactotron](https://infinite.red/reactotron), from the awesome guys at [Infinite Red](https://infinite.red/). Their tool allows developers to inspect React and React Native projects. Best of all, it’s available on all major platforms (Windows, Mac OS, Linux) in an easily installable file. Reactotron is created using [Electron](https://electronjs.org/), that’s why it’s multi-platform.\n\nI’m not going to go over Reactotron’s features and what makes it great (there’s the [official website](https://infinite.red/reactotron) for that). So we’re going to go right into it instead.\n\nAt the time of writing this tutorial, the stable version is [v1.15.0](https://github.com/infinitered/reactotron/releases/tag/v1.15.0). You can try installing the pre-released versions from [here](https://github.com/infinitered/reactotron/releases) but I can’t ensure that it will work flawlessly. So in this tutorial, we’re going to stick with the latest stable version instead.\n\nThe first step is to go [here](https://github.com/infinitered/reactotron/releases/tag/v1.15.0) and download the zip file for your operating system. After that, extract it and run the executable file.\n\nIf you’re on Mac, I recommend using [brew](https://brew.sh/) instead. I assume you already have brew on your system so I won’t go over that:\n\n```\n    brew update \u0026\u0026 brew cask install reactotron\n```\n\nThere’s also the CLI version which can be installed via npm. But in this tutorial, we’re going to stick with the desktop app instead.\n\nMore information on installing Reactotron can be found [here](https://github.com/infinitered/reactotron/blob/master/docs/installing.md).\n\n\n## Setting up React Native Debugger\n\nReact Native Debugger is like the built-in React Native Debugger, but on steroids. Every feature you wished were available on React Native’s built-in debugger is available on this tool, plus more.\n\nUnlike Reactotron, React Native Debugger hasn’t reached version one yet (but it’s pretty stable) so you can download the latest release from the [releases page](https://github.com/jhen0409/react-native-debugger/releases). At the time of writing of this tutorial, it’s at version [0.7.18](https://github.com/jhen0409/react-native-debugger/releases/tag/v0.7.18).\n\nJust like Reactotron, it’s created using Electron so you can download the specific zip file for your operating system. After that, you can extract it and run the executable.\n\nIf you’re on Mac, you can install it with the following command:\n\n```\n    brew update \u0026\u0026 brew cask install react-native-debugger\n```\n\n## Adding the monitoring code\n\nThe tools you’ve just set up won’t work with the app automatically. So that we can hook up the tools to the app, we need to perform a few additional steps first.\n\nThe first step is to install the following packages in the project:\n\n```\n    npm install --save-dev reactotron-react-native reactotron-redux reactotron-redux-saga\n```\n\nThose are the dev dependencies for Reactotron. While for React Native Debugger, we have the following:\n\n```\n    npm install --save-dev redux-devtools-extension\n```\n\nNext, open the `App.js` in the project directory and add the following right after the `React` import:\n\n``` language-javascript\n    import React, { Component } from \"react\";\n    \n    /* previous imports here.. */\n    \n    // add these:\n    import Reactotron from \"reactotron-react-native\";\n    import { reactotronRedux } from \"reactotron-redux\";\n    import sagaPlugin from \"reactotron-redux-saga\";\n    import { composeWithDevTools } from \"redux-devtools-extension\";\n    \n    Reactotron.configure()\n      .useReactNative()\n      .use(reactotronRedux())\n      .use(sagaPlugin())\n      .connect();\n    \n    const sagaMonitor = Reactotron.createSagaMonitor();\n    \n    // update these:  \n    const sagaMiddleware = createSagaMiddleware({ sagaMonitor }); // add sagaMonitor as argument\n    const store = Reactotron.createStore(\n      reducer,\n      {},\n      composeWithDevTools(applyMiddleware(sagaMiddleware))\n    );\n```\n\nBreaking down the code above, first, we include the `Reactotron` module. This contains the methods for initializing the app so it can hook up with Reactotron:\n\n``` language-javascript\n    import Reactotron from \"reactotron-react-native\";\n```\n\nNext, import `reactotron-redux`. This is the Reactotron plugin which will allow us to monitor the state and the actions being dispatched:\n\n``` language-javascript\n    import { reactotronRedux } from \"reactotron-redux\";\n```\n\nAnother plugin we need to install is the `reactotron-redux-saga`. This allows us to see the sagas and the effects that are triggered by the app:\n\n``` language-javascript\n    import sagaPlugin from \"reactotron-redux-saga\";\n```\n\nFor the React Native Debugger, we only need to import the module below. This is the redux-devtools version of Redux’s `compose` method. This allows us to inject the method for monitoring the Redux’s global app state. That way, we can do time-travel debugging, inspect the state, and dispatch action from React Native Debugger:\n\n``` language-javascript\n    import { composeWithDevTools } from \"redux-devtools-extension\";\n```\n\nNext, hook up the app to Reactotron:\n\n``` language-javascript\n    Reactotron.configure()\n      .useReactNative() // set the environment\n      .use(reactotronRedux()) // use the redux plugin\n      .use(sagaPlugin()) // use the redux-saga plugin\n      .connect(); // connect to a running Reactotron instance\n```\n\nNext, set the `sagaMonitor` as an argument to the `sagaMiddleWare`. This allows us to monitor the sagas from the app:\n\n``` language-javascript\n    const sagaMonitor = Reactotron.createSagaMonitor();\n    const sagaMiddleware = createSagaMiddleware({ sagaMonitor });\n```\n\nLastly, instead of using the `createStore` method from `redux`, we use the one from `Reactotron`. Here, we’re also using the `composeWithDevTools` method to inject the redux-devtools functions:\n\n``` language-javascript\n    const store = Reactotron.createStore(\n      reducer,\n      {},\n      composeWithDevTools(applyMiddleware(sagaMiddleware))\n    );\n```\n\nYou can check this [diff](https://github.com/anchetaWern/RNDebugging/commit/2e0c85bf3aa5efdc84e1f52b87bf510bfaf26638) to make sure you’ve made the correct changes.\n\n\n## Debugging the app\n\nNow we’re ready to start debugging the app. The first time you run the app, it will look like this:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/react-native-debug-blank.png\" alt=\"react-native-debug-blank\" width=\"367\" height=\"625\" class=\"aligncenter size-large wp-image-4884\" /\u003e\n\nAs you’ve seen from the demo earlier, we expect a Pokeball image to be rendered on the screen. That way, we can click it and load new Pokemon. But in this case, there are none. \n\nThroughout the tutorial, you might already have your ideas as to why something isn’t working. And you’re welcome to debug it without using any tools. But in this tutorial, we’re going to maximize the use of the debugging tools I introduced earlier to find out what the problem is.\n\nThe first problem is that the image isn’t being rendered. We can verify if this is really the case by using React Native Debugger. Launch it if it isn’t already. Then from your app, pull up the developer menu, and enable Remote JS Debugging. By default, this should pick up a running instance of the Chrome browser. But if you’ve launched React Native Debugger, it should pick that up instead. \n\nIf you have any running debugger instance on Chrome, close it first, disable remote JS debugging on your app, then enable it again.\n\nOnce the debugger picks up your app, it should look like this:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/react-native-debug-debugger-841x600.png\" alt=\"react-native-debug-debugger\" width=\"770\" height=\"549\" class=\"aligncenter size-large wp-image-4887\" /\u003e\n\nEverything above should look familiar because it has the same interface as the Chrome Developer Tools. Few tabs are missing, including the Elements, Timeline, Profiles, Security, and Audits. But there’s an additional UI such as the Redux devtools (upper left) and the component inspector (lower left).\n\nWhat we’re interested in is the component inspector as this allows us to see which specific components are being rendered by the app. We can either sift through the render tree or search for a specific component:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/react-native-debug-component-inspector.gif\" alt=\"react-native-debug-component-inspector\" width=\"660\" height=\"330\" class=\"alignnone size-full wp-image-4886\" /\u003e\n\nAs you can see from the demo above, we’ve searched for an `Image` component but no results were returned. This verifies our assumption that the image is not really being rendered. From here, we can search for the component that we’re sure is rendering and then view the source:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/react-native-debug-view-source.gif\" alt=\"react-native-debug-view-source\" width=\"684\" height=\"338\" class=\"alignnone size-full wp-image-4883\" /\u003e\n\nThe tool allows us to view the source file from which a specific component is being rendered. This is a very useful feature to have, especially if your project has a ton of files. You should avoid viewing the source for the `RCTView` while debugging though, those are React specific views, and they won’t really help you debug your issue.\n\nUpon inspecting the source code, we see that the image is depending on the `fetching` prop to be `true` before it renders. The `fetching`  prop is only set to `true` when the app is currently fetching Pokemon data from [Pokeapi](https://pokeapi.co/). Removing that condition should fix the issue:\n\n``` language-javascript\n    // src/components/PokemonLoader.js\n    {!pokemon \u0026\u0026 (\n        \u003cImage\n          source={pokeball}\n          resizeMode={\"contain\"}\n          style={styles.pokeBall}\n        /\u003e\n    )}\n```\n\nOnce you’ve updated the file, the Pokeball should now show up on the screen:\n\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/react-native-debug-large-image.png\" alt=\"react-native-debug-large-image\" width=\"318\" height=\"566\" class=\"aligncenter size-full wp-image-4890\" /\u003e\n\nBut wait . . . it looks to be bigger than how it appeared on the very first demo earlier.\n\nIn cases where you want to quickly update the styles without updating the actual source code, you can edit the styles straight from the tool itself:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/react-native-debug-edit-style.gif\" alt=\"react-native-debug-edit-style\" width=\"498\" height=\"346\" class=\"alignnone size-full wp-image-4889\" /\u003e\n\nThis will reflect the changes in the app as you make them. Note that this won’t automatically save to the source code so you still have to copy the updated styles afterward.\n\nNow that the image is in its proper width and height. You can now click it to load a Pokemon..\n\nBut this time a new error pops up:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/react-native-debug-undefined.png\" alt=\"react-native-debug-undefined\" width=\"319\" height=\"570\" class=\"aligncenter size-full wp-image-4882\" /\u003e\n\nBy the looks of it, it seems like the data that the `Card` component is expecting isn’t there.\n\nSo our first move would be to check if the request is successfully being made. You can do that by right-clicking anywhere inside the left pane (where the redux-devtools and the component inspector is) and select **Enable Network Inspect**. By default, the network inspector is in the right pane (next to the **Sources** tab), but it won’t actually monitor any network request unless you tell it so.\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/react-native-debug-network-inspector.png\" alt=\"react-native-debug-network-inspector\" width=\"696\" height=\"505\" class=\"aligncenter size-full wp-image-4892\" /\u003e\n\nAs you can see from the screenshot above, the request to Pokeapi was successfully made. This means the problem is not in the network.\n\nThe next step is to verify if the data we’re expecting is actually being set in the state. We can check it from the Log monitor:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/react-native-debug-log-monitor.png\" alt=\"react-native-debug-log-monitor\" width=\"715\" height=\"485\" class=\"aligncenter size-full wp-image-4891\" /\u003e\n\nLooking at the above screenshot, it looks like the action is being invoked and the state is also updated. At this point, we already know that the cause of the error is that an incorrect data is set in the state. That’s why we got the `undefined` error earlier.\n\nAt this point, you can dig through the code and find out what the issue is. But first, let’s see what sort of information Reactotron can offer us. Go ahead and launch Reactotron if you haven’t done so already. \n\nBy default, this is what Reactotron looks like. Most of the time, you’ll only stay on the **Timeline** tab. This will display the state changes, actions, sagas, and logs that you have triggered from the app. So you have to use the app so things will be logged in here:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/react-native-debug-reactron-timeline-628x600.png\" alt=\"react-native-debug-reactron-timeline\" width=\"628\" height=\"600\" class=\"aligncenter size-large wp-image-4894\" /\u003e\n\nGo ahead and reload the app, and then click on the Pokeball to initiate the request to the API. That will give you the following results:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/react-native-debug-card-error-353x300.png\" alt=\"react-native-debug-card-error\" width=\"353\" height=\"300\" class=\"aligncenter size-medium wp-image-4885\" /\u003e\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/react-native-debug-render-error-383x300.png\" alt=\"react-native-debug-render-error\" width=\"383\" height=\"300\" class=\"aligncenter size-medium wp-image-4881\" /\u003e\n\nFrom the screenshots above, you can see that Reactotron presents the error in a really nice way. Complete with line numbers where the exact error occurred. So now we have a much better idea of where the error occurred. This confirms our assumption from earlier that incorrect data is being set in the state. Now we know that the error occurred in the `src/components/Card.js` file. This same error can be found on the error message displayed by the app. But I guess we can all agree that the one displayed by Reactotron is 50 times nicer and easier to read.\n\nUpon further inspection of the things logged by Reactotron, we can see the actual contents of the API request (indicated by `0` and `1` in the `out` object under `CALL`). The app makes two HTTP requests to get all the details it needs: one for the general Pokemon data (name, types, sprite), and another for the description or flavor text.\n\nBelow that is `PUT`. That displays the actual data that’s being sent to the reducer after the network request is made. Note that the value for `out` is empty because the data isn’t actually being used in any of the components:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/07/react-native-debug-reactotron-inspect-609x300.png\" alt=\"react-native-debug-reactotron-inspect\" width=\"609\" height=\"300\" class=\"aligncenter size-medium wp-image-4893\" /\u003e\n\nThe above data is consistent with the one we found earlier in the React Native Debugger. But now we can clearly see that a `pokemon` object is actually being sent to the reducer, along with the `type` of action (`API_CALL_SUCCESS`). That means the error must be in how the reducer makes the data available to the global app state.\n\nIf you look at the `mapStateToProps`  function in `src/components/PokemonLoader.js`, you can see that it’s expecting `pokemon` to be available in the state:\n\n``` language-javascript\n    const mapStateToProps = state =\u003e {\n      return {\n        fetching: state.fetching,\n        pokemon: state.pokemon,\n        error: state.error\n      };\n    };\n```\n\nAnd if you open `src/sagas/index.js`, you’ll see how the Pokemon data is being sent to the reducer:\n\n``` language-javascript\n    function* workerSaga() {\n      try {\n        let pokemonID = getRandomInt(MAX_POKEMON);\n    \n        const response = yield call(getPokemon, pokemonID);\n    \n        const pokemonData = response[0].data;\n        const speciesData = response[1].data;\n    \n        const englishText = speciesData.flavor_text_entries.find(item =\u003e {\n          return item.language.name == ENGLISH_LANGUAGE;\n        });\n    \n        const pokemon = {\n          name: pokemonData.name,\n          image: pokemonData.sprites.front_default,\n          types: pokemonData.types,\n          description: englishText.flavor_text\n        };\n    \n        yield put({ type: \"API_CALL_SUCCESS\", pokemon });\n      } catch (error) {\n        yield put({ type: \"API_CALL_FAILURE\", error });\n      }\n    }\n```\n\nFrom the code above, you can see that the worker saga is expecting the actual Pokemon data instead of one that’s wrapped around a `pokemon` object.\n\nThis means that our assumption is correct. The problem is in the reducer. The one that’s actually making the data submitted from worker saga available to the global app state:\n\n``` language-javascript\n    // src/redux/index.js\n    export function reducer(state = initialState, action) {\n      switch (action.type) {\n        case API_CALL_REQUEST:\n          return { ...state, fetching: true, error: null };\n        case API_CALL_SUCCESS:\n          return { ...state, fetching: false, pokemon: action }; \n        case API_CALL_FAILURE:\n          return { ...state, fetching: false, pokemon: null, error: action.error };\n        default:\n          return state;\n      }\n    }\n```\n\nSee the problem? The problem is that we’re not extracting `pokemon` from the `action` like so:\n\n``` language-javascript\n    case API_CALL_SUCCESS:\n          return { ...state, fetching: false, pokemon: action.pokemon }; \n```\n\nRemember that the action is being dispatched from the worker saga earlier. So `action.type` is `API_CALL_SUCCESS`. While `action.pokemon` contains the Pokemon data:\n\n``` language-javascript\n    // src/sagas/index.js\n    yield put({ type: \"API_CALL_SUCCESS\", pokemon });\n```\n\nIt is then made available to the `PokemonLoader` as props via `mapStateToProps`:\n\n``` language-javascript\n    // src/components/PokemonLoader.js\n    const mapStateToProps = state =\u003e {\n      return {\n        fetching: state.fetching,\n        pokemon: state.pokemon,\n        error: state.error\n      };\n    };\n```\n\nWe then make use of it inside the component’s `render` method:\n\n``` language-javascript\n    // src/components/PokemonLoader.js\n    class PokemonLoader extends Component {\n      render() {\n        const { fetching, pokemon, requestPokemon, error } = this.props;\n        /* the rest of the existing code inside render method here... */\n      }\n    }\n```\n\nOnce you’ve made the changes, the app should work as expected.\n\n\n## Conclusion\n\nThat’s it! In this tutorial, you’ve learned how to debug your React Native app using Reactotron and React Native Debugger. Specifically, you’ve learned how to inspect components (and their data), monitor network requests, state, actions, and sagas. \n\nThere are a lot more features that we haven’t taken a look at. Things like time-travel debugging, dispatching of actions, breakpoints, logging custom messages, and many more. I’ll be leaving those for you to explore.\n\nStay tuned for part three where you’ll learn about testing tools.\n\n","metaTitle":"React Native development tools - Part 2: Debugging tools","metaDescription":"This is part two of a three part tutorial series examining development tools for React Native. In this part, learn to debug React Native apps using Reactotron and React Native Debugger."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"nTlT0mOAHQgE8kEeWeKSO","type":"Entry","createdAt":"2018-11-07T09:55:36.967Z","updatedAt":"2020-06-19T12:54:00.033Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"React Native development tools - Part 1: Linting tools","url":"react-native-development-tools-part-1-linting","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-11-07","description":"This is part one of a three part tutorial series examining development tools for React Native. In this part, learn how to configure Sublime Text Editor with linters, a prettifier and other dev tools.","prerequisite":"To effectively follow this tutorial, you need to have basic knowledge of:\n\n- JavaScript\n- React\n- React Native\n- Node, npm or Yarn (We will be using Yarn in this tutorial)\n- Supported text editors: Sublime Text 3, Atom, Visual Studio Code, Vim","content":"In this tutorial series, we’re going to take a look at the following tools to improve your code and development workflow when working with React Native:\n\n- Part 1: Linting tools\n- Part 2: Debugging tools\n- Part 3: Component testing tools\n\nIn this part of the series, we’re going to cover the following areas:\n\n- Linting tools\n- Plugins for improving coding workflow\n\n\nAs developers, the tools that we use are very important. We use them every day to help us develop the app that we’re creating. That’s why it’s important to leverage the use of these tools so that we can be more productive and effective as developers.\n\n## Prerequisites\n\nTo effectively follow this tutorial, you need to have basic knowledge of:\n\n- JavaScript\n- React\n- React Native\n\nYou should also have set up your machine for React Native development. That includes Node, npm or Yarn. We’ll be specifically using [Yarn](https://yarnpkg.com/) to install packages in this article, so I recommend you to install it.\n\nI’ll be using Sublime Text 3 for the examples, so I’m assuming that you know your way around the text-editor you’re using. That way, you can apply the techniques in this tutorial to the text editor of choice. I’ve done a bit of research and found out that the following text editors are supported:\n\n\n- Atom\n- Microsoft Visual Studio Code\n- Vim\n\nNear the end of the article, I’ll be pointing out some links to help you get set up with the text editors above.\n\n\n## Linting tools\n\nLinting allows you to check your code for potential errors. This process helps you improve the quality of your code, and helps enforce coding standards especially when you’re working in a team.\n\nIn order to see the linting tool in action, we’re going to create a new React Native project:\n\n```\n    react-native init Teslint\n```\n\nOnce the project is created, navigate inside the `Testlint` folder and install the following packages:\n\n```\n    yarn add eslint babel-eslint eslint-config-airbnb eslint-plugin-react eslint-plugin-import eslint-plugin-jsx-a11y --dev\n```\n\n*Note: if you don’t have Yarn installed, you can always use npm to install the packages above.*\n\nHere’s what each package does:\n\n\n- [**eslint**](https://github.com/eslint/eslint) - the linter to use.\n- [**babel-eslint**](https://github.com/babel/babel-eslint) - for linting babel code with ESLint. React Native uses the JSX syntax, which isn’t considered valid syntax by just plain ESLint. \n- [**eslint-config-airbnb**](https://github.com/airbnb/javascript) - allows you to use Airbnb’s JavaScript style guide’s ESLint configuration file. The default configuration has rules for React, plugin imports, and accessibility so the following need to be installed as well:\n  - [**eslint-plugin-react**](https://www.npmjs.com/package/eslint-plugin-react) - for adding React specific rules and parser options.\n  - [**eslint-plugin-import**](https://www.npmjs.com/package/eslint-plugin-import) - adds rules for imported modules. We’ll be primarily using it to ensure that the modules we import actually exists.\n  - [**eslint-plugin-jsx-a11y**](https://github.com/evcohen/eslint-plugin-jsx-a11y) - adds rules for checking JSX elements for accessibility. We won’t really need to use this since the accessibility props used in React Native doesn’t have the same syntax as in the web. We only need to install it because the rest of `eslint-config-airbnb` wouldn’t work without it.\n\nOnce the above packages are installed, you can now install the SublimeLinter and SublimeLinter-eslint package for Sublime Text. If you haven’t installed [Package Control for Sublime Text](https://packagecontrol.io/installation) yet, now is a good time to do so.\n\nYou can install the packages by pressing `Ctrl + Shift + P` or `⌘ + Shift + P` on your keyboard, select **Install Package**, and search for “Sublime Linter”. This should show both packages in the search results. After that, press **Enter** to install each plugin.\n\nNext, open the React Native project you created earlier on the text editor. Then open the Sublime Linter settings by going to **Preferences** → **Package Settings** → **SublimeLinter** → **Settings**:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/react-native-lint-sublime-linter-782x600.png\" alt=\"Sublime Linter Settings\" width=\"770\" height=\"591\" class=\"aligncenter size-large wp-image-4744\" /\u003e\n\nThat will open the default settings as well as the user settings. Edit the user settings and put the following:\n\n```\n    // SublimeLinter Settings - User\n    {\n      \"debug\": true,\n      \"lint_mode\": \"load_save\",\n    }\n```\n\nThe `debug` option allows you to see debug messages in the console. `lint_mode` allows you to specify which instances will trigger the linting. In this case, I’ve set `load_save` so that the file is checked the moment it is loaded and also when it’s saved.\n\nYou can also check other options in the default settings and customize them on your user settings.\n\nNext, create an `.eslintrc` file on the root of the project directory and paste the following options:\n\n``` \n    {\n      \"extends\": \"airbnb\", // extend airbnb's JavaScript style guide: https://github.com/airbnb/javascript\n      \"parser\": \"babel-eslint\", // allows us to parse the code with babel so that jsx code won't be considered an error\n      \"parserOptions\": {\n        \"ecmaFeatures\": { // specify which additional language features to use\n          \"jsx\": true\n        },\n      },\n      rules: {\n        'global-require': 'off', // React Native images uses the require syntax so we're turning it off so that we don't get any errors\n        'react/jsx-filename-extension': ['error', { extensions: ['.js', '.jsx'] }], // only return an error if JSX syntax is used on files other than those with .js or .jsx file extension\n      },\n    }\n```\n\nNote that we’re extending Airbnb’s ESLint rules. This means we can always override the rules they specified by specifying it again under the `rules` object. For example, if we don’t want to require semicolons:\n\n```\n    rules: {\n      'semi': 0\n    }\n```\n\nOnce the `.eslintrc` file is saved, you can now open one of the project files. Let’s start with the `App.js` file:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/react-native-lint-eslint-test-675x600.png\" alt=\"Test ESLint\" width=\"675\" height=\"600\" class=\"aligncenter size-large wp-image-4739\" /\u003e\n\nIf your text editor shows something similar to the one above, then the linter is working. If not, then it’s either you haven’t installed all the required packages or there’s an issue with your `.eslintrc` file. Note that you might have a different color beside each line number. For me, it’s white, it might be red for you. You should be fine as long as it shows the correct error message when you hover.\n\nYou can find out what the issue is by opening the console on your text editor. In Sublime Text, that can be done by pressing `Ctrl + backtick` on your keyboard. The console should give you an idea of what’s wrong. Just make a change to the code (for example, removing a semicolon) and save the file to trigger linting.\n\nIf you’re having problems getting it to work, check out the troubleshooting section near the end of this article.\n\n\n### Solving the issues\nOnce you get the linter to work, you’ll find that the `App.js` file has the following issues:\n\n\n- Missing trailing comma (`comma-dangle`)\n- ‘styles’ was used before it was defined (`no-use-before-define`)\n\n#### Missing trailing comma\n\nThis error is triggered by [Airbnb’s coding style rule](https://github.com/airbnb/javascript#commas--dangling) that the last item on an object or array should always have a trailing comma. \n\nThis can be solved by adding a comma after `View`:\n\n``` language-javascript\n    import {\n      Platform,\n      Text,\n      View, // add comma here\n    } from 'react-native';\n```\n\n#### Styles was used before it was defined\n\n`no-use-before-define` is a [default rule](https://eslint.org/docs/rules/no-use-before-define) implemented by ESLint. This rule prevents you from using variables that haven’t previously been defined yet. \n\nIn React Native, it’s a convention that the styles are declared after rendering the component. Though this is only true if you’re adding the styles in the same file as your component declaration.\n\nYou can solve this issue by either declaring a rule that turns it off:\n\n```\n    rules: {\n      \"no-use-before-define\": [\"error\", { \"functions\": true, \"classes\": true, \"variables\": false }], // disable the rule for variables, but enable it for functions and classes\n    } \n```\n\nThe above rule gives you the flexibility to allow you to declare styles on the same file as the component, while still following React Native’s convention.\n\nAnother solution is to create a separate file for your styles (`styles/AppStyles.js`):\n\n``` language-javascript\n    import { StyleSheet } from 'react-native';\n    \n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#F5FCFF',\n      },\n      welcome: {\n        fontSize: 20,\n        textAlign: 'center',\n        margin: 10,\n      },\n      instructions: {\n        textAlign: 'center',\n        color: '#333333',\n        marginBottom: 5,\n      },\n    });\n    \n    export default styles; \n```\n\nYou can then import the styles on your `App.js` file:\n\n``` language-javascript\n    import React, { Component } from 'react';\n    import {\n      Platform,\n      Text,\n      View,\n    } from 'react-native';\n    \n    import styles from './styles/AppStyles'; // import the styles\n```\n\nThe solution above is more preferrable but it’s less flexible. It all depends on the project you’re working on.\n\n### Adding React Native specific linters\n\nThe linter we’ve used so far doesn’t really include React Native specific rules. Let’s go ahead and add them:\n\n```\n    yarn add eslint-plugin-react-native --dev\n```\n\nLet ESLint know of the plugin by editing the `.eslintrc` file:\n\n```\n    \"plugins\": [\n      \"react-native\" // add eslint-plugin-react-native as a plugin for ESLint\n    ],\n    \"env\": {\n      \"react-native/react-native\": true // whitelist all browser-like globals\n    },\n    rules: {\n      // previous rules here\n      \"react-native/no-unused-styles\": 2, // disallow unused styles\n      \"react-native/no-inline-styles\": 2, // disallow styles declared within the component itself\n      \"react-native/no-color-literals\": 2, // enforces variable names to be used for storing colors\n    },\n```\n\nOnce those are added, React Native specific rules will be enforced in your project. \n\nIf you open the `styles/AppStyles.js` file, you’ll see the following issue:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/react-native-lint-style-rule.png\" alt=\"React Native Style Rules\" width=\"780\" height=\"434\" class=\"aligncenter size-full wp-image-4743\" /\u003e\n\nThis issue is triggered by the `react-native/no-color-literals` rule that you added earlier.\n\nTo solve this, create a new `colors.js`  file and declare all your color values in there. Declaring your color values in a separate file allows you to reuse them on another file later on. This is what the `react-native/no-color-literals` rule wants you to do, so you can maximize code re-use:\n\n``` language-javascript\n    // styles/colors.js\n    const containerColor = '#F5FCFF';\n    const instructionsColor = '#333333';\n    \n    export { containerColor, instructionsColor };\n```\n\nYou can then import it from your `AppStyles.js` file:\n\n``` language-javascript\n    import { containerColor, instructionsColor } from './colors';\n```\n\nThen in your style declarations, reference the variables instead:\n\n``` language-javascript\n    container: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: containerColor, // use variable instead\n    },\n    instructions: {\n      textAlign: 'center',\n      color: instructionsColor, // use variable instead\n      marginBottom: 5,\n    },\n```\n\n## Static-typing with Flow\n\nFlow adds static-typing features to JavaScript. Here are a couple of benefits of adding static-type checking to your project:\n\n- Prevent bugs that are related to incompatible data types used in function arguments, props, and state.\n- Helps in documenting your code. When you add the data type you’re expecting right in the code itself, it makes the code more readable.\n\nWhen starting a new React Native project with `react-native init`, the project already comes with a `.flowconfig` file. This is the configuration file that Flow uses. We’ll still be using the new React Native project that you created earlier.\n\nOpen the `.flowconfig` file and update the Flow version that it’s expecting. Visit Flow’s [releases page](https://github.com/facebook/flow/releases) and check for the latest stable version. At the time of writing of this article, it’s at version 0.73.0. Update the `.flowconfig` file with that version:\n\n```\n    [version]\n    0.73.0\n```\n\nNext, install that version using Yarn:\n\n```\n    yarn add --dev flow-bin@0.73.0\n```\n\nDon’t forget to check for breaking changes on the release notes (for example, options which no longer exists or updated). Then update your `.flowconfig` file accordingly.\n\nNow that Flow is installed, you can now install the [SublimeLinter Flow plugin](https://github.com/SublimeLinter/SublimeLinter-flow). \n\nTo see Flow in action, create a `helpers/add.js` file and add the following code:\n\n``` language-javascript\n    // @flow\n    \n    const Add = (num1: number, num2: number) =\u003e num1 + num2; \n    \n    export default Add;\n```\n\nIn the code above, we’ve specified the data type that we’re expecting for each of the parameters. In this case, we’ve used [number](https://flow.org/en/docs/types/primitives/#toc-numbers).\n\nNext, import the helper function in `App.js`:\n\n``` language-javascript\n    import Add from './helpers/Add';\n```\n\nThen use it inside component’s `render` function:\n\n``` language-javascript\n    \u003cText\u003e{Add(1, 2)}\u003c/Text\u003e\n```\n\nThe above code shouldn’t trigger Flow to return an error. But if you wrap any of the arguments in quotes:\n\n``` language-javascript\n    \u003cText\u003e{Add(1, '2')}\u003c/Text\u003e\n```\n\nFlow should return an error when you save the file:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/react-native-lint-flow-error.png\" alt=\"Flow error: unexpected data type\" width=\"979\" height=\"341\" class=\"aligncenter size-full wp-image-4740\" /\u003e\n\nIf you see the above error, then Flow is working in your text editor.\n\nThere are many more Flow features which you can use, specifically for React and React Native development. But this article isn’t really meant to cover all of those, so here are a couple of articles I recommend you to check out if you want to learn more:\n\n\n- [Why use static types in JavaScript? The Advantages and Disadvantages](https://medium.freecodecamp.org/why-use-static-types-in-javascript-part-2-part-3-be699ee7be60)\n- [Even Better Support for React in Flow](https://medium.com/flow-type/even-better-support-for-react-in-flow-25b0a3485627)\n\n\n## Code formatting with Prettier\n\n[Prettier](https://prettier.io/) is a code formatting tool which frees you from the hassle of manually formatting your code to match a specific style.\n\nHere are a few code formatting instances that you usually have to do manually:\n\n- Adding semicolons\n- Tabs vs spaces\n- Single quote vs double quotes\n\nPrettier does all those for you automatically. Here’s Prettier in action (note that I deliberately messed up the code formatting to emphasize what Prettier does):\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/react-native-lint-prettier-750x600.gif\" alt=\"Prettier in action\" width=\"750\" height=\"600\" class=\"aligncenter size-large wp-image-4742\" /\u003e\n\nThe first thing you need to do is install Prettier in your text editor. In Sublime Text, the name of the package is “JS Prettier”.\n\nNext, add the Prettier tool to your project:\n\n```\n    yarn add prettier --dev\n```\n\nNext, open the Prettier config file for your text editor. In Sublime Text, you can do this by going to **Preferences** → **Package Settings** → **JsPrettier** → **Settings** **-** **User**. \n\nAdd the following and hit save:\n\n```\n    {\n      \"debug\": true, // so you can see if there's an error with Prettier\n      \"auto_format_on_save\": true, // auto-formats the code when you hit save on the file you're working on\n    }\n```\n\nNext, create a `.prettierrc` file at the root of your project directory and add the following. This file is similar to the `.eslintrc`  in that it allows you to configure the default options for Prettier. Here are the rules that I have in mine:\n\n```\n    {\n      \"singleQuote\": true,\n      \"trailingComma\": \"es5\", \n      \"semi\": true, \n      \"arrowParens\": \"always\", \n      \"jsxBracketSameLine\": true,\n      \"bracketSpacing\": true, \n    }\n```\n\nHere’s what the above rules does:\n\n\n- `singleQuote` - always wrap strings in single quotes.\n- `trailingComma` - add dangling commas on objects and arrays.\n- `semi` - add semicolons in places where  you’ve missed them.\n- `arrowParens` - always add parenthesis when using arrow functions.\n- `jsxBracketSameLine` - always put jsx's closing bracket on the same line.\n- `bracketSpacing` - add spaces to brackets when working with objects.\n\nNote that these are my preferences, you can go through [this page](https://prettier.io/docs/en/options.html) to know more about the options you can use.\n\n\n### Integrating Prettier with ESLint\n\nThe next thing you want to do is integrate Prettier with ESLint. That way, they will work seamlessly. You always want your Prettier config to have the same options as your ESLint config when it comes to code formatting (for example, tabs vs spaces). That way, they won’t conflict on which style to use. \n\nBut if you don’t want to deal with that, you can install the following packages on your project:\n\n```\n    yarn add eslint-plugin-prettier eslint-config-prettier --dev\n```\n\nYou can then update your `.eslintrc` file to extend `eslint-config-prettier`:\n\n```\n    {\n      \"extends\": [\"airbnb\", \"prettier\"],\n    }\n```\n\nThis disables all the ESLint rules that have to do with code formatting. For example, Airbnb’s JavaScript Style Guide requires you to use semicolons, but you’ve disabled it on your  `.prettierrc` file:\n\n```\n    {\n      \"semi\": false,\n    }\n```\n\nIn this case, Airbnb’s code styling rules will be disabled when you extend the `prettier` config so ESLint will no longer complain even if you don’t have semicolons in your code. \n\nFor cases where you don’t want to disable all the code styling rules, you can use the [special rules](https://github.com/prettier/eslint-config-prettier#special-rules) provided by the plugin to enable them.\n\n\n## Troubleshooting\n\nThis section aims to solve issues that you’re having in getting the tools to work. The techniques mentioned in this tutorial was tested on Mac, Ubuntu, and Windows machines. Below are the issues that I’ve personally encountered:\n\n\n- Node not detected\n- Issues are not indicated\n\n### Node not detected\n\nIf you’re like me, and you’re using [nvm](https://github.com/creationix/nvm) for managing the Node versions installed on your machine, you will most likely have problems in getting the three tools to work.\n\nThe first step, is to determine the Node version you’re using. Copy the path that it points out because this will be the one that you’ll be using to specify the Node path:\n\n```\n    which node\n```\n\nNext, list the Node versions that are currently installed:\n\n```\n    nvm list\n```\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/react-native-lint-nvm.png\" alt=\"nvm list\" width=\"441\" height=\"190\" class=\"aligncenter size-full wp-image-4741\" /\u003e\n\nSet the default to which ever the currently used version is:\n\n```\n    nvm alias default v6.10.3\n```\n\nTo fix Prettier, go to **Preferences** → **Package Settings** → **JsPrettier** → **Settings - User**. From here, you can add the `node_path`:\n\n```\n    {\n      // previously added settings\n      \"node_path\": \"/Users/YourUsername/.nvm/versions/node/v6.10.3/bin/node\"\n    }\n```\n\nTo fix ESLint and Flow, go to **Preferences** → **Package Settings** → **SublimeLinter** → **Settings** and add the following:\n\n```\n    {\n      // previously added settings\n      \"linters\": {\n        \"eslint\": {\n          \"env\": {\"PATH\": \"/Users/YourUsername/.nvm/versions/node/v6.10.3/bin/\"}\n        },\n        \"flow\": {\n          \"env\": {\"PATH\": \"/Users/YourUsername/.nvm/versions/node/v6.10.3/bin/\"}\n        },\n      }\n    }\n```\n\nThat should fix the issue with Prettier and SublimeLinter not being able to detect the location to your Node version.\n\nDon’t forget to restart your text editor after applying the fix if it doesn’t work immediately.\n\n### Issues are not indicated\n\nIf you’re on Mac or Ubuntu, you will most likely have this problem after restarting your machine a couple of times. Not sure why, but this issue doesn’t occur if you’ve just set up your machine with the tools mentioned above.\n\nIf the ESLint and Flow issues are not being indicated beside each line number, then your problem is most likely that [ImageMagick](http://www.imagemagick.org/script/index.php) isn’t installed on your system. SublimeLinter requires ImageMagick to add the colors beside the line numbers.\n\nOn Mac, the easiest way to install ImageMagick is via homebrew:\n\n```\n    brew install imagemagick\n```\n\nOn Ubuntu, you can install it via `apt`:\n\n```\n    sudo apt-get install imagemagick\n```\n\nDon’t forget to restart your text editor after applying the fix.\n\n\n## Setting up other text editors\n\nAs promised, here are some articles which will help you get set up with ESLint, Flow, and Prettier on other text-editors:\n\n\n- [Configure ESLint, Prettier, and Flow in VS Code for React Development](https://medium.com/@sgroff04/configure-eslint-prettier-and-flow-in-vs-code-for-react-development-c9d95db07213)\n- [Writing JS in Vim](https://medium.com/@alexlafroscia/writing-js-in-vim-4c971a95fd49)\n\n## Conclusion\n\nThat’s it! In this tutorial, you’ve learned how to use ESLint, Flow, and Prettier when developing React Native apps. Always remember to check which tools are available to make your life easier when coding.","metaTitle":"React Native development tools - Part 1: Linting tools","metaDescription":"This is part one of a three part tutorial series examining development tools for React Native. In this part, learn how to configure Sublime Text Editor with linters, a prettifier and other dev tools."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5tl7of1DKEgoi2oqIUWScS","type":"Entry","createdAt":"2018-11-06T11:45:11.893Z","updatedAt":"2018-11-06T11:45:11.893Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a two-player memory game with React Native","url":"memory-game-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNMemory","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-11-06","description":"This tutorial will show you how to build a two-player memory game using React Native. Players sign in and are randomly assigned an opponent. The game then involves searching for image pairs. The game board and score update in realtime.","prerequisite":"You will need Node, Yarn, ngrok and Expo installed on your machine. Some knowledge of React Native development is required.","content":"In this tutorial, we’ll build a realtime memory game app with React Native and Pusher Channels. \n\n\n## Prerequisites\n\nBasic knowledge of React Native is required.\n\nTo easily test the app on multiple devices, we’ll be using [Expo](https://expo.io/) to create it. Be sure to install their [Android](https://play.google.com/store/apps/details?id=host.exp.exponent\u0026hl=en) or [iOS](https://itunes.apple.com/us/app/expo-client/id982107779?mt=8) client apps. Log in to your Expo account on both the CLI and client apps. [Create one](https://expo.io/signup) if you don’t have it already.\n\nThese are the package versions used in creating the app:\n\n\n- Node 8.3.0\n- Yarn 1.7.0\n- Expo CLI 2.1.2\n- Expo SDK 30.0.0\n- Pusher 4.3.1\n\nLastly, you also need a [Pusher](https://pusher.com/) and [ngrok](https://ngrok.com/) account. We’ll use it to create a Pusher app instance and expose the local Pusher server to the internet.\n\n\n## App overview\n\nWe’re going to build a two-player memory game app. \n\nWhen they open the app, users will be greeted by a login screen where they have to enter their username:\n\n![rn-memory-demo-1](//images.ctfassets.net/1es3ne0caaid/7C8jOMvjDU4Su66c6qi4M2/cb7b88b8cf276fb80527cb7df91b0013/rn-memory-demo-1.png)\n\nWhen a user logs in, the app’s server component will pick two random users and they’re the ones who will play.\n\nOnce an opponent is found, both users are automatically navigated to the Game screen. By default, there will be a lot of question mark icons, these represent the cards that haven’t been opened yet:\n\n![rn-memory-demo-2](//images.ctfassets.net/1es3ne0caaid/45tgSa5DUA868yMSIsGyA8/4a35bfedcacbdae5e9de64f1e55e0e33/rn-memory-demo-2.png)\n\nTo play the game, users have to click on each one to reveal its content. Users can reveal the content of up to two cards before both of them closes. Once a user has selected a pair, they will stay open for the rest of the game.\n\nHere’s what the screen looks like while the two players are playing the game:\n\n![rn-memory-demo-3](//images.ctfassets.net/1es3ne0caaid/4osnUhZMPKyas6CmUCk4Mu/6e4c9a7c4fc29a95f2dec9eeef225bc6/rn-memory-demo-3.png)\n\nWhen one of the players accumulates the maximum score (in this case it’s 12), both players are notified that one of them already won and the UI is reset:\n\n![rn-memory-demo-4](//images.ctfassets.net/1es3ne0caaid/3UbXAG3a6s06k808Q4yIiM/a65c3ec37bfe970e1b4bbb2b548d5148/rn-memory-demo-4.png)\n\nYou can view the app’s source code in this [GitHub repo](https://github.com/anchetaWern/RNMemory).\n\n\n## Create a Pusher app\n\nYou need to create a Pusher app instance so you can use Pusher’s services.\n\nOn your Pusher account dashboard, create a new Pusher app and check the **Enable client events** in the app settings. This allows us to emit events directly from the app:\n\n![rn-memory-enable-client-events](//images.ctfassets.net/1es3ne0caaid/6pEk3EZMOc2m0aCsKO2yE4/90724fb8ba79aa2ca0e6504a594a27e6/rn-memory-enable-client-events.png)\n\n## Clone the starter project\n\nSo that we can focus on the main parts of the app, clone the app’s GitHub repo and switch to the `starter` branch:\n\n```\n    git clone https://github.com/anchetaWern/RNMemory\n    cd RNMemory\n    git checkout starter\n```\n\nThe `starter` branch contains all the screens of the app (Login and Game screen), helper functions, and the UI components that we will be using. The app screens and the server component are where we will do most of the work.\n\nNext, install all the packages the app and the server depend on:\n\n```\n    yarn install\n    cd server\n    npm install\n```\n\n## Starter project tour\n\nBefore we proceed to actually code the app, let’s first take a quick look at the files and folders that are already available in the starter project:\n\n\n- `app/screens` - this is where the app’s screens are stored. We only have two screens: Login and Game. Only a starter template with minimum output is available in the starter branch.\n- `app/helpers` - this is where the app’s helper functions are stored. In this case, we only have the `shuffleArray.js` file. It’s used to arrange the items in the array in random order. This is very useful for changing the location of the cards that need to be guessed in the screen.\n- `app/data` - this is where hard-coded data is stored. In this case, we only have the `cards.js` file which contains the definition for the unique cards that the app uses. We’re using [Expo’s vector icons](https://expo.github.io/vector-icons/) so the file contains the `name` of the icon, the `src` (for example, FontAwesome), and the `color` we want to apply to it.\n- `app/components` - this is where the UI components of the app are stored. In this case, we only have the `Card.js` which renders the individual cards, and `Score.js` which renders the score and name of the user.\n- `server` - this is where we will add the code for the server component of the app. Currently, it only has the `.env` file which contains the placeholder for Pusher app credentials.\n\n\n## Build the app\n\nWe’re now ready to start building the app. I encourage you to start running the app even if the code is still not complete. This allows you to visualize what the code does as we’re adding it:\n\n```\n    expo start\n```\n\n### Login screen\n\nIn the Login screen, start by importing all the packages we need:\n\n``` javascript\n    // app/screens/Login.js\n    import React, { Component } from \"react\";\n    import {\n      View,\n      Text,\n      TextInput,\n      Button,\n      Alert,\n      ActivityIndicator\n    } from \"react-native\";\n    \n    import Pusher from \"pusher-js/react-native\";\n    \n    // next: initialize state\n```\n\nNext, initialize the state and the user’s channel:\n\n``` javascript\n    state = {\n      username: \"\",\n      is_loading: false\n    };\n    \n    constructor(props) {\n      super(props);\n      this.pusher = null; // variable for storing the Pusher reference\n      this.my_channel = null; // variable for storing the channel assigned to this user\n    }\n    \n    // next: add render function\n```\n\nInside the `render` function, return the UI for the Login screen. In this case, we’re only asking the user’s username. The login button is visible by default, but it gets hidden in place of the activity indicator when the user clicks on it. It stays that way until such time that an opponent is found:\n\n``` javascript\n    render() {\n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cView style={styles.topContent}\u003e\n            \u003cText style={styles.bigText}\u003eRNMemory\u003c/Text\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.mainContent}\u003e\n            \u003cText style={styles.label}\u003eUsername\u003c/Text\u003e\n            \u003cTextInput\n              style={styles.text_field}\n              onChangeText={username =\u003e {\n                this.setState({ username });\n              }}\n              value={this.state.username}\n              placeholder=\"Enter your username\"\n            /\u003e\n    \n            {!this.state.is_loading \u0026\u0026 (\n              \u003cButton onPress={this.login} title=\"Enter\" color=\"#0064e1\" /\u003e\n            )}\n    \n            {this.state.is_loading \u0026\u0026 (\n              \u003cActivityIndicator size=\"large\" color=\"#0000ff\" /\u003e\n            )}\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nWhen the login button is clicked, the `login` function gets executed. This will connect the user to Pusher and subscribe them in their own unique channel. Subscribing the user to their own channel allows us to:\n\n\n- Send data to them once an opponent is found. \n- While the game is ongoing, we use it to receive updates of the opponent’s score.\n- When the current user wins, we use it to send an update to the opponent that they lose.\n\nHere’s the code:\n\n``` javascript\n    login = () =\u003e {\n      let username = this.state.username;\n      \n      if (username) {\n        this.setState({\n          is_loading: true // hide's login button and shows activity indicator\n        });\n        \n        // connect to Pusher:\n        this.pusher = new Pusher(\"YOUR_PUSHER_API_KEY\", {\n          authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n          cluster: \"YOUR_PUSHER_APP_CLUSTER\",\n          encrypted: true,\n          auth: {\n            params: { username: username }\n          }\n        });\n      \n        this.my_channel = this.pusher.subscribe(`private-user-${username}`); // subscribe to user's unique channel\n        \n        // subscription error occurred\n        this.my_channel.bind(\"pusher:subscription_error\", status =\u003e {\n          Alert.alert('Error', 'Subscription error occurred. Please restart the app');\n        });\n        \n        // subscription to their own channel succeeded\n        this.my_channel.bind(\"pusher:subscription_succeeded\", data =\u003e {\n          console.log(\"subscription ok: \", data);\n      \n          // next: add code for listening when opponent is found    \n        });\n      }\n    };\n```\n\nDon’t forget to add your Pusher App ID when connecting to Pusher. As for the `authEndpoint`, we’ll add it later once we run ngrok.\n\nNext, add the code for listening for the `opponent-found` event. This event is emitted from the server once two random users are matched. Both players are notified when that happens, and it will automatically navigate the user to Game screen:\n\n``` javascript\n    this.my_channel.bind(\"opponent-found\", data =\u003e {\n      console.log(\"opponent found: \", data);\n      \n      // determine who the opponent is, player one or player two?\n      let opponent =\n        username == data.player_one ? data.player_two : data.player_one;\n    \n      Alert.alert(\"Opponent found!\", `${opponent} will take you on!`);\n    \n      this.setState({\n        is_loading: false,\n        username: \"\"\n      });\n      \n      // navigate to the game screen\n      this.props.navigation.navigate(\"Game\", {\n        pusher: this.pusher, // Pusher connection\n        username: username, // current user's username\n        opponent: opponent, // opponent's username\n        my_channel: this.my_channel // current user's channel\n      });\n    });\n```\n\n### Game screen\n\nWe now move on to the Game screen. Start by importing the packages, helpers, data, and components we need:\n\n``` javascript\n    // app/screens/Game.js\n    import React, { Component } from \"react\";\n    import { View, Text, Button, FlatList, Alert } from \"react-native\";\n    import { FontAwesome, Entypo } from \"@expo/vector-icons\"; // the icon sources that the cards will use\n    \n    import Score from \"../components/Score\";\n    import Card from \"../components/Card\";\n    \n    import shuffleArray from \"../helpers/shuffleArray\"; // function for re-ordering the cards to be guessed\n    \n    import cards_data from \"../data/cards\"; // the unique card config\n    \n    // next: initialize state\n```\n\nNext, initialize the state:\n\n``` javascript\n    state = {\n      current_selection: [], // for storing the currently selected pairs. This always resets back to zero once two are selected \n      selected_pairs: [], // the pairs that had already been opened \n      score: 0, // current user's score\n      opponent_score: 0 // opponent's score\n    };\n    \n    // next: add the constructor\n```\n\nNext, add the `constructor`. This is where we add initial values for the Pusher channels and generate the cards, which will be rendered on the screen:\n\n``` javascript\n    constructor(props) {\n      super(props);\n    \n      this.pusher = null; // Pusher connection\n      this.my_channel = null; // current user's Pusher channel\n      this.opponent_channel = null; // opponent's Pusher channel\n      this.username = null; // current user's username\n      this.opponent = null; // opponent's username\n    \n      let sources = {\n        fontawesome: FontAwesome,\n        entypo: Entypo\n      };\n    \n      let clone = JSON.parse(JSON.stringify(cards_data)); // create a copy of the cards data\n    \n      this.cards = cards_data.concat(clone); // append the copy to its original\n      \n      // add a unique ID to each of the card\n      this.cards.map(obj =\u003e {\n        let id = Math.random()\n          .toString(36)\n          .substring(7);\n        obj.id = id;\n        obj.src = sources[obj.src];\n        obj.is_open = false;\n      });\n    \n      this.cards = shuffleArray(this.cards); // arrange the cards in random order\n    }\n    \n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we pick up the navigation params that were passed from the Login screen earlier. This allows us to listen for events emitted by the opponent, and emit events from our own channel:\n\n``` javascript\n    componentDidMount() {\n      const { navigation } = this.props;\n      \n      // get Pusher connection and user's channel from the navigation param\n      this.pusher = navigation.getParam(\"pusher\");\n      this.my_channel = navigation.getParam(\"my_channel\");\n    \n      this.username = navigation.getParam(\"username\");\n      this.opponent = navigation.getParam(\"opponent\");\n      \n      // update the state with the cards generated inside the constructor earlier\n      this.setState({\n        cards: this.cards\n      });\n    \n      if (this.opponent) {\n        // subscribe to the opponent's channel\n        this.opponent_channel = this.pusher.subscribe(\n          `private-user-${this.opponent}`\n        );\n        this.opponent_channel.bind(\"pusher:subscription_error\", status =\u003e {\n          Alert.alert('Subscription error', 'Please restart the app');\n        });\n    \n        this.opponent_channel.bind(\"pusher:subscription_succeeded\", data =\u003e {\n          console.log(\"opponent subscription ok: \", data);\n          \n          // opponent's score is incremented\n          this.opponent_channel.bind(\"client-opponent-scored\", data =\u003e {\n            this.setState({\n              opponent_score: data.score\n            });\n          });\n          \n          // opponent won the game\n          this.opponent_channel.bind(\"client-opponent-won\", data =\u003e {\n            Alert.alert(\"You lose\", `${data.username} won the game`);\n            this.resetCards(); // close all the cards and reset the score\n          });\n        });\n      }\n    }\n```\n\nIn the code above, we’re listening for the `client-opponent-scored` event and the `client-opponent-won` event. The former allows the user to get updated of their opponent’s score. This is emitted by their opponent every time they open a matching pair.  The latter allows the user to get updated when their opponent wins the game. When this happens, we call the `resetCards` method to reset the UI. This allows both users to restart the game if they want. \n\nNext, we render the Game screen. Here, we use a FlatList to render all the cards. Below it, we use the Score component to render the username and score for both users:\n\n``` javascript\n    render() {\n      let contents = this.state.cards;\n    \n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cView style={styles.body}\u003e\n            \u003cFlatList\n              data={contents}\n              renderItem={this.renderCard}\n              numColumns={4}\n              keyExtractor={item =\u003e item.id}\n              columnWrapperStyle={styles.flatlistRow}\n            /\u003e\n          \u003c/View\u003e\n          \u003cView style={styles.bottomContent}\u003e\n            \u003cScore score={this.state.score} username={this.username} /\u003e\n            \u003cScore score={this.state.opponent_score} username={this.opponent} /\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nThe `renderCard` function renders each individual card. This is where we use the Card component to render each card. We pass in the data which determines how the card will look like as props. The `clickCard` prop is where we pass the function to be executed when the card is clicked:\n\n``` javascript\n    renderCard = ({ item }) =\u003e {\n      return (\n        \u003cCard\n          key={item.id}\n          src={item.src}\n          name={item.name}\n          color={item.color}\n          is_open={item.is_open}\n          clickCard={this.clickCard.bind(this, item.id)}\n        /\u003e\n      );\n    };\n```\n\nHere’s the `clickCard` function. This is where we process the card opened by the user. We only process cards that aren’t already guessed by the user and is not already opened. If both conditions are `true`, we add the card to the array of currently selected cards (`selected_pairs`):\n\n``` javascript\n    clickCard = id =\u003e {\n      let selected_pairs = [...this.state.selected_pairs]; // array containing the card pairs that had already been guessed by the user\n      let current_selection = this.state.current_selection; // array containing the currently selected cards\n      let score = this.state.score; // the user's current score\n      \n      // get the index of the card clicked by the user\n      let index = this.state.cards.findIndex(card =\u003e {\n        return card.id == id;\n      });\n    \n      let cards = [...this.state.cards]; // an array containing the cards rendered on the screen\n      \n      if (\n        cards[index].is_open == false \u0026\u0026\n        selected_pairs.indexOf(cards[index].name) === -1\n      ) { // only process the cards that isn't currently open and is not a part of the one's that have already been guessed by the user\n        cards[index].is_open = true; // open the card\n        \n        // add the card in the current selection\n        current_selection.push({\n          index: index,\n          name: cards[index].name\n        });\n    \n        // next: add code for checking if there are already two cards opened        \n      }\n    };\n    \n    // next: add code for resetting cards\n```\n\nOnce the user has already picked a pair of cards, we check whether their names are the same. If it does, we increment the user’s score by one and notify the opponent by emitting an event in the current user’s channel. This works because we’ve set up the current user to listen for events emitted from their opponent’s channel. So anytime we trigger an event on our own channel, the opponent gets notified. Once the current user accumulates the maximum score, we reset the UI and notify the opponent. On the other hand, if the pair selected by the user isn’t the same, we update the state to close the cards:\n\n``` javascript\n    if (current_selection.length == 2) {\n      if (current_selection[0].name == current_selection[1].name) {\n        score += 1;\n        selected_pairs.push(cards[index].name);\n        \n        // notify the opponent that their opponent have scored\n        this.my_channel.trigger(\"client-opponent-scored\", {\n          username: this.username,\n          score: score\n        });\n        \n        // all pairs have been opened\n        if (score == 12) {\n          // notify the user that they won\n          score = 0;\n          Alert.alert(\"Awesome!\", \"You won the game\");\n          // notify the opponent that they lose\n          this.my_channel.trigger(\"client-opponent-won\", {\n            username: this.username\n          });\n    \n          this.resetCards(); // reset the UI\n        }\n      } else {\n        cards[current_selection[0].index].is_open = false; // close the first card from the selected pair\n        \n        // close the second card from the selected pair after half a second\n        setTimeout(() =\u003e {\n          cards[index].is_open = false;\n          this.setState({\n            cards: cards\n          });\n        }, 500);\n      }\n    \n      current_selection = []; // reset the current selection\n    }\n    \n    // update the state\n    this.setState({\n      score: score,\n      cards: cards,\n      current_selection: current_selection\n    });\n```\n\nLastly, the `resetCards` function is where we reset the UI so the users can resume the game if they want to:\n\n``` javascript\n    resetCards = () =\u003e {\n      // close all cards\n      let cards = this.cards.map(obj =\u003e {\n        obj.is_open = false;\n        return obj;\n      });\n      \n      // re-shuffle the cards\n      cards = shuffleArray(cards);\n    \n      // update the state to reset the UI\n      this.setState({\n        current_selection: [],\n        selected_pairs: [],\n        cards: cards,\n        score: 0,\n        opponent_score: 0\n      });\n    };\n```\n\n## Server component\n\nNow we’re ready to add the server component. This is where we add the code for authenticating users as well as matching them so they can start playing the game.\n\nCreate a `server.js`  file inside the `server` folder and start importing the packages we need and initialize them:\n\n``` javascript\n    var express = require(\"express\");\n    var bodyParser = require(\"body-parser\");\n    var Pusher = require(\"pusher\"); // for authenticating users and emitting events from this server\n    \n    var app = express(); // for setting up the server\n    app.use(bodyParser.json()); // for parsing request body into JSON\n    app.use(bodyParser.urlencoded({ extended: false })); // for parsing URL encoded data in the request body\n    \n    require(\"dotenv\").config(); // for getting the environment variables\n```\n\nNext, initialize the array of users. This is where we will store the usernames of the users who log in to the app:\n\n``` javascript\n    var users = [];\n```\n\nNext, initialize the Pusher connection using the credentials from the `.env` file:\n\n``` javascript\n    var pusher = new Pusher({\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret: process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER\n    });\n```\n\nIf you haven’t done so already, this is a good chance to update the `server/.env` file with your Pusher app instance credentials:\n\n``` javascript\n    APP_ID=YOUR_PUSHER_APP_ID\n    APP_KEY=YOUR_PUSHER_APP_KEY\n    APP_SECRET=YOUR_PUSHER_APP_SECRET\n    APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n    PORT=3000\n```\n\nNext, add a route for checking if the server is running. Try to access this later at `http://localhost:3000` on your browser once the server is running:\n\n``` javascript\n    app.get(\"/\", function(req, res) {\n      res.send(\"all green...\");\n    });\n```\n\nNext, add the function for returning a random integer (from zero) that’s not greater than the `max` passed as an argument:\n\n``` javascript\n    function randomArrayIndex(max) {\n      return Math.floor(Math.random() * max);\n    }\n```\n\nNext, add the route which receives the Pusher authentication request. From the login code of the `app/screens/Login.js` file earlier, we added the `username` in `auth.params`. This is what we’re accessing in the request body. A username should be unique so we first check if it already exists before processing the request further. If it doesn’t yet exist, we push it to the `users` array. Once there are at least two users, we pick two random users from there. Those two users will be the ones who will partake in the game. We trigger the `opponent-found` event on each of the user’s channel. The event contains the username of the two users. This allowed us to determine which of the users is the opponent and which is the current user from the `app/screens/Game.js` file earlier. Once that’s done, we authenticate the two users and return the authentication token as the response:\n\n``` javascript\n    app.post(\"/pusher/auth\", function(req, res) {\n      var username = req.body.username; // get the username passed as an additional param\n    \n      if (users.indexOf(username) === -1) {\n        users.push(username);\n    \n        if (users.length \u003e= 2) {\n          var player_one_index = randomArrayIndex(users.length);\n          var player_one = users.splice(player_one_index, 1)[0]; // pick a random user and remove them from the array\n    \n          var player_two_index = randomArrayIndex(users.length);\n          var player_two = users.splice(player_two_index, 1)[0]; // pick a random user and remove them from the array\n    \n          // trigger a message to player one and player two on their own channels\n          pusher.trigger(\n            [\"private-user-\" + player_one, \"private-user-\" + player_two],\n            \"opponent-found\",\n            {\n              player_one: player_one,\n              player_two: player_two\n            }\n          );\n        }\n        \n        // authenticate the user\n        var socketId = req.body.socket_id;\n        var channel = req.body.channel_name;\n        var auth = pusher.authenticate(socketId, channel);\n      \n        res.send(auth); // return the auth token\n      } else {\n        res.status(400);\n      }\n    });\n```\n\nLastly, serve it on the port you’ve specified in your `server/.env` file:\n\n``` javascript\n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\n## Run the app\n\nAt this point, we should be ready to run the server and expose it to the internet. \n\nExecute the following inside the `server` directory to run the server:\n\n```\n    node server.js\n```\n\nNext, navigate to where you downloaded the ngrok executable file and execute the following:\n\n```\n    ./ngrok http 3000\n```\n\nTry if the server is running correctly by accessing the https URL returned by ngrok on your browser. If it says “all green…”, the next step is to add the ngrok URL to your `app/screens/Login.js` file:\n\n``` javascript\n    this.pusher = new Pusher(\"YOUR PUSHER APP ID\", {\n      authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n      cluster: \"YOUR PUSHER APP CLUSTER\",\n      encrypted: true,\n      auth: {\n        params: { username: username }\n      }\n    });\n```\n\nOnce that’s done, the app should work fully:\n\n```\n    expo start\n```\n\n## Conclusion\n\nThat’s it! In this tutorial, we created a two-player memory game with React Native and Pusher. Along the way, you learned how to use Pusher in React Native. Specifically, you learned how to emit events from both the server and the client side.\n\nYou can view the app’s source code in this [GitHub repo](https://github.com/anchetaWern/RNMemory).","metaTitle":"Create a two-player memory game with React Native","metaDescription":"This tutorial will show you how to build a two-player memory game using React Native. Players sign in and are randomly assigned an opponent. The game then involves searching for image pairs. The game board and score update in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3pLXeMQWY8QSgC2IYeK0a0","type":"Entry","createdAt":"2018-10-23T12:42:44.772Z","updatedAt":"2018-10-23T12:50:54.968Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":" Create a live workout tracking app with React Native","url":"workout-tracker-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNWorkout","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-10-22","description":"This tutorial takes you through building a workout tracking app in React Native, with a Node backend. Users will be able to log and share their exercise updates and follow each other's progress. New workout logs are shared in realtime.","prerequisite":"You will need git, Node and Expo installed on your machine. Some knowledge of React Native is required.","content":"In this tutorial, we’ll be creating a realtime workout tracking app with React Native and Pusher.\n\n## Prerequisites\n\nBasic knowledge of React Native, React Navigation, and ES6 syntax is required. \n\nWe’ll also be using Redux. I’ll add as much detail as I can on what’s going on with all the Redux code, but you should at least be familiar with how Redux works.\n\nWe’ll be using [Expo](https://expo.io/) in order to easily test the app on multiple devices. [Install Expo](https://expo.io/learn) on your computer, then download the Expo client app for your [iOS](https://itunes.apple.com/us/app/expo-client/id982107779?mt=8) or [Android](https://play.google.com/store/apps/details?id=host.exp.exponent\u0026hl=en) device.\n\nThese are the package versions used in creating the app:\n\n\n- Node 8.3.0\n- Yarn 1.7.0\n- Expo CLI 2.1.2\n- Expo SDK 30.0.0\n- Pusher 4.3.1\n\nIt’s always recommended to use the most recent stable versions, but in case the app doesn’t work for you, you can use the versions above to ensure we have the same environment.\n\nLastly, you must have a [Pusher](https://pusher.com/) and an [ngrok account](https://ngrok.com/).\n\n\n## App overview\n\nThe app that we will be creating is for gym buddies who are working out in a different gym. They can use it to keep track of their buddy’s workout even if they are away from each other.\n\nThe app has two tabs: one for logging their own workout, and another for tracking the workout of their buddy. Users can both log and track at the same time. This makes it possible for users to compete on who can make the most number of sets and reps for each exercise they choose.\n\nUpon opening the app, users will be greeted with the logging tab. This is where they can log their workouts. They’ll be automatically assigned a unique username. When they click on their username, it will be copied to the clipboard so they can easily share it with their buddy:\n\n![react-native-workout-username](//images.ctfassets.net/1es3ne0caaid/ACLwrF7dq80gc200WyUqs/808f6ea8ef582568f0173eab7a198e1e/react-native-workout-username.png)\n\nThis is how it looks like when their buddy subscribes. Subscription can be done in the tracking tab. All they have to do is enter their buddy’s username and click on the right arrow:\n\n![react-native-workout-subscribe](//images.ctfassets.net/1es3ne0caaid/60HPwDIL3aIys8IC2UaYg6/6941f614198dfae33899d8ed0a4b2b00/react-native-workout-subscribe.png)\n\nThis is how it looks like when a user adds an exercise and a set:\n\n![react-native-workout-log](//images.ctfassets.net/1es3ne0caaid/3n6MvWp0FauOyYCUCAY8me/da2899d353559fce2c9e9a968d889153/react-native-workout-log.png)\n\nOnce an exercise or set has been added, it will show in the list below the username. The number at the top of the circle is the weight, and the number inside it is the number of reps for that set. When the user clicks on the circle, the reps is incremented by one:\n\n![react-native-workout-display-log](//images.ctfassets.net/1es3ne0caaid/2lCAJDKLgYOoEqM80IoqaG/ee4b47deb4093fa3ea816cf90e177a1f/react-native-workout-display-log.png)\n\nThe tracking tab in their buddy’s screen is automatically synced with the exercise and sets the user has added:\n\n![react-native-workout-share-log](//images.ctfassets.net/1es3ne0caaid/XdBJMLHT6mSWI8iy8KaeG/5ef729c2cd4c802545e3b17444316b04/react-native-workout-share-log.png)\n\nYou can view the source code of this app on this [GitHub repo](https://github.com/anchetaWern/RNWorkout). \n\n## Creating a Pusher app\n\nOn your [Pusher dashboard](https://dashboard.pusher.com/), create a new app and name it **RNWorkout**. Once created, enable the client events in the **App Settings** tab:\n\n![react-native-workout-client-events](//images.ctfassets.net/1es3ne0caaid/13zBdyDKoi2iO08CYcwkUw/5673c2595a00fd0aeba21cca9d815f32/react-native-workout-client-events.png)\n\nClient events allow us to emit messages directly from the app. Because normally, messages are only emitted from the server. This time, we’ll only be using the server to authenticate the user. This authentication process allows us to make requests directly from the app.\n\n## Clone the app\n\nStart by cloning the repo:\n\n```\n    git clone https://github.com/anchetaWern/RNWorkout.git\n```\n\nSwitch to the `starter` branch and install both the app and server dependencies:\n\n```\n    cd RNWorkout\n    git checkout starter\n    yarn install\n    cd server\n    npm install\n```\n\nThe `starter` branch contains a minimal version of the app where the screens, components, helper functions, styles, and the server code has already been added. This makes it easy for us to focus on the main subject of this tutorial, and that is how to work with Redux and Pusher Channels.\n\n## Starter code tour\n\nBefore we proceed with writing some code, let’s first do a quick tour of the code we have on the `starter` branch.\n\n### Helpers\n\nThe `app/helpers` folder contains two helper files for generating unique ID’s (`uniqid.js`) and usernames (`uniqname.js`). The unique ID’s are used as a unique identifier for the exercises and sets.\n\n### Server\n\nThe `server` folder contains the code for the server component of the app. This server is for authenticating the user when they initialize a new Pusher connection. No further updates are required inside this folder except for the `server/.env` file. We’ll update it later once we run the app.\n\n### Modals\n\nThe `app/modals` folder contains the code for the add exercise and add set modals. These modals are used for logging a new exercise and adding a set to a specific exercise. We will be updating the `AddExerciseModal.js` and `AddSetModal.js` later. This is to add the code for dispatching actions that will modify the store.\n\n### Components\n\nThe `app/components` folder contains all the components that the app is using. This includes the following:\n\n\n- **AlertBox** - for showing messages enclosed inside a box. \n- **IconButton** - for showing buttons with an icon in them.\n- **SetContainer** - for showing the individual sets (the gray circles with a number inside and below them).\n- **List** - serves as a container list for the SetContainer component.\n- **ConnectedFlatList** - for showing all the workout data (exercises and sets).\n\nAmong the components above, we’re only going to update the ConnectedFlatList (`app/components/ConnectedFlatList/ConnectedFlatList.js`). As it is right now, it won’t really render anything. We have to turn it into a “connected” component so it will automatically re-render once the relevant data in the store is updated.\n\n### Screens\n\nWe only have one screen because the logging and tracking features are too similar to have their own screen. If you open the `Root.js` file, you’ll see that we’re only using the LogWorkout screen:\n\n``` javascript\n    import LogWorkoutScreen from \"./app/screens/LogWorkout\";\n    \n    const LogStack = createStackNavigator(\n      {\n        Log: LogWorkoutScreen\n      },\n      { initialRouteName: \"Log\" }\n    );\n    \n    const TrackStack = createStackNavigator(\n      {\n        Track: LogWorkoutScreen\n      },\n      { initialRouteName: \"Track\" }\n    );\n```\n\nWe will be updating the `app/screens/LogWorkout.js` file later because that’s where we need to link everything up.\n\n## Build the app\n\nNow we’re ready to build the app. Here’s what we’ll be doing through the rest of the tutorial:\n\n- Add the actions.\n- Add the reducers.\n- Dispatch an action for adding a new exercise to the store when the user adds a new exercise. \n- Dispatch an action for adding a new set to the store when the user adds a new set.\n- Initialize Pusher.\n- Subscribe user to their own channel so they can emit client events.\n- Subscribe to another user so they can listen for client events emitted by that user.\n- Emit a client event on the channel when a new exercise or set is added by the user.\n- Listen for client events so the tracking tabs UI is synced to that of the user being followed.\n\nThe steps above aren’t ordered in a specific way. Most likely, you’ll have to switch between each of them as you’re testing the app. For this tutorial, I recommend you to start the app even if it’s not fully working yet. This allows you to easily see the effects of the code you’re adding, and not simply copy-pasting it:\n\n```\n    expo start\n```\n\nLet’s make this as hands-on as possible. I’ll first mention what needs to be done so you can try on your own, and then you can peak at the code either here or in the GitHub repo if you’re not sure what to do. I’ve also added “todo” comments in the starter code as a guide on where you should put a specific code. Feel free to browse around the code whenever you see “our task is to…” or “next, we need to..” as that’s the cue for when we’ll start adding the code. Try to figure out on your own first before you proceed.\n\nWe’ll work on the functionality for logging workouts first. That will be the first screen that you see when you run the app. Right now, we only have the following:\n\n![react-native-workout-starter-screen](//images.ctfassets.net/1es3ne0caaid/3MsKX00SNG0Ia6AAqa6Sq2/d08bbe7051266638499d81368acb4477/react-native-workout-starter-screen.png)\n\nThe username is generated, and it can be copied to clipboard, but that’s it. Nothing you can really do in this tab (logging tab) right now.\n\n### Add the actions\n\nOur first task is to figure out how to make the add exercise modal visible so we can enter the exercise we want to add.\n\nMy usual workflow when working with Redux is to first figure out what the global app state will look like. But before we can do that, we first need to determine the actions that can be done throughout the app in relation to how it affects the UI:\n\n- Open or close modals.\n- Add an exercise.\n- Set the current exercise.\n- Add a set.\n- Increment set.\n\nNote that I’ve excluded actions that are only applicable to a specific component. Here’s a good rule of thumb to determine if something is an action or not:\n\n\u003e If the rest of the app’s UI isn’t affected if the value of a specific piece of data is updated, then it’s not an action. \n\nFor this app, non-actions include:\n\n- Entering the name of the exercise.\n- Entering the weight of a set.\n\nBoth instances don’t update the app’s UI in a way that affects the whole app, so the state for those can be managed within the component level.\n\nGo ahead and create an `app/actions` folder. Inside it, create a `types.js` file and define all the actions that we came up with. This will help us avoid typos when working with [actions](https://redux.js.org/basics/actions):\n\n``` javascript\n    // app/actions/types.js\n    export const ADDED_EXERCISE = \"added_exercise\";\n    \n    export const ADDED_SET = \"added_set\";\n    export const INCREMENTED_SET = \"incremented_set\";\n    \n    export const MODAL_TOGGLED = \"modal_toggled\";\n    export const SET_EXERCISE = \"set_exercise\";\n```\n\nNext, define the [action creators](https://redux.js.org/basics/reducers). These are functions that will return the data needed by each action. Each action type will have its own function, which returns it as the `type` property:\n\n``` javascript\n    // app/actions/index.js\n    import {\n      ADDED_EXERCISE,\n      ADDED_SET,\n      INCREMENTED_SET,\n      MODAL_TOGGLED,\n      SET_EXERCISE\n    } from \"./types\";\n    \n    export const addedExercise = (exerciseID, exerciseName, user = \"me\") =\u003e {\n      return {\n        type: ADDED_EXERCISE,\n        id: exerciseID, // a machine-friendly version of the exercise name\n        exercise: exerciseName, // name of the exercise (e.g. front squat)\n        user: user \n      };\n    };\n    \n    export const addedSet = (setID, exerciseID, weight, user = \"me\") =\u003e {\n      return {\n        type: ADDED_SET,\n        id: setID, // unique ID for the set\n        exercise_id: exerciseID, // used for determining which exercise to put the set under\n        weight: weight, // how heavy is the weight being lifted (usually in lbs)\n        reps: 1, // default number of repetitions for a new set\n        user: user\n      };\n    };\n    \n    export const incrementedSet = (setID, reps, user = \"me\") =\u003e {\n      return {\n        type: INCREMENTED_SET,\n        id: setID, // unique ID for the set\n        reps: reps, // repetitions performed for this set\n        user: user\n      };\n    };\n    \n    export const modalToggled = (modalName, visibility) =\u003e {\n      return {\n        type: MODAL_TOGGLED, \n        modal: modalName, // addExerciseModal or addSetModal\n        visibility: visibility // true (visible) or false (not visible)\n      };\n    };\n    \n    // for setting the exercise in which to add a set\n    export const setExercise = id =\u003e {\n      return {\n        type: SET_EXERCISE,\n        exercise_id: id\n      };\n    };\n```\n\nNote that the `addedExercise`, `addedSet`, and `incrementedSet` functions have a `user` parameter which is set to `me` by default. This allows us to specify which specific app state will the data go. The value of this parameter can either be `me` or `others`. `me` is for the data displayed in the logging tab, while `others` is for the data displayed on the tracking tab. \n\n### Add the reducers\n\nNext, we need to create the [reducers](https://redux.js.org/basics/reducers). These are responsible for describing how a specific portion of the app state will change. Personally, I create a separate reducer based on the data they’re modifying. In this app, that would be:\n\n- Exercise reducer (`ExerciseReducer.js`) - for exercise-related data.\n- Set reducer (`SetReducer.js`) - for set-related data.\n- UI reducer (`UIReducer.js`) - for UI-related data. These are usually booleans which hide or show what is seen on the screen (for example, modals and progress loaders).\n\nWhen it comes to figuring out which reducers to create, anything really goes if you’re only working on a throw-away project to learn a specific technology. But be sure to read about Redux best practices when working in a production app.\n\nCreate an `app/reducers` folder and create the files mentioned above inside it. \n\nLet’s first start with the exercise reducer:\n\n``` javascript\n    // app/reducers/ExerciseReducer.js\n    import { ADDED_EXERCISE } from \"../actions/types\";\n    \n    import uniqid from \"../helpers/uniqid\";\n    \n    const INITIAL_STATE = {\n      exercises: [],\n      others_exercises: []\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      switch (action.type) {\n        case ADDED_EXERCISE:\n          const key = uniqid();\n          const id = action.id;\n          const exercise = action.exercise;\n          \n          // determine which specific array to update\n          const exercises =\n            action.user == \"me\" ? state.exercises : state.others_exercises;\n          \n          // create a new array with the new exercise appended to the end of it\n          const updated_exercises = exercises.concat({\n            key: key,\n            exercise_id: id, // machine-friendly version of the exercise name\n            exercise_name: exercise\n          });\n          \n          // return the new state based on which user performed the action\n          if (action.user == \"me\") {\n            return { ...state, exercises: updated_exercises };\n          }\n    \n          return { ...state, others_exercises: updated_exercises };\n    \n        default:\n          return state;\n      }\n    };\n```\n\nFrom the code above, the first step is to define the `INITIAL_STATE`. Note that this isn’t the initial value for the whole app state. This should only be for the specific data modified by this reducer. In this case, it’s only the `exercises` (the exercises logged by the current user), and `others_exercises` (the exercises logged by the user followed by the current user). \n\nBased on the `user` passed from the action, we get and re-create either the `exercises` or `others_exercises` array. Take note of the word “re-create” as we’re not really supposed to modify the state directly, we only replace it with a different value. Redux handles the calculation needed to determine whether the UI should be re-rendered or not. And if you modify the state directly, then it won’t be ensured that that process will work correctly. That’s why we’re using the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and [concat method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) to avoid updating the state directly. \n\nNext is the set reducer. Again, we’re updating two arrays, one for each user. But this time, our reducer handles two actions, one for when the set is added, and another for when it’s incremented:\n\n``` javascript\n    // app/reducers/SetReducer.js\n    import { ADDED_SET, INCREMENTED_SET } from \"../actions/types\";\n    \n    const INITIAL_STATE = {\n      sets: [],\n      others_sets: []\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      let sets = [];\n      let index = 0;\n      let reps = 0;\n    \n      let set_name = \"sets\";\n      let current_sets = [];\n    \n      switch (action.type) {\n        case ADDED_SET:\n          current_sets = action.user == \"me\" ? state.sets : state.others_sets;\n          sets = current_sets.concat({\n            key: action.id,\n            exercise_id: action.exercise_id,\n            weight: action.weight,\n            reps: action.reps\n          });\n    \n          const updated_state =\n            action.user == \"me\"\n              ? { ...state, sets }\n              : { ...state, others_sets: sets };\n          return updated_state;\n    \n        case INCREMENTED_SET:\n          current_sets = action.user == \"me\" ? state.sets : state.others_sets;\n          sets = [...current_sets];\n          index = sets.findIndex(itm =\u003e {\n            return itm.key == action.id;\n          });\n    \n          reps = action.reps;\n          sets[index] = { ...sets[index], reps: reps + 1 }; // add 1 to the current rep\n    \n          if (action.user == \"others\") {\n            return { ...state, others_sets: sets };\n          }\n    \n          return { ...state, sets };\n    \n        default:\n          return state;\n      }\n    };\n```\n\nNext is the UI reducer. This is responsible for processing the actions for showing or hiding the modals, and setting the current exercise:\n\n``` javascript\n    // app/reducers/UIReducer.js\n    import { MODAL_TOGGLED, SET_EXERCISE } from \"../actions/types\";\n    \n    const INITIAL_STATE = {\n      ui: {\n        current_exercise: \"\",\n        addExerciseModalIsOpen: false,\n        addSetModalIsOpen: false\n      }\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      let ui = {};\n      switch (action.type) {\n        case SET_EXERCISE:\n          ui = { ...state.ui };\n          ui[\"current_exercise\"] = action.exercise_id;\n    \n          return {\n            ...state,\n            ui\n          };\n    \n        case MODAL_TOGGLED:\n          ui = { ...state.ui };\n          ui[`${action.modal}IsOpen`] = action.visibility;\n    \n          const new_state = {\n            ...state,\n            ui\n          };\n    \n          return new_state;\n    \n        default:\n          return state;\n      }\n    };\n```\n\nThe final step is to combine all the reducers into a single file. This allows us to easily supply it when we create the store later:\n\n``` javascript\n    // app/reducers/index.js\n    import { combineReducers } from \"redux\";\n    import ExerciseReducer from \"./ExerciseReducer\";\n    import SetReducer from \"./SetReducer\";\n    import UIReducer from \"./UIReducer\";\n    \n    export default combineReducers({\n      exercises: ExerciseReducer,\n      sets: SetReducer,\n      ui: UIReducer\n    });\n```\n\n### Connect the LogWorkout screen to the store\n\nNow that we’ve defined our actions, action creators, and reducers, the next step is to link the LogWorkout screen to the store.\n\nOpen `app/screens/LogWorkout.js` and add the following:\n\n``` javascript\n    import { MaterialIcons } from \"@expo/vector-icons\"; // already added\n    \n    // add these\n    import { createStore } from \"redux\";\n    import { Provider } from \"react-redux\";\n```\n\nIn the code above, `createStore` is used for [creating the store](https://redux.js.org/api/createstore). Consider the store as the global app state, while the `Provider` is a helper component that allows us to pass down the store to the component level. This gives us the ability to dispatch actions within this component and allow its child components to also connect to the store.\n\nNext, import the actions and reducers. To create a store we need to pass the combined reducers as an argument. This makes the store aware of which reducers it should use when a specific action is dispatched from the app:\n\n``` javascript\n    import {\n      modalToggled,\n      incrementedSet,\n      addedExercise,\n      addedSet\n    } from \"../actions\";\n    \n    import reducers from \"../reducers\";\n    const store = createStore(reducers);\n```\n\nNext, wrap the whole screen in the `Provider` component and pass the `store` as a value for the `store` prop:\n\n``` javascript\n    render() {\n      return (\n        \u003cProvider store={store}\u003e\n          ...\n        \u003c/Provider\u003e\n      );\n    }\n```\n\nOnce that’s done, we should be able to dispatch actions inside this component’s methods. In this case, we dispatch the action for opening the add exercise modal:\n\n``` javascript\n    showAddExerciseModal = () =\u003e {\n      store.dispatch(modalToggled(\"addExerciseModal\", true));\n    };\n```\n\nAs the button for opening the modal is inside the header, we need to set the `showAddExerciseModal` function as a navigation param. That way, we can access it as such from the header:\n\n``` javascript\n    componentDidMount() {\n      this.props.navigation.setParams({\n        showAddExerciseModal: this.showAddExerciseModal\n      });\n    }\n```\n\nIn the `navigationOptions`, you can now execute the `showAddExerciseModal` function:\n\n``` javascript\n    return {\n      headerTitle: `Log Workout`,\n      headerRight: (\n        \u003cIconButton\n          onPress={() =\u003e {\n            if (routeName == \"Log\") {\n              params.showAddExerciseModal(); // add this\n            }\n          }}\n        /\u003e\n      ),\n    }\n```\n\nWhen the button is clicked, it should execute the exercise reducer and the app’s state will be modified. Currently, the add exercise modal isn’t really aware of the changes that happen in the store yet, so it won’t really become visible when the button is clicked.\n\n### Open the add exercise modal\n\nThe next step is to make the add exercise modal into a connected component. That way, it will become aware of the state changes so it can re-render itself when a data it depends on changes.\n\nOpen the `app/modals/AddExerciseModal.js` file. To turn a component into a connected component, we need to use the `connect` method from `react-redux`. This allows us to add the functions for mapping specific data in the store as a prop for this component. It also allows us to define functions that we can use inside the component to dispatch actions, as you’ll see later:\n\n``` javascript\n    import { connect } from \"react-redux\";\n```\n\nNext, import the actions for toggling the visibility of the modal, and adding a new exercise:\n\n``` javascript\n    import { modalToggled, addedExercise } from \"../actions\";\n```\n\nNext, scroll to the bottom of the file (right before `export default AddExerciseModal`) and define the `mapStateToProps` function. This is used for mapping whichever data we have on the store as a prop for this component. In this case, we only need the `ui` object from the UI reducer. We use [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to extract it, and the spread syntax to extract the properties that are inside the `ui` object:\n\n``` javascript\n    const mapStateToProps = ({ ui }) =\u003e ({\n      ...ui\n    });\n```\n\nEarlier, in the UI reducer, we defined the following initial state:\n\n``` javascript\n    // app/reducers/UIReducer.js\n    const INITIAL_STATE = {  \n      ui: {\n        current_exercise: \"\",\n        addExerciseModalIsOpen: false,\n        addSetModalIsOpen: false\n      }\n    };\n```\n\n`mapStateToProps` gives us access to those specific properties in the `ui` object as if it were a prop that’s passed to the component (add exercise modal). To access the current visibility value of the add exercise modal, all we have to do is supply `this.props.ui.addExerciseModalIsOpen` to the `visible` prop of the `Modal` component:\n\n``` javascript\n    // app/modals/AddExerciseModal.js\n    \u003cModal\n      animationType=\"slide\"\n      visible={this.props.ui.addExerciseModalIsOpen}\n    \u003e\n      ...\n    \u003c/Modal\u003e\n```\n\nBut before we can do that, we first have to connect the component to the store. We can do that with the following code. This returns a “connected” version of the component, one that’s subscribed to the updates made in the store. `mapStateToProps` gets executed every time there’s an update to the store. If a relevant value is updated, the component is re-rendered because the prop it depends on is directly mapped to a value in the store:\n\n``` javascript\n    // app/modals/AddExerciseModal.js\n    export default connect(\n      mapStateToProps\n    )(AddExerciseModal);\n    \n    // export default AddExerciseModal; // replace this with the one above\n```\n\nOnce that’s done, clicking on the button in the header should make the add exercise modal visible.\n\nIf you’re wondering why we used `this.props.ui.addExerciseModalIsOpen` instead of `this.props.addExerciseModalIsOpen`, that’s because the data inside the UI reducer lives inside the `ui` object. We’ve defined this earlier in the reducer’s index file:\n\n``` javascript\n    // app/reducers/index.js\n    export default combineReducers({\n      // ...\n      ui: UIReducer\n    });\n```\n\nAnd in the UI reducer, everything lives inside another `ui` object:\n\n``` javascript\n    // app/reducers/UIReducer.js\n    const INITIAL_STATE = {\n      ui: {\n        // ...\n        addSetModalIsOpen: false\n      }\n    };\n```\n\nSo to access `addSetModalIsOpen`, we have to access `ui.ui.addSetModalIsOpen` from the store. Object destructuring gave us access to the `ui` object we’ve defined inside `app/reducers/index.js` file, while the spread syntax gave us access to the `ui` object defined inside `app/reducers/UIReducer.js` but not the properties inside of it:\n\n``` javascript\n    const mapStateToProps = ({ ui }) =\u003e ({\n      ...ui // note: spreads the ui object defined in the app/reducers/index.js file. not the ui object in the app/reducers/UIReducer.js\n    });\n```\n\nThis is why we still had to use `this.props.ui.addExerciseModalIsOpen`.\n\n### Add a new exercise\n\nThe next step is to add a new exercise when the add button in the add exercise modal is clicked. Earlier, you learned that to dispatch an action, you first have to import the action creator so you can dispatch it using the `dispatch` method from the `store`:\n\n``` javascript\n    // app/screens/LogWorkout.js\n    store.dispatch(modalToggled(\"addExerciseModal\", true));\n```\n\nThe problem we have now is that we have no access to the `store` or its `dispatch` method when inside the add exercise modal. The solution for that is the `mapDispatchToProps` method. It allows us to return functions that are also mapped as props for the component. The `dispatch` function is automatically passed as an argument to the `mapDispatchToProps` function, and we can use it to dispatch the action. In this case, we only need the action for toggling the visibility of the modal and adding the exercise:\n\n``` javascript\n    // app/modals/AddExerciseModal.js\n    // add this right below mapStateToProps\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        closeModal: () =\u003e {\n          dispatch(modalToggled(\"addExerciseModal\", false));\n        },\n        addExercise: (id, name) =\u003e {\n          dispatch(addedExercise(id, name));\n        }\n      };\n    };\n```\n\nTo use `mapDispatchToProps`, pass it as the second argument for the `connect` function:\n\n``` javascript\n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps\n    )(AddExerciseModal);\n```\n\nThe next step is to call the two functions (`closeModal` and `addExercise`) we just mapped as props:\n \n``` javascript\n    addExercise = () =\u003e {\n      // add these\n      if (this.state.exercise_name) {\n        const name = this.state.exercise_name;\n        const id = name.replace(\" \", \"_\");\n        this.props.addExercise(id, name); \n        \n        // already added\n        this.setState({\n          exercise_name: \"\"\n        });\n      \n        this.props.closeModal(); \n      }\n    };\n```\n\nOnce that’s done, a new exercise should be added to the store every time you click on the add button in the add exercise modal. The modal should also automatically close after that.\n\nDon’t forget to close the modal when the close button is clicked:\n\n``` javascript\n    \u003cIconButton\n      icon=\"close\"\n      color=\"#FFF\"\n      size={18}\n      onPress={() =\u003e {\n        this.props.closeModal(); // add this\n      }}\n    /\u003e\n```\n\n### Show the exercises\n\nNow that we’ve added the code for creating a new exercise, the next step is to show the exercises that were added. That’s the job of the ConnectedFlatList component. \n\nWhat we need to do is very similar to what we did in the add exercise modal, so we’ll just breeze through the code. Start by importing all the things we need:\n\n``` javascript\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    import { connect } from \"react-redux\";\n    import uniqid from \"../../helpers/uniqid\";\n    \n    import {\n      modalToggled,\n      setExercise,\n      incrementedSet,\n      addedExercise,\n      addedSet\n    } from \"../../actions\";\n```\n\nNext, scroll to the bottom of the file and add the `mapStateToProps` function. While we’re here, let’s also add the data related to the sets:\n\n``` javascript\n    const mapStateToProps = state =\u003e {\n      return {\n        exercises: state.exercises.exercises,\n        sets: state.sets.sets,\n        others_exercises: state.exercises.others_exercises,\n        others_sets: state.sets.others_sets\n      };\n    };\n    \n    export default connect(\n      mapStateToProps\n    )(ConnectedFlatList);\n```\n\nNext, get the relevant exercise data from the props. While we’re here, let’s also extract the sets data:\n\n``` javascript\n    render() {\n      // add these\n      const exercises =\n        this.props.user == \"me\"\n          ? this.props.exercises\n          : this.props.others_exercises;\n      const sets =\n        this.props.user == \"me\" ? this.props.sets : this.props.others_sets;\n      \n      // already added\n      if (exercises.length) {\n        return (\n          \u003cFlatList\n            data={exercises}\n            extraData={sets}\n            renderItem={this.renderItem}\n            contentContainerStyle={{ paddingBottom: 50, backgroundColor: \"#FFF\" }}\n          /\u003e\n        );\n      }\n    }\n```\n\nTake note of the `extraData` prop that we’ve supplied for the FlatList. We’ve supplied `sets` to it because the sets data isn’t nested under the `exercises` array. That means that if we add a new set or increment an existing one, this FlatList won’t really get re-rendered. Supplying `sets` as an `extraData` allows us to re-render the main FlatList when the sets data is updated.\n\nOnce that’s done, you should now see the exercises being listed as you add them through the add exercise modal.\n\n\n### Open the add set modal\n\nNow that we can add and show exercises, the next step is to show the add set modal. \n\nWhen the plus button to the right of the exercise name is clicked, it should show the add set modal. To implement that, we need to dispatch the action for toggling the visibility of the add set modal.\n\nJust like what we did earlier in the add exercise modal, we need to use `mapDispatchToProps` so we can dispatch actions by calling functions that are mapped as a prop:\n\n``` javascript\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    // add these\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        openAddSetModal: () =\u003e {\n          dispatch(modalToggled(\"addSetModal\", true));\n        },\n        setExercise: exercise_id =\u003e {\n          dispatch(setExercise(exercise_id));\n        }\n      };\n    };\n    \n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps // add this\n    )(ConnectedFlatList);\n```\n\nNote that aside from the `modalToggled` action, we also have `setExercise`. This is for updating the value of the `current_exercise` property in the UI reducer so that by the time the user hits the button for adding the set, we can extract this value from the props and supply it as one of the properties for the set to be created.\n\nNext, inside the `renderItem` method, call the relevant functions you returned in `mapDispatchToProps`:\n\n``` javascript\n    renderItem = ({ item }) =\u003e {\n      return (\n        \u003cView key={item.key} listKey={item.key}\u003e\n          \u003cView style={styles.list_item_header}\u003e\n            \u003cText style={styles.list_item_header_text}\u003e{item.exercise_name}\u003c/Text\u003e\n            \u003cIconButton\n              icon=\"add\"\n              size={20}\n              color=\"#333\"\n              onPress={() =\u003e {\n                if (this.props.user == \"me\") {\n                  // add these:\n                  this.props.openAddSetModal(); \n                  this.props.setExercise(item.exercise_id);\n                }\n              }}\n            /\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nThe next step is to turn the add set modal into a connected component. You should already know how to do this so let’s just look at the code:\n\n``` javascript\n    // app/modals/AddSetModal.js\n    import { connect } from \"react-redux\";\n    import { modalToggled, addedSet } from \"../actions\";\n    import uniqid from \"../helpers/uniqid\";\n\n\n    const mapStateToProps = ({ ui }) =\u003e ({\n      ...ui\n    });\n    \n    export default connect(\n      mapStateToProps\n    )(AddSetModal);\n\n\n    render() {\n      return (\n        \u003cModal\n          animationType=\"slide\"\n          visible={this.props.ui.addSetModalIsOpen}\n          ...\n        \u003e\n        \u003c/Modal\u003e\n      );\n    }\n```\n\nOnce that’s done, the add set modal should become visible when the plus button to the right of the exercise name is clicked.\n\n### Add a new set\n\nAdding a new set is very similar to how we added an exercise:\n\n``` javascript\n    // app/modals/AddSetModal.js\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        closeModal: () =\u003e {\n          dispatch(modalToggled(\"addSetModal\", false));\n        },\n        addSet: (setID, exerciseID, weight) =\u003e {\n          dispatch(addedSet(setID, exerciseID, weight));\n        }\n      };\n    };\n    \n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps // add this\n    )(AddSetModal);\n```\n\nTake note of how we’re extracting the `current_exercise` from the props. Earlier, in the ConnectedFlatList, we’ve set the value for this property when the user clicks on the plus button to the right of the exercise name. That’s the purpose of the `setExercise` action, so we always have the correct value for the `exercise_id` when we add a new set:\n\n``` javascript\n    addSet = () =\u003e {\n      // add these\n      if (this.state.weight) {\n        const id = uniqid();\n        const exercise_id = this.props.ui.current_exercise;\n        const weight = this.state.weight;\n      \n        this.props.addSet(id, exercise_id, weight);\n        this.props.closeModal();\n        \n        // previously added code..\n      }\n    };\n```\n\nDon’t forget to close the modal when its close button is clicked:\n\n``` javascript\n    \u003cIconButton\n      icon=\"close\"\n      color=\"#FFF\"\n      size={18}\n      onPress={() =\u003e {\n        this.props.closeModal(); // add this\n      }}\n    /\u003e\n```\n\n### Show the sets\n\nThe next step is to show the sets added for a specific exercise. Earlier, we already mapped the current values of the `sets` and `others_sets` array in the store over to this component via `mapStateToProps`. All we have to do now is extract the relevant sets data from the props:\n\n``` javascript\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    renderSets = (exercise_id, key) =\u003e {\n      const id = uniqid();\n      const l_key = exercise_id + \":\" + key + \":\" + id;\n      \n      const sets_data =\n        this.props.user == \"me\" ? this.props.sets : this.props.others_sets;\n      const sets = sets_data.filter(item =\u003e {\n        return item.exercise_id == exercise_id;\n      });\n      \n      // already added:\n      if (sets.length) {\n        // ...\n      }\n    }\n```\n\nNote that the value of `this.props.users` in the code above is passed as a prop via the standard means (through the component). This is used to determine which specific set data to use (the current user or the user they’re following). The `l_key` is used as the value for the `listKey` for the FlatList that will contain each set. [We need to supply this](https://stackoverflow.com/questions/49276526/nested-flat-list-invariant-violation-a-virtualizedlist-contains-a-cell-which-it) because we’re nesting a FlatList within a FlatList. The `listKey` prop allows React to differentiate between sibling flatlists.\n\nAt this point, you should be able to see the sets being listed below a specific exercise when you add them.\n\n### Increment a set\n\nThe final thing we need to implement when it comes to the logging functionality is incrementing the value of a specific set. \n\nWe called it “increment set”, but what we really want to do is to increment the number of reps for a specific set. \n\nStart by adding it in the `mapDispatchToProps`:\n\n``` javascript\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        // added previously\n        setExercise: exercise_id =\u003e {\n          ...\n        },\n        // add this\n        incrementSet: (set_id, reps) =\u003e {\n          dispatch(incrementedSet(set_id, reps));\n        }\n      };\n    };\n```\n\nOnce that’s done, you should be able to call the method within the `onPress` method of the SetContainer:\n\n``` javascript\n    \u003cSetContainer\n      ...\n      onPress={() =\u003e {\n        if (this.props.user == \"me\") {\n          this.props.incrementSet(item.key, item.reps); // add this\n        }\n      }}\n    /\u003e\n```\n\nAt this point, clicking on a set should increment the number inside it.\n\n### Emit client events\n\nNow we’re ready to implement the tracking tab. \n\nStart by importing Pusher:\n\n``` javascript\n    // app/screens/LogWorkout.js\n    import Pusher from \"pusher-js/react-native\";\n```\n\nNext, initialize the class variables that we’re going to use:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      this.pusher = null;\n      this.my_channel = null; // the channel of the current user\n      this.followed_channel = null; // the channel of the user they followed\n    }\n```\n\nInside `componentDidMount`, add the code for initializing Pusher. Supply the credentials found in your Pusher app instance’s settings page. Leave the `authEndpoint` for now, we will supply it later once we run the server. Once that’s done, subscribe the user to their own channel (the unique `username` generated for them). In this case, we’re prefixing the channel name with `private-` to specify that this is a [private channel](https://pusher.com/docs/client_api_guide/client_private_channels). This specific channel type allows us to emit events directly from the app. Since it’s private, we have to authenticate through a server (the one inside the `server` directory of the project), that’s what the `authEndpoint` is for:\n\n``` javascript\n    componentDidMount() {\n      // previous code here\n    \n      // add these:\n      this.pusher = new Pusher(\"YOUR PUSHER APP KEY\", {\n        authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n        cluster: \"YOUR_PUSHER_APP_CLUSTER\",\n        encrypted: true\n      });\n    \n      this.my_channel = this.pusher.subscribe(`private-user-${username}`);\n      this.my_channel.bind(\"pusher:subscription_error\", status =\u003e {\n        Alert.alert(\n          \"Error occured\",\n          \"Cannot connect to Pusher. Please restart the app.\"\n        );\n      });\n    \n      this.my_channel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n        console.log(\"subscription to my channel ok!\");\n      });\n    }\n```\n\nNext, inside the `render` method, we need to check whether `my_channel` is initialized before we render anything. This allows us to supply it as a prop to AddExerciseModal, AddSetModal, and ConnectedFlatList:\n\n``` javascript\n    render() {\n      return (\n        \u003cProvider store={store}\u003e\n          \u003cView\u003e\n          {\n            this.props.navigation.state.routeName == \"Log\" \u0026\u0026 this.my_channel \u0026\u0026 (\n              \u003cView style={styles.log_content}\u003e\n                \u003cView style={styles.top_content}\u003e\n                  ...\n                \u003c/View\u003e\n                \u003cAddExerciseModal channel={this.my_channel} /\u003e\n                \u003cAddSetModal channel={this.my_channel} /\u003e\n                \n                \u003cConnectedFlatList user={\"me\"} channel={this.my_channel} /\u003e\n              \u003c/View\u003e  \n            )\n          }\n          \u003c/View\u003e\n        \u003c/Provider\u003e\n      );\n    }\n```\n\nWhy do we need to add `my_channel` as a prop to those three components you ask? That’s because we need to trigger client events when a specific action happens. In this case, the actions are:\n\n- Adding a new exercise.\n- Adding a new set.\n- Incrementing a set.\n\nLet’s quickly run through all the places which needs updating:\n\n``` javascript\n    // app/modals/AddExerciseModal.js\n    addExercise = () =\u003e {\n      if (this.state.exercise_name) {\n        this.props.addExercise(id, name); // already added\n        \n        // add this\n        this.props.channel.trigger(\"client-added-exercise\", {\n          id,\n          name\n        });\n        \n        // rest of the code\n      }\n    };\n\n\n    // app/models/AddSetModal.js\n    addSet = () =\u003e {\n      if (this.state.weight) {\n        this.props.addSet(id, exercise_id, weight); // already added\n        // add this\n        this.props.channel.trigger(\"client-added-set\", {\n          id,\n          exercise_id,\n          weight\n        });\n        \n        // rest of the code\n      }    \n    };\n\n\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    \n    \u003cSetContainer\n      ...\n      onPress={() =\u003e {\n        if (this.props.user == \"me\") {\n          this.props.incrementSet(item.key, item.reps); // already added\n          // add this\n          this.props.channel.trigger(\"client-incremented-set\", {\n            set_id: item.key,\n            reps: item.reps\n          });\n        }\n      }}\n    /\u003e\n```\n\nThe codes we’ve added above should be fairly easy to understand. We’re emitting a [client event](https://pusher.com/docs/client_api_guide/client_events) via the `channel` prop we’ve passed from the LogWorkout screen. The `trigger` method accepts the name of the event as its first argument, and an object containing the data we want to emit as its second.\n\nNote that client events should always be prefixed with `client-`. This allows Pusher to determine that this event is sent from the client.\n\n### Listen for client events\n\nThe final step is to add the code for subscribing to the user entered in the tracking tab and listening to events as they get fired. We execute the code below when the user clicks on the button with a right arrow in the tracking tab:\n\n``` javascript\n    // app/screens/LogWorkout.js\n    \n    subscribe = () =\u003e {\n      this.followed_channel = this.pusher.subscribe(\n        `private-user-${this.state.subscribedToUsername}`\n      );\n    \n      this.followed_channel.bind(\"pusher:subscription_error\", status =\u003e {\n        Alert.alert(\n          \"Error occured\",\n          \"Cannot connect to Pusher. Please restart the app.\"\n        );\n      });\n    \n      this.followed_channel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n        Alert.alert(\"Success\", \"You are now subscribed!\"); // let the user know that the subscription succeeded\n        \n        // listen for the events that we've emitted earlier\n        this.followed_channel.bind(\"client-added-exercise\", data =\u003e {\n          store.dispatch(addedExercise(data.id, data.name, \"others\")); // dispatch the action to update the UI for the tracking tab\n        });\n    \n        this.followed_channel.bind(\"client-added-set\", data =\u003e {\n          store.dispatch(\n            addedSet(data.id, data.exercise_id, data.weight, \"others\")\n          );\n        });\n    \n        this.followed_channel.bind(\"client-incremented-set\", data =\u003e {\n          store.dispatch(incrementedSet(data.set_id, data.reps, \"others\"));\n        });\n      });\n    };\n```\n\n## Running the app\n\nNow that we’ve added all of the relevant code, the app should work after we’ve added all the config and linked it to its server component.\n\nStart by adding your Pusher app credentials to the `server/.env` file:\n\n```\n    APP_ID=YOUR_PUSHER_APP_ID\n    APP_KEY=YOUR_PUSHER_APP_KEY\n    APP_SECRET=YOUR_PUSHER_APP_SECRET\n    APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n    PORT=3000\n```\n\nOnce that’s done, run the server:\n\n```\n    node server.js\n```\n\nNext, add your ngrok auth token and expose port 3000 to the internet:\n\n```\n    ./ngrok authToken YOUR_NGROK_AUTH_TOKEN\n    ./ngrok http 3000\n```\n\nNgrok should show the https URL for the server. Copy it to your Pusher `authEndpoint` in the LogWorkout screen:\n\n``` javascript\n    // app/screens/LogWorkout.js\n    this.pusher = new Pusher(\"YOUR_PUSHER_APP_KEY\", {\n      authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n      cluster: \"YOUR_PUSHER_APP_CLUSTER\",\n      encrypted: true\n    });\n```\n\nOnce that’s done, the app should be fully functional. Try running it on two devices:\n\n```\n    expo start\n```\n\n## Conclusion\n\nIn this tutorial, you learned how to use Pusher within a React Native app to create a realtime workout tracking app. Along the way, you’ve solidified your experience with basic Redux concepts and Pusher Channels.\n\nYou can view the source code of this app on this [GitHub repo](https://github.com/anchetaWern/RNWorkout).","metaTitle":" Create a live workout tracking app with React Native","metaDescription":"Use React Native and Node to build a workout tracking app. Users will log and share workouts and follow each other's progress."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1H4DMn3JwsicCySuGmGo8Q","type":"Entry","createdAt":"2018-10-29T22:15:40.359Z","updatedAt":"2020-06-19T13:45:39.496Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":16,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a To Do app with React Native and Expo","url":"build-to-do-app-react-native-expo","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6ac2UAo0ZUWeUYiMg2w8eK","type":"Entry","createdAt":"2018-10-03T18:51:52.293Z","updatedAt":"2018-10-03T18:51:52.293Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Aman Mittal","url":"aman-mittal","email":"amanmittal.work@gmail.com","twitter":"https://twitter.com/amanhimself","github":"https://github.com/amandeepmittal","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"NnKmQxhMC4UySeaEaK4K6","type":"Entry","createdAt":"2018-10-18T18:00:28.031Z","updatedAt":"2018-10-18T18:00:28.031Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Expo","url":"expo","type":"library"}}],"reviewDate":"2018-10-18","description":"Build a To Do app using React Native and Expo for cross platform development and faster deployment","prerequisite":"To follow this tutorial you will need a basic understanding of JavaScript, Node.js and React Native","content":"# Build a t**o** **do app with React Native and Expo**\nReact Native is a framework for building native mobile apps using JavaScript. React Native is based on the same core concepts as ReactJS, giving you, the developer, the power to compose a cross-platform mobile UI by writing JavaScript components.\n\nReact Native differs from other hybrid mobile app solutions. It does not use a WebView that renders HTML elements inside an app. It has its own API and by using it, you build mobile apps with native iOS/Android UI components. React Native apps are written in JavaScript. Behind the scenes, React Native is a bridge between JavaScript and other native platform specific components.\n\nIn this article, we are going to build a to do application to understand and get hands-on experience with React Native. This mobile application will be cross-platform meaning it will run both on Android and iOS devices. I am going to use Expo for faster development to generate and run the demo in no time. Expo will take care of all the behind the scenes things for us such adding native modules when using vector icons in the demo application. You are only going to focus on the development process for a deeper understanding.\n\n\n## Prerequisites\n\nTo get started you will need three things to follow this article.\n\n- [Node.js](https://nodejs.org)(\u003e=8.12.0)\n- [Expo CLI](https://expo.io/tools) (\u003e= 2.2.0)\n[](https://expo.io/tools)\nTo install `expo-cli`, please run the following command.\n\n`npm install -g expo-cli`\n\n\n## Why use Expo?\n\nYou should consider using Expo for a React Native application because it handles a lot of hard tasks itself and provides smooth APIs that work with a React Native app outside the box. It is open source and is free to use. It provides a client app and by downloading it from the respective stores based on the mobile platform your device runs, you can easily test applications on real devices.\n\nThat said, Expo also has some drawbacks. For example, Expo's API currently does not have support for features like Bluetooth.  It works fine with camera, maps, location tracking, analytics, push notifications and so on. Distributing an Expo app is easy too. You can complete the process just by running the command `expo publish` and it will handle the build process and other tasks by running them behind the scene. It has a dedicated store where you can publish apps for others to use. Quite helpful in prototyping.\n\n**Side note: Why not Create-React-Native-App?**\nJust like React, React Native has its own boilerplate that depends on Expo for a faster development process, called [create-react-native-app](https://github.com/react-community/create-react-native-app). It works with zero build configuration just like Expo. Recently, the CRNA project has been merged with `expo-cli` project since both are identical in working.\n\n\n## What are we building?\n![How app looks in action?](https://d2mxuefqeaa7sj.cloudfront.net/s_21CA7D0E2F258DD2425AA73DD44B70100C76B75D0C5466A11D9EB0C2B6E72731_1540449382482_todo-demo.gif)\n\n\n\n## Getting started\n\nWrite the following command in your terminal to start a project.\n\n```\nexpo init rn 'To Do' s-example\n```\nWhen Expo's command line interface completes running the package manager, it generates a directory with name you gave in the above command. Open your favorite text editor/IDE and go to a file called `App.js`. This is what runs the application. You can test the content of the default app generated by running the following command.\n\n`expo-cli start`\n\nThe below is what you will get in your terminal. It runs the bundler which further triggers the execution of the application. Depending on the OS you are on, you can either use iOS simulator or Android emulator to run this application in development mode. The third option is to install the Expo client on your real device and scan the QR code as shown.\n\n\n![](https://d2mxuefqeaa7sj.cloudfront.net/s_21CA7D0E2F258DD2425AA73DD44B70100C76B75D0C5466A11D9EB0C2B6E72731_1539260940043_ss2.png)\n\n\nBy default, the code in `App.js` looks like this:\n\n\n    import React from 'react';\n    import { StyleSheet, Text, View } from 'react-native';\n    export default class App extends React.Component {\n      render() {\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cText\u003eOpen up App.js to start working on your app!\u003c/Text\u003e\n          \u003c/View\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }\n    }); \n\nOnce you run the app in its current state, you will see the following result.\n\n\n![](https://d2mxuefqeaa7sj.cloudfront.net/s_21CA7D0E2F258DD2425AA73DD44B70100C76B75D0C5466A11D9EB0C2B6E72731_1539260946977_ss3.png)\n\n\nWe will replace it with following:\n\n\n    // App.js\n    import React from 'react';\n    import Main from './app/Main';\n    export default class App extends React.Component {\n      render() {\n        return \u003cMain /\u003e;\n      }\n    }\n\nTake a look at the directory structure of our demo app.\n\n\n![](https://d2mxuefqeaa7sj.cloudfront.net/s_21CA7D0E2F258DD2425AA73DD44B70100C76B75D0C5466A11D9EB0C2B6E72731_1539260955467_ss4.png)\n\n\nIn a more complex application, you will find a folder called `screens`. Since we are using only one screen in the file `Main.js` you do not have to define it explicitly.\n\nDid you notice the other two directories: `utils` and `components`?\n\nInside the `utils` directory, I am keeping all the global variables or API calls we need to make. Though in our demo there are no external API calls. I have defined some global variables. Name this file, `Colors.js`.\n\n\n    // app/utils/Colors.js\n    const primaryStart = '#f18a69';\n    const primaryEnd = '#d13e60';\n    export const primaryGradientArray = [primaryStart, primaryEnd];\n    export const lightWhite = '#fcefe9';\n    export const inputPlaceholder = '#f1a895';\n    export const lighterWhite = '#f4e4e2';\n    export const circleInactive = '#ecbfbe';\n    export const circleActive = '#90ee90';\n    export const itemListText = '#555555';\n    export const itemListTextStrike = '#c4c4cc';\n    export const deleteIconColor = '#bc2e4c';\n\nIt contains all the hex values of colors that we can re-use in many different places of our application. Defining global variables for the purpose of re-using them is a common practice in React Native community.\n\nThe `components` directory further contain re-usable components used in our to do application.\n\n\n## Building a header\n\nTo build the header for our application, we need three things: status bar, background color (we are going to use the same background for the whole screen instead of just header) and header title itself. Let's start with the status bar. Notice the status bar of our application. We are changing it to white so that it will be acceptable once we add a background to our Main screen.\n\nThis can be done by importing the `StatusBar` component from `react-native`. We will be using `barStyle` prop to change color. For only Android devices, you can change the height of the status bar by using `currentHeight` prop. iOS does not allow this.\n\nFor the background, I am going to add a gradient style to our view component. Expo supports this out of the box and you can directly import the component and use it like below.\n\n\n    // App.js\n    import React from 'react';\n    import { StyleSheet, Text, View, StatusBar } from 'react-native';\n    import { LinearGradient } from 'expo';\n    import { primaryGradientArray } from './utils/Colors';\n    export default class Main extends React.Component {\n      render() {\n        return (\n          \u003cLinearGradient colors={primaryGradientArray} style={styles.container}\u003e\n            \u003cStatusBar barStyle=\"light-content\" /\u003e;\n            \u003cText\u003eOpen up App.js to start working on your app!\u003c/Text\u003e\n          \u003c/LinearGradient\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1\n      }\n    });\n\n`LinearGradient` component is a wrapper over the React Native's `View` core component. It provides a gradient looking background. It takes at least two values in the array `colors` as props. We are importing the array from `utitls/Colors.js`. Next, we create re-usable `Header` component inside the `components` directory.\n\n\n    // app/components/Header.js\n    import React from 'react';\n    import { View, Text, StyleSheet } from 'react-native';\n    const Header = ({ title }) =\u003e (\n      \u003cView style={styles.headerContainer}\u003e\n        \u003cText style={styles.headerText}\u003e{title.toUpperCase()}\u003c/Text\u003e\n      \u003c/View\u003e\n    );\n    const styles = StyleSheet.create({\n      headerContainer: {\n        marginTop: 40\n      },\n      headerText: {\n        color: 'white',\n        fontSize: 22,\n        fontWeight: '500'\n      }\n    });\n    export default Header;\n\n\nImport it in `Main.js` and add a title of your app.\n\n\n    // app/Main.js\n    // after all imports\n    import Header from './components/Header';\n    const headerTitle = 'To Do';\n    // after status bar, replace the \u003cText\u003e with\n    \u003cView style={styles.centered}\u003e\n      \u003cHeader title={headerTitle} /\u003e\n    \u003c/View\u003e;\n    // add styles\n    centered: {\n      alignItems: 'center';\n    }\n\nObserve that we are passing the title of the app as a prop to `Header` component. You can definitely use the same component again in the application if needed.\n\n## TextInput\n\nIn React Native, to record the user input we use `TextInput`. It uses the device keyboard, or in case of a simulator, you can use the hardware keyboard too. It has several configurable props with features such as auto-correction, allow multi-line input, placeholder text, set the limit of characters to be entered, different keyboard styles and so on. For our to do app, we are going to use several of these features.\n\n\n    // app/components/Input.js\n    import React from 'react';\n    import { StyleSheet, TextInput } from 'react-native';\n    import { inputPlaceholder } from '../utils/Colors';\n    const Input = ({ inputValue, onChangeText, onDoneAddItem }) =\u003e (\n      \u003cTextInput\n        style={styles.input}\n        value={inputValue}\n        onChangeText={onChangeText}\n        placeholder=\"Type here to add note.\"\n        placeholderTextColor={inputPlaceholder}\n        multiline={true}\n        autoCapitalize=\"sentences\"\n        underlineColorAndroid=\"transparent\"\n        selectionColor={'white'}\n        maxLength={30}\n        returnKeyType=\"done\"\n        autoCorrect={false}\n        blurOnSubmit={true}\n        onSubmitEditing={onDoneAddItem}\n      /\u003e\n    );\n    const styles = StyleSheet.create({\n      input: {\n        paddingTop: 10,\n        paddingRight: 15,\n        fontSize: 34,\n        color: 'white',\n        fontWeight: '500'\n      }\n    });\n    export default Input;\n\nIgnore the props for now that are incoming from its parent component. For a while focus only on the props it has. Let us go through each one of them.\n\n\n- *value*: the value of the text input. By default, it will be an empty string since we are using the local state to set it. As the state updates, the value of the text input updates.\n- *onChangeText*: is a callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n- *placeholder*: just like in HTML, placeholder is to define a default message in the input field indicating as if what is expected.\n- *placeholderTextColor*: the custom text color of the placeholder string.\n- *returnKeyType*: determines how the return key on the device's keyboard should look. You can find more values or platform specific values [here](https://facebook.github.io/react-native/docs/textinput.html#returnkeytype). Some of the values are specific to each platform.\n- *autoCorrect*: this prop let us decide whether to show the autocorrect bar along with keyboard or not. In our case, we have set it to *false*.\n- *multiline*: if true, the text input can be multiple lines. Like we have set in above.\n- *maxlength*: helps you define the maximum number of characters that you can allow for the user to enter.\n- *autoCapitalize*: to automatically capitalize certain characters. We are passing `sentences` as the default value. This means, every new sentence will automatically have its first character capitalized.\n- *underlineColorAndroid*: works only with android. It prompts sets a bottom border or an underline.\n- *blurOnSubmit*: In case of multiline TextInput field, this behaves as when pressing return key, it will blur the field and trigger the `onSubmitEditing` event instead of inserting a newline into the field.\n- *onSubmitEditing*: contains the business the logic in form of a callback as to what to do when the return key or input's submit button is pressed. We will be defining this callback in `Main.js`.\n\nTo add this component to `Main.js` you will have to import it. The props we are passing to the `Input` component at `inputValue` are from the state of `Main`. Other such as `onChangeText` is a custom method. Define them inside the `Main` component.\n\n\n    // app/Main.js\n    import React from 'react';\n    import { StyleSheet, Text, View, StatusBar } from 'react-native';\n    import { LinearGradient } from 'expo';\n    import { gradientStart, gradientEnd } from './utils/Colors';\n    import Header from './components/Header';\n    import Input from './components/Input';\n    const headerTitle = 'To Do';\n    export default class Main extends React.Component {\n      state = {\n        inputValue: ''\n      };\n      newInputValue = value =\u003e {\n        this.setState({\n          inputValue: value\n        });\n      };\n      render() {\n        const { inputValue } = this.state;\n        return (\n          \u003cLinearGradient\n            colors={[gradientStart, gradientEnd]}\n            style={styles.container}\n          \u003e\n            \u003cStatusBar barStyle=\"light-content\" /\u003e\n            \u003cView style={styles.centered}\u003e\n              \u003cHeader title={headerTitle} /\u003e\n            \u003c/View\u003e\n            \u003cView style={styles.inputContainer}\u003e\n              \u003cInput inputValue={inputValue} onChangeText={this.newInputValue} /\u003e\n            \u003c/View\u003e\n          \u003c/LinearGradient\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1\n      },\n      centered: {\n        alignItems: 'center'\n      },\n      inputContainer: {\n        marginTop: 40,\n        paddingLeft: 15\n      }\n    });\n\n\n## Building the list component\n\nTo add the value from the `Input` component and display it on the screen, we are going to use the below code. Create a new file called `List.js` inside the components directory.\n\n\n    // app/components/List.js\n    import React, { Component } from 'react';\n    import {\n      View,\n      Text,\n      Dimensions,\n      StyleSheet,\n      TouchableOpacity,\n      Platform\n    } from 'react-native';\n    import { MaterialIcons } from '@expo/vector-icons';\n    import {\n      itemListText,\n      itemListTextStrike,\n      circleInactive,\n      circleActive,\n      deleteIconColor\n    } from '../utils/Colors';\n    const { height, width } = Dimensions.get('window');\n    class List extends Component {\n      onToggleCircle = () =\u003e {\n        const { isCompleted, id, completeItem, incompleteItem } = this.props;\n        if (isCompleted) {\n          incompleteItem(id);\n        } else {\n          completeItem(id);\n        }\n      };\n      render() {\n        const { text, deleteItem, id, isCompleted } = this.props;\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cView style={styles.column}\u003e\n              \u003cTouchableOpacity onPress={this.onToggleCircle}\u003e\n                \u003cView\n                  style={[\n                    styles.circle,\n                    isCompleted\n                      ? { borderColor: circleActive }\n                      : { borderColor: circleInactive }\n                  ]}\n                /\u003e\n              \u003c/TouchableOpacity\u003e\n              \u003cText\n                style={[\n                  styles.text,\n                  isCompleted\n                    ? {\n                        color: itemListTextStrike,\n                        textDecorationLine: 'line-through'\n                      }\n                    : { color: itemListText }\n                ]}\n              \u003e\n                {text}\n              \u003c/Text\u003e\n            \u003c/View\u003e\n            {isCompleted ? (\n              \u003cView style={styles.button}\u003e\n                \u003cTouchableOpacity onPressOut={() =\u003e deleteItem(id)}\u003e\n                  \u003cMaterialIcons\n                    name=\"delete-forever\"\n                    size={24}\n                    color={deleteIconColor}\n                  /\u003e\n                \u003c/TouchableOpacity\u003e\n              \u003c/View\u003e\n            ) : null}\n          \u003c/View\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      container: {\n        width: width - 50,\n        flexDirection: 'row',\n        borderRadius: 5,\n        backgroundColor: 'white',\n        height: width / 8,\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        marginVertical: 5,\n        ...Platform.select({\n          ios: {\n            shadowColor: 'rgb(50,50,50)',\n            shadowOpacity: 0.8,\n            shadowRadius: 2,\n            shadowOffset: {\n              height: 2,\n              width: 0\n            }\n          },\n          android: {\n            elevation: 5\n          }\n        })\n      },\n      column: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        width: width / 1.5\n      },\n      text: {\n        fontWeight: '500',\n        fontSize: 16,\n        marginVertical: 15\n      },\n      circle: {\n        width: 30,\n        height: 30,\n        borderRadius: 15,\n        borderWidth: 3,\n        margin: 10\n      },\n      button: {\n        marginRight: 10\n      }\n    });\n    export default List;\n\nOur `List` component uses `TouchableOpactiy` from React Native that behaves like a button but responds to touch on a mobile rather than a normal button as we use in web. It also makes use of different colors that we defined earlier. We are also defining a method called `toggleCircle` that will respond to the `onPress` action on `TouchableOpacity` that accordingly respond by checking or unchecking the to do list item.\n\n`@expo/vector-icons` is provided by Expo to add icons from different libraries such as FontAwesome, IonIcons, MaterialIcons, etc. This is where Expo comes in handy. You do not have to add most of the third party `npm` packages manually in our app. The vector icons are also available as third party library called [react-native-vector-icons](https://www.npmjs.com/package/react-native-vector-icons \"React Native Vector Icons\") and are already included in the Expo core.\n\n`Dimensions` is a component that helps us to set the initial width and height of a component before the application runs. We are using its `get()` method to acquire any device's width and height.\n\nReact Native provides an API module called `Platform` that detects the platform on which the app is running. You can use the detection logic to implement platform-specific code for styling just like we did above or with any other component. To use `Platform` module, we have to import it from React Native. We are using it to apply styles in the form of shadow that will appear under the every row component when a to do item is being add.\n\nTo make this work, we are going to use `ScrollView` lists and import this component as a child in `Main.js`.\n\n\n    \u003cView style={styles.list}\u003e\n      \u003cScrollView contentContainerStyle={styles.scrollableList}\u003e\n        {Object.values(allItems)\n          .reverse()\n          .map(item =\u003e (\n            \u003cList\n              key={item.id}\n              {...item}\n              deleteItem={this.deleteItem}\n              completeItem={this.completeItem}\n              incompleteItem={this.incompleteItem}\n            /\u003e\n          ))}\n      \u003c/ScrollView\u003e\n    \u003c/View\u003e\n\n`ScrollView` is a wrapper on the `View` component that provides the user interface for scrollable lists inside a React Native app. It is a generic scrolling container that can host multiple other components and views. It works both ways, vertical by default and `horizontal` by setting the property itself. We will be using this component to display the list of to do items, just after the `Input`.\n\nTo provide styles to it, it uses a prop called `contentContainerStyle`.\n\n\n    // app/Main.js\n    list: {\n        flex: 1,\n        marginTop: 70,\n        paddingLeft: 15,\n        marginBottom: 10\n      },\n      scrollableList: {\n        marginTop: 15\n      },\n\nDon’t worry if you don’t understand all the code inside the `ScrollView` component. Our next step is to add some custom methods and interact with realtime data, after that you will be able familiar with all the pieces.\n\n\n## Understanding AsyncStorage\n\nAccording to the [React Native](https://facebook.github.io/react-native/docs/asyncstorage) [documentation](https://facebook.github.io/react-native/docs/asyncstorage) , `AsyncStorage` is defined as:\n\n\n\u003e a simple, unencrypted, asynchronous, persistent, key-value storage system that is global to the app. It should be used instead of LocalStorage.\n\n\n\u003e On iOS, AsyncStorage is backed by native code that stores small values in a serialized dictionary and larger values in separate files. On Android, AsyncStorage will use either RocksDB or SQLite based on what is available.\n\nThe CRUD operations are going to be used in the application using AsyncStorage such that our application is able to perform these operations with realtime data on the device. We are going to associate multiple operations for each to do item in the list, such as adding, deleting, editing and so on, as basically these are CRUD operations. We are going to use objects instead of an array to store these items. Operating CRUD operations on an `Object` is going to be easier in our case. We will be identifying each object through a unique ID. In order to generate unique IDs we are going to install a module called `uuid`.\n\nIn order to proceed, first we need to run this command:\n\n\n    npm install\n    # after it runs successfully,\n    npm install --save uuid\n\nThe structure of each to do item is going to be like this:\n\n\n    232390: {\n      id: 232390,           // same id as the object\n      text: 'New item',     // name of the To Do item\n      isCompleted: false,   // by default\n      createdAt: Date.now()\n    }\n\nWe are going to perform CRUD operations in our application to work on an object instead of an array. To read values from an object we are using `Object.values(allItems)`, where `allItems` is the object that stores all to do list items. We have to add it as an empty object in our local state. This also allows us to `map()` and traverse each object inside it just like an array. Another thing we have to implement before we move on to CRUD operations is to add the new object of a to do item when created at the end of the list. For this we can use `reverse()` method from JavaScript. This is how our complete `Main.js` file looks like.\n\n\n    // app/Main.js\n    import React from 'react';\n    import {\n      StyleSheet,\n      View,\n      StatusBar,\n      ActivityIndicator,\n      ScrollView,\n      AsyncStorage\n    } from 'react-native';\n    import { LinearGradient } from 'expo';\n    import uuid from 'uuid/v1';\n    import { primaryGradientArray } from './utils/Colors';\n    import Header from './components/Header';\n    import SubTitle from './components/SubTitle';\n    import Input from './components/Input';\n    import List from './components/List';\n    import Button from './components/Button';\n    const headerTitle = 'To Do';\n    export default class Main extends React.Component {\n      state = {\n        inputValue: '',\n        loadingItems: false,\n        allItems: {},\n        isCompleted: false\n      };\n      componentDidMount = () =\u003e {\n        this.loadingItems();\n      };\n      newInputValue = value =\u003e {\n        this.setState({\n          inputValue: value\n        });\n      };\n      loadingItems = async () =\u003e {\n        try {\n          const allItems = await AsyncStorage.getItem('ToDos');\n          this.setState({\n            loadingItems: true,\n            allItems: JSON.parse(allItems) || {}\n          });\n        } catch (err) {\n          console.log(err);\n        }\n      };\n      onDoneAddItem = () =\u003e {\n        const { inputValue } = this.state;\n        if (inputValue !== '') {\n          this.setState(prevState =\u003e {\n            const id = uuid();\n            const newItemObject = {\n              [id]: {\n                id,\n                isCompleted: false,\n                text: inputValue,\n                createdAt: Date.now()\n              }\n            };\n            const newState = {\n              ...prevState,\n              inputValue: '',\n              allItems: {\n                ...prevState.allItems,\n                ...newItemObject\n              }\n            };\n            this.saveItems(newState.allItems);\n            return { ...newState };\n          });\n        }\n      };\n      deleteItem = id =\u003e {\n        this.setState(prevState =\u003e {\n          const allItems = prevState.allItems;\n          delete allItems[id];\n          const newState = {\n            ...prevState,\n            ...allItems\n          };\n          this.saveItems(newState.allItems);\n          return { ...newState };\n        });\n      };\n      completeItem = id =\u003e {\n        this.setState(prevState =\u003e {\n          const newState = {\n            ...prevState,\n            allItems: {\n              ...prevState.allItems,\n              [id]: {\n                ...prevState.allItems[id],\n                isCompleted: true\n              }\n            }\n          };\n          this.saveItems(newState.allItems);\n          return { ...newState };\n        });\n      };\n      incompleteItem = id =\u003e {\n        this.setState(prevState =\u003e {\n          const newState = {\n            ...prevState,\n            allItems: {\n              ...prevState.allItems,\n              [id]: {\n                ...prevState.allItems[id],\n                isCompleted: false\n              }\n            }\n          };\n          this.saveItems(newState.allItems);\n          return { ...newState };\n        });\n      };\n      deleteAllItems = async () =\u003e {\n        try {\n          await AsyncStorage.removeItem('ToDos');\n          this.setState({ allItems: {} });\n        } catch (err) {\n          console.log(err);\n        }\n      };\n      saveItems = newItem =\u003e {\n        const saveItem = AsyncStorage.setItem('To Dos', JSON.stringify(newItem));\n      };\n      render() {\n        const { inputValue, loadingItems, allItems } = this.state;\n        return (\n          \u003cLinearGradient colors={primaryGradientArray} style={styles.container}\u003e\n            \u003cStatusBar barStyle=\"light-content\" /\u003e\n            \u003cView style={styles.centered}\u003e\n              \u003cHeader title={headerTitle} /\u003e\n            \u003c/View\u003e\n            \u003cView style={styles.inputContainer}\u003e\n              \u003cSubTitle subtitle={\"What's Next?\"} /\u003e\n              \u003cInput\n                inputValue={inputValue}\n                onChangeText={this.newInputValue}\n                onDoneAddItem={this.onDoneAddItem}\n              /\u003e\n            \u003c/View\u003e\n            \u003cView style={styles.list}\u003e\n              \u003cView style={styles.column}\u003e\n                \u003cSubTitle subtitle={'Recent Notes'} /\u003e\n                \u003cView style={styles.deleteAllButton}\u003e\n                  \u003cButton deleteAllItems={this.deleteAllItems} /\u003e\n                \u003c/View\u003e\n              \u003c/View\u003e\n              {loadingItems ? (\n                \u003cScrollView contentContainerStyle={styles.scrollableList}\u003e\n                  {Object.values(allItems)\n                    .reverse()\n                    .map(item =\u003e (\n                      \u003cList\n                        key={item.id}\n                        {...item}\n                        deleteItem={this.deleteItem}\n                        completeItem={this.completeItem}\n                        incompleteItem={this.incompleteItem}\n                      /\u003e\n                    ))}\n                \u003c/ScrollView\u003e\n              ) : (\n                \u003cActivityIndicator size=\"large\" color=\"white\" /\u003e\n              )}\n            \u003c/View\u003e\n          \u003c/LinearGradient\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1\n      },\n      centered: {\n        alignItems: 'center'\n      },\n      inputContainer: {\n        marginTop: 40,\n        paddingLeft: 15\n      },\n      list: {\n        flex: 1,\n        marginTop: 70,\n        paddingLeft: 15,\n        marginBottom: 10\n      },\n      scrollableList: {\n        marginTop: 15\n      },\n      column: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between'\n      },\n      deleteAllButton: {\n        marginRight: 40\n      }\n    });\n    ```\n\nLet us take a look at the custom CRUD methods. `onDoneAddItem()` starts by invoking `this.setState` that has access to a `prevState` object if the input value is not empty. It gives us any to do item that has been previously added to our list. Inside its callback, we will first create a new ID using `uuid` and then create an object called `newItemObject` which uses the ID as a variable for the name. Then, we create a new object called `newState` which uses the `prevState` object, clears the `TextInput` for `newInputValue` and finally adds our `newItemObject` at the end of the other to do items list. It might sound overwhelming since a lot is going on but try implementing the code, you will understand it better.\n\nTo delete an item from the to do list object, we have to get the id of the item from the state. In `Main.js` we have `deleteItem`.\n\n\n    // app/Main.js\n    deleteItem = id =\u003e {\n      this.setState(prevState =\u003e {\n        const allItems = prevState.allItems;\n        delete allItems[id];\n        const newState = {\n          ...prevState,\n          ...allItems\n        };\n        this.saveItems(newState.allItems);\n        return { ...newState };\n      });\n    };\n\nThis is further passed as a prop to our `List` component as `deleteItem={this.deleteItem}`. We are adding the `id` of an individual to do item since we are going to use this `id` to delete the item from the list.\n\nThe `completeItem` and `incompleteItem` track which items in the to do list have been marked completed by the user or have been unmarked. In `AsyncStorage` the items are saved in strings. It cannot store objects. So when saving the item if you are not using `JSON.stringify()` your app is going to crash. Similarly, when fetching the item from the storage, we have to parse it using `JSON.parse()` like we do above in `loadingItems()` method.\n\n\n    const saveTo Dos = AsyncStorage.setItem('ToDos', JSON.stringify(newTo Dos));\n\nHere, you can say that `ToDos` is the name of the collection. `setItem()` function from `AsyncStorage` is similar to any key-value paired database. The first item `ToDos` is the key, and `newItem` is going to be the value, in our case the to do list items as different objects. I have already described the structure of data we are using to create each to do list item.\n\nTo verify that the data is getting saved on the device, we can restart the application. But how is our application fetching the data from device's storage? This is done by an asynchronous function we have defined called `loadingItems`. Since it is asynchronous, we have to wait till the application is done reading data from the device's storage. Usually, nowadays smartphones do not take much time to perform this action. To run this asynchronous function we use React's lifecycle hook `componentDidMount` which is called immediately after a component is initialized.\n\n\n    // app/Main.js\n    componentDidMount = () =\u003e {\n      this.loadingItems();\n    };\n    loadingItems = async () =\u003e {\n      try {\n        const allItems = await AsyncStorage.getItem('ToDos');\n        this.setState({\n          loadingItems: true,\n          allItems: JSON.parse(allItems) || {}\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n`loadingItems` is then used inside a conditional operator which can be defined as if the data is read from storage, you can render the `List` component or otherwise just render a loading component provided by `ActivityIndicator` which again comes as a React Native core module.\nLastly, `AsyncStorage` also provides a function to clear all application data in one touch by executing `removeItem()` function.\n\n\n    deleteAllItems = async () =\u003e {\n      try {\n        await AsyncStorage.removeItem('To Dos');\n        this.setState({ allItems: {} });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n\n\n## Running the app\n\nNow that we have connected all of our components, go to the terminal and run the command `expo-cli start` if the app isn’t already running in the iOS simulator or Android emulator. The `start` command starts or restarts a local server for your app and gives you a URL or QR code. You can press `a` for Android emulator or `i` for iOS simulator. \n\nAfter you have successfully started the application, you can start playing with it by adding to do items in the `WHAT'S NEXT?` section. Items successfully added will appear under the heading `Recent Notes` as shown below.\n\n\n![](https://d2mxuefqeaa7sj.cloudfront.net/s_21CA7D0E2F258DD2425AA73DD44B70100C76B75D0C5466A11D9EB0C2B6E72731_1540560453953_omgg.png)\n\n## Conclusion\n\nI leave the `SubTitle` component for you to customize. It is the same as `Header` but it is being used twice in our application. Refer to `Main.js` file to see where it is used.\n\nThis completes our tutorial for building a React Native Application from scratch using Expo. You can add more functionality such as updating the list item by making use of the created `Date` field we added to our data model. The possibilities to enhance this application are endless. For example, you can add another functionality for updating the text of a list item. You can add an icon next to the delete item and then let the user select which item they want to edit.\n\nYou now have an in-depth understanding of how things work in React Native and why there is much less difference between React Native and Expo. You can find the complete code for this project here: [](https://github.com/amandeepmittal/rn-todos-example)[GitHub](https://github.com/amandeepmittal/rn-todos-example).\n\n","metaTitle":"Build a To Do app with React Native and Expo","metaDescription":"Build a To Do application with React Native and Expo"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6At9wkgb72QGso08kaY8Ca","type":"Entry","createdAt":"2018-09-26T20:34:03.706Z","updatedAt":"2018-09-26T20:34:03.706Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Adding analytics to a React Native app","url":"adding-analytics-react-native-app","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-09-26","description":"In this tutorial, we’re going to look at how to integrate Segment in a React Native app. We’re specifically going to use Google Analytics as the destination for the analytics data that we gather from the app.","prerequisite":"In order to follow along, you must have basic knowledge of React Native. \nKnowledge of Google Analytics is helpful but not required.\n\nThis tutorial assumes that your computer has the React Native development environment setup. That’s Android Studio for Android and Xcode for iOS. And all the other necessary tools like Watchman and CocoaPods.","content":"In this tutorial, we’re going to look at how to integrate Segment in a React Native app. We’re specifically going to use Google Analytics as the destination for the analytics data that we gather from the app. We’ll also be using [Keen IO](https://keen.io/) to inspect and analyze the data.\n\nAdding analytics to a mobile app is a necessary step in order to understand your users better, so you can provide them with a better user experience. \n\nWhen selecting an analytics tool, it’s important to select one that allows you to save engineering time and marketing effort. One such tool is [Segment](https://segment.com/). They provide you with integrations to analytics and error tracking tools such as Google Analytics, Mixpanel, Sentry, and Rollbar. They also provide integrations to marketing tools such as Mailchimp, OneSignal, and Blueshift. You can visit their [integrations page](https://segment.com/catalog#integrations/all) for a full list of supported integrations.\n\n\n## Prerequisites\n\nIn order to follow along, you must have basic knowledge of React Native. \nKnowledge of Google Analytics is helpful but not required.\n\nThis tutorial assumes that your computer has the React Native development environment setup. That’s Android Studio for Android and Xcode for iOS. And all the other necessary tools like Watchman and CocoaPods.\n\n\n## Setting up Google Analytics\n\nThis section is divided into two sub-sections: one for users who don’t have an existing Google Analytics account, and another for those who have existing accounts. Only read through the guide that applies to you.\n\n### New accounts\n\nIf you don’t have a Google account yet, go ahead and [create one](https://accounts.google.com/signup/v2/webcreateaccount?hl=en\u0026flowName=GlifWebSignIn\u0026flowEntry=SignUp). \nNext, visit [analytics.google.com](https://analytics.google.com/) and sign in with your Google Account. If you don’t have an existing account yet, you’ll be greeted with the following screen. Click on **Sign up** to start using Google Analytics:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/analytics-react-native-sign-up-1024x246.png\" alt=\"Sign up for Google Analytics\" width=\"770\" height=\"185\" class=\"aligncenter size-large wp-image-4793\" /\u003e\n\nIt will then ask you for some information about your project:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/analytics-react-native-new-account-tracking-774x600.png\" alt=\"New account tracking\" width=\"770\" height=\"597\" class=\"aligncenter size-large wp-image-4784\" /\u003e\n\nOnce you’ve filled out all the text fields, click on the **Get Tracking ID** button. A modal window will pop-up asking you to agree to the terms of service and license agreement. If it returns an error while signing up, select **United States** as your country even if you live somewhere else. That should solve the error.\n\nOnce that’s done, you should be provided with a tracking ID.\n\n### Existing accounts\n\nIf you have an existing account Google Analytics account, click on the **Admin** menu at the bottom left of the screen and on the **Property** column, click on **Create Property**:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/analytics-react-native-existing-account-create-prop-817x600.png\" alt=\"Create property\" width=\"770\" height=\"565\" class=\"aligncenter size-large wp-image-4779\" /\u003e\n\nBut instead of selecting **Mobile app**, you have to select **Website**. This is because Google has required new properties to use Firebase for mobile app analytics. This requires you to create a [Firebase app](https://firebase.google.com/) as an additional step. More importantly, you have to connect Firebase in your Segment account later on. So to keep things simple, we’re going to stick with good old Google Analytics for this tutorial.\n\nOnce you’re on the property creation page, enter the details of your app. The **Website URL** can be your app’s website or company’s website:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/analytics-react-native-existing-account-web-1024x582.png\" alt=\"Existing account select web option for new property\" width=\"770\" height=\"438\" class=\"aligncenter size-large wp-image-4780\" /\u003e\n\nOnce the property is created, you should be provided with a tracking ID. Take note of this as you will be needing it later when you connect to Segment.\n\nNext, create a new view by clicking on the **Admin** menu and clicking **Create View** on the third column. This time, select **Mobile app** and enter your app details:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/analytics-react-native-new-view.png\" alt=\"New view\" width=\"767\" height=\"546\" class=\"aligncenter size-full wp-image-4785\" /\u003e\n\nIf at anytime you want to view your tracking ID, go to **Settings** → **Property Settings** and that should show your tracking ID:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/analytics-react-native-property-settings-958x600.png\" alt=\"Property settings\" width=\"770\" height=\"482\" class=\"aligncenter size-large wp-image-4786\" /\u003e\n\n## Setting up Segment\n\nIf you haven’t done so already, [create a new Segment account](https://app.segment.com/signup). Once you have an account, create a new workspace. Each workspace equates to a single project. A project can have multiple sources and destinations, depending on where the data is coming from (sources) and where you want to put your data (destinations):\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/analytics-react-native-segment-workspace.png\" alt=\"New Segment workspace\" width=\"689\" height=\"413\" class=\"aligncenter size-full wp-image-4791\" /\u003e\n\nNext, you need to select the platform that you want to work with. In this case, we’re going to select **My Android App**. This will serve as your source:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/analytics-react-native-segment-source.png\" alt=\"Segment select source\" width=\"799\" height=\"420\" class=\"aligncenter size-full wp-image-4790\" /\u003e\n\nReact Native deploys to both Android and iOS devices, we’re selecting Android in this case. If you want to try to add iOS later on, you can do so by adding a new source and select iOS.\n\nOnce the source is created, you can now proceed to adding a destination. Click on the **Add Destination** button:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/analytics-react-native-segment-add-destination-1-1024x328.png\" alt=\"Browse for detination\" width=\"770\" height=\"247\" class=\"aligncenter size-large wp-image-4787\" /\u003e\n\nSelect **Google Analytics** from the list that shows:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/analytics-react-native-segment-add-destination-2.png\" alt=\"Select destination\" width=\"897\" height=\"477\" class=\"aligncenter size-full wp-image-4788\" /\u003e\n\nUpdate the settings with the **Mobile Tracking ID**. This should be the tracking ID you got from the Google Analytics website earlier. Click on **Save** once you’ve added it:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/analytics-react-native-segment-add-id-1024x428.png\" alt=\"Add analytics key to Segment\" width=\"770\" height=\"322\" class=\"aligncenter size-large wp-image-4789\" /\u003e\n\nThe last step for setting up Segment is to get your write key. You can find that under your **Sources**. Earlier, we’ve added Android as a source so you can go ahead and select that and view its settings. Once you’re on the settings page, click on the **API Keys** menu on the left side of the screen. Copy the **Write Key** as this will be the one that you’re going to need to put in the React Native app later on:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/analytics-react-native-segment-write-key-1024x407.png\" alt=\"Obtain Segment write key\" width=\"770\" height=\"306\" class=\"aligncenter size-large wp-image-4792\" /\u003e\n\n## Creating the app\n\nTo give the analytics data some context, I’ve built a very simple app that allows the user to perform some actions so that we can record data while they’re using it. \n\nThe app allows the user to view a list of Pokemon. The user can perform three actions to each item: \n\n\n- View\n- Bookmark\n- Share\n\nHere’s what the app looks like. Each icon corresponds to the actions mentioned above:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/analytics-react-native-demo-app-371x600.png\" alt=\"App homepage\" width=\"371\" height=\"600\" class=\"aligncenter size-large wp-image-4778\" /\u003e\n\nYou can find the full source code on its [GitHub repo](https://github.com/anchetaWern/RNSegmentAnalytics).\n\nTo keep the focus on analytics, I won’t be walking you through the code of the sample app. I’ll only be explaining the code used for implementing analytics. Few existing code from the sample app will be shown, but it will only be used to provide some context for the analytics code.\n\nStart by creating a new React Native app:\n\n```\n    react-native init RNSegmentAnalytics\n```\n\nNext, clone the repo in another directory:\n\n```\n    git clone https://github.com/anchetaWern/RNSegmentAnalytics.git\n```\n\nOnce it’s cloned, copy the `src` folder and `App.js` file to the new React Native project you created earlier.\n\n### Installing the packages\nNext, install the following packages:\n\n```\n    npm install react-native-analytics-segment-io react-native-device-info react-native-vector-icons --save \n```\n\nHere’s what each package does:\n\n\n- [**react-native-analytics-segment-io**](https://github.com/leoilab/react-native-analytics-segment-io) - for implementing Segment within React Native.\n- [**react-native-device-info**](https://github.com/rebeccahughes/react-native-device-info) - for getting relevant device info. This will be used as an additional data for analytics. \n- [**react-native-vector-icons**](https://github.com/oblador/react-native-vector-icons) - for adding icons in the app.\n\nNote that only the first two are relevant to what we’re trying to achieve. **react-native-vector-icons** is only for aesthetics purposes.\n\n### Linking the packages\n\nThe three packages require an additional step for linking the native modules. I didn’t have any luck setting up **react-native-analytics-segment-io** this way, but you should be able to with the other two packages:\n\n```\n    react-native link react-native-device-info\n    react-native link react-native-vector-icons\n```\n\nOnce those are linked, the next step is to manually link the **react-native-analytics-segment-io** package. \n\n#### Linking on Android\nFor Android, open the `android/settings.gradle` file and add the following right before the `include ':app``'`:\n\n``` language-gradle\n    include ':react-native-analytics-segment-io'\n    project(':react-native-analytics-segment-io').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-analytics-segment-io/android')\n```\n\nNext, update the `android/app/build.gradle` file and include the following under the `dependencies`:\n\n``` language-gradle\n    compile 'com.segment.analytics.android:analytics:4.3.1'\n    compile project(':react-native-analytics-segment-io')\n```\n\nOnce that’s done, your `dependencies` should look like this:\n\n``` language-gradle\n    dependencies {\n        compile fileTree(dir: \"libs\", include: [\"*.jar\"])\n        compile \"com.android.support:appcompat-v7:23.0.1\"\n        compile \"com.segment.analytics.android:analytics:4.3.1\" // add this\n        compile \"com.facebook.react:react-native:+\"  \n        compile project(':react-native-vector-icons')\n        compile project(':react-native-device-info')\n        compile project(':react-native-analytics-segment-io') // add this\n    }\n```\n\nThe final step is to implement the package in the `android/app/src/main/java/com/rnsegmentanalytics/MainApplication.java` file. Add this right after the last `import`:\n\n``` language-java\n    import com.leo_pharma.analytics.AnalyticsPackage;\n```\n\nThen initialize it in the package list:\n\n``` language-java\n    @Override\n    protected List\u003cReactPackage\u003e getPackages() {\n      return Arrays.\u003cReactPackage\u003easList(\n          new MainReactPackage(),\n            new VectorIconsPackage(),\n            new AnalyticsPackage(), // add this\n            new RNDeviceInfo()\n      );\n    }\n```\n\n#### Linking on iOS\nBy default, a new React Native project doesn’t really come with a `Podfile`. You can create one by navigating inside the `ios` directory and executing `pod init`. This will create the `Podfile`, update it so it contains the following:\n\n``` language-swift\n    platform :ios, '9.0'\n    \n    target 'RNSegmentAnalytics' do\n      pod 'Analytics' # add this\n      pod 'Segment-GoogleAnalytics' #add this\n    end\n```\n\nIn the above `Podfile`, we’ve added the `Analytics` and `Segment-GoogleAnalytics` pod. Once that’s done, execute `pod install` to install those pods.\n\nNext, follow the instructions on the [project’s README](https://github.com/leoilab/react-native-analytics-segment-io#ensure-build-order) to ensure the build order. Once that’s done, click the **Play** button on Xcode or execute `react-native run-ios` on your terminal to run the app.\n\nNote that you can use the repo you cloned earlier as a basis for what each of the files should look like after the packages are linked.\n\n\n### Adding the tracking code\n\nIn the `App.js` file at the root of the project directory, import the `react-native-analytics-segment-io` package that you installed earlier. Optionally, you can extract `AnalyticsConstants`, this allows you to get the correct values for the package setup options as you’ll see later:\n\n``` language-javascript\n    import Analytics, {\n      AnalyticsConstants // optional\n    } from \"react-native-analytics-segment-io\";\n```\n\nNext, inside `componentDidMount`, initialize the package by supplying the write key you got earlier:\n\n``` language-javascript\n    componentDidMount() {\n      Analytics.setup(\"YOUR WRITE KEY\")\n        .then(() =\u003e { // setup succeeded\n          this.initializeUser();\n        })\n        .catch((err) =\u003e { // setup failed\n          this.initializeUser();\n        });\n    }\n```\n\nIn the code above, the `setup` function returns a promise, whether it succeeds or fails, we call the method which will initialize the user. I’ll explain what the `initializeUser` method does later. As for why we’re calling the same method whether it succeeds or fails, it’s because `Analytics.setup` only needs to be called once. This means that if you make changes to the code while developing, and then you reload the app, it will return an error if it’s called again. This is normal behavior, this allows us to call only the `setup` method once when the user launches the app. Calling the `initializeUser` method on failure allows us to do the same operation. That way, we can still proceed smoothly with the testing.\n\nIf you want to customize the default options, you can supply a second argument to the `setup` method. You usually don’t have to do this, except for special cases because these options are potentially invasive. Examples of these options include:\n\n\n- `shouldUseBluetooth` - whether the analytics client should record Bluetooth information.\n- `shouldUseLocationServices` - whether the analytics client should use location services.\n\nYou may want to supply the following options though:\n\n\n- `flushAt` - the number of events to batch before sending out the analytics data to the server. By default, this is set to `20`. It’s a generous amount so if you want to change it to something lower, then you can. Just remember that the lower the number means the higher impact on battery as the app will have to perform the operation more often.\n- `trackDeepLinks` - whether to automatically track deep links. \n- `trackApplicationLifecycleEvents` - whether to automatically make a track call for application lifecycle events. This applies to things like when the app is installed, or the app is updated.\n\nHere’s an example of how to set up with options supplied:\n\n``` language-javascript\n    Analytics.setup('YOUR WRITE KEY', {\n      [AnalyticsConstants.flushAt]: true,\n      [AnalyticsConstants.trackApplicationLifecycleEvents]: true\n    });\n```\n\nHere’s the `initializeUser` method. What it does is to identify the current user with their user ID. The current user’s email (`email`) and device information (`device`) are optional. In the code below, I’ve used a placeholder value for the email and user ID, you should replace those with the ones assigned by your app when the user signed up. \n\nIt’s also used to specify the screen in which the user is currently in. This gives some context on the events that we will be recording later on:\n\n``` language-javascript\n    initializeUser = () =\u003e {\n      let user_data = { \n        email: \"SOME EMAIL\",\n        device: {\n          model: DeviceInfo.getModel(),\n          userAgent: DeviceInfo.getUserAgent()\n        },\n        timezone: DeviceInfo.getTimezone()\n      };\n    \n      Analytics.identify(\"SOME USER ID\", user_data); // identify the user using the unique ID your app assigned to them\n      Analytics.screen(\"Home Screen\");\n    }\n```\n\nIn the sample `App.js` provided, we have the following tracking code, with an optional object containing the details of the action:\n\n``` language-javascript\n    viewAction = name =\u003e {\n      Analytics.track(\"View Pokemon\", { pokemon: name });\n    };\n    \n    bookmarkAction = name =\u003e {\n      Analytics.track(\"Bookmark Pokemon\", { pokemon: name });\n    };\n    \n    shareAction = name =\u003e {\n      Analytics.track(\"Share Pokemon\", { pokemon: name });\n    };\n```\n\nIf you want the user to have the ability to opt-out of the data collection, you can call the `disable` function based on their preferences:\n\n``` language-javascript\n    Analytics.disable();\n```\n\nCalling this function means all subsequent calls to `track` and `screen` methods will be ignored. Data collection can be switched back by calling the `enable` method:\n\n``` language-javascript\n    Analytics.enable();\n```\n\nTo make sure that the SDK’s internal stores are cleared when a user logs out of the app, be sure to call the `reset` method. This is useful for cases where you’re expecting the user to be switching accounts often:\n\n``` language-javascript\n    Analytics.reset();\n```\n\n## Running the app\n\nAt this point, you can now run the app on your Android or iOS device or emulator ([Genymotion](https://www.genymotion.com/fun-zone/) for Android or the iOS simulator for iOS):\n\n```\n    react-native run-android\n    react-native run-ios\n```\n\n## Inspecting analytics data\n\nIf you haven’t done so already, click on the buttons on each card on the app to record some data. You can also change the email address if you want. But unless it’s a different emulator or device instance, Google Analytics will still consider it as the same user.\n\nTo view your analytics data, you can go to the Google Analytics website and view the real-time reports. Once you’re in that page, reload the app and you should see the active user and active screen:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/analytics-react-native-live-tracking-845x600.png\" alt=\"Live analytics\" width=\"770\" height=\"547\" class=\"aligncenter size-large wp-image-4783\" /\u003e\n\nYou can also click on **Events** to view the events happening in real-time.\nAside from that, there’s isn’t really much to see in the Google Analytics’ dashboard, unless you dig deeper into the audience demographics and other features which isn’t enabled by default.\n\n### Adding Keen IO\nFor us to view more details on the data we’ve gathered from the app, we can use [Keen IO](https://keen.io/). This service allows us to dig deeper into the data that we’ve collected. It provides us with querying and visualization tools to gain more insight about the data.\n\nThe first step to add Keen IO is to [sign up for an account](https://keen.io/signup). Once you have an account, it will ask you a few questions about how you plan to use their service. \n\nOnce that’s done, create a new project and navigate to the **Access** tab. This will show you the details that you’ll need to add to Segment.\n\nNext, open the Segment website on a new browser tab, add a new destination and select **Keen IO**. Once selected, it will ask you which source you’d like to use. In this case, you can select the Android source we’ve added earlier:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/analytics-react-native-add-keen-io.png\" alt=\"Add Keen IO to Segment\" width=\"994\" height=\"373\" class=\"aligncenter size-full wp-image-4776\" /\u003e\n\nOnce Keen IO is added, it will ask you about the details of your Keen IO project. This is where you add the details you saw on the **Access** tab of your Keen IO project from earlier:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/analytics-react-native-keen-io-destination-settings-656x600.png\" alt=\"Keen IO destination settings\" width=\"656\" height=\"600\" class=\"aligncenter size-large wp-image-4781\" /\u003e\n\nOnce you’ve added the **Project ID** and **Write Key**, enable Keen IO by checking the toggle for the destination. At this point, you can now reload the app and do some actions. These actions will also now be recorded on Keen IO and ready for you to inspect.\n\nIf you go to the **Explorer** tab of your Keen IO project, you can view all the data which relates to an event by selecting **extraction** as the **Analysis Type**. The events recorded from the app can be selected in the **Event Collection** drop-down. Once you’ve selected an event, click on the **Run Extraction** button to execute the query. By default, this will format the data as table, but you can also select **JSON** from the drop-down on the upper right side of the screen:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/analytics-react-native-keen-io-extrction-query-1024x410.png\" alt=\"Extraction Query\" width=\"770\" height=\"308\" class=\"aligncenter size-large wp-image-4782\" /\u003e\n\nYou can also set the **Analysis Type** to **count** and then group the data based on a specific field. In this case, I’ve selected **pokemon**. Unlike the extraction query, this allows you to present the data as a pie chart:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/analytics-react-native-count-group-query-1024x446.png\" alt=\"Count Group Query\" width=\"770\" height=\"335\" class=\"aligncenter size-large wp-image-4777\" /\u003e\n\nI’ve only shown you a couple of queries, but there’s so much more you could do with Keen IO to learn more about your users.\n\n## Alternatives\n\nIn this section, we’re going to look at some of the alternative platforms to Segment, and other React Native libraries that you can use to implement analytics.\n\n### Alternatives to Segment\n\nSegment is a great analytics tool, but if you want to explore your options, here are a few alternative platforms. All of these platforms integrate with a number of analytics and marketing tools just like Segment:\n\n- [mParticle](https://www.mparticle.com/)\n- [Stitch](https://www.stitchdata.com/)\n- [Astronomer](https://www.astronomer.io/)\n- [Fabric](https://fabric.io/)\n- [Mixpanel](https://mixpanel.com)\n\n### Alternative analytics libraries for React Native\n\nHere are some React Native libraries that allows you to implement analytics:\n\n- [**react-native-google-analytics**](https://github.com/lwansbrough/react-native-google-analytics) or [**react-native-google-analytics-bridge**](https://github.com/idehub/react-native-google-analytics-bridge) - for implementing Google Analytics within a React Native app. The only difference between the two is that the latter uses the native implementation of Google Analytics while the former is only the JavaScript implementation. The latter gives you information about the device because it has access to native functionality for getting device information. \n- [**react-native-fabric**](https://github.com/corymsmith/react-native-fabric) - for crashlytics implementation with [Fabric.io](https://get.fabric.io/)\n- [**react-native-mixpanel**](https://github.com/davodesign84/react-native-mixpanel) - for [Mixpanel](https://mixpanel.com/) tracking implementation.\n- [**react-native-mparticle**](https://github.com/mParticle/react-native-mparticle) - for mParticle implementation.\n- [**react-native-td**](https://github.com/quipper/react-native-td) - for Treasure Data implementation.\n\n\n## Conclusion\n\nThat’s it! In this tutorial, you’ve learned how to add analytics to a React Native app using Segment. As you have seen, Segment is a valuable analytics tool that allows you to save engineering time through its integration with a number of analytics services and marketing tools.","metaTitle":"Adding analytics to a React Native app","metaDescription":"In this tutorial, we’re going to look at how to integrate Segment in a React Native app. We’re specifically going to use Google Analytics as the destination for the analytics data that we gather from the app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"144ns8YmX4cGe84mgmMA6O","type":"Entry","createdAt":"2018-09-26T19:48:48.969Z","updatedAt":"2020-06-19T12:50:02.574Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Persisting data in React Native","url":"persisting-data-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-09-26","description":"This tutorial takes a look at four different ways to handle persisting data in React Native. You will be introduced to AsyncStorage, Realm, and React Native libraries for SQLite and MongoDB. The article shows the basic usage of each, and what use cases they are suited to.","prerequisite":"A basic understanding of JavaScript and familiarity with React/React Native will be required to understand how to use libraries and configure your React Native application to persist data.\n","content":"When building React Native applications, there are several ways to persist data, with each having its own strong advantage. In this piece, we shall discuss the most popular ways to persist data in our React Native application.\n\nReact Native lets you build mobile apps using only JavaScript. It uses the same design as React, which allows you to build the mobile UIs as components.\n\n\n## Prerequisites\n \nA basic understanding of JavaScript and familiarity with React/React Native will be required to understand how to use libraries and configure your React Native application to persist data.\n\n\n## Methods of persisting data in React Native\n\nReact Native provides methods to persist data. Some are provided out of the box while others are libraries you have to install and use. Below are popular methods of persisting data in React Native\n\n- AsyncStorage\n- React Native SQLite 2\n- Realm\n- React Native Local MongoDB\n\n\n## AsyncStorage\n\nAccording to the official [React Native docs](https://facebook.github.io/react-native/docs/asyncstorage.html), this is the most recommended way to persist data in your React Native applications as it is already built into React Native. \n\nAsyncStorage functions like the HTML5 local storage class and it uses key-value pairs to persist data.\n\nData saved using the Asyncstorage class are usually not permanent on the device and are usually not encrypted, therefor when using this method, you must provide your backup and synchronization classes. \n\n\n\u003e Do not use AsyncStorage if you'll be dealing with a large amount of data in your application.\n\n### Security\n\nAsyncStorage encrypts none of the data saved. All objects are stored as strings and must be serialized before they can be saved and likewise be de-serialized before retrieval.\n\n### Usage\n\nImport the AsyncStorage library:\n\n``` language-javascript\n    import { AsyncStorage } from \"react-native\";\n```\n\nTo persist data:\n\n``` language-javascript\n    // create a function that saves your data asyncronously\n    _storeData = async () =\u003e {\n        try {\n            await AsyncStorage.setItem('name', 'John');\n        } catch (error) {\n            // Error saving data\n        }\n    }\n```\n\nTo fetch persisted data:\n``` language-javascript\n    // fetch the data back asyncronously\n    _retrieveData = async () =\u003e {\n        try {\n            const value = await AsyncStorage.getItem('name');\n            if (value !== null) {\n                // Our data is fetched successfully\n                console.log(value);\n            }\n        } catch (error) {\n            // Error retrieving data\n        }\n    }\n```\n\n## React Native SQLite 2\n\nThis is a plugin which provides a WebSQL API to persist data. It provides SQL-like syntax, for querying your in-app persisted database.\n\nIt has support for both Android, iOS, and windows. It's also considered being a drop-in replacement with `react-native-sqlite-storage`.\n\n### Security\n\n[SQLite](https://github.com/craftzdog/react-native-sqlite-2) doesn't support encryption out of the box, but with an extension named [SQLite Encryption Extension (SEE) which is provided on their official website](https://www.sqlite.org/see/doc/trunk/www/index.wiki)[**.**](https://www.sqlite.org/see/doc/trunk/www/index.wiki) SEE allows SQLite to read/write data in an encrypted format using algorithms like AES-128, AES-256, RC4, and so on. \n\nAside from SEE, there are other extensions that allow an encryption to be possible such as [SQLCipher](http://sqlcipher.net/).\n\n### Usage\n\nTo get started, install react-native-sqlite-2:\n\n```\n    $ npm install react-native-sqlite-2 --save\n```\n\nLink the library dependency:\n\n```\n    $ react-native link react-native-sqlite-2\n```\n\nImport the library and persist data:\n\n``` language-javascript\n    import SQLite from 'react-native-sqlite-2';\n```\n\nOpen the database file:\n\n``` language-javascript\n    const db = SQLite.openDatabase('test.db', '1.0', '', 1);\n```\n\nCreate a transaction function to execute your SQL statements:\n\n``` language-javascript\n    db.transaction(function (txn) {\n    \n        // Drop the table if it exists\n        txn.executeSql('DROP TABLE IF EXISTS Users', []);\n    \n        // Create the table and define the properties of the columns\n        txn.executeSql('CREATE TABLE IF NOT EXISTS Users(user_id INTEGER PRIMARY KEY NOT NULL, name VARCHAR(30))', []);\n    \n        // Insert a record\n        txn.executeSql('INSERT INTO Users (name) VALUES (:name)', ['nora']);\n    \n        // Insert another record\n        txn.executeSql('INSERT INTO Users (name) VALUES (:name)', ['takuya']);\n    \n        // Select all inserted records, loop over them while printing them on the console.\n        txn.executeSql('SELECT * FROM `users`', [], function (tx, res) {\n            for (let i = 0; i \u003c res.rows.length; ++i) {\n                console.log('item:', res.rows.item(i));\n            }\n        });\n    \n    });\n```\n\n## Realm\n\n[Realm](https://realm.io/docs/javascript/latest/) was designed and built from scratch to support mobile devices and even wearables. It's designed as an object-oriented database and this makes it up to 10x faster than SQLite.\nIt's simple to use since it exposes data as objects and it supports relationships among data, mapping classes, tables, foreign keys and so on.\n\nRealm can be combined with server-side databases to allow seamless synchronization of data offline to the cloud/server database. Realm is a fantastic choice if you'll be dealing with large data in your application.\n\n### Security\n\nRealm is dynamic with the way it encrypts data. It uses different encryption mechanism for different mobile platform.\n*For Android*, Realm uses the AES-256 level of encryption and decryption of all the data stored locally.\n*For iOS applications*, Realm's encryption is based on the iOS `CommonCrypto` library. The library protects the application data and passwords stored in the keychain.\n*While for Windows applications*, Realm uses `Crypto` library for encryption.\n\n### Usage\n\nTo get started with realm in React Native:\n\n```\n    $ npm install realm --save\n```\n\nLink the library dependency:\n\n```\n    $ react-native link realm\n```\n\nImport the library:\n\n``` language-javascript\n    const Realm = require('realm');\n```\n\nInitiate the realm state to null:\n\n``` language-javascript\n    constructor(props) {\n        super(props);\n        this.state = { realm: null };\n    }\n```\n\nPersist data:\n\n``` language-javascript\n    // Write it into the realm state as soon as the component mounts\n    componentWillMount() {\n    \n        // Open a Realm Schema \n        Realm.open({\n            schema: [{name: 'Dog', properties: {name: 'string'}}]\n        }).then(realm =\u003e {\n    \n            // Write a record into the realm schema\n            realm.write(() =\u003e {\n                realm.create('Dog', {name: 'Rex'});\n            });\n    \n            // Update the realm state\n            this.setState({ realm });\n        });\n    }\n```\n\nFetch and render:\n\n``` language-javascript\n    render() {\n        const info = this.state.realm ? 'Number of dogs in this Realm: ' + this.state.realm.objects('Dog').length: 'Loading...';\n        return (\n            \u003cView style={styles.container}\u003e\u003c/View\u003e\n            \u003cText style={styles.welcome}\u003e\n                {info}\n            \u003c/Text\u003e\n            \u003c/View\u003e\n        );\n    }\n```\n\nPutting it together as a component:\n\n``` language-javascript\n    // import the library \n    const Realm = require('realm');\n    \n    class RealmDb extends Component {\n    \n        //initiate the realm state to null\n        constructor(props) {\n            super(props);\n            this.state = { realm: null };\n        }\n    \n        //persist data and write it into the realm state as soon as the component mounts\n        componentWillMount() {\n    \n        // Open a Realm Schema \n        Realm.open({\n            schema: [{name: 'Dog', properties: {name: 'string'}}]\n        }).then(realm =\u003e {\n    \n            // Write a record into the realm schema\n            realm.write(() =\u003e {\n                realm.create('Dog', {name: 'Rex'});\n            });\n    \n            // Update the realm state\n            this.setState({ realm });\n        });\n    \n    }\n    \n        // render a Text component with the value\n        render() {\n            const info = this.state.realm ? 'Number of dogs in this Realm: ' + this.state.realm.objects('Dog').length: 'Loading...';\n            return (\n                \u003cView style={styles.container}\u003e\u003c/View\u003e\n                \u003cText style={styles.welcome}\u003e\n                    {info}\n                \u003c/Text\u003e\n                \u003c/View\u003e\n            );\n        }\n    }\n```\n\n## React Native Local MongoDB\n\n[MongoDB](https://github.com/antoniopresto/react-native-local-mongodb) is an open-source server-side database built for scalability and complex applications and Big data. It uses key-value stores and a relational database to store data as objects in JSON documents. \n\nMongoDB can read and write JavaScript objects and allows smooth communication between the server and app. It's a right choice if you'll be dealing with large data in your application.\n\nHowever, MongoDB can be slow for connected models that require joins.\n\n### Security\n\nMongoDB supports encryption directly out of the box, unlike SQLite. According to the official docs on encryption, It uses the MongoDB’s Encrypted Storage Engine, which supports a variety of encryption algorithms from the OpenSSL library. AES-256 in CBC mode is the default, while other options include GCM mode and FIPS mode for FIPS-140-2 compliance. It also uses the SCRAM-SHA-1 algorithm mechanism for authentication and a role-based access control.\n\n### Usage\n\nTo get started with using MongoDB in your React Native application:\n\n```\n    $ npm install react-native-local-mongodb --save\n```\n\nCreate a datastore:\n\n``` language-javascript\n    var Datastore = require('react-native-local-mongodb'), \n    db = new Datastore({ filename: 'asyncStorageKey', autoload: true });\n```\n\nInsert into your database:\n\n``` language-javascript\n    db.insert([{ a: 5 }, { a: 42 }], function (err, newDocs) {\n        // Two documents were inserted in the database\n    }); \n```\n\nFind a document:\n\n``` language-javascript\n    db.find({ system: 'solar' }, function (err, docs) {\n        // docs is an array containing documents Mars, Earth, Jupiter\n        // If no document is found, docs is equal to []\n    });\n```\n\nUpdate a document:\n\n``` language-javascript\n    db.update({ planet: 'Jupiter' }, { planet: 'Pluton'}, {}, function (err, numReplaced) {\n        // numReplaced = 1\n        // The doc #3 has been replaced by { _id: 'id3', planet: 'Pluton' }\n        // Note that the _id is kept unchanged, and the document has been replaced\n    });\n```\n\nRemove a document:\n\n``` language-javascript\n    db.remove({ _id: 'id2' }, {}, function (err, numRemoved) {\n        // numRemoved = 1   \n    });\n```\n\nIndexing:\n\n``` language-javascript\n    db.ensureIndex({ fieldName: 'somefield' }, function (err) {\n        // If there was an error, err is not null\n    });\n```\n\n## Conclusion\n\nReact Native provides several ways to persist data and your choice should depend on the type and amount of data you'll be handling. \nWe have seen four methods of persisting data in React Native, each with its own strength. AsyncStorage is great for storing small data which needs to be serialized. You shouldn't use AsyncStorage for handling relational data in any form. If you are interested in storing relational data, look more into SQLite.  If SQLite is too slow for what you want to achieve, then Realm is the better solution. If you are storing JavaScript objects to your database, then you should consider MongoDB.","metaTitle":"Persisting data in React Native","metaDescription":"This tutorial takes a look at four different ways to handle persisting data in React Native. You will be introduced to AsyncStorage, Realm, and React Native libraries for SQLite and MongoDB. The article shows the basic usage of each, and what use cases they are suited to."}}],"defaultValue":"React Native","queryType":"tag","pages":4,"route":"/tutorials","query":{"tag":"React Native","page":"3"}}},"page":"/tutorials","query":{"tag":"React Native","page":"3"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=React%20Native&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:38:13 GMT -->
</html>