<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Social%20Interactions&page=4 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:45:46 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">35</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; Social Interactions</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials68ff.html?tag=Social%20Interactions" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials787b.html?product=Beams&amp;tag=Social%20Interactions" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; Social Interactions"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/instagram-clone-part-4.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime Instagram clone — Part 4: Going offline with service workers</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This four-part series takes you through building an Instagram clone using Node and React. In part four, implement offlin...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime Instagram clone — Part 1: Setting up the project and creating the UI</h3><p class="css-k12xad e5jrto45">This four-part series takes you through building an Instagram clone using Node and React. In part one, set up your proje...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime Instagram clone — Part 2: Connecting the UI with GraphQL data</h3><p class="css-k12xad e5jrto45">This four-part series takes you through building an Instagram clone using Node and React. In part two, connect your UI a...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime Instagram clone — Part 3: Realtime feed updates with Pusher and desktop notifications</h3><p class="css-k12xad e5jrto45">This four-part series takes you through building an Instagram clone using Node and React. In part three, implement realt...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-javascript.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build live comments using JavaScript</h3><p class="css-k12xad e5jrto45">Create a realtime comment feature for web applications using with JavaScript on frontend and Node.js on the backend.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/floating-hearts-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a floating hearts effect in Swift</h3><p class="css-k12xad e5jrto45">Create a realtime social interactions like floating hearts for your iOS app using Swift</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/online-presence-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Online Presence</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build online presence into your Laravel app</h3><p class="css-k12xad e5jrto45">Build online presence into your Laravel app with Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/typing-indicator-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Social Interactions<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a typing indicator with Laravel</h3><p class="css-k12xad e5jrto45">Integrate a typing indicator feature in your Laravel app using Vue.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials630a.html?product=Channels&amp;tag=Social%20Interactions&amp;page=3" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials5ffe.html?product=Channels&amp;tag=Social%20Interactions&amp;page=1" class="css-5s6711 edg0byb1">1</a><a href="tutorials5aa1.html?product=Channels&amp;tag=Social%20Interactions&amp;page=2" class="css-5s6711 edg0byb1">2</a><a href="tutorials630a.html?product=Channels&amp;tag=Social%20Interactions&amp;page=3" class="css-5s6711 edg0byb1">3</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials593c.html?product=Channels&amp;tag=Social%20Interactions&amp;page=4" class="css-2wakph edg0byb1">4</a><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":35,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6tLdzM6PXqQQIuCKIO06cg","type":"Entry","createdAt":"2018-04-30T12:49:05.311Z","updatedAt":"2018-04-30T16:41:32.703Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime Instagram clone — Part 4: Going offline with service workers","url":"instagram-clone-part-4","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/instagram-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2018-04-27","description":"This four-part series takes you through building an Instagram clone using Node and React. In part four, implement offline support with service workers.","prerequisite":"You should have completed the previous parts of the series.","content":"*This is part 4 of a 4 part tutorial. You can find part 1 [here](https://pusher.com/tutorials/instagram-clone-part-1), part 2 [here](https://pusher.com/tutorials/instagram-clone-part-2) and part 3 [here](https://pusher.com/tutorials/instagram-clone-part-3).*\n\nIn the [last part](https://pusher.com/tutorials/instagram-clone-part-3) of the series, we looked at how to add realtime functionality to our React application using Pusher to enable notifications. Sometimes, when surfing the web, you loose internet connection. In the past, all you got was the default error page decided by the browser. Now, you sometimes get custom pages even when you don’t have internet connection at all.\n\nIn this article, we are going to look at how to add this kind of functionality to our application to allow the users still engage with our application even when they are constrained by internet connections. To do accomplish this, we are going to make use of the browser’s local storage and service workers.\n\n\n## Prerequisites\n\nTo follow this article you need the following:\n\n- Should have read previous parts of the series\n- Basic knowledge of JavaScript\n- Node installed on your machine\n- NPM installed on your machine\n\n\n## Set up an app shell to show when offline\n\nThe app “shell” is the minimal HTML, CSS and JavaScript required to power the user interface. This allow us to immediately render the page while the rest of the page is being fetched. \n\n### Service workers\nService workers are scripts that the browser runs in the background to give the online effect to users by caching assets and other files. Their core features are how they’re able to intercept and handle network requests. There are three stages in the lifecycle of a service worker: registration, installation and activation.\n\nReact includes starter code that registers a service worker. In the `src/index.js` you have:\n\n``` javascript\n    // src/index.js\n    [...]\n    import registerServiceWorker from './registerServiceWorker';\n    [...]\n    registerServiceWorker();\n```\n\nThis registers a service worker for your application when your application is in production mode.\n\nNext thing to do is update your `public/manifest.json` file\n\n``` json\n    {\n      \"short_name\": \"InstaClone\",\n      \"name\": \"Simple Instagram Clone App\",\n      \"icons\": [\n        {\n          \"src\": \"favicon.ico\",\n          \"sizes\": \"64x64 32x32 24x24 16x16\",\n          \"type\": \"image/x-icon\"\n        }\n      ],\n      \"start_url\": \"./index.html\",\n      \"display\": \"standalone\",\n      \"theme_color\": \"#000000\",\n      \"background_color\": \"#ffffff\"\n    }\n```\n\n\nNow, build your application using:\n\n```\n    npm run build # or yarn build\n```\n\nAn optimized version of your application will be built in the `build/` folder of your application. Now you will want to deploy the built application. To do this, `http-server` - a node module for serving static files:\n\n```\n    npm install http-server\n    http-server build\n```\n\nWhen you visit the application at `127.0.0.1:8080`, you get your regular application. Now, head over to the `Appication` tab of your Chrome debug console. You can see the existing service worker for your application displayed there. Click the `Offline` option to simulate no network connection. When you reload your application, you get this:\n\n![instagram-clone-offline](//images.ctfassets.net/1es3ne0caaid/7pWIiEf9cI0CMauaiMm8cI/b4a7f8baffb597091dcc3f9839e62a67/instagram-clone-offline.png)\n\n## Serving stale data when offline\n\nThe current display when a user is offline is a little better than the default page shown when there’s no connection. For an application like our Instagram clone application, it’ll be nice for the users to still be able to view old posts when offline. When we fetch posts in the **Posts** component, we are going to save them in the browsers `localStorage` for future use. To do this, update the `componentDidMount` of your `src/components/Posts/index.js` as follows:\n\n``` javascript\n    // src/components/Posts/index.js\n    [...]\n    componentDidMount(){\n        [...]\n        if( !navigator.onLine){\n          this.setState({ posts: JSON.parse(localStorage.getItem(\"posts\")) });\n        }else{\n          this.props.apollo_client\n          .query(\n            // grapgl ql query\n            [...]\n          )\n          .then(response =\u003e {\n            this.setState({ posts: response.data.posts});\n            localStorage.setItem('posts', JSON.stringify(response.data.posts));\n          });\n        }\n        [...]\n      }\n```\n\nWe first check if the user is online. If they are, the `apollo_client` ****makes the request to get new posts. After the posts are obtained they’re saved using the `localStorage.setItem()` function. When the user is offline, `!navigator.onLine` will return true and then the stored posts are fetched from the localStorage using `localStorage.getItem()`.\n\n\n\u003e **Tip:** localStorage only stores strings so to work around this, you use `JSON.stringify()` and `JSON.parse()` for storage and retrieval respectfully\n\nYou can also decide to display a banner to the user letting then know that they are viewing stale data. To do this, let’s create a simple Notifier component in the `src/components`  directory like this:\n\n```\n    cd src/components\n    mkdir Notifier\n    cd Notifier \u0026\u0026 touch index.js Notifier.css\n```\n\n``` javascript\n    // src/components/Notifier/index.js\n    \n    import React, { Component } from \"react\";\n    import \"./Notifier.css\";\n    class Notifier extends Component {\n      render() {\n        return (\n          \u003cdiv className=\"notify\"\u003e\n            \u003cp\u003e\n              \u003cem\u003e{this.props.data}\u003c/em\u003e\n            \u003c/p\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default Notifier;\n```\n\nThe component has the following styling:\n\n``` css\n    // src/components/Notifier/Notifier.css\n    \n    .notify{\n        background-color: red;\n        width: 100%;\n        padding-top: 20px;\n        padding-bottom: 20px;\n        text-align: center;\n        color: white;\n        margin-bottom: 20px;\n    }\n```\n\nNow that the component is created, to use it in the Posts component, update the `src/components/Posts/index.js`:\n\n``` javascript\n    // src/components/Posts/index.js\n    \n    import React, {Component} from \"react\";\n    import \"./Posts.css\";\n    import gql from \"graphql-tag\";\n    import Post from \"../Post\";\n    import Notifier from \"../Notifier\";\n    class Posts extends Component {\n      constructor() {\n        super();\n        this.state = {\n          posts: []\n        };\n        this.offline = !navigator.onLine;\n      }\n      componentDidMount() {\n        [...]\n      }\n      render() {\n        const notify = this.offline ? \u003cNotifier data=\"Instagram Clone: Offline Mode\" /\u003e : \u003cspan /\u003e;\n        return (\n          \u003cdiv\u003e\n            {notify}\n            // display posts\n            [...]\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default Posts;\n```\n\n\nNow, build the application again using:\n\n```\n    npm run build # or yarn build\n```\n\nStart your backend server:\n \n```\n    node server\n```\n\n\u003e If you are confused about the backend server, refer to previous parts of this series\n\nAnd then serve the production build with:\n\n```\n    http-server build\n```\n\nWhen you go to the browser you get:\n\n![instagram-clone-stale-data](//images.ctfassets.net/1es3ne0caaid/5HHvxror84m2kmQEqC4guG/6d407da3d8965adf5900e9eb47e1ca22/instagram-clone-stale-data.png)\n\n\n\u003e It’s advised to test service workers in incognito/private mode so that your application behavior is not affected by previously installed service workers / caches\n\n\n## Conclusion\n\nIn this series, we have seen how to build a simple Instagram clone using react by using react, fetching dynamic data using GraphQL, adding realtime functionality using Pusher and making the application work offline with service workers. Feel free to leverage any of the concepts shared here in your web applications. Here’s a link to the [Github](https://github.com/christiannwamba/instagram-clone) repository if interested","metaTitle":"Build an Instagram clone — Part 4: Service workers","metaDescription":"Use React, Node and Pusher to build an Instagram clone. In part four,implement offline support with service workers."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6fbjFSTGH6ek44G8w2SGQc","type":"Entry","createdAt":"2018-04-30T12:47:46.587Z","updatedAt":"2018-04-30T16:39:39.372Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime Instagram clone — Part 1: Setting up the project and creating the UI","url":"instagram-clone-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/instagram-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2018-04-27","description":"This four-part series takes you through building an Instagram clone using Node and React. In part one, set up your project and create your UI.","prerequisite":"You should have Node and NPM installed on your machine.","content":"*This is part 1 of a 4 part tutorial. You can find part 2 [here](https://pusher.com/tutorials/instagram-clone-part-2), part 3 [here](https://pusher.com/tutorials/instagram-clone-part-3) and part 4 [here](https://pusher.com/tutorials/instagram-clone-part-4).*\n\nEver used the web version of [Instagram](https://instagram.com)? Ever wondered how they make it all work? In this series, we are going to look in depth at how to build an Instagram clone using React. \n\nGet ready because this is going to be a fun ride!\n\n\n\u003e This article is meant for beginners, so feel free to follow through if you’re getting started with React\n\n\n## What is React? \n\nReact is an open-source frontend JavaScript framework used for building incredible, reusable user interfaces. Find out more about React, you can head over [here.](https://github.com/facebook/react)\n\n\n## Prerequisites\n\nBefore we can set up a React project, we need to have the following :\n\n\n- [Node](https://nodejs.org) installed on our machines\n- Node Package Manager ([NPM](https://www.npmjs.com/)) installed on our machines\n\nTo confirm your Node/NPM installation, run the following command on your terminal :\n\n```\n    node --version\n    npm --version\n```\n\nIf you get version numbers as results, then you’re good to go. If not, head over to the Node installation page and/or NPM installation page to get them set up.\n\n## Setting up a React project\n\n**Installing** **React** \nReact is available as a node package and to get React installed on your machine, you need to run the command :\n\n```\n    npm install -g create-react-app\n```\n\n\u003e 💡 You need to have Node version \u003e= 6 to install React\n\nThis globally installs the package for you to use as you please.\n\n### Creating our React application\nTo create our application, we use the `create-react-app`  we installed by running the the command :\n\n```\n    create-react-app instagram-clone\n```\n\nThis helps set up the development environment that gets you started with creating React applications.\n\n### Taking our application for a spin\nNow to confirm and test the creation of our new application, we change directory to our `instagram-clone` directory and then start our development server by running :\n\n```\n    cd instagram-clone\n    npm start\n```\n\nYour development server should start and you should get a page that looks like this:\n\n![instagram-clone-react-welcome](//images.ctfassets.net/1es3ne0caaid/6EbSE9MLkcGqsIiIS2Ca2e/c3c867def25a7bde30ec765b19110a3d/instagram-clone-react-welcome.png)\n\n\n## Creating UI components\n\nNow that we are ready to start developing react applications, the next thing we are going to do is design the components we are going to need in our application.\n\n### What are components\nIf you’re new to React, you may be wondering what components are. Wonder no more. Components in React give you the ability to build your UI in bite-sized bits. Instead of you building the whole interface in a single file, you break it down to independent and reusable pieces which you then put together to have your application as a whole. \n\n### Deciding what components we need\n\n![instagram-clone-skeleton](//images.ctfassets.net/1es3ne0caaid/7CRv9L4li0aAowaMSsOc06/c183f7e68f20b1d72c37635158e67cf2/instagram-clone-skeleton.png)\n\n\nNow, let’s think about the components needed. For starters, we can break down the components into two: \n\n\n- Header component\n- Post component\n\nThe Header component will contain the instagram logo and brand name while the Post component will contain the contain image and caption a user has posted.\n\n### Header component\nNow we create a `components` folder in the `src/`  directory of our application. \n\n```\n    cd src\n    mkdir components \u0026\u0026 cd components\n```\nWe then create a folder for our Header component: \n\n```\n    mkdir Header \u0026\u0026 cd Header\n```\nNow that we have our Header component, the  next thing we want to do is to create our `index.js` file in the Header directory:\n\n```\n    touch index.js\n```\n\nOpen `index.js` and past in the following:\n\n``` javascript\n    // src/components/Header/index.js\n    import React from \"react\";\n    \n    class Header extends React.Component{\n        render(){\n            return (\n               \u003cnav className=\"Nav\"\u003e\n                 \u003cdiv className=\"Nav-menus\"\u003e\n                   \u003cdiv className=\"Nav-brand\"\u003e\n                     \u003ca className=\"Nav-brand-logo\" href=\"/\"\u003e\n                       Instagram\n                     \u003c/a\u003e\n                   \u003c/div\u003e\n                 \u003c/div\u003e\n               \u003c/nav\u003e\n           );\n        }   \n    }\n    export default Header;\n```\n\nIn React we describe our component with JSX. JSX looks similar to pure HTML but there are some differences between them. \n\n\n\u003e 💡 Notice how the class names are being added in JSX and compare it to regular HTML\n\n### Styling our Header component\nNow, we are going to add the necessary style that makes our Header component look pleasing to the eye. To do this, we create a `Header.css` file in our `src/components/Header` directory. Open the `Header.css` and paste the following:\n\n``` css\n    /* src/components/Header/Header.css */\n    i.Nav {\n      background-color: #fff;\n      border-bottom: 1px solid rgba(0, 0, 0, 0.0975);\n      position: fixed;\n      top: 0;\n      width: 100%;\n      z-index: 2;\n      -webkit-transition: height 0.2s ease-in-out;\n      transition: height 0.2s ease-in-out;\n      height: 77px;\n    }\n    .Nav-menus {\n      display: flex;\n      flex-direction: row;\n      height: 77px;\n      width: 70%;\n      margin: 0 auto;\n      padding: 26px 40px;\n    }\n    .Nav-brand-logo {\n      display: block;\n      background-position: -176px 0px;\n      background-image: url(../../sprite.png);\n      background-size: 405px 379px;\n      background-repeat: no-repeat;\n      height: 35px;\n      width: 176px;\n      text-indent: -1000%\n    }\n```\n\n\u003e 💡 You need to add the `[sprite.png](https://github.com/christiannwamba/instagram-clone/blob/master/src/sprite.png)` [](https://github.com/christiannwamba/instagram-clone/blob/master/src/sprite.png)in the `src` directory of the application. Download it [here](https://github.com/christiannwamba/instagram-clone/blob/master/src/sprite.png)\n\n### Linking the style in our component\nWe head back to our Header component and add the following :\n\n``` javascript\n    // src/components/Header/index.js\n    \n    import \"./Header.css\";\n    \n    class Header extends React.Component{\n      // ....\n    }\n    export default Header;\n```\n\nOnce we link the style sheet as we did above, we are good to go. \n\n\n### Rendering the Header component\nNow that we have successfully built our Header component, the next thing we want to do is to render it. To that, we need to tweak our `src/App.js` file. \n\n``` javascript\n    // src.App.js\n    \n    import React, { Component } from 'react';\n    import './App.css';\n    import Header from './components/Header';\n    class App extends Component {\n      render() {\n        return (\n          \u003cHeader /\u003e\n        );\n      }\n    }\n    export default App;\n```   \n\n\nOnce we do this, we have our **Header** component added and the app looks like this: \n\n![instagram-clone-with-header](//images.ctfassets.net/1es3ne0caaid/jiMBc8jS00Se8EQy2mCSw/a6093e4de5a90972005fb5580d396dbb/instagram-clone-with-header.png)\n\n\n### Post component\nTo create a **Post** component, we create a folder called `Post` in the `src/components` directory,\n\n```\n    cd src/components\n    mkdir Post \u0026\u0026 cd POst\n```\n\nWe then create the `index.js` file. Open it and paste in the following:\n\n``` javascript\n    // src/components/Post/index.js\n    import React, { Component } from \"react\";\n    class Post extends Component {\n      render() {\n        return \u003carticle className=\"Post\" ref=\"Post\"\u003e\n            \u003cheader\u003e\n              \u003cdiv className=\"Post-user\"\u003e\n                \u003cdiv className=\"Post-user-avatar\"\u003e\n                  \u003cimg src=\"https://www.laravelnigeria.com/img/chris.jpg\" alt=\"Chris\" /\u003e\n                \u003c/div\u003e\n                \u003cdiv className=\"Post-user-nickname\"\u003e\n                  \u003cspan\u003eChris\u003c/span\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/header\u003e\n            \u003cdiv className=\"Post-image\"\u003e\n              \u003cdiv className=\"Post-image-bg\"\u003e\n                \u003cimg alt=\"Icon Living\" src=\"https://pbs.twimg.com/media/DOXI0IEXkAAkokm.jpg\" /\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"Post-caption\"\u003e\n              \u003cstrong\u003eChris\u003c/strong\u003e Moving the community!\n            \u003c/div\u003e\n          \u003c/article\u003e;\n        }\n    }\n    export default Post;\n```\n\nHere we see the structure of the posts outlined. We have the:\n\n- Post Header - shows the users avatar and name \n- Post Content - displays the post content\n- Post Caption - displays the username and post caption\n\n### Styling our Post component\nWe create a `Post.css` file in the `src/components/Post` directory. Open Post.css and paste in the following:\n\n``` css\n    /* src/components/Post/Post.css */\n    .Post {\n      border-radius: 3px;\n      border: 1px solid #e6e6e6;\n      background-color: #fff;\n      margin-bottom: 60px;\n      margin-left : 20%;\n      margin-right: 20%;\n    }\n    .Post-user {\n      display: flex;\n      padding: 16px;\n      align-items: center;\n    }\n    .Post-user-avatar {\n      width: 30px;\n      height: 30px;\n    }\n    .Post-user-avatar img {\n      width: 100%;\n      height: 100%;\n      border-radius: 50%;\n    }\n    .Post-user-nickname {\n      margin-left: 12px;\n      font-family: 'PT Sans', sans-serif;\n      font-weight: bold;\n    }\n    .Post-image-bg {\n      background-color: #efefef;\n    }\n    .Post-image img {\n      display: block;\n      width: 100%;\n    }\n    .Post-caption {\n      padding: 16px 16px;\n    }\n    .Post-caption strong {\n      font-family: 'PT Sans', sans-serif;\n      font-weight: bold;\n    }\n    .vjs-fade-out {\n      display: none;\n      visibility: hidden;\n      opacity: 0;\n    }\n```\n\n### Linking the style in our component\nWe head back to our Post component and add the following :\n\n``` javascript\n    // src/components/Post/index.js\n    \n    import \"./Post.css\";\n    \n    class Post extends React.Component{\n      // ....\n    }\n    export default Post;\n```\n\n### Rendering the Post component\nNow we go ahead to render the Post component itself. We edit our `App.js` file to make it look like this :\n\n``` javascript\n    // src/App.js\n    import Post from './components/Post';\n    \n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv\u003e\n            \u003cHeader /\u003e\n            \u003cdiv\u003e\n              \u003cPost /\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default App;\n```\n\nNow, when we go back to our page, we have this : \n\n![instagram-clone-with-post](//images.ctfassets.net/1es3ne0caaid/5HMwvynW5qW0aOUsUkw2UY/601b6e5a07b43c00f30e94aa2107c7e4/instagram-clone-with-post.png)\n\n\n\n## Rendering components with mock data\n\nYou already noticed that in our Post component had a lot of static data - every time you reload you only see the same post. In a real-life application, what we want is to have our list of dynamic posts when our application is accessed. To do this, we are going to tweak our Post component.\n \n### Using props in our Post component\nIn React, `props` as the name suggests, are the properties of a particular component. They help in making sure that our components are reusable. Update your Post component to look like this :\n\n``` javascript\n    // src/components/Post/index.js\n    import React, { Component } from \"react\";\n    \n    import \"./Post.css\";\n    \n    class Post extends Component {\n        constructor(props){\n            super(props);\n        }\n      render() {\n        const nickname = this.props.nickname;\n        const avatar = this.props.avatar;\n        const image = this.props.image;\n        const caption = this.props.caption;\n        \n        return (\n          \u003carticle className=\"Post\" ref=\"Post\"\u003e\n            ...\n                \u003cimg src={avatar} alt={nickname} /\u003e\n            ... \n                  \u003cspan\u003e{nickname}\u003c/span\u003e\n            ...\n                \u003cimg alt={caption} src={image} /\u003e\n            ...\n              \u003cstrong\u003e{nickname}\u003c/strong\u003e{caption}\n            ...\n          \u003c/article\u003e\n        );\n      }\n    }\n    export default Post;\n```\n\nWe accept the props from when the Post itself is being rendered and then display the results to the users in form of posts.\n\nNow, the `src/App,js` is also tweaked to pass the data to the component like this:\n\n``` javascript\n    // src/App.js\n    \n    import React, { Component } from 'react';\n    import './App.css';\n    import Header from './components/Header';\n    import Post from './components/Post';\n    \n    class App extends Component {\n      render() {\n        return \u003cdiv className=\"App\"\u003e\n            \u003cHeader /\u003e\n            \u003csection className=\"App-main\"\u003e\n              \u003cPost nickname=\"Chris\" avatar=\"https://www.laravelnigeria.com/img/chris.jpg\" caption=\"Moving the community!\" image=\"https://pbs.twimg.com/media/DOXI0IEXkAAkokm.jpg\" /\u003e\n              \u003cPost nickname=\"OG\" avatar=\"https://www.laravelnigeria.com/img/chris.jpg\" caption=\"Holding a mic\" image=\"https://pbs.twimg.com/media/DOXI0IEXkAAkokm.jpg\" /\u003e\n              \n              {/* more posts */}\n            \u003c/section\u003e\n          \u003c/div\u003e;\n      }\n    }\n    \n    export default App;\n```\n\nNow, when you visit the application at `localhost:3000`, you get a page that looks like this:\n\n![instagram-clone-part-1-complete](//images.ctfassets.net/1es3ne0caaid/513bWOORAIk4k6Eo6Mgcki/bffd3206773e6ae2f91c457cf515b3fe/instagram-clone-part-1-complete.png)\n\n\n\n## Conclusion \n\nIn this chapter of the series, we looked at how to get set up with React development and creating the UI for an Instagram clone application. In the [next chapter](https://pusher.com/tutorials/instagram-clone-part-2), we will take a look at how to connect the UI to Graph QL data. Here’s a link to the full [Github](https://github.com/christiannwamba/instagram-clone) repository.","metaTitle":"Build an Instagram clone with React — Part 1: Create the UI","metaDescription":"Use React, Node and Pusher to build an Instagram clone. In part one, set up your project and create your UI components."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1mDc9HOj7mEYwQ2CaoEMqQ","type":"Entry","createdAt":"2018-04-30T12:48:16.510Z","updatedAt":"2018-05-01T15:44:56.196Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime Instagram clone — Part 2: Connecting the UI with GraphQL data","url":"instagram-clone-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/instagram-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-04-27","description":"This four-part series takes you through building an Instagram clone using Node and React. In part two, connect your UI and data with GraphQL.","prerequisite":"You should have completed part one of the series.","content":"*This is part 2 of a 4 part tutorial. You can find part 1 [here](https://pusher.com/tutorials/instagram-clone-part-1), part 3 [here](https://pusher.com/tutorials/instagram-clone-part-3) and part 4 [here](https://pusher.com/tutorials/instagram-clone-part-4).*\n\nIn the last part, of this series, we set up the UI for our React Instagram clone. If you haven’t already, you can read up on it [here](https://pusher.com/tutorials/instagram-clone-part-1). In this part, we are going to take a look at how to connect the UI to GraphQL Data\n\n## Prerequisites\n- Should have read the first part of the series\n- Basic knowledge of JavaScript\n- Node installed on your machine\n- NPM installed on your machine\n\n## Set up the server\n\nTo allow us to serve data to the UI, let’s create an API server for the application. The server will be built using NodeJS and GraphQL.\n\n### What is GraphQL\nGraphQL allows you to describe how to ask for data. With GraphQL, the client specifies the exact resources it needs instead of making requests to REST Endpoints that return everything. The GraphQL API has three main building blocks which are queries, schema, and resolvers.\n\nTo get started, create a `server` directory in the project root of the `react-instagram-clone` app. Here’s a link to the [Github](https://github.com/christiannwamba/instagram-clone) repository for more reference. \n\n```\n    mkdir server\n```\n\nInitialize a new Node project and install the following modules:\n\n```\n    cd server\n    npm init \n    npm install --save express graphql express-graphql cors\n```\n\nCreate a `server.js` file in the `server/` directory:\n\n```\n    touch server.js\n```\n\nNow, edit the `server.js` file as follows. First, import the necessary node modules:\n\n``` javascript\n    // server/server.js\n    \n    let express = require(\"express\");\n    let graphqlHTTP = require(\"express-graphql\");\n    let { buildSchema } = require(\"graphql\");\n    let cors = require(\"cors\");\n    \n    [...]\n```\n\nNext thing is to construct a schema. In GraphQL, schemas are constructed using GraphQL Schema Language. \n\n``` javascript\n    // server/server.js\n    [...]\n    \n    let schema = buildSchema(`\n      type User {\n        id : String!\n        nickname : String!\n        avatar : String!\n      }\n      type Post {\n          id: String!\n          user: User!\n          caption : String!\n          image : String!\n      }\n      type Query{\n        user(id: String) : User!\n        post(user_id: String, post_id: String) : Post!\n        posts(user_id: String) : [Post]\n      }\n    `);\n    \n    [...]\n```\n\nIn specifying the schema, above, we also added a query**.** Query fields also allow you to add arguments which we will need in this case to display specific data.\n\nNext thing to do is to add some stock data for the application. Add the following to your `server.js` file:\n\n``` javascript\n    // server/server.js\n    [...]\n    // Maps id to User object\n    let userslist = {\n      a: {\n        id: \"a\",\n        nickname: \"Chris\",\n        avatar: \"https://www.laravelnigeria.com/img/chris.jpg\"\n      },\n      [...]\n    };\n    let postslist = {\n      a: {\n        a: {\n          id: \"a\",\n          user: userslist[\"a\"],\n          caption: \"Moving the community!\",\n          image: \"https://pbs.twimg.com/media/DOXI0IEXkAAkokm.jpg\"\n        },\n        b: {\n          id: \"b\",\n          user: userslist[\"a\"],\n          caption: \"Angular Book :)\",\n          image:\n            \"https://cdn-images-1.medium.com/max/1000/1*ltLfTw87lE-Dqt-BKNdj1A.jpeg\"\n        },\n        c: {\n          id: \"c\",\n          user: userslist[\"a\"],\n          caption: \"Me at Frontstack.io\",\n          image: \"https://pbs.twimg.com/media/DNNhrp6W0AAbk7Y.jpg:large\"\n        },\n        d: {\n          id: \"d\",\n          user: userslist[\"a\"],\n          caption: \"Moving the community!\",\n          image: \"https://pbs.twimg.com/media/DOXI0IEXkAAkokm.jpg\"\n        }\n      }\n    };\n    [...]\n```\n\nThe data is truncated for brevity. You can fetch the complete data from the `server.js` file on [Github](https://github.com/christiannwamba/instagram-clone/blob/master/server/server.js).\n\nNow that this is specified, the next thing to do is to specify the resolver function for the API. The resolver ****tells your server how to handle an incoming query telling it where to get the data for a given field. Add the resolver to the `server.js` file that looks like this:\n\n``` javascript\n    // server/server.js\n    [...]\n    // The root provides a resolver function for each API endpoint\n    let root = {\n      user: function({ id }) {\n        return userslist[id];\n      },\n      post: function({ user_id , post_id }) {\n        return postslist[user_id][post_id];\n      },\n      posts: function({ user_id }){\n        return Object.values(postslist[user_id]);\n      }\n    };\n    [...]\n```\n\nHere the functions `user` and `post` return data that matches the criteria specified above. `posts` returns all the posts created by a specific user. Now that this is all done, let’s create an Express app and have the server listen for incoming requests:\n\n``` javascript\n    // server/server.js\n    [...]\n    let app = express();\n    app.use(cors());\n    app.use(\n      \"/graphql\",\n      graphqlHTTP({\n        schema: schema,\n        rootValue: root,\n        graphiql: true\n      })\n    );\n    // set application port\n    app.listen(4000);\n```\n\nGraphQL also comes with an interactive console that could be displayed to allow developers get familiar with GraphQL queries. The `grapgiql: true` option specifies that this should also be mounted on the `/graphql` route of the express server.\n\nNow, when you run the `server.js` file, your server will be hosted at `http://localhost:4000/graphql`. \n\n```\n    node server\n```\n\nWhen you visit the URL in the browser,  you get the following:\n\n![instagram-clone-graphql](//images.ctfassets.net/1es3ne0caaid/3xeZYg3Ck82u2OWkIMEQCG/ec13578cf59e83d384d950101ddf3211/instagram-clone-graphql.png)\n\n\nYou can test it out by pasting this query into the GraphiQL console:\n\n``` json\n    {\n      user(id: \"a\"){\n        nickname,\n      }\n    }\n```\n\nWhen you hit the run button, you can get the result:\n\n![instagram-clone-graphql-result-1](//images.ctfassets.net/1es3ne0caaid/3kLI9o0RyogmcAKiKOAMau/936d93495403302a3f7dfa605048f68b/instagram-clone-graphql-result-1.png)\n\nThis is the query in the above screenshot, with one modification:\n\n``` json\n    {\n      user(id: \"a\"){\n        nickname,\n        avatar\n      }\n    }\n```\n\nAs you can see in the result below, all that needs to be changed is the description of what you want from the server.\n\n![instagram-clone-graphql-result-2](//images.ctfassets.net/1es3ne0caaid/3egEK130TuaayOu4muESom/83a0cd83f3636dfc10c7376fca741992/instagram-clone-graphql-result-2.png)\n\n\nFrom the screenshots above, you can see that the server only returns the data that was requested of it. Nothing more, nothing less.\n\n\n## Connect the React client to the GraphQL server\n\nNow, let’s see how to connect the server to our React UI that was created in the part of this series. To do this, we are going to make use of [Apollo](https://www.apollographql.com/client). \n\n### Getting set up with Apollo\nFirst, let’s install the necessary packages in the root folder of the react project.\n\n```\n    cd react-instagram-clone\n    npm install apollo-boost react-apollo graphql-tag graphql --save\n```\n\nNow that the installations are complete, create a new Apollo Client in the `src/app.js` file:\n\n``` javascript\n    // src/app.js\n    [...]\n    import ApolloClient from 'apollo-boost';\n    \n    const client = new ApolloClient({\n        uri : \"http://localhost:4000\"\n    })\n    [...]\n```\n\nThe `uri` used above is that of the GraphQL server that was created earlier. \n\n### Connecting the Apollo Client to React\nThen wrap the content of the App component in an `ApolloProvider` passing the created client as one of the props.\n\n``` javascript\n    // src/app.js\n    [...]\n    import { ApolloProvider } from \"react-apollo\";\n    \n    const client = new ApolloClient({\n      uri: \"http://localhost:4000/graphql\"\n    });\n    \n    const App = () =\u003e {\n      return (\n        \u003cApolloProvider client={client}\u003e\n          \u003cdiv className=\"App\"\u003e\n            \u003cHeader /\u003e\n            \u003csection className=\"App-main\"\u003e\n              \u003cPost /\u003e\n            \u003c/section\u003e\n          \u003c/div\u003e\n        \u003c/ApolloProvider\u003e\n      );\n    };\n    export default App;\n```\n\nThis allows us to use the created client all through the different components of our application without having to create a new Apollo Client every time.\n\n\n## Render server-provisioned data\n\nNow, let’s begin to make queries to render posts from the GraphQL server created earlier on. To do this, you’ll have to tweak the `src/components/Post/index.js` as follows:\n\nImport the necessary modules that would be needed to construct queries:\n\n``` javascript\n    // src/components/Post/index.js\n    import { Query } from \"react-apollo\";\n    import gql from \"graphql-tag\";\n    \n    [...]\n```\n\nNow, make query inside the `Post` component like this:\n\n``` javascript\n    // src/components/Post/index.js\n    const Post = () =\u003e {\n      return (\n        \u003cQuery\n          query={gql`\n            {\n              post(user_id: \"a\", post_id: \"a\") {\n                image\n                caption\n                user {\n                  nickname\n                  avatar\n                }\n              }\n            }\n          `}\n        \u003e\n          // handle result of the query\n          [...]\n        \u003c/Query\u003e\n      )\n    }\n```\n\nWe are going to replace the dots with the query handler but first let’s understand how query itself. The code above creates a GraphQL query that will be executed. When this query is run using the GraphiQL UI this result is obtained. \n\nYou can paste this query in your GraphiQL:\n\n``` json\n    {\n      post(user_id: \"a\", post_id: \"a\") {\n        image\n        caption\n        user {\n          nickname\n          avatar\n        }\n      }\n    }\n```\n\nWhen you run it, you get the result below:\n\n![instagram-clone-graphql-result-3](//images.ctfassets.net/1es3ne0caaid/18kOEEr6IkSckc268WAqoa/2e03f72c3fdd77ab7e6eb0e55b17b1e5/instagram-clone-graphql-result-3.png)\n\n\nNow, let’s handle the result as follows:\n\n``` javascript\n    // src/components/Post/index.js\n    [...]\n      {({ loading, error, data }) =\u003e {\n            if (loading) return \u003cp\u003eLoading Post...\u003c/p\u003e;\n            if (error) return \u003cp\u003eError loading Post:(\u003c/p\u003e;\n            let image = data.post.image;\n            let caption = data.post.caption;\n            let user = data.post.user;\n            \n            // return JSX to be rendered\n            [...]\n```\n\nChecks are made to see if the query is executed successfully. If it is, the data returned from the query is obtained and the result is handled as follows:\n        \n``` javascript\n    // src/components/Post/index.js\n            [...]\n            return (\n              \u003carticle className=\"Post\" ref=\"Post\"\u003e\n                \u003cheader\u003e\n                  \u003cdiv className=\"Post-user\"\u003e\n                    \u003cdiv className=\"Post-user-avatar\"\u003e\n                      \u003cimg src={user.avatar} alt={user.nickname} /\u003e\n                    \u003c/div\u003e\n                    \u003cdiv className=\"Post-user-nickname\"\u003e\n                      \u003cspan\u003e{user.nickname}\u003c/span\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/header\u003e\n                \u003cdiv className=\"Post-image\"\u003e\n                  \u003cdiv className=\"Post-image-bg\"\u003e\n                    \u003cimg alt={caption} src={image} /\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv className=\"Post-caption\"\u003e\n                  \u003cstrong\u003e{user.nickname}\u003c/strong\u003e {caption}\n                \u003c/div\u003e\n              \u003c/article\u003e\n            );\n          }}\n        \u003c/Query\u003e\n      );\n    };\n    \n    export default Post;\n```\n\nNow, when you run the react app using the command:\n\n```\n    yarn start # or npm start -- based on the package manager of choice\n``` \n\n\nthe application is loaded on `http://localhost:3000/` and the following view is obtained:\n\n\n\u003e Make sure that the GraphQL server is still running\n\n![instagram-clone-part-1-complete](//images.ctfassets.net/1es3ne0caaid/513bWOORAIk4k6Eo6Mgcki/bffd3206773e6ae2f91c457cf515b3fe/instagram-clone-part-1-complete.png)\n\n\n\n## Fetching and displaying multiple posts\n\nIn a real life scenario, you don’t expect to only have one post showing on your version of Instagram . What needs to be done now is that a new `Posts` component needs to be created to allow for dynamic queries and display of multiple posts. Let’s see how to do this. \n\nCreate a new `Posts` folder in the `/src/components` directory\n\n```\n    mkdir Posts \u0026\u0026 cd Posts\n```\n\nCreate an `index.js` file in the `Posts` folder:\n\n```\n    touch index.js\n```\n\nLet’s edit the `Posts/index.js` file to look like this:\n\nFirst, import the necessary node modules:\n\n``` javascript\n    // src/components/Posts/index.js\n    import React from \"react\";\n    import \"./Posts.css\";\n    import { Query } from \"react-apollo\";\n    import gql from \"graphql-tag\";\n    import Post from \"../Post\";\n    [...]\n```\n\nThen make Query for all the posts in the `Posts` component:\n\n``` javascript\n    // src/components/Posts/index.js\n    [...]\n    const Posts = () =\u003e {\n      return (\n        \u003cQuery\n          query={gql`\n            {\n              posts(user_id: \"a\"){\n                id\n                user{\n                  nickname\n                  avatar\n                }\n                image\n                caption\n              }\n            }\n          `}\n        \u003e\n        [...]\n```   \n\n Now, let’s handle the results of the Query like we did earlier on:\n \n``` javascript\n    // src/components/Posts/index.js\n        [...]\n        {({loading, error, data}) =\u003e {\n            if (loading) return \u003cp\u003eLoading Posts...\u003c/p\u003e;\n            if (error) return \u003cp\u003eError Fetching Posts...\u003c/p\u003e;\n            let posts = data.posts;\n            \n            return \u003cdiv className=\"Posts\"\u003e\n              {posts.map(post =\u003e \u003cPost nickname={post.user.nickname} avatar={post.user.avatar} image={post.image} caption={post.caption} key={post.id}/\u003e)}\n            \u003c/div\u003e;\n          }}\n        \u003c/Query\u003e\n      );\n    }\n    \n    export default Posts;\n```\n\nNotice how the `Post` component was used above. Let’s tweak the `Post` component to allow for this. Edit the `src/components/Post/index.js` to look as follows:\n\n``` javascript\n    import React, { Component } from \"react\";\n    import \"./Post.css\";\n    class Post extends Component {\n      render() {\n        const nickname = this.props.nickname;\n        const avatar = this.props.avatar;\n        const image = this.props.image;\n        const caption = this.props.caption;\n        return (\n          \u003carticle className=\"Post\" ref=\"Post\"\u003e\n            \u003cheader\u003e\n              \u003cdiv className=\"Post-user\"\u003e\n                \u003cdiv className=\"Post-user-avatar\"\u003e\n                  \u003cimg src={avatar} alt={nickname} /\u003e\n                \u003c/div\u003e\n                \u003cdiv className=\"Post-user-nickname\"\u003e\n                  \u003cspan\u003e{nickname}\u003c/span\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/header\u003e\n            \u003cdiv className=\"Post-image\"\u003e\n              \u003cdiv className=\"Post-image-bg\"\u003e\n                \u003cimg alt={caption} src={image} /\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"Post-caption\"\u003e\n              \u003cstrong\u003e{nickname}\u003c/strong\u003e {caption}\n            \u003c/div\u003e\n          \u003c/article\u003e\n        );\n      }\n    }\n    \n    export default Post;\n```\n\nAs seen above, the Post component has the `nickname`, `avatar`, `image` and `caption` which are dynamically added for each post that is fetched from the GraphQL server.\n\nRecall in the `src/components/Posts/index.js` we did this:\n\n``` javascript\n    // src/components/Posts/index.js\n    return \n      \u003cdiv className=\"Posts\"\u003e\n        {\n        posts.map(\n          post =\u003e \u003cPost nickname={post.user.nickname} avatar={post.user.avatar} image={post.image} caption={post.caption} key={post.id}/\u003e\n          )\n        }\n    \u003c/div\u003e;\n```\n\nWhat happened here is that all the posts received from the GraphQL server were mapped to Post components with the necessary data properties. \n\nCreate a `Posts.css` file in the `src/components/Posts` directory that will contain any styling you wish to add to the Posts component:\n\n```\n    touch Posts.css\n```\n\nNow, when you visit your application at `http://localhost:3000/` you get the following:\n\n\n\u003e Ensure that your GraphQL server is still running\n\n\n![instagram-clone-part-2-complete-1](//images.ctfassets.net/1es3ne0caaid/5jDZ0qWVDq0WAYyCcygS4w/6df2382517deb582ab48c0ea8bfa2387/instagram-clone-part-2-complete-1.png)\n\n![instagram-clone-part-2-complete-2](//images.ctfassets.net/1es3ne0caaid/OqquLfO3YGSUSCQCoM8gU/e53fb943de49c8bd3d06cda89be520cd/instagram-clone-part-2-complete-2.png)\n\n\n\n## Conclusion\n\nIn this part of the series, we took a look at GraphQL and how to create a GraphQL server. We also saw how to link our existing React UI to the GraphQL server using the Apollo Client. In the [next part](https://pusher.com/tutorials/instagram-clone-part-3) of the series, we are going to look at how to add realtime feed updates to the Instagram clone application using Pusher. Here’s a link to the full [Github](https://github.com/christiannwamba/instagram-clone) repository if you’re interested.","metaTitle":"Build an Instagram clone with React — Part 2: GraphQL","metaDescription":"Use React, Node and Pusher to build an Instagram clone. In part two, use GraphQL to connect your data to your UI."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1RAwp0Srr6qKOayCc8OQAa","type":"Entry","createdAt":"2018-04-30T12:48:42.775Z","updatedAt":"2018-04-30T16:41:03.503Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime Instagram clone — Part 3: Realtime feed updates with Pusher and desktop notifications","url":"instagram-clone-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/instagram-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2018-04-27","description":"This four-part series takes you through building an Instagram clone using Node and React. In part three, implement realtime feed updates with Pusher, and create desktop notifications.","prerequisite":"You should have completed the previous parts of the series.","content":"*This is part 3 of a 4 part tutorial. You can find part 1 [here](https://pusher.com/tutorials/instagram-clone-part-1), part 2 [here](https://pusher.com/tutorials/instagram-clone-part-2) and part 4 [here](https://pusher.com/tutorials/instagram-clone-part-4).*\n\nIn the [last part](https://pusher.com/tutorials/instagram-clone-part-2) of this series, we looked at how to connect the GraphQL server to our React Instagram clone allowing for dynamic posts to be viewed on the homepage. Now, to give users a seamless and fluid experience when interacting with the application, let’s add realtime functionality to it. This will update feeds as new posts are created and a notification system will also be put in place to allow for this. \n\nTo make this possible, [Pusher](https://pusher.com) is going to be integrated into the application to make it easier to bring realtime functionality without worrying about infrastructure.\n\n## Prerequisites\n- Should have read previous parts of the series\n- Basic knowledge of JavaScript\n- Node installed on your machine\n- NPM installed on your machine\n\n\n## Configure Pusher on the server\n\nTo get started with Pusher, create a [developer account](https://pusher.com/signup). Once you do this, [create your application](https://dashboard.pusher.com/#wizard-modal) and get your application keys. \n\n\n\u003e Note your application keys as you will need them later on in the article\n\n### Install the Node modules\nOnce you do that, you will need to install the Node modules needed for the application to work in the `server` directory of the application:\n\n```\n    npm install pusher connect-multiparty body-parser --save\n```\n\n- `pusher` to integrate realtime functionality\n- `body-parser` and `connect-multiparty` to handle incoming requests\n\n### Import the Node modules\nNow that the necessary modules have been installed, the next thing is to import them for use in the `server/server.js` file. Edit it to look like this:\n\n``` javascript\n    // server/server.js\n    [...]\n    \n    let Pusher = require(\"pusher\");\n    let bodyParser = require(\"body-parser\");\n    let Multipart = require(\"connect-multiparty\");\n    \n    [...]\n```\n\n### Configure the Pusher client\nYou will also need to configure your Pusher client to allow you to trigger events. To do this, add the following to the `server.js` file:\n\n``` javascript\n    // server/server.js\n    [...]\n    \n    let pusher = new Pusher({\n      appId: 'PUSHER_APP_ID',\n      key: 'PUSHER_APP_KEY',\n      secret: 'PUSHER_APP_SECRET',\n      cluster: 'PUSHER_CLUSTER',\n      encrypted: true\n    });\n    \n    // create express app\n    [...]\n```\n\n### Creating the endpoint for storing new posts\nTo simulate the effect of creating a new post, a new endpoint is added to the application as follows:\n\n``` javascript\n    // server/server.js\n    \n    // add Middleware\n    let multipartMiddleware = new Multipart();\n    \n    // trigger add a new post \n    app.post('/newpost', multipartMiddleware, (req,res) =\u003e {\n      // create a sample post\n      let post = {\n        user : {\n          nickname : req.body.name,\n          avatar : req.body.avatar\n        },\n        image : req.body.image,\n        caption : req.body.caption\n      }\n      \n      // trigger pusher event \n      pusher.trigger(\"posts-channel\", \"new-post\", { \n        post \n      });\n    \n      return res.json({status : \"Post created\"});\n    });\n    \n    // set application port\n    [...]\n```\n\nWhen a post request is made to the `/post` route, the data submitted is then used to construct a new post and then the  `new-post` event is triggered in the `post-channel` and a response is sent to the client making the request.\n\n## Configure Pusher on the client\n\nNow that the server has been configured, the next thing that needs to be done is to get Pusher working in our React application. To do this, let’s install the JavaScript Pusher module in the root of the `instagram-clone` directory:\n\n```\n    npm install pusher-js\n```\n\n### Set up the Pusher client\nNow that the module is installed, the Pusher module needs to be used. Edit the `src/App.js` like this:\n\n``` javascript\n    // src/App.js\n    \n    import React, {Component} from 'react';\n    [...]\n    // import pusher module\n    import Pusher from 'pusher-js';\n    \n    // set up graphql client\n    [...]\n    \n    // create component\n    class App extends Component{\n      constructor(){\n        super();\n        // connect to pusher\n        this.pusher = new Pusher(\"PUSHER_APP_KEY\", {\n         cluster: 'eu',\n         encrypted: true\n        });\n      }\n    \n      render(){\n        return (\n          \u003cApolloProvider client={client}\u003e\n            \u003cdiv className=\"App\"\u003e\n              \u003cHeader /\u003e\n              \u003csection className=\"App-main\"\u003e\n                {/* pass the pusher object and apollo to the posts component */}\n                \u003cPosts pusher={this.pusher} apollo_client={client}/\u003e\n              \u003c/section\u003e\n            \u003c/div\u003e\n          \u003c/ApolloProvider\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nNotice that in the snippet above, `pusher` and `apollo_client` are passed as properties for the `Posts` component.\n\nLet’s examine the Posts component.\n\n``` javascript\n    // src/components/Posts/index.js\n    \n    import React, {Component} from \"react\";\n    import \"./Posts.css\";\n    import gql from \"graphql-tag\";\n    import Post from \"../Post\";\n    \n    class Posts extends Component{\n      constructor(){\n        super();\n        this.state = {\n          posts : []\n        }\n      }\n      [...]\n```\n\nIn the constructor of the Posts component an array of posts is added to the state of the component.\n\nThen, we use the lifecycle function `componentDidMount()` to make a query to fetch the existing posts from the server and then set the posts.\n\n``` javascript\n    // src/components/Posts/index.js\n    [...]\n    \n    componentDidMount(){\n        // fetch the initial posts \n        this.props.apollo_client\n          .query({ \n            query:gql`\n              {\n                posts(user_id: \"a\"){\n                  id\n                  user{\n                    nickname\n                    avatar\n                  }\n                  image\n                  caption\n                }\n              } \n            `})\n          .then(response =\u003e {\n            this.setState({ posts: response.data.posts});\n          });\n          [...]\n```\n\n### Subscribe to realtime updates\nNext thing is to subscribe the component to the `posts-channel` and then listen for `new-post` events:\n\n``` javascript\n    // src/components/Posts/index.js\n          [...]\n          //  subscribe to posts channel\n        this.posts_channel = this.props.pusher.subscribe('posts-channel');\n    \n        // listen for a new post\n        this.posts_channel.bind(\"new-post\", data =\u003e {\n            this.setState({ posts: this.state.posts.concat(data.post) });\n          }, this);\n      }\n      [...]\n```\n\n### Displaying posts\nAfterwards, use the `render()` function to map the `posts` to the `Post` component like this:\n\n``` javascript\n    // src/components/Posts/index.js\n      [...]\n       render(){\n        return (\n          \u003cdiv className=\"Posts\"\u003e\n            {this.state.posts.map(post =\u003e \u003cPost nickname={post.user.nickname} avatar={post.user.avatar} image={post.image} caption={post.caption} key={post.id}/\u003e)}\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default Posts;\n```\n\nNow, you can go ahead and start your backend server `node server` and your frontend server `npm start`. When you navigate to `locahost:3000/` you get the following:\n\n![instagram-clone-post-creation-feed](//images.ctfassets.net/1es3ne0caaid/1oaET2U8Hyqc066Auq2Gu8/235f7e3dafcf6c1dab02e42485cae6b9/instagram-clone-post-creation-feed.gif)\n\n## Enable desktop notifications for new posts\n\nNow, sometimes users have tabs of applications open but aren’t using them. I’m sure as you’re reading this, you likely have more than one tab open in your web browser - if you’re special, you have \u003e 10. To keep the users engaged, the concepts of notifications was introduced. Developers can now send messages to users based on interaction with the application. Let’s leverage this to keep users notified when a new post has been created. \n\n### Checking if notifications are enabled in the browser\nSince this feature is fairly new, not all users of your application may have the notification feature on their browser. You need to make a check to see if notifications are enabled. To do this, tweak the `src/App.js` as follows:\n\n``` javascript\n    // src/App.js\n    \n    class App extends Component{\n      [...]\n    \n      componentDidMount(){\n        if ('actions' in Notification.prototype) {\n          alert('You can enjoy the notification feature');\n        } else {\n          alert('Sorry notifications are NOT supported on your browser');\n        }\n      }\n      \n      [...]\n    }\n    export default App;\n```\n\n### Requesting permissions\nTo get started, the first thing you will need to do is to get permission from the user to display notifications. This is put in place so that developers don’t misuse the privilege and begin to spam their users. Edit the `src/components/Posts/index.js` file as follows :\n\n``` javascript\n    // src/components/Posts/index.js\n    \n    [...]\n    \n    class Posts extends Components{\n      [...]\n      \n      componentDidMount(){\n          // request permission\n          Notification.requestPermission();\n        [...]\n```\n\nThe next thing that needs to be done is to now display the notification to the user when an event is met. This is done by tweaking the `this.posts_channel.bind()` function :\n\n``` javascript\n    // src/components/Posts/index.js\n        \n        [...]\n          //  subscribe to posts channel\n          this.posts_channel = this.props.pusher.subscribe(\"posts-channel\");\n          \n          this.posts_channel.bind(\"new-post\", data =\u003e {\n            // update states\n            this.setState({ posts: this.state.posts.concat(data.post) });\n            \n            // check if notifcations are permitted\n            if(Notification.permission === 'granted' ){\n              try{\n                // notify user of new post\n                new Notification('Pusher Instagram Clone',{ body: `New post from ${data.post.user.nickname}`});\n              }catch(e){\n                console.log('Error displaying notification');\n              }\n            }\n          }, this);\n        }\n        \n        render() {\n        return (\n          \u003cdiv\u003e\n            \u003cdiv className=\"Posts\"\u003e\n              {this.state.posts\n                .slice(0)\n                .reverse()\n                .map(post =\u003e (\n                  \u003cPost\n                    nickname={post.user.nickname}\n                    avatar={post.user.avatar}\n                    image={post.image}\n                    caption={post.caption}\n                    key={post.id}\n                  /\u003e\n                ))}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default Posts\n```\n\nNow, when you reload your application and head over to `localhost:3000/` and you get this: \n\n![instagram-clone-permission-browser](//images.ctfassets.net/1es3ne0caaid/luRPg9gZMs0OMI0CWYgmA/e41aad138d992acd5f0a3280d6151a71/instagram-clone-permission-browser.png)\n\n## Interacting with notifications\n\nTo add extra functionality, the notification could further be tweaked to allow users to interact with them. To do this, edit the `Notification` object like this:\n\n``` javascript\n    // src/components/Posts/index.js\n    \n    // check for notifications \n    if(Notification.permission === 'granted' ){\n      try{\n        // notify user of new post\n        let notification = new Notification(\n          'Pusher Instagram Clone',\n          { \n            body: `New post from ${data.post.user.nickname}`,\n            icon: 'https://img.stackshare.io/service/115/Pusher_logo.png',\n            image: `${data.post.image}`,\n          }\n        );\n        // open the website when the notification is clicked\n        notification.onclick = function(event){\n          window.open('http://localhost:3000','_blank');\n        }\n      }catch(e){\n        console.log('Error displaying notification');\n      }\n    }\n```\n\nWhen another user creates a new post, you then get a display that looks like this: \n\n![instagram-clone-notification](//images.ctfassets.net/1es3ne0caaid/t0FTrRsvE4oKC0QqEUsSQ/721ee430e7873b8a3002dab87f60b151/instagram-clone-notification.png)\n\nWhen the user clicks on the notification, they are directed to view the full post.\n\n## Conclusion\n\nIn this part of the series, we looked at how to incorporate realtime functionality into the `instagram-clone` application and also saw how to notify users when someone creates new posts using desktop notifications. In the [next](https://pusher.com/tutorials/instagram-clone-part-4) part of the series, we will see how to take our application offline using service workers. Here’s a link to the full [Github](https://github.com/christiannwamba/instagram-clone) repository if interested.","metaTitle":"Build an Instagram clone — Part 3: Feeds and notifications","metaDescription":"Use React, Node and Pusher to build an Instagram clone. In part three,implement realtime feed updates with Pusher, and create desktop notifications."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1i86k0I4cASq4UyMSqcmoy","type":"Entry","createdAt":"2018-02-22T15:02:44.929Z","updatedAt":"2018-03-13T14:51:01.847Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build live comments using JavaScript","url":"live-comments-javascript","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"wQhwNciAKWOW8SI2MSKww","type":"Entry","createdAt":"2018-02-13T10:47:12.980Z","updatedAt":"2018-02-14T10:09:05.816Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Rahat Khanna","url":"rahat-khanna","email":"rahat.khanna@yahoo.co.in","twitter":"https://twitter.com/mappmechanic","github":"https://github.com/mappmechanic","guestWriter":true}}],"projectRepo":"https://github.com/mappmechanic/flash-comments","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}}],"reviewDate":"2018-03-03","description":"Create a realtime comment feature for web applications using with JavaScript on frontend and Node.js on the backend.","prerequisite":"A basic understanding of JavaScript, HTML and CSS are needed to follow this tutorial.","content":"These days Social has become the buzzword and we all want our apps to be the centre of these amazing social conversations. Comments on a post, video, update or any feature of your new app is a great way to add fun and enriching social conversations to your app.\n\nIf these conversations can be Realtime, then it's even better, so in this blog post we will be discussing how we can create a realtime comment feature for our web apps using Pusher with Vanilla JavaScript on frontend and Node.js on the backend.\n\nWe will call this realtime comment system Flash Comments, which can be re-used for multiple posts/features in your app and can generate amazing conversations in real time. Our app will look something like this:\n\n![live-comments-javascript-demo](//images.contentful.com/1es3ne0caaid/1BhCVpuXIQck82ageYuwOs/b0a26816d2ea05c7d65176412506aae3/live-comments-javascript-demo.gif)\n \n*Skip the next section, if you have already signed up with Pusher.*\n\n## Signing up with Pusher\n\nYou can create a free account in Pusher [here](http://pusher.com/signup). After you signup and login for the first time, you will be asked to create a new app as seen in the picture below. You will have to fill in some information about your project and also the frontend library or backend language you will be building your app with. You also have an option to select the cluster of Pusher based on your users location distribution, I have chosen `ap2 (Mumbai, India)` as I may be building an app for the India region.\n\n![live-comments-javascript-pusher-create-app](//images.contentful.com/1es3ne0caaid/5xzHX5l0k06GOA0mscaWQ6/15e51b2e8bc2054428c4e68eb7e85199/live-comments-javascript-pusher-create-app.png)\n\nFor this particular blog post, we will be selecting Vanilla JavaScript for the frontend and Node.js for the backend as seen in the picture above. This will just show you a set of starter sample codes for these selections, but you can use any integration kit later on with this app.\n\n![live-comments-javascript-pusher-getting-started](//images.contentful.com/1es3ne0caaid/7JfFi9Ql7qoUuqUwwYcAUW/686e20ab6d067da94c6db2eb1acab4ea/live-comments-javascript-pusher-getting-started.png)\n\n## Node.js App\n\n### Initialising Node Project\n\nYou can create a new folder named flash-comments and run the following command at the root of the folder:\n\n```\nnpm init\n```\n\nIt will ask you bunch of information regarding the app and it will create a new package.json file inside your folder.\n\nWe will be using the fairly simple and popular Express framework in Node. Now, we will install the important packages that will be used in our minimal Express app.\n\n```\nnpm install -g express body-parser path --save\n```\n\nAfter installing all required `npm` modules, now we will create an entry point file for our Node app as `server.js` inside the root folder. Add the following basic code for a basic HTTP Server to be run using port `9000`.\n\n```\nvar express = require('express');\nvar path = require('path');\nvar bodyParser = require('body-parser');\n\nvar app = express();\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(express.static(path.join(__dirname, 'public')));\n\n// Error Handler for 404 Pages\napp.use(function(req, res, next) {\n    var error404 = new Error('Route Not Found');\n    error404.status = 404;\n    next(error404);\n});\n\nmodule.exports = app;\n\napp.listen(9000, function(){\n  console.log('Example app listening on port 9000!')\n});\n```\n\nPusher has an open source NPM module for Node.js integrations which we will be using. It provides a set of utility methods to integrate with Pusher APIs using a unique `appId`, `key` and a `secret`. We will first install the pusher `npm` module using the following command:\n\n```\nnpm install pusher --save\n```\nNow, we can use require to get the Pusher module and to create a new instance passing an options object with important keys to initialise our integration. For this blog post, I have put random keys; you will have to obtain it for your app from the Pusher dashboard.\n\n```\nvar Pusher = require('pusher');\n\nvar pusher = new Pusher({\n  appId: '303964',\n  key: '82XXXXXXXXXXXXXXXXXb5',\n  secret: '7bXXXXXXXXXXXXXXXX9e',\n  cluster: 'ap2',\n  encrypted: true\n});\n\nvar app = express();\n...\n```\n\nYou will have to replace the `appId`, `key` and `secret` with values specific to your own app. After this, we will write code for a new API which will be used to create a new comment. This api will expose the route `/comment` with HTTP `POST` method and will expect an object for comment with the properties name, email and comment. Add the following code to your `server.js` file before the app.listen part.\n\n```\napp.post('/comment', function(req, res){\n  console.log(req.body);\n  var newComment = {\n    name: req.body.name,\n    email: req.body.email,\n    comment: req.body.comment\n  }\n  pusher.trigger('flash-comments', 'new_comment', newComment);\n  res.json({ created: true });\n});\n```\nIn the above code, we have extracted the data from `req.body` into a `newComment` object and then used it to call the trigger method on Pusher instance.\n\n## Important Pusher Concepts\n\n### Channel\n\nIn Pusher, we have a conceptual grouping called channel and it provides the basic way to filter data in Pusher. A channel can represent many entities in a real world application. For example: In our comments app, a channel can be comments for a specific article, video, blog post, photo, live streaming of an event etc.\n\nWe would create a new unique channel id for each of these entities to uniquely identify or group data like comments associated with any one of these. Two unique live streaming videos should also have separate channel so that we can show the respective live comments stream on their respective pages.\n\nSo we will create a new unique channel for each entity with their unique id, so for example a Youtube video comments channel can be named `comments-youtube-234`.\n\nThere are three types of channel\n\n- **Public Channel** - can be subscribed by anyone who knows the name of the channel.\n- **Private Channel** - channel which can be subscribed by authorised users only. If the channel name has a `private-` prefix, it will be regarded as a private channel.\n- **Presence Channel** - this is a special channel type similar to private as only authorised users can subscribe, where the subscribers list is also maintained and notified to other users also. Channel name should have a prefix `presence-`\n \nWe will use a public channel in our blog post which we are naming as flash-comments but you should ideally use a private channel for commenting systems with unique name for each entity you want to enable commenting feature.\n\n### Event\n\nNow, the real data in pusher is transmitted through events which is the primary way of packaging messages. An event can be triggered by a backend or even client in special cases for any particular channel. A channel is required to ensure that your message reaches the intended recipient.\n\nWe give a unique name to each event so that we can setup handlers for receiving and processing these event messages at each of our client end who has subscribed to any channel.\n\n### Pusher Trigger Method\n\nNow we will understand our server side code for sending an Event to the pusher channel flash-comments.\n\n```\n...\npusher.trigger('flash-comments', 'new_comment', newComment);\n...\n```\nWe are using the `.trigger(channel-name,event-name, payload)`** to send an Event from the server whenever the `POST API` is called for creating a new comment. For the simplicity of this blog post, we will not use any database to save and persist the comments but in a production system, you would be required to store a comment corresponding to a unique entity id like a Youtube Video ID or a Blog Post ID.\n\nNow, we can run our server using `node server` command. Our web service will be accessible on the URL `http://localhost:9000/comment`.We can write a POST request using any chrome extension like POSTMan or even CURL to test if it returns `{ \"created\":\"true\" }` .\n\nThe Curl command to test your POST api will be as follows:\n\n``` \ncurl -H \"Content-Type: appliaction/json\" -X POST -d '{\"name\":\"Rahat Khanna\",\"email\":\"rahat.khanna@yahoo.co.in\",\"comment\":\"Creating a sample comment\"}' http://localhost:9000/comment\n```\n\n## Frontend using Vanilla JavaScript\n\nNow, we will be writing the most crucial part, the frontend code using Vanilla JavaScript. In the frontend code we will be developing a Comments box section which would have following 2 features:\n\n- **Display** all the Live Comments added to the channel with a smooth animation\n- **Add** new comment to the live comments by hitting the POST Api we have just created\n \n### Step 1: Create a folder named public and create an index.html\n\nWe have already written code in our `server.js` to serve static content from `public` folder, so we will write all our frontend code in this folder.\n\nPlease create a new folder `public` and also create an empty `index.html` for now.\n\n### Step 2: Add boilerplate Code to our index.html\n\nWe will be adding some basic boilerplate code to setup the base structure for our web app like Header, Sections where content like video or blog post can be put and also the section which will contain our **Flash Comments** box.\n\n```\n\u003c!DOCTYPE\u003e\n\u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eMaking Social Comments Realtime \u0026 Fun with Pusher using Javascript like the Flash\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://unpkg.com/purecss@0.6.2/build/pure-min.css\" integrity=\"sha384-UQiGfs9ICog+LwheBSRCt1o5cbyKIHbwjWscjemyBMT9YCUMZffs6UqUTd0hObXD\" crossorigin=\"anonymous\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Raleway:200\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"./style.css\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cheader\u003e\n            \u003cdiv class=\"logo\"\u003e\n                \u003cimg src=\"./assets/pusher-logo.png\" /\u003e\n            \u003c/div\u003e\n        \u003c/header\u003e\n        \u003csection\u003e\n            \u003cimg class=\"flash-logo\" src=\"./assets/flash-logo.jpg\" /\u003e\n            \u003ch2\u003eFlash Comments - Super Fast\u003c/h2\u003e\n            \u003cdiv class=\"post\"\u003e\n      \u003c!-- Put here Content like Youtube Video, Blog Post or Live Stream --\u003e\n            \u003c/div\u003e\n        \u003c/section\u003e\n        \u003csection\u003e\n\n           \u003cdiv class=\"flash-comments\"\u003e\n                \u003cdiv class=\"header\"\u003e\n                    \u003cdiv\u003e\u003cimg src=\"./assets/comments.png\"\u003e\u003c/div\u003e\n                    \u003cdiv class=\"text\"\u003eComments\u003c/div\u003e\n                \u003c/div\u003e\n                \u003cform class=\"pure-form\" id=\"comment-form\"\u003e\n                    \u003c!-- Here we will put a form to create new comment --\u003e\n                \u003c/form\u003e\n                 \u003cdiv class=\"comments-list\" id=\"comments-list\"\u003e\n                    \u003c!-- Here we will display live comments --\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/section\u003e\n    \u003c/body\u003e\n\u003c/html\u003e\n```\n### Step 3: Create style.css file\n\nNow we will also create a `style.css` file to contain the important css code for styling our web app and the **flash comments** component. We will add basic styles to render our skeleton.\n\n```\nbody{\n    margin:0;\n    padding:0;\n    overflow: hidden;\n    font-family: Raleway;\n}\n\nheader{\n    background: #2b303b;\n    height: 50px;\n    width:100%;\n    display: flex;\n    color:#fff;\n}\n\n.flash-logo{\n    height:60px;\n    border-radius: 8px;\n    float: left;\n    margin-right: 15px;\n}\n\n\nsection{\n    padding: 15px;\n    width:calc(100% - 45px);\n}\n\n.logo img{\n    height: 35px;\n    padding: 6px;\n    margin-left: 20px;\n}\n\n\n.flash-comments{\n    border:1px solid #aeaeae;\n    border-radius: 10px;\n    width:50%;\n    overflow: hidden;\n}\n\n.post{\n    padding-top:10px;\n}\n\n.flash-comments .header{\n    display: flex;\n    padding: 5px 20px;\n    border-bottom: 1px solid #eaeaea;\n}\n\n.flash-comments .header .text{\n    padding-left:15px;\n    line-height: 25px;\n}\n\n.flash-comments .comment{\n    display: flex;\n    border-bottom:1px solid #eaeaea;\n    padding: 4px;\n}\n```\n### Step 4: Add the Pusher JS library and create app.js\n\nNow we will add the Pusher Vanilla JavaScript Library available on its CDN to use it to integrate with the Pusher system using plain JavaScript code. Please add the following script tag at the end of the body before its closing tag:\n\n```\n...\n\u003cscript type=\"text/javascript\" src=\"https://js.pusher.com/3.2/pusher.min.js\"\u003e\u003c/script\u003e\n\u003c/body\u003e\n...\n```\n\nAlso, create a new `app.js` file where we will be writing all our code and also import the same in our `index.html` file after the script tag to import Pusher JS file.\n\n``` \n\u003cscript type=\"text/javascript\" src=\"https://js.pusher.com/3.2/pusher.min.js\"\u003e\u003c/script\u003e\n\u003cscript type=\"text/javascript\" src=\"./app.js\"\u003e\u003c/script\u003e\n\u003c/body\u003e\n```\n\nIn our file `app.js` now, we will write code to initialise the Pusher instance using the unique client API key we have got from the Pusher dashboard. We will also pass an object specifying the cluster and setting the flag encrypted to true so that all messaging \u0026 communication is encrypted. We will also use the `pusher.subscribe('channel-name')` to listen to all events for a specific channel.\n\nWe will create a JavaScript IIFE (Immediately Invoking Functions) to create a private scope so that we do not pollute global scope. Please add the following code to `app.js` file:\n\n```\n// Using IIFE for Implementing Module Pattern to keep the Local Space for the JS Variables\n(function() {\n    // Enable pusher logging - don't include this in production\n    Pusher.logToConsole = true;\n\n    var serverUrl = \"/\",\n        comments = [],\n        pusher = new Pusher('82XXXXXXXXXXXXXX5', {\n          cluster: 'ap2',\n          encrypted: true\n        }),\n        // Subscribing to the 'flash-comments' Channel\n        channel = pusher.subscribe('flash-comments');\n\n})();\n```\n\n### Step 5: Creating Form for adding new comment\n\nNow, we will create the form controls for letting the user input their name, email and comment text for creating a new comment using our Node API and Pusher. We will add the following HTML code inside the existing form tag to create form.\n\n```\n\u003cform class=\"pure-form\" id=\"comment-form\"\u003e\n  \u003cdiv class=\"comment-form\"\u003e\n      \u003cdiv class=\"left-side\"\u003e\n           \u003cdiv class=\"row\"\u003e\n               \u003cinput type=\"text\" required placeholder=\"enter your name\" id=\"new_comment_name\"\u003e\n               \u003cinput placeholder=\"enter valid email\" required type=\"email\" id=\"new_comment_email\"\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003ctextarea placeholder=\"enter comment text\" required id=\"new_comment_text\" rows=\"3\"\u003e\u003c/textarea\u003e\n            \u003c/div\u003e\n      \u003c/div\u003e\n     \u003cdiv class=\"right-side\"\u003e\n            \u003cbutton type=\"submit\" class=\"button-secondary pure-button\"\u003eSend Comment\u003c/button\u003e\n     \u003c/div\u003e\n \u003c/div\u003e\n\u003c/form\u003e\n```\n\nIn the form code above, we have used HTML5 validations like required \u0026 type=email which would not allow user to keep these fields blank or submit an invalid email. These validations will automatically work in most browsers which support HTML5 form validations.\n\nAlso, we will be adding the following css to style the form:\n\n```\n.flash-comments form{\n    margin-bottom: 0px;\n}\n\n.flash-comments .comment-form{\n    display: flex;\n    padding: 6px;\n    border-bottom:1px solid #eaeaea;\n}\n\n.comment-form .left-side{\n    flex: 5;\n    display: flex;\n    flex-direction: column;\n    padding-right: 5px;\n}\n\n.comment-form .left-side .row{\n    flex: 0 auto;\n    display: flex;\n    align-content: center;\n}\n\n.comment-form .left-side .row input{\n    height: 32px;\n    width: 50%;\n}\n\n.comment-form .left-side .row textarea{\n    height: 42px;\n    margin-top:8px;\n}\n\n.comment-form .right-side{\n    flex:1;\n    display: flex;\n    justify-content: center;\n}\n\n.comment-form .right-side button{\n    white-space: pre-wrap;\n}\n\n.comment-form textarea{\n    width:100%;\n}\n\n.button-secondary {\n    background: rgb(66, 184, 221); /* this is a light blue */\n    color: white;\n    border-radius: 4px;\n    text-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);\n}\n```\n\nAfter building the visual form, now we need to attach an event handler to the Submit event of the form. We will do that using the following code in the `app.js` file probably at the top after the var declarations:\n\n```\nvar commentForm = document.getElementById('comment-form');\n\n// Adding to Comment Form Submit Event\ncommentForm.addEventListener(\"submit\", addNewComment);\n```\n\nNow, we will write the code for implementation of the handler `addNewComment` with the following code:\n\n```\nfunction addNewComment(event){\n      event.preventDefault();\n      var newComment = {\n        \"name\": document.getElementById('new_comment_name').value,\n        \"email\": document.getElementById('new_comment_email').value,\n        \"comment\": document.getElementById('new_comment_text').value\n      }\n\n      var xhr = new XMLHttpRequest();\n      xhr.open(\"POST\", serverUrl+\"comment\", true);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState != 4 || xhr.status != 200) return;\n\n        // On Success of creating a new Comment\n        console.log(\"Success: \" + xhr.responseText);\n        commentForm.reset();\n      };\n      xhr.send(JSON.stringify(newComment));\n}\n```\n\nWe are using native XHR request to make an AJAX request to the Node API. You can use either jQuery Ajax or any framework-specific Ajax method in your app. Now if we run our application, then fill the form and submit it, then we will see a `Success: { created: true }`message in our browser developer tools console.\n\nAlso, we can see the Pusher Dashboard to see the stats about Event Messages sent for any channel:\n\n![live-comments-javascript-pusher-debug-console](//images.contentful.com/1es3ne0caaid/3KcihUCGjCMqAemywQ6WMO/fc45f25b84487e5430754e5e29b41b14/live-comments-javascript-pusher-debug-console.png)\n\n### Step 6: Display list of comments received for this channel\n\nNow, we will bind to the `new_comment` event on this channel `flash-comments` so that we can receive any message about new comment creation done from any client in realtime, and we can display all those comments.\n\nWe will first add a template for a new comment in our `index.html` file inside the div tag with `id=\"comments-list\"`.\n\n```\n\u003cdiv class=\"comments-list\" id=\"comments-list\"\u003e\n    \u003cscript id=\"comment-template\" type=\"text/x-template\"\u003e\n        \u003cdiv class=\"user-icon\"\u003e\n            \u003cimg src=\"./assets/user.png\" /\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"comment-info\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                  \u003cdiv class=\"name\"\u003e{{name}}\u003c/div\u003e\n                  \u003cdiv class=\"email\"\u003e{{email}}\u003c/div\u003e\n             \u003c/div\u003e\n             \u003cdiv class=\"row\"\u003e\n                   \u003cdiv class=\"text\"\u003e{{comment}}\u003c/div\u003e\n             \u003c/div\u003e\n         \u003c/div\u003e\n     \u003c/script\u003e\n\u003c/div\u003e\n```\n\nNow, we will write the JavaScript code to bind to the new_comment event on the pusher channel instance we have subscribed. Whenever the `new_comment` event will be fired, we will take the template innerHTML content and replace the placeholders `{{name}}, {{email}} \u0026 {{comment}}`with the data passed along with the event and append them to the `comments-list` div element.\n\n```\nvar commentsList = document.getElementById('comments-list'),\n    commentTemplate = document.getElementById('comment-template');\n\n// Binding to Pusher Event on our 'flash-comments' Channel\nchannel.bind('new_comment',newCommentReceived);\n\n// New Comment Received Event Handler\n    // We will take the Comment Template, replace placeholders \u0026 append to commentsList\n    function newCommentReceived(data){\n      var newCommentHtml = commentTemplate.innerHTML.replace('{{name}}',data.name);\n      newCommentHtml = newCommentHtml.replace('{{email}}',data.email);\n      newCommentHtml = newCommentHtml.replace('{{comment}}',data.comment);\n      var newCommentNode = document.createElement('div');\n      newCommentNode.classList.add('comment');\n      newCommentNode.innerHTML = newCommentHtml;\n      commentsList.appendChild(newCommentNode);\n    }\n\n```\n\nUsing the above code, a new div tag representing the new comment will automatically be created and appended to the `comments-list` container. We will now add the following css to nicely display the list of comments and also animate whenever a new comment appears on the list.\n\n```\n.flash-comments .user-icon{\n    flex: 0 80px;\n    display: flex;\n    justify-content: center;\n}\n\n.flash-comments .user-icon img{\n    height:45px;\n}\n\n.flash-comments .comment-info{\n    flex:5;\n}\n\n.flash-comments .comment-info .row{\n    display: flex;\n}\n\n.flash-comments .comment-info .name{\n    color: #000;\n}\n\n.flash-comments .comment-info .email{\n    color: #aeaeae;\n    margin-left: 10px;\n}\n\n.flash-comments .comment-info .text{\n    padding-top:6px;\n    font-size: 13px;\n}\n\n/* CSS Code for Animating Comment Element */\n.flash-comments .comment{\n  animation: animationFrames ease 1s;\n  animation-iteration-count: 1;\n  transform-origin: 50% 50%;\n  animation-fill-mode:forwards; /*when the spec is finished*/\n  -webkit-animation: animationFrames ease 1s;\n  -webkit-animation-iteration-count: 1;\n  -webkit-transform-origin: 50% 50%;\n  -webkit-animation-fill-mode:forwards; /*Chrome 16+, Safari 4+*/ \n  -moz-animation: animationFrames ease 1s;\n  -moz-animation-iteration-count: 1;\n  -moz-transform-origin: 50% 50%;\n  -moz-animation-fill-mode:forwards; /*FF 5+*/\n  -o-animation: animationFrames ease 1s;\n  -o-animation-iteration-count: 1;\n  -o-transform-origin: 50% 50%;\n  -o-animation-fill-mode:forwards; /*Not implemented yet*/\n  -ms-animation: animationFrames ease 1s;\n  -ms-animation-iteration-count: 1;\n  -ms-transform-origin: 50% 50%;\n  -ms-animation-fill-mode:forwards; /*IE 10+*/\n}\n\n@keyframes animationFrames{\n  0% {\n    opacity:0;\n    transform:  translate(-1500px,0px)  ;\n  }\n  60% {\n    opacity:1;\n    transform:  translate(30px,0px)  ;\n  }\n  80% {\n    transform:  translate(-10px,0px)  ;\n  }\n  100% {\n    opacity:1;\n    transform:  translate(0px,0px)  ;\n  }\n}\n\n@-moz-keyframes animationFrames{\n  0% {\n    opacity:0;\n    -moz-transform:  translate(-1500px,0px)  ;\n  }\n  60% {\n    opacity:1;\n    -moz-transform:  translate(30px,0px)  ;\n  }\n  80% {\n    -moz-transform:  translate(-10px,0px)  ;\n  }\n  100% {\n    opacity:1;\n    -moz-transform:  translate(0px,0px)  ;\n  }\n}\n\n@-webkit-keyframes animationFrames {\n  0% {\n    opacity:0;\n    -webkit-transform:  translate(-1500px,0px)  ;\n  }\n  60% {\n    opacity:1;\n    -webkit-transform:  translate(30px,0px)  ;\n  }\n  80% {\n    -webkit-transform:  translate(-10px,0px)  ;\n  }\n  100% {\n    opacity:1;\n    -webkit-transform:  translate(0px,0px)  ;\n  }\n}\n\n@-o-keyframes animationFrames {\n  0% {\n    opacity:0;\n    -o-transform:  translate(-1500px,0px)  ;\n  }\n  60% {\n    opacity:1;\n    -o-transform:  translate(30px,0px)  ;\n  }\n  80% {\n    -o-transform:  translate(-10px,0px)  ;\n  }\n  100% {\n    opacity:1;\n    -o-transform:  translate(0px,0px)  ;\n  }\n}\n\n@-ms-keyframes animationFrames {\n  0% {\n    opacity:0;\n    -ms-transform:  translate(-1500px,0px)  ;\n  }\n  60% {\n    opacity:1;\n    -ms-transform:  translate(30px,0px)  ;\n  }\n  80% {\n    -ms-transform:  translate(-10px,0px)  ;\n  }\n  100% {\n    opacity:1;\n    -ms-transform:  translate(0px,0px)  ;\n  }\n}\n```\n\nNow, you can run the app we have built, either in 2 different browsers or one in normal browser and the other in incognito window, and add multiple comments. We can see that the live comments will be added in realtime with a smooth animation.\n\n![live-comments-javascript-demo](//images.contentful.com/1es3ne0caaid/1BhCVpuXIQck82ageYuwOs/b0a26816d2ea05c7d65176412506aae3/live-comments-javascript-demo.gif)\n\nThe complete code for this tutorial is available on [Github](https://github.com/mappmechanic/flash-comments).\n\n## Conclusion\n\nWe have built a nice web app with live comments using Pusher, Node.js and Vanilla JavaScript. We can use this component with any of our applications and enable live comments for variety of social entities like Videos, Blog Post, Polls, Articles and live streams.\n\nWe have used the Node.js server to create a REST API to get a new comment and then trigger a Pusher event on a specific channel. For any real world application, we can take a unique id for each entity and use a unique channel name for any entity. In a production scenario we can also store the comments in a persistent storage and then later retrieve them.\n\nWe have also created a frontend app, which will connect to the Pusher API using Pusher JS library. We have created a form to hit the Node API which will trigger new_comment event. Comments are displayed in realtime with an animation using the bind method on the channel instance.","metaTitle":"Build live comments using JavaScript","metaDescription":"Create a realtime comment feature for web applications using with JavaScript on frontend and Node.js on the backend."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SkmKrcQxy0YGm8uqUYSE0","type":"Entry","createdAt":"2018-02-27T12:36:50.591Z","updatedAt":"2018-03-01T18:12:51.945Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a floating hearts effect in Swift","url":"floating-hearts-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/Realtime-Floating-Hearts-iOS-Pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2017-08-07","description":"Create a realtime social interactions like floating hearts for your iOS app using Swift","prerequisite":"A basic understanding of Swift and Node.js is needed to follow this tutorial.","content":"If you are a user of applications like Periscope, Instagram and Facebook, then you may have noticed they have a feature in their live streams where anytime someone likes the live content, the ‘likes’ float on your screen. This article will show you how you can implement the realtime floating hearts feature on your iOS application using Swift and Pusher. \n\nHere is a screen recording of what we will be achieving in this tutorial using Swift and Pusher.\n\n![floating-hearts-swift-demo](//images.contentful.com/1es3ne0caaid/7yuRqr4Fc4MWQ2oUeooS6Y/42c37cc1c3036e2faf1571a79d8b9fd9/floating-hearts-swift-demo.gif)\n\nFrom the recording, you can see that when the like button is tapped, the likes float to the top and they are also replicated on another device viewing the video being played. \n\nNow, let's begin the journey.\n\n## Requirements\nTo follow along in this tutorial you will need the following things:\n\n- Knowledge of Swift and Xcode storyboards.\n- Xcode installed on your machine.\n- A Pusher application - you can create a free Pusher account [here](https://pusher.com).\n- Node.js and NPM installed on your machine.\n- Cocoapods installed on your machine - install it using Ruby by running: `gem install cocoapods`.\n\nHopefully, you have all the requirements checked off. Let’s get started.\n\n\n## Creating the floating hearts application in Xcode\n\nLaunch Xcode and in there create a new project. We are going to call the app **streamlove** (yes, it’s lame we know). When you are done with the initial setup, close Xcode and launch terminal. `cd` to the root directory of your application and run `pod init`. This will create a `Podfile`  in the root directory. Open it in your text editor and replace the code there with the following:\n\n```\n    platform :ios, '9.0'\n    target 'streamlove' do\n      use_frameworks!\n      pod 'PusherSwift', '~\u003e 4.0'\n      pod 'Alamofire', '~\u003e 4.4'\n    end \n```\n\nAfter that save and close the file and run the command `pod install`. This should start installing all the dependencies required for the application we are creating. Now open the `streamlove.xcworkspace` file in Xcode.\n\nThe next thing we need to do is design our applications storyboard. Open the `Main.storyboard` file. We are going to add some mock views because we do not really want to implement anything on them and they are just there for the aesthetics. The main things we will focus on are the button and the background video. After designing our storyboard, this is what we hope to have:\n\n\n![floating-hearts-swift-storyboard](//images.contentful.com/1es3ne0caaid/11wmWB3OJgGcMyeYow6Gsc/516599ff54eea378db9739a6e0c70b0f/floating-hearts-swift-storyboard.png)\n\n\nIn this storyboard, we have a button to the bottom right of the screen, and that button has an `@IBAction`  in the `ViewController` so you will need to `ctrl+drag` to make the connection between the button and the `ViewController`.\n\nThis should add the `@IBAction` to the `ViewController` as shown below:\n\n```\n    @IBAction func hearted(_ sender: Any) {\n        // This function will be fired every time the button is tapped!\n    }\n```\n\n## Creating a background looping video in iOS using Swift\n\nNext, we will create the video background that will just simulate a live stream (since creating an actual live stream falls far out of the scope of this article). Open the `ViewController` file and paste the following in it:\n\n```\n    import UIKit\n    import PusherSwift\n    import Alamofire\n    \n    class ViewController: VideoSplashViewController {\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            loadVideoStreamSample()\n        }\n    \n        private func loadVideoStreamSample() {\n            let url = NSURL.fileURL(withPath: Bundle.main.path(forResource: \"video\", ofType: \"mp4\")!)\n            self.videoFrame = view.frame\n            self.fillMode = .resizeAspectFill\n            self.alwaysRepeat = true\n            self.sound = true\n            self.startTime = 0.0\n            self.duration = 10.0\n            self.alpha = 0.7\n            self.backgroundColor = UIColor.black\n            self.contentURL = url\n            self.restartForeground = true\n        }\n        \n        override var prefersStatusBarHidden: Bool {\n            return true\n        }  \n        \n        @IBAction func hearted(_ sender: Any) {\n            // This function will be called everytime the button is tapped!\n        }\n    }\n```\n\nIn the first line, we have imported the libraries we will need, but mostly later in the tutorial. Now, let us focus on the others. The `ViewController` extends a `VideoSplashViewController` that we have not yet created. In the `viewDidLoad` method we have called a method `loadVideoStreamSample` and in that method, we are basically loading a video and setting some parameters for the video. These parameters will be implemented in the `VideoSplashViewController`.\n\nNow for the `VideoSplashViewController`, we will be using a Swift library that is [available on Github](https://github.com/svtek/VideoSplashKit/). However, because the library does not support Swift 3, we will be picking out the files we need and converting them to support Swift 3. The first one is the [VideoSplashViewController](https://github.com/svtek/VideoSplashKit/blob/master/VideoSplashKit/Source/VideoSplashViewController.swift). Create a new file `VideoSplashViewController` that extends `UIViewController` and in there paste the following:\n\n```\n    import UIKit\n    import MediaPlayer\n    import AVKit\n    \n    public enum ScalingMode {\n        case resize\n        case resizeAspect\n        case resizeAspectFill\n    }\n    \n    public class VideoSplashViewController: UIViewController {\n        \n        private let moviePlayer = AVPlayerViewController()\n        private var moviePlayerSoundLevel: Float = 1.0\n        \n        public var videoFrame: CGRect = CGRect()\n        public var startTime: CGFloat = 0.0\n        public var duration: CGFloat = 0.0\n        public var backgroundColor = UIColor.black { didSet { view.backgroundColor = backgroundColor } }\n        public var contentURL: URL = URL(fileURLWithPath: \"\") { didSet { setMoviePlayer(url: contentURL) } }\n        public var sound: Bool = true { didSet { moviePlayerSoundLevel = sound ? 1 : 0 } }\n        public var alpha: CGFloat = 1 { didSet { moviePlayer.view.alpha = alpha } }\n        \n        public var alwaysRepeat: Bool = true {\n            \n            didSet {\n                \n                if alwaysRepeat {\n                    NotificationCenter.default.addObserver(forName:.AVPlayerItemDidPlayToEndTime, object:nil, queue:nil) { [weak self] (notification) in\n                        self?.playerItemDidReachEnd()\n                    }\n                    return\n                }\n                \n                if !alwaysRepeat {\n                    NotificationCenter.default.removeObserver(self, name:.AVPlayerItemDidPlayToEndTime, object: nil)\n                }\n            }\n        }\n        \n        public var fillMode: ScalingMode = .resizeAspectFill {\n            didSet {\n                switch fillMode {\n                case .resize:\n                    moviePlayer.videoGravity = AVLayerVideoGravityResize\n                case .resizeAspect:\n                    moviePlayer.videoGravity = AVLayerVideoGravityResizeAspect\n                case .resizeAspectFill:\n                    moviePlayer.videoGravity = AVLayerVideoGravityResizeAspectFill\n                }\n            }\n        }\n        \n        public var restartForeground: Bool = false {\n            didSet {\n                if restartForeground {\n                    NotificationCenter.default.addObserver(forName:.UIApplicationWillEnterForeground, object:nil, queue:nil) { [weak self] (notification) in\n                        self?.playerItemDidReachEnd()\n                    }\n                }\n            }\n        }\n        \n        override public func viewDidAppear(_ animated: Bool) {\n            super.viewDidAppear(animated)\n            moviePlayer.view.frame = videoFrame\n            moviePlayer.view.backgroundColor = self.backgroundColor;\n            moviePlayer.showsPlaybackControls = false\n            moviePlayer.view.isUserInteractionEnabled = false\n            view.addSubview(moviePlayer.view)\n            view.sendSubview(toBack: moviePlayer.view)\n        }\n        \n        private func setMoviePlayer(url: URL){\n            let videoCutter = VideoCutter()\n            videoCutter.cropVideoWithUrl(videoUrl: url, startTime: startTime, duration: duration) { [weak self] (videoPath, error) -\u003e Void in\n                guard let path = videoPath, let strongSelf = self else { return }\n                strongSelf.moviePlayer.player = AVPlayer(url: path)\n                strongSelf.moviePlayer.player?.addObserver(strongSelf, forKeyPath: \"status\", options: .new, context: nil)\n                strongSelf.moviePlayer.player?.play()\n                strongSelf.moviePlayer.player?.volume = strongSelf.moviePlayerSoundLevel\n            }\n        }\n        \n        public override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {\n            \n            guard let player = object as? AVPlayer else {\n                super.observeValue(forKeyPath: keyPath, of: object, change: change, context: context)\n                return\n            }\n            \n            if player.status == .readyToPlay {\n                movieReadyToPlay()\n            }\n        }\n        \n        deinit{\n            moviePlayer.player?.removeObserver(self, forKeyPath: \"status\")\n            NotificationCenter.default.removeObserver(self)\n        }\n        \n        // Override in subclass\n        public func movieReadyToPlay() { }\n        \n        func playerItemDidReachEnd() {\n            moviePlayer.player?.seek(to: kCMTimeZero)\n            moviePlayer.player?.play()\n        }\n        \n        func playVideo() {\n            moviePlayer.player?.play()\n        }\n        \n        func pauseVideo() {\n            moviePlayer.player?.pause()\n        }\n    }\n```\n\nNow create another file called `VideoCutter` that extends `NSObject` and paste in the following:\n\n```\n    import UIKit\n    import AVFoundation\n    \n    extension String {\n        var convert: NSString { return (self as NSString) }\n    }\n    \n    public class VideoCutter: NSObject {\n        \n        /**\n         Block based method for crop video url\n         \n         @param videoUrl Video url\n         @param startTime The starting point of the video segments\n         @param duration Total time, video length\n         \n         */\n        public func cropVideoWithUrl(videoUrl url: URL, startTime: CGFloat, duration: CGFloat, completion: ((_ videoPath:URL?, _ error: NSError?) -\u003e Void)?) {\n            \n            DispatchQueue.global().async {\n                \n                let asset = AVURLAsset(url: url, options: nil)\n                var outputPath = NSHomeDirectory()\n                let documentPaths = NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)\n                if (documentPaths.count \u003e 0) {\n                    outputPath = documentPaths.first!\n                }\n                let fileManager = FileManager.default\n                \n                guard let exportSession = AVAssetExportSession(asset: asset, presetName: \"AVAssetExportPresetHighestQuality\") else { return }\n                let outputFilePath = outputPath.convert.appendingPathComponent(\"output.mp4\")\n                \n                if fileManager.fileExists(atPath: outputFilePath) {\n                    do {\n                        try fileManager.removeItem(atPath: outputFilePath)\n                    } catch let error {\n                        print(error)\n                    }\n                }\n                \n                do {\n                    try fileManager.createDirectory(atPath:outputPath, withIntermediateDirectories: true, attributes: nil) }\n                catch let error {\n                    print(error)\n                }\n                \n                let start = CMTimeMakeWithSeconds(Float64(startTime), 600)\n                let duration = CMTimeMakeWithSeconds(Float64(duration), 600)\n                let range = CMTimeRangeMake(start, duration)\n                let outputURL = URL(fileURLWithPath: outputFilePath)\n                exportSession.outputURL = outputURL\n                exportSession.timeRange = range\n                exportSession.shouldOptimizeForNetworkUse = true\n                exportSession.outputFileType = AVFileTypeMPEG4\n                exportSession.exportAsynchronously(completionHandler: {\n                    switch exportSession.status {\n                    case .completed:\n                        DispatchQueue.main.async { completion?(exportSession.outputURL, nil) }\n                    default:\n                        DispatchQueue.main.async { completion?(nil, nil) }\n                    }\n                })\n            }\n        }\n    }\n```\n\nIn the files above we just created, it basically helps you manage the video background and sets a video of your choosing as the background video and loops it forever. This can also be useful for application landing pages. However, we are just using it for a make-believe video stream.\n\n\n\u003e 💡 **If you are using a Swift version below 3, then you can use the source code as is in the repository, however, if you use Swift 3 or above you may need these modifications to make it work.**\n\nNow the last thing we need to do is add an mp4 file to our workspace. You can use any mp4 file you wish to use. Drop the video file `video.mp4` into the workspace and **make sure it is copied** and added to the application target.\n\nIf you build and preview your application now you should see the video looping in the background. Great.\n\n\n## Adding floating hearts to your iOS application\n\nNow that we have the video looping in the background, the next thing we will do is add the floating heart functionality to the application. Basically, every time someone clicks the heart button, a heart icon should float to the top and slowly disappear. \n\nOpen the `Main.storyboard` file and in the bottom right above the heart button, add a View with no background. This will be the viewport where the floating hearts will travel. You can make it a rectangle of about 250x350.\n\nNext, we will be using another [library from Github](https://github.com/ravenshore/iOS-Floaters) to add the floating hearts functionality to the application. The file we actually need is the [Floater.swift](https://github.com/ravenshore/iOS-Floaters/blob/master/floaters/Floater.swift) file. The library does not yet have any package manager way to install it so we will be copying the contents of the file and adding it to a file in our workspace. \n\nWe are building with Swift 3 so we need to make some modifications to the class, so copy and paste the code below if you are using Swift 3, and use as is if you are not. Create a new file `Floater.swift` and extend the `UIView` object. Paste this into the class:\n\n```\n    import UIKit\n    \n    @IBDesignable public class Floater: UIView {\n        \n        var image1: UIImage?\n        var image2: UIImage?\n        var image3: UIImage?\n        var image4: UIImage?\n        \n        var isAnimating: Bool = false\n        var views: [UIView]!\n        var duration: TimeInterval = 1.0\n        var duration1: TimeInterval = 2.0\n        var duration2: TimeInterval = 2.0\n        var floatieSize = CGSize(width: 50, height: 50)\n        var floatieDelay: Double = 10\n        var delay: Double = 10.0\n        var startingAlpha: CGFloat = 1.0\n        var endingAlpha: CGFloat = 0.0\n        var upwards: Bool = true\n        var remove: Bool = true\n        \n        @IBInspectable var removeAtEnd: Bool = true {\n            didSet {\n                remove = removeAtEnd\n            }\n        }\n        @IBInspectable var FloatingUp: Bool = true {\n            didSet {\n                upwards = FloatingUp\n            }\n        }\n        @IBInspectable var alphaAtStart: CGFloat = 1.0 {\n            didSet {\n                startingAlpha = alphaAtStart\n            }\n        }\n        @IBInspectable var alphaAtEnd: CGFloat = 0.0 {\n            didSet {\n                endingAlpha = alphaAtEnd\n            }\n        }\n        @IBInspectable var rotationSpeed: Double = 10 {\n            didSet {\n                duration2 = 20 / rotationSpeed\n            }\n        }\n        @IBInspectable var density: Double = 10 {\n            didSet {\n                floatieDelay = 1 / density\n            }\n        }\n        @IBInspectable var delayedStart: Double = 10 {\n            didSet {\n                delay = delayedStart\n            }\n        }\n        @IBInspectable var speedY: CGFloat = 10 {\n            didSet {\n                duration = Double(10/speedY)\n            }\n        }\n        @IBInspectable var speedX: CGFloat = 5 {\n            didSet {\n                duration1 = Double(10/speedX)\n            }\n        }\n        @IBInspectable var floatieWidth: CGFloat = 50 {\n            didSet {\n                floatieSize.width = floatieWidth\n            }\n        }\n        @IBInspectable var floatieHeight: CGFloat = 50 {\n            didSet {\n                floatieSize.height = floatieHeight\n            }\n        }\n        @IBInspectable var borderColor: UIColor = UIColor.clear {\n            didSet {\n                layer.borderColor = borderColor.cgColor\n            }\n        }\n        \n        @IBInspectable var borderWidth: CGFloat = 0 {\n            didSet {\n                layer.borderWidth = borderWidth\n            }\n        }\n        \n        @IBInspectable var cornerRadius: CGFloat = 0 {\n            didSet {\n                layer.cornerRadius = cornerRadius\n            }\n        }\n        \n        @IBInspectable var floaterImage1: UIImage? {\n            didSet {\n                image1 = floaterImage1\n            }\n        }\n        @IBInspectable var floaterImage2: UIImage? {\n            didSet {\n                image2 = floaterImage2\n            }\n        }\n        @IBInspectable var floaterImage3: UIImage? {\n            didSet {\n                image3 = floaterImage3\n            }\n        }\n        @IBInspectable var floaterImage4: UIImage? {\n            didSet {\n                image4 = floaterImage4\n            }\n        }\n        \n        override public func awakeFromNib() {\n            super.awakeFromNib()\n        }\n        \n        func startAnimation() {\n            print(\"Start Animating\")\n            isAnimating = true\n            views = []\n            var imagesArray = [UIImage?]()\n            var actualImages = [UIImage]()\n            let frameW = self.frame.width\n            let frameH = self.frame.height\n            var startingPoint: CGFloat!\n            var endingPoint: CGFloat!\n            if upwards {\n                startingPoint = frameH\n                endingPoint = floatieHeight*2\n            } else {\n                startingPoint = 0\n                endingPoint = frameH - floatieHeight*2\n            }\n            imagesArray += [image1, image2, image3, image4]\n            if !imagesArray.isEmpty {\n                for i in imagesArray {\n                    if i != nil {\n                        actualImages.append(i!)\n                    }\n                }\n            }\n            \n            let deadlineTime = DispatchTime.now() + .seconds(Int(self.delay * Double(NSEC_PER_SEC)))\n            \n            DispatchQueue.global().asyncAfter(deadline: deadlineTime, execute: {\n                var goToNext = true\n                while self.isAnimating {\n                    if goToNext {\n                        goToNext = false\n                        \n                        DispatchQueue.main.asyncAfter(deadline: .now()+0.3, execute: {\n                            let randomNumber = self.randomIntBetweenNumbers(firstNum:1, secondNum: 2)\n                            var randomRotation: CGFloat!\n                            if randomNumber == 1 {\n                                randomRotation = -1\n                            } else {\n                                randomRotation = 1\n                            }\n                            let randomX = self.randomFloatBetweenNumbers(firstNum: 0 + self.floatieSize.width/2, secondNum: self.frame.width - self.floatieSize.width/2)\n                            let floatieView = UIView(frame: CGRect(x: randomX, y: startingPoint, width: 50, height: 50))\n                            self.addSubview(floatieView)\n                            \n                            let floatie = UIImageView(frame: CGRect(x: 0, y: 0, width: self.floatieSize.width, height: self.floatieSize.height))\n                            \n                            if !actualImages.isEmpty {\n                                \n                                let randomImageIndex = (self.randomIntBetweenNumbers(firstNum: 1, secondNum: actualImages.count) - 1 )\n                                floatie.image = actualImages[randomImageIndex]\n                                floatie.center = CGPoint(x: 0, y: 0)\n                                floatie.backgroundColor = UIColor.clear\n                                floatie.layer.zPosition = 10\n                                floatie.alpha = self.startingAlpha\n                                \n                                floatieView.addSubview(floatie)\n                                var xChange: CGFloat!\n                                if randomX \u003c self.frame.width/2 {\n                                    xChange = randomX + self.randomFloatBetweenNumbers(firstNum: randomX, secondNum: frameW-randomX)\n                                } else {\n                                    xChange = self.randomFloatBetweenNumbers(firstNum: self.floatieSize.width*2, secondNum: randomX)\n                                }\n                                \n                                \n                                self.views.append(floatieView)\n                                UIView.animate(withDuration: self.duration, delay: 0,\n                                               options: [], animations: {\n                                                floatieView.center.y = endingPoint\n                                                floatie.alpha = self.endingAlpha\n                                                goToNext = false\n                                }, completion: {(value: Bool) in\n                                    if self.remove {\n                                        floatieView.removeFromSuperview()\n                                    }\n                                })\n                                UIView.animate(withDuration: self.duration1, delay: 0,\n                                               options: [.repeat, .autoreverse], animations: {\n                                                floatieView.center.x = xChange\n                                }, completion: nil)\n                                UIView.animate(withDuration: self.duration2, delay: 0, options: [.repeat, .autoreverse], animations: {                 floatieView.transform = CGAffineTransform(rotationAngle: CGFloat(M_PI_2)*randomRotation)\n                                }, completion: nil)\n                            }\n                        })\n                    }\n                }\n            })\n        }\n        \n        func stopAnimation() {\n            print(\"Stop Animating\")\n            views = []\n            isAnimating = false\n            if !views.isEmpty {\n                for i in views {\n                    i.removeFromSuperview()\n                }\n            }\n        }\n        \n        func randomFloatBetweenNumbers(firstNum: CGFloat, secondNum: CGFloat) -\u003e CGFloat{\n            return CGFloat(arc4random()) / CGFloat(UINT32_MAX) * abs(firstNum - secondNum) + min(firstNum, secondNum)\n        }\n        \n        func randomIntBetweenNumbers(firstNum: Int, secondNum: Int) -\u003e Int{\n            return firstNum + Int(arc4random_uniform(UInt32(secondNum - firstNum + 1)))\n        }\n    }\n```\n\nThe library simply creates a floating heart when the `startAnimation` method is called and stops it when the `stopAnimation` method is called. Now that the file is created, open your `Main.storyboard` file and add the `Floater.swift`  View to the floater view we created earlier. This should add some new options in the side bar. These options are due to `@IBDesignable` and `@IBInspectable` that were added to the `Floater.swift` class.\n\n\n\u003e 💡  `**IBDesignable**` **and** `**IBInspectable**` **, a way to create custom elements and the attributes. This can be directly added to the iOS Interface Builder.** [**Read more about IBDesignable and IBInspectable**](https://medium.com/@Anantha1992/ibdesignable-and-ibinspectable-in-swift-3-702d7dd00ca)**.**\n\nNow in the new options fields, add the following values:\n\n\n![floating-hearts-swift-floater-view](//images.contentful.com/1es3ne0caaid/DK4nH4QJNI6WGgMowSYC8/d94465731cb3045d8e86d9b3d7f68e48/floating-hearts-swift-floater-view.png)\n\n\nFor the floater image, add a 30x30 heart image to your workspace and then select it in the floater image section.\n\nNow open the `ViewController` and add the following methods:\n\n```\n    @IBOutlet weak var floaterView: Floater!\n    \n    private func startEndAnimation() {\n        floaterView.startAnimation()\n        DispatchQueue.main.asyncAfter(deadline: .now() + 1, execute: {\n            self.floaterView.stopAnimation()\n        })\n    }\n```\n\nNow call the `startEndAnimation` from the `hearted` method so it is invoked when the button is pressed. Make sure the `@IBOutlet floaterView` is linked to the view port that we created earlier in the article. Now, when you build and preview, you should see the heart floating every time the button is clicked.\n\n\n## Adding realtime functionality to our floating hearts using Pusher\n\nNow that we have successfully added the floating hearts, the next thing to do is add realtime functionality using Pusher. If you have not already, [create a Pusher account](https://pusher.com), create a new application and copy the credentials as you will need them.\n\nOpen the `ViewController`  and in there add the following:\n\n```\n    static let API_ENDPOINT = \"http://localhost:4000\";\n    \n    var pusher : Pusher!\n    \n    let deviceUuid : String = UIDevice.current.identifierForVendor!.uuidString\n    \n    private func listenForNewLikes() {\n        pusher = Pusher(key: \"PUSHER_KEY\", options: PusherClientOptions(host: .cluster(\"PUSHER_CLUSTER\")))\n        \n        let channel = pusher.subscribe(\"likes\")\n        let _ = channel.bind(eventName: \"like\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String: AnyObject] {\n                let uuid = data[\"uuid\"] as! String\n                \n                if uuid != self.deviceUuid {\n                    self.startEndAnimation()\n                }\n            }\n        })\n        pusher.connect()\n    }\n    \n    private func postLike() {\n        let params: Parameters = [\"uuid\": deviceUuid]\n        \n        Alamofire.request(ViewController.API_ENDPOINT + \"/like\", method: .post, parameters: params).validate().responseJSON { response in\n            switch response.result {\n                \n            case .success:\n                print(\"Liked\")\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n```\n\nFirst, we define some class properties for storing the API endpoint base URL, the Pusher instance and the device UUID. The `listenForNewLikes` is where we define a listener that waits for events sent from Pusher and then fires a callback when it receives the event. We will be using that to trigger the floating hearts `startAndEndAnimation` method. The `postLike` method is where we use `AlamoFire` to hit an endpoint (we will create this next). The endpoint will be where we send “like” events to Pusher so they can be broadcast to other listeners on the channel.\n\nIf all is well, your `ViewController` should now look like this:\n\n```\n    import UIKit\n    import PusherSwift\n    import Alamofire\n    \n    class ViewController: VideoSplashViewController {\n        \n        @IBOutlet weak var floaterView: Floater!\n        \n        static let API_ENDPOINT = \"http://localhost:4000\";\n        \n        var pusher : Pusher!\n        \n        let deviceUuid : String = UIDevice.current.identifierForVendor!.uuidString\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            loadVideoStreamSample()\n            listenForNewLikes()\n        }\n        \n        @IBAction func hearted(_ sender: Any) {\n            postLike()\n            startEndAnimation()\n        }\n        \n        private func startEndAnimation() {\n            floaterView.startAnimation()\n            DispatchQueue.main.asyncAfter(deadline: .now() + 1, execute: {\n                self.floaterView.stopAnimation()\n            })\n        }\n        \n        private func listenForNewLikes() {\n            pusher = Pusher(key: \"PUSHER_KEY\", options: PusherClientOptions(host: .cluster(\"PUSHER_CLUSTER\")))\n            \n            let channel = pusher.subscribe(\"likes\")\n            let _ = channel.bind(eventName: \"like\", callback: { (data: Any?) -\u003e Void in\n                if let data = data as? [String: AnyObject] {\n                    let uuid = data[\"uuid\"] as! String\n                    \n                    if uuid != self.deviceUuid {\n                        self.startEndAnimation()\n                    }\n                }\n            })\n            pusher.connect()\n        }\n        \n        private func postLike() {\n            let params: Parameters = [\"uuid\": deviceUuid]\n            \n            Alamofire.request(ViewController.API_ENDPOINT + \"/like\", method: .post, parameters: params).validate().responseJSON { response in\n                switch response.result {\n                    \n                case .success:\n                    print(\"Liked\")\n                case .failure(let error):\n                    print(error)\n                }\n            }\n        }\n        \n        private func loadVideoStreamSample() {\n            let url = NSURL.fileURL(withPath: Bundle.main.path(forResource: \"video\", ofType: \"mp4\")!)\n            self.videoFrame = view.frame\n            self.fillMode = .resizeAspectFill\n            self.alwaysRepeat = true\n            self.sound = true\n            self.startTime = 0.0\n            self.duration = 10.0\n            self.alpha = 0.7\n            self.backgroundColor = UIColor.black\n            self.contentURL = url\n            self.restartForeground = true\n        }\n        \n        override var prefersStatusBarHidden: Bool {\n            return true\n        }  \n    }\n```\n\n\u003e ⚠️  **You should replace the “PUSHER_CLUSTER” and “PUSHER_KEY” with the actual values gotten from your Pusher application dashboard.**\n\nThat should do it for the Xcode side of things. Now we need to create a backend application for our application. This backend app will just receive the payload from the application and send it to Pusher.\n\n\n## Creating the Node.js backend for our realtime floating hearts app\n\nCreate a directory for the web application and then create two new files:\n\nThe **index.js** file…\n\n```\n    let Pusher     = require('pusher');\n    let express    = require('express');\n    let app        = express();\n    let bodyParser = require('body-parser')\n    let pusher     = new Pusher(require('./config.js')['config']);\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    app.post('/like', (req, res, next) =\u003e {\n      let payload = {uuid: req.body.uuid}\n      pusher.trigger('likes', 'like', payload)\n      res.json({success: 200})\n    })\n    \n    app.get('/', (req, res) =\u003e {\n      res.json(\"It works!\");\n    });\n    \n    app.use((req, res, next) =\u003e {\n        let err = new Error('Not Found');\n        err.status = 404;\n        next(err);\n    });\n    \n    app.listen(4000, function() {\n        console.log('App listening on port 4000!')\n    });\n```\n\nThe `index.js` file also has one route where it receives messages from the iOS application and triggers the Pusher event which is picked up by the application. \n\nThe next file is the **packages.json** where we define the NPM dependencies:\n\n```\n    {\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.16.0\",\n        \"express\": \"^4.14.1\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nFinally, we have the **config.js**  where we will put our Pusher configuration:\n\n```\n    module.exports = {\n        appId: 'PUSHER_ID',\n        key: 'PUSHER_KEY',\n        secret: 'PUSHER_SECRET',\n        cluster: 'PUSHER_CLUSTER',\n    };\n```\n\nNow run `npm install` on the directory and then `node index.js` once the npm installation is complete. You should see *App listening on port 4000!* message.\n\n\n## Testing our floating hearts application\n\nOnce you have your local node web server running, you will need to make some changes so your application can talk to the local web server. In the `info.plist` file, make the following changes:\n\n\n![floating-hearts-swift-allow-arbitrary-loads](//images.contentful.com/1es3ne0caaid/7K1HQwIDFm0kYOykE4OaYm/005559df4f1430b742d2b8530d86c151/floating-hearts-swift-allow-arbitrary-loads.png)\n\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n## Conclusion\n\nIn this article, we have been able to replicate the floating hearts feature that apps like Facebook, Instagram, Periscope etc have. You can use this as a base to expand the actual feature into a working application of your own.","metaTitle":"Build a floating hearts effect in Swift","metaDescription":" Build a realtime floating hearts feature on your iOS application using Swift and Pusher and create your own Periscope, Instagram and Facebook hearts feature."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"61wyKG0cMwASIUy6GiykY0","type":"Entry","createdAt":"2018-02-22T15:04:11.935Z","updatedAt":"2018-03-01T18:09:57.384Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build online presence into your Laravel app","url":"online-presence-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55LOucxD5Ycm4oGSGa0A2O","type":"Entry","createdAt":"2018-02-15T15:02:22.618Z","updatedAt":"2018-02-15T15:02:22.618Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Viraj Khatavkar","url":"viraj-khatavkar","email":"viraj@virajkhatavkar.com","twitter":"https://twitter.com/virajkhatavkar","github":"https://github.com/viraj-khatavkar","guestWriter":true}}],"projectRepo":"https://github.com/viraj-khatavkar/user-status-update-laravel-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2017-03-13","description":"Build online presence into your Laravel app with Pusher.","prerequisite":"A basic understanding of Laravel is needed to follow this tutorial. The tutorial will assume you’re starting a new Laravel 5.4 app.","content":"Realtime status update, particularly without polling our application for any updates, has always been a challenge. To that end, Laravel released its 5.4 version recently with a new broadcasting library: Echo.\n\nInstant messaging is the minimum feature requirement in any social network. With Laravel Echo and its broadcasting features, it is possible to implement features with realtime status updates like *online* or *offline* in matter of a few minutes.\n\n## Setup an app on Pusher\n\nWe need to [sign up on Pusher](https://pusher.com/signup) and create a new app:\n\n![online-presence-laravel-create-pusher-app](//images.contentful.com/1es3ne0caaid/5f92QXfpDiU02m2AK48CS0/bf8e90962701acda5f785ee00663cefd/online-presence-laravel-create-pusher-app.png)\n\n## Install Laravel, Pusher SDK and Echo\n\nFirst, we will grab a fresh copy of Laravel:\n\n```\nlaravel new user-status-update-laravel-pusher\n```\n\nThis will install the latest version of the Laravel framework and download the necessary dependencies. Next, we will install the [Pusher PHP SDK](https://github.com/pusher/pusher-http-php) using [Composer](https://getcomposer.org/download/):\n\n```\ncomposer require pusher/pusher-php-server\n```\nNext, we will install the JavaScript dependencies:\n\n```\nnpm install\n```\nNow, we need to install two JavaScript libraries necessary for realtime event broadcasting: Laravel Echo and Pusher JS\n\n```\nnpm install --save laravel-echo pusher-js\n```\nWe require some form of user authentication mechanism to demonstrate the functionality. Let us use the default authentication scaffolding provided by Laravel:\n\n```\nphp artisan make:auth\n```\n## Configuration\n\nFirst, we need to set the `APP_ID`, `APP_KEY`, `APP_SECRET` and `APP_CLUSTER` in the environment file. We can get these details in our Pusher [app dashboard](https://dashboard.pusher.com/):\n\n``` \n# .env\n\nBROADCAST_DRIVER=pusher\n\nPUSHER_APP_ID=your-pusher-app-id\nPUSHER_APP_KEY=your-pusher-app-key\nPUSHER_APP_SECRET=your-pusher-app-secret\nPUSHER_APP_CLUSTER=your-pusher-app-cluster\n```\nNext, we need to create a fresh Echo instance in our applications's JavaScript. We can do so at the bottom of our `resources/assets/js/bootstrap.js` file:\n\n```\nimport Echo from \"laravel-echo\"\n\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: 'your-pusher-app-key',\n    cluster: 'ap2',\n    encrypted: true\n});\n```\n## Our application\n\nWe will implement a feature where a user can see whether their friend is *online* or *offline* (similar to what WhatsApp does) and update the status of a user in realtime. We will concentrate on the code necessary for implementing the status update feature in realtime - we will not cover anything relating to implementing a chat functionality using Laravel. The code is available on a [Github repository](https://github.com/viraj-khatavkar/user-status-update-laravel-pusher) for cloning and understanding purposes.\n\n## Migrations\n\nWe need to add some extra fields to the default migration of the `users` table:\n\n1. A field to store the status of user - `online` or `offline`\n2. A field to store the token for authenticating API requests\n \nBelow is the migration for our `users` table:\n\n```\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003estring('name');\n            $table-\u003estring('email')-\u003eunique();\n            $table-\u003estring('password');\n            $table-\u003estring('api_token');\n            $table-\u003estring('status')-\u003edefault('online');\n            $table-\u003erememberToken();\n            $table-\u003etimestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('users');\n    }\n}\n```\n## Online Status\n\nWhenever a user is active on the page, we subscribe to the `chat` channel and assume that a user is online. In the `joining` callback, we trigger an API request to update the user's status to *online*:\n\n```\nEcho.join('chat')\n    .joining((user) =\u003e {\n        axios.put('/api/user/'+ user.id +'/online?api_token=' + user.api_token, {});\n    });\n```\n`join` is used when we want to join a presence channel. Presence channels are automatically private channels. We do need to authenticate them.\n\n`joining` will be executed whenever a new user joins the `chat` channel.\n\nNext, we broadcast the `UserOnline` event:\n\n```\n# api.php\n\nRoute::middleware('auth:api')-\u003eput('user/{user}/online', 'UserOnlineController');\n\n\n# UserOnlineController.php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\User;\nuse App\\Events\\UserOnline;\nuse Illuminate\\Http\\Request;\n\nclass UserOnlineController extends Controller\n{\n    public function __invoke(User $user)\n    {\n        $user-\u003estatus = 'online';\n        $user-\u003esave();\n\n        broadcast(new UserOnline($user));\n    }\n}\n```\nWhenever a user comes online, we need to fire an event which will be broadcast over Pusher to a specific presence channel. For broadcasting an event, it should implement the `ShouldBroadcast` interface. Let us first create the `UserOnline` event:\n\n```\nphp artisan make:event UserOnline\n```\n### broadcastOn method\n\nThe event should implement a `broadcastOn` method. This method should return the presence channel to which the event should be broadcast. All public properties in the event will be automatically broadcast to every user listening on the `chat` channel.\n\n```\nnamespace App\\Events;\n\nuse App\\User;\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Broadcasting\\PresenceChannel;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass UserOnline implements ShouldBroadcast\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    public $user;\n\n    public function __construct(User $user)\n    {\n        $this-\u003euser = $user;\n    }\n\n    public function broadcastOn()\n    {\n        return new PresenceChannel('chat');\n    }\n}\n```\nNext, we need to start our queue to actually listen for jobs and broadcast any events that are recorded. We can use the database queue listener on our local environment:\n\n```\nphp artisan queue:listen\n```\n### Listening for online status\n\nIn our JavaScript, we need to listen to the `UserOnline` event to update the status in realtime:\n\n```\nEcho.join('chat')\n    .listen('UserOnline', (e) =\u003e {\n        this.friend = e.user;\n    })\n```\nNow, whenever a user joins the `chat` channel, the status of user will be updated in the database and be broadcast over Pusher to other friends present on the same channel.\n\n## Offline Status\n\nSimilarly, whenever a user leaves the `chat` channel, we will update the user's status to *offline*:\n\n```\nEcho.join('chat')\n    .leaving((user) =\u003e {\n    axios.put('/api/user/'+ user.id +'/offline?api_token=' + user.api_token, {});\n    })\n```\nNext, we update the status in the database and broadcast the `UserOffline` event:\n\n```\n# api.php\nRoute::middleware('auth:api')-\u003eput('user/{user}/offline', 'UserOfflineController');\n\n\n# UserOfflineController.php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Events\\UserOffline;\nuse App\\User;\nuse Illuminate\\Http\\Request;\n\nclass UserOfflineController extends Controller\n{\n    public function __invoke(User $user)\n    {\n        $user-\u003estatus = 'offline';\n        $user-\u003esave();\n\n        broadcast(new UserOffline($user));\n    }\n}\n```\nLet us now create the `UserOffline` event:\n\n```\nphp artisan make:event UserOffline\n```\nBelow is our `UserOffline.php` event:\n\n```\nnamespace App\\Events;\n\nuse App\\User;\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Broadcasting\\PresenceChannel;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass UserOffline implements ShouldBroadcast\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    public $user;\n\n    public function __construct(User $user)\n    {\n        $this-\u003euser = $user;\n    }\n\n    public function broadcastOn()\n    {\n        return new PresenceChannel('chat');\n    }\n}\n```\n### Listening for offline status\n\nWe need to listen to the `UserOffline` event to update the status in realtime:\n\n```\nEcho.join('chat')\n    .listen('UserOffline', (e) =\u003e {\n        this.friend = e.user;\n    });\n```\n### Bringing it all together\n\nBelow is our `Example` component which handles the realtime update of *online* and *offline* status of a user we are chatting with:\n\n```\nprops: ['user', 'user2'],\ndata() {\n    return {\n        friend: this.user2\n    }\n},\nmounted() {\n    this.listen();\n},\nmethods: {\n    listen() {\n        Echo.join('chat')\n            .joining((user) =\u003e {\n                axios.put('/api/user/'+ user.id +'/online?api_token=' + user.api_token, {});\n            })\n            .leaving((user) =\u003e {\n                axios.put('/api/user/'+ user.id +'/offline?api_token=' + user.api_token, {});\n            })\n            .listen('UserOnline', (e) =\u003e {\n                this.friend = e.user;\n            })\n            .listen('UserOffline', (e) =\u003e {\n                this.friend = e.user;\n            });\n    },        \n}\n```\n## Authorization\n\nEvery presence channel is a private channel. Laravel Echo will automatically call the specified authentication route. However, we still need to write the authentication logic which will actually authorize the user to listen to a particular channel.\n\nAuthorization logic is written in the `routes/channels.php`. The authorization logic for our `chat` channel is:\n\n```\nBroadcast::channel('chat', function ($user) {\n    return $user;\n});\n```\n\nWe are not going to return `true` or `false`. If the user is authenticated to listen on this presence channel, we will return an array of data that we want to be returned to that callback in the `listen` method.\n\nWe need to write the actual authorization logic which will check whether the user is allowed to access the specified chat room. If we don't write proper authorization logic, then anyone can listen to a `chat` channel and hijack our conversations.\n\nThe friend's status *(online or offline)* is shown at the top of the chat box in realtime as demonstrated below:\n\n![online-presence-laravel-demo](//images.contentful.com/1es3ne0caaid/5hKqE1rQveMkw88MmUacq2/bf8e90962701acda5f785ee00663cefd/online-presence-laravel-demo.gif)\n\n## Vue.js component\n\nThat's it! Now, the user's status will be broadcast and we can listen using our presence channel in realtime without the need to constantly poll our application.\n\nBelow is the JavaScript part of our Example component written using `Vue.js`\n\n```\nStatus - {{ friend.status }}\n\u003cinput type=\"text\" @keyup=\"whisper()\" /\u003e\n```\n\n```\n\u003cscript\u003e\n    export default {\n        props: ['user', 'user2'],\n        data() {\n            return {\n                friend: this.user2\n            }\n        },\n        mounted() {\n            this.listen();\n        },\n        methods: {\n            listen() {\n                Echo.join('chat')\n                    .joining((user) =\u003e {\n                        axios.put('/api/user/'+ user.id +'/online?api_token=' + user.api_token, {});\n                    })\n                    .leaving((user) =\u003e {\n                        axios.put('/api/user/'+ user.id +'/offline?api_token=' + user.api_token, {});\n                    })\n                    .listen('UserOnline', (e) =\u003e {\n                        this.friend = e.user;\n                    })\n                    .listen('UserOffline', (e) =\u003e {\n                        this.friend = e.user;\n                    });\n            }\n        }\n    }\n\u003c/script\u003e\n\n```\n## Conclusion\n\nIn this article, we have covered how to update the user's status in realtime using Laravel and Pusher. We have covered the configuration options necessary to get started, and the example above should help you fill in the gaps and give an overview of some of the other configuration options available to you.","metaTitle":"Build online presence into your Laravel app","metaDescription":"Build online presence into your application with Laravel, Echo and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1yhuKn07UwSYoMAYmggUsK","type":"Entry","createdAt":"2018-02-22T15:02:42.115Z","updatedAt":"2018-02-28T14:40:59.126Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a typing indicator with Laravel","url":"typing-indicator-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5K3KWA2xvqw4SW2sYI8eCG","type":"Entry","createdAt":"2018-02-12T15:34:14.169Z","updatedAt":"2018-02-14T10:09:19.038Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Chimezie Enyinnaya","url":"chimezie-enyinnaya","email":"meziemichael@gmail.com","twitter":"https://twitter.com/ammezie","github":"https://github.com/ammezie","guestWriter":true}}],"projectRepo":"https://github.com/ammezie/laravel-whos-typing","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-03-01","description":"Integrate a typing indicator feature in your Laravel app using Vue.js.","prerequisite":"A basic understanding of Laravel and Vue.js are needed to follow this tutorial.","content":"In this tutorial, I will show you how to build a typing indicator with Laravel and Pusher, using the concept of a chat app to demonstrate it. Note that this tutorial focuses on the typing indicator part of the app (if you want to learn how to build a chat app using Laravel and Pusher, you should read [this tutorial](https://blog.pusher.com/how-to-build-a-laravel-chat-app-with-pusher/)).\n\nLet's take a quick look at what we'll be building:\n\n![typing-indicator-laravel](//images.contentful.com/1es3ne0caaid/628hzh5YVGGuwgg2a8Gi0Y/62e8a60793f9559b6cbb35d7b632ca90/typing-indicator-laravel.gif)\n\nThe code of the completed demo is available on [GitHub](https://github.com/ammezie/laravel-whos-typing).\n\n## Setting Up Laravel\n\nCreate a new Laravel project. (I prefer using the Laravel installer) Open your terminal and run the code below:\n\n```\nlaravel new laravel-whos-typing\n```\n\nNext, we need to setup our new Laravel project. First, we need to register the `App\\Providers\\BroadcastServiceProvider`. Open `config/app.php` and uncomment `App\\Providers\\BroadcastServiceProvider` in the `providers` array.\n\nWe then need to tell Laravel that we are using the Pusher driver in the `.env` file:\n\n```\n// .env\n\nBROADCAST_DRIVER=pusher\n```\n\nSince we specified we want to use Pusher as our broadcasting driver, we need to install the Pusher PHP SDK:\n\n```\ncomposer require pusher/pusher-php-server\n```\n\n## Setting Up Pusher\n\nIf you don't have one already, create a free Pusher account [here](https://pusher.com/signup) and then log in to your dashboard and create an app. Take note of your app credentials as we'll be using them shortly.\n\nNow, let's fill in our Pusher app credentials. If you open the `config/broadcasting.php`, you'll notice that Laravel is pulling some of the Pusher credentials from the `.env` file. So let's update the `.env` file to contain our Pusher app credentials:\n\n```\n// .env\n\nPUSHER_APP_ID=xxxxxx\nPUSHER_APP_KEY=xxxxxxxxxxxxxxxxxxxx\nPUSHER_APP_SECRET=xxxxxxxxxxxxxxxxxxxx\n```\n\nRemember to replace the `x`s with your Pusher app credentials. You can find your app credentials under the **Keys** section on the **Overview** tab in the Pusher Dashboard.\n\nAlso, remember to fill in the `cluster` of your Pusher app and other additional options:\n\n```\n// config/broadcasting.php\n\n'options' =\u003e [\n   'cluster' =\u003e 'eu',\n   'encrypted' =\u003e true\n],\n```\n\n## Installing Frontend Dependencies\n\nFor this tutorial, we'll be using `Bootstrap`, `Vue` and `Axios`, which have been setup for us by Laravel, though we still need to install each of the dependencies. To compile our CSS and JavaScript, we need to install Laravel Mix, which is a wrapper around Webpack. We can install these dependencies through `NPM`:\n\n```\nnpm install\n```\n\nWe also need to install Laravel Echo, which is a JavaScript library that makes it painless to subscribe to channels and listen for events broadcast by Laravel and of course the Pusher JavaScript library:\n\n``` language-bash\nnpm install --save laravel-echo pusher-js\n```\n\nOnce installed, we need to tell Laravel Echo to use Pusher. At the bottom of the `resources/assets/js/bootstrap.js` file, uncomment the Laravel Echo section and update the details with:\n\n```\n// resources/assets/js/bootstrap.js\n\nimport Echo from \"laravel-echo\"\n\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: Laravel.pusherKey,\n    cluster: 'eu',\n    encrypted: true\n}); \n```\n\nSince we specified our Pusher app credentials in the `.env` file, notice `Laravel.pusherKey` from the code above, we'll load our Pusher app key from the config instead of hard coding it directly in `resources/assets/js/bootstrap.js`. We'll define `Laravel.pusherKey` in a later section.\n\nAlso use the same `cluster` that you specified earlier in `config/broadcasting.php`.\n\nWith the setups done, let's start implementing a typing indicator in our Laravel application.\n\nTo do this, we need to know when a user is typing into the chat box. There are different ways to accomplish this, but in this tutorial, we'll add event listeners to the chat box. With this, we can know when a user is actually typing a message and display the typing indicator to the appropriate users.\n\nWe'll make use of JavaScript keyboard events: `onkeydown` which fires event when a user is pressing a key. This means that when a user presses a key, we send events to Pusher. These types of events are called `client events` and do not hit the server at all. But how do we broadcast such events to Pusher since they are a bit different from the normal events (server to Pusher events)? Well, Pusher is aware of such events and has a special way of handling them.\n\nBy default, when you create a Pusher app, client events are not enabled. We have to enable this for our app. To enable client events in your Pusher app, select the app then click on the **App Settings** tab and then check the box next to **Enable client events**.\n\n![typing-indicators-laravel-enable-client-event](//images.contentful.com/1es3ne0caaid/3LmEpfXCFWGwOcGwKOsWm2/9bdf8e898c782932fee24342366f3109/typing-indicators-laravel-enable-client-event.png)\n\nOnce we have enabled client events in our Pusher app, we can now trigger and listen for client events in our chat app.\n\n## Authenticating Users\n\nOur chat app will require users to be logged in before they can begin to chat. So, we need an authentication system:\n\n```\nphp artisan make:auth\n```\nThis will create the necessary routes, views and controllers needed for an authentication system.\n\nBefore we go on to create users, we need to run the `users` migration that comes with a fresh installation of Laravel. But to do this, we first need to setup our database. Open the `.env` file and enter your database details:\n\n```\n// .env\n\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=laravel-chat\nDB_USERNAME=root\nDB_PASSWORD=root\n```\n\nUpdate with your own database details. Now, we can run our migration:\n\n``` language-bash\nphp artisan migrate\n```\n\nNote: There's a bug in Laravel 5.4 if you're running a version of MySQL older than 5.7.7 or MariaDB older than 10.2.2. More info [here](https://github.com/laravel/framework/issues/17508). This can be fixed by replacing the `boot()` of `app/Providers/AppServiceProvider.php` with:\n\n```\n// app/Providers/AppServiceProvider.php\n\n// remember to use\nIlluminate\\Support\\Facades\\Schema;\n\n/**\n * Bootstrap any application services.\n *\n * @return void\n */\npublic function boot()\n{\n  Schema::defaultStringLength(191);\n}\n```\n\n## Defining App Routes\n\nOpen `routes/web.php` and replace the routes with the code below:\n\n```\n// routes/web.php\n\nAuth::routes();\n\nRoute::get('/', function () {\n    return view('chat');\n})-\u003emiddleware('auth');\n```\n\nThe routes are pretty simple: a route that will handle authentication and a route to the homepage that will render a chat view which we'll create shortly.\n\n**NOTE**: Since we have removed the `/home` route, you might want to update the `redirectTo` property of both `app/Http/Controllers/Auth/LoginController.php` and `app/Http/Controllers/Auth/RegisterController.php` to:\n\n```\nprotected $redirectTo = '/';\n```\n\n## Creating the chat app view\n\nCreate a new `resources/views/chat.blade.php` file and paste into it:\n\n```\n// resources/views/chat.blade.php\n\n@extends('layouts.app')\n\n@section('content')\n\u003cdiv class=\"container\"\u003e\n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-8 col-md-offset-2\"\u003e\n            \u003cdiv class=\"panel panel-default\"\u003e\n                \u003cdiv class=\"panel-heading\"\u003eChats\u003c/div\u003e\n\n                \u003cdiv class=\"panel-body\"\u003e\n                    \u003cul\u003e\n                        \u003cli v-for=\"message in messages\"\u003e\n                            @{{ message.user.name }} - @{{ message.message }}\n                        \u003c/li\u003e\n                    \u003c/ul\u003e\n                    \u003cdiv\u003e\n                        \u003cdiv class=\"input-group\"\u003e\n                            \u003cinput type=\"text\" name=\"message\" class=\"form-control\" placeholder=\"Type your message here...\" v-model=\"newMessage\" @keyup.enter=\"sendMessage\"\u003e\n                            \u003cspan class=\"input-group-btn\"\u003e\n                                \u003cbutton class=\"btn btn-primary\" @click=\"sendMessage\"\u003e\n                                    Send\n                                \u003c/button\u003e\n                            \u003c/span\u003e\n                        \u003c/div\u003e\n                        \u003cspan v-show=\"typing\" class=\"help-block\" style=\"font-style: italic;\"\u003e\n                            @{{ user }} is typing...\n                        \u003c/span\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n@endsection\n```\n\nOnce again pretty straightforward, we are using Vue here. We loop through each of the messages and display them. Next, there is a input field and a send button for composing chat messages. The input field is binded to the `newMessage` data. When the send button is clicked or the enter key is pressed on the input field, a `sendMessage()` is called. Lastly, there is span holding the 'is typing' indicator. This will be hidden by default and will be displayed using Vue's `v-show` when `typing` is `true` (that is when a user is typing).\n\nNotice that we are displaying the name of the user along with the 'is typing' indicator, we need a way to pass the authenticated user to our JavaScript file. Remember from `resources/assets/js/bootstrap.js`, where we used `Laravel.pusherKey`, we also need to pass Pusher app key to our JavaScript file. We can do this by updating the `` section in `resources/views/layouts/app.blade.php` (which was created when we ran `make:auth`) with:\n\n```\nresources/views/layouts/app.blade.php\n\n\u003c!-- Scripts --\u003e\n\u003cscript\u003e\n  window.Laravel = {!! json_encode([\n    'csrfToken' =\u003e csrf_token(),\n    'user' =\u003e Auth::user(),\n    'pusherKey' =\u003e config('broadcasting.connections.pusher.key'),\n  ]) !!};\n\u003c/script\u003e\n```\n\nThe code above creates a `Laravel` object on the global window, we then add some items to the object. The `user` item will be the currently authenticated user and the `pusherKey` item will load our Pusher app key from the `config/broadcasting.php` config file.\n\nLaravel has integrated Vue and Axios for us, so we can start using `Vue` without any further setup. There is an `app.js`file that Laravel creates by default within `resources/assets/js/app.js`. Open this file and update with the code below:\n\n```\n// resources/assets/js/app.js\n\nrequire('./bootstrap');\n\nconst app = new Vue({\n    el: '#app',\n\n    data: {\n        messages: [],\n        newMessage: '',\n        user: '',\n        typing: false\n    },\n\n    methods: {\n        sendMessage() {\n            // add new message to messages array\n            this.messages.push({\n                user: Laravel.user,\n                message: this.newMessage\n            });\n\n            // clear input field\n            this.newMessage = '';\n\n            // persist to database\n        }\n    }\n});\n```\n\nFirst, we require the `resources/assets/js/bootsrap.js` file that contains our package setups and integrations. Next, we create a new Vue instance and bind it to **app** `id`. We then create some data variables: `messages` array will hold our chat messages, `newMessage` will be the new message that a user sends, `user` will be the currently authenticated user and finally `typing` will hold `true` or `false` indicating whether a user is typing or not.\n\nNext we define a `sendMessage()` that simply adds the new message along with the user that sent it to the messages array and finally clears the input field. (If you are building an actual chat app, you might want to do an AJAX request to persist the new message to the database here.)\n\nHaving done this, we can start sending messages and our messages will be displayed on the chat view. Now let's move on to the meat of this tutorial; adding a typing indicator to our Laravel application.\n\nLaravel Echo provides some handy methods to integrate with client events which we'll be using to implement our typing indicator.\n\nPaste the code below into the `resources/assets/js/app.js` within the `methods` object:\n\n```\n// resources/assets/js/app.js\n\nisTyping() {\n  let channel = Echo.private('chat');\n\n  setTimeout(function() {\n    channel.whisper('typing', {\n      user: Laravel.user,\n        typing: true\n    });\n  }, 300);\n},\n```\n\nThe `isTyping()` will be triggered when an **onkeydown** event is fired within the chat input field (that is, when a user is typing a message). First, we subscribe to a private channel called `chat` and trigger a client event using Laravel Echo's `whisper()` after 0.3s. The `whisper()` accepts the name of the client event, in our case `typing` and the data we want to broadcast. Since Pusher specifies that client events must be prefixed by `client-`, Laravel is smart enough to prefix the `client-` for us under the hood. We pass the user that is typing a message and typing as `true` as the data we are broadcasting.\n\n**Note:** Client events can only be triggered on private and presence channels because they require authentication. Also, client events are not delivered to the originator of the event. For more information on client events, kindly checkout the Pusher [documentation](https://pusher.com/docs/client_api_guide/client_events#trigger-events).\n\nSince we created a private channel, only authenticated users will be able to listen on the `chat` channel. We need a way to authorize that the currently authenticated user can actually listen on the channel. This can be done by in the `routes/channels.php` file:\n\n```\n// routes/channels.php\n\nBroadcast::channel('chat', function ($user) {\n  return Auth::check();\n});\n```\n\nWe pass to the `channel(),` the name of our channel and a callback function that will either return `true` or `false` depending on whether the current user is authenticated.\n\nNow that we can trigger client events, we also need a way to listen for the client events in our application. To do this, add the code below to `resources/assets/js/app.js` just after the `data` object:\n\n```\n// resources/assets/js/app.js\n\ncreated() {\n  let _this = this;\n\n  Echo.private('chat')\n    .listenForWhisper('typing', (e) =\u003e {\n      this.user = e.user;\n      this.typing = e.typing;\n\n      // remove is typing indicator after 0.9s\n      setTimeout(function() {\n        _this.typing = false\n      }, 900);\n    });\n},\n```\n\nAgain we subscribe to the `chat` channel. To listen for client events, we use the `listenForWhisper()` and set both the `user` and `typing` data accordingly. Lastly, we remove the is typing indicator after 0.9s of a user not typing.\n\nBefore we start testing the typing indicator, let update the input field of the `chat` view with:\n\n```\n// resources/view/chat.blade.php\n\n\u003cinput type=\"text\" name=\"message\" class=\"form-control\" placeholder=\"Type your message here...\" v-model=\"newMessage\" @keydown=\"isTyping\" @keyup=\"notTyping\" @keyup.enter=\"sendMessage\"\u003e\n```\n\nWe added two keyboard events: `@keydown` and `@keyup` which are Vue equivalent of the JavaScript keyboard events we talked about earlier. On keydown, the `isTyping()` will be triggered and on keyup, the `notyping()` will be triggered.\n\nWe can now compile the JavaScript files using Laravel Mix using:\n\n```\nnpm run dev\n```\n\nNow we can start our chat app by running:\n\n```\nphp artisan serve\n```\n\n## Conclusion\n\nWith such a basic app, we have seen how to implement typing indicator in a Laravel application using Pusher.","metaTitle":"Build a typing indicator with Laravel","metaDescription":"Craft an essential feature for messaging users like a typing indicator using Laravel and Vue.js."}}],"defaultValue":"Channels \u0026 Social Interactions","queryType":"tag","pages":4,"route":"/tutorials","query":{"product":"Channels","tag":"Social Interactions","page":"4"}}},"page":"/tutorials","query":{"product":"Channels","tag":"Social Interactions","page":"4"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Social%20Interactions&page=4 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:45:46 GMT -->
</html>