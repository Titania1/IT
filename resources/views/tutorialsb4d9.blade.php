<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Android&page=8 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:36:41 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">86</span> tutorials for “<span class="css-npldjc ehwuahf2">Android</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialsa785.html?product=Beams&amp;tag=Android" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials.html" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path fill="#C223CE" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#C223CE" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#C223CE" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#C223CE" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Android"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/push-notifications-kotlin-food-delivery.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Implement push notifications in Kotlin to create a food delivery app</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial uses Kotlin and React to create a full-featured food delivery application, with interfaces for admins and ...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/android-poll-push-notifications.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an Android poll app with push notifications</h3><p class="css-k12xad e5jrto45">Build an Android app in Kotlin, with a backend in Python. Users are able to vote, and see other votes displayed in realt...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-app-framework7.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app using Framework7</h3><p class="css-k12xad e5jrto45">Build a chat app for iOS and Android using Framework7 and Vue.js, with a simple Node.js backend. Framework7 is a free an...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-blog-kotlin-push-notifications.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live blog in Kotlin with push notifications</h3><p class="css-k12xad e5jrto45">Build an Android app with Kotlin. The app connects to a Node.js server, and provides push notifications to alert users w...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/kotlin-ride-sharing-push-notifications.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a Kotlin ride sharing app with push notifications</h3><p class="css-k12xad e5jrto45">Build a full ridesharing platform featuring realtime updates and push notifications. Use Kotlin for both the apps, and t...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/location-feed-android-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a location feed app for Android with Kotlin</h3><p class="css-k12xad e5jrto45">This tutorial shows you how to build a location-sharing app for Android using Kotlin. The app has a Node.js backend. Use...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-kotlin-android.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building a chat app with Kotlin for Android</h3><p class="css-k12xad e5jrto45">Learn to build a chat app for Android. Use Kotlin and Springboot to construct the endpoint for the API, and Kotlin for y...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/android-notifications-guardian-api.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Publish Android notifications from the Guardian’s API</h3><p class="css-k12xad e5jrto45">Learn how to build a news notification service that hooks into the Guardian&#x27;s public APIs. Create an Android app using K...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/push-notifications-social-android-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Send push notifications in a social network Android app - Part 2</h3><p class="css-k12xad e5jrto45">In this two-part series, build a social network Android app with event planning functionality, supported by push notific...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsf0a6.html?tag=Android&amp;page=7" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials7538.html?tag=Android&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialsef96.html?tag=Android&amp;page=6" class="css-za1ua3 edg0byb1">6</a><a href="tutorialsf0a6.html?tag=Android&amp;page=7" class="css-za1ua3 edg0byb1">7</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsb4d9.html?tag=Android&amp;page=8" class="css-2wakph edg0byb1">8</a><a href="tutorialsb9af.html?tag=Android&amp;page=9" class="css-5s6711 edg0byb1">9</a><a href="tutorials3b60.html?tag=Android&amp;page=10" class="css-5s6711 edg0byb1">10</a><a href="tutorialsb9af.html?tag=Android&amp;page=9" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":86,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"ffkxMi1XQA0KmKqOIEg2K","type":"Entry","createdAt":"2018-07-13T16:48:06.187Z","updatedAt":"2018-07-13T16:48:06.187Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Implement push notifications in Kotlin to create a food delivery app","url":"push-notifications-kotlin-food-delivery","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/pusher-takeaway","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-07-12","description":"This tutorial uses Kotlin and React to create a full-featured food delivery application, with interfaces for admins and customers. Orders update in realtime, and the customer receives status updates with push notifications.","prerequisite":"You will need some experience of Kotlin, and familiarity with Android Studio. You will also need Node and Create React App installed.","content":"## Introduction\n\nMany business need to be very responsive to customer requests in order to be competitive. This works both ways - the business being informed immediately when a new order comes in, and the customer being informed as to the progress of their order.\n\nIn this article we are going to build a simple takeaway application, featuring a web app for the takeaway itself to use, and an Android app for customers. The web app will be updated automatically using Pusher Channels, and the Android app will receive notifications using Pusher Beams so that the customer and staff are always aware of everything going on.\n\n![kotlin-takeaway-demo](//images.ctfassets.net/1es3ne0caaid/35S4CfDJGMgYQayA8Gkumc/00577e26dd50023386f92baed7e4dc0f/kotlin-takeaway-demo.gif)\n\n## Prerequisites\n\nIn order to follow along, you will need some experience with the Kotlin programming language, which we are going to use for both the backend and frontend of our application, as well as with Android development. \n\nWe are going to be building the web UI that the takeaway uses with [Create React App](https://github.com/facebook/create-react-app), so ensure that this is installed, along with a recent version of Node.js.\n\nYou will also need appropriate IDEs. We suggest [IntelliJ IDEA](https://www.jetbrains.com/idea/) and [Android Studio](https://developer.android.com/studio/index.html). Finally, you will need a free [Pusher Account](https://dash.pusher.com/authenticate/register?ref=pn-landing-page). Sign up now if you haven’t already done so.\n\n## Overall design\n\nOur overall application will have a backend application, a web UI that is to be used by the takeaway company, and an Android application that is targeted to the customers. Customers will order food using the Android application, and the orders will appear in the web UI in real time using Pusher Channels. The takeaway company can then use the web UI to update progress on the orders, which will be sent directly to the customer’s device using Pusher Beams, keeping them updated on the progress of their order. The backend application then acts as orchestration between the two UIs.\n\n## Setting up your Pusher accounts\n\nWe are going to use two different Pusher accounts for this application - a Pusher Channels account for real time updates of the web UI, and a Pusher Beams account for notifying the customers of the status of their orders.\n\n### Registering for Pusher Channels\n\nIn order to follow along, you will need to create a free Pusher account. This is done by visiting the [Pusher dashboard](https://dashboard.pusher.com/) and logging in, creating a new account if needed. Next click on **Channels apps** on the sidebar, followed by **Create Channels app.** \n\n![kotlin-takeaway-channels](//images.ctfassets.net/1es3ne0caaid/4v3D4hmmhqqYCEKioYcaOG/7b9ca3510fc16cc1e8e62e59b04ad768/kotlin-takeaway-channels.png)\n\nFill out this dialog as needed and then click the **Create my app** button. Then click on **App Keys** and note down the credentials for later.\n\n![kotlin-takeaway-keys](//images.ctfassets.net/1es3ne0caaid/84MZCDrD4QY8WAyukqGSK/8e1885c09f71d1acf3c9f6b7bbd9274a/kotlin-takeaway-keys.png)\n\n### Registering for Pusher Beams\n\nIn order to use the Beams API and SDKs from Pusher, you also need to create a new Beams instance in the [Pusher Beta Dashboard](https://dash.pusher.com/authenticate/register?ref=pn-social-network-android).\n\nNext, on your **Overview** for your Beams instance, click **Open Quickstart** to add your Firebase Cloud Messaging (FCM) Server Key to the Beams Instance. \n\nAfter saving your FCM key, you can finish the Quickstart wizard by yourself to send your first push notification, or just continue as we’ll cover this below.\n\nIt’s important to make sure that you download and keep the `google-services.json` file from the Firebase Console as we are going to need this later on. \n\nOnce you have created your Beams instance, you will also need to note down your **Instance Id** and **Secret Key** from the Pusher Dashboard, found under the **CREDENTIALS** section of your Instance settings.\n\n## Backend application\n\nWe are going to build our backend application using Spring Boot and the Kotlin programming language, since this gives us a very simple way to get going whilst still working in the same language as the Android app.\n\nHead over to https://start.spring.io/ to create our project structure. We need to specify that we are building a **Gradle** project with **Kotlin** and Spring Boot **2.0.2** (or newer if available at the time of reading), and we need to include the “Web” component:\n\n![kotlin-takeaway-spring-initializer](//images.ctfassets.net/1es3ne0caaid/6gvlvTIkGk8au0u0ew2sS2/7cf5dff11c4c65e5f2a2836a69174bbc/kotlin-takeaway-spring-initializer.png)\n\nThe **Generate Project** button will give you a zip file containing our application structure. Unpack this somewhere. At any time, you can execute `./gradlew bootRun` to build and start your backend server running.\n\nFirstly though, we need to add some dependencies. Open up the `build.gradle` file and add the following to the `dependencies` section:\n\n``` gradle\n    compile 'com.pusher:pusher-http-java:1.0.0'\n    compile 'com.pusher:push-notifications-server-java:0.9.0'\n    runtime 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.2'\n```\n\nThe first of these is the Pusher library needed for triggering push notifications. The second is the Jackson module needed for serializing and deserializing Kotlin classes into JSON.\n\nNow, build the project. This will ensure that all of the dependencies are downloaded and made available and that everything compiles and builds correctly:\n\n```\n    $ ./gradlew build\n    Starting a Gradle Daemon (subsequent builds will be faster)\n    \n    \u003e Task :test\n    2018-04-27 07:34:27.548  INFO 43169 --- [       Thread-5] o.s.w.c.s.GenericWebApplicationContext   : Closing org.springframework.web.context.support.GenericWebApplicationContext@c1cf60f: startup date [Fri Apr 27 07:34:25 BST 2018]; root of context hierarchy\n    \n    \n    BUILD SUCCESSFUL in 17s\n    5 actionable tasks: 5 executed\n```\n\n### Required endpoints\n\nOur backend application will have endpoints for the customer and staff UI to work with. The customer endpoints are:\n\n- GET /menu-items\n- POST /orders\n\nWhilst the staff endpoints are:\n\n- GET /orders\n- PUT /orders/{id}/status\n- PUT /orders/{id}/items/{id}/status\n\nAn `orders` resource will contain a number of `menu-items` entries, with the status of them. The customer application will create a new order containing a simple list of these entries, and then the staff application will update the status of each item as is completed. Once they are all completed it will then update the order status to indicate that the food is out for delivery, and that it has been delivered.\n\nThe creation of an order will cause a Pusher Channels message to be sent out, containing the new order. Every time an order is updated will cause a Pusher Beams message to be sent out, containing the status of that order.\n\n### Listing menu items\n\nThe first thing we’ll do is to support listing of menu items. \n\nFirstly we want to actually represent our menu items. In this case we’ll go for something very simple - just an name and an ID - but in reality you could include whatever details are needed. Create a new class called `MenuItem` as follows:\n\n``` kotlin\n    data class MenuItem(\n            val id: String,\n            val name: String\n    )\n```\n\nThen we’ll create a class to represent our DAO layer for loading menu items. This will be entirely hard-coded in this application, but in reality would work in terms of a database. Create a new class called `MenuItemDao` as follows:\n\n``` kotlin\n    @Component\n    class MenuItemDao {\n        private val menuItems = listOf(\n                MenuItem(id = \"cheese_tomato_pizza\", name = \"Cheese \u0026 Tomato Pizza\"),\n                MenuItem(id = \"hot_spicy_pizza\", name = \"Hot \u0026 Spicy Pizza\"),\n                MenuItem(id = \"vegetarian_pizza\", name = \"Vegetarian Supreme Pizza\"),\n                MenuItem(id = \"garlic_bread\", name = \"Garlic Pizza Bread\"),\n                MenuItem(id = \"donner_kebab\", name = \"Donner Kebab\"),\n                MenuItem(id = \"chicken_tikka_kebab\", name = \"Chicken Tikka Kebab\"),\n                MenuItem(id = \"chicken_strips\", name = \"Chicken Strips (7)\"),\n                MenuItem(id = \"beef_burger\", name = \"Beef Burger\"),\n                MenuItem(id = \"cheeseburger\", name = \"Cheeseburger\")\n        )\n        \n        fun listMenuItems() = menuItems\n    }\n```\n\n\u003e **Note:** the `@Component` annotation means that Spring will automatically find this class and make it available for other classes to use.\n\nNow we’ll create a controller to list these menu items. Create a new class called `MenuItemController` as follows:\n\n``` kotlin\n    @RestController\n    @CrossOrigin\n    class MenuItemController(private val dao: MenuItemDao) {\n        @RequestMapping(\"/menu-items\")\n        fun getMenuItems() = dao.listMenuItems()\n    }\n```\n\n\u003e **Note:** the @CrossOrigin annotation makes this controller accessible from web applications running on a different host and/or port.\n\n### Managing orders\n\nThe next part is to manage the orders themselves. For this we want to be able to create, update and list the orders that are being processed.\n\nFirstly we will create a representation of the order itself. For this, create a class called `Order` as follows:\n\n``` kotlin\n    enum class OrderItemStatus {\n        PENDING,\n        STARTED,\n        FINISHED\n    }\n    \n    enum class OrderStatus {\n        PENDING,\n        STARTED,\n        COOKED,\n        OUT_FOR_DELIVERY,\n        DELIVERED\n    }\n    \n    data class OrderItem(\n            val id: String,\n            val menuItem: String,\n            var status: OrderItemStatus\n    )\n    \n    data class Order(\n            val id: String,\n            var status: OrderStatus,\n            val items: List\u003cOrderItem\u003e\n    )\n```\n\nYou’ll note that there are actually 4 classes here. These represent, between them, the entire order. A single order contains a status and a list of order items, where a single order item contains a menu item and the status of that order item. This allows us to update each order item independently of any others, including if one order contains multiples of the same menu item.\n\nNext, create a new class called `OrderDao`. This is going to represent our data storage for orders and order items.\n\n``` kotlin\n    @Component\n    class OrderDao {\n        private val orders = mutableListOf\u003cOrder\u003e()\n    \n        fun createNewOrder(items: List\u003cString\u003e) : Order {\n            val orderId = UUID.randomUUID().toString()\n            val orderItems = items.map { menuItem -\u003e\n                val orderItemId = UUID.randomUUID().toString()\n                OrderItem(id = orderItemId, menuItem = menuItem, status = OrderItemStatus.PENDING)\n            }\n    \n            val order = Order(id = orderId, items = orderItems, status = OrderStatus.PENDING)\n            orders.add(order)\n    \n            return order\n        }\n    \n        fun removeOrder(orderId: String) {\n            orders.removeIf { order -\u003e order.id == orderId }\n        }\n    \n        fun listOrders(): List\u003cOrder\u003e = orders\n    \n        fun getOrderById(id: String) = orders.first { order -\u003e order.id == id }\n    }\n```\n\nFinally, we want a controller that can be used to interact with orders. For this, create a new class called `OrderController` as follows:\n\n``` kotlin\n    @RestController\n    @RequestMapping(\"/orders\")\n    @CrossOrigin\n    class OrderController(private val orderDao: OrderDao) {\n        @RequestMapping(method = [RequestMethod.GET])\n        fun listOrders() = orderDao.listOrders()\n    \n        @RequestMapping(method = [RequestMethod.POST])\n        fun createOrder(@RequestBody items: List\u003cString\u003e): Order {\n            val order = orderDao.createNewOrder(items)\n            \n            // notifier call to go here\n            return order\n        }\n    \n        @RequestMapping(value = [\"/{order}/status\"], method = [RequestMethod.PUT])\n        fun updateOrderStatus(@PathVariable(\"order\") orderId: String,\n                              @RequestBody newStatus: OrderStatus): Order {\n            val order = orderDao.getOrderById(orderId)\n            order.status = newStatus\n    \n            if (order.status == OrderStatus.DELIVERED) {\n                orderDao.removeOrder(orderId)\n            }\n    \n            // notifier call to go here\n            return order\n        }\n    \n        @RequestMapping(value = [\"/{order}/items/{item}/status\"], method = [RequestMethod.PUT])\n        fun updateOrderItemStatus(@PathVariable(\"order\") orderId: String,\n                                  @PathVariable(\"item\") itemId: String,\n                                  @RequestBody newStatus: OrderItemStatus): Order {\n            val order = orderDao.getOrderById(orderId)\n            order.items.first { item -\u003e item.id == itemId }\n                    .status = newStatus\n    \n            if (order.items.all { item -\u003e item.status == OrderItemStatus.FINISHED }) {\n                order.status = OrderStatus.COOKED\n            } else if (order.items.any { item -\u003e item.status != OrderItemStatus.PENDING }) {\n                order.status = OrderStatus.STARTED\n            }\n    \n            // notifier call to go here\n            return order\n        }\n    }\n```\n\nThis has some business logic around when the status of an order or an order item is updated, in order to correctly transition the order through it’s lifecycle.\n\n\n\u003e **Note:** there is no error handling here. Actions such as providing an invalid ID or status will cause a bad error to be returned. In a real application this would need to be handled properly, but for this article we don’t need to worry about it.\n\n### Sending update notifications\n\nOnce we have our backend server able to manage our orders and order items, we need to keep all of our clients updated. This includes both the web UI for the restaurant and the Android UI for the customers. For this, we are going to be sending events using both Pusher Beams and Pusher Channels.\n\nFor this, we will first create a new class called `OrderNotifier` as follows:\n\n```\n    @Component\n    class OrderNotifier(\n            @Value(\"\\${pusher.beams.instance_id}\") beamsInstanceId: String,\n            @Value(\"\\${pusher.beams.secret}\") beamsSecretKey: String,\n            @Value(\"\\${pusher.channels.app_id}\") channelsAppId: String,\n            @Value(\"\\${pusher.channels.key}\") channelsKey: String,\n            @Value(\"\\${pusher.channels.secret}\") channelsSecret: String,\n            @Value(\"\\${pusher.channels.cluster}\") channelsCluster: String\n    ) {\n    \n        private val beams: PushNotifications = PushNotifications(beamsInstanceId, beamsSecretKey)\n        private val channels: Pusher = Pusher(channelsAppId, channelsKey, channelsSecret)\n    \n        init {\n            channels.setCluster(channelsCluster)\n            channels.setEncrypted(true)\n        }\n    \n        fun notify(order: Order) {\n            sendBeamsNotification(order)\n            sendChannelsNotification(order)\n        }\n    \n        private fun sendBeamsNotification(order: Order) {\n            val itemStatusCounts = order.items.groupBy { it.status }\n                    .mapValues { it.value.size }\n    \n            beams.publish(listOf(order.id),\n                    mapOf(\n                            \"fcm\" to mapOf(\n                                    \"data\" to mapOf(\n                                            \"order\" to order.id,\n                                            \"status\" to order.status.name,\n                                            \"itemsPending\" to (itemStatusCounts[OrderItemStatus.PENDING] ?: 0).toString(),\n                                            \"itemsStarted\" to (itemStatusCounts[OrderItemStatus.STARTED] ?: 0).toString(),\n                                            \"itemsFinished\" to (itemStatusCounts[OrderItemStatus.FINISHED] ?: 0).toString()\n                                    )\n                            )\n                    ))\n        }\n    \n        private fun sendChannelsNotification(order: Order) {\n            channels.trigger(\"orders\", \"order-update\", mapOf(\n                    \"order\" to order.id,\n                    \"status\" to order.status.name\n            ))\n        }\n    }\n```\n\nThen we will wire this up in our controller. Update the constructor definition of `OrderController` as follows:\n\n``` kotlin\n    class OrderController(private val orderDao: OrderDao, private val orderNotifier: OrderNotifier) {\n```\n\nThen add the following to each of the `createOrder`, `updateOrderStatus` and `updateOrderItemStatus` methods, immediately before the return:\n\n``` kotlin\n    orderNotifier.notify(order)\n```\n\nFinally, we need to actually configure our system. This is done in `application.properties`, as follows:\n\n```\n    pusher.channels.app_id=CHANNELS_APP_ID\n    pusher.channels.key=CHANNELS_KEY\n    pusher.channels.secret=CHANNELS_SECRET\n    pusher.channels.cluster=CHANNELS_CLUSTER\n    \n    pusher.beams.instance_id=BEAMS_INSTANCE_ID\n    pusher.beams.secret=BEAMS_SECRET\n```\n\n\u003e **Note:** remember to replace CHANNELS_APP_ID, CHANNELS_KEY, CHANNELS_SECRET, CHANNELS_CLUSTER, BEAMS_INSTANCE_ID and BEAMS_SECRET with the appropriate values obtained when you registered your Pusher application details.\n\nAt this point, our backend does everything necessary to support this application.\n\n\n## Takeaway web application\n\nThe next part is to build the web application that the takeaway will use to fulfil orders. We’re going to use Create React App for that. Firstly, we’ll create the webapp structure itself:\n\n```\n    $ create-react-app takeaway-webapp\n    $ cd takeaway-webapp\n    $ npm install --save axios pusher-js semantic-ui-react semantic-ui-css\n```\n\nThis also installs the modules for communicating with our backend - `axios` for making HTTP calls and `pusher-js` for receiving the Pusher Channels messages - as well as Semantic UI for our styling.\n\n\n\u003e **Note:** at the time of writing, this also installs babel/runtime version 7.0.0-beta.48, which has a serious bug in it. If this is still the case then you can fix this by running `npm install` `--``save @babel/runtime@7.0.0-beta.47`.\n\nFirstly we’ll create a component for rendering a single order. This is fully self-contained in this example, but in reality you might choose to separate out into smaller components. Create a new file called `src/Order.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import { Segment, Table, Button } from 'semantic-ui-react'\n    import axios from 'axios';\n    function updateOrderItem(order, item, newStatus) {\n        axios.put(`http://localhost:8080/orders/${order.id}/items/${item.id}/status`,\n            newStatus,\n            {\n                transformRequest: (data) =\u003e `\"${data}\"`,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n    }\n    function updateOrder(order, newStatus) {\n        axios.put(`http://localhost:8080/orders/${order.id}/status`,\n            newStatus,\n            {\n                transformRequest: (data) =\u003e `\"${data}\"`,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n    }\n    function OrderItemButton({ order, item }) {\n        if (item.status === 'PENDING') {\n            return \u003cButton onClick={() =\u003e updateOrderItem(order, item, 'STARTED')}\u003eStart Work\u003c/Button\u003e;\n        } else if (item.status === 'STARTED') {\n            return \u003cButton onClick={() =\u003e updateOrderItem(order, item, 'FINISHED')}\u003eFinish Work\u003c/Button\u003e;\n        } else {\n            return \u003cdiv\u003eFinished\u003c/div\u003e;\n        }\n    }\n    function OrderButton({ order }) {\n        if (order.status === 'COOKED') {\n            return \u003cButton onClick={() =\u003e updateOrder(order, 'OUT_FOR_DELIVERY')}\u003eOut for Delivery\u003c/Button\u003e;\n        } else if (order.status === 'OUT_FOR_DELIVERY') {\n            return \u003cButton onClick={() =\u003e updateOrder(order, 'DELIVERED')}\u003eDelivered\u003c/Button\u003e;\n        } else {\n            return null;\n        }\n    }\n    export default function Order({ order }) {\n        const items = order.items.map((item) =\u003e (\n            \u003cTable.Row key={item.id}\u003e\n                \u003cTable.Cell\u003e\n                    {item.name}\n                \u003c/Table.Cell\u003e\n                \u003cTable.Cell\u003e\n                    \u003cOrderItemButton order={order} item={item} /\u003e\n                \u003c/Table.Cell\u003e\n            \u003c/Table.Row\u003e\n        ));\n        return (\n            \u003cSegment vertical\u003e\n                \u003cTable striped\u003e\n                    \u003cTable.Body\u003e\n                        {items}\n                    \u003c/Table.Body\u003e\n                \u003c/Table\u003e\n                \u003cOrderButton order={order} /\u003e\n            \u003c/Segment\u003e\n        );\n    }\n```\n\n\u003e **Note:** this makes calls to `http://localhost:8080`. In reality you will need to replace this with the real URL to your backend service.\n\nThis will render a table containing all of the order items, each of which has a button next to it to update the status of that item. There will also be a button, if applicable, below the table to update the delivery status of the entire order.\n\nNext we’ll create a simple component to render the complete list of orders. Create `src/OrdersList.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import Order from './Order';\n    export default ({ orders }) =\u003e {\n        const orderElements = orders.map((order) =\u003e \u003cOrder order={order} key={order.id} /\u003e);\n        return (\n            \u003cdiv\u003e\n                {orderElements}\n            \u003c/div\u003e\n        );\n    };\n```\n\nNow we need to actually connect this to our APIs. For this we will create a file called `src/ConnectedOrdersList.js` - so called because it’s not a UI component but a connecting component that makes API calls instead - as follows:\n\n``` javascript\n    import React from 'react';\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    import OrdersList from './OrdersList';\n    const socket = new Pusher('\u003cCHANNELS__KEY\u003e', {\n        cluster: '\u003cCHANNELS_CLUSTER\u003e',\n    });\n    export default class ConnectedOrdersList extends React.Component {\n        state = {\n            orders: []\n        };\n        render() {\n            return (\n                \u003cdiv className=\"ui container\"\u003e\n                    \u003cOrdersList orders={this.state.orders} /\u003e\n                \u003c/div\u003e\n            );\n        }\n        componentDidMount() {\n            this._fetchOrders();\n            socket.subscribe('orders')\n                .bind('order-update', () =\u003e this._fetchOrders());\n        }\n        _fetchOrders() {\n            const ordersPromise = axios.get('http://localhost:8080/orders')\n            const menuItemsPromise = axios.get('http://localhost:8080/menu-items');\n            Promise.all([ordersPromise, menuItemsPromise])\n                .then((values) =\u003e {\n                    const menuItems = {};\n                    values[1].data.forEach((entry) =\u003e {\n                        menuItems[entry.id] = entry.name;\n                    });\n                    const orders = values[0].data.map((order) =\u003e {\n                        return {\n                            id: order.id,\n                            status: order.status,\n                            items: order.items.map((item) =\u003e {\n                                return {\n                                    id: item.id,\n                                    menuItem: item.menuItem,\n                                    status: item.status,\n                                    name: menuItems[item.menuItem]\n                                };\n                            })\n                        };\n                    });\n                    this.setState({\n                        orders: orders\n                    });\n                });\n        }\n    }\n```\n\n\u003e **Note:** ensure you replace \u003cCHANNELS_KEY\u003e and \u003cCHANNELS_CLUSTER\u003e with the same values as used in the backend application.\n\nThis contains a method that will make two API calls - one each to our */menu-items* and */orders* endpoints - and combine the results together. Then it will update the component state with this result, which will cause it to render our `Orders` component with the resultant list. We also register to listen to the Pusher events that we broadcast earlier so that every time we get an indication that the orders have changed we can go and refresh our list.\n\nFinally, replace the contents of `src/App.js` with the following:\n\n``` javascript\n    import React, { Component } from 'react';\n    import 'semantic-ui-css/semantic.min.css';\n    import OrdersList from './ConnectedOrdersList';\n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cOrdersList /\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default App;\n```\n\nThis renders our `ConnectedOrdersList` component that we’ve just defined as the main body of our application.\n\nAt this point, we have a fully functional web UI that the takeaway can use to manage the orders:\n\n![kotlin-takeaway-stage-1](//images.ctfassets.net/1es3ne0caaid/3mmmDudOCkiyGioUYQkC0G/28060805deca056afa072587e139ea6b/kotlin-takeaway-stage-1.gif)\n\n## Building the customers application\n\nThe customers Android application will also be built in Kotlin, using Android Studio. To start, open up Android Studio and create a new project, entering some appropriate details and ensuring that you select the **Include Kotlin support** option. Note that the **Package name** must match that specified when you set up the FCM Server Key earlier.\n\n![kotlin-takeaway-create-android](//images.ctfassets.net/1es3ne0caaid/6ByUvVg2xGQW0ou2y0mGGO/30ad4e43657e16edd4e92d18d4f81939/kotlin-takeaway-create-android.png)\n\nThen on the next screen, ensure that you select support for **Phone and Tablet** using at least API 23:\n\n![kotlin-takeaway-target-devices](//images.ctfassets.net/1es3ne0caaid/5x42W6wam4M2wIoIMcSCy4/aca4503d566684febc2631e1a7fdbacc/kotlin-takeaway-target-devices.png)\n\nEnsure that an **Google Maps Activity** is selected:\n\n![kotlin-ridesharing-create-android-7](//images.ctfassets.net/1es3ne0caaid/6f2xDO0sTu6AOoguysgYG6/0df9b3e7bf31f00431f60e70f353db1f/kotlin-ridesharing-create-android-7.png)\n\nAnd set the **Activity Name** to “MainActivity” and **Layout Name** to “activity_main”:\n\n![kotlin-takeaway-main](//images.ctfassets.net/1es3ne0caaid/1nMTsf3zT6SG2EomEWau8O/931743f110908b66dc781f5c633d8106/kotlin-takeaway-main.png)\n\nNext we need to add some dependencies to our project to support Pusher. Add the following to the project level `build.gradle`, in the existing `dependencies` section:\n\n``` gradle\n    classpath 'com.google.gms:google-services:3.2.1'\n```\n\nThen add the following to the `dependencies` section of the app level `build.gradle`:\n\n``` gradle\n    implementation 'com.google.firebase:firebase-messaging:15.0.0'\n    implementation 'com.pusher:push-notifications-android:0.10.0'\n    \n    compile 'com.loopj.android:android-async-http:1.4.9'\n    compile 'com.google.code.gson:gson:2.2.4'\n```\n\nAnd this to bottom of the app level `build.gradle`:\n\n``` gradle\n    apply plugin: 'com.google.gms.google-services'\n```\n\nNext, copy the `google-services.json` file we downloaded earlier into the `app` directory under your project. We are now ready to actually develop our specific application using these dependencies.\n\nFinally, we need to add some permissions to our application. Open up the `AndroidManifest.xml` file and add the following immediately before the `\u003capplication\u003e` tag:\n\n``` xml\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\n### Displaying the menu items\n\nThe main screen that we are going to show is a list of menu items, allowing the user to place an order. \n\nFirstly, we need our main application layout. For this, update `app/res/layout/activity_main.xml` as follows:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"#fff\"\u003e\n    \n        \u003cScrollView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n            \u003cLinearLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:orientation=\"vertical\"\u003e\n    \n                \u003cListView\n                    android:id=\"@+id/records_view\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"500dp\"\n                    android:layout_marginTop=\"16dp\"\u003e\n    \n                \u003c/ListView\u003e\n            \u003c/LinearLayout\u003e\n        \u003c/ScrollView\u003e\n    \n        \u003cButton\n            android:id=\"@+id/button2\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Place Order\" /\u003e\n    \n    \u003c/LinearLayout\u003e\n```\n\n\u003e **Note:** in order to paste this snippet in, the **Text** tab at the bottom of the screen should be selected.\n\n\n\u003e **Note:** sometimes, copy and paste of the entire file into the **Text** tab will cause a blank line at the very top. This is invalid XML and needs to be removed.\n\nThis gives us a list to show our menu items, and a button with which to place the order.\n\nNow we need a class to represent each entry in this list. Create a new class called `MenuItem` as follows:\n\n``` kotlin\n    data class MenuItem(\n            val id: String,\n            val name: String\n    )\n```\n\nYou’ll notice that this is identical to the `MenuItem` class on the backend. This is unsurprising since it represents the exact same data.\n\nNext we need a layout to represent a single row in our list. For this, create a new layout resource called `app/res/layout/menuitem.xml` as follows:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"horizontal\" android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n        \u003cTextView\n            android:id=\"@+id/item_name\"\n            android:textColor=\"#000\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:text=\"Name\"/\u003e\n        \u003cSpinner\n            android:id=\"@+id/item_count\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"3\" /\u003e\n    \u003c/LinearLayout\u003e\n```\n\nThis has two entries in it - an item name and a spinner. The spinner control is effectively a dropdown, and will be used to select how many of each item to order.\n\nNow we need to be able to render this new layout for each of our menu items. For this, create a new class called `MenuItemAdapter` as follows:\n\n``` kotlin\n    class MenuItemAdapter(private val recordContext: Context) : BaseAdapter() {\n        var records: List\u003cMenuItem\u003e = listOf()\n            set(value) {\n                field = value\n                notifyDataSetChanged()\n            }\n    \n        override fun getView(i: Int, view: View?, viewGroup: ViewGroup): View {\n            val theView = if (view == null) {\n                val recordInflator = recordContext.getSystemService(Activity.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n    \n                val theView = recordInflator.inflate(R.layout.menuitem, null)\n                val newMenuItemViewHolder = MenuItemViewHolder(\n                        theView.findViewById(R.id.item_name),\n                        theView.findViewById(R.id.item_count)\n                )\n                val countAdapter = ArrayAdapter(\n                        recordContext,\n                        android.R.layout.simple_spinner_dropdown_item,\n                        IntRange(0, 10).toList().toTypedArray()\n                )\n                newMenuItemViewHolder.count.adapter = countAdapter\n                theView.tag = newMenuItemViewHolder\n    \n                theView\n            } else {\n                view\n            }\n    \n            val menuItemViewHolder = theView.tag as MenuItemViewHolder\n    \n            val menuItem = getItem(i)\n            menuItemViewHolder.name.text = menuItem.name\n            menuItemViewHolder.id = menuItem.id\n    \n            return theView\n        }\n    \n        override fun getItem(i: Int) = records[i]\n    \n        override fun getItemId(i: Int) = 1L\n    \n        override fun getCount() = records.size\n    }\n    \n    data class MenuItemViewHolder(\n            val name: TextView,\n            val count: Spinner\n    ) {\n        var id: String? = null\n    }\n```\n\nAmongst other things, this includes a hard-coded list of values for the spinner control - allowing the user to order up to 10 of any single item.\n\nFinally we just need to get the data into this list. Update `MainActivity` by adding the following field to the class:\n\n``` kotlin\n    private lateinit var recordAdapter: MenuItemAdapter\n```\n\nThen initialize this by adding the following to our `MainActivity` class:\n\n``` kotlin\n    override fun onResume() {\n        super.onResume()\n        recordAdapter = MenuItemAdapter(this)\n        val recordsView = findViewById\u003cView\u003e(R.id.records_view) as ListView\n        recordsView.setAdapter(recordAdapter)\n    \n        refreshMenuItems()\n    }\n```\n\nNext we just need to implement the `refreshMenuItems` method, as follows:\n\n``` kotlin\n    private fun refreshMenuItems() {\n        val client = AsyncHttpClient()\n        client.get(\"http://10.0.2.2:8080/menu-items\", object : JsonHttpResponseHandler() {\n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, response: JSONArray) {\n                super.onSuccess(statusCode, headers, response)\n                runOnUiThread {\n                    val menuItems = IntRange(0, response.length() - 1)\n                            .map { index -\u003e response.getJSONObject(index) }\n                            .map { obj -\u003e\n                                MenuItem(\n                                        id = obj.getString(\"id\"),\n                                        name = obj.getString(\"name\")\n                                )\n                            }\n    \n                    recordAdapter.records = menuItems\n                }\n            }\n        })\n    }\n```\n\n\u003e **Note:** The import for `Header` should be `cz.msebera.android.httpclient.Header`\n\n\n\u003e **Note:** 10.0.2.2 is the IP Address that the host machine appears when running inside the Android emulator. In reality you will want to use the real host of your service.\n\nAt this point we can start up the Android application and see all of the menu choices:\n\n![kotlin-takeaway-stage-2](//images.ctfassets.net/1es3ne0caaid/3qX7X1G7aEAsASgSiU0KSI/d873af999efe1871cb98b02cf4383828/kotlin-takeaway-stage-2.png)\n\n### Placing an order\n\nNow that we can see the list of items that can be ordered, we need to be able to place an order.\n\nFirstly, we need to be able to get the list of items that have been selected to be ordered. This will be coming out of the `MenuItemAdapter` class, as this acts as the interface to the list of items.\n\nFirstly, create a couple of fields in this class as follows:\n\n``` kotlin\n    private val currentOrder = mutableMapOf\u003cString, Int\u003e()\n    \n    val order: List\u003cString\u003e\n        get() = currentOrder.filterValues { it \u003e 0 }\n                .map { orderItem -\u003e List(orderItem.value) { orderItem.key } }\n                .flatten()\n```\n\nThe first of these is a private map that will act as a mapping between each item and the number of that item to order. The second is a computed property that returns a list of the items to order, with one entry for each item. This means that if we order three pizzas, there will be three entries in this list.\n\nNext, add a handler towards the bottom of the `getView` method, immediately before the return statement, to update our map of orders:\n\n``` kotlin\n    menuItemViewHolder.count.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {\n        override fun onNothingSelected(parent: AdapterView\u003c*\u003e?) {\n            currentOrder.remove(menuItem.id)\n        }\n    \n        override fun onItemSelected(parent: AdapterView\u003c*\u003e?, view: View?, position: Int, id: Long) {\n            currentOrder[menuItem.id] = position\n        }\n    }\n```\n\nThis is triggered every time a new value is selected for any item, and will cause our map to be updated to match.\n\nNow we can use this to actually make the HTTP call to place our order. For this we need to create a new method called `placeOrder` in the `MainActivity` class, as follows:\n\n``` kotlin\n    fun placeOrder(view: View) {\n        val items = recordAdapter.order\n        if (items.isEmpty()) {\n            Toast.makeText(this, \"No items selected\", Toast.LENGTH_LONG)\n                    .show()\n        } else {\n    \n            val request = JSONArray(items)\n    \n            val client = AsyncHttpClient()\n            client.post(applicationContext, \"http://10.0.2.2:8080/orders\", StringEntity(request.toString()),\n                    \"application/json\", object : JsonHttpResponseHandler() {\n    \n                override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, response: JSONObject) {\n                    runOnUiThread {\n                        Toast.makeText(this@MainActivity, \"Order placed\", Toast.LENGTH_LONG)\n                                .show()\n                    }\n                }\n            })\n        }\n    }\n```\n\n\u003e **Note:** the “this@MainActivity” syntax means to get the “this” value that refers to the “MainActivity” class, as opposed to the “JsonHttpResponseHandler” inner class that we’re actually executing inside.\n\nThen we can update our `activity_main.xml` file so that the Button element reads as follows:\n\n``` xml\n    \u003cButton\n        android:id=\"@+id/button2\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Place Order\"\n        android:onClick=\"placeOrder\" /\u003e\n```\n\nThis now does everything necessary to place an order on the server, including displaying an error message if the user did not select any items to order when pressing the button.\n\n### Receiving order update notifications\n\nNow that we can place orders, we want to be notified as to the progress of the order. This will include a progress bar for the part of the process where the order is being prepared, and then simple strings to indicate that the order is out for delivery.\n\nThe first thing we need to do is enable support for receiving push notifications for our events. Add the following to the end of the `onCreate` method of `MainActivity`:\n\n``` kotlin\n    PushNotifications.start(getApplicationContext(), \"BEAMS_INSTANCE_ID\")\n```\n\n\u003e **Note:** remember to replace BEAMS_INSTANCE_ID with the appropriate value obtained when you registered your Pusher Beams application details.\n\nNext we want to register to receive notifications for our order. This is done by adding the following in to the `onSuccess` callback method inside the `placeOrder` method:\n\n``` kotlin\n    val id = response.getString(\"id\")\n    PushNotifications.subscribe(id)\n```\n\nAt this point, every time the order changes, the Android app will receive a push notification informing of the changes. We can now display android notifications to inform the user of the current status. Create a new method called `receiveNotification` in the `MainActivity` class as follows:\n\n``` kotlin\n    private fun receiveNotifications() {\n    \n        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n    \n        if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.O) {\n            val channel = NotificationChannel(\"takeaway\",\n                    \"Pusher Takeaway\",\n                    NotificationManager.IMPORTANCE_DEFAULT)\n            notificationManager.createNotificationChannel(channel)\n        }\n    \n        PushNotifications.setOnMessageReceivedListenerForVisibleActivity(this, object : PushNotificationReceivedListener {\n            override fun onMessageReceived(remoteMessage: RemoteMessage) {\n                Log.i(\"Notification\", remoteMessage.data.toString())\n    \n                val pending = remoteMessage.data[\"itemsPending\"]?.toInt() ?: 0\n                val started = remoteMessage.data[\"itemsStarted\"]?.toInt() ?: 0\n                val finished = remoteMessage.data[\"itemsFinished\"]?.toInt() ?: 0\n    \n                val total = pending + started + finished\n    \n                val notification = when(remoteMessage.data[\"status\"]) {\n                    \"STARTED\" -\u003e {\n                        NotificationCompat.Builder(applicationContext, \"takeaway\")\n                                .setSmallIcon(R.mipmap.ic_launcher)\n                                .setContentTitle(\"Your order\")\n                                .setContentText(\"Your order is being cooked\")\n                                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n                                .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                                .setProgress(total, finished, finished == 0)\n                    }\n                    \"COOKED\" -\u003e {\n                        NotificationCompat.Builder(applicationContext, \"takeaway\")\n                                .setSmallIcon(R.mipmap.ic_launcher)\n                                .setContentTitle(\"Your order\")\n                                .setContentText(\"Your order is ready\")\n                                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n                                .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                                .setProgress(total, total, false)\n                    }\n                    \"OUT_FOR_DELIVERY\" -\u003e {\n                        NotificationCompat.Builder(applicationContext, \"takeaway\")\n                                .setSmallIcon(R.mipmap.ic_launcher)\n                                .setContentTitle(\"Your order\")\n                                .setContentText(\"Your order is out for delivery\")\n                                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n                                .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                    }\n                    \"DELIVERED\" -\u003e {\n                        NotificationCompat.Builder(applicationContext, \"takeaway\")\n                                .setSmallIcon(R.mipmap.ic_launcher)\n                                .setContentTitle(\"Your order\")\n                                .setContentText(\"Your order is outside\")\n                                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n                                .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                    }\n                    else -\u003e null\n                }\n    \n                notification?.let {\n                    notificationManager.notify(0, it.build())\n                }\n            }\n        })\n    }\n```\n\n\u003e **Note:**  if it is ambiguous, the NotificationCompat import should be for android.support.v4.app.NotificationCompat.\n\nAnd then call this new method from the `onResume` method:\n\n``` kotlin\n    receiveNotifications()\n```\n\nThis gives everything for the customer to keep updated with their order. Ensure that the backend and web UI are running, and then we can test it all out together.\n\n![kotlin-takeaway-demo](//images.ctfassets.net/1es3ne0caaid/35S4CfDJGMgYQayA8Gkumc/00577e26dd50023386f92baed7e4dc0f/kotlin-takeaway-demo.gif)\n\n## Conclusion\n\nThis article has hopefully shown how easy it can be to integrate Pusher technologies into your application to give real time updates to both the customer and staff user interfaces. Even though we use two totally different Pusher technologies - Pusher Channels and Pusher Beams - they work seamlessly together to give a full featured experience.\n\nThe full source code for this article is available on [GitHub](https://github.com/sazzer/pusher-takeaway). Why not try extending it support more functionality - for example, multiple restaurants.","metaTitle":"Use push notifications to build a food delivery app","metaDescription":"Using Kotlin, React and realtime technologies, build a food delivery application. The app features realtime updates and push notifications."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3HzlrLfzbqicQUwSmy602E","type":"Entry","createdAt":"2018-07-12T21:17:39.261Z","updatedAt":"2018-07-12T21:17:39.261Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an Android poll app with push notifications","url":"android-poll-push-notifications","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/kotlin-python-poll","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}}],"reviewDate":"2018-07-09","description":"Build an Android app in Kotlin, with a backend in Python. Users are able to vote, and see other votes displayed in realtime. They will also receive push notifications when a new vote is cast.","prerequisite":"You will need Android Studio 3+ and virtualenv installed on your machine. Basic knowledge of Android development is required.","content":"The web has become so dynamic that it's weird to have to refresh anything anymore. We expect instant feedback from whatever application we are using and whatever action we are taking on the application.\n\nPolls adopt realtime technologies to give the owners live updates. This has become a major feature in top social media platforms and it is most essential when you need to perform quick surveys. Popular services like Twitter have adopted polls as a part of their services and it works well to gather user sentiments and thoughts.\n\nIn this tutorial, you will learn how to build a realtime poll. We will be using Kotlin, Flask and Pusher Channels. By the time we are done, we will have an application that looks like this:\n\n![pythonball-demo](//images.ctfassets.net/1es3ne0caaid/3R4OATvRi8qEQoqM0mOU24/58776a5c2a0aeb0c3dab6a36358eb149/pythonball-demo.gif)\n\n\n## Prerequisites\n\nIn other to follow this tutorial, you need the following:\n\n\n- Android Studio. Version \u003e= 3.x is recommended. Download [here](https://developer.android.com/studio/).\n- [Flask](http://flask.pocoo.org/) - you will be guided on how to install it in the post.\n- [Virtualenv](#) installed on your machine.\n- Introductory knowledge of Kotlin. Here are some [resources](https://kotlinlang.org/docs/resources.html).\n- [Pusher Beams](https://dash.pusher.com/beams) and [Pusher Channels](https://dashboard.pusher.com/) instance.\n\n\n\n## Setting up your Android application\n\nCreate a new project and follow the wizard to set it up. Name your app `RealtimePolls`. Enter your company‘s domain name. The company domain affects the package name. We will set the domain to `com.example` and the package name to `com.example.realtimepolls`. \n\nChoose your minimum SDK. API 19 (Android 4.4) is just fine. Continue with the `EmptyActivity` template chosen for you, and finish the wizard.\n\nLet’s stop here for now and set up our Pusher Beams and Channels application.\n\n\n## Creating your Beams and Channels instance\n\n### Setting up Pusher Channels\n\nLog in to your [Pusher dashboard](https://dashboard.pusher.com). If you don’t have an account, create one. Your dashboard should look like this:\n\n![pythonball-new-channels-app](//images.ctfassets.net/1es3ne0caaid/5zBwuAVz6oksgasG0KICwg/7ba6bb2a397765eb2bcfca10c213b7f5/pythonball-new-channels-app.png)\n\nCreate a new Channels app. You can easily do this by clicking the big **Create new Channels app** card at the bottom right. When you create a new app, you are provided with keys. Keep them safe as you will soon need them.\n\n### Getting your FCM key\n\nBefore you can start using Beams, you need an FCM key and a google-services file because Beams relies on Firebase. Go to your [Firebase console](https://console.firebase.google.com/u/0/) and create a new project.\n\nWhen you get to the console, click the **Add project** card to initialize the app creation wizard. Add the name of your project. Read and accept the terms of conditions. After this, you will be directed to the project overview screen. Choose the **Add Firebase to your Android app** option. The next screen will require the package name of your app.\n\nAn easy way to get the package name of your app is from your `AndroidManifest.xml` file. Check the `\u003cmanifest\u003e` tag and copy the value of the `package` attribute. Another place you can find this is your app-module `build.gradle` file. Look out for the `applicationId` value. When you enter the package name and click **Register app.** \n\nNext, download your `google-services.json` file. After you have downloaded the file, you can skip the rest of the process. Add the downloaded file to the app folder of your app `RealtimePolls/app`.\n\n![pythonball-google-services-json](//images.ctfassets.net/1es3ne0caaid/7pwITIZFiEMOQ8WeskYkac/c1c4f8924c16a0243d46dff5471ab371/pythonball-google-services-json.png)\n\nNext, go to your Firebase project settings, under the Cloud messaging tab, copy your server key.\n\n### Setting up Pusher Beams\n\nNext, log in to the new [Pusher dashboard](https://dash.pusher.com/), in here we will create a Pusher Beams instance. You should sign up if you don’t have an account yet. Click on the **Beams** button on the sidebar then click **Create**, this will launch a pop up to **Create a new Beams instance** and give it a name.\n\n![pythonball-new-beams](//images.ctfassets.net/1es3ne0caaid/3P9eqXnJi8swOEoykKA40O/f21b1d5b30b63508509218a3f8210ac1/pythonball-new-beams.png)\n\nAs soon as you create the instance, you will be presented with a quickstart guide. Select the **ANDROID** quickstart\n\n![pythonball-beams-quickstart](//images.ctfassets.net/1es3ne0caaid/BafUtlnfiKw4aEKoOsoKi/aade9a902389f94ee252b21823879eb4/pythonball-beams-quickstart.png)\n\nThe next screen requires the FCM key you copied earlier. After you add the FCM key, you can exit the quickstart guide.\n\n\n## Building the Android application\n\n### Adding our dependencies\n\nReopen our project in Android Studio. The next thing we need to do is install the necessary dependencies for our app. Open your app-module `build.gradle` file and add these:\n\n``` gradle\n    // File: ./app/build.gradle\n    dependencies {\n        // other dependencies...\n        implementation 'com.pusher:pusher-java-client:1.5.0'\n        implementation 'com.google.firebase:firebase-messaging:17.0.0'\n        implementation 'com.pusher:push-notifications-android:0.10.0'\n        implementation 'com.pusher:pusher-java-client:1.5.0'    \n        implementation \"com.squareup.retrofit2:retrofit:2.4.0\"\n        implementation \"com.squareup.retrofit2:converter-scalars:2.4.0\"\n        implementation \"com.squareup.retrofit2:converter-gson:2.3.0\"\n    }\n    apply plugin: 'com.google.gms.google-services'\n```\nAnd in the project `build.gradle` file add this:\n\n``` gradle\n    // File: ./build.gradle\n    dependencies {\n        // add other dependencies...\n        classpath 'com.google.gms:google-services:4.0.0'\n    }\n```\n\nAfter adding the dependencies, sync your Gradle files so that the dependencies are imported. \n\n### Developing the logic for our Android application\n\nPusher Beams makes use of a service to notify the app when there is a remote message. Create a new service named `NotificationsMessagingService` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/realtimepolls/NotificationsMessagingService.kt\n    import android.app.NotificationChannel\n    import android.app.NotificationManager\n    import android.app.PendingIntent\n    import android.content.Intent\n    import android.os.Build\n    import android.support.v4.app.NotificationCompat\n    import android.support.v4.app.NotificationManagerCompat\n    import com.google.firebase.messaging.RemoteMessage\n    import com.pusher.pushnotifications.fcm.MessagingService\n    \n    class NotificationsMessagingService : MessagingService() {\n    \n        override fun onMessageReceived(remoteMessage: RemoteMessage) {\n            val notificationId = 10\n            val channelId  = \"polls\"\n            lateinit var channel:NotificationChannel\n            val intent = Intent(this, MainActivity::class.java)\n            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\n            val pendingIntent = PendingIntent.getActivity(this, 0, intent, 0)\n            val mBuilder = NotificationCompat.Builder(this, channelId)\n                    .setSmallIcon(R.mipmap.ic_launcher)\n                    .setContentTitle(remoteMessage.notification!!.title!!)\n                    .setContentText(remoteMessage.notification!!.body!!)\n                    .setContentIntent(pendingIntent)\n                    .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                    .setAutoCancel(true)\n    \n            if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.O) {\n                val notificationManager = applicationContext.getSystemService(NotificationManager::class.java)\n                val name = getString(R.string.channel_name)\n                val description = getString(R.string.channel_description)\n                val importance = NotificationManager.IMPORTANCE_DEFAULT\n                channel = NotificationChannel(\"world-cup\", name, importance)\n                channel.description = description\n                notificationManager!!.createNotificationChannel(channel)\n                notificationManager.notify(notificationId, mBuilder.build())\n    \n            } else {\n                val notificationManager =  NotificationManagerCompat.from(this)\n                notificationManager.notify(notificationId, mBuilder.build())\n            }\n        }\n    }\n```\n\nThe method `onMessageReceived` is called when a push notification is received on the device. The message received is then used to display a notification for the user. \n\nAdd the following to your `string.xml` file:\n\n``` xml\n    // File: ./app/src/main/res/values/strings.xml\n    \u003cstring name=\"channel_name\"\u003ePolls\u003c/string\u003e\n    \u003cstring name=\"channel_description\"\u003eTo receive updates about polls\u003c/string\u003e\n```\n\nAdd the service to your `AndroidManifest.xml` file like so:\n\n``` xml\n    // File: ./app/src/main/AndroidManifest.xml\n    \u003capplication\n              ...\u003e\n    \n        [...]\n        \n        \u003cservice android:name=\".NotificationsMessagingService\"\u003e\n            \u003cintent-filter android:priority=\"1\"\u003e\n                \u003caction android:name=\"com.google.firebase.MESSAGING_EVENT\" /\u003e\n            \u003c/intent-filter\u003e\n        \u003c/service\u003e\n        \n    \u003c/application\u003e\n```\n\nCreate an interface named `ApiService` and paste the following:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/realtimepolls/ApiService.kt\n    import okhttp3.RequestBody\n    import retrofit2.Call\n    import retrofit2.http.Body\n    import retrofit2.http.GET\n    import retrofit2.http.POST\n    \n    interface ApiService {\n    \n        @GET(\"/generate\")\n        fun generatePolls(): Call\u003cString\u003e\n    \n        @POST(\"/update\")\n        fun updatePolls(@Body  body: RequestBody):Call\u003cString\u003e\n    \n    }\n```\n\nThis interface contains the endpoints to be accessed during the course of this tutorial. There are two endpoints, the first one is to get the question and options from the server while the second is to send the option selected by the user to the server.\n\nSince internet connection is required for some functionalities, you need to request for the internet permissions. Add this to your `AndroidManifest.xml` file:\n\n``` xml\n    // File: ./app/src/main/AndroidManifest.xml\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        package=\"com.example.realtimepolls\"\u003e\n    \n        \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n        \n        [...]\n    \n    \u003c/manifest\u003e\n```\n\nNext, let’s design the layout of the app. The app will contain radio buttons so as to ensure that only one option is chosen. Open your `activity_main.xml` file and paste this:\n\n``` xml\n    // File: ./app/src/main/res/layout/activity_main.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n    \n        \u003candroid.support.constraint.ConstraintLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            tools:context=\".MainActivity\"\u003e\n    \n            \u003cTextView\n                android:id=\"@+id/poll_title\"\n                android:layout_width=\"0dp\"\n                android:layout_height=\"wrap_content\"\n                android:layout_margin=\"10dp\"\n                android:textSize=\"20sp\"\n                app:layout_constraintLeft_toLeftOf=\"parent\"\n                app:layout_constraintRight_toRightOf=\"parent\"\n                app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n            \u003cRadioGroup xmlns:android=\"http://schemas.android.com/apk/res/android\"\n                android:id=\"@+id/radio_group\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_margin=\"20dp\"\n                android:orientation=\"vertical\"\n                app:layout_constraintLeft_toLeftOf=\"parent\"\n                app:layout_constraintTop_toBottomOf=\"@id/poll_title\"\u003e\n    \n                \u003cRadioButton\n                    android:id=\"@+id/choice_1\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\" /\u003e\n    \n                \u003candroid.support.v4.widget.ContentLoadingProgressBar\n                    android:id=\"@+id/progress_choice_1\"\n                    style=\"@style/Base.Widget.AppCompat.ProgressBar.Horizontal\"\n                    android:layout_width=\"200dp\"\n                    android:layout_height=\"50dp\"\n                    android:layout_marginStart=\"10dp\"\n                    android:max=\"100\" /\u003e\n    \n                \u003cRadioButton\n                    android:id=\"@+id/choice_2\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\" /\u003e\n    \n                \u003candroid.support.v4.widget.ContentLoadingProgressBar\n                    android:id=\"@+id/progress_choice_2\"\n                    style=\"@style/Base.Widget.AppCompat.ProgressBar.Horizontal\"\n                    android:layout_width=\"200dp\"\n                    android:layout_height=\"50dp\"\n                    android:layout_marginStart=\"10dp\"\n                    android:max=\"100\" /\u003e\n    \n                \u003cRadioButton\n                    android:id=\"@+id/choice_3\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\" /\u003e\n    \n                \u003candroid.support.v4.widget.ContentLoadingProgressBar\n                    android:id=\"@+id/progress_choice_3\"\n                    style=\"@style/Base.Widget.AppCompat.ProgressBar.Horizontal\"\n                    android:layout_width=\"200dp\"\n                    android:layout_height=\"50dp\"\n                    android:layout_marginStart=\"10dp\"\n                    android:max=\"100\" /\u003e\n    \n            \u003c/RadioGroup\u003e\n    \n            \u003cButton\n                android:id=\"@+id/vote\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_margin=\"10dp\"\n                android:text=\"Vote\"\n                android:textAllCaps=\"false\"\n                app:layout_constraintLeft_toLeftOf=\"parent\"\n                app:layout_constraintRight_toRightOf=\"parent\"\n                app:layout_constraintTop_toBottomOf=\"@+id/radio_group\" /\u003e\n    \n        \u003c/android.support.constraint.ConstraintLayout\u003e\n    \n    \u003c/ScrollView\u003e\n```\n\nThe layout contains radio buttons with a progress bar below each of them. The progress bar will give a visual feedback of the vote count.\n\nGo to your `MainActivity` file and add this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/realtimepolls/MainActivity.kt\n    import android.os.Bundle\n    import android.util.Log\n    import android.widget.Toast\n    import android.support.v7.app.AppCompatActivity\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import com.pusher.pushnotifications.PushNotifications\n    import kotlinx.android.synthetic.main.activity_main.*\n    import okhttp3.MediaType\n    import okhttp3.OkHttpClient\n    import okhttp3.RequestBody\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    import retrofit2.Retrofit\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    \n    class MainActivity : AppCompatActivity() {\n    \n        private val apiService: ApiService by lazy {\n            Retrofit.Builder()\n                    .baseUrl(\"http://10.0.2.2:5000/\")\n                    .addConverterFactory(ScalarsConverterFactory.create())\n                    .client(OkHttpClient.Builder().build())\n                    .build().create(ApiService::class.java)\n        }\n    \n        val tag = \"MainActivity\"\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n            generatePolls()\n            setupPusher()\n            setupBeams()\n            setupClickListener()\n        }\n    }\n```\n\nAbove, the class variables `apiService` and `tag` are declared. The first is to be used to make API calls to the local server while the second will be used for logging. In the `onCreate` method, there are some other custom methods called. Let’s create them.\n\nFirst is the `generatePolls` method. Paste the function in your `MainActivity` class:\n\n``` kotlin\n    private fun generatePolls() {\n        apiService.generatePolls().enqueue(object : Callback\u003cString\u003e {\n            override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n    \n            }\n            \n            override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                val jsonObject = JSONObject(response!!.body())\n                poll_title.text = jsonObject.getString(\"title\")\n                choice_1.text = jsonObject.getString(\"choice1\")            \n                choice_2.text = jsonObject.getString(\"choice2\")\n                choice_3.text = jsonObject.getString(\"choice3\")\n            }\n        })\n    }\n```\n\nThis method makes a network call to the server to get the poll question and options and populate the questions and options to the layout. \n\nNext, is the `setupPusher` method. Add the following to the `MainActivity` class:\n\n``` kotlin\n    private fun setupPusher() {\n        val options = PusherOptions()\n        options.setCluster(PUSHER_APP_CLUSTER)\n        val pusher = Pusher(PUSHER_API_KEY, options)\n        val channel = pusher.subscribe(\"polls\")\n    \n        channel.bind(\"vote\") { channelName, eventName, data -\u003e\n            Log.d(tag, data)\n            val jsonObject = JSONObject(data)\n    \n            runOnUiThread {\n                progress_choice_1.progress = jsonObject.getInt(\"1\")\n                progress_choice_2.progress = jsonObject.getInt(\"2\")\n                progress_choice_3.progress = jsonObject.getInt(\"3\")\n            }\n        }\n        \n        pusher.connect()\n    }\n```\n\u003e Replace the `PUSHER_KEY_*` placeholders with the keys from your Pusher Channels dashboard.\n\nThis method subscribes to the `polls` channel and listens to the `vote` event. Here, what is expected from the Pusher event is the score in percent of each option of the poll. The results are then populated to their respective progress-bars on the UI thread.\n\nNext, create the `setupBeams` function and add it to the same class:\n\n``` kotlin\n    private fun setupBeams() {\n        PushNotifications.start(applicationContext, \"PUSHER_BEAMS_INSTANCE_ID\")\n        PushNotifications.subscribe(\"polls-update\")\n    }\n```\n\nThis method above initializes Pusher Beams and subscribes to the `polls-update` event.\n\n\n\u003e Replace `PUSHER_BEAMS_INSTANCE_ID` with the instance ID from your Beams dashboard.\n\nFinally, create the `setupClickListener` and add it to the class:\n\n``` kotlin\n    private fun setupClickListener() {\n        vote.setOnClickListener {\n            val checkedButton = radio_group.checkedRadioButtonId\n            if (checkedButton == -1) {\n                Toast.makeText(this, \"Please select an option\", Toast.LENGTH_SHORT).show()\n            } else {\n                Log.d(tag, checkedButton.toString())\n                val selectedId = when (checkedButton) {\n                    R.id.choice_1 -\u003e 1\n                    R.id.choice_2 -\u003e 2\n                    R.id.choice_3 -\u003e 3\n                    else -\u003e -1\n                }\n    \n                val jsonObject = JSONObject()\n                jsonObject.put(\"option\", selectedId)\n    \n                val body = RequestBody.create(MediaType.parse(\"application/json\"), jsonObject.toString())\n    \n                apiService.updatePolls(body).enqueue(object : Callback\u003cString\u003e {\n                    override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n                        Log.d(tag, t?.localizedMessage)\n                    }\n    \n                    override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                        Log.d(tag, response?.body())\n                    }\n                })\n            }\n        }\n    }\n```\n\nThis method above contains the click listener added to the vote button. The user must choose an option for the vote to be recorded. Based on the choice of the user, a unique ID is sent to the server to update the poll and trigger a Pusher event.\n\nThat’s all for the Android application. Let’s build a simple Python backend.\n\n\n## Building your backend\n\nLet’s create our project folder, and activate a virtual environment in it. Run the commands below:\n\n```\n    $ mkdir pypolls\n    $ cd pypolls\n    $ virtualenv .venv\n    $ source .venv/bin/activate # Linux based systems\n    $ \\path\\to\\env\\Scripts\\activate # Windows users\n```\n\nNow that we have the virtual environment setup, we can install Flask within it with this command:\n\n```\n    $ pip install flask\n```\nNext, run the following command to set the Flask environment to development (on Linux based machines):\n\n```\n    $ export FLASK_ENV=development\n```\nIf you are on Windows, the environment variable syntax depends on command line interpreter. On Command Prompt:\n\n```\n    C:\\path\\to\\app\u003eset FLASK_APP=app.py\n```\n\nAnd on PowerShell:\n\n```\n    PS C:\\path\\to\\app\u003e $env:FLASK_APP = \"app.py\"\n```\n\nNow we need to install some of the other dependencies:\n\n```\n    $ pip install pusher pusher_push_notifications\n    $ pip install --ignore-installed pyopenssl\n```\n\nWhen the installation is complete, create the main and only Python file called `app.py` and paste the following code:\n\n``` python\n    // File: ./app.py\n    # Imports\n    from flask import Flask, jsonify, request, json\n    from pusher import Pusher\n    from pusher_push_notifications import PushNotifications\n    \n    app = Flask(__name__)\n    pn_client = PushNotifications(\n        instance_id='YOUR_INSTANCE_ID_HERE',\n        secret_key='YOUR_SECRET_KEY_HERE',\n    )\n    \n    pusher = Pusher(app_id=u'PUSHER_APP_ID', key=u'PUSHER_APP_KEY', secret=u'PUSHER_SECRET', cluster=u'PUSHER_CLUSTER')\n    \n    # Variables to hold scores of polls\n    choice1 = 0\n    choice2 = 0\n    choice3 = 0\n    \n    # Route to send poll question\n    @app.route('/generate')\n    def send_poll_details():\n        return jsonify({'title':'Who will win the 2018 World Cup','choice1': 'Germany', 'choice2':'Brazil', 'choice3':'Spain'})\n        \n    @app.route('/update', methods=['POST'])\n    def update_poll():\n        global choice1, choice2, choice3\n        \n        req_data = request.get_json()\n        \n        user_choice = req_data['option']\n        \n        if user_choice == 1:\n            choice1 += 1\n        elif user_choice == 2:\n            choice2 += 1\n        elif user_choice == 3:\n            choice3 += 1\n        else:\n            print(\"User choose a wrong option\")\n        \n        total = 0.0\n        total = float(choice1 + choice2 + choice3)\n        \n        choice1_percent = (choice1/total) * 100\n        choice2_percent = (choice2/total) * 100\n        choice3_percent = (choice3/total) * 100\n        \n        pn_client.publish(\n        interests=['polls-update'],\n        publish_body={\n            'fcm': {\n                'notification': {\n                    'title': 'Polls update',\n                    'body': 'There are currently ' + str(int(round(total))) + 'vote(s) in the polls. Have you casted your vote?',\n                },\n            },\n        },\n        )\n        \n        pusher.trigger(u'polls', u'vote', {u'1': choice1_percent, '2':choice2_percent, '3':choice3_percent})\n        \n        return 'success', 200\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the credentials from your Pusher dashboard.\n\nThis is the only file needed for your Flask application. This snippet contains two endpoints to send out the poll question and to give current results.\n\nRun your Python app using this command:\n\n```\n    $ flask run\n```\n\nNow run your Android application in Android Studio and you should see something like this:\n\n![pythonball-demo](//images.ctfassets.net/1es3ne0caaid/3R4OATvRi8qEQoqM0mOU24/58776a5c2a0aeb0c3dab6a36358eb149/pythonball-demo.gif)\n\n## Conclusion\n\nIn this post, you have learned briefly about Flask and how to use it to develop RESTful APIs. You have also explored Pusher’s realtime technologies both on the client and server side. Feel free to check out the final [GitHub repo](https://github.com/neoighodaro/kotlin-python-poll) and play around with the application.","metaTitle":"Build an Android poll app with push notifications","metaDescription":"Use Kotlin to build an Android app, supported by a Python backend. Users are able to vote, and see other votes displayed in realtime. They will also receive push notifications when a new vote is cast."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5iJKA5uH6oMMw8GSGM2ko8","type":"Entry","createdAt":"2018-07-12T21:02:54.294Z","updatedAt":"2020-06-19T13:46:49.924Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app using Framework7","url":"chat-app-framework7","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/Kennypee/pusher-framework7-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-07-09","description":"Build a chat app for iOS and Android using Framework7 and Vue.js, with a simple Node.js backend. Framework7 is a free and open source mobile HTML framework to develop hybrid mobile apps or web apps with iOS \u0026 Android native look and feel.","prerequisite":"You will need Node and npm or Yarn installed on your machine.","content":"## Introduction\n\nRealtime chat functionality has revitalized the way we communicate over the years. In recent times, customers can speak directly with business owners from their mobile applications and websites. This is a huge plus in technology considering how difficult it was in the past.\n\nFramework7 is a free and open source mobile HTML framework to develop hybrid mobile apps with iOS and Android native look and feel. In this tutorial, we'll build a realtime chat application with Framework7 using Pusher channels. Here’s a preview of what we’ll be building. \n\n![framework7-chat-app-demo](//images.ctfassets.net/1es3ne0caaid/5ksbxBpdDyueuymA0OMEae/45c761be2e92c8b19f8eb55ca8a3a9d9/framework7-chat-app-demo.jpeg)\n\n## Prerequisites\n\nBefore you begin, ensure that you have Node and npm or Yarn installed on your machine. Here is a run-down of the core technologies we will be using.\n\n\n1. [**Framework7**](http://framework7.io) ****- a framework for building native-like mobile applications with HTML\n\n\n2. [**Pusher**](https://pusher.com/) - Pusher is a technology for building apps with varying realtime needs like push notifications and pub/sub messaging. It is the engine behind the realtime ability of our chat app.\n\n\n3. [**Vue.js**](https://vuejs.org/) - an open-source JavaScript framework for building user interfaces\n\n\n4. [**Phonegap**](http://phonegap.com/) - an application framework that enables you to build natively installed applications using HTML and JavaScript. \n\n\n## Setting up the project\n\nThe simplest way to set up a Phonegap project is through the command line interface (CLI). Before we create a Phonegap project, ensure that you have Phonegap installed on your machine. To install Phonegap, run:\n\n```\n    $ npm install -g phonegap\n```\n\nThis will install phonegap on your machine and you can confirm the installation by running the command:\n\n```\n    $ phonegap -v\n```\n\nThis should print the version of the currently installed Phonegap. Now that we have that installed let’s create a Phonegap project. Run:\n\n\n```    \n    // create a phonegap project with the framework7 vue template\n    $ phonegap create pusher-chat --template https://github.com/hollyschinsky/phonegap-template-framework7-vue\n    $ cd pusher-chat\n    //start the server\n    $ phonegap serve\n```\n\n\nIf you get any prompts in the process, it is always safe to say yes within the scope of this demo. The `phonegap serve` command will start your project on `localhost:3000`. If you navigate to it on your browser, you should see this.\n\n![framework7-default-page](//images.ctfassets.net/1es3ne0caaid/6peL2Lzl7imkwesSOiAKuM/3d2898faf0d1debba50b40bd9c0ae337/framework7-default-page.jpeg)\n\n## Setting up Pusher\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![framework7-create-pusher](//images.ctfassets.net/1es3ne0caaid/2X2s4DWEt2cQEmAG6iui4k/a4bd9f45baaa63a44ea6c85c8f2cf22f/framework7-create-pusher.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![framework7-create-channels](//images.ctfassets.net/1es3ne0caaid/2reyE709jys2EO6eOIQKgw/12d2a1d82bd74a28a017eba7a441a6cc/framework7-create-channels.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with to be provided with some boilerplate code:\n\n![framework7-pusher-app-config](//images.ctfassets.net/1es3ne0caaid/55C390SQikyEYaY8uwW4Uc/3ddd7e19bd5134635da595a617e22cf1/framework7-pusher-app-config.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![framework7-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/3zxbKtLyysGEWyko8I2MOq/292dc1a265982eee46b7236043cfb6cb/framework7-pusher-app-keys.png)\n\nSave your Pusher credentials somewhere in your editor where you can quickly retrieve it as we’ll be needing it soon.\n\n\n## Server configurations\n\nWe’ll be using a local Node server to establish communications with the client so as to render messages in realtime. Before we create our server, let’s install the packages it’ll need to run effectively. Back in your project root, run:\n\n```\n    $ npm install --save axios body-parser cors express pusher pusher-js\n```\n\nThen in your code editor, create a new file `server.js` and set it up like so:\n\n``` javascript\n        //server.js\n        const Pusher = require('pusher');\n        const express = require('express');\n        const bodyParser = require('body-parser');\n        const cors = require('cors');\n        const app = express();\n        app.use(cors());\n        app.use(bodyParser.urlencoded({extended: false}));\n        app.use(bodyParser.json());\n        \n        var pusher = new Pusher({\n            appId: 'Your-app-Id',\n            key: 'Your-app-Key',\n            secret: 'Your-app-secret',\n            cluster: 'Your-app-cluster',\n            encrypted: true\n          });\n        app.set('PORT', process.env.PORT || 6000);\n        app.post('/message', (req, res) =\u003e {\n          const message = req.body;\n          pusher.trigger('chat', 'message', message);\n          res.send(message)\n      \n        });\n        app.listen(app.get('PORT'), () =\u003e \n          console.log('Listening at ' + app.get('PORT')))\n```\n\n\u003e Do not forget to replace the placeholder values here with your unique keys from Pusher.\n\nHere we loaded all the necessary middlewares for the Express server and then configured Pusher using the credentials we got from our Pusher dashboard.\n\nWe also created the `/``message` endpoint that will receive and process messages sent in from our app. Finally, we trigger an event named `message` to Pusher Channels on a channel called `chat`. The `chat` channel holds a message payload that contains the `message` sent by the user.\n\nTo start the server, run:\n\n```\n    $ node server\n```\n\nThe above command should output this message in your terminal:\n\n\n```    \n    Listening on port 6000\n``` \n\n## Application layout\n\nNow let’s open the `index.html` file and set it up. This is the entrance to our app and we’ll place a form to collect the user’s name and a button to take them to the chat page. Open the `index.html` file, delete all the code in it and update it with this:\n\n``` html\n    // www/index.html\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e \n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui\"\u003e\n      \u003cmeta name=\"apple-mobile-web-app-capable\" content=\"yes\"\u003e\n      \u003cmeta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\"\u003e\n      \u003ctitle\u003eMy App\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" href=\"css/framework7.ios.min.css\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"css/framework7.ios.colors.min.css\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"css/app.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cf7-statusbar\u003e\u003c/f7-statusbar\u003e\n        \u003cf7-views\u003e\n          \u003cf7-view id=\"main-view\" navbar-through :dynamic-navbar=\"true\" main\u003e\n            \u003cf7-navbar back-link=\"Back\" sliding\u003e\n              \u003cf7-nav-center sliding\u003ePusher-Framework7 App \u003c/f7-nav-center\u003e\n            \u003c/f7-navbar\u003e\n      \n            \u003cf7-pages\u003e\n              \u003cf7-page\u003e\n                \u003cf7-list\u003e\n                  \u003c/f7-list-item\u003e\n                        \u003cf7-list-item\u003e    \n                          \u003cf7-input type=\"text\" v-model:value=\"name\" placeholder=\"Your name\" clear-button\u003e\u003c/f7-input\u003e\n                        \u003c/f7-list-item\u003e\n                  \u003c/f7-list-item\u003e\n                  \u003cf7-list-button v-on:click=\"enterChat\"\u003eEnter Chat\u003c/f7-list-button\u003e\n                \u003c/f7-list\u003e\n              \u003c/f7-page\u003e\n            \u003c/f7-pages\u003e\n          \u003c/f7-view\u003e\n        \u003c/f7-views\u003e\n      \u003c/div\u003e\n      \u003ctemplate id=\"page-chat\"\u003e\n        \u003cf7-page\u003e\n    \u003c!-- chat page goes here ... --\u003e\n        \u003c/f7-page\u003e\n      \u003c/template\u003e\n      \n    \u003c!-- Add CDN for Pusher and Axios --\u003e\n      \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e \n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \n      \u003cscript src=\"cordova.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/framework7.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/vue.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/framework7-vue.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/app.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNotice we added the CDN for both Pusher and Axios in the scripts above. Next, open the `app.js` file and  replace the code there in it with this:\n\n``` javascript\n    // www/js/app.js\n    \n    (function(){\n    function init(){\n    Vue.use(Framework7Vue)\n    Vue.component('page-chat', {\n      template: '#page-chat',\n    \n    });\n      // Init App\n    new Vue({\n      el: '#app',\n      methods: {\n        enterChat: function(){\n          if(this.name.trim().length === 0 ){\n            alert(\" Enter your name ...\")\n            return false;\n          }\n        }\n      },\n      framework7: {\n        root: '#app',\n        // material: true,\n        routes: [\n          {\n            path: '/chat/',\n            component: 'page-chat'\n          }\n        ],\n      }\n    });\n    }  \n    // Handle device ready event\n    document.addEventListener('deviceready', init, false)\n    })();\n```    \n    \n\nAt this point, if you save both edited files and check back on your browser, you should now get this look:\n\n![framework7-chat-app-stage-1](//images.ctfassets.net/1es3ne0caaid/3CjVXRcJT2Q268I2QyiwCG/4da71e4c5139bcf6a0c6470879a578b5/framework7-chat-app-stage-1.jpeg)\n\nHere we can supply a name and click the **Enter Chat** button to enter the chat page, but at this point it won’t work. That is expected, given that we’ve not defined a function to handle the button click event. To fix that, let’s go ahead and do some data binding between our component and our states. Update the `app.js` file like so:\n\n``` javascript\n    // www/js/app.js\n    \n    // init states\n    var states = {\n        name: '',\n        msgs: []\n    };\n      \n    (function(){\n    function init(){\n    \n    Vue.use(Framework7Vue)\n    \n    Vue.component('page-chat', {\n      template: '#page-chat',\n      data: function(){\n        return states;\n      },\n      // handle onSend\n      methods: {\n        onSend: function(text, clear){\n             console.log(\"clicked\") \n          if( typeof clear == 'function' ) clear()\n        }\n      }\n    });\n      // Init App\n    new Vue({\n      el: '#app',\n      data: function(){\n        return states;\n      },\n      // handle enterChat button\n      methods: {\n        enterChat: function(){\n          if(this.name.trim().length === 0 ){\n            alert(\" Enter your name ...\")\n            return false;\n          }\n          this.msgs.length = 0;\n          this.$f7.mainView.router.load({url:'/chat/'});\n        }\n      },\n      framework7: {\n        root: '#app',\n        /* Uncomment to enable Material theme: */\n        // material: true,\n        routes: [\n          {\n            path: '/chat/',\n            component: 'page-chat'\n          }\n        ],\n      }\n    });\n    }  \n    // Handle device ready event\n    \n    document.addEventListener('deviceready', init, false)\n    })();\n```\n\nHere we defined a states object to hold the name of the user and an array of messages. Then we added the missing callbacks that we defined in our HTML file to handle the click events on the buttons. \n\nIf the user supplies a name and clicks the **Enter Chat** button, it’ll open up the chat page, but if that is not the case, it’ll alert the user to a name. Update your `app.js` file with the snippet above and save. Now go back to the browser, enter a name and click **Enter Chat.** This should now open up the empty chat page.\n\nNext, we’ll set up the chat page to have a simple chat form with an input to collect the message and a button to send it. Open the `index.html` file and update the chat page template section with this code:\n\n``` html\n    // www/index.html\n    // ...\n    \u003cf7-messages\u003e\n      \u003cf7-message v-for=\"msg in msgs\" :name=\"msg.name\" :text=\"msg.text\" :type=\"msg.type\"\u003e\n    \u003c/f7-message\u003e\n    \u003c/f7-messages\u003e\n      \u003cf7-messagebar placeholder=\"type message\" send-link=\"Send\" v-on:submit=\"onSend\" \u003e\n    \u003c/f7-messagebar\u003e\n    // ...\n```    \n\nAdd this code in the section where we left a comment to add chat page. Save the `index.html` file and check back on your browser. The chat page should look like this:\n\n![framework7-chat-app-stage-2](//images.ctfassets.net/1es3ne0caaid/5hX0MmKXSEE2KYKo20kUoM/6a2fb2c3fbf42ac5aef29d016d50e115/framework7-chat-app-stage-2.jpeg)\n\n## Realtime updates\n\nAt this point, we can type messages, but nothing happens when you try to send. This is because we haven’t integrated Pusher. At the beginning we set up Pusher and retrieved our app keys, we’ll now use it to configure our project. Open the `app.js`  file and add this code:\n\n``` javascript\n      // www/js/app.js\n      \n       const pusher = new Pusher('YOUR_PUSHER_KEY', {\n        cluster: 'YOUR_CLUSTER',\n        encrypted: true,\n      });\n      const channel = pusher.subscribe('chat');\n      channel.bind('message', data =\u003e {\n          console.log(data)\n        var type = data.name == states.name ? 'sent':'received'\n        var name = type == 'sent'? states.name : data.name;\n        states.msgs.push({name:name, text:data.text, type:type});\n      });\n      \n      // ...\n```\n\nThis sets up Pusher in our client with the credentials from our dashboard. We subscribe to the `chat` channel we defined on the server and bind our response data to the appropriate view objects to display them on screen.\n\nNow to send the chat to the server when the user clicks the **Send button**, let’s update the onSend function in the `app.js`  file:\n\n``` javascript\n      // www/js/app.js\n      ...\n      \n      // Init Page Components\n    Vue.component('page-chat', {\n      template: '#page-chat',\n      data: function(){\n        return states;\n      },\n      \n      methods: {\n        onSend: function(text, clear){\n             console.log(\"clicked\") \n            var message = {\n                name: this.name,\n                text: text \n            }\n            axios.post('http://localhost:6000/message', message);\n          if( typeof clear == 'function' ) clear()\n          }\n        }\n      });\n      \n      // Init App\n    new Vue({\n      el: '#app',\n      data: function(){\n        return states;\n      },\n      methods: {\n        enterChat: function(){\n          if(this.name.trim().length === 0 ){\n            alert(\" Enter your name ...\")\n            return false;\n          }\n          this.msgs.length = 0;\n          this.$f7.mainView.router.load({url:'/chat/'});\n          \n        }\n      },\n      ...\n```\n\nHere we define a message object that takes the name of the user and text message to send. Then we use Axios to post the message object to the `/messages` endpoint we defined on the server.\n\n\n## Testing\n\nTo test out the application, ensure that both Phonegap server and the Node server is running. If that’s not the case, you can start the Phonegap server in project root with `phonegap serve` and the Node server with `node server`. \n\nBefore testing your application, I recommend you compare your codes with mine to ensure that you did everything right so as not to encounter any blockers. Compare your `index.html`, `server.js` and `app.js`. If everything looks alright, now go ahead and test the application.\n\nOpen two browser windows to `localhost:3000` and send messages:\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/8xB4rlOXW-A?rel=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen\u003e\u003c/iframe\u003e\n\n\n\n## Conclusion\n\nThe importance of realtime engagement of users on any platform cannot be overemphasized. As seen in this tutorial, we were able to implement a realtime chat system with Framework7 and Pusher. I hope you found this tutorial helpful.\n\nFeel free to explore the code for this tutorial on [GitHub](https://github.com/Kennypee/pusher-framework7-chat) and add more features as you deem fit.  ","metaTitle":"Build a chat app using Framework7","metaDescription":"Use Framework7, Vue.js and Node.js to build a simple chat app for Android and iOS. Framework7 is a free and open source mobile HTML framework to develop hybrid mobile apps or web apps with iOS \u0026 Android native look and feel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1DkONuEWcYoEGSisSO8ig","type":"Entry","createdAt":"2018-07-03T09:04:25.648Z","updatedAt":"2018-07-03T09:04:25.648Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live blog in Kotlin with push notifications","url":"live-blog-kotlin-push-notifications","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/kotlin-live-blog-with-push-notifications","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-07-01","description":"Build an Android app with Kotlin. The app connects to a Node.js server, and provides push notifications to alert users when a football blog is updated.","prerequisite":"You will need Android Studio 3+, Node and npm installed on your machine. A basic knowledge of Android development, and familiarity with Android Studio, is required.","content":"## Introduction\n\nWe are definitely in the era of realtime everything. We demand that all our tools and apps we use daily should be able to update in realtime. With a lot of realtime applications springing up, the football scene is not an exception. You see popular soccer reporting bodies adopting this strategy. \n\nIn this article, you will learn how to build a live soccer blog mobile app. Here is what your app will look like after this post:\n\n![kotlin-liveblog-beams-demo](//images.ctfassets.net/1es3ne0caaid/5wqd3IR1ccukOkkekgQmu6/960adda8c7e513af7c89f33fde0b0cfa/kotlin-liveblog-beams-demo.gif)\n\n## Prerequisites\n\nFor you to move on smoothly with this tutorial, it is expected that you have the following:\n\n\n- Android Studio (\u003e= v3.0) installed on your machine. Download [here](https://developer.android.com/studio/index.html).\n- A basic knowledge of Android development and an ability to use Android Studio.\n- A basic knowledge of Kotlin programming language. [See the official docs](https://kotlinlang.org/docs/reference/).\n- Node.js and NPM installed on your machine. Check [here](https://nodejs.org/en/) for the latest releases.\n\n\n## Building your live blog app\n\n### Creating your Android app\n\nTo get started, open Android Studio and create a new basic activity project. Android Studio provides a wizard for this to guide you. While creating your app, be sure to enable Kotlin support since that is what you will use. \n\n![kotlin-liveblog-beams-create-project](//images.ctfassets.net/1es3ne0caaid/4al226nIqIoMO0Ocq82Oii/c3c5a0f0eed39dee19c30a0ba1eae1aa/kotlin-liveblog-beams-create-project.png)\n\nSelect **Phone and Tablet** using **API 19: Android 4.4 (Kitkat)**. Select the **EmptyActivity** template and create the project. After this process is complete, you should have an activity named `MainActivity` and its layout `activity_main.xml`.\n\n### Setting up Pusher Channels\n\nLog in to your [Pusher dashboard](https://dashboard.pusher.com). If you don’t have an account, create one. Your dashboard should look like this:\n\n![kotlin-liveblog-beams-create-pusher-app](//images.ctfassets.net/1es3ne0caaid/7nPd10h1x62OK8eA6YSakQ/98ce36a55d015163f626f2169441c966/kotlin-liveblog-beams-create-pusher-app.png)\n\nCreate a new Channels app. You can easily do this by clicking the big **Create new Channels app** card at the bottom right. When you create a new app, you are provided with keys. Keep them safe as you will soon need them.\n\n### Getting your FCM key\n\nBefore you can start using Beams, you need an FCM key and a google-services file because Beams relies on Firebase. Go to your [Firebase console](https://console.firebase.google.com/u/0/) and create a new project.\n\nWhen you get to the console, click the **Add project** card to initialize the app creation wizard. Add the name of the project, for example, `soccer-blog`. Read and accept the terms of conditions. After this, you will be directed to the project overview screen. Choose the **Add Firebase to your Android app** option. The next screen will require the package name of your app.\n\nAn easy way to get the package name of your app is from your `AndroidManifest.xml` file. Check the `\u003cmanifest\u003e` tag and copy the value of the `package` attribute. Another place you can find this is your app-module `build.gradle` file. Look out for the `applicationId` value. When you enter the package name and click **Register app.** Next download your `google-services.json` file. After you have downloaded the file, you can skip the rest of the process. Add the downloaded file to the app folder of your app - `name-of-project/app`.\n\nNext, go to your Firebase project settings, under the Cloud messaging tab, copy your server key.\n\n### Setting up Pusher Beams\n\nNext, log in to the new [Pusher dashboard](https://dash.pusher.com/), in here we will create a Pusher Beams instance. You should sign up if you don’t have an account yet. Click on the **Beams** button on the sidebar then click **Create**, this will launch a pop up to **Create a new Beams instance**. Name it `soccer-blog`.\n\n![kotlin-liveblog-beams-new-beams](//images.ctfassets.net/1es3ne0caaid/jvRWHnL0VqCUkqMa26ImA/9de75f79e56ba99fa0897231dcd638f5/kotlin-liveblog-beams-new-beams.png)\n\nAs soon as you create the instance, you will be presented with a quickstart guide. Select the **ANDROID** quickstart\n\n![kotlin-liveblog-beams-quickstart](//images.ctfassets.net/1es3ne0caaid/5Ef7TiLPGMy4oAs2OQOMW4/676cc584e256fca1be76de3380d80016/kotlin-liveblog-beams-quickstart.png)\n\nThe next screen requires the FCM key you copied earlier. After you add the FCM key, you can exit the quickstart guide.\n\n### Adding dependencies\n\nYou will make use of Beams for notifications and the Channels libraries for live events. Add the following to the project’s `build-gradle` file:\n\n``` gradle\n    // File: ./blog-app/build.gradle\n    buildscript {\n        // [...]\n    \n        dependencies {\n            classpath 'com.google.gms:google-services:4.0.0'\n        }\n    }\n```\n\nAnd these other dependencies to the app-module `build.gradle` file:\n\n``` gradle\n    // File: ./blog-app/app/build.gradle\n    dependencies {\n        implementation 'com.android.support:recyclerview-v7:27.1.1'\n        implementation 'com.android.support:cardview-v7:27.1.1'\n        implementation 'com.pusher:pusher-java-client:1.5.0'\n        implementation 'com.google.firebase:firebase-messaging:17.0.0'\n        implementation 'com.pusher:push-notifications-android:0.10.0'\n    }\n    \n    // Add this line to the end of the file\n    apply plugin: 'com.google.gms.google-services'\n```\n\n### Writing your app\n\nYour app is expected to display a list of posts in realtime and this means you will need a list. Each list row will contain the time of action and current action happening. Since you can’t use the default Android layouts meant for lists as it doesn’t have what you require in the customized fashion you want it, we have to create a custom list row layout. This layout will determine how each item in the list will look like. \n\nCreate a new layout file, name it `list_row.xml` and paste this:\n\n``` xml\n    \u003c!-- File: /blog-app/app/src/main/res/layout/list_row.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.v7.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        app:cardCornerRadius=\"10dp\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"15dp\"\u003e\n    \n        \u003cLinearLayout\n            android:layout_width=\"match_parent\"\n            android:orientation=\"horizontal\"\n            android:padding=\"10dp\"\n            android:layout_height=\"match_parent\"\u003e\n    \n            \u003cTextView\n                android:textColor=\"@android:color/black\"\n                android:layout_gravity=\"center\"\n                android:id=\"@+id/time\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:textSize=\"18sp\"/\u003e\n    \n            \u003cTextView\n                android:id=\"@+id/currentActivity\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginStart=\"10dp\"\n                android:textSize=\"18sp\" /\u003e\n    \n        \u003c/LinearLayout\u003e\n    \u003c/android.support.v7.widget.CardView\u003e\n```\n\nA `CardView` is here used for easy customization of the borders. The `CardView` contains a horizontal linear layout, which in turn contains two `TextView`s. The first `TextView` will show the minute during the match when an event is happening and the second one will show the event happening.\n\nNext, you need a class to mock the kind of data you want to send to each row. Create a data class named `BlogPostModel` and paste this:\n\n``` kotlin\n    // File: /blog-app/app/src/main/java/com/example/soccerliveblog/BlogPostModel.kt\n    data class BlogPostModel(var time:String, var currentActivity:String)\n```\n\nNext, you will need a recycler view adapter to manage items in the recycler view. Create a class `BlogListAdapter` and set it up like this:\n\n``` kotlin\n    // File: /blog-app/app/src/main/java/com/example/soccerliveblog/BlogListAdapter.kt\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    \n    class BlogListAdapter : RecyclerView.Adapter\u003cBlogListAdapter.ViewHolder\u003e() {\n    \n        private var blogList = ArrayList\u003cBlogPostModel\u003e()\n    \n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n            return ViewHolder(LayoutInflater.from(parent.context)\n                    .inflate(R.layout.list_row, parent, false))\n        }\n    \n        override fun onBindViewHolder(holder: ViewHolder, position: Int) = holder.bind(blogList[position])\n    \n        override fun getItemCount(): Int = blogList.size\n    \n        fun addItem(blogItem:BlogPostModel){\n            blogList.add(0,blogItem)\n            notifyDataSetChanged()\n        }\n    \n        inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n    \n            private val time: TextView = itemView.findViewById(R.id.time)\n            private val currentActivity: TextView = itemView.findViewById(R.id.currentActivity)\n    \n            fun bind(currentValue: BlogPostModel) = with(itemView) {\n                time.text = currentValue.time\n                currentActivity.text = currentValue.currentActivity\n            }\n        }\n    }\n```\n\nThis class contains the usual `RecyclerView.Adapter` methods. There are two custom functions created here, `addItem` to add a new blog post item to the top of the list and `bind` inside the `ViewHolder` class to make binding easier.\n\nNext thing you would consider is how you will receive and display notifications in the app. You will create a service for that. Services are one of the key components in Android development. A service is a component that runs in the background to perform long-running operations without needing to interact with the user and it works even if application is destroyed. Create a new class named `NotificationsMessagingService` and paste this:\n\n``` kotlin\n    // File: /blog-app/app/src/main/java/com/example/soccerliveblog/NotificationsMessagingService.kt\n    import android.app.NotificationChannel\n    import android.app.NotificationManager\n    import android.app.PendingIntent\n    import android.content.Intent\n    import android.os.Build\n    import android.support.v4.app.NotificationCompat\n    import com.google.firebase.messaging.RemoteMessage\n    import com.pusher.pushnotifications.fcm.MessagingService\n    \n    class NotificationsMessagingService : MessagingService() {\n    \n        override fun onMessageReceived(remoteMessage: RemoteMessage) {\n            val notificationId = 10\n            val channelId  = \"soccer-channel\"\n            val notificationManager = applicationContext.getSystemService(NotificationManager::class.java)\n            \n            lateinit var channel:NotificationChannel\n    \n            if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.O) {\n                val name = getString(R.string.channel_name)\n                val description = getString(R.string.channel_description)\n                val importance = NotificationManager.IMPORTANCE_DEFAULT\n                channel = NotificationChannel(\"world-cup\", name, importance)\n                channel.description = description\n                notificationManager!!.createNotificationChannel(channel)\n            }\n    \n            val intent = Intent(this, MainActivity::class.java)\n            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\n            val pendingIntent = PendingIntent.getActivity(this, 0, intent, 0)\n    \n            val mBuilder = NotificationCompat.Builder(this, channelId)\n                    .setSmallIcon(R.mipmap.ic_launcher)\n                    .setContentTitle(remoteMessage.notification!!.title!!)\n                    .setContentText(remoteMessage.notification!!.body!!)\n                    .setContentIntent(pendingIntent)\n                    .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                    .setAutoCancel(true)\n    \n            notificationManager.notify(notificationId, mBuilder.build())\n    \n        }\n    }\n```\n\nThis class implements the `MessagingService` abstract class. This mandates the implementation of the method `onMessageReceived`, which is called when a message is pushed remotely. From the snippet, when a message is received, a notification is prepared and sent to the user. \n\nNote that if the user is on the app already, this notification will not come up. API versions 26 and above require creating notification channels and that is exactly what is done above. The title and body of the notification are inline with what is received remotely. An intent is added so that the `MainActivity` will be opened when the notification is selected.\n\nAdd these strings to your `strings.xml` file as they were referenced in the previous snippet:\n\n``` xml\n    \u003cstring name=\"channel_name\"\u003esoccer\u003c/string\u003e\n    \u003cstring name=\"channel_description\"\u003eListen to soccer notifications\u003c/string\u003e\n```\n\nNext, you add the service in your `AndroidManifest.xml` file under the `\u003capplication\u003e` tag like this:\n\n``` xml\n    \u003c!-- /blog-app/app/src/main/AndroidManifest.xml --\u003e\n    \u003capplication\n      \n      [...]\n      \n      \u003cservice android:name=\".NotificationsMessagingService\"\u003e\n          \u003cintent-filter android:priority=\"1\"\u003e\n              \u003caction android:name=\"com.google.firebase.MESSAGING_EVENT\" /\u003e\n          \u003c/intent-filter\u003e\n      \u003c/service\u003e\n      \n      [...]\n      \n    \u003c/application\u003e\n```\n\nWith this, you are ready to receive notifications remotely to your app. Next replace the contents of the `activity_main.xml` file with the following:\n\n``` xml\n    \u003c!-- File: /blog-app/app/src/main/res/layout/activity_main.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\"\u003e\n    \n        \u003candroid.support.v7.widget.RecyclerView\n            android:id=\"@+id/recyclerViewBlogPosts\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nNow, go the `MainActivity` class and make sure you have these imports in the class:\n\n``` kotlin\n    // File: /blog-app/app/src/main/java/com/example/soccerliveblog/MainActivity.kt\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import com.pusher.pushnotifications.PushNotifications\n    import kotlinx.android.synthetic.main.activity_main.*\n    import org.json.JSONObject\n```\n\nThe rest of the class should then look like this:\n\n``` kotlin\n    class MainActivity : AppCompatActivity() {\n    \n        private lateinit var pusher: Pusher\n        private val blogListAdapter = BlogListAdapter()\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n            PushNotifications.start(applicationContext,\n                    PUSHER_BEAMS_INSTANCEID)\n            PushNotifications.subscribe(\"world-cup\")\n            with(recyclerViewBlogPosts){\n                layoutManager = LinearLayoutManager(this@MainActivity)\n                adapter = blogListAdapter\n            }\n            setupPusher()\n        }\n    }\n```\n\n\u003e You are expected to replace the `PUSHER_BEAMS_INSTANCEID` with your instance ID found on your Pusher Beams dashboard.\n\nIn the above snippet, the `pusher` and `blogListAdapter` instance are first declared. In the `onCreate` method, push notifications is initialized and you are particularly listening to the world-cup stream for updates. \n\nNext, you have initialized the recycler view with a linear layout manager and an adapter. Finally, a `setupPusher` function is called. Add the function below to the class:\n\n``` kotlin\n    private fun setupPusher() {\n        val options = PusherOptions()\n        options.setCluster(PUSHER_CLUSTER)\n        pusher = Pusher(PUSHER_API_KEY, options)\n    \n        val channel = pusher.subscribe(\"soccer\")\n    \n        channel.bind(\"world-cup\") { channelName, eventName, data -\u003e\n            val jsonObject = JSONObject(data)\n            val time = jsonObject.getString(\"currentTime\")\n            val currentActivity = jsonObject.getString(\"currentPost\")\n            val model = BlogPostModel(time,currentActivity)\n            runOnUiThread {\n                blogListAdapter.addItem(model)\n            }\n        }\n        \n        pusher.connect()\n    }\n```\n\n\u003e Replace the `PUSHER_CLUSTER` and `PUSHER_API_KEY` with their equivalent values from your dashboard\n\nIn the above snippet, there is a listener to the soccer channel and the world-cup event. When a post is received, it is bound to a new model instance before it being added to the adapter.\n\nFinally, give the activity a `singleInstance` launch mode so that when you open the `MainActivity` from the notification, it won’t restart the activity. To do this, open the `AndroidManifest.xml`  file and add the `android:launchMode` attribute to the `activity` tag and set it to `singleInstance`:\n\n``` xml\n    \u003cactivity android:name=\".MainActivity\"\n        android:launchMode=\"singleInstance\"\n        ...\n    \u003c/activity\u003e\n```\n\n## Building the backend\n\nLet’s build a simple Node.js server to power our app. Create a new folder say `beams-backend`. Open the folder. Create a new `config.js` file like this:\n\n``` javascript\n    module.exports = {\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        secretKey: 'PUSHER_BEAMS_SECRET',\n        instanceId: 'PUSHER_BEAMS_INSTANCEID'\n    };\n```\n\n\u003e Replace the first four items with the keys on you Pusher Channel dashboard while the last two keys will be replaced with the keys on your Pusher Beams dashboard\n\nThis file holds the keys you will access. It is good practice to keep them all in one file. Next up, create a another file named `index.js` and paste this:\n\n``` javascript\n    // Load the required libraries\n    let Pusher = require('pusher');\n    let express = require('express');\n    let bodyParser = require('body-parser');\n    const PushNotifications = require('@pusher/push-notifications-server');\n    \n    // initialize express and pusher and pusher beams\n    let app = express();\n    let pusher = new Pusher(require('./config.js'));\n    let pushNotifications = new PushNotifications(require('./config.js'))\n    \n    // Middlewares\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    app.get('/posts', (req, res) =\u003e {\n    \n      var arrayEvents = [\n          \"Russia (4-2-3-1): Igor Akinfeev; Mario Fernandes, Ilya Kutepov, Sergey Ignashevich, Yury Zhirkov; Yuri Gazinskiy, Roman Zobnin; Aleksandr Samedov, Alan Dzagoev, Aleksandr Golovin; Fedor Smolov.\",\n        \"Finally, the festival of football is here. We've got 64 games, 32 teams...but there can be only one winner. And the action starts today!!\",\n          \"Hello and welcome to live text commentary of the Group A match between Russia and Saudi Arabia at the 2018 World Cup in Russia. The scene is set for the tournament opener!\"\n      ];\n    \n      var arrayTime = [\"15'\", \"10'\", \"5'\"];\n    \n      let sendPushNotification = () =\u003e {\n        var currentPost = arrayEvents.pop()\n        var currentTime = arrayTime.pop()\n      \n        pushNotifications.publish(\n          ['world-cup'],{\n          fcm: {\n            notification: {\n              title: 'New post',\n              body: currentPost\n            }\n          }\n        }).then((publishResponse) =\u003e {\n          console.log('Just published:', publishResponse.publishId);\n        });\n      \n        pusher.trigger('soccer', 'world-cup', {currentTime, currentPost});\n      }\n      \n      sendPushNotification()\n    \n      let sendToPusher = setInterval(() =\u003e {\n        sendPushNotification()\n      \n        if (arrayEvents.length == 0) {\n          clearInterval(sendToPusher)\n        }\n      }, 5000);\n    \n      res.json({success: 200})\n    });\n    \n    // index\n    app.get('/', (req, res) =\u003e res.json(\"It works!\"));\n    \n    // serve app\n    app.listen(4000, _ =\u003e console.log('App listening on port 4000!'));\n```\n\n\u003e These commentaries were gotten manually from Goal.com’s commentary blog for the opening match at the FIFA World Cup 2018 (Russia vs Saudi Arabia)\n  \n\nIn this snippet, there is one endpoint, the `/posts` endpoint, which sends data to the Pusher channel and a notification channel every twenty seconds. The data is gotten from an array initialized locally. The app is then served on port `4000`. In the `beams-backend` directory, run the following commands:\n\n```\n    npm install pusher\n    npm install body-parser\n    npm install @pusher/push-notifications-server express --save\n```\n\nThis installs the three dependencies you need for your app. Now, your server is ready, run this command in the `beams-backend` directory:\n\n```\n    node index.js\n```\n\nNext, run the application from Android Studio, then open the URL `http://localhost:4000/posts` in your browser and you should start receiving live updates in your app.\n\n## Conclusion\n\nIn this post, you have learned how to build a blog app using Kotlin, Pusher Beams, and Pusher Channels. Feel free to fall back to the [GitHub repository](https://github.com/neoighodaro/kotlin-live-blog-with-push-notifications) if you get stuck at any point. I can’t wait to see what you will build with your knowledge of a realtime service like Pusher.","metaTitle":"Build a live blog in Kotlin with push notifications","metaDescription":"Use push notifications to create a live blog app. Create an Android app using Kotlin, with a Node.js server."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1Uu3pPdHlSYmsksQ6WSowE","type":"Entry","createdAt":"2018-07-02T13:19:07.613Z","updatedAt":"2018-07-02T13:19:07.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a Kotlin ride sharing app with push notifications","url":"kotlin-ride-sharing-push-notifications","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/pusher-ridesharing","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-06-29","description":"Build a full ridesharing platform featuring realtime updates and push notifications. Use Kotlin for both the apps, and the backed, along with Spring Boot.","prerequisite":"You need suitable IDEs, including Android Studio. The tutorial assumes you have some experience with Android development.","content":"## Introduction\n\nMany user facing applications can be greatly improved by introducing realtime notifications for the user. This is especially important when the user is actively waiting for a service to arrive. \n\nIn this article we are going to build a ride sharing app. There are two parts to this app, both of which will take advantage of the Pusher Beams functionality. \n\nOn the Driver side, we will have an Android application that receives a notification when a new job comes up, when the job is no longer available and when the job has finished with the rating from the rider.\n\nOn the Rider side, we will also have an Android application that allows the user to request a car from their current location to a target location, gives regular notifications when the car is en-route to pick up and gives the ability to rate the driver when the ride is finished.\n\n![kotlin-ridesharing-demo](//images.ctfassets.net/1es3ne0caaid/6RBtbLD3JCimAcaw48UMqq/2da3756854a334305b1c4bc8786e8d03/kotlin-ridesharing-demo.gif)\n\n## Prerequisites\n\nIn order to follow along, you will need some experience with the Kotlin programming language, which we are going to use for both the backend and frontend of our application. \n\nYou will also need appropriate IDEs. We suggest [IntelliJ IDEA](https://www.jetbrains.com/idea/) and [Android Studio](https://developer.android.com/studio/index.html). Finally, you will need a free [Pusher Account](https://dash.pusher.com/authenticate/register?ref=pn-landing-page). Sign up now if you haven’t already done so.\n\nIt is also assumed that you know how to use the IDEs that you are working with, including interacting with either an emulated or physical mobile device for running the applications.\n\n## Setting up your Pusher account\n\nIn order to use the Beams API and SDKs from Pusher, you need to create a new Beams instance in the [Pusher Beta Dashboard](https://dash.pusher.com/authenticate/register?ref=pn-social-network-android).\n\nNext, on your **Overview** for your Beams instance, click **Open Quickstart** to add your Firebase Cloud Messaging (FCM) Server Key to the Beams Instance. \n\nAfter saving your FCM key, you can finish the Quickstart wizard by yourself to send your first push notification, or just continue as we’ll cover this below.\n\nIt’s important to make sure that you download and keep the `google-services.json` file from the Firebase Console as we are going to need this later on. \n\nOnce you have created your Beams instance, you will also need to note down your **Instance Id** and **Secret Key** from the Pusher Dashboard, found under the **CREDENTIALS** section of your Instance settings.\n\n## Overall architecture\n\nOur overall application will have two Android applications, and a backend application that orchestrates between them. The Rider application will send a message to the backend in order to request a ride. This will contain the start location. The backend will then broadcast out to all of the drivers that a new job is available. Once one of the drivers accepts the job, the rider is then notified of this fact and is kept informed of the car’s location until it turns up. At the same time, the other drivers are all notified that the job is no longer available.\n\nAt the other end of the journey, the driver will indicate that the job is finished. At this point, they will be able to collect a new job if they wish.\n\n## Backend application\n\nWe are going to build our backend application using Spring Boot and the Kotlin programming language, since this gives us a very simple way to get going whilst still working in the same language as the Android applications will be built.\n\nHead over to https://start.spring.io/ to create our project structure. We need to specify that we are building a **Gradle** project with **Kotlin** and Spring Boot **2.0.1** (or newer if available at the time of reading), and we need to include the “Web” component:\n\n![kotling-ridesharing-spring-initializer](//images.ctfassets.net/1es3ne0caaid/6AKZhv4Ns482MAi0WwGQa2/8cea4b3bac5645ccf5fde687f215540a/kotling-ridesharing-spring-initializer.png)\n\nThe **Generate Project** button will give you a zip file containing our application structure. Unpack this somewhere. At any time, you can execute `./gradlew bootRun` to build and start your backend server running.\n\nFirstly though, we need to add some dependencies. Open up the `build.gradle` file and add the following to the `dependencies` section:\n\n```\n    compile 'com.pusher:push-notifications-server-java:0.9.0'\n    runtime 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.2'\n```\n\nThe first of these is the Pusher library needed for triggering push notifications. The second is the Jackson module needed for serializing and deserializing Kotlin classes into JSON.\n\nNow, build the project. This will ensure that all of the dependencies are downloaded and made available and that everything compiles and builds correctly:\n\n```\n    $ ./gradlew build\n    Starting a Gradle Daemon (subsequent builds will be faster)\n    \n    \u003e Task :test\n    2018-04-27 07:34:27.548  INFO 43169 --- [       Thread-5] o.s.w.c.s.GenericWebApplicationContext   :   \n    Closing org.springframework.web.context.support.GenericWebApplicationContext@c1cf60f: startup date [Fri \n    Apr   27 07:34:25 BST 2018]; root of context hierarchy\n    \n    \n    BUILD SUCCESSFUL in 17s\n    5 actionable tasks: 5 executed\n```\n\n### Broadcasting events\n\nThe sole point of the backend application is to broadcast push notifications via the Pusher Beams service in response to incoming HTTP calls.\n\nWe have a few different endpoints that we want to handle, each of which will broadcast their own particular events:\n\n\n- POST /request-ride\n- POST /accept-job/{job}\n- POST /update-location/{job}\n- POST /pickup/{job}\n- POST /dropoff/{job}\n\nOut of these, the first one is used by the riders application whilst the others are all used by the drivers application. There is also a strict workflow between these. The very first one will generate a new job, with a unique ID that will be passed between all of the other requests and which will be used as the intent of the push notification to ensure that only the correct rider gets the messages.\n\nThe workflow is going to be:\n\n\n- Rider makes a call to `/request-ride` supplying their current location, and gets a Job ID back.\n- All currently active drivers are sent a push notification informing them of the job.\n- Driver makes a call to `/accept-job/{job}`, supplying their current location. This causes the rider to be notified that a driver has accepted the job, and where the driver is, and also causes all the other drivers to remove the job from their list.\n- Driver makes frequent calls to `/update-location/{job}` with their current location. This causes the rider to be notified of where the driver is now.\n- Driver makes a call to `/pickup/{job}` with their current location. This informs the rider that their ride is waiting for them.\n- Driver makes frequent calls to `/update-location/{job}` with their current location. This causes the rider to be notified of where the driver is now.\n- Driver makes a call to `/dropoff/{job}` with their current location. This informs the rider that their ride is over.\n\nThe first thing we need is some way to represent a location in the world. All of our endpoints will use this as their payload. Create a new class called `Location`:\n\n``` kotlin\n    data class Location(\n            val latitude: Double,\n            val longitude: Double\n    )\n```\n\nWe also need an enumeration of the actions that can be performed. Create a new class called `Actions`:\n\n``` kotlin\n    enum class Actions {\n        NEW_JOB,\n        ACCEPT_JOB,\n        ACCEPTED_JOB,\n        UPDATE_LOCATION,\n        PICKUP,\n        DROPOFF\n    }\n```\n\nNow we can create our mechanism to send out Pusher Beams notifications to the relevant clients. There are two different kinda of notification to send - one with a location and one with a rating. Create a new class called `JobNotifier`:\n\n``` kotlin\n    @Component\n    class JobNotifier(\n            @Value(\"\\${pusher.instanceId}\") private val instanceId: String,\n            @Value(\"\\${pusher.secretKey}\") private val secretKey: String\n    ) {\n        private val pusher = PushNotifications(instanceId, secretKey)\n    \n        fun notify(job: String, action: Actions, location: Location) {\n            val interests = when (action) {\n                Actions.NEW_JOB -\u003e listOf(\"driver_broadcast\")\n                Actions.ACCEPTED_JOB -\u003e listOf(\"driver_broadcast\")\n                else -\u003e listOf(\"rider_$job\")\n            }\n    \n            pusher.publish(\n                    interests,\n                    mapOf(\n                            \"fcm\" to mapOf(\n                                    \"data\" to mapOf(\n                                            \"action\" to action.name,\n                                            \"job\" to job,\n                                            \"latitude\" to location.latitude.toString(),\n                                            \"longitude\" to location.longitude.toString()\n                                    )\n                            )\n                    )\n            )\n        }\n    }\n```\n\n\u003e **Note:** If the data sent in a notification contains anything that is not a string then the Android client will silently fail to receive the notification.\n\nThis will send notifications with one of two interest sets. `driver_broadcast` will be received by all drivers that are not currently on a job, and `driver_$job` will be received by the driver currently on that job.\n\nYou will also need to add to the `application.properties` file the credentials needed to access the Pusher Beams API:\n\n```\n    pusher.instanceId=\u003cPUSHER_INSTANCE_ID\u003e\n    pusher.secretKey=\u003cPUSHER_SECRET_KEY\u003e\n```\n\nFinally we need a controller to actually handle the incoming HTTP Requests and trigger the notifications. Create a new class called `RideController`:\n\n``` kotlin\n    @RestController\n    class RideController(\n            private val jobNotifier: JobNotifier\n    ) {\n        @RequestMapping(value = [\"/request-ride\"], method = [RequestMethod.POST])\n        @ResponseStatus(HttpStatus.CREATED)\n        fun requestRide(@RequestBody location: Location): String {\n            val job = UUID.randomUUID().toString()\n            jobNotifier.notify(job, Actions.NEW_JOB, location)\n            return job\n        }\n    \n        @RequestMapping(value = [\"/accept-job/{job}\"], method = [RequestMethod.POST])\n        @ResponseStatus(HttpStatus.NO_CONTENT)\n        fun acceptJob(@PathVariable(\"job\") job: String, @RequestBody location: Location) {\n            jobNotifier.notify(job, Actions.ACCEPT_JOB, location)\n            jobNotifier.notify(job, Actions.ACCEPTED_JOB, location)\n        }\n    \n        @RequestMapping(value = [\"/update-location/{job}\"], method = [RequestMethod.POST])\n        @ResponseStatus(HttpStatus.NO_CONTENT)\n        fun updateLocation(@PathVariable(\"job\") job: String, @RequestBody location: Location) {\n            jobNotifier.notify(job, Actions.UPDATE_LOCATION, location)\n        }\n    \n        @RequestMapping(value = [\"/pickup/{job}\"], method = [RequestMethod.POST])\n        @ResponseStatus(HttpStatus.NO_CONTENT)\n        fun pickup(@PathVariable(\"job\") job: String, @RequestBody location: Location) {\n            jobNotifier.notify(job, Actions.PICKUP, location)\n        }\n    \n        @RequestMapping(value = [\"/dropoff/{job}\"], method = [RequestMethod.POST])\n        @ResponseStatus(HttpStatus.NO_CONTENT)\n        fun dropoff(@PathVariable(\"job\") job: String, @RequestBody location: Location) {\n            jobNotifier.notify(job, Actions.DROPOFF, location)\n        }\n    }\n```\n\nEvery method simply triggers one notification and returns. The handler for `/request-ride` will generate a new UUID as the job ID and will return it to the rider - the drivers will get the job ID in the appropriate push notification if they receive it.\n\n\n## Building the Riders application\n\nThe Rider Android application will also be built in Kotlin, using Android Studio. To start, open up Android Studio and create a new project, entering some appropriate details and ensuring that you select the **Include Kotlin support** option. Note that the **Package name** must match that specified when you set up the FCM Server Key earlier.\n\n![kotlin-ridesharing-create-android-1](//images.ctfassets.net/1es3ne0caaid/FFEGiryVUISEmkKyOw42m/a6bdd550b0fb08242777615db2fca334/kotlin-ridesharing-create-android-1.png)\n\nThen on the next screen, ensure that you select support for **Phone and Tablet** using at least API 23:\n\n![kotlin-ridesharing-create-android-2](//images.ctfassets.net/1es3ne0caaid/24ia023ilW2Y6mOWWq2UOi/dafa778be6315f117728af82a859773c/kotlin-ridesharing-create-android-2.png)\n\nEnsure that an **Google Maps Activity** is selected:\n\n![kotlin-ridesharing-create-android-3](//images.ctfassets.net/1es3ne0caaid/5SFxdcyCZOQUGQAwqsq2CO/bf06d5cbc06603b59ff1ec90265b893c/kotlin-ridesharing-create-android-3.png)\n\nAnd set the **Activity Name** to “MainActivity” and **Layout Name** to “activity_main”:\n\n![kotlin-ridesharing-create-android-4](//images.ctfassets.net/1es3ne0caaid/75OUKAuKmAWAGA0Os0syKw/ad6ee82a18d0230b55e5b1466c632c6d/kotlin-ridesharing-create-android-4.png)\n\nOnce the project opens, you will be presented with the file `google_maps_api.xml` with instructions on how to get a Google Maps API key. Follow these instructions to get a key to use in the application.\n\nNext we need to add some dependencies to our project to support Pusher. Add the following to the project level `build.gradle`, in the existing `dependencies` section:\n\n``` gradle\n    classpath 'com.google.gms:google-services:3.2.1'\n```\n\nThen add the following to the `dependencies` section of the app level `build.gradle`:\n\n``` gradle\n    implementation 'com.google.firebase:firebase-messaging:15.0.0'\n    implementation 'com.pusher:push-notifications-android:0.10.0'\n    \n    compile 'com.loopj.android:android-async-http:1.4.9'\n    compile 'com.google.code.gson:gson:2.2.4'\n```\n\nAnd this to bottom of the app level `build.gradle`:\n\n``` gradle\n    apply plugin: 'com.google.gms.google-services'\n```\n\nNext, copy the `google-services.json` file we downloaded earlier into the `app` directory under your project. We are now ready to actually develop our specific application using these dependencies.\n\nFinally, we need to add some permissions to our application. Open up the `AndroidManifest.xml` file and add the following immediately before the `\u003capplication\u003e` tag:\n\n``` xml\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\nAt this point we can run the application and it will display a map.\n\n\n\u003e **Note:** If you are running this on an emulator then you need to ensure that the emulator is correctly capable of working with the Google Maps API. The “Nexus 5X” with “API 28” works correctly.\n\n\n\u003e **Note:** if you get a grey screen instead of a map it likely means that the Google Maps API key is not valid or not present. Follow the instructions in `google_maps_api.xml` to set this up.\n\n### Displaying the current location\n\nThe first thing we want to be able to do is display our current location on the map. This involves requesting permission from the user to determine their location - which we need to know where our ride should pick us up - and then updating the map to display this. All of this is added to the existing MainActivity.\n\nFirstly, update the `onMapReady` function as follows:\n\n``` kotlin\n    override fun onMapReady(googleMap: GoogleMap) {\n        mMap = googleMap\n        mMap.isMyLocationEnabled = true\n        mMap.isTrafficEnabled = true\n    }\n```\n\nThis simply updates the map to show the **My Location** and **Traffic** layers. \n\nNext, add a new method called `setupMap` as follows:\n\n``` kotlin\n    private fun setupMap() {\n        val mapFragment = supportFragmentManager\n                .findFragmentById(R.id.map) as SupportMapFragment\n        mapFragment.getMapAsync(this)\n    }\n```\n\nThis is the code that is currently in `onCreate`, but which we will be removing soon.\n\nNext, add a new top-level field to the class called `REQUEST_LOCATION_PERMISSIONS`:\n\n``` kotlin\n    private val REQUEST_LOCATION_PERMISSIONS = 1001\n```\n\nThis is used so that we know in the callback from requesting permissions which call it was - so that an appropriate response can happen.\n\nNext, another new method called `onRequestPermissionsResult`:\n\n``` kotlin\n    override fun onRequestPermissionsResult(requestCode: Int,\n                                            permissions: Array\u003cout String\u003e,\n                                            grantResults: IntArray) {\n        if (requestCode == REQUEST_LOCATION_PERMISSIONS) {\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                setupMap()\n            } else {\n                Toast.makeText(this, \"Location Permission Denied\", Toast.LENGTH_SHORT)\n                        .show();\n            }\n        } else {\n            super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n        }\n    }\n```\n\nThis is a standard method defined in the `FragmentActivity` base class that we are extending for our specific case. If the user grants us permission then we move on to our `setupMap` method we’ve just defined, and if they deny us then we show a message and stop there.\n\nNext, a new method called `checkLocationPermissions` to actually check if we’ve got permission for accessing the users location already, and if not to request them:\n\n``` kotlin\n    private fun checkLocationPermissions() {\n        if (checkSelfPermission(android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n            requestPermissions(arrayOf(android.Manifest.permission.ACCESS_FINE_LOCATION), REQUEST_LOCATION_PERMISSIONS)\n            return\n        }\n        setupMap()\n    }\n```\n\nFinally we update the `onCreate` method as follows:\n\n``` kotlin\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n    \n        checkLocationPermissions()\n    }\n```\n\nThis starts the whole chain off. When the main activity is first created, we check if we have permission to access the users location. If not we request permission. Then, once permission is granted, we use this fact to allow the user to see where they are on the map.\n\n### Requesting a ride\n\nOnce we know where the user is, we can allow them to request a ride. This will be done by adding a button to the map that they can click on in order to request their ride, which will then send their current location to our backend.\n\nFirstly, lets add our button to the map. Find and update `activity_main.xml` as follows:\n\n``` xml\n    \u003cfragment xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:map=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:id=\"@+id/map\"\n        android:name=\"com.google.android.gms.maps.SupportMapFragment\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\"com.pusher.pushnotify.ride.MainActivity\"\u003e\n    \n        \u003cButton\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"right|bottom\"\n            android:id=\"@+id/request_ride\"\n            android:text=\"Request Ride\"\n            android:padding=\"10dp\"\n            android:layout_marginTop=\"20dp\"\n            android:paddingRight=\"10dp\"\n            android:enabled=\"false\"\n            android:onClick=\"requestRide\" /\u003e\n    \n    \u003c/fragment\u003e\n```\n\n\u003e **Note:** the value for “tools:context” should match the class name of your main activity class.\n\nMost of this was already present. We are adding the `Button` element inside the `fragment` that was already there.\n\nNext we want to only have this button enabled when we have the location of the user. For this we are going to rely on the Map component telling us when it has got the users location. Update the `onMapReady` method of `MainActivity`  and add this in to the bottom:\n\n``` kotlin\n    mMap.setOnMyLocationChangeListener {\n        findViewById\u003cButton\u003e(R.id.request_ride).isEnabled = true\n    }\n```\n\nWe’re also going to create a new helper method to display a Toast message to the user:\n\n``` kotlin\n    private fun displayMessage(message: String) {\n        Toast.makeText(\n                this,\n                message,\n                Toast.LENGTH_SHORT).show();\n    \n    }\n```\n\nFinally, we will add the `requestRide` method that is triggered when the button is clicked. For now this is as follows:\n\n``` kotlin\n    fun requestRide(view: View) {\n        val location = mMap.myLocation\n    \n        val request = JSONObject(mapOf(\n                \"latitude\" to location.latitude,\n                \"longitude\" to location.longitude\n        ))\n        mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(LatLng(location.latitude, location.longitude), 15.0f))\n    \n        val client = AsyncHttpClient()\n        client.post(applicationContext, \"http://10.0.2.2:8080/request-ride\", StringEntity(request.toString()),\n                \"application/json\", object : TextHttpResponseHandler() {\n    \n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String) {\n                runOnUiThread {\n                    displayMessage(\"Your ride has been requested\")\n                    findViewById\u003cButton\u003e(R.id.request_ride).visibility = View.INVISIBLE\n                }\n            }\n    \n            override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String, throwable: Throwable) {\n                runOnUiThread {\n                    displayMessage(\"An error occurred requesting your ride\")\n                }\n            }\n        });\n    }\n```\n\n\u003e **Note:** The import for `Header` may be ambiguous. Ensure that you select `cz.msebera.android.httpclient.Header`\n\n\n\u003e **Note:** The IP Address “10.0.2.2” is what the Android emulator sees the host machine as. You will want to change this to the real address of the server if you are running this for real.\n\nThis builds our JSON message and sends it to the */request-ride* endpoint that we built earlier. That in turn will broadcast out to all potential drivers that there is a new job. We then display a message to the rider that their ride has been requested, or else an error if we failed to request the ride. We also hide the **Request Ride** button when we have successfully requested a ride, so that we can’t request more than one at a time.\n\n### Receiving push notifications\n\nThe other major feature we need in the riders app is to be able to receive updates from the driver. This includes when a driver has accepted the job, where he is, and when he is ready to pick up or drop off the rider.\n\nAll of these notifications work in very similar manner, containing the location of the driver and the action to perform. We want to always update our map to show the position of the driver, and in many cases to display a message to the rider informing them as to what is going on.\n\nFirstly, we need to register with the Pusher Beams service to be able to receive push notifications. Add the following to the `onCreate` method of `MainActivity`:\n\n``` kotlin\n    PushNotifications.start(getApplicationContext(), \"YOUR_INSTANCE_ID\");\n```\n\nWhere “YOUR_INSTANCE_ID” is replaced with the value received from the Pusher Beams registration process, and must match the value used in the backend application.\n\nNext we want to actually register to receive notifications from the backend. This is done by updating the `o``nSuccess` method inside the `requestRide` method of `MainActivity` as follows:\n\n``` kotlin\n    override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String) {\n        PushNotifications.subscribe(\"rider_$responseString\")\n        runOnUiThread {\n            displayMessage(\"Your ride has been requested\")\n            findViewById\u003cButton\u003e(R.id.request_ride).visibility = INVISIBLE\n        }\n    }\n```\n\nThis builds an interest string that contains the job ID that we were provided, meaning that we will now receive all rider-focused notifications for this job.\n\nThe only thing remaining is to actually handle the notifications. This involves displaying where on the map the driver currently is, and potentially displaying an update message to the rider.\n\nFirstly, add a new field to the `MainAction` class to store the marker for the drivers location:\n\n``` kotlin\n    private var driverMarker: Marker? = null\n```\n\nThis defaults to `null` until we actually first get a location.\n\nNext, add a new method called update`DriverLocation`  in the `MainActivity` class to set the location of the driver, creating the marker if needed:\n\n``` kotlin\n    private fun updateDriverLocation(latitude: Double, longitude: Double) {\n        val location = LatLng(latitude, longitude)\n    \n        if (driverMarker == null) {\n            driverMarker = mMap.addMarker(MarkerOptions()\n                    .title(\"Driver Location\")\n                    .position(location)\n            )\n        } else {\n            driverMarker?.position = location\n        }\n    \n        mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(location, 17.0f))\n    }\n```\n\nFinally, add the necessary handler to receive the push notifications and react accordingly. For this, create a new method called `onResume` in the `MainActivity` class as follows:\n\n``` kotlin\n    override fun onResume() {\n        super.onResume()\n    \n        PushNotifications.setOnMessageReceivedListenerForVisibleActivity(this, object : PushNotificationReceivedListener {\n            override fun onMessageReceived(remoteMessage: RemoteMessage) {\n                val action = remoteMessage.data[\"action\"]\n    \n                runOnUiThread {\n                    updateDriverLocation(remoteMessage.data[\"latitude\"]!!.toDouble(), remoteMessage.data[\"longitude\"]!!.toDouble())\n    \n                    if (action == \"ACCEPT_JOB\") {\n                        displayMessage(\"Your ride request has been accepted. Your driver is on their way.\")\n                    } else if (action == \"PICKUP\") {\n                        displayMessage(\"Your driver has arrived and is waiting for you.\")\n                    } else if (action == \"DROPOFF\") {\n                        displayMessage(\"You are at your destination\")\n                        findViewById\u003cButton\u003e(R.id.request_ride).visibility = View.VISIBLE\n                    }\n                }\n            }\n        })\n    }\n```\n\nThis will call our new method to update the location of the driver on the map, and for selected actions will display a message informing the rider of what is happening. We also re-display the **Request Ride** button when the drop-off action occurs, so that the rider can use the app again if needed.\n\nThis completes the riders side of the application, allowing them to do everything they need to for the ride:\n\n![kotlin-ridesharing-rider-app-demo](//images.ctfassets.net/1es3ne0caaid/SOL4YBv2ACiYYsiIcqmmq/18f4c3ab3ed6ba4a38e7fbb2adbce3ce/kotlin-ridesharing-rider-app-demo.gif)\n\n## Building the drivers application\n\nThe driver Android application will also be built in Kotlin, using Android Studio. To start, open up Android Studio and create a new project, entering some appropriate details and ensuring that you select the **Include Kotlin support** option. Note that the **Package name** must match that specified when you set up the FCM Server Key earlier.\n\n\n\u003e **Note:** these instructions are almost exactly the same as for the riders app, but are repeated here for ease of following along.\n\n![kotlin-ridesharing-create-android-5](//images.ctfassets.net/1es3ne0caaid/4ENZLhc0gEEk4o6oMiOAu4/3889f9e1f12b21c658e43ba1c4ca23b9/kotlin-ridesharing-create-android-5.png)\n\nThen on the next screen, ensure that you select support for **Phone and Tablet** using at least API 23:\n\n![kotlin-ridesharing-create-android-6](//images.ctfassets.net/1es3ne0caaid/6qL0f20xtCmmeWgGoWyMuU/e312d878f160a17ebc9a652fd518a23d/kotlin-ridesharing-create-android-6.png)\n\nEnsure that an **Google Maps Activity** is selected:\n\n![kotlin-ridesharing-create-android-7](//images.ctfassets.net/1es3ne0caaid/6f2xDO0sTu6AOoguysgYG6/0df9b3e7bf31f00431f60e70f353db1f/kotlin-ridesharing-create-android-7.png)\n\nAnd set the **Activity Name** to “MainActivity” and **Layout Name** to “activity_main”:\n\n![kotlin-ridesharing-create-android-8](//images.ctfassets.net/1es3ne0caaid/5S47nZ7IB2MgMgKOGISOSG/d161c98f9106daa326bff0d8f56e7815/kotlin-ridesharing-create-android-8.png)\n\nOnce the project opens, you will be presented with the file `google_maps_api.xml` with instructions on how to get a Google Maps API key. Follow these instructions to get a key to use in the application. This can not be the same key as for the rider application since they are tied to the actual Android application that is using it. It should belong to the same Google project however.\n\nNext we need to add some dependencies to our project to support Pusher. Add the following to the project level `build.gradle`, in the existing `dependencies` section:\n\n``` gradle\n    classpath 'com.google.gms:google-services:3.2.1'\n```\n\nThen add the following to the `dependencies` section of the app level `build.gradle`:\n\n``` gradle\n    implementation 'com.google.firebase:firebase-messaging:15.0.0'\n    implementation 'com.pusher:push-notifications-android:0.10.0'\n    \n    compile 'com.loopj.android:android-async-http:1.4.9'\n    compile 'com.google.code.gson:gson:2.2.4'\n```\n\nAnd this to bottom of the app level `build.gradle`:\n\n``` gradle\n    apply plugin: 'com.google.gms.google-services'\n```\n\nNext, copy the `google-services.json` file we downloaded earlier into the `app` directory under your project. We are now ready to actually develop our specific application using these dependencies.\n\nFinally, we need to add some permissions to our application. Open up the `AndroidManifest.xml` file and add the following immediately before the `\u003capplication\u003e` tag:\n\n``` xml\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\nAt this point we can run the application and it will display a map.\n\n\n\u003e **Note:** If you are running this on an emulator then you need to ensure that the emulator is correctly capable of working with the Google Maps API. The “Nexus 5X” with “API 28” works correctly.\n\n\n\u003e **Note:** if you get a grey screen instead of a map it likely means that the Google Maps API key is not valid or not present. Follow the instructions in `google_maps_api.xml` to set this up.\n\n### Displaying the current location\n\nThe first thing we want to be able to do is display our current location on the map. This involves requesting permission from the user to determine their location - which we need to know where our ride should pick us up - and then updating the map to display this. All of this is added to the existing MainActivity.\n\n\n\u003e **Note:** this is all exactly the same as for the riders application, but is repeated here for ease of following along.\n\nFirstly, update the `onMapReady` function as follows:\n\n``` kotlin\n    override fun onMapReady(googleMap: GoogleMap) {\n        mMap = googleMap\n        mMap.isMyLocationEnabled = true\n        mMap.isTrafficEnabled = true\n    }\n```\n\nThis simply updates the map to show the **My Location** and **Traffic** layers. \n\nNext, add a new method called `setupMap` as follows:\n\n``` kotlin\n    private fun setupMap() {\n        val mapFragment = supportFragmentManager\n                .findFragmentById(R.id.map) as SupportMapFragment\n        mapFragment.getMapAsync(this)\n    }\n```\n\nThis is the code that is currently in `onCreate`, but which we will be removing soon.\n\nNext, add a new top-level field to the class called `REQUEST_LOCATION_PERMISSIONS`:\n\n``` kotlin\n    private val REQUEST_LOCATION_PERMISSIONS = 1001\n```\n\nThis is used so that we know in the callback from requesting permissions which call it was - so that an appropriate response can happen.\n\nNext, another new method called `onRequestPermissionsResult`:\n\n``` kotlin\n    override fun onRequestPermissionsResult(requestCode: Int,\n                                            permissions: Array\u003cout String\u003e,\n                                            grantResults: IntArray) {\n        if (requestCode == REQUEST_LOCATION_PERMISSIONS) {\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                setupMap()\n            } else {\n                Toast.makeText(this, \"Location Permission Denied\", Toast.LENGTH_SHORT)\n                        .show();\n            }\n        } else {\n            super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n        }\n    }\n```\n\nThis is a standard method defined in the `FragmentActivity` base class that we are extending for our specific case. If the user grants us permission then we move on to our `setupMap` method we’ve just defined, and if they deny us then we show a message and stop there.\n\nNext, a new method called `checkLocationPermissions` to actually check if we’ve got permission for accessing the users location already, and if not to request them:\n\n``` kotlin\n    private fun checkLocationPermissions() {\n        if (checkSelfPermission(android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n            requestPermissions(arrayOf(android.Manifest.permission.ACCESS_FINE_LOCATION), REQUEST_LOCATION_PERMISSIONS)\n            return\n        }\n        setupMap()\n    }\n```\n\nFinally we update the `onCreate` method as follows:\n\n``` kotlin\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n    \n        checkLocationPermissions()\n    }\n```\n\nThis starts the whole chain off. When the main activity is first created, we check if we have permission to access the users location. If not we request permission. Then, once permission is granted, we use this fact to allow the user to see where they are on the map.\n\n### Receive notifications of new jobs\n\nNow that we can show the driver where they are on the map, we want to show them where the potential riders are and allow them to accept a job.\n\nFirstly, we need to register with the Pusher Beams service to be able to receive push notifications, and then subscribe to the `driver_broadcast` interest to be told about the jobs. Add the following to the `onCreate` method of `MainActivity`:\n\n``` kotlin\n    PushNotifications.start(getApplicationContext(), \"YOUR_INSTANCE_ID\");\n    PushNotifications.subscribe(\"driver_broadcast\")\n```\n\nWhere “YOUR_INSTANCE_ID” is replaced with the value received from the Pusher Beams registration process, and must match the value used in the backend application.\n\nNext, add a method to display a message to the user when we need to inform them of something. Create the method `displayMessage` in the `MainActivity` class as follows:\n\n``` kotlin\n    private fun displayMessage(message: String) {\n        Toast.makeText(\n                this,\n                message,\n                Toast.LENGTH_SHORT).show();\n    }\n```\n\nNext, add a new top level field into the `MainActivity` class to store the markers that we are placing:\n\n``` kotlin\n    private val markers = mutableMapOf\u003cString, Marker\u003e()\n```\n\nNext, we add a listener so that when we are notified about a job we can place a pin on the map showing where the rider is. For this, add a new `onResume` method to the `MainActivity` class as follows:\n\n``` kotlin\n    override fun onResume() {\n        super.onResume()\n    \n        PushNotifications.setOnMessageReceivedListenerForVisibleActivity(this, object : PushNotificationReceivedListener {\n            override fun onMessageReceived(remoteMessage: RemoteMessage) {\n                val action = remoteMessage.data[\"action\"]\n    \n                runOnUiThread {\n                    if (action == \"NEW_JOB\") {\n                        val jobId = remoteMessage.data[\"job\"]!!\n                        val location = LatLng(remoteMessage.data[\"latitude\"]!!.toDouble(), remoteMessage.data[\"longitude\"]!!.toDouble())\n    \n                        val marker = mMap.addMarker(MarkerOptions()\n                                .position(location)\n                                .title(\"New job\"))\n                        marker.tag = jobId\n                        markers[jobId] = marker\n    \n                        displayMessage(\"A new job is available\")\n                    }\n                }\n            }\n        })\n    }\n```\n\nWe are setting the `tag` on the marker to the ID of the job that has turned up. This will be used next to allow the driver to accept the job. We are also storing the marker in a map so that we can look it up later by ID.\n\n### Accepting a job\n\nAccepting a job is going to be done by clicking on a marker. Once done, the app will send a message to the backend to accept the job, and will start sending regular messages with the drivers location. It will also allow for a **Pickup** and **Dropoff** button to be displayed for the driver to click as appropriate.\n\nFirstly, add a new top-level field to the `MainActivity` class to store the ID of the current job:\n\n``` kotlin\n    private var currentJob: String? = null\n```\n\nNext, update the `onMapReady` method to add a handler for clicking on a marker. This will send the HTTP request to our backend to accept the job, and record the fact in the application that this is now the current job.\n\n``` kotlin\n    mMap.setOnMarkerClickListener { marker -\u003e\n        if (currentJob != null) {\n            runOnUiThread {\n                displayMessage(\"You are already on a job!\")\n            }\n        } else {\n    \n            val jobId = marker.tag\n    \n            val location = mMap.myLocation\n    \n            val request = JSONObject(mapOf(\n                    \"latitude\" to location.latitude,\n                    \"longitude\" to location.longitude\n            ))\n    \n            val client = AsyncHttpClient()\n            client.post(applicationContext, \"http://10.0.2.2:8080/accept-job/$jobId\", StringEntity(request.toString()),\n                    \"application/json\", object : TextHttpResponseHandler() {\n    \n                override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String) {\n                    runOnUiThread {\n                        displayMessage(\"You have accepted this job\")\n                        currentJob = jobId as String\n                    }\n                }\n    \n                override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String, throwable: Throwable) {\n                    runOnUiThread {\n                        displayMessage(\"An error occurred accepting this job\")\n                    }\n                }\n            });\n        }\n        \n        true\n    }\n```\n\n\u003e **Note:** The import for `Header` may be ambiguous. Ensure that you select `cz.msebera.android.httpclient.Header`\n\n### Removing old jobs from the map\n\nWe also want to tidy up the map when a job is accepted, removing markers from every drivers map - including the driver that accepted the job - but adding a new one in a different colour back to the local drivers map.\n\nFirstly, add another new field to the `MainActivity` class for the marker of the job we are currently on: \n\n``` kotlin\n    private var currentJobMarker: Marker? = null\n```\n\nNext, update the `onMessageReceived` callback inside the `onResume` method of `MainActivity` as follows:\n\n``` kotlin\n    override fun onMessageReceived(remoteMessage: RemoteMessage) {\n        val action = remoteMessage.data[\"action\"]\n    \n        runOnUiThread {\n            if (action == \"NEW_JOB\") {\n                val jobId = remoteMessage.data[\"job\"]!!\n                val location = LatLng(remoteMessage.data[\"latitude\"]!!.toDouble(), remoteMessage.data[\"longitude\"]!!.toDouble())\n    \n                val marker = mMap.addMarker(MarkerOptions()\n                        .position(location)\n                        .title(\"New job\"))\n                marker.tag = jobId\n                markers[jobId] = marker\n    \n                displayMessage(\"A new job is available\")\n            } else if (action == \"ACCEPTED_JOB\") {\n                val jobId = remoteMessage.data[\"job\"]!!\n                val location = LatLng(remoteMessage.data[\"latitude\"]!!.toDouble(), remoteMessage.data[\"longitude\"]!!.toDouble())\n    \n                markers[jobId]?.remove()\n                markers.remove(jobId)\n            }\n        }\n    }\n```\n\nHere we are adding the block to handle the `ACCEPTED_JOB` event alongside the `NEW_JOB` event. This is broadcast out to every driver when any driver accepts a job, and is used to remove the markers indicating a job is waiting for pickup.\n\nFinally, add the following in to the `onSuccess` handler in the `onMapReady` method of `MainActivity`:\n\n``` kotlin\n    val selectedJobMarker = markers[jobId]!!\n    val marker = mMap.addMarker(MarkerOptions()\n            .position(selectedJobMarker.position)\n            .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE))\n            .title(\"Current job\"))\n    marker.tag = jobId\n    \n    currentJobMarker = marker\n```\n\nThis adds a new marker to the map, coloured blue instead of the default red, to indicate the job that we are actively on.\n\n### Picking up and dropping off\n\nIn order to pick up and drop off the rider, we need to add UI controls to support this. We are going to add buttons that appear on the map at appropriate times to allow the driver to indicate that he’s ready for pickup and for dropoff.\n\nFirstly, update `activity_main.xml` as follows to add the buttons:\n\n``` xml\n    \u003cfragment xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:map=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:id=\"@+id/map\"\n        android:name=\"com.google.android.gms.maps.SupportMapFragment\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\"com.pusher.pushnotify.ride.MainActivity\"\u003e\n    \n        \u003cButton\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"right|bottom\"\n            android:id=\"@+id/pickup_ride\"\n            android:text=\"Pickup\"\n            android:padding=\"10dp\"\n            android:layout_marginTop=\"20dp\"\n            android:paddingRight=\"10dp\"\n            android:visibility=\"invisible\"\n            android:onClick=\"pickupRide\" /\u003e\n    \n        \u003cButton\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"right|bottom\"\n            android:id=\"@+id/dropoff_ride\"\n            android:text=\"Dropoff\"\n            android:padding=\"10dp\"\n            android:layout_marginTop=\"20dp\"\n            android:paddingRight=\"10dp\"\n            android:visibility=\"invisible\"\n            android:onClick=\"dropoffRide\" /\u003e\n    \n    \u003c/fragment\u003e\n```\n\nThese buttons are initially invisible, but we will display them as necessary in the application.\n\nNext, update the `onSuccess` method inside of `onMapReady` to ensure the correct buttons are displayed. This should now look like:\n\n``` kotlin\n    override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String) {\n        runOnUiThread {\n            displayMessage(\"You have accepted this job\")\n            currentJob = jobId as String\n            findViewById\u003cButton\u003e(R.id.dropoff_ride).visibility = View.INVISIBLE\n            findViewById\u003cButton\u003e(R.id.pickup_ride).visibility = View.VISIBLE\n        }\n    }\n```\n\nFinally, we add the handlers for these buttons. First the one to pick up the rider. Add a new method called `pickupRide` as follows:\n\n``` kotlin\n    fun pickupRide(view: View) {\n        val location = mMap.myLocation\n    \n        val request = JSONObject(mapOf(\n                \"latitude\" to location.latitude,\n                \"longitude\" to location.longitude\n        ))\n    \n        val client = AsyncHttpClient()\n        client.post(applicationContext, \"http://10.0.2.2:8080/pickup/$currentJob\", StringEntity(request.toString()),\n                \"application/json\", object : TextHttpResponseHandler() {\n    \n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String?) {\n                runOnUiThread {\n                    findViewById\u003cButton\u003e(R.id.dropoff_ride).visibility = View.VISIBLE\n                    findViewById\u003cButton\u003e(R.id.pickup_ride).visibility = View.INVISIBLE\n                    currentJobMarker?.remove()\n                    currentJobMarker = null\n                }\n            }\n    \n            override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String, throwable: Throwable) {\n                runOnUiThread {\n                    displayMessage(\"An error occurred picking up your ride\")\n                }\n            }\n        });\n    }\n```\n\nThis will make the call to the backend, and on success will cause the **Pickup** button to be hidden and the **Dropoff** button to be displayed. It also removes the blue marker for the current job, since we have just picked them up.\n\nNext the handler for dropping off the rider. Add another new method called `dropoffRide` as follows:\n\n``` kotlin\n    fun dropoffRide(view: View) {\n        val location = mMap.myLocation\n    \n        val request = JSONObject(mapOf(\n                \"latitude\" to location.latitude,\n                \"longitude\" to location.longitude\n        ))\n    \n        val client = AsyncHttpClient()\n        client.post(applicationContext, \"http://10.0.2.2:8080/dropoff/$currentJob\", StringEntity(request.toString()),\n                \"application/json\", object : TextHttpResponseHandler() {\n    \n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String?) {\n                runOnUiThread {\n                    findViewById\u003cButton\u003e(R.id.dropoff_ride).visibility = View.INVISIBLE\n                    findViewById\u003cButton\u003e(R.id.pickup_ride).visibility = View.INVISIBLE\n                    currentJob = null\n                }\n            }\n    \n            override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String, throwable: Throwable) {\n                runOnUiThread {\n                    displayMessage(\"An error occurred dropping off your ride\")\n                }\n            }\n        });\n    }\n```\n\n### Sending location updates\n\nThe final thing that we need to do is have the driver application send updates about its location so that the rider can be updated.\n\nThis involves using the phones GPS to get updates every time the phone moves, and sending these updates to the backend - but only if we are currently on a job.\n\nIn order to do this, add the following to the bottom of the `setupMap` method in `MainActivity`. This is used because it’s called already once we know we have permission to get the devices location.\n\n``` kotlin\n    val locationManager = applicationContext.getSystemService(LocationManager::class.java)\n    locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 100, 0.0f, object : LocationListener {\n        override fun onLocationChanged(location: Location) {\n            if (currentJob != null) {\n                val request = JSONObject(mapOf(\n                        \"latitude\" to location.latitude,\n                        \"longitude\" to location.longitude\n                ))\n    \n                val client = AsyncHttpClient()\n                client.post(applicationContext, \"http://10.0.2.2:8080/update-location/$currentJob\", StringEntity(request.toString()),\n                        \"application/json\", object : TextHttpResponseHandler() {\n    \n                    override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String?) {\n                    }\n    \n                    override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String, throwable: Throwable) {\n                    }\n                });\n    \n            }\n        }\n    \n        override fun onStatusChanged(provider: String?, status: Int, extras: Bundle?) {\n    \n        }\n    \n        override fun onProviderEnabled(provider: String?) {\n    \n        }\n    \n        override fun onProviderDisabled(provider: String?) {\n    \n        }\n    }, null)\n```\n\n\u003e **Note:** it’s likely that Android Studio will complain about having not performed the correct permissions checks. This error is actually wrong, except that Android Studio can’t tell that because of the way the methods are structured.\n\n\n\u003e **Note:** we have a number of empty methods here. They are required to be defined by the calling class, but we don’t actually have any need for them.\n\nAt this point, we have a fully working application suite that allows riders to request rides, and drivers to pick them up and drop them off. Remember to run your backend application before you launch the Android apps, and then we can test them out working together.\n\n![kotlin-ridesharing-demo](//images.ctfassets.net/1es3ne0caaid/6RBtbLD3JCimAcaw48UMqq/2da3756854a334305b1c4bc8786e8d03/kotlin-ridesharing-demo.gif)\n\n## Conclusion\n\nThis article shows how to use Pusher Beams along with the location and maps functionality of your phone to give a truly interactive experience of requesting a ride. We have painlessly implemented the sending of appropriate details from one device to another, keeping both parties updated to the current job.\n\nThe full source code for this application is available on [GitHub](https://github.com/sazzer/pusher-ridesharing). Why not try extending it yourself. There are many additional things that can be added very easily using Pusher technology to improve the application even further.","metaTitle":"Build a Kotlin ride sharing app with push notifications","metaDescription":"Use Kotlin, Gradle and Spring Boot to build a full ridesharing application, featuring apps for both the driver and rider. Use Google Maps to track rides."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N924MqeI0o4k8msEgyoWs","type":"Entry","createdAt":"2018-05-17T21:40:18.246Z","updatedAt":"2020-06-19T12:43:12.908Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a location feed app for Android with Kotlin","url":"location-feed-android-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/pusher-location-feeds","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-05-17","description":"This tutorial shows you how to build a location-sharing app for Android using Kotlin. The app has a Node.js backend. Users can share their location and see where their friends are.","prerequisite":"You will need Android Studio 3+ and Node.js installed on your machine. Some knowledge of Android development will be helpful.","content":"## Introduction\n\nOften times we like to track and visualize our applications in a central place. Feeds are great for this! In this tutorial, we'll build an Android app with an activity feed that allows users to broadcast their locations and share with all other connected users in realtime.\n\nWe’ll build the Android app to monitor the activities of a [Node.js](https://nodejs.org/) REST API. Every time the endpoint of the API is hit, Pusher will publish an event with some information (location shared by the user) to a channel. This event will be received in realtime, on all the connected Android devices.\n\nHere’s the app in action:\n\n![kotlin-location-sharing-demo-login](//images.ctfassets.net/1es3ne0caaid/4TzPM2B6nmKsYe02424aQI/f29753ee89af486eeef5d09ea35434a5/kotlin-location-sharing-demo-login.png)\n\n![kotlin-location-sharing-demo-friends](//images.ctfassets.net/1es3ne0caaid/5BwV1PSK1aUSkaWggIkeiy/ee6936790ced1a80c32ec02c5de4168f/kotlin-location-sharing-demo-friends.png)\n\n\n\n## Prerequisites\n\nThis tutorial uses the following technologies\n\n- [Pusher](https://pusher.com/)\n- [Android Studio](https://developer.android.com/studio/index.html)\n- [Node](https://nodejs.org/en/download)\n\nTo follow along, you’ll need to [sign up with Pusher](https://pusher.com/signup.) and gain access to your dashboard to create a Pusher project. You will also need to have Android Studio v3+ installed to build the client part of this application. To build our server side script, you’ll need to [download and install Node](https://nodejs.org/en/download) if you don’t already have it installed.  \n\n## Client side\n\nNow that you have that sorted out, let’s start building our Android app. Launch Android Studio and create a new project. Be sure to include Kotlin support.\nEnter an application name, in our case -  Pusher-Location-Feeds\n\n![kotlin-location-sharing-create-android](//images.ctfassets.net/1es3ne0caaid/3Cpgj5cA8wqUwkQIeuyma2/0d5ee3c27fb43565c1adf87ce31542be/kotlin-location-sharing-create-android.jpeg)\n\nSelect application’s target SDK:\n\n![kotlin-location-sharing-target-devices](//images.ctfassets.net/1es3ne0caaid/75lRgCp6ogAQUMqU8KMoKU/c862d02968337389e63b93386fe984f4/kotlin-location-sharing-target-devices.jpeg)\n\nChoose the basic activity template:\n\n![kotlin-location-sharing-basic-activity](//images.ctfassets.net/1es3ne0caaid/3zVD6WjkOQiuowYegwo64G/8d31950078f4cf322b6a6531c5111f19/kotlin-location-sharing-basic-activity.jpeg)\n\nWhen the project build is completed, open your app level `build.gradle` file and update the dependencies like so:\n\n\n``` gradle    \n    implementation fileTree(include: ['*.jar'], dir: 'libs')\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version\"\n    implementation 'com.android.support:appcompat-v7:26.1.0'\n    implementation 'com.android.support.constraint:constraint-layout:1.0.2'\n    implementation 'com.pusher:pusher-java-client:1.5.0'\n    implementation 'com.google.android.gms:play-services-maps:15.0.0'\n    implementation 'com.google.android.gms:play-services-location:15.0.0'\n    \n    implementation 'com.squareup.retrofit2:retrofit:2.3.0'\n    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'\n    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'\n    implementation 'com.android.support:recyclerview-v7:26.1.0'\n    implementation 'com.android.support:design:26.1.0'\n    testImplementation 'junit:junit:4.12'\n    androidTestImplementation 'com.android.support.test:runner:1.0.1'\n    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'\n```\n\n\nNext, sync the project by clicking **Sync Now** with the gradle file to install the added dependencies.\n\n\n## Application activities\n\n### Login activity\nBy default creating the Android project also creates a `MainActivity` class and an associating `activity_main.xml` file for you. Now we need a login Activity to collect the users username. So create a new activity, right-click on **MainActivity \u003e\u003e New \u003e\u003e Activity \u003e\u003e Empty Activity**, then name it `LoginActivity`. Once this activity is created, it’ll create a default layout file `activity_login.xml` inside the `layout` folder under `res`. The layout will be a rather simple one, it will have a text input to collect the user’s `username` and a button to share their location. Here’s a snippet for the `activity_login.xml` file:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\"\n        android:gravity=\"center\"\n        android:layout_margin=\"16dp\"\n        tools:context=\".LoginActivity\"\u003e\n    \n        \u003cEditText\n            android:paddingStart=\"10dp\"\n            android:id=\"@+id/userName\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"50dp\"\n            android:hint=\"Username\"\n            android:background=\"@drawable/input_bg\"\n            android:layout_marginEnd=\"5dp\"/\u003e\n    \n        \u003cButton\n            android:id=\"@+id/enterButton\"\n            android:layout_marginTop=\"15dp\"\n            android:layout_width=\"wrap_content\"\n            android:padding=\"10dp\"\n            android:text=\"Share Location\"\n            android:textColor=\"@android:color/white\"\n            android:background=\"@drawable/button\"\n            android:layout_gravity=\"center\"\n            android:layout_height=\"wrap_content\" /\u003e\n    \n    \u003c/LinearLayout\u003e\n```\n\n\nHere we have a simple `LinearLayout` with two view objects, an `EditText` input to collect the user’s `username` and a share button to send the location to the server.\n\nAndroid default styling isn’t always appealing so let’s add some custom styles to our layout simply for aesthetic purposes.\nUnder `res` folder, open the `values` folder and navigate into `colors.xml` file and update it with this code :\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cresources\u003e\n        \u003ccolor name=\"colorPrimary\"\u003e#8e0517\u003c/color\u003e\n        \u003ccolor name=\"colorPrimaryDark\"\u003e#4c060f\u003c/color\u003e\n        \u003ccolor name=\"colorAccent\"\u003e#FF4081\u003c/color\u003e\n    \n    \u003c/resources\u003e\n```\nSecondly to achieve the button and Input styles, we create two `drawable` files. Under `res` right-click on **drawable \u003e\u003eNew \u003e\u003e Drawable resource file**, name it `input_bg` and update it with this code:\n\n``` xml\n    \u003cshape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:shape=\"rectangle\" android:padding=\"10dp\" \u003e\n        \u003csolid android:color=\"#FFFFFF\"\n            /\u003e\n        \u003ccorners\n            android:radius=\"10dp\"/\u003e\n    \u003c/shape\u003e\n```\nThis simply adds round edges to the EditText object. For the button styles, follow the same steps as the one above and create a new drawable file, name it `button` and set it up like so:\n\n``` xml\n    \u003cshape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:shape=\"rectangle\" android:padding=\"10dp\" \u003e\n        \u003csolid android:color=\"#4c060f\" /\u003e\n        \u003ccorners\n            android:radius=\"10dp\"/\u003e\n    \u003c/shape\u003e\n```\n\n\nFinally update your `styles.xml` file inside the `values` folder in the `layout` directory:\n\n``` xml\n    \u003cresources\u003e\n        \u003c!-- Base application theme. --\u003e\n        \u003cstyle name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\"\u003e\n            \u003c!-- Customize your theme here. --\u003e\n            \u003citem name=\"colorPrimary\"\u003e@color/colorPrimary\u003c/item\u003e\n            \u003citem name=\"colorPrimaryDark\"\u003e@color/colorPrimaryDark\u003c/item\u003e\n            \u003citem name=\"colorAccent\"\u003e@color/colorAccent\u003c/item\u003e\n        \u003c/style\u003e\n        \u003cstyle name=\"AppTheme.NoActionBar\"\u003e\n            \u003citem name=\"windowActionBar\"\u003efalse\u003c/item\u003e\n            \u003citem name=\"windowNoTitle\"\u003etrue\u003c/item\u003e\n        \u003c/style\u003e\n    \n     \u003cstyle name=\"AppTheme.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\" /\u003e\n    \n    \u003cstyle name=\"AppTheme.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" /\u003e\n    \u003c/resources\u003e\n```\nAt this point, your output in the xml visualizer should look exactly like this:\n\n![kotlin-location-sharing-part-1](//images.ctfassets.net/1es3ne0caaid/4CM5Xxcy1O88scGEcY8ugy/64ce857627e2ae7ff22b08ff2279e2aa/kotlin-location-sharing-part-1.jpeg)\n\nNext lets create a new layout file called `custom_view.xml`. We’ll use this file to render each individual map of a user on our recyclerview object. Inside the `layout` folder under `res`, create the new layout resource file and set it up like so:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\u003e\n    \u003ccom.google.android.gms.maps.MapView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/map\"\n    android:layout_margin=\"10dp\"\n    android:name=\"com.google.android.gms.maps.SupportMapFragment\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"200dp\" /\u003e\n    \n    \u003c/LinearLayout\u003e\n```\n\nOkay, we are done with login and UI lets hook it up with it’s Java file to handle the logic. Open `LoginActivity.kt` file and set it up like so:\n\n``` kotlin\n    //package your_project_package_here\n    \n    import android.content.Intent\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import kotlinx.android.synthetic.main.activity_login.*\n    \n    class LoginActivity : AppCompatActivity() {\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_login)\n            enterButton.setOnClickListener {\n                if (userName.text.isNotEmpty()){\n                    val intent = Intent(this@LoginActivity,MainActivity::class.java)\n                    intent.putExtra(\"username\",userName.text.toString())\n                    startActivity(intent)\n                }\n            }\n        }\n    }\n```\nHere we are simply getting the value of the input we defined in the layout file and passing it into the `MainActivity` class with an intent . Once the user has entered a value (username) in the `Edittext` object, we set a listener on the button to call the intent action when clicked. This action will only execute if the input value is not empty.\n\n### MainActivity\nNext we define a layout where we’ll render the map locations of each user when they share their location. We’ll get their latitude and longitude coordinates along with the username they provided in the `LoginActivity` and send it to our server, which then returns a map of the location with the provided username on the map-marker and display it on screen for all users. \n\nBefore we get into MainActivity, let’s first define a new layout file with a RecyclerView object to hold these location widgets as the users share them. Under `res`, right-click on **layout \u003e\u003e New \u003e\u003e Layout resource file** and name it `content_main`, (if you selected the basic activity template while setting up the project, then you should have this file by default). Open this file and set it up like so:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.v7.widget.RecyclerView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/recyclerView\"\n        android:layout_margin=\"16dp\"\n        tools:showIn=\"@layout/activity_main\"/\u003e\n```\nAs seen, we simply have a RecyclerView object where we’ll render each individual user's location so they can all appear in a list.\nLastly, Open up `activity_main.xml` and update it:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\"\u003e\n    \n        \u003candroid.support.design.widget.AppBarLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:theme=\"@style/AppTheme.AppBarOverlay\"\u003e\n    \n            \u003candroid.support.v7.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                android:background=\"?attr/colorPrimary\"\n                app:popupTheme=\"@style/AppTheme.PopupOverlay\" /\u003e\n    \n        \u003c/android.support.design.widget.AppBarLayout\u003e\n    \n        \u003cinclude layout=\"@layout/content_main\" /\u003e\n    \n        \u003candroid.support.design.widget.FloatingActionButton\n            android:id=\"@+id/fab\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"bottom|end\"\n            android:layout_margin=\"16dp\"\n            app:srcCompat=\"@android:drawable/ic_menu_send\" /\u003e\n    \n    \u003c/android.support.design.widget.CoordinatorLayout\u003e\n```\n## Application logic\n\nSince we used a RecyclerView in our layout file, we’ll need an adapter class. `RecyclerView` works with an [Adapter](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html) to manage the items of its data source and a [ViewHolder](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html) to hold a view representing a single list item. Before we create the `Adapter` class, lets first create a `Model` class that will interface between our remote data and the adapter. It’ll have the values that we’ll pass data to our recyclerview. Now right-click on **MainActivity \u003e\u003e New \u003e\u003e** **Kotlin File/Class**, name it **Model,** under the **Kind** dropdown, select **Class** and set it up like so:\n\n``` kotlin\n    // java/package/Model\n    \n    data class Model(val latitude:Double,\n                     val longitude:Double,\n                     val username:String)\n```\n\n\nNow that we have that, lets create the `Adapter` class.  Right-click on **MainActivity \u003e\u003e New \u003e\u003e Kotlin File/Class**, name it `Adapter`, under the **Kind** dropdown, select Class again and set it up with the code:\n\n``` kotlin\n    // java/package/Adapter\n    //package your_project_package_here\n    \n    // imports  \n    import android.content.Context\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    \n    class Adapter(private val mContext: AppCompatActivity)\n        : RecyclerView.Adapter\u003cAdapter.MyViewHolder\u003e() {\n    \n        private var arrayList: ArrayList\u003cModel\u003e = ArrayList()\n        override fun getItemCount(): Int {\n            return arrayList.size\n        }\n        override fun onBindViewHolder(holder: Adapter.MyViewHolder, position: Int) {\n          val latLng = LatLng(arrayList[position].latitude,arrayList[position].longitude)\n            holder.mapView.onCreate(null)\n            holder.mapView.getMapAsync(OnMapReadyCallback {\n                it.addMarker(MarkerOptions()\n                        .title(arrayList[position].username)\n                        .position(latLng))\n            val cameraPosition = CameraPosition.Builder().target(latLng).zoom(17f).build()\n                it.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition))\n            })\n        }\n         override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {\n            val view = LayoutInflater.from(mContext).inflate(R.layout.custom_view, parent, false)\n            return MyViewHolder(view)\n        }\n        \n        inner class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n            val mapView:MapView = itemView.findViewById(R.id.map)\n        }\n        \n        fun addItem(model: Model) {\n            this.arrayList.add(model)\n            notifyDataSetChanged()\n        }\n    }\n```\n\nHere we have defined an `arrayList` from our Model class that will be used by the adapter to populate the `R``ecycler``V``iew`. In the `onBindViewHolder()` method, we bind the locations coming from our server (as longitude and latitude) to the view holder we defined for it. We also passed the user’s username to the map marker.\n\nThen in the `onCreateViewHolder()` method we define the design of the layout for individual items on the list.  Finally the `addItem()` method adds a new instance of our model class to the `arrayList` and refresh the list every time we get a new addition.\n\nNext let’s establish a connection to our Node server using the Retrofit library we installed at the beginning. First we create a new Kotlin interface to define the API endpoint we’ll be calling for this project. Right-click on **MainActivity \u003e\u003e New \u003e\u003e** **Kotlin File/Class**, under the **Kind** dropdown, select Interface name it **Service** and set it up like so:\n\n\n``` kotlin    \n    // imports ...\n    import retrofit2.Call\n    import retrofit2.http.GET\n    import retrofit2.http.Path\n    \n    interface Service {\n        @POST(\"/location\")\n        fun sendLocation(@Body coordinates: RequestBody): Call\u003cString\u003e\n    }\n```\n\nWe also need a class that’ll give us an instance of Retrofit for making networking calls. It’ll also be the class where we’ll define the server URL and network parameters. So follow the previous steps and create a class called `Client.kt` and set it up like this:\n\n\n``` kotlin\n    // imports...\n    \n    import okhttp3.OkHttpClient\n    import retrofit2.Retrofit\n    import retrofit2.converter.gson.GsonConverterFactory\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    \n    class Client {\n        fun getClient(): Service {\n            val httpClient = OkHttpClient.Builder()\n    \n            val builder = Retrofit.Builder()\n                    .baseUrl(\"your_server_url\")\n                    .addConverterFactory(ScalarsConverterFactory.create())\n                    .addConverterFactory(GsonConverterFactory.create())\n    \n            val retrofit = builder\n                    .client(httpClient.build())\n                    .build()\n    \n            return retrofit.create(Service::class.java)\n        }\n    }\n```\n\n\u003e Replace the Base URL with your localhost address for the Node server. We’ll \n\nThe `baseUrl` we used here points to our local Node server running on your machine as shown above but we’ll get to that later on in the tutorial. For now let’s go back to `MainActivity.kt` and initialize the necessary objects and update it with the classes we’ve created above.\n\n``` kotlin\n    // imports ...\n    \n    import android.Manifest\n    import android.annotation.SuppressLint\n    import android.content.DialogInterface\n    import android.content.pm.PackageManager\n    import android.location.Location\n    import android.os.Bundle\n    import android.support.design.widget.Snackbar\n    import android.support.v4.app.ActivityCompat\n    import android.support.v4.content.ContextCompat\n    import android.support.v7.app.AlertDialog\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import com.google.android.gms.location.FusedLocationProviderClient\n    import com.google.android.gms.location.LocationServices\n    import com.google.android.gms.maps.model.LatLng\n    import com.google.android.gms.maps.model.MarkerOptions\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_main.*\n    import kotlinx.android.synthetic.main.content_main.*\n    import okhttp3.MediaType\n    import okhttp3.RequestBody\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class MainActivity : AppCompatActivity() {\n    \n        var adapter: Adapter = Adapter(this@MainActivity)\n        lateinit var pusher:Pusher\n        val MY_PERMISSIONS_REQUEST_LOCATION = 100\n        private lateinit var fusedLocationClient: FusedLocationProviderClient\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n            setSupportActionBar(toolbar)\n            \n            }\n    }\n```\nHere we’ve just initialized the objects we’ll need, our Adapter class, Pusher, location request and the `fusedLocationClient`. \n\n  \n\nIn the `onCreate()` method we’ll setup our RecyclerView with the adapter. We’ll also call the `setupPusher()` method and the `sendLocation()` action with the floating action button:\n\n``` kotlin\n    // java/package/MainActivity.onCreate()\n     setupPusher()\n    fab.setOnClickListener { view -\u003e\n        if (checkLocationPermission())\n            sendLocation()\n    }\n    with(recyclerView){\n        layoutManager = LinearLayoutManager(this@MainActivity)\n        adapter = this@MainActivity.adapter\n    }\n    //... continue from next snippet\n```\n\n\u003e While adding this code to your `onCreate()` method, be careful not to miss the curly braces\n\nSo we called methods we haven’t defined yet, that’s no problem we’ll define the `setupPusher()` method later on in the tutorial but first off, let’s define and setup the  `sendLocation()` method this time, outside the `onCreate()`:\n\n``` kotlin\n    //java/package/MainActivity\n    \n    //... continue from the last snippet above, outside the onCreate() method\n    @SuppressLint(\"MissingPermission\")\n    private fun sendLocation() {\n        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)\n        fusedLocationClient.lastLocation\n                .addOnSuccessListener { location: Location? -\u003e\n                    if (location!=null){\n                        Log.e(\"TAG\",\"location is not null\")\n                        val jsonObject = JSONObject()\n                        jsonObject.put(\"latitude\",location.latitude)\n                        jsonObject.put(\"longitude\",location.longitude)\n                        jsonObject.put(\"username\",intent.extras.getString(\"username\"))\n    \n                        val body = RequestBody.create(MediaType.parse(\"application/json\"), jsonObject.toString())\n                        Log.e(\"TAG\",jsonObject.toString())\n                        Client().getClient().sendLocation(body).enqueue(object: Callback\u003cString\u003e {\n                            override fun onResponse(call: Call\u003cString\u003e, response: Response\u003cString\u003e) {}\n    \n                            override fun onFailure(call: Call\u003cString\u003e?, t: Throwable) {\n                                Log.e(\"TAG\",t.message)\n                            }\n    \n                        })\n    \n                    } else {\n                        Log.e(\"TAG\",\"location is null\")\n                    }\n                }\n    \n    }\n    //MainActivity\n```\nWith the `fusedLocationClient` object we initialized earlier, we are getting the user’s location. If we succeed in getting the location, we pass the the longitude and latitude along with the user’s `username` into our `body` object. We then use it to build our HTTP request with the `jsonObjects` as our request parameters. \n\nWe also called the `checkLocationPermission()` method in the `onCreate()` method however we haven’t defined it yet. Lets now create this method and set it up like so:\n\n``` kotlin\n    private fun checkLocationPermission(): Boolean {\n        if (ContextCompat.checkSelfPermission(this,\n                        Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n    \n            // Should we show an explanation?\n            if (ActivityCompat.shouldShowRequestPermissionRationale(this,\n                            Manifest.permission.ACCESS_FINE_LOCATION)) {\n    \n                AlertDialog.Builder(this)\n                        .setTitle(\"Location permission\")\n                        .setMessage(\"You need the location permission for some things to work\")\n                        .setPositiveButton(\"OK\", DialogInterface.OnClickListener { dialogInterface, i -\u003e\n                            \n                            ActivityCompat.requestPermissions(this@MainActivity,\n                                    arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),\n                                    MY_PERMISSIONS_REQUEST_LOCATION)\n                        })\n                        .create()\n                        .show()\n    \n            } else {\n                // No explanation needed, we can request the permission.\n                ActivityCompat.requestPermissions(this,\n                        arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),\n                        MY_PERMISSIONS_REQUEST_LOCATION)\n            }\n            return false\n        } else {\n            return true\n        }\n    }\n```\nOf course we can’t just grab every user’s location without first asking for their permission, so here’s how we set up the method that requests permission to access their location. Just after the `sendLocation()` method, add:\n\n``` kotlin\n    // MainActivity\n    override fun onRequestPermissionsResult(requestCode: Int,\n     permissions: Array\u003cString\u003e, grantResults: IntArray) {\n      when (requestCode) {\n            MY_PERMISSIONS_REQUEST_LOCATION -\u003e {\n                // If request is cancelled, the result arrays are empty.\n       if (grantResults.isNotEmpty() \u0026\u0026 grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    // permission was granted, yay! Do the\n                    // location-related task you need to do.\n                    if (ContextCompat.checkSelfPermission(this,\n        Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\n                     sendLocation()\n             }\n         } else {\n               // permission denied!\n            }\n              return\n          }\n      }\n    }\n    //MainActivity\n```\nAnd now let’s define the `setUpPusher()` method we called earlier in the `onCreate()` method:\n\n``` kotlin\n    // MainActivity\n    private fun setupPusher() {\n        val options = PusherOptions()\n        options.setCluster(\"eu\")\n        pusher = Pusher(\"9117088b176802bda36f\", options)\n        val channel = pusher.subscribe(\"feed\")\n        channel.bind(\"location\") { _, _, data -\u003e\n            val jsonObject = JSONObject(data)\n            Log.d(\"TAG\",jsonObject.toString())\n            val lat:Double = jsonObject.getString(\"latitude\").toDouble()\n            val lon:Double = jsonObject.getString(\"longitude\").toDouble()\n            val name:String = jsonObject.getString(\"username\").toString()\n            runOnUiThread {\n                val model = Model(lat,lon,name)\n                adapter.addItem(model)\n            }\n        }\n    }\n    //MainActivity\n```\nHere we simply pass in our Pusher configs to the Pusher object and subscribe to the `feed` channel to listen for `location` events. Then we get the data returned from the server into our defined variables and pass them to our model class to update the adapter.\n\nNext we implement the `onStart()` and `onStop()` methods to connect and disconnect Pusher respectively in our app:\n\n\n``` kotlin    \n    override fun onStart() {\n        super.onStart()\n        pusher.connect()\n    }\n    \n    override fun onStop() {\n        super.onStop()\n        pusher.disconnect()\n    }\n```\nFinally on the client side, we create a Kotlin data class that will define the payload we’ll be requesting from the server. Following the previous steps, create a class called **RequestPayload** and set it up like so:\n\n``` kotlin\n    // java/package/RequestPayload\n    \n    //package your_project_package_here\n    \n    data class RequestPayload(var latitude:Double,var longitude:Double,var username:String)\n```\n## Server side\n\n### Set up Pusher\nNow that we have all the client side functionalities, lets go ahead and build our server. But first, if you haven’t, now will be a good time to create a free account [here](https://pusher.com/signup).\nWhen you first log in, you'll be asked to enter some configuration options:\n\n![kotlin-location-sharing-pusher-1](//images.ctfassets.net/1es3ne0caaid/3ubhoW8yhqYUaseamiI6Wg/d527cb538be6495172a3eb99a6813a0e/kotlin-location-sharing-pusher-1.jpeg)\n\nEnter a name, choose *Android* as your front-end tech, and *Node.js* as your back-end tech. This will give you some sample code to get you started along with your project api keys:\n\n![kotlin-location-sharing-pusher-2](//images.ctfassets.net/1es3ne0caaid/3S9b0fAwtyGIiK0ykQy6O4/9be858e3ddc13a982e1205950fe3ee66/kotlin-location-sharing-pusher-2.jpeg)\n\nThen go to the **App Keys** tab and copy your app_id, key, and secret credentials, we'll need them later.\n\n### Set up a Node server\nFor this we will use Node. So check that you have `node` and `npm` installed on your machine by running this command in command prompt:\n\n```\n    node --version\n    //should display version numbers\n    \n    npm --version\n    //should display version numbers\n```\nIf that is not the case, [Download and Install Node](https://nodejs.org/en/download/).\n\nNext lets start building our server side script. Still in command prompt, run:\n\n```    \n    mkdir pusherLocationFeeds\n    //this creates a project directory to host your project files\n    \n    cd pusherLocationFeeds\n    // this navigates into the just created directory\n    \n    npm init -y\n    //this creates a default package.json file to host our project dependencies\n```\n\nLet’s install the Node modules we’ll need for this project. Basically we’ll need Express,  Pusher and body-parser. Inside the project directory, run:\n\n\n```    \n    npm install express, body-parser, pusher\n```\n\nYou can always verify these installations by opening your `package.json` file, at this point the dependency block should look like this :\n\n```      \n      \"dependencies\": {\n        \"body-parser\": \"^1.18.2\",\n        \"express\": \"^4.16.3\",\n        \"pusher\": \"^1.5.1\"\n      }\n```\n\nNext create a `server.js` file in the project directory. First we require the Node modules we installed:\n\n``` javascript    \n    var express = require(\"express\")\n    var pusher = require(\"pusher\")\n    var bodyParser = require(\"body-parser\")\n```    \n\nNext we configure Express:\n\n```    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n```    \n\nLets now create the Pusher object by passing the configuration object with the id, key, and the secret for the app created in the [Pusher Dashboard](https://dashboard.pusher.com/):\n\n\n``` javascript    \n    var pusher = new Pusher({    \n        appId: \"pusher_app_id\",\n        key: \"pusher_app_key\",\n        secret: \"pusher_app_secret\",\n        cluster: \"pusher_app_cluster\"\n      });\n```      \n\nAs we described earlier, we’ll use Pusher to publish events that happen in our application. These events have an `eventChannel`, which allows them to relate to a particular topic, an `eventName` that is used to identify the type of the event, and a `*payload*`, which you can attach any additional information to and send back to the client.\n\nIn our case, we’ll publish an event to a Pusher channel (“feed”) when the endpoint of our API is called. Then send the information as an attachment so we can show it in an activity feed on the client side.\n\nHere's  how we define our API's REST endpoint:\n\n\n``` javascript    \n    app.post('/location', (req, res,next)=\u003e{\n        \n        var longitude = req.body.longitude;\n        var latitude = req.body.latitude;\n        var username = req.body.username;\n      ...\n```      \n\nHere when we receive request parameters, we’ll extract the longitude, latitude and the username of the sender from the request and send back as response to the client like so:\n\n\n``` javascript      \n      ...  \n        pusher.trigger('feed', 'location', {longitude, latitude,username});\n        res.json({success: 200});\n      });\n```      \n\nNow when a user types in a username and clicks the share location button, the server returns the data like:\n\n``` json\n    {\n      \"longitude\" : \"longitude_value\"\n      \"latitude\" : \"latitude_value\"\n      \"username\" : \"username_value\"\n    }\n```\n\nFrom here, we then use the `adapter` to pass it to the `V``iewHolder` and lay it out on the screen.\nWhen you’re done, your `server.js` file should look like this:\n\n``` javascript\n    var pusher = require(\"pusher\")\n    var express = require(\"express\")\n    var Pusher = require(\"pusher\")\n    var bodyParser = require(\"body-parser\")\n    var pusher = new Pusher({\n        appId: \"app_id\",\n        key: \"app_key\",\n        secret: \"app_secrete\",\n        cluster: \"app_cluster\"\n      });\n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    app.post('/location', (req, res,next)=\u003e{\n        \n        var longitude = req.body.longitude;\n        var latitude = req.body.latitude;\n        var username = req.body.username;\n      \n        pusher.trigger('feed', 'location', {longitude, latitude,username});\n        res.json({success: 200});\n    });\n    app.listen(4040, function () {\n        console.log('Listening on 4040')\n      })\n```    \n    \n\nNow navigate to the terminal and cd into the  `server.js` file. Then run the server with:\n\n```\n    $ node server\n```\n\n## Run app\n\nOnce the server is live, go ahead and run the Android app.\nTo run the app, keep your system connected to the internet. Back in Android Studio, click the green play icon on the menu bar to run the application or select **Run** from the menu and click **Run ‘app’** from the dropdown. This action will launch your device modal for you to see all connected devices and emulators. If you’re using a physical device, simply select your device from the list of available devices shown and click **OK**.\n\nIf you’re running on an emulator, select your preferred emulator from the list of devices if you have one setup or follow these instructions to set up a new emulator:\n\nOn the devices modal, select **Create New Virtual Device.** This will launch a hardware selection modal where you will select any device of your choice for instance ( Nexus 5) and click **Next.** This will launch another modal where you will select the API level you will like to run on the device. Your can choose any of the available options for you or stick with the default and select API level 25. Click **Next** again to give your emulator a custom name and then click **Finish** to complete the setup. Now when you run the app again, you will see your emulator listed on the available devices modal. With your system still connected to the internet, select your preferred device and click **Ok**  to run.\n\n## Conclusion\n\nHopefully, this tutorial has shown you in an easy way, how to build an activity feed for Android apps with Pusher. As you continue to build stuff, Perhaps you’ll see for yourself that realtime updates are of great importance. When you do, Pusher has all you’ll need to get pushing. Project is available on [Github](https://github.com/christiannwamba/pusher-location-feeds) and the server side code also available [on this gist](https://gist.github.com/christiannwamba/75d23de8da1ae8feaf2bc13b528fd7f1).","metaTitle":"Build a location feed app for Android with Kotlin","metaDescription":"Build an Android app featuring a location feed provided by a Node.js server. Users are able to share their location and see where their friends are."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1T8D8gQUzGaY2mmMMgGmgG","type":"Entry","createdAt":"2018-05-09T09:41:30.600Z","updatedAt":"2018-05-09T09:45:00.307Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building a chat app with Kotlin for Android","url":"chat-kotlin-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/kotlin-pusher-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-05-08","description":"Learn to build a chat app for Android. Use Kotlin and Springboot to construct the endpoint for the API, and Kotlin for your app development.","prerequisite":"You will need the following installed: Java JDK (8 or above), Gradle (4.7 or above), the latest version of Android Studio (3.1.2 at the time of writing), and two Android emulators or devices to test. You should have at least an upper-beginner knowledge of Android development, including using Gradle and Android Studio.","content":"Mobile messaging apps are popular, but they don’t have to be difficult to implement.\n\nIn this tutorial, you’ll learn how to build a basic but good-looking chat app for Android using Kotlin and Pusher.\n\n![kotlin-android-chat-springboot-demo](//images.ctfassets.net/1es3ne0caaid/6AFUVeoTxC88mWOYKemICY/ca0ed6408b6e2023da24ab5de7f8afc9/kotlin-android-chat-springboot-demo.gif)\n\nIn the first screen, the user enters a username. Then, when the user enters a message,  the application sends it to an endpoint of server-side API, which publishes the information of the message to a Pusher channel so all the connected clients can receive it.\n\nYou’ll use Spring Boot and Kotlin to build the endpoint of the API.\n\nFor reference, [here is a GitHub repository](https://github.com/eh3rrera/kotlin-pusher-chat) with all the code shown in this tutorial and instructions to run it.\n\n## Prerequisites\n\nHere’s what you need to have installed/configured to follow this tutorial:\n\n- [Java JDK](http://www.oracle.com/technetwork/java/javase/downloads/index.html) (8 or superior)\n- [Gradle](https://gradle.org/install/) (4.7 or superior)\n- The latest version of [Android Studio](https://developer.android.com/studio/?hl=es-419) (at the time of this writing 3.1.2)\n- Two Android emulators or two devices to test the app (because there’s no fun in chatting alone)\n- Optionally, a Java IDE with Kotlin support like [IntelliJ IDEA Community Edition](https://www.jetbrains.com/idea/download/#section=windows)\n\nI also assume that you are familiar with:\n\n- Android development (an upper-beginner level at least)\n- Kotlin\n- Android Studio\n\nNow let’s start by creating a Pusher application.\n\n## Creating a Pusher application\n\nIf you haven’t already, create a free account at [Pusher](https://pusher.com/). \n\nThen, go to your [dashboard](https://dashboard.pusher.com) and create a Channels app, choosing a name, the cluster closest to your location, and optionally, Android as the frontend tech and Java as the backend tech:\n\n![kotlin-android-chat-springboot-pusher-1](//images.ctfassets.net/1es3ne0caaid/1bWNIJnpQQgyGiE6AOc4Oa/c324a7e8410a76f355b54bd80262defc/kotlin-android-chat-springboot-pusher-1.png)\n\nThis won’t lock you in an Android/Java stack, it will only give you some sample code to get started:\n\n![kotlin-android-chat-springboot-pusher-2](//images.ctfassets.net/1es3ne0caaid/7a5aZd6KCQMOwqM4gGQ8mK/36ae0232dcabbe5e06e3578d5d089212/kotlin-android-chat-springboot-pusher-2.png)\n\n\nSave your app id, key, secret and cluster values, you’ll need them later. You can also find them in the **App Keys** tab.\n\n## Building the server-side API\n\nGo to https://start.spring.io/ and choose to create a project with the following options:\n\n- A Gradle project\n- With Kotlin\n- Spring Boot 2.0.1 (or above version)\n- The project metadata of your preference\n- And the `Web` dependency\n\nThis is how the screen should look like:\n\n![kotlin-android-chat-springboot-springboot](//images.ctfassets.net/1es3ne0caaid/1R9YWZ7eAgIwSoEiucmYAe/cc40e609a2a2f21993551fa36ddb624b/kotlin-android-chat-springboot-springboot.png)\n\nGenerate the project and unzip the downloaded file.\n\nYou can open the project in an IDE but it’s not really necessary. You’re only going to make three changes to the project.\n\nFirs, add the Pusher dependency at the end of the file `build.gradle`:\n\n``` gradle\n    dependencies {\n      ...\n      compile(\"com.pusher:pusher-http-java:1.0.0\")\n    }\n```\n\nNext, in `src/main/kotling/com/example/demo`, create the classes `Message.kt` and `MessageController.kt`.\n\n`Message.kt` is a data class for the chat messages:\n\n``` kotlin\n    data class Message(var user:String,\n                            var message:String,\n                            var time:Long)\n\n`MessageController.kt` is a REST controller that defines a POST endpoint to publish the received message object to a Pusher channel (`chat`):\n\n    import com.pusher.rest.Pusher\n    import org.springframework.http.ResponseEntity\n    import org.springframework.web.bind.annotation.*\n    \n    @RestController\n    @RequestMapping(\"/message\")\n    class MessageController {\n        private val pusher = Pusher(\"PUSHER_APP_ID\", \"PUSHER_APP_KEY\", \"PUSHER_APP_SECRET\")\n    \n        init {\n            pusher.setCluster(\"PUSHER_APP_CLUSTER\")\n        }\n    \n        @PostMapping\n        fun postMessage(@RequestBody message: Message) : ResponseEntity\u003cUnit\u003e {\n            pusher.trigger(\"chat\", \"new_message\", message)\n            return ResponseEntity.ok().build()\n        }\n    }\n```\n\nAs you can see, the Pusher object is configured when the class is initialized, just replace your app information from your [dashboard](https://dashboard.pusher.com).\n\nAnd that’s it.\n\nNow let’s build the Android app.\n\n## Setting up the Android project\n\nOpen Android Studio and create a new project with Kotlin support:\n\n![kotlin-android-chat-springboot-android-1](//images.ctfassets.net/1es3ne0caaid/4sAYAvj3v2mU0e46aYmOSO/f745a1ba56f328cac19517a1fbd4026f/kotlin-android-chat-springboot-android-1.png)\n\nWe're not going to use anything special, so we can safely support a low API level:\n\n![kotlin-android-chat-springboot-android-2](//images.ctfassets.net/1es3ne0caaid/5eDGtIlJEWIw40smMCYIQw/b37a49562c22930087abe99c7789c598/kotlin-android-chat-springboot-android-2.png)\n\n\nNext, create an initial empty activity:\n\n![kotlin-android-chat-springboot-android-3](//images.ctfassets.net/1es3ne0caaid/32tD1caQ2kuCOQauwUWyE0/03315b9180284ed56684e86f2c9d08ea/kotlin-android-chat-springboot-android-3.png)\n\nAnd use the default name of `MainActivity` with backward compatibility:\n\n![kotlin-android-chat-springboot-android-4](//images.ctfassets.net/1es3ne0caaid/6NEELrK5kkQCMIOcYO0wii/9873e61df9bc6561934d55214e136edf/kotlin-android-chat-springboot-android-4.png)\n\nOnce everything is set up, let's install the dependencies the app is going to use. In the `dependencies` section of the `build.gradle` file of your application module add:\n\n``` gradle\n    dependencies {\n        ...\n    \n        implementation 'com.pusher:pusher-java-client:1.8.0'\n        implementation 'com.android.support:recyclerview-v7:27.1.1'\n        implementation 'com.squareup.retrofit2:retrofit:2.4.0'\n        implementation 'com.squareup.retrofit2:converter-moshi:2.4.0'\n    \n        ...\n    }\n```\n\nAt the time of writing, the latest SDK version is 27, so that's my target SDK version when specifying the `RecyclerView`'s version.\n\nMake sure this version number matches the version of the `appcompat` library:\n\n``` gradle\n    dependencies {\n        ...\n        // The version of this library\n        implementation 'com.android.support:appcompat-v7:27.1.1'\n        ...\n        // And the version of this library should match\n        implementation 'com.android.support:recyclerview-v7:27.1.1'\n    \n        ...\n    }\n```\n\nBesides Pusher and `RecyclerView` to show the chat messages, the app is going to use [Retrofit](https://github.com/square/retrofit) to make a request to the API with [Moshi](https://github.com/square/retrofit/tree/master/retrofit-converters/moshi) for serialization to and from JSON.\n\nSync the Gradle project so the modules can be installed and the project built.\n\nNow let's add the `INTERNET` permission to the `AndroidManifest.xml` file. This is required so we can connect to Pusher and get the events in realtime:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        package=\"com.pusher.pusherchat\"\u003e\n    \n        \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n    \n        \u003capplication\n            ...\n        \u003c/application\u003e\n    \n    \u003c/manifest\u003e\n```\n\nAnd the project is all set up. Let’s start building the app.\n\n\n## Building the Android app\n\nIn the `java` directory, let’s create the data class for the messages, `com.pusher.pusherchat.Messages.kt` , with the same properties as the API version:\n\n``` kotlin\n    data class Message(var user:String,\n                            var message:String,\n                            var time:Long)\n```\n\nIf you haven’t work with Retrofit, you must know it works by turning an API into an interface.\n\nSo create the interface `com.pusher.pusherchat.ChatService` (your package may be different) and paste the following code:\n\n``` kotlin\n    import retrofit2.Call\n    import retrofit2.Retrofit\n    import retrofit2.converter.moshi.MoshiConverterFactory\n    import retrofit2.http.POST\n    import retrofit2.http.Body\n    \n    interface ChatService {\n        @POST(\"/message\")\n        fun postMessage(@Body body:Message): Call\u003cVoid\u003e\n    \n        companion object {\n            private const val BASE_URL = \"http://10.0.2.2:8080/\"\n    \n            fun create(): ChatService {\n                val retrofit = Retrofit.Builder()\n                        .baseUrl(BASE_URL)\n                        .addConverterFactory(MoshiConverterFactory.create())\n                        .build()\n                return retrofit.create(ChatService::class.java)\n            }\n        }\n    }\n```\n\nThe interface contains the method `postMessage` that mimics the endpoint of the API.\n\nAs the endpoint doesn’t return a value (only a status code that will be obtained with the `Response`object), the method defines `Call\u003cVoid\u003e` as the method return type.\n\nIf you’re wondering why it the type isn’t `Call\u003cUnit\u003e`, Retrofit doesn’t support this type natively yet. Follow this [issue](https://github.com/square/retrofit/issues/2329) for more information.\n\nThe interface also includes a [companion object](https://kotlinlang.org/docs/reference/object-declarations.html#companion-objects) that creates a Retrofit instance with the Moshi converter and an implementation of the API.\n\nNotice the use of `10.0.2.2` instead of `localhost`. This is how the Android emulator sees localhost. If you’re going to test the app on a device or if your API endpoint resides on another server, update the IP accordingly.\n\nAlso, by default, the API will run on port `8080`. \n\nThe first screen of the app will allow the user to enter a username. In the directory `res/layout` open the file `activity_main` and replace the content with the following:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\"\u003e\n    \n        \u003cTextView\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Login\"\n            android:textSize=\"25dp\"\n            android:id=\"@+id/loginLabel\"\n            android:gravity=\"center\"\n            app:layout_constraintBottom_toTopOf=\"@id/username\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            app:layout_constraintVertical_chainStyle=\"packed\" /\u003e\n    \n        \u003cEditText\n            android:id=\"@+id/username\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:hint=\"Username\"\n            android:inputType=\"text\"\n            android:maxLines=\"1\"\n            app:layout_constraintTop_toBottomOf=\"@id/loginLabel\"\n            app:layout_constraintBottom_toTopOf=\"@id/btnLogin\" /\u003e\n    \n        \u003cButton\n            android:id=\"@+id/btnLogin\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Enter\"\n            app:layout_constraintTop_toBottomOf=\"@+id/username\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"/\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nUsing a [ConstraintLayout](https://developer.android.com/training/constraint-layout/), it will show a label with the text **Login**, a text box to enter the username, and a button to log the user in.\n\nFor this app, the username will be stored in an `App` class (`com.pusher.pusherchat.App.kt`) that will be available for all activities:\n\n``` kotlin\n    import android.app.Application\n    \n    class App:Application() {\n        companion object {\n            lateinit var user:String\n        }\n    }\n```\n\nIn a more complex application, you might want to save the username to the [shared preferences](https://developer.android.com/training/data-storage/shared-preferences) or in an [SQLite database](https://developer.android.com/training/data-storage/room/). \n\nThis way, the code for the main activity (`com.pusher.pusherchat.MainActivity.kt`) will look like this:\n\n``` kotlin\n    package com.pusher.pusherchat\n    \n    import android.content.Intent\n    import android.support.v7.app.AppCompatActivity\n    import android.os.Bundle\n    import android.widget.Toast\n    import kotlinx.android.synthetic.main.activity_main.*\n    \n    class MainActivity : AppCompatActivity() {\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n    \n            btnLogin.setOnClickListener {\n                if (username.text.isNotEmpty()) {\n                    val user = username.text.toString()\n    \n                    App.user = user\n                    startActivity(Intent(this@MainActivity, ChatActivity::class.java))\n                } else {\n                    Toast.makeText(applicationContext,\"Username should not be empty\", Toast.LENGTH_SHORT).show()\n                }\n            }\n        }\n    }\n```\n\nIf the username textbox is not empty, it stores the username and starts the next activity (the chat). Otherwise, an error message is shown.\n\nNow we need the `ChatActivity` class, so right-click your main package (`com.pusher.pusherchat` in my case) and choose from the contextual menu the option *New → Activity → Empty Activity* to create the activity class:\n\n![kotlin-android-chat-springboot-android-5](//images.ctfassets.net/1es3ne0caaid/5CTtGA9i0wYAG8g6KWmymY/1aba640c4c11acae1de10f72623de8a8/kotlin-android-chat-springboot-android-5.png)\n\nThis chat app will format in a different way the messages from the current user and the messages from the other users.\n\nIn the `res/drawable` directory, create a new drawable resource file, `my_message_bubble.xml` with the following content:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \n    \u003cshape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:shape=\"rectangle\"\u003e\n    \n        \u003csolid android:color=\"#9d48e4\"\u003e\u003c/solid\u003e\n    \n        \u003ccorners android:topRightRadius=\"5dp\" android:radius=\"40dp\"\u003e\u003c/corners\u003e\n    \n    \u003c/shape\u003e\n```\n\nThis will give you a rectangle with rounded corners, however, in the case of the top right corner, the radius is smaller to give the effect that the bubble is coming from the right:\n\n![kotlin-android-chat-springboot-purple-icon](//images.ctfassets.net/1es3ne0caaid/7e0Yack5peguS2ywUCY2mM/46e4849818d05b981bdefc539f21a6e2/kotlin-android-chat-springboot-purple-icon.png)\n\nFor messages coming from other users, create another file in the `res/drawable` directory, `other_message_bubble.xml`, with the following content:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \n    \u003cshape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:shape=\"rectangle\"\u003e\n    \n        \u003csolid android:color=\"#ff00ff\"\u003e\u003c/solid\u003e\n    \n        \u003ccorners  android:topLeftRadius=\"5dp\" android:radius=\"40dp\"\u003e\u003c/corners\u003e\n    \n    \u003c/shape\u003e\n```\n\nThis changes the color and the radius on the top left corner to differentiate the messages of the users.\n\nOpen the layout file that was created for the `ChatActivity` (`res/layout/activity_chat.xml`) and replace its contents with the following:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".ChatActivity\"\u003e\n    \n        \u003candroid.support.v7.widget.RecyclerView\n            android:id=\"@+id/messageList\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:layout_marginBottom=\"55dp\"\n            android:layout_marginLeft=\"10dp\"\n            android:layout_marginStart=\"10dp\"\n            android:scrollbars=\"vertical\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\u003e\n        \u003c/android.support.v7.widget.RecyclerView\u003e\n    \n        \u003cView\n            android:layout_width=\"0dp\"\n            android:layout_height=\"2dp\"\n            android:background=\"@color/colorPrimaryDark\"\n            android:layout_marginBottom=\"0dp\"\n            app:layout_constraintBottom_toTopOf=\"@+id/layout_messageArea\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"/\u003e\n    \n        \u003cLinearLayout\n            android:id=\"@+id/layout_messageArea\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"horizontal\"\n            android:minHeight=\"48dp\"\n            android:background=\"#ffffff\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\u003e\n    \n            \u003cEditText\n                android:id=\"@+id/txtMessage\"\n                android:hint=\"Enter message\"\n                android:background=\"@android:color/transparent\"\n                android:layout_gravity=\"center\"\n                android:layout_marginLeft=\"16dp\"\n                android:layout_marginRight=\"16dp\"\n                android:layout_width=\"0dp\"\n                android:layout_weight=\"1\"\n                android:layout_height=\"wrap_content\"\n                android:maxLines=\"6\"/\u003e\n    \n            \u003cButton\n                android:id=\"@+id/btnSend\"\n                android:text=\"SEND\"\n                android:textSize=\"14dp\"\n                android:clickable=\"true\"\n                android:layout_width=\"64dp\"\n                android:layout_height=\"48dp\"\n                android:gravity=\"center\"\n                android:layout_gravity=\"bottom\" /\u003e\n    \n        \u003c/LinearLayout\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThis defines:\n\n- A `RecyclerView` to show the chat messages\n- A `View` that acts as a line separator\n- A `LinearLayout` that contains:\n  - An `EditText` where the users enter their message\n  - A `Button` to send the message\n\nIt should look like this:\n\n![kotlin-android-chat-springboot-list](//images.ctfassets.net/1es3ne0caaid/P0q4mYkqIgUqagca2qksq/70a32cdabdaab2a5af88eada2fc81811/kotlin-android-chat-springboot-list.png)\n\nNow, the app is going to present different information for the messages sent by the current user and the messages sent by the rest of the users.\n\nSo create two new layout resource files for the messages of the users:\n\n``` xml\n    \u003c!-- res/layout/my_message.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/txtMyMessage\"\n            android:text=\"Hi, my message\"\n            android:background=\"@drawable/my_message_bubble\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:maxWidth=\"240dp\"\n            android:padding=\"15dp\"\n            android:elevation=\"5dp\"\n            android:textColor=\"#ffffff\"\n            android:layout_marginRight=\"10dp\"\n            android:layout_marginTop=\"5dp\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/txtMyMessageTime\"\n            android:text=\"12:00 PM\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:textSize=\"10sp\"\n            android:textStyle=\"bold\"\n            android:layout_marginRight=\"10dp\"\n            app:layout_constraintBottom_toBottomOf=\"@+id/txtMyMessage\"\n            app:layout_constraintRight_toLeftOf=\"@+id/txtMyMessage\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\nAnd:\n``` xml\n    \u003c!-- res/layout/other_message.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:paddingTop=\"8dp\"\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/txtOtherUser\"\n            android:text=\"John Doe\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:textSize=\"12sp\"\n            android:textStyle=\"bold\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            android:layout_marginTop=\"5dp\" /\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/txtOtherMessage\"\n            android:text=\"Hi, John's message\"\n            android:background=\"@drawable/other_message_bubble\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:maxWidth=\"240dp\"\n            android:padding=\"15dp\"\n            android:elevation=\"5dp\"\n            android:textColor=\"#ffffff\"\n            android:layout_marginTop=\"4dp\"\n            app:layout_constraintTop_toBottomOf=\"@+id/txtOtherUser\" /\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/txtOtherMessageTime\"\n            android:text=\"12:00 PM\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:textSize=\"10sp\"\n            android:textStyle=\"bold\"\n            app:layout_constraintLeft_toRightOf=\"@+id/txtOtherMessage\"\n            android:layout_marginLeft=\"10dp\"\n            app:layout_constraintBottom_toBottomOf=\"@+id/txtOtherMessage\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nFor the current user messages, the app shows the time the message was sent and the message itself, using the bubble defined earlier as background:\n\n![kotlin-android-chat-springboot-current-user](//images.ctfassets.net/1es3ne0caaid/JaoMQNIQqQAYCUusGuwwC/b8d9e31d4887ecc19ecb07a2a9d5b5fe/kotlin-android-chat-springboot-current-user.png)\n\nFor the other user’s messages, in addition to the previous information, the app shows the username of the user:\n\n![kotlin-android-chat-springboot-other-user](//images.ctfassets.net/1es3ne0caaid/3DO9WSYHOo6UCy6kkeUKkq/f4c4f5319f24a000685ae0a1aa7beaac/kotlin-android-chat-springboot-other-user.png)\n\n\nThe [RecyclerView](https://developer.android.com/guide/topics/ui/layout/recyclerview) will need an [Adapter](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter) to provide the views that represent the messages. So let’s create a Kotlin class, `com.pusher.pusherchat.MessageAdapter.kt`, and go step by step building it.\n\nFirst, let’s add all the `import` statements we’ll need after the package declaration:\n``` kotlin\n    package com.pusher.pusherchat\n    \n    import android.content.Context\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    import kotlinx.android.synthetic.main.my_message.view.*\n    import kotlinx.android.synthetic.main.other_message.view.*\n```\nNext, outside the class, let’s define two private constants to represent the two types of chat messages:\n``` kotlin\n    private const val VIEW_TYPE_MY_MESSAGE = 1\n    private const val VIEW_TYPE_OTHER_MESSAGE = 2\n```\nUsually, constants are placed in a companion object inside the class, which makes them equivalent to `public static final` fields in Java. But for simple use cases, like this one, you can also define them this way.\n\nMoving on, let’s specify that this class is a subclass of a class of type   `RecyclerView.Adapter\u003cMessageViewHolder\u003e`, and define `MessageViewHolder` as an open class that extends `RecyclerView.ViewHolder`  and from which the two types of messages will derive:\n``` kotlin\n    //...\n    class MessageAdapter (val context: Context) : RecyclerView.Adapter\u003cMessageViewHolder\u003e() {\n    }\n    \n    open class MessageViewHolder (view: View) : RecyclerView.ViewHolder(view) {\n        open fun bind(message:Message) {}\n    }\n```\nThis way, inside the `MessageAdapter` class, we can define these two subclasses that represent the views defined in the layouts:\n``` kotlin\n    class MessageAdapter (val context: Context) : RecyclerView.Adapter\u003cMessageViewHolder\u003e() {\n    \n      inner class MyMessageViewHolder (view: View) : MessageViewHolder(view) {\n        private var messageText: TextView = view.txtMyMessage\n        private var timeText: TextView = view.txtMyMessageTime\n    \n        override fun bind(message: Message) {\n            messageText.text = message.message\n            timeText.text = DateUtils.fromMillisToTimeString(message.time)\n        }\n      }\n    \n      inner class OtherMessageViewHolder (view: View) : MessageViewHolder(view) {\n        private var messageText: TextView = view.txtOtherMessage\n        private var userText: TextView = view.txtOtherUser\n        private var timeText: TextView = view.txtOtherMessageTime\n    \n        override fun bind(message: Message) {\n            messageText.text = message.message\n            userText.text = message.user\n            timeText.text = DateUtils.fromMillisToTimeString(message.time)\n        }\n      }\n    }\n```\nOf course, you’ll need the class `DateUtils` to convert the time from milliseconds (this is how the time will be handled internally) to a readable time string. This is the definition:\n``` kotlin\n    import java.text.SimpleDateFormat\n    import java.util.*\n    \n    object DateUtils {\n        fun fromMillisToTimeString(millis: Long) : String {\n            val format = SimpleDateFormat(\"hh:mm a\", Locale.getDefault())\n            return format.format(millis)\n        }\n    }\n```\nBack to the `MessageAdapter` class, let’s add an `ArrayList` to store the messages and a method to add new messages to it:\n``` kotlin\n    //...\n    class MessageAdapter (val context: Context) : RecyclerView.Adapter\u003cMessageViewHolder\u003e() {\n      private val messages: ArrayList\u003cMessage\u003e = ArrayList()\n    \n      fun addMessage(message: Message){\n        messages.add(message)\n        notifyDataSetChanged()\n      }\n      \n      //...\n    }\n```\nThis way, you can implement the method to get the item count:\n``` kotlin\n    class MessageAdapter (val context: Context) : RecyclerView.Adapter\u003cMessageViewHolder\u003e() {\n      //...\n      \n      override fun getItemCount(): Int {\n        return messages.size\n      }\n      \n      //...\n    }\n```\nAnd using the username entered in the first screen, return either the `VIEW_TYPE_MY_MESSAGE` constant or `VIEW_TYPE_OTHER_MESSAGE` in the `getItemViewType` method:\n``` kotlin\n    class MessageAdapter (val context: Context) : RecyclerView.Adapter\u003cMessageViewHolder\u003e() {\n      //...\n      \n      override fun getItemViewType(position: Int): Int {\n        val message = messages.get(position)\n    \n        return if(App.user == message.user) {\n            VIEW_TYPE_MY_MESSAGE\n        }\n        else {\n            VIEW_TYPE_OTHER_MESSAGE\n        }\n      }\n      \n      //...\n    }\n```\nSo in the method `onCreateViewHolder`, you can inflate the view according to the type of message using the appropriate layout:\n``` kotlin\n    class MessageAdapter (val context: Context) : RecyclerView.Adapter\u003cMessageViewHolder\u003e() {\n      //...\n      \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MessageViewHolder {\n        return if(viewType == VIEW_TYPE_MY_MESSAGE) {\n            MyMessageViewHolder(\n              LayoutInflater.from(context).inflate(R.layout.my_message, parent, false)\n            )\n        } else {\n            OtherMessageViewHolder(\n              LayoutInflater.from(context).inflate(R.layout.other_message, parent, false)\n            )\n        }\n      }\n      \n      //...\n    }\n```\nThis way, the only thing that the method `onBindViewHolder` has to do is to invoke the `bind` method of the `MessageViewHolder` instance it receives as an argument:\n``` kotlin\n    class MessageAdapter (val context: Context) : RecyclerView.Adapter\u003cMessageViewHolder\u003e() {\n      //...\n      \n      override fun onBindViewHolder(holder: MessageViewHolder, position: Int) {\n        val message = messages.get(position)\n    \n        holder?.bind(message)\n      }\n      \n      //...\n    }\n```\nAnd that’s the adapter.\n\nNow in the class `com.pusher.pusherchat.ChatActivity`, after the package declaration, add the `import` statements the class will need and a constant (for logging):\n``` kotlin\n    package com.example.deborah.pusherchat\n    \n    import android.support.v7.app.AppCompatActivity\n    import android.os.Bundleimport android.content.Context\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import android.view.inputmethod.InputMethodManager\n    import android.widget.Toast\n    import kotlinx.android.synthetic.main.activity_chat.*\n    import java.util.*\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    private const val TAG = \"ChatActivity\"\n    \n    class ChatActivity : AppCompatActivity() {\n    \n        //...\n    }\n```\nAlso in the `ChatActivity` class, configure a `MessageAdapter` instance in the following way:\n``` kotlin\n    //...\n    class ChatActivity: AppCompatActivity() {\n        private lateinit var adapter: MessageAdapter\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_chat)\n    \n            messageList.layoutManager = LinearLayoutManager(this)\n            adapter = MessageAdapter(this)\n            messageList.adapter = adapter\n        }\n    }\n```\nNow, when the button to send a message is pressed, if the message box is not empty, you need to:\n\n- Build a `Message` object\n- Call the API endpoint to publish the message to a Pusher channel\n- Reset the input and hide the keyboard\n\nOtherwise, show and/or log the corresponding errors.\n\nThis is done with the following code:\n``` kotlin\n    class ChatActivity: AppCompatActivity() {\n        private lateinit var adapter: MessageAdapter\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            //...\n            \n            btnSend.setOnClickListener {\n              if(txtMessage.text.isNotEmpty()) {\n                val message = Message(\n                    App.user,\n                    txtMessage.text.toString(),\n                    Calendar.getInstance().timeInMillis\n                )\n    \n                val call = ChatService.create().postMessage(message)\n    \n                call.enqueue(object : Callback\u003cVoid\u003e {\n                    override fun onResponse(call: Call\u003cVoid\u003e, response: Response\u003cVoid\u003e) {\n                      resetInput()\n                      if (!response.isSuccessful) {\n                        Log.e(TAG, response.code().toString());\n                        Toast.makeText(applicationContext,\"Response was not successful\", Toast.LENGTH_SHORT).show()\n                      }\n                    }\n    \n                    override fun onFailure(call: Call\u003cVoid\u003e, t: Throwable) {\n                      resetInput()\n                      Log.e(TAG, t.toString());\n                      Toast.makeText(applicationContext,\"Error when calling the service\", Toast.LENGTH_SHORT).show()\n                    }\n               })\n             } else {\n               Toast.makeText(applicationContext,\"Message should not be empty\", Toast.LENGTH_SHORT).show()\n             }\n          }\n        }\n    \n        private fun resetInput() {\n          // Clean text box\n          txtMessage.text.clear()\n    \n          // Hide keyboard\n          val inputManager = \n            getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\n          inputManager.hideSoftInputFromWindow(\n            currentFocus!!.windowToken, InputMethodManager.HIDE_NOT_ALWAYS\n          )\n        }\n    }\n```\nFinally, you need to set up a Pusher instance to listen for messages and add them to the `RecyclerView` when one is received:\n``` kotlin\n    class ChatActivity: AppCompatActivity() {\n      private lateinit var adapter: MessageAdapter\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n          //...\n          setupPusher()\n      }\n      \n      private fun setupPusher() {\n        val options = PusherOptions()\n        options.setCluster(\"PUSHER_APP_CLUSTER\")\n    \n        val pusher = Pusher(\"PUSHER_APP_KEY\", options)\n        val channel = pusher.subscribe(\"chat\")\n    \n        channel.bind(\"new_message\") { channelName, eventName, data -\u003e\n            val jsonObject = JSONObject(data)\n    \n                val message = Message(\n                        jsonObject[\"user\"].toString(),\n                        jsonObject[\"message\"].toString(),\n                        jsonObject[\"time\"].toString().toLong()\n                )\n    \n                runOnUiThread {\n                    adapter.addMessage(message)\n                    // scroll the RecyclerView to the last added element\n                    messageList.scrollToPosition(adapter.itemCount - 1);\n                }\n    \n        }\n    \n        pusher.connect()\n      }\n      //...\n    }\n```\nJust set your Pusher app cluster and key and you’ll be ready to test the app.\n\n## Testing the app\n\nFirst of all, run the API by executing the following Gradle command in the root directory of the Spring Boot application:\n```\n    gradlew bootRun\n```\nOr if you’re using an IDE, execute the main class of the application, the one annotated with `@SpringBootApplication` (`com.example.demo.DemoApplication` in my case).\n\nThen, in Android Studio, [execute your application on two Android emulators](https://stackoverflow.com/questions/28619463/how-to-use-two-emulators-at-the-same-time-in-the-same-project-in-android-studio).\n\nThis is how the first screen should look like:\n\n![kotlin-android-chat-springboot-login](//images.ctfassets.net/1es3ne0caaid/3LNtpTOzaEUqG2m0Qy8KAA/50142e3d73c462d78e6715b7ae1f548e/kotlin-android-chat-springboot-login.png)\n\nAnd start playing with the app:\n\n![kotlin-android-chat-springboot-demo](//images.ctfassets.net/1es3ne0caaid/6AFUVeoTxC88mWOYKemICY/ca0ed6408b6e2023da24ab5de7f8afc9/kotlin-android-chat-springboot-demo.gif)\n\nYou can also monitor the messages sent to Pusher in the **Debug Console** of your [dashboard](https://dashboard.pusher.com): \n\n![kotlin-android-chat-springboot-pusher-3](//images.ctfassets.net/1es3ne0caaid/1gTSbkM6cUMOISEkCok8s8/39bbfa45ee146658b4b91d60154baf70/kotlin-android-chat-springboot-pusher-3.png)\n\n## Conclusion\n\nYou have learned the basics of how to create a chat app with Kotlin and Pusher for Android.\n\nFrom here, you can extend it in many ways:\n\n- Change the design\n- Show more information\n- Save the messages to a database\n- Implement a real authentication\n- Use [presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels) to be aware of who is subscribed to the channel\n- Change the implementation of the API or add more functionality\n\nRemember that all of the source code for this application is available at [Github](https://github.com/eh3rrera/kotlin-pusher-chat).","metaTitle":"Building a chat app with Kotlin for Android","metaDescription":"This tutorial will show you how to build a chat app for Android using Kotlin, Springboot and Gradle."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1ruuQyBJ6QAUykmMCuAQaS","type":"Entry","createdAt":"2018-05-03T10:17:53.628Z","updatedAt":"2018-05-31T09:08:17.751Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Publish Android notifications from the Guardian’s API","url":"android-notifications-guardian-api","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/pusher-news","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-05-02","description":"Learn how to build a news notification service that hooks into the Guardian's public APIs. Create an Android app using Kotlin, subscribe to Guardian news sections, and receive push notifications for breaking news.","prerequisite":"To follow this tutorial you will need some experience with Kotlin. You will also need appropriate IDEs: IntelliJ IDEA and Android Studio are recommended. You will also need free accounts with Pusher and Guardian Open Platform.","content":"A recent piece about the New York Times tech team “[How to Push a Story](https://www.nytimes.com/2018/04/01/insider/how-to-push-a-story.html)” chronicled the lengths they go to make sure that the push notifications they send are relevant, timely, and interesting.\n\nThe publishing platform at the NYT lets editors to put notifications through an approval process,  measures the tolerance for the frequency of notifications, and tracks whether users un-subscribe from them. \n\nIn this article we are going to build a news notification service. It will publish articles from [The Guardian](https://www.theguardian.com) - who offer [publi](http://open-platform.theguardian.com/)[c](http://open-platform.theguardian.com/) [API](http://open-platform.theguardian.com/)[s](http://open-platform.theguardian.com/). We will send push notifications for every news article they publish, and let user users subscribe to their interests so they get notified when news breaks.\n\n![android-guardian-beams-demo](//images.ctfassets.net/1es3ne0caaid/4hpz1rjqecwsWaW2AMsqGo/e10372db40ec505f3d3c7003144fe4a9/android-guardian-beams-demo.gif)\n\n## Prerequisites\n\nIn order to follow along, you will need some experience with the Kotlin programming language, which we are going to use for both the backend and frontend of our application. \n\nYou will also need appropriate IDEs. We suggest [IntelliJ IDEA](https://www.jetbrains.com/idea/) and [Android Studio](https://developer.android.com/studio/index.html). Finally, you will need a free [Pusher Account](https://dash.pusher.com/authenticate/register?ref=pn-landing-page) and a free [Guardian Open Platform account](http://open-platform.theguardian.com/access/). Sign up now if you haven’t already done so.\n\n## Setting up your Pusher account\n\nIn order to use the Push Notifications API and SDKs from Pusher, you need to create a new Beams instance in the [Pusher Beta Dashboard](https://dash.pusher.com/authenticate/register?ref=pn-social-network-android).\n\nNext, on your **Overview** for your Beams instance, click **Open Quickstart** to add your Firebase Cloud Messaging (FCM) Server Key to the Beams instance. \n\nAfter saving your FCM key, you can finish the Quickstart wizard by yourself to send your first push notification, or just continue as we’ll cover this below.\n\nIt’s important to make sure that you download and keep the `google-services.json` file from the Firebase Console as we are going to need this later on. \n\nOnce you have created your Push Notifications instance, you will also need to note down your “Instance ID” and “Secret Key” from the Pusher Dashboard, found under the “Keys” section of your Instance settings.\n\n## Building the backend\n\nThe backend of our system is responsible for recognising that a new news story has been published and broadcasting out push notifications about it. We are going to build this in Kotlin using the Spring Boot framework, as this is a very quick way to get going for server-side Kotlin applications. All of the backend work will be done in IntelliJ.\n\nHead over to https://start.spring.io/ to create our project structure. We need to specify that we are building a **Gradle** project with **Kotlin** and Spring Boot **2.0.1** (or newer if available at the time of reading), and we need to include the “Web” and “Cache” components:\n\n![android-guardian-beams-spring](//images.ctfassets.net/1es3ne0caaid/3mqWJf6yTe8U2Qe6aOogG/d55761f0d4cb40d2d5b156f42f05ece9/android-guardian-beams-spring.png)\n\nThe **Generate Project** button will give you a zip file containing our application structure. Unpack this somewhere. At any time, you can execute `./gradlew bootRun` to build and start your backend server running.\n\n\n\u003e **Note:** when you run this, the output will appear to stop at 80%. This is because gradle expects to run to completion, whereas we are starting a long-running application here.\n\nFirstly though, we need to add some dependencies. Open up the `build.gradle` file and add the following to the `dependencies` section:\n\n```\n    compile 'com.pusher:push-notifications-server-java:0.9.0'\n    runtime 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.2'\n```\n\nThe first of these is the Pusher library needed for triggering push notifications. The second is the Jackson module needed for serialising and deserialising Kotlin classes into JSON.\n\nNow, build the project. This will ensure that all of the dependencies are downloaded and made available and that everything compiles and builds correctly:\n\n```\n    $ ./gradlew build\n    \n    \u003e Task :test\n    2018-04-28 09:47:14.913  INFO 41535 --- [       Thread-5] o.s.w.c.s.GenericWebApplicationContext   : Closing org.springframework.web.context.support.GenericWebApplicationContext@656af5fa: startup date [Sat Apr 28 09:47:13 BST 2018]; root of context hierarchy\n    \n    \n    BUILD SUCCESSFUL in 6s\n    5 actionable tasks: 5 executed\n```\n\n## Retrieving the list of sections\n\nOur application is going to allow subscription to a number of sections from the news feed provided by The Guardian. This means that we need to offer a list of the sections that can be subscribed to.\n\nIn order to do this, we need to create some classes that can represent the response structure from the Guardian API. In this case we are listing sections, so we need to create the following classes under `src/main/kotlin/com/pusher/newsbackend`:\n\n``` kotlin\n    data class Section(\n            val id: String,\n            @JsonProperty(\"webTitle\") val title: String\n    )\n    \n    data class SectionResponse(\n            val results: List\u003cSection\u003e\n    )\n    \n    data class SectionPayload(\n            val response: SectionResponse\n    )\n```\n\nNext we’ll create the start of our component for interacting with the Guardian API. Create a new class called `GuardianApi` as follows:\n\n``` kotlin\n    @Component\n    open class GuardianApi(\n        @Value(\"\\${guardian.apiKey}\") private val apiKey: String\n    ) {\n        private val restTemplate = RestTemplate()\n    \n        open fun listSections(): List\u003cSection\u003e {\n            val uri = UriComponentsBuilder.fromUriString(\"http://content.guardianapis.com/sections\")\n                    .queryParam(\"api-key\", apiKey)\n                    .build()\n                    .toUri()\n    \n            return restTemplate.getForObject(uri, SectionPayload::class.java)\n                    ?.response?.results ?: emptyList()\n        }\n    }\n```\n\nCalls to the `listSections()` method will now go and retrieve the full list of sections from The Guardian, as represented by our `SectionPayload` class, and then return the results list from this class.\n\n\n\u003e **Note:** The presence of the `@Component` annotation means that Spring will automatically find this class during Component Scanning and make it available.\n\n\n\u003e **Note:** Both the class and method are marked as `open`. This will become important in a short while when we introduce caching.\n\nNext we need a controller to actually make the data available to our clients. Create a new class called `SectionController` as follows:\n\n``` kotlin\n    @RestController\n    class SectionController(\n            private val api: GuardianApi\n    ) {\n        @RequestMapping(\"/sections\")\n        fun getSections() = api.listSections()\n    }\n```\n\nThe only thing we need now is to configure our API key. Add this to the existing `src/main/resources/application.properties` file, using the value you obtained earlier by registering with The Guardian Open Platform:\n\n```\n    guardian.apiKey=\u003cGUARDIAN API KEY HERE\u003e\n```\n\n\u003e **Note:** this value should be put in exactly as it was provided, without any quotes or whitespace present.\n\nAt this point, we can start our application and retrieve a list of sections by calling our handler.\n\n## Caching of sections\n\nOne thing to be careful of whenever you work with a third-party API is any usage limits they have. For example, The Guardian restricts you to: \n\n- Up to 12 calls per second\n- Up to 5,000 calls per day\n\nWe can help alleviate that by reducing the number of calls we make. The list of sections is going to be relatively static, so why not cache it in our application and dramatically reduce the number of calls going out. Spring makes this really easy as we will see.\n\nFirstly we need some Spring configuration. Create a new class called `CachingConfig` as follows:\n\n``` kotlin\n    @Configuration\n    @EnableCaching\n    open class CachingConfig {\n        @Bean\n        open fun cacheManager() = ConcurrentMapCacheManager(\"sections\")\n    }\n```\n\nThis enables caching in our application, and creates a cache manager that knows about one cache - “sections”. \n\nNext, add the `@Cachable` annotation to our `listSections()` method of the `GuardianApi` class:\n\n```\n    @Cacheable(\"sections\")\n    open fun listSections(): List\u003cSection\u003e {\n```\n\nAt this point, we are now caching the calls to The Guardian API. If you make repeated calls to our handler in quick succession - regardless of whether they come from the same client or not - then we will only make a single call out to The Guardian. This will dramatically cut down on our API usage limits.\n\n## Publishing events about new articles\n\nNow that we can have clients get the list of article sections, we want to publish events whenever a new article appears on the Guardian’s API. The process for this will be:\n\n- Periodic task to go and do a search of the Guardian’s API, ordered by oldest first and returning everything since the most recent date we’ve seen\n- For every article returned, emit a push notification event about the article, with the interest specified as the section ID.\n\nClients can then register to receive push notifications filtered by the Section ID, and will automatically receive only notifications that they are interested in.\n\nFirst then, lets build the classes to represent the API response:\n\n``` kotlin\n    data class ArticleFields(\n            val headline: String,\n            val trailText: String?,\n            val thumbnail: String?\n    )\n    \n    data class Article(\n            val id: String,\n            @JsonProperty(\"webUrl\") val url: String,\n            @JsonProperty(\"webPublicationDate\") val publicationDate: String,\n            val fields: ArticleFields,\n            val sectionId: String\n    )\n    \n    data class ArticleResponse(\n            val results: List\u003cArticle\u003e\n    )\n    \n    data class ArticlePayload(\n            val response: ArticleResponse\n    )\n```\n\nThen we want to be able to actually retrieve the articles. Add the following to `GuardianApi`: \n\n``` kotlin\n    open fun listArticles(from: Instant?): List\u003cArticle\u003e {\n        val uriBuilder = UriComponentsBuilder.fromUriString(\"http://content.guardianapis.com/search\")\n                .queryParam(\"api-key\", apiKey)\n                .queryParam(\"rights\", \"syndicatable\")\n                .queryParam(\"page-size\", \"50\")\n                .queryParam(\"show-fields\", \"headline,trailText,thumbnail\")\n                .queryParam(\"order-by\", \"oldest\")\n                .queryParam(\"order-date\", \"published\")\n                .queryParam(\"use-date\", \"published\")\n    \n        if (from != null) {\n            uriBuilder.queryParam(\"from-date\", from.toString())\n        }\n        val uri = uriBuilder.build().toUri()\n    \n        return restTemplate.getForObject(uri, ArticlePayload::class.java)\n                    ?.response?.results ?: emptyList()\n    }\n```\n\nNext we want to be able to send details of articles to Pusher to pass on as push notifications. For this we will create a new `ArticleNotifier` class as follows:\n\n```kotlin\n    @Component\n    class ArticleNotifier(\n            @Value(\"\\${pusher.instanceId}\") private val instanceId: String,\n            @Value(\"\\${pusher.secretKey}\") private val secretKey: String\n    ) {\n        private val pusher = PushNotifications(instanceId, secretKey)\n    \n        fun notify(article: Article) {\n            pusher.publish(\n                    listOf(article.sectionId.replace(\"[^A-Za-z0-9-]\".toRegex(), \"\")),\n                    mapOf(\n                            \"fcm\" to mapOf(\n                                    \"data\" to mapOf(\n                                            \"url\" to article.url,\n                                            \"published\" to article.publicationDate,\n                                            \"section\" to article.sectionId,\n                                            \"headline\" to article.fields.headline,\n                                            \"trailText\" to article.fields.trailText,\n                                            \"thumbnail\" to article.fields.thumbnail\n                                    )\n                            )\n                    )\n            )\n        }\n    }\n```\n\nWe need to change the section ID that we are using for the interest slightly so that it is valid for the Pusher Beams service. An interest can only contain letters, numbers and the characters “_-=@,.:”, whilst some of the section IDs from the Guardian API contain other characters too. \n\nYou will also need to add to the `application.properties` file the credentials needed to access the Pusher API:\n\n```\n    pusher.instanceId=\u003cPUSHER_INSTANCE_ID\u003e\n    pusher.secretKey=\u003cPUSHER_SECRET_KEY\u003e\n```\n\n\u003e **Note:** this value should be put in exactly as it was provided, without any quotes or whitespace present.\n\nFinally, a new component to call the Guardian API and retrieve the articles. This simply calls our `GuardianApi` class, does some manipulation of the results and then calls our `ArticleNotifier` for each article. Create a new `ArticleRetriever` class as follows:\n\n``` kotlin\n    @Component\n    class ArticleRetriever(\n            private val guardianApi: GuardianApi,\n            private val articleNotifier: ArticleNotifier\n    ) {\n        private var lastDate: Instant? = null\n    \n        private val lastSeenIds = mutableSetOf\u003cString\u003e()\n    \n        @Scheduled(fixedDelayString = \"PT10S\")\n        fun retrieveArticles() {\n            val articles = guardianApi.listArticles(lastDate)\n                    .filter { !lastSeenIds.contains(it.id) }\n    \n            lastSeenIds.clear()\n            lastSeenIds.addAll(articles.map { it.id })\n    \n            lastDate = articles.map { it.publicationDate }\n                    .map(Instant::parse)\n                    .sorted()\n                    .reversed()\n                    .first()\n    \n            articles.forEach(articleNotifier::notify)\n        }\n    }\n```\n\nNote here that we have an `@Scheduled` annotation on our method. Spring will automatically call this method at this delay - here we have 10 seconds purely for the purposes of this article. In reality it would be whatever is appropriate for your needs. \n\nWe are also keeping track of the most recently seen publication date - so that next time we can request articles newer than it - and the list of IDs that we have seen on the last pass - because the Guardian API includes articles with the same publication date as specified, so we need to filter them out by hand. \n\n\n\u003e **Note:** in reality these would be kept in a data store so that they can be persisted between restarts, but for now this is good enough.\n\nFinally, we need to actually enable scheduling. This is done by simply adding the `@EnableScheduling` annotation to the `NewsBackendApplication` class:\n\n``` kotlin\n    @SpringBootApplication\n    @EnableScheduling\n    class NewsBackendApplication {\n    \n       static void main(String[] args) {\n          SpringApplication.run NewsBackendApplication, args\n       }\n    }\n```\n\nAt this point we can start the application up, and it will periodically go to the Guardian API, retrieve the next 50 articles and send push notifications for them all. \n\n\n\u003e **Note:** we’re not specifying a start date in our application. It just so happens that The Guardian has news articles going back to November 1805, so there will be plenty of examples for us to test with.\n\nIn this application, we are broadcasting out notifications of new stories on a third party site. If we wished, we could actually have a site where we author and publish the articles ourselves and this would work just as well. In that case though, we would be able to broadcast the notifications immediately on the article being published instead of polling the remote site for updates.\n\nNow that our backend is complete, we can start and leave it running whilst we build our UI. For this, we simply execute `./gradlew bootRun` or run it from inside IntelliJ.\n\n## Building the Android application\n\nThe frontend Android application will also be built in Kotlin, using Android Studio. To start, open up Android Studio and create a new project, entering some appropriate details and ensuring that you select the **Include Kotlin support** option. Note that the **Package name** must exactly match that specified when you set up the FCM Server Key earlier.\n\n![android-guardian-beams-create-project](//images.ctfassets.net/1es3ne0caaid/1G1wqnaUsMOWC62o2iOCIi/5b6a2879d6057a2c1595c93bae1e52fd/android-guardian-beams-create-project.png)\n\nThen on the next screen, ensure that you select support for **Phone and Tablet** using at least API 16:\n\n![android-guardian-beams-target-sdk](//images.ctfassets.net/1es3ne0caaid/2CTWGHNIbiAumeEi0Koqu0/1eee8836affae086b14a48a07f9d7e2b/android-guardian-beams-target-sdk.png)\n\nEnsure that an **Empty Activity** is selected:\n\n![android-guardian-beams-add-activity](//images.ctfassets.net/1es3ne0caaid/kRbqSYnHjiqQIS86ici8Y/c1688a2df512bb77fd76c1bcd273688a/android-guardian-beams-add-activity.png)\n\nAnd leave the **Activity Name** as “MainActivity”:\n\n![android-guardian-beams-config-activity](//images.ctfassets.net/1es3ne0caaid/4iTUDWfV3WUCg4yicMmQKS/3732ce4ecf72c81d44022d8e29c3f916/android-guardian-beams-config-activity.png)\n\nNext we need to add some dependencies to our project to support Pusher. Add the following to the project level `build.gradle`, in the existing `dependencies` section:\n\n```\n    classpath 'com.google.gms:google-services:3.2.0'\n```\n\nThen add the following to the `dependencies` section of the app level `build.gradle`:\n\n```\n    implementation 'com.google.firebase:firebase-messaging:12.0.1'\n    implementation 'com.pusher:push-notifications-android:0.10.0'\n    \n    compile 'com.loopj.android:android-async-http:1.4.9'\n    compile 'com.google.code.gson:gson:2.2.4'\n```\n\nAnd this to bottom of the app level `build.gradle`:\n\n```\n    apply plugin: 'com.google.gms.google-services'\n```\n\nNext, copy the `google-services.json` file we downloaded earlier into the `app` directory under your project. We are now ready to actually develop our specific application using these dependencies.\n\nFinally, we need to add some permissions to our application. Open up the `AndroidManifest.xml` file and add the following immediately before the `\u003capplication\u003e` tag:\n\n```\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\n## List of sections\n\nOur primary screen in the UI is simply going to be a list of sections provided by our API. The user will then be able to select which of these they are subscribed to, which will then be managed by receiving push notifications on those stories.\n\nFirstly we need our UI layout. Update `app/res/layout/activity_main.xml` as follows:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"#fff\"\u003e\n        \u003cScrollView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\u003e\n            \u003cLinearLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:orientation=\"vertical\"\u003e\n    \n                \u003cTableLayout\n                    android:layout_marginTop=\"10dp\"\n                    android:id=\"@+id/table_layout\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\u003e\n    \n                    \u003cTableRow\n                        android:layout_height=\"wrap_content\"\n                        android:layout_width=\"match_parent\"\n                        android:id=\"@+id/table_row1\"\n                        android:padding=\"10dp\"\u003e\n    \n                        \u003cTextView\n                            android:id=\"@+id/selected\"\n                            android:fontFamily=\"serif\"\n                            android:layout_height=\"wrap_content\"\n                            android:layout_width=\"match_parent\"\n                            android:layout_weight=\"1\"\n                            android:textColor=\"#000\"\n                            android:text=\"\"/\u003e\n                        \u003cTextView\n                            android:id=\"@+id/name\"\n                            android:textColor=\"#000\"\n                            android:fontFamily=\"serif\"\n                            android:layout_height=\"wrap_content\"\n                            android:layout_width=\"match_parent\"\n                            android:layout_weight=\"3\"\n                            android:text=\"Section\"/\u003e\n    \n                    \u003c/TableRow\u003e\n                    \u003cView\n                        android:layout_height=\"3dip\"\n                        android:layout_width=\"match_parent\"\n                        android:background=\"#ff0000\"/\u003e\n                \u003c/TableLayout\u003e\n    \n                \u003cListView\n                    android:id=\"@+id/records_view\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"500dp\"\n                    android:layout_marginTop=\"16dp\"\u003e\n                \u003c/ListView\u003e\n            \u003c/LinearLayout\u003e\n        \u003c/ScrollView\u003e\n    \u003c/LinearLayout\u003e\n```\n\n\u003e **Note:** in order to paste this snippet in, the **Text** tab at the bottom of the screen should be selected.\n\n\n\u003e **Note:** sometimes, copy and paste of the entire file into the **Text** tab will cause a blank line at the very top. This is invalid XML and needs to be removed.\n\nNow we need a class to represent each entry in this list. Create a new class called `SectionEntry` as follows:\n\n``` kotlin\n    data class SectionEntry(\n            val id: String,\n            val webTitle: String,\n            val subscribed: Boolean\n    )\n```\n\nYou will notice that this is basically the same as the `Section` class on the backend. This is not surprising because it represents the same data on the same API.\n\nNext we need a layout to represent a single row in our list. For this, create a new layout resource called `app/res/layout/section.xml` as follows:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"horizontal\" android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n        \u003cCheckBox\n            android:id=\"@+id/section_selected\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:fontFamily=\"serif\"\n            android:layout_weight=\"3\"\n            android:textColor=\"#000\" /\u003e\n        \u003cTextView\n            android:id=\"@+id/section_name\"\n            android:textColor=\"#000\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:text=\"Name\"/\u003e\n    \u003c/LinearLayout\u003e\n```\n\nThis has two entries in it - a checkbox and a section name. We will use the checkbox later on to decide which sections we are subscribed to.\n\nNow we need to be able to render this new layout for each of our sections. For this, create a new class called `SectionEntryAdapter` as follows:\n\n``` kotlin\n    class SectionEntryAdapter(private val recordContext: Context) : BaseAdapter() {\n        var records: List\u003cSectionEntry\u003e = listOf()\n            set(value) {\n                field = value\n                notifyDataSetChanged()\n            }\n    \n        override fun getView(i: Int, view: View?, viewGroup: ViewGroup): View {\n            val theView = if (view == null) {\n                val recordInflator = recordContext.getSystemService(Activity.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n    \n                val theView = recordInflator.inflate(R.layout.section, null)\n                val newSectionViewHolder = SectionViewHolder(\n                        theView.findViewById(R.id.section_selected),\n                        theView.findViewById(R.id.section_name)\n                )\n                theView.tag = newSectionViewHolder\n    \n                theView\n            } else {\n                view\n            }\n    \n            val sectionViewHolder = theView.tag as SectionViewHolder\n    \n            val section = getItem(i)\n            sectionViewHolder.name.text = section.webTitle\n            sectionViewHolder.id = section.id\n            sectionViewHolder.selected.isChecked = section.subscribed\n    \n            return theView\n        }\n    \n        override fun getItem(i: Int) = records[i]\n    \n        override fun getItemId(i: Int) = 1L\n    \n        override fun getCount() = records.size\n    }\n    \n    data class SectionViewHolder(\n            val selected: CheckBox,\n            val name: TextView\n    ) {\n        var id: String? = null\n    }\n```\n\nFinally we just need to get the data into this list. Update `MainActivity` by adding the following field to the class:\n\n```\n    private lateinit var recordAdapter: SectionEntryAdapter\n```\n\nand then initialize this by adding the following to our `MainActivity` class:\n\n``` kotlin\n    override fun onResume() {\n        super.onResume()\n        recordAdapter = SectionEntryAdapter(this)\n        val recordsView = findViewById\u003cView\u003e(R.id.records_view) as ListView\n        recordsView.setAdapter(recordAdapter)\n    \n        refreshEventsList()\n    }\n```\n\nNext we just need to implement the `refreshEventsList` method, as follows:\n\n``` kotlin\n    private fun refreshEventsList() {\n        val client = AsyncHttpClient()\n        client.get(\"http://10.0.2.2:8080/sections\", object : JsonHttpResponseHandler() {\n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, response: JSONArray) {\n                super.onSuccess(statusCode, headers, response)\n                runOnUiThread {\n                    val events = IntRange(0, response.length() - 1)\n                            .map { index -\u003e response.getJSONObject(index) }\n                            .map { obj -\u003e\n                                    val id = obj.getString(\"id\")\n                                    SectionEntry(\n                                        id = id,\n                                        webTitle = obj.getString(\"webTitle\"),\n                                        subscribed = false\n                                )\n                            }\n    \n                    recordAdapter.records = events\n                }\n            }\n        })\n    }\n```\n\n\u003e **Note:** The import for `Header` should be `cz.msebera.android.httpclient.Header`\n\n\n\u003e **Note:** 10.0.2.2. is the IP Address that the host machine appears when running inside the Android emulator. In reality you will want to use the real host of your service.\n\nAt this point we can start up the Android application and see all of the sections:\n\n![android-guardian-beams-emulator](//images.ctfassets.net/1es3ne0caaid/47dgVy35tuUI2kkEyCSUM6/fa9c583c57251e5ec1f6821349fbb92c/android-guardian-beams-emulator.png)\n\n## Subscribing to notifications\n\nNow that we have a list of notifications, we want to be able to subscribe to them, and to show the list that we are subscribed to.\n\nFirstly we need to register with the Pusher Beams service. This is done by adding the following to the top of the `o``nCreate` method in `MainActivity`:\n\n```\n        PushNotifications.start(getApplicationContext(), \"YOUR_INSTANCE_ID\");\n```\n\nNext we want to be able to subscribe and unsubscribe to notifications for the sections as we toggle them. For this, add the following to bottom of the `getView` method of `SectionEntryAdapter`:\n\n``` kotlin\n    sectionViewHolder.selected.setOnCheckedChangeListener { _, isChecked -\u003e\n        if (isChecked) {\n            PushNotifications.subscribe(section.id.replace(\"[^A-Za-z0-9-]\".toRegex(), \"\"))\n        } else {\n            PushNotifications.unsubscribe(section.id.replace(\"[^A-Za-z0-9-]\".toRegex(), \"\"))\n        }\n    }\n```\n\nWe need to update the section IDs that we use in the Pusher Beams subscriptions in the same way that we did in the actual sending of the notifications.\n\nFinally we need to update our checkboxes to show which sections we have previously subscribed to. We only need to do this when loading the list from the server in the first place - any other time the UI is already correctly in sync. For this, add the following to the top of `refreshEventsList` in `MainActivity`:\n\n```\n    val subscriptions = PushNotifications.getSubscriptions()\n```\n\nThen we can use it by updating the code lower down in the same method where we are processing the received sections as follows:\n\n``` kotlin\n    SectionEntry(\n            id = id,\n            webTitle = obj.getString(\"webTitle\"),\n            subscribed = subscriptions.contains(id)\n    )\n```\n\n\u003e **Note:** the change here is to give a real value for the `subscribed` parameter.\n\n## Displaying notifications\n\nNow that we can subscribe to notifications on different sections, we need to be able to actually receive and display them. In order to do this, we need to add a listener to `PushNotifications` for every message received. To do this, add the following to `MainActivity`:\n\n``` kotlin\n    fun getBitmapfromUrl(imageUrl: String): Bitmap? {\n        return try {\n            val url = URL(imageUrl)\n            val connection = url.openConnection() as HttpURLConnection\n            connection.doInput = true\n            connection.connect()\n            val input = connection.inputStream\n            BitmapFactory.decodeStream(input)\n        } catch (e: Exception) {\n            null\n        }\n    }\n    \n    private fun receiveNotifications() {\n    \n        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n    \n        if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.O) {\n            val channel = NotificationChannel(\"news\",\n                    \"Pusher News\",\n                    NotificationManager.IMPORTANCE_DEFAULT)\n            notificationManager.createNotificationChannel(channel)\n        }\n    \n        var notificationId = 0\n    \n        PushNotifications.setOnMessageReceivedListenerForVisibleActivity(this, object : PushNotificationReceivedListener {\n            override fun onMessageReceived(remoteMessage: RemoteMessage) {\n                Log.v(\"ReceivedMessage\", remoteMessage.data.toString())\n                val headline = remoteMessage.data[\"headline\"]\n                val url = remoteMessage.data[\"url\"]\n                val trailText = remoteMessage.data[\"trailText\"]\n                val thumbnail = remoteMessage.data[\"thumbnail\"]\n    \n                val intent = Intent(Intent.ACTION_VIEW)\n                intent.data = Uri.parse(url)\n                val pendingIntent = PendingIntent.getActivity(applicationContext, 0, intent, 0)\n                \n                val notification = NotificationCompat.Builder(applicationContext, \"news\")\n                        .setSmallIcon(R.mipmap.ic_launcher)\n                        .setContentTitle(headline)\n                        .setContentText(trailText)\n                        .setLargeIcon(thumbnail?.let { getBitmapfromUrl(it) })\n                        .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n                        .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                        .setContentIntent(pendingIntent)\n    \n                notificationManager.notify(notificationId++, notification.build())\n            }\n        });\n    }\n```\n\n\u003e **Note:** The import for `URL` should be `java.net.URL`, and the import for `NotificationCompat` should be `android.support.v4.app.NotificationCompat`\n\nThere is quite a lot going on here, so lets break it down a bit. The method `getBitmapFromUrl` is a little helper that can take a URL, download the Image that it points to and convert it into an Android `Bitmap` object. The method `receiveNotifications` will ensure that the `NotificationManager` is correctly configured for raising notifications, and then will add a listener to `PushNotifications` to do the bulk of the work.\n\nThis listener is called on every single push notification received, and will raise an Android notification for them. This notification will have the headline and trail text from the push notification, the thumbnail displayed as an image if there is one, and clicking on the notification will then load the full news article in the system web browser.\n\nFinally, add a call to `onResume` to the `receiveNotifiactions` method so that we can start to receive and display our push notifications:\n\n``` kotlin\n    override fun onResume() {\n        super.onResume()\n        recordAdapter = SectionEntryAdapter(this)\n        val recordsView = findViewById\u003cView\u003e(R.id.records_view) as ListView\n        recordsView.setAdapter(recordAdapter)\n    \n        refreshEventsList()\n        receiveNotifications()\n    }\n```\n\n![android-guardian-beams-demo](//images.ctfassets.net/1es3ne0caaid/4hpz1rjqecwsWaW2AMsqGo/e10372db40ec505f3d3c7003144fe4a9/android-guardian-beams-demo.gif)\n\n## Conclusion\n\nThis article has shown how to consume details from a third-party API and broadcast them out to your users by utilizing Pusher Beams. \n\nThe full source code for this article is available on [GitHub](https://github.com/sazzer/pusher-news). Why not try extending it to allow multiple news sources to be consumed instead? Or to allow specific searches to be performed?\n\n","metaTitle":"Publish Android notifications from the Guardian’s API","metaDescription":"This tutorial will guide you through building an Android app with Kotlin. The app takes advantage of the Guardian's news APIs and Pusher Beams to provide push notifications for new articles."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2IAP6sb9hYasac2kyAKc2y","type":"Entry","createdAt":"2018-04-12T14:45:10.567Z","updatedAt":"2020-06-19T14:32:34.980Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":7,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Send push notifications in a social network Android app - Part 2","url":"push-notifications-social-android-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/pusher-events","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-04-12","description":"In this two-part series, build a social network Android app with event planning functionality, supported by push notifications. Part two builds on the app created in part one, implementing push notifications to alert users of event invites.","prerequisite":"You should first complete part one of the series. You will need some familiarity with Kotlin, and appropriate IDEs. IntelliJ IDEA and Android Studio are recommended.","content":"*This is part 2 of a 2 part tutorial. You can find part 1 [here](https://pusher.com/tutorials/push-notifications-social-android-part-1).*\n\n## Introduction\n\nWe previously created a simple social events platform with an Android application to interact with it. Now we are going to expand this by adding support for push notifications for a variety of occurrences in the application, bringing a whole new level of interactivity for the uses.\n\nSetting up push notifications can be confusing and time-consuming. However, with Pusher’s [Beams API](https://pusher.com/push-notifications), the process is a lot easier and faster.\n\n![android-social-network-push-notifications-app-preview](//images.ctfassets.net/1es3ne0caaid/6l9KMABOpOMyEEiWKg0AK4/a7fc3fab35a2fa0cebd16ccb51a612e5/android-social-network-push-notifications-app-preview.gif)\n\n## Prerequisites\n\nIn order to follow along, you will need some experience with the Kotlin programming language, which we are going to use for both the backend and frontend of our application. \n\nYou will also need appropriate IDEs. We suggest [IntelliJ IDEA](https://www.jetbrains.com/idea/) and [Android Studio](https://developer.android.com/studio/index.html). Finally, you will need a free [Pusher Account](https://dash.pusher.com/authenticate/register?ref=pn-landing-page) . Sign up now if you haven’t already done so.\n\n## Setting up your Pusher account\n\nIn order to use the Beams API and SDKs from Pusher, you need to create a new Beams instance in the [Pusher Beta Dashboard](https://dash.pusher.com/authenticate/register?ref=pn-social-network-android).\n\nNext, on your **Overview** for your Beams instance, click **Get Started** to add your Firebase Cloud Messaging (FCM) Server Key to the Beams instance. When setting this up, you must ensure you use the exact same package name as was used to create the Android application in the previous article.\n\nAfter saving your FCM key, you can finish the Get Started wizard by yourself to send your first push notification, or just continue as we’ll cover this below.\n\nIt’s important to make sure that you download and keep the `google-services.json` file from the Firebase Console as we are going to need this later on. \n\nOnce you have created your Beams instance, you will also need to note down your “Instance ID” and “Secret Key” from the Pusher Dashboard, found under the “Keys” section of your instance settings.\n\n## Sending push notifications\n\nIn the previous article we created some REST handlers for our backend. We now want to trigger push notifications from these handlers. These push notifications will all use the Event ID as the Interest, and the payload will contain the event data and an *action* key indicating what has happened to the event:\n\n\n- POST /events/{id} - Event created\n- PUT /events/{id} - Event details updated\n- DELETE /events/{id} - Event deleted\n- PUT /events/{id}/interest/{user} - User subscribed to an event\n- DELETE /events/{id}/interest/{user} - User unsubscribed from an event\n- POST /events/{id}/share - The event that was shared, targeted only at the one user\n\nNote that we are not going to be emitting any push notifications from the GET handlers because they are used only for reading data. We are going to emit a notification from the POST handler, but it will be a global one that every user gets regardless and not an event-specific one since it’s not possible for anyone to have subscribed to the event at this point.\n\nFirstly, we need a way of emitting our push notifications. For this we will create a new `EventNotifier` class as follows:\n\n``` kotlin\n    @Component\n    class EventNotifier(\n            @Value(\"\\${pusher.instanceId}\") private val instanceId: String,\n            @Value(\"\\${pusher.secretKey}\") private val secretKey: String\n    ) {\n        private val pusher = PushNotifications(instanceId, secretKey)\n    \n        fun emitGlobal(action: String, event: Event) {\n            pusher.publish(\n                    listOf(action),\n                    mapOf(\n                            \"fcm\" to mapOf(\n                                    \"data\" to mapOf(\n                                            \"action\" to action,\n                                            \"id\" to event.id,\n                                            \"name\" to event.name,\n                                            \"description\" to event.description,\n                                            \"start\" to event.start\n                                    )\n                            )\n                    )\n            )\n        }\n    \n        fun emitForEvent(action: String, event: Event) {\n            pusher.publish(\n                    listOf(\"EVENT_\" + event.id!!),\n                    mapOf(\n                            \"fcm\" to mapOf(\n                                    \"data\" to mapOf(\n                                            \"action\" to action,\n                                            \"id\" to event.id,\n                                            \"name\" to event.name,\n                                            \"description\" to event.description,\n                                            \"start\" to event.start\n                                    )\n                            )\n                    )\n            )\n        }\n    \n        fun emitForUsers(action: String, users: List\u003cString\u003e, event: Event) {\n            pusher.publish(\n                    users.map { \"USER_$it\" },\n                    mapOf(\n                            \"fcm\" to mapOf(\n                                    \"data\" to mapOf(\n                                            \"action\" to action,\n                                            \"id\" to event.id,\n                                            \"name\" to event.name,\n                                            \"description\" to event.description,\n                                            \"start\" to event.start\n                                    )\n                            )\n                    )\n            )\n        }\n        \n        fun emitFromUser(action: String, user: String, event: Event) {\n            pusher.publish(\n                    listOf(\"EVENT_\" + event.id!!),\n                    mapOf(\n                            \"fcm\" to mapOf(\n                                    \"data\" to mapOf(\n                                            \"user\" to user,\n                                            \"action\" to action,\n                                            \"id\" to event.id,\n                                            \"name\" to event.name,\n                                            \"description\" to event.description,\n                                            \"start\" to event.start\n                                    )\n                            )\n                    )\n            )\n        }\n    }\n```\n\nThe `@Component` annotation indicates that this class is a part of the application and that Spring Boot should automatically construct it and make it available elsewhere. \n\nThe `@Value` annotations are used to provide property values from the configuration. These can come from a number of sources, but for now we will simply use the already-present `application.properties` file. Update this to add two keys - `pusher.instanceId` and `pusher.secretKey` containing your Instance ID and secret key from earlier.\n\nNote that these use the `data` form of notifications. These provide a payload to the Android application to deal with it as it desires, giving complete freedom over what to do with it. There is an alternative form that can be used, providing some details as a `notification` instead, but this is a lot more restricted in what you can achieve with it.\n\nNext we need to make use of this new class. We can autowire this into our controller to make it automatically available, and then simply call it from the appropriate handler methods. \n\nUpdate the constructor of our controller as follows:\n\n``` kotlin\n    class EventController(@Autowired private val eventNotifier: EventNotifier) {\n```\n\nAnd then add the following lines to the appropriate handler methods:\n\n``` kotlin\n    // createEvent\n    eventNotifier.emitGlobal(\"CREATED\", newEvent)\n    \n    // deleteEvent\n    events.find { it.id == id }\n            ?.let { eventNotifier.emitForEvent(\"DELETED\", it) }\n    \n    // updateEvent\n    eventNotifier.emitForEvent(\"UPDATED\", newEvent)\n    \n    // registerInterest\n    events.find { it.id == event }\n            ?.let { eventNotifier.emitFromUser(\"SUBSCRIBED\", user, it) }\n    \n    // unregisterInterest\n    events.find { it.id == event }\n            ?.let { eventNotifier.emitFromUser(\"UNSUBSCRIBED\", user, it) }\n            \n    // shareEvent\n        events.find { it.id == event }\n                ?.let { eventNotifier.emitForUsers(\"RECOMMENDED\", friends, it) }\n```\n\nAt this point, our backend application is fully able to send push notifications. If you were to trigger the REST endpoints then the push notifications will be sent from our application to the Pusher server, and from there on to any devices that are listening for them.\n\n## Receiving push notifications\n\nNow that we can send push notifications, we need to be able to receive them as well. The Android application that was built in the previous article will be extended to support this.\n\nFirst we need to add some dependencies to our project to support Pusher. Add the following to the project level `build.gradle`, in the existing `dependencies` section:\n\n``` gradle\n    classpath 'com.google.gms:google-services:3.1.0'\n```\n\nThen add the following to the `dependencies` section of the App level `build.gradle`:\n\n``` gradle\n    implementation 'com.google.firebase:firebase-messaging:11.8.0'\n    implementation 'com.pusher:push-notifications-android:0.9.12'\n```\n\nAnd this to bottom of the App level `build.gradle`:\n\n``` gradle\n    apply plugin: 'com.google.gms.google-services'\n```\n\nNext, copy the `google-services.json` file we downloaded earlier into the `app` directory under your project. We are now ready to actually develop our specific application using these dependencies.\nNow that we can interact with events in our application, we’d like to get notifications when things happen whilst we’re not looking. This means setting up to receive push notifications on certain things happening.\n\nIn order to handle push notifications, we are going to use the `PushNotifications` class provided by the Pusher `push-notifications-android` dependency. This makes receiving these really simple and flexible.\n\nTo enable push notifications, we need to add the following to the `onCreate` method of `EventsListActivity`:\n\n``` kotlin\n    override fun onCreate() {\n        super.onCreate()\n        PushNotifications.start(getApplicationContext(), \"YOUR_INSTANCE_ID\");\n    }\n```\n\nEnsure that `YOUR_INSTANCE_ID` is replaced with the instance ID that you got from your Pusher dashboard, and must be exactly the same as used in the backend application.\n\nIn order to receive push notifications, we need to subscribe to them for updates. These are all done by subscribing to an Interest, which our server will send out. In our application, these come in three forms:\n\n- Global events that everyone gets. This is the `CREATED` event\n- Events that are targeted to a particular user - This is our `RECOMMENDED` event, and has an Interest of `USER_\u003cuser\u003e`\n- Events that are targeted to a particular event. There are several of these, but the Interest is always `EVENT_\u003cevent\u003e`\n\nLet’s first subscribe to the ones we always want - the global and user ones. Add this to the `onCreate` method of `EventsListActivity`:\n\n``` kotlin\n    PushNotifications.subscribe(\"CREATED\");\n    PushNotifications.subscribe(\"USER_\" + (application as EventsApplication).username);\n```\n\nNext we want to subscribe to events that we are interested in, but not to ones we are no longer interested in.\n\nUpdate the `ViewEventActivity` to add the following to the appropriate `onSuccess` handlers:\n\n``` kotlin\n    // onClickInterested\n    PushNotifications.subscribe(\"EVENT_\" + eventId);\n    \n    // onClickDisinterested\n    PushNotifications.unsubscribe(\"EVENT_\" + eventId);\n```\n\nAt this point, we can now receive the notifications. We just can’t react to them. For this we need to register a listener on the `FCMMessagingService`. Update `EventsApplication` to add the following:\n\n``` kotlin\n    override fun onCreate() {\n        super.onCreate()\n        FCMMessagingService.setOnMessageReceivedListener(object : PushNotificationReceivedListener {\n            override fun onMessageReceived(remoteMessage: RemoteMessage) {\n                val action = remoteMessage[\"action\"]\n    \n                if (action == \"CREATED\") {\n                    showCreatedNotification(remoteMessage.data)\n                } else if (action == \"SUBSCRIBED\") {\n                    showSubscribedNotification(remoteMessage.data)\n                } else if (action == \"UNSUBSCRIBED\") {\n                    showUnsubscribedNotification(remoteMessage.data)\n                } else if (action == \"RECOMMENDED\") {\n                    showRecommendedNotification(remoteMessage.data)\n                }\n            }\n        })\n    }\n    \n    private fun showRecommendedNotification(data: Map\u003cString, String\u003e) {\n        Log.v(\"EventsApplication\", \"Received Recommended Notification: \" + data.toString())\n    }\n    \n    private fun showUnsubscribedNotification(data: Map\u003cString, String\u003e) {\n        Log.v(\"EventsApplication\", \"Received Unsubscribed Notification: \" + data.toString())\n    }\n    \n    private fun showSubscribedNotification(data: Map\u003cString, String\u003e) {\n        Log.v(\"EventsApplication\", \"Received Subscribed Notification: \" + data.toString())\n    }\n    \n    private fun showCreatedNotification(data: Map\u003cString, String\u003e) {\n        Log.v(\"EventsApplication\", \"Received Created Notification: \" + data.toString())\n    }\n```\n\nThis will now generate log messages for our push notifications, but not anything useful. Let’s change that.\n\n\n\u003e **Note:** this doesn’t cover all of the possible actions that we emit. The rest are left as an exercise for the reader.\n\nBefore we can display any notifications, we need to set things up. In the `EventsApplication` class, add the following field:\n\n``` kotlin\n    private lateinit var notificationManager: NotificationManager\n```\n\nAnd then add the following to the top of the `onCreated` method:\n\n``` kotlin\n    notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n    \n    if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.O) {\n        val channel = NotificationChannel(\"events\",\n                \"Pusher Events\",\n                NotificationManager.IMPORTANCE_DEFAULT)\n        notificationManager.createNotificationChannel(channel)\n    }\n```\n\nThis is needed to display notifications on newer versions of Android, otherwise they just silently vanish.\n\nNow we can actually display them. The simple one first is the `CREATED` notification. Add the following to the `showCreatedNotification` method:\n\n``` kotlin\n    val intent = Intent(applicationContext, EventsListActivity::class.java)\n    val pendingIntent = PendingIntent.getActivity(applicationContext, 0, intent, 0)\n    \n    val notification = NotificationCompat.Builder(this, \"events\")\n            .setSmallIcon(R.mipmap.ic_launcher)\n            .setContentTitle(\"New event: \" + data[\"name\"])\n            .setContentText(data[\"description\"])\n            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n            .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n            .setContentIntent(pendingIntent)\n    \n    notificationManager.notify(0, notification.build())\n```\n\nThis displays a simple notification, and clicking on it takes you to the **Events List**.\n\nNext we’ll show notifications for subscribed and unsubscribed. Update as follows:\n\n``` kotlin\n    // showSubscribedNotification\n    val intent = Intent(this, ViewEventActivity::class.java)\n    intent.putExtra(\"event\", data[\"id\"])\n    val pendingIntent = PendingIntent.getActivity(applicationContext, 0, intent, 0)\n    \n    val notification = NotificationCompat.Builder(this, \"events\")\n            .setSmallIcon(R.mipmap.ic_launcher)\n            .setContentTitle(data[\"user\"] + \" is interested in \" + data[\"name\"])\n            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n            .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n            .setContentIntent(pendingIntent)\n    \n    notificationManager.notify(0, notification.build())\n    \n    // showUnsubscribedNotification\n    val intent = Intent(this, ViewEventActivity::class.java)\n    intent.putExtra(\"event\", data[\"id\"])\n    val pendingIntent = PendingIntent.getActivity(applicationContext, 0, intent, 0)\n    \n    val notification = NotificationCompat.Builder(this, \"events\")\n            .setSmallIcon(R.mipmap.ic_launcher)\n            .setContentTitle(data[\"user\"] + \" is no longer interested in \" + data[\"name\"])\n            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n            .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n            .setContentIntent(pendingIntent)\n    \n    notificationManager.notify(0, notification.build())\n```\n\nThe difference is that this time we are going to direct the user to the actual **View Event** page when they click on the notification, and so we are passing the event ID through in the Intent.\n\nFinally, we are going to display a notification for when the event was recommended to us. This time we are going to have two explicitly named actions that each do slightly different things. Update `showRecommendedNotifiction` as follows:\n\n``` kotlin\n    val viewIntent = Intent(this, ViewEventActivity::class.java)\n    viewIntent.putExtra(\"event\", data[\"id\"])\n    val pendingViewIntent = PendingIntent.getActivity(applicationContext, 0, viewIntent, 0)\n    \n    val interestedIntent = Intent(this, ViewEventActivity::class.java)\n    interestedIntent.putExtra(\"event\", data[\"id\"])\n    interestedIntent.putExtra(\"trigger\", \"interested\")\n    val pendingInterestedIntent = PendingIntent.getActivity(applicationContext, 1, interestedIntent, 0)\n    \n    val notification = NotificationCompat.Builder(this, \"events\")\n            .setSmallIcon(R.mipmap.ic_launcher)\n            .setContentTitle(\"Event \" + data[\"name\"] + \" has been recommended to you\")\n            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n            .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n            .addAction(NotificationCompat.Action.Builder(R.mipmap.ic_launcher, \"View\", pendingViewIntent).build())\n            .addAction(NotificationCompat.Action.Builder(R.mipmap.ic_launcher, \"Interested\", pendingInterestedIntent).build())\n    \n    notificationManager.notify(0, notification.build())\n```\n\nNote that one of the Intent’s that we are using has an additional property - “trigger” - that we are using to indicate to the target Activity that something should happen. Now we need to make a slight change to the `ViewEventActivity` to handle this extra action. Update the `onCreate` method to add the following:\n\n``` kotlin\n    val trigger = intent.getStringExtra(\"trigger\")\n    if (trigger == \"interested\") {\n        onClickInterested(null)\n    }\n```\n\nThis will cause the `onClickInterested` method to be called immediately on displaying the activity if the user came here from the “Interested” action on our notification.\n\n![android-social-network-push-notifications-app-preview](//images.ctfassets.net/1es3ne0caaid/6l9KMABOpOMyEEiWKg0AK4/a7fc3fab35a2fa0cebd16ccb51a612e5/android-social-network-push-notifications-app-preview.gif)\n\n## Conclusion\n\nThis article shows how simple it is to add push notifications using Pusher’s Beams API and SDKs to your already-existing application, and how powerful such functionality can be.\n\nThe full source for the entire application is available on [Github](https://github.com/sazzer/pusher-events). Why not add some more features to it for yourself, and have a fully-functional event management application to share with friends.\n\n*This is part 2 of a 2 part tutorial. You can find part 1 [here](https://pusher.com/tutorials/push-notifications-social-android-part-1).*","metaTitle":"Push notifications in a social network Android app - Part 2","metaDescription":"Learn to implement push notifications in an Android app. In this part of the series, add push notification functionality to a social network event scheduling app."}}],"defaultValue":"Android","queryType":"tag","pages":10,"route":"/tutorials","query":{"tag":"Android","page":"8"}}},"page":"/tutorials","query":{"tag":"Android","page":"8"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Android&page=8 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:36:41 GMT -->
</html>