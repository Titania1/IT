<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Live%20Comments&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:41:57 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">15</span> tutorials for “<span class="css-npldjc ehwuahf2">Live Comments</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsef5c.html?product=Channels&amp;tag=Live%20Comments" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialsbe2b.html?product=Beams&amp;tag=Live%20Comments" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Live Comments"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/flask-vue-comments.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live comment feature with sentiment analysis using Flask and Vue</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial will guide you through building a comments feature for a website, using Flask and Vue.js. New comments wil...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-automod-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live commenting system with auto moderation using Laravel</h3><p class="css-k12xad e5jrto45">Use Laravel to build a live comments feature with built-in auto moderation. Users can comment on a sample post. Their co...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-ionic.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Cordova<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live comments feature with Ionic</h3><p class="css-k12xad e5jrto45">Build a mobile app feature with Ionic, allowing users to add comments to a post, and see updates in realtime. The app fe...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-comments-gatsby-blog.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Add realtime comments to a Gatsby blog</h3><p class="css-k12xad e5jrto45">Build a simple blog with a live commenting feature. Use Gatsby, the React-based static site generator, to create the blo...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-emberjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Ember.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live comments feature with Ember.js</h3><p class="css-k12xad e5jrto45">Build a comments system using Ember.js and Node.js. Users will be able to post comments and see other comments in realti...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-comments-gatsby.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Add live comments in Gatsby</h3><p class="css-k12xad e5jrto45">Build a simple website with Gatsby and React featuring realtime comments. Create a football blog, where users can post c...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/comments-app-ruby-rails.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a comments app with Ruby on Rails</h3><p class="css-k12xad e5jrto45">This short tutorial demonstrates how to integrate realtime updates into a Ruby on Rails application. You will create a s...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-go-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live comments feed with Go and Vue.js</h3><p class="css-k12xad e5jrto45">Build a simple comments feed using Go, Vue.js and SQLite. Users can comment on a post, with the comments feed updating i...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-ruby-rails-postgresql.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Ruby</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live comments app with Ruby on Rails and PostgreSQL</h3><p class="css-k12xad e5jrto45">Build a social commenting application using Ruby on Rails and PostgreSQL. App users can leave comments on a sample post,...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Prev</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsfa22.html?tag=Live%20Comments&amp;page=1" class="css-2wakph edg0byb1">1</a><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials602a.html?tag=Live%20Comments&amp;page=2" class="css-5s6711 edg0byb1">2</a><a href="tutorials602a.html?tag=Live%20Comments&amp;page=2" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":15,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Eh0neIijuMe6u8WUkigeo","type":"Entry","createdAt":"2018-11-19T21:11:07.272Z","updatedAt":"2020-06-19T11:00:49.074Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live comment feature with sentiment analysis using Flask and Vue","url":"flask-vue-comments","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-11-19","description":"This tutorial will guide you through building a comments feature for a website, using Flask and Vue.js. New comments will appear in realtime, and the application includes sentiment analysis, to measure the opinion of commenters.","prerequisite":"You will need Python 3.6+ and Flask installed on your machine.","content":"In this tutorial, we’ll see how we can get the overall feeling of our users after they might have read our post and added their comments. We’ll build a simple blog where users can comment. Then we process the comment to determine the percentages of people that find the post interesting and those who don't.\n\nAs technologies are advancing, the way we process data is also taking a huge turn around. Taking advantage of natural language processing, we can determine from a group of comments, how our users feel about our blog post.\n\nWe also don’t have to reload a page to see a new comment from a blog post. We can make comments visible in realtime to every user.\n\nWe’ll be using Channels, Vue.js and Flask to build the app.\n\nHere is a preview of what the final app will look like:\n\n![flask-comments-sentiment-demo](//images.ctfassets.net/1es3ne0caaid/5gkbkrLNgIkOsgOGmgwsUM/7b7e547c466433070e56ced75f8ac738/flask-comments-sentiment-demo.gif)\n\n## Prerequisite\n\nThis tutorial uses the following:\n\n- [Vue.js](https://vuejs.org/)\n- [Python 3.6+](https://www.python.org/)\n- [Flask](http://flask.pocoo.org/)\n\nYou should have some familiarity with Python development to follow along with this tutorial. If you are not familiar with Vue but still want to follow along,  you can go through the basics of Vue in the [documentation](https://vuejs.org/v2/guide/) to get you up to speed in a couple of minutes.\n\nBefore we start, let’s get your environment ready. Check that you have the appropriate installation and setup on your machine.\n\nOpen up a terminal on your machine and execute the below code:\n\n```\n    $ python --version\n```\n\nIf you have a Python 3.6+ installed on your machine, you will have a similar text printed out as `python 3.6.0`. If you got an output similar to “Command not found”, you need to install Python on your machine. Head over to Python’s official website to download and get it installed.\n\nIf you have gotten all that installed, let's proceed.\n\n## Creating a Pusher account\n\nWe'll use Pusher Channels to handle all realtime functionalities. Before we can start using Pusher Channels, we need to get our API key. We need an account to be able to get the API key.\n\nHead over to Pusher and [log](https://dashboard.pusher.com/accounts/sign_in) in to your account or create a [new account](https://dashboard.pusher.com/accounts/sign_up) if you don’t have one already. Once you are logged in, create a new app and then copy the app API keys.\n\n## Setting up the backend app\n\nLet’s create our backend app that will be responsible for handling all communication to Pusher Channels and getting the sentiment of a comment.\n\nCreate the following files and folder in a folder named `live-comment-sentiment` in any convenient location on your system:\n\n```\n    live-comment-sentiment\n      ├── .env\n      ├── .flaskenv\n      ├── app.py\n      ├── requirements.txt\n      ├── static\n      │   ├── custom.js\n      │   └── style.css\n      └── templates\n          └── index.html\n          └── base.html\n```\n\n### Creating a virtual environment\n\nIt’s a good idea to have an isolated environment when working with Python. [virtualenv](https://virtualenv.pypa.io/) is a tool to create an isolated Python environment. It creates a folder which contains all the necessary executables to use the packages that a Python project would need.\n\nFrom your command line, change your directory to the Flask project root folder, execute the below command:\n\n```\n    $ python3 -m venv env\n```\n\nOr:\n\n```\n    $ python -m venv env\n```\n\nThe command to use depends on which associates with your Python 3 installation.\n\nThen, activate the virtual environment:\n\n```\n    $ source env/bin/activate\n```\n\nIf you are using Windows, activate the virtualenv with the below command:\n\n```\n    \u003e \\path\\to\\env\\Scripts\\activate\n```\n\nThis is meant to be a full path to the activate script. Replace `\\path\\to` with your correct path name.\n\nNext, add the Flask configuration setting to the `.flaskenv` file:\n\n```\n    FLASK_APP=app.py\n    FLASK_ENV=development\n```\n\nThis will instruct Flask to use `app.py` as the main entry file and start up the project in development mode.\n\nNow, add your Pusher API keys to the `.env` file:\n\n```\n    PUSHER_APP_ID=app_id\n    PUSHER_APP_KEY=key\n    PUSHER_APP_SECRET=secret\n    PUSHER_APP_CLUSTER=cluster\n```\n\nMake sure to replace `app_id`, `key`, `secret` and `cluster` with your own Pusher keys which you have noted down earlier.\n\nNext, create a Flask instance by adding the below code to `app.py`:\n\n``` python\n    # app.py\n    \n    from flask import Flask, jsonify, render_template, request\n    from textblob import TextBlob\n    import pusher\n    import os\n    \n    app = Flask(__name__)\n    \n    @app.route('/')\n    def index():\n        return render_template('index.html')\n    \n    # run Flask app\n    if __name__ == \"__main__\":\n        app.run()\n```\n\nIn the code above, after we instantiate Flask using `app = Flask(__name__)`, we created a new route - `/` which renders an `index.html` file from the templates folder.\n\nNow, add the following python packages to the `requirements.txt` file:\n\n```\n    Flask==1.0.2\n    python-dotenv==0.8.2\n    pusher==2.0.1\n    textblob==0.15.1\n```\n\nThe packages we added:\n\n- [python-dotenv](https://github.com/theskumar/python-dotenv): this library will be used by Flask to load environment configurations files.\n- [pusher](https://github.com/pusher/pusher-http-python): this is the Pusher Python library that makes it easy to interact with its API.\n- [textblob](https://textblob.readthedocs.io/en/dev/): a Python library which provides a simple API for common natural language processing (NLP).\n\nNext, install the library by executing the below command:\n\n```\n    $ pip install -r requirements.txt\n```\n\nOnce the packages are done installing, start up Flask:\n\n```\n    $ flask run\n```\n\nIf there is no error, our Flask app will now be available on port 5000. If you visit http://localhost:5000, you will see a blank page. This is because the `templates/index.html` file is empty, which is ok for now.\n\n### Setting up TextBlob\n\nTo get the sentiment from comments, we’ll use the [TextBlob](https://textblob.readthedocs.io/en/dev/) Python library which provides a simple API for common natural language processing (NLP). We already have the library installed. What we’ll do now is install the necessary data that TextBlob will need.\n\nFrom your terminal, make sure you are in the project root folder. Also, make sure your virtualenv is activated. Then execute the below function.\n\n```\n    # Download NLTK corpora\n    $ python -m textblob.download_corpora lite\n```\n\nThis will download the necessary NLTK [corpora](https://textblob.readthedocs.io/en/dev/install.html) (trained models).\n\n### Initialize the Pusher Python library\n\nInitialize the Pusher Python library by adding the below code to `app.py`  just after the `app = Flask(__name__)` line:\n\n``` python\n    # app.py\n    \n    pusher = pusher.Pusher(\n        app_id=os.getenv('PUSHER_APP_ID'),\n        key=os.getenv('PUSHER_APP_KEY'),\n        secret=os.getenv('PUSHER_APP_SECRET'),\n        cluster=os.getenv('PUSHER_APP_CLUSTER'),\n        ssl=True)\n```\n\nNow we are fully set.\n\n## Setting up the frontend\n\nWe’ll create a simple page for adding comments. Since we won’t be building a full blog website, we won’t be saving the comments to a database.\n\n### Adding the base layout\n\nWe’ll use the template inheritance approach to build our views, which makes it possible to reuse the layouts instead of repeating some markup across pages. \n\nAdd the following markup to the `templates/base.html` file:\n\n``` html\n    \u003c!-- /templates/base.html  --\u003e\n    \n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n          \u003c!-- Required meta tags --\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003c!-- Bootstrap CSS --\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\"\u003e\n        \u003ctitle\u003eLive comment\u003c/title\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n          \u003cdiv class=\"container\" id=\"app\"\u003e\n               {% block content %}  {% endblock %}\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='custom.js')}}\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThis is the base layout for our view. All other views will inherit from the base file.\n\nIn this file, we have added some libraries. This includes: \n\n- [Bootstrap](https://getbootstrap.com/)\n- Pusher JavaScript library\n- Vue.js\n\n### The blog page\n\nThis will serve as the landing page of the application. Add the following to the `templates/index.html` file:\n\n``` html\n    \u003c!-- /templates/index.html  --\u003e\n    \n    \n    {% extends 'base.html' %}\n    \n    {% block content %}\n    \u003cdiv class=\"grid-container\"\u003e\n        \u003cheader class=\"header text-center\"\u003e \n            \u003cimg src=\"https://cdn1.imggmi.com/uploads/2018/10/13/1d5cff977fd6e3aac498e581ef681a1a-full.png\"\u003e\n        \u003c/header\u003e\n        \u003cmain class=\"content\"\u003e         \n           \u003cdiv class=\"content-text\"\u003e\n              Our pioneering and unique technology is based on state-of-the-art \u003cbr/\u003e \n              machine learning and computer vision techniques. Combining deep neural \u003cbr/\u003e\n              networks and spectral graph theory with the computing... \u003cbr/\u003e\n            \u003c/div\u003e\n        \u003c/main\u003e\n        \u003csection class=\"mood\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col text-center\"\u003e \n                    \u003cdiv class=\"mood-percentage\"\u003e[[ happy ]]%\u003c/div\u003e\n                    \u003cdiv\u003eHappy\u003c/div\u003e \n                \u003c/div\u003e\n                \u003cdiv class=\"col text-center\"\u003e\n                    \u003cdiv class=\"mood-percentage\"\u003e[[ neutral ]]%\u003c/div\u003e\n                    \u003cdiv\u003eNeutral\u003c/div\u003e \n                \u003c/div\u003e\n                \u003cdiv class=\"col text-center\"\u003e \n                    \u003cdiv class=\"mood-percentage\"\u003e[[ sad ]]%\u003c/div\u003e\n                    \u003cdiv\u003eSad\u003c/div\u003e \n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/section\u003e\n        \u003csection class=\"comment-section\"\u003e\n            \u003cdiv v-for=\"comment in comments\"\u003e\n               \u003ccomment \n                    :comment=\"comment\"\n                    v-bind:key=\"comment.id\"\n                \u003e\n                \u003c/comment\u003e       \n            \u003c/div\u003e\n        \u003c/section\u003e\n        \u003csection class=\"form-section\"\u003e\n            \u003cform class=\"form\" @submit.prevent=\"addComment\"\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput\n                        type=\"text\" \n                        class=\"form-control\" \n                        v-model=\"username\"\n                        placeholder=\"Enter username\"\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003ctextarea \n                      class=\"form-control\" \n                      v-model=\"comment\" \n                      rows=\"3\"\u003e\u003c/textarea\u003e\n                \u003c/div\u003e\n                \u003cbutton type=\"submit\" class=\"btn btn-primary btn-block\"\u003eAdd comment\u003c/button\u003e\n            \u003c/form\u003e\n        \u003c/section\u003e\n    \u003c/div\u003e\n    {% endblock %}\n```\n\nIn the preceding code:\n\n- In the `\u003csection class=\"mood\"\u003e… \u003c/section\u003e`, we added three placeholders - [[ happy ]], [[ neutral ]] and [[ sad ]], which is the percentages of the moods of users who added comments. These placeholders will be replaced by their actual values when Vue takes over the page DOM ([mounted](https://vuejs.org/v2/api/#mounted)). \n\n      \n\n  \u003e Notice we are using `[[  ]]` instead of the normal Vue placeholders - `{{  }}`. This is because we are using [Jinja2](http://jinja.pocoo.org/) template that comes bundled with Flask to render our page. The Jinja2 uses `{{   }}` placeholder to hold variables that will be substituted to their real values and so do Vue by default. So to avoid conflicts, we will change Vue to use `[[  ]]` instead.\n\n\n\n- In the `\u003csection class=\"comment-section\"\u003e` section, we are rendering the comments to the page.\n- Next, is the `\u003csection class=\"form-section\"\u003e… \u003c/section\u003e`, where we added a form for adding new comments. Also in the inputs fields, we declare a [two-way data binding](https://vuejs.org/v2/guide/forms.html) using the v-model directive.\n- In the form section - `\u003cform class=\"form\" @submit.prevent=\"addComment\"\u003e…`, notice that we have the `@submit.prevent` directive. This will prevent the form from submitting normally when the user adds a new comment. Then we call the `addComment` function to add a comment. We don’t have the `addComment` function declared anywhere yet. We’ll do this when we initialize Vue.\n\nNow, add some styles to the page. Add the below styles to the `static/style.css` file:\n\n``` css\n    body {\n        width: 100%;\n        height: 100%;\n    }\n    .grid-container {\n        display: grid;\n        grid-template-rows: 250px auto auto 1fr;\n        grid-template-columns: repeat(3, 1fr);\n        grid-gap: 20px;\n        grid-template-areas:\n            '. header .'\n            'content content content'\n            'mood mood mood'\n            'comment-section comment-section comment-section'\n            'form-section form-section form-section';\n    }\n    .content {\n        grid-area: content;\n    }\n    .comment-section {\n        grid-area: comment-section;\n    }\n    .content-text {\n       font-style: oblique;\n       font-size: 27px;\n    }\n    .mood {\n        grid-area: mood;\n    }\n    .header {\n        grid-area: header;\n    }\n    .form-section {\n        grid-area: form-section;\n    }\n    .comment {\n        border: 1px solid rgb(240, 237, 237);\n        border-radius: 4px;\n        margin: 15px 0px 5px 60px;\n        font-family: monospace;\n    }\n    .comment-text {\n        padding-top: 10px;\n        font-size: 17px;\n    }\n    .form {\n        margin-top: 50px;\n    }\n    .mood-percentage {\n       border: 1px solid gray;\n       min-height: 50px;\n       padding-top: 10px;\n       font-size: 30px;\n       font-weight: bolder;\n    }\n```\n\nNow we have all our user interface ready. If you visit the app URL again, you will see a similar page as below:\n\n![flask-comments-sentiment-interface](//images.ctfassets.net/1es3ne0caaid/5ZAOxZyWmkC440I20kGeic/59156808839dade15400693ffaa7bc8b/flask-comments-sentiment-interface.png)\n\n## Initializing Channels\n\nNow let’s initialize Channels. Since we have added the Pusher JavaScript library already, we’ll go ahead and initialize it.\n\nAdd the below code to the `static/custom.js` file:\n\n``` javascript\n    // Initiatilze Pusher JavaScript library\n    var pusher = new Pusher('\u003cPUSHER-APP-KEY\u003e', {\n        cluster: '\u003cCLUSTER\u003e',\n        forceTLS: true\n    });\n```\n\nReplace `\u003cPUSHER-APP-KEY\u003e` and `\u003cCLUSTER\u003e` with your correct Pusher app details you noted down earlier.\n\n## Creating the comment component\n\nIf you view the `/templates/index.html` file, in the `\u003csection class=\"comment-section\"\u003e` section, you will notice we are calling the `\u003ccomment\u003e` component which we have not created yet. We need to create this component. Also, notice inside the file, we are calling the v-for (`v-for=\"comment in comments\"`) directive to render the comments.\n\nLet’s create the component. Add the below code to `static/custom.js`:\n\n``` javascript\n    Vue.component('comment', {\n        props: ['comment'],\n        template: `\n            \u003cdiv class=\"row comment\"\u003e \n                \u003cdiv class=\"col-md-2\"\u003e\n                    \u003cimg \n                       src=\"https://cdn1.imggmi.com/uploads/2018/10/13/1d5cff977fd6e3aac498e581ef681a1a-full.png\" \n                       class=\"img-responsive\" \n                       width=\"90\" \n                       height=\"90\"\n                    \u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-10 comment-text text-left\" v-html=\"comment.comment\"\u003e             \u003c/div\u003e\n            \u003c/div\u003e\n        `\n    })\n```\n\n## Initialize Vue\n\nNow let’s initialize Vue to take over the DOM manipulation. \n\nAdd the below code to the `static/custom.js` file:\n\n``` javascript\n    var app = new Vue({\n        el: '#app',\n        delimiters: ['[[', ']]'],\n        data: {\n          username: '',\n          comment: '',\n          comments: [],\n          happy: 0,\n          sad: 0,\n          neutral: 0,\n          socket_id: \"\"\n        },\n        methods: {},\n        created () {},\n    })\n```\n\nIn the preceding code: \n\n- We initialize Vue using `var app = new Vue(…` passing to it a key-value object.\n- Next, we tell Vue the part on the page to watch using `el:` `'``#app'`. The `#app` is the ID we have declared in the `/templates/base.html`.\n- Next, using `delimiters: ['[[', ']]'],`, we change the default Vue delimiter from `{{ }}` to `[[ ]]` so that it does not interfere with that of Jinja2.\n- Then we defined some states using `data: {….`.\n- Finally, we have `methods: {},` and `created () {},`. We’ll add all the function we’ll declare inside the  ``methods: {}`` block and then the `created () {}` is for adding code that will execute once Vue instance is [created](https://vuejs.org/v2/guide/instance.html#Instance-Lifecycle-Hooks).\n\nNext, add a function to update the sentiment score. Add the below code to the `methods: {}` block of the `static/custom.js` file:\n\n``` javascript\n            updateSentiments () {\n                // Initialize the mood to 0\n                let [happy, neutral, sad] = [0, 0, 0];\n                \n                // loop through all comments, then get the total of each mood\n                for (comment of this.comments) {\n                   if (comment.sentiment \u003e 0.4) {\n                      happy++;\n                   } else if (comment.sentiment \u003c 0) {\n                      sad++;\n                   } else {\n                       neutral++;\n                   }\n                }\n                \n                const total_comments = this.comments.length;\n                \n                // Get the percentage of each mood\n                this.sad = ((sad/total_comments) * 100).toFixed();\n                this.happy = ((happy/total_comments) * 100).toFixed();\n                this.neutral = ((neutral/total_comments) * 100).toFixed()\n                \n                // Return an object of the mood values\n                return {happy, neutral, sad}\n            },\n```\n\nIn the code above, we created a function that will loop through all the comments to get the number of each mood that appeared. Then we get the percentage of each mood then return their corresponding values.\n\nNext, add a function to add a new comment. Add the below code to the methods: {} block right after the code you added above:\n\n``` javascript\n            addComment () {\n               \n               fetch(\"/add_comment\", {\n                    method: \"post\",\n                    headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        id: this.comments.length,\n                        username: this.username,\n                        comment: this.comment,\n                        socket_id: this.socket_id\n                    })\n                })\n                .then( response =\u003e response.json() )\n                .then( data =\u003e {\n                    // Add the new comment to the comments state data\n                    this.comments.push({\n                        id: data.id,\n                        username: data.username,\n                        comment: data.comment,\n                        sentiment: data.sentiment\n                    })\n                    \n                    // Update the sentiment score\n                    this.updateSentiments();\n                 })\n                 \n               this.username = \"\";\n               this.comment = \"\";\n            },\n```\n\nHere, we created a function that makes a [request](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to the `/add_comment` route to get the sentiment of a comment. Once we receive a response, we add the comment to the comments state. Then we call `this.updateSentiments()` to update the sentiment percentage. This function will be called each time a user wants to add a new comment.\n\nNext, let’s make comments visible to others in realtime. Add the below code to the `created () {}` block in the static/custom.js:\n\n``` javascript\n            // Set the socket ID\n            pusher.connection.bind('connected', () =\u003e {\n                this.socket_id = pusher.connection.socket_id;\n            });\n            \n            // Subscribe to the live-comments channel\n            var channel = pusher.subscribe('live-comments');\n            \n            // Bind the subscribed channel (live-comments) to the new-comment event\n            channel.bind('new-comment', (data) =\u003e {\n               this.comments.push(data);\n               \n               // Update the sentiment score\n               this.updateSentiments();\n            });\n```\n\n## Get sentiments from comments and make comments realtime\n\nNow, let’s add a function to get the sentiment of a message and then trigger a `new-comment` event whenever a user adds a comment. Add the below code to `app.py`\n\n``` python\n    # ./api/app.py\n    \n    @app.route('/add_comment', methods=[\"POST\"])\n    def add_comment():\n        # Extract the request data\n        request_data = request.get_json()\n        id = request_data.get('id', '')\n        username = request_data.get('username', '')\n        comment = request_data.get('comment', '')\n        socket_id = request_data.get('socket_id', '')\n        \n        # Get the sentiment of a comment\n        text = TextBlob(comment)\n        sentiment =  text.polarity\n        \n        comment_data = {\n            \"id\": id,\n            \"username\": username,\n            \"comment\": comment,\n            \"sentiment\": sentiment,\n        }\n        \n        #  Trigger an event to Pusher\n        pusher.trigger(\n            \"live-comments\", 'new-comment', comment_data, socket_id\n        )\n        \n        return jsonify(comment_data)\n```\n\nThe sentiment property returns a tuple of the form (polarity, subjectivity) where polarity ranges from -1.0 to 1.0 and subjectivity ranges from 0.0 to 1.0. We will only use the polarity property.\n\nIn the `pusher.trigger(…`, method,  we are passing the `socket_id` so that the user triggering the event won't get back the data sent.\n\n## Testing the app\n\nCongrats! Now we have our live comments with sentiments. To test the app, open the app in your browser on two or more different tabs, then add comments and see them appear in realtime on other tabs.\n\nHere is some sample comment you can try out:\n\n\n- The post is terrible! - Sad (Negative)\n- I love the way this is going - Happy (Positive)\n- This is amazingly simple to use. What great fun! - Happy (Positive)\n\nIf you are getting an error or nothing is working. Stop the server (Press CTRL+C) and then restart it (`$ flask run`). \n\n\n## Conclusion\n\nIn this tutorial, we built a live comment with sentiment analysis. We used Vue for DOM manipulation, Flask for the server side and Channels for realtime functionality. We used the [TextBlob](https://textblob.readthedocs.io/en/dev/quickstart.html#sentiment-analysis) python library to detect mood from text.","metaTitle":"Build a live comment feature using Flask and Vue","metaDescription":"This tutorial will guide you through building a comments feature for a website, using Flask and Vue.js. New comments will appear in realtime, and the application includes sentiment analysis, to measure the opinion of commenters."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Bwn4NZJ84wW8q0sww6Mew","type":"Entry","createdAt":"2018-09-01T05:31:43.519Z","updatedAt":"2018-09-01T05:31:43.519Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live commenting system with auto moderation using Laravel","url":"live-comments-automod-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/rcam","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-08-30","description":"Use Laravel to build a live comments feature with built-in auto moderation. Users can comment on a sample post. Their comments are either displayed instantly, or rejected with a message asking them to be nicer.","prerequisite":"You will need PHP 7+ and Composer installed on your machine.","content":"It’s 2018, and a lot of conversations happen over the Internet. It’s easy for people to forget to be nice when they’re sitting behind a screen and typing, as opposed to talking face-to-face. Many site admins employ some form of moderation to keep user behavior, such as comments, in check and ensure people play by the rules.  This moderation could be manual (an admin logs in to review comments before approving) or automatic (an external service analyses comments and approves or rejects based on certain signals), or even a combination of both.\n\nIn this tutorial, we’ll build a blog which allows users to comment on posts. These comments will be sent to an external API for moderation, and comments which pass will be saved and displayed under the post in realtime, using Pusher Channels. Here’s a preview of the app in action:\n\n![laravel-automod-demo](//images.ctfassets.net/1es3ne0caaid/1YLwQjfjJeKs0e2MG6SckA/7f85620ac7c0ca89d9f6977bbfdac6ea/laravel-automod-demo.gif)\n\nYou can find the source code of the complete application [on GitHub.](https://github.com/shalvah/rcam) Let’s go!\n\n## Prerequisites\n\n1. PHP 7.1.3 or newer\n2. [Composer](http://getcompocer.org).\n3. A Pusher account. Create one [here](https://pusher.com/signup).\n\n\n## Setting up\n\nFirst, create a new Laravel project:\n\n```\n    composer create-project --prefer-dist laravel/laravel rcam\n```\n\nOpen up the generated project folder (`rcam`). Set the value of `DB_CONNECTION` in your `.env` file to `sqlite` and remove all other lines that start with `DB_`.\n\n```\n    DB_CONNECTION=sqlite\n```\n\nThen create a file called `database.sqlite` in the `database` folder of your app.\n\nRun the following command to add the `zttp` package. We’ll use it to make an API call to the moderation service:\n\n```\n    composer require kitetail/zttp\n```\n\nNow we’ll set up our `Comment` model and database migration. Run the following command:\n\n```\n    php artisan make:model -m Comment\n```\n\nLook for the comments migration file that was created in your `database/migrations` folder. Modify its contents so it looks like this:\n\n``` php\n    // 2018_xx_xx_xxxxxx_create_comments_table\n    \n    \u003c?php\n    \n    use Illuminate\\Support\\Facades\\Schema;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Database\\Migrations\\Migration;\n    \n    class CreateCommentsTable extends Migration\n    {\n        public function up()\n        {\n            Schema::create('comments', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003estring('username');\n                $table-\u003estring('text');\n                $table-\u003etimestamps();\n            });\n        }\n    \n        public function down()\n        {\n            Schema::dropIfExists('comments');\n        }\n    }\n```\n\nThen we run migrations:\n\n```\n    php artisan migrate\n```\n\nLet’s add our route and view for the fake post and comments. Replace the contents of your `routes/web.php` with the following:\n\n``` php\n    // routes/web.php\n    \u003c?php\n    \n    Route::get('/', 'HomeController@home');\n```\n\nCreate a file `app/Http/Controllers/HomeController.php` with the following content:\n\n``` php\n    // app/Http/Controllers/HomeController.php\n    \n    \u003c?php\n    \n    namespace App\\Http\\Controllers;\n    \n    use App\\Comment;\n    \n    class HomeController extends Controller\n    {\n        public function home()\n        {\n            // order comments from newest to oldest\n            $comments = Comment::orderBy('id desc')-\u003eget();\n            return view('home', ['comments' =\u003e $comments]);\n        }\n    }\n```    \n\nNow create the file `resources/views/home.blade.php` with the following content:\n\n``` php\n    \u003c!-- resources/views/home.blade.php --\u003e\n    \n    \u003c!doctype html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\"\u003e\n    \n        \u003ctitle\u003eRcam\u003c/title\u003e\n    \n        \u003c!-- Styles --\u003e\n        \u003cstyle\u003e\n            html, body {\n                background-color: #fff;\n                color: #636b6f;\n                font-family: sans-serif;\n                padding: 20px;\n            }\n    \n            input {\n                border: 2px solid blue;\n                font-size: 16px;\n                padding: 5px;\n            }\n    \n            button {\n                font-size: 16px;\n                padding: 5px;\n            }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \u003ch2\u003ePost title\u003c/h2\u003e\n    This is a dummy post. There isn't really much to it, but it could be really fun if you're bored. Speaking of bored, did\n    you hear the joke about the blackboard that had...oh, never mind. I'm not allowed to say that. Just drop a comment and\n    be on your merry way. Wait, did I tell you this is a dummy post?\n    \n    \u003cbr\u003e\u003cbr\u003e\n    \u003cdiv\u003e\n        \u003ch3\u003eComments\u003c/h3\u003e\n        \u003cform onsubmit=\"addComment(event);\"\u003e\n            \u003cinput type=\"text\" placeholder=\"Add a comment\" name=\"text\" id=\"text\" required\u003e\n            \u003cinput type=\"text\" placeholder=\"Your name\" name=\"username\" id=\"username\" required\u003e\n            \u003cbutton id=\"addCommentBtn\"\u003eComment\u003c/button\u003e\n        \u003c/form\u003e\n        \u003cdiv class=\"alert\" id=\"alert\" style=\"display: none;\"\u003e\u003c/div\u003e\n        \u003cbr\u003e\n    \n        \u003cdiv id=\"comments\"\u003e\n            @foreach($comments as $comment)\n                \u003cdiv\u003e\n                    \u003csmall\u003e{{ $comment-\u003eusername }}\u003c/small\u003e\n                    \u003cbr\u003e\n                    {{ $comment-\u003etext }}\n                \u003c/div\u003e\n            @endforeach\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n\n\n## Moderating comments\n\nNow let’s allow users to post comments. In the view we built above, we created a form for submitting comments. The `onsubmit` handler of that form is a function called `addComment`, so let’s implement that. Add this code to your `resources/views/home.blade.php`, just before the closing `\u003c/body\u003e` tag:\n\n``` php\n    \u003c!-- resources/views/home.blade.php --\u003e\n    \n    \u003c!-- Add jQuery --\u003e\n    \u003cscript src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n            integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\"\n            crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        function displayComment(data) {\n            let $comment = $('\u003cdiv\u003e').text(data['text']).prepend($('\u003csmall\u003e').html(data['username'] + \"\u003cbr\u003e\"));\n            $('#comments').prepend($comment);\n        }\n            \n        function addComment(event) {\n            function showAlert(message) {\n                let $alert = $('#alert');\n                $alert.text(message).show();\n                setTimeout(() =\u003e $alert.hide(), 4000);\n            }\n    \n            event.preventDefault();\n            $('#addCommentBtn').attr('disabled', 'disabled');\n            let data = {\n                text: $('#text').val(),\n                username: $('#username').val(),\n            };\n            fetch('/comments', {\n                body: JSON.stringify(data),\n                credentials: 'same-origin',\n                headers: {\n                    'content-type': 'application/json',\n                    'x-csrf-token': $('meta[name=\"csrf-token\"]').attr('content'),\n                    'x-socket-id': window.socketId\n                },\n                method: 'POST',\n                mode: 'cors',\n            }).then(response =\u003e {\n                $('#addCommentBtn').removeAttr('disabled');\n                if (response.ok) {\n                    displayComment(data);\n                    showAlert('Comment posted!');\n                } else {\n                    showAlert('Your comment was not approved for posting. Please be nicer :)');\n                }\n            })\n        }\n    \u003c/script\u003e\n```\n\nHere, we’re using [Fetch](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) to post the comment to the backend. If a `200 OK` response is received, we display the comment under the post. If not, that means the comment failed moderation, so we’ll tell the user to rephrase their comment.\n\nYou’ll notice we’re sending a couple of custom headers (`x-csrf-token` and `x-socket-id`). The first header is to satisfy Laravel’s CSRF protection, which ensures someone can’t be tricked into posting a comment to our site from a different site. You can read more about CSRF protection [here](https://laravel.com/docs/5.5/csrf). The second header is our Pusher socket ID, which tells the backend which client sent this request. It prevents the server from sending our own messages back to us. There’s more on that [here](https://pusher.com/docs/server_api_guide/server_excluding_recipients). For now, it’s always going to be `undefined`, but we’ll come back to that later.\n\nNext, add the route for making a comment to the bottom of your `routes/web.php` file:\n\n``` php\n    // routes/web.php\n    \n    Route::post('/comments', 'HomeController@addComment');\n```\n\nNext, we’ll add the method that handles this to our `HomeController`:\n\n``` php\n    // app/Http/Controllers/HomeController.php\n    \n    public function addComment()\n    {\n        $data = request()-\u003epost();\n        Comment::moderate($data['text']);\n        return Comment::create($data);\n    }\n```\n\nNow open up the `app/Comment.php` file and replace its contents with the following:\n\n``` php\n    // app/Comment.php\n    \n    \u003c?php\n    \n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    use Zttp\\Zttp;\n    \n    class Comment extends Model\n    {\n        protected $guarded = [];\n    \n        public static function moderate($comment)\n        {\n            $response = Zttp::withoutVerifying()-\u003epost(\"https://commentator.now.sh\", [\n                'comment' =\u003e $comment,\n                'limit' =\u003e -3,\n            ])-\u003ejson();\n            if ($response['commentate']) {\n                abort(400, \"Comment not allowed\");\n            }\n        }\n    }\n```\n\n\nHere we’ve defined a `moderate` method. In it, we send the comment data to a comment moderation service located at https://commentator.now.sh. We’ve also specified a `limit` parameter of -3, which means that we’re willing to accept comments which have a score of -3 (mildly negative), but not any less. The response from the service contains a `commentate` parameter that is true if the comment scored below our limit. In such a case, we return a `400 Bad Request` to the frontend and prevent the comment from being saved.\n\n\n## Displaying new comments in realtime\n\nFirst, we’ll set up Pusher on the backend. Install the Pusher Laravel package and publish the config file by running the following commands:\n\n```\n    composer require pusher/pusher-http-laravel\n    php artisan vendor:publish --provider=\"Pusher\\Laravel\\PusherServiceProvider\"\n```\n\nSign in to [your Pusher dashboard](http://app.pusher.com) and create a new app. Copy your app credentials from the **App Keys** section and add them to your `.env` file:\n\n```\n    PUSHER_APP_ID=your-app-id\n    PUSHER_APP_KEY=your-app-key\n    PUSHER_APP_SECRET=your-app-secret\n    PUSHER_APP_CLUSTER=your-app-cluster\n```\n\n\u003e **Note**: Laravel sometimes caches old configuration, so for the project to see your new configuration values, you might need to run the command `php artisan config:clear`\n\nThen add the following JavaScript to your view, just before the closing `\u003c/body\u003e` tag:\n\n``` php\n    \u003c!-- resources/views/home.blade.php --\u003e\n    \n    \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        var socket = new Pusher(\"your-app-key\", {\n            cluster: 'your-app-cluster',\n        });\n        // set the socket ID when we connect\n        socket.connection.bind('connected', function() {\n            window.socketId = socket.connection.socket_id;\n        });\n        socket.subscribe('comments')\n            .bind('new-comment',displayComment);\n    \u003c/script\u003e\n```\n\nReplace `your-app-key` and `your-app-cluster` with the respective credentials as gotten from your Pusher app dashboard.\n\nNow, let’s modify our `addComment` method on the backend so it triggers a new Pusher message when a comment is created successfully.\n\n``` php\n    // app/Http/Controllers/HomeController.php\n    \n    \n    public function addComment()\n    {\n        $data = request()-\u003epost();\n        Comment::moderate($data['text']);\n        $comment = Comment::create($data);\n        Pusher::trigger('comments', 'new-comment', $comment, request()-\u003eheader('X-Socket-Id'));\n        return $comment;\n    }\n```\n\nYou’ll need to import the `Pusher` class by adding `use Pusher\\Laravel\\Facades\\Pusher;` at the top of the file.\n\nAnd with that, we’re done. Start up your app by running `php artisan serve`, then visit http://127.0.0.1:8000. Try adding a few nice comments (“This is good”,  “I don’t agree with this” ), and a few comments with some “bad” words (“This article is full of shit”, “Damn, this article sucks”). You should see the comments get moderated and then show up in realtime.\n\n\n## Conclusion\n\nIn this tutorial, we’ve combined Pusher Channels with an external comment moderation service to improve the quality of comments on our blog and the user experience for every reader. This is just one combination of services we can make to improve our user’s experience on our site or app. I hope you’ve enjoyed this! You can check out the source code of the completed application [on GitHub.](https://github.com/shalvah/rcam)","metaTitle":"Build a live comments system with auto moderation in Laravel","metaDescription":"Create a live comments feature with auto moderation built in, using Laravel. Users can comment on a sample post. Their comments are either displayed instantly, or rejected with a message asking them to be nicer."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4QXgSliGogg2OWc0iQGkW6","type":"Entry","createdAt":"2018-07-04T14:12:16.900Z","updatedAt":"2018-07-04T14:12:16.900Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live comments feature with Ionic","url":"live-comments-ionic","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/FeezyHendrix/ionic-realtime-comments-with-sentiment-analysis","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-07-02","description":"Build a mobile app feature with Ionic, allowing users to add comments to a post, and see updates in realtime. The app features sentiment analysis, adding upvotes (or downvotes) to the post, depending on the language of the comments.","prerequisite":"You will need Node and npm installed on your machine. A basic understanding of Ionic development will be helpful.","content":"## Introduction\n\nSentiment analysis is a way to evaluate written or spoken language to determine if the expression is favorable, unfavorable, or neutral, and to what degree. You can read up about it [here](https://www.clarabridge.com/sentiment-analysis/).\n\nLive comments offer a realtime comment experience that doesn’t require a page refresh. You see comments when they’re posted.\n\nUsing [Ionic](https://ionicframework.com/), you can build a mobile app with HTML, CSS/SCSS, and JavaScript. With [Pusher](https://pusher.com/) we can enable realtime messaging in the chat using Pusher’s pub/sub pattern.\n\nWe’ll be building a live comments application using Pusher, Ionic and the [sentiment](https://github.com/thisandagain/sentiment) library for rating suggestions based on the context of messages received.\n\nUsing our application, users can see the rating of each post using sentiment analysis.\n\nHere’s a demo of the final product:\n\n![ionic-comments-sentiment-demo](//images.ctfassets.net/1es3ne0caaid/3TS8YXmOI0umyCGYaCQWg8/234fc8069d0e70c578a148659f4fb393/ionic-comments-sentiment-demo.gif)\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of [Angular](https://angular.io), [Ionic](https://ionicframework.com) and [Node.js](https://nodejs.org/en/) is required. Please ensure that you have Node and npm installed before you begin.\n\nIf you have no prior knowledge of Ionic, kindly follow the [tutorial here.](https://ionicframework.com/docs/intro/tutorial/) Come back and finish the tutorial when you’re done.\n\nWe’ll be using these tools to build out our application:\n\n1. [Express](https://expressjs.com/)\n2. [Node](https://nodejs.org/en/)\n3. [Pusher](https://pusher.com/)\n4. [Ionic](https://ionicframework.com)\n\n\n## Setup and folder structure\n\nTo get started, we will use the CLI (command line interface) provided by the Ionic team to initialize our project.\n\nFirst, install the CLI by running `npm install -g ionic cordova`. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/en/) installed.\n\nTo create a new Ionic App using the CLI, open a terminal and run:\n\n```\n    ionic start liveComments blank\n```\n\nThe command is merely telling the CLI to create a new app called `liveComments` and it should make use of the blank starter template.  While the setup is running, you might get a prompt `\"Would you like to integrate your new app with Cordova to target native iOS and Android?\"`. If you want to start running or testing the application on a mobile device or emulator as you build, then choose yes by typing `Y` and pressing Enter on your keyboard, else type `N` and continue. You might get another prompt   `\"If you would like to integrate ionic pro ?\"` ,  we wouldn’t need that in this tutorial so just type `N` and if you would like to extend the project into production with your team choose `Y`.\n\nOpen the newly created `liveComments`. Your folder structure should look something like this:\n\n```\n    liveComments /\n      node_modules /\n      src / \n        app /\n          assets /\n          pages /\n            home /\n              home.html\n              home.ts\n              home.scss\n```\n\nOpen a terminal inside the app folder and start the application by running: \n\n```\n    ionic serve \n```\n\nAutomatically your default browser should open, and you should see the screenshot below if everything went well.\n\n![ionic-chat-sentiment-ionic-serve](//images.ctfassets.net/1es3ne0caaid/cZJy8Cc9WgkoiOEKI44uA/8a6010cf3b3515127f486c76c18f33de/ionic-chat-sentiment-ionic-serve.png)\n\n## Building our server\n\nNow that we have our Ionic application running let’s build our server.\nTo do this, we’ll need to install Express. Express is a fast, unopinionated, minimalist web framework for Node.js. We’ll use this to receive requests from our Ionic application.\n\nRun `npm install express` on a terminal inside the root folder of your project to install Express.\nCreate a file called `server.js` at the root of the project and update it with the code snippet below:\n\n``` javascript\n     // server.js   \n        require('dotenv').config();\n        const express = require('express');\n        const bodyParser = require('body-parser');\n    \n        const app = express();\n        const port = process.env.PORT || 4000;\n    \n        app.use(bodyParser.json());\n        app.use(bodyParser.urlencoded({ extended: false }));\n        app.use((req, res, next) =\u003e {\n          res.header('Access-Control-Allow-Origin', '*');\n          res.header(\n            'Access-Control-Allow-Headers',\n            'Origin, X-Requested-With, Content-Type, Accept'\n          );\n          next();\n        });\n    \n        app.listen(port, () =\u003e {\n          console.log(`Server started on port ${port}`);\n        });\n```\n\nWe referenced three packages that haven’t been installed, `body-parser`, `pusher` and `dotenv`. Install these packages by running the following command in your terminal.\n\n```\n        npm i body-parser pusher dotenv\n```\n\n\n- body-parser is a package used to parse incoming request bodies in a middleware before your handlers, available under the `req.body` property.\n- dotenv is a zero-dependency module that loads environment variables from a `.env` file into [process.env](https://nodejs.org/docs/latest/api/process.html#process_process_env). This package is used to avoid adding sensitive information like the `appId` and `secret` into our codebase directly.\n- The dotenv package will load the variables provided in our `.env` file into our environment.\n- CORS: The calls to our endpoint will be coming in from a different origin. Therefore we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n- The `dotenv` library should always be initialized at the start of our file because we need to load the variables as early as possible to make them available throughout the application.\n\nWe also installed the [Pusher](https://pusher.com/) library as a dependency. Follow this [link](https://pusher.com) to create a Pusher account if you haven’t done so already.\n\nLet’s create a `.env` file to load the variables we’ll be needing into the Node environment. Create the file in the root folder of your project and update it with the code below.\n\nYour `.env`  file should look something like the snippet below. We’ll add our Pusher `appId`, `key` and `secret` provided here.\n\n```\n    PUSHER_APP_ID=\u003cAPP_ID\u003e\n    PUSHER_KEY=\u003cPUSHER_KEY\u003e\n    PUSHER_SECRET=\u003cPUSHER_SECRET\u003e\n    PUSHER_CLUSTER=\u003cPUSHER_CLUSTER\u003e\n```\n\nIf you noticed, we added the `dotenv` package at the start of our file. This is done because we need to make the variables available throughout the file.\n\n\n### Send comments\n\nTo enable users to send and receive messages, we’ll create a route to handle incoming requests. Update your `server.js` file with the code below:\n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    const pusher = new Pusher({\n        appId: process.env.PUSHER_APP_ID,\n        key: process.env.PUSHER_KEY,\n        secret: process.env.PUSHER_SECRET,\n        cluster: process.env.PUSHER_CLUSTER,\n        encrypted: true,\n    });\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n    );\n      next();\n    });\n    app.post('/message', async (req, res) =\u003e {\n      const { body } = req\n      const { comment } = body\n      const data = {\n        comment,\n        timeStamp: new Date(),\n      };\n      try {\n        pusher.trigger('comments', 'message', data);\n      } catch (e) {}\n      res.json(data);\n    })\n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\n\n- We created a `POST /message` route which, when hit, triggers a Pusher event.\n- We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the body of the request, we also got the `comment` in the request body sent by the user.\n- The `data` object contains the `text` and `name` sent by the user. It also includes a timestamp.\n- The `trigger` method which takes a trigger identifier, triggers our `chat` channel.\n- The trigger function also takes a second argument, the event name (`message`), and a payload(`data`).\n- We still go ahead to respond with an object containing the `data` variable we created.\n\n\n## Sentiment analysis\n\n\u003e Sentiment analysis uses data mining processes and techniques to extract and capture data for analysis in order to discern the subjective opinion of a document or collection of documents, like blog posts, reviews, news articles, and social media feeds like tweets and status updates. - [Technopedia](https://www.techopedia.com/definition/29695/sentiment-analysis).\n\nUsing sentiment analysis, we’ll analyze the messages sent to determine the attitude of the sender. With the data gotten from the analysis, we’ll determine the emojis to suggest to the user.\n\nWe’ll use the [Sentiment](https://github.com/thisandagain/sentiment) JavaScript library for analysis. To install this library, open a terminal in the root folder of your project and run the following command.\n\n```\n        npm install sentiment\n```\n\nWe’ll update our `POST /messages` route to include analysis of the messages being sent in. Update your `server.js` with the code below.\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    const pusher = new Pusher({\n        appId: process.env.PUSHER_APP_ID,\n        key: process.env.PUSHER_KEY,\n        secret: process.env.PUSHER_SECRET,\n        cluster: process.env.PUSHER_CLUSTER,\n        encrypted: true,\n    });\n    const Sentiment = require('sentiment');\n    const sentiment = new Sentiment();\n    const app = express();\n    const port = process.env.PORT || 4000;\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    app.post('/message', async (req, res) =\u003e {\n      const { body } = req\n      const { message } = body\n      const result = sentiment.analyze(message);\n      const comparative = result.comparative;\n      const data = {\n        message,\n        score : result.score,\n        timeStamp: new Date(),\n      };\n      try {\n        pusher.trigger('comments', 'message', data);\n      } catch (e) {}\n      res.json(data);\n    })\n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```\n\n- Include the sentiment library in the project.\n- `result`: here, we analyze the message sent in by the user to determine the context of the message.\n- `comparative`: this is the comparative score gotten after analyzing the message.\n- A new property (`score`) is added to the response data containing the message’s score after analysis.\n\nYou can now start the server by running `node server.js` in a terminal in the root folder of the project.\n\n\n## Building the UI\n\nLet’s begin building the interface, open `home.html` and update with the code below :\n\n``` html\n    // src/pages/home/home.html\n    \n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003e\n          Live Comments\n        \u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \u003cion-content padding\u003e\n      \u003c!-- example blog post--\u003e\n      \u003ch1 text-center\u003e Interesting Article\u003c/h1\u003e\n      \u003cp\u003e\n        Once you're done creating the quality content, you still have the challenge of presenting it that clearly dictates what your blog is about. Images, text, and links need to be shown off just right -- otherwise, readers might abandon your content if it's not aesthetically showcased in a way that's both appealing and easy to follow. \u003c/p\u003e\n        \u003cdiv class=\"flex-items\"\u003e\n            \u003cion-row\u003e\n                \u003cion-col col-6\u003e\n                      \u003ch1 float-right\u003e{{rating.good}} \u003cion-icon  name=\"arrow-round-up\" style=\"color : #90EE90; font-size: 25px;\"\u003e\u003c/ion-icon\u003e\u003c/h1\u003e\n                \u003c/ion-col\u003e\n                \u003cion-col col-6\u003e\n                    \u003ch1\u003e{{rating.bad}} \u003cion-icon name=\"arrow-round-down\" style=\"color: #FF0000; font-size: 25px;\"\u003e\u003c/ion-icon\u003e\u003c/h1\u003e\n                \u003c/ion-col\u003e\n              \u003c/ion-row\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"comment-box\"\u003e\n          \u003cion-card *ngFor=\"let comment of comments\"\u003e\n            \u003cion-card-content\u003e\n                  \u003cstrong\u003e{{comment.message}}\u003c/strong\u003e\n                  \u003cp\u003e\n                   {{comment.timeStamp | date : 'H:mm a'}}\n                  \u003c/p\u003e\n            \u003c/ion-card-content\u003e\n           \n          \u003c/ion-card\u003e\n        \u003c/div\u003e\n      \u003cion-footer padding\u003e\n        \u003cion-textarea [(ngModel)]=\"message\" type=\"text\" placeholder=\"Comment .... \"\u003e\u003c/ion-textarea\u003e\n        \u003cbutton ion-button small float-right round (click)=\"sendComment()\"\u003eSend\u003c/button\u003e\n      \u003c/ion-footer\u003e\n      \n    \u003c/ion-content\u003e\n```    \n\nIn the code snippet above:\n\n- We have an `ion-input` element for our users’ comments.\n- A send button to send our comment to the server.\n- We also used the `*ngFor` directive to loop through all our comments from the server and render them inside an `ion-card` element.\n\nOpen `Home.ts` file and update it like so:\n\n``` typescript\n    // src/pages/home/home.ts\n    \n    import { HttpClient } from '@angular/common/http';\n    import { Component } from '@angular/core';\n    import { NavController } from 'ionic-angular';\n    \n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html'\n    })\n    export class HomePage {\n      comments = [];\n      message: string;\n      url: string = 'http://localhost:4000/message'\n      rating = {\n        bad : 0,\n        good : 0,\n      }\n      constructor(public navCtrl: NavController, public http : HttpClient) {}\n    \n      sendComment(){\n        if(this.message != ''){\n          this.http.post(this.url, {message : this.message}).subscribe((res : any) =\u003e {\n            this.message = '';\n          })\n        }\n      }\n    \n      ionViewDidLoad(){}\n    }\n```    \n\n`sendComment()` : this method uses the native `HttpClient` to make requests to the server. The `POST` method takes a URL and the request `body` as parameters. We then append the data returned to the array of comments.\n\nTo make use of the `HttpClient` service, we’ll need to import the `HttpClientModule` into the `app.module.ts` file. Also to make use of form-related directives, we’ll need to import the `FormsModule`. Update your app module file as follows:\n\n``` typescript\n    // src/app/app.module.ts\n    \n    ...\n    import { HttpClientModule } from '@angular/common/http';\n    import { FormsModule } from '@angular/forms';\n    ...\n    imports: [\n    ...\n    FormsModule,\n    HttpClientModule\n    ]\n    ...\n```\n\n## Styling\n\nOpen `home.scss` and update with the code below:\n\n``` scss\n    page-home {\n        ion-textarea {\n            border-bottom: 1px solid #000000;\n            margin: 0px 5px;\n        }\n        p {\n            text-align: justify;\n        }\n        .comment-box {\n            overflow: scroll;\n            height: 220px;\n        }\n    }\n```    \n\n\n## Introducing Pusher\n\nSo far we have an application that allows users to send in comments, but we want to update the comments under the post in realtime. We’ll include the [Pusher](https://pusher.com/) library in our application to enable realtime features like seeing comments as they come in without having to refresh the page.\n\nOpen the `index.html` file and paste the Pusher CDN like so:\n\n``` html\n    ...\n    \n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003c!-- add to homescreen for ios --\u003e \n    ... \n```\n\nNow that Pusher has been made available in our project, we’ll create a Pusher Provider to be used application wide. The Ionic CLI can aid in the service creation. Open a terminal in your project’s root folder and run the following command.\n\n```\n    ionic generate provider pusher-service\n```\n\nThis command simply generates a provider named `pusher-service`. Now open `pusher-service.ts` and update with the code below :\n\n``` typescript\n    // src/provider/pusher-service/pusher-service.ts\n    \n    import { HttpClient } from '@angular/common/http';\n    import { Injectable } from '@angular/core';\n    declare const Pusher: any;\n    @Injectable()\n    export class PusherServiceProvider {\n      channel;\n      constructor(public http: HttpClient) {\n      var pusher = new Pusher(\"PUSHER_KEY\", { \n      cluster: 'eu',\n      encrypted: true,\n      });\n      this.channel = pusher.subscribe('comments');\n    }\n    \n      public init(){\n       return this.channel;\n      }\n    }\n```\n\nFirst, we initialize Pusher in the constructor.\nThe `init()` method returns the Pusher property we created.\nEnsure you replace the `PUSHER_KEY` string with your actual Pusher key.\n\nTo make the provider available in the application, import it into the `app.module.ts` file.\n\n``` typescript\n    // ../src/app/app.module.ts\n    \n    import { PusherServiceProvider } from '../providers/pusher-service/pusher-service';\n    ....\n    providers: [\n    StatusBar,\n    SplashScreen,\n    {provide: ErrorHandler, useClass: IonicErrorHandler},\n    PusherServiceProvider\n    ]\n    ....\n```\n\nWe’ll make use of this provider in our home page, by binding to the message event and add the comment returned in the event and add it to the comments array. This will be done in the `ionViewDidLoad` lifecycle.\n\n``` typescript\n    // ../src/pages/home/home.ts\n    \n    import { PusherServiceProvider } from '../../providers/pusher-service/pusher-service';\n    \n    constructor(public navCtrl: NavController, public http : HttpClient, private pusher : PusherServiceProvider) {}\n    \n    ...\n    \n    ionViewDidLoad(){\n     const channel = this.pusher.init();\n        channel.bind('message', (data) =\u003e {\n          if(data.score \u003e= 1){\n            this.rating.good = this.rating.good + 1;\n          }\n          else{\n            this.rating.bad = this.rating.bad + 1;\n          }\n          this.comments.push(data);\n        });\n    }\n```\n\nAt this point, your application should have realtime updates when comments are placed. Ensure that the server is running alongside the Ionic development server. If not, run `node server` and `ionic serve` in two separate terminals. Both terminals should be opened in the root folder of your project. \n\nTo test the realtime functionality of the application, open two browsers side-by-side and comment. You’ll notice that votes placed on one reflect on the other browser.\n\n## Conclusion\n\nUsing the sentiment analysis, we are able to see the ratio of good comments to bad. Using [Pusher Channels](https://pusher.com/channels), we were able to implement live comments functionality in our application. You can view the source code for the demo [here](https://github.com/FeezyHendrix/ionic-realtime-comments-with-sentiment-analysis).","metaTitle":"Create a live comments feature with Ionic","metaDescription":"Use Ionic, Node and sentiment analysis to create a mobile app with realtime comments, and an automatic upvote/downvote system."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2G3VeHkp6MMqM6sqeG6Qw2","type":"Entry","createdAt":"2018-06-18T15:48:16.505Z","updatedAt":"2018-06-18T15:48:16.505Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Add realtime comments to a Gatsby blog","url":"realtime-comments-gatsby-blog","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/HackAfro/gatsby-blog","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-06-18","description":"Build a simple blog with a live commenting feature. Use Gatsby, the React-based static site generator, to create the blog. Add realtime comments functionality using Node and Express.","prerequisite":"You will need Node 6+ and npm installed on your machine. Some knowledge of React and Node may be helpful.","content":"## Introduction\n\nWe all dream of not just owning a blog but actually having the time to write and keep the blog up to date. Creating a blog has been made easy by static site generators like Jekyll but today we’ll be using [Gatsby](https://gatsbyjs.org). Gatsby is a blazing-fast static site generator for React.\n\nIn this tutorial, you’ll learn how to set up a blog using [Gatsby](https://gatsbyjs.org). Also, we’ll add realtime comments into our blog with the help of [Pusher](https://pusher.com).\n\nHere’s a screenshot of the final product:\n\n![gatsby-blog-comments-demo-1](//images.ctfassets.net/1es3ne0caaid/1dpknCjcNigMiQsWWSm0m4/c3b4d42d2c6f417481841c85c1f02ac5/gatsby-blog-comments-demo-1.png)\n\n### Realtime comments demo\n\n![gatsby-blog-comments-demo-2](//images.ctfassets.net/1es3ne0caaid/14gER7taz2oysa0o6goWU/b4ed5756b9424450703e96e7ef5879aa/gatsby-blog-comments-demo-2.gif)\n\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of how to use Gatsby, React and Node.js. Please ensure that you have at least Node version 6\u003e= installed before you begin.\n\nWe’ll be using these tools to build our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Gatsby](https://gatsbyjs.com)\n- [React](https://reactjs.org)\n\nWe’ll be sending messages to the server and using [Pusher’s](https://pusher.com) pub/sub pattern, we’ll listen to and receive messages in realtime. To make use of Pusher you’ll have to create an account [here](https://pusher.com). \n\nAfter account creation, visit the dashboard. Click **Create new Channels app**, fill out the details, click **Create my app**, and make a note of the details on the **App Keys** tab.\n\n\n## Initializing the application and installing dependencies\n\nTo get started, we will use the blog starter template to initialize our application. The first step is to install the Gatsby CLI. To install the CLI, run the following command in the terminal:\n\n```\n    npm install -g gatsby-cli\n```\n\nIf you use Yarn run:\n\n```\n    yarn global add gatsby-cli\n```\n\nThe next step is to create our project with the help of the CLI.  Run the command below to create a project called `realtime-blog` using the blog starter template:\n\n```\n    gatsby new realtime-blog https://github.com/HackAfro/gatsby-blog-starter-kit.git\n```\n\nNext, run the following commands in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher uuid \n    \n    // front-end dependencies\n    npm install pusher-js\n```\n\nStart the app server by running `npm run develop` in a terminal in the root folder of your project.\n\nA browser tab should open on http://localhost:8000. The screenshot below should be similar to what you see in your browser:\n\n![gatsby-blog-default](//images.ctfassets.net/1es3ne0caaid/eeekSIdLlQmWyI02YgIk2/451f319edbc7abbfed58f943aa1a5633/gatsby-blog-default.png)\n\n## Building our server\n\nWe’ll build our server using [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/).\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.PUSHER_CLUSTER,\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```\n\n\nThe calls to our endpoint will be coming in from a different origin. Therefore, we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nCreate a [Pusher](https://pusher.com) account and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`. \n\nCreate a file in the root folder of the project and name it `.env`. Copy the code snippet below into the `.env` file and ensure to replace the placeholder values with your Pusher credentials.\n\n```\n    // .env\n    \n    // Replace the placeholder values with your actual pusher credentials\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n    PUSHER_CLUSTER=PUSHER_CLUSTER\n```\n\nWe’ll make use of the `dotenv` library to load the variables contained in the `.env` file into the Node environment. The `dotenv` library should be initialized as early as possible in the application.\n\nStart the server by running `node server` in a terminal inside the root folder of your project.\n\n### Draw route\n\nLet’s create a post route named `comment`, the Gatsby application will send requests to this route containing the comment data needed to update the application.\n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    const { v4 } = require('uuid');\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      ...\n    });\n    \n    \n    app.post('/comment', (req, res) =\u003e {\n      const {body} = req;\n      const data = {\n        ...body,\n        timestamp: new Date(),\n        id: v4(),\n      };\n      pusher.trigger('post-comment', 'new-comment', data);\n      res.json(data);\n    });\n    \n     ...\n```\n\n- The request body will be sent as the data for the triggered Pusher event. An object `data`  is created containing the request body. An `id` is added to the comment data to identify it as well as a timestamp. The `data` object will be sent as a response to the user.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`post-comment`), an event name (`new-comment`), and a payload(`data`).\n\n\n\n## Building our blog index page\n\nThe current look of our blog is too generic, we’d like to have our blog represent our budding personality. To get that look, we’ll change the layout of the blog and add a few CSS styles to update the look and feel of the blog.\n \n Here’s the current look of our blog index page: \n \n![gatsby-blog-default](//images.ctfassets.net/1es3ne0caaid/eeekSIdLlQmWyI02YgIk2/451f319edbc7abbfed58f943aa1a5633/gatsby-blog-default.png)\n\nHere’s what we want our blog to look like:\n\n![gatsby-blog-comments-demo-1](//images.ctfassets.net/1es3ne0caaid/1dpknCjcNigMiQsWWSm0m4/c3b4d42d2c6f417481841c85c1f02ac5/gatsby-blog-comments-demo-1.png)\n\nI hope this new look will represent your budding personality because it really represents mine. Let’s go through the steps we’ll take to achieve this new look.\n \n Open the `index.js` file in the `src/pages/` directory. Update the file to look like the snippet below:\n \n``` javascript\n    // src/pages/index.js\n    \n    import React from 'react';\n    import GatsbyLink from 'gatsby-link';\n    import Link from '../components/Link';\n    import Tags from '../components/Tags';\n    import '../css/index.css';\n    \n    export default function Index({ data }) {\n      const { edges: posts } = data.allMarkdownRemark;\n      return (\n        \u003cdiv className=\"blog-posts\"\u003e\n          {posts\n            .filter((post) =\u003e post.node.frontmatter.title.length \u003e 0)\n            .map(({ node: post }, index) =\u003e {\n              return (\n                \u003cdiv\n                  className={`blog-post-preview ${\n                    index % 2 !== 0 ? 'inverse' : ''\n                  }`}\n                  key={post.id}\n                \u003e\n                  \u003cdiv className=\"post-info\"\u003e\n                    \u003ch1 className=\"title\"\u003e\n                      \u003cGatsbyLink to={post.frontmatter.path}\u003e\n                        {post.frontmatter.title}\n                      \u003c/GatsbyLink\u003e\n                    \u003c/h1\u003e\n                    \u003cdiv className=\"meta\"\u003e\n                      \u003cdiv className=\"tags\"\u003e\n                        \u003cTags list={post.frontmatter.tags} /\u003e\n                      \u003c/div\u003e\n                      \u003ch4 className=\"date\"\u003e{post.frontmatter.date}\u003c/h4\u003e\n                    \u003c/div\u003e\n                    \u003cp className=\"excerpt\"\u003e{post.excerpt}\u003c/p\u003e\n                    \u003cdiv\u003e\n                      \u003cLink to={post.frontmatter.path} className=\"see-more\"\u003e\n                        Read more\n                      \u003c/Link\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                  \u003cdiv className=\"post-img\"\u003e\n                    \u003cimg src={post.frontmatter.image} alt=\"image\" /\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              );\n            })}\n        \u003c/div\u003e\n      );\n    }\n    export const pageQuery = graphql`\n      query IndexQuery {\n        allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n          edges {\n            node {\n              excerpt(pruneLength: 250)\n              id\n              frontmatter {\n                title\n                date(formatString: \"MMMM DD, YYYY\")\n                path\n                tags\n                image\n              }\n            }\n          }\n        }\n      }\n    `;\n```\n\n    \n\nThere’s really not much going on here. First, made the blog content separate from the blog image. Then we checked if the index of the current post was an odd number, if true, we added an inverse class to the post. \n\nSince we’ll be using `flex` for the layout, if we make the `flex-direction: row-inverse` it will invert the layout making the image appear on the left side rather than the right. Finally, we included an image for each blog post even though the posts don’t have an image front matter variable.\n\nAfter this update you’ll get an error in your terminal similar to the screenshot below:\n\n![gatsby-blog-comments-error](//images.ctfassets.net/1es3ne0caaid/6EJUxcdeOAicEuoyMwcsQW/218249111f21e57ea49011d87e0d2ca3/gatsby-blog-comments-error.png)\n\nThis is because the image variable doesn’t exist on the markdown files that we currently have. We’ll get to updating the markdown files so ignore the error for now.\n\nNext step is to update the stylesheet associated with the index page. Open the `index.css` file in the `/src/css` directory and update it like so:\n\n``` css\n    // /src/css/index.css\n    \n    .blog-post-preview {\n      display: flex;\n      align-items: flex-start;\n      justify-content: center;\n      padding: 1rem 0.25rem;\n      border-bottom: 2px solid rgba(0, 0, 0, 0.04);\n      margin-bottom: 20px;\n    }\n    .blog-post-preview.inverse{\n      flex-direction: row-reverse;\n    }\n    .blog-post-preview:last-child {\n      border-bottom-width: 0;\n    }\n    .post-info {\n      flex: 1;\n    }\n    .blog-post-preview.inverse \u003e .post-img{\n      margin-left: 0;\n      margin-right: 1rem;\n    }\n    .post-img {\n      flex: 1;\n      margin-left: 1rem;\n    }\n    .post-img \u003e img {\n      max-width: 100%;\n      max-height: 100%;\n    }\n    .title {\n      font-size: 22px;\n      text-transform: uppercase;\n      margin-bottom: 2px;\n      line-height: 1.2;\n    }\n    .title \u003e a {\n      color: black;\n      text-decoration: none;\n      opacity: 0.7;\n      letter-spacing: -0.2px;\n    }\n    .date {\n      font-size: 13px;\n      opacity: 0.5;\n      margin: 0;\n    }\n    .meta {\n      display: flex;\n      align-items: center;\n      margin-bottom: 8px;\n    }\n    .excerpt {\n      font-size: 15px;\n      opacity: 0.7;\n      letter-spacing: 0.4px;\n      margin-bottom: 10px;\n    }\n```\n\n\n\nNext, we’ll update the components associated with the index page. Currently, we have the `Link` and `Tags` components being used on the index page. Let’s update them to match the current flow of our application.\n\n\n## Tags component\n\nOpen the `Tags.js` file in the `/src/components` directory and update it with the content below:\n\n``` javascript\n    // /src/components/Tags.js\n    \n    import React from 'react';\n    import Link from 'gatsby-link';\n    import TagIcon from 'react-icons/lib/fa/tag';\n    \n    import '../css/tags.css';\n    \n    export default function Tags({ list = [] }) {\n      return (\n        \u003cul className=\"tags\"\u003e\n          {list.map(tag =\u003e\n            \u003cli key={tag}\u003e\n              \u003cLink to={`/tags/${tag}`} className=\"tag\"\u003e\n                \u003cTagIcon size={15} className=\"icon white\" /\u003e\n                {tag}\n              \u003c/Link\u003e\n            \u003c/li\u003e\n          )}\n        \u003c/ul\u003e\n      );\n    }\n```\n\n\nTo update the stylesheet associated with it, open the `tags.css` file in the `src/css/` directory. Copy the contents below into it:\n\n``` css\n    // /src/css/tags.css\n    \n    .tags {\n      display: flex;\n      margin-right: 6px;\n      list-style: none;\n      padding: 0;\n      margin: 0 4px 0 0;\n    }\n    .tag {\n      color: white;\n      background: purple;\n      font-size: 11px;\n      text-transform: uppercase;\n      font-weight: bold;\n      margin: 3px;\n      border-radius: 35px;\n      padding: 5px 12px;\n      line-height: 12px;\n      font-family: 'Rajdhani', cursive;\n      text-decoration: none;\n    }\n```\n\n\n## Link component\n\nThis component will build ontop the `GatsbyLink` component provided by Gatsby. It’ll add a custom class to the `GatsbyLink` component. The `Link.js` file will stay the same. We’ll only be updating the stylesheet associated with this component. Open the `link.css` file in the `src/css` folder and update it by adding the following styles to it:\n\n``` css\n    .link {\n      color: black;\n      opacity: 0.6;\n      background: white;\n      box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.07);\n      text-decoration: none;\n      padding: 7px 15px;\n      border-radius: 34px;\n      font-size: 12px;\n      text-transform: uppercase;\n      font-weight: bold;\n      border: 1px solid rgba(0, 0, 0, 0.05);\n    }\n```\n\nFinally, we’ll update the blog header. The header can be found in the `index.js`  file in the `src/layouts` directory. Open it and replace the contents with the code below:\n\n``` javascript\n    // src/layouts/index.js\n    \n    import React from 'react';\n    import PropTypes from 'prop-types';\n    import Link from 'gatsby-link';\n    import Helmet from 'react-helmet';\n    import '../css/typography.css';\n    import '../css/layout.css';\n    \n    export default class Template extends React.Component {\n      static propTypes = {\n        children: PropTypes.func,\n      };\n      render() {\n        const { location } = this.props;\n        const isRoot = location.pathname === '/';\n        return (\n          \u003cdiv\u003e\n            \u003cHelmet\n              title=\"Gatsby Default (Blog) Starter\"\n              meta={[\n                { name: 'description', content: 'Sample' },\n                { name: 'keywords', content: 'sample, something' },\n              ]}\n            /\u003e\n            \u003cdiv\n              style={{\n                background: `white`,\n                marginBottom: `1.45rem`,\n                boxShadow: '0 2px 4px 0 rgba(0,0,0,0.1)',\n              }}\n            \u003e\n              \u003cdiv\n                style={{\n                  margin: `0 auto`,\n                  maxWidth: 960,\n                  padding: isRoot ? `0.7rem 1.0875rem` : `.5rem 0.75rem`,\n                }}\n              \u003e\n                \u003ch1 style={{ margin: 0, fontSize: isRoot ? `2rem` : `1.5rem` }}\u003e\n                  \u003cLink\n                    to=\"/\"\n                    style={{\n                      color: 'purple',\n                      textDecoration: 'none',\n                      fontFamily: \"'Lobster', sans-serif\",\n                    }}\n                  \u003e\n                    The Food Blog\n                  \u003c/Link\u003e\n                \u003c/h1\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv\n              style={{\n                margin: `0 auto`,\n                maxWidth: 960,\n                padding: `0px 1.0875rem 1.45rem`,\n                paddingTop: 0,\n              }}\n            \u003e\n              {this.props.children()}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n```\n\n\nIn the snippet above, we added a stylesheet `layout.css` and updated the inline styles in the component. Let’s create the `layout.css` in the `src/css/` directory. Open the file and copy the code snippet below into it:\n\n``` css\n    // layout.css\n    \n    @import url('https://fonts.googleapis.com/css?family=Lobster|Rajdhani:600|Source+Sans+Pro:400,600,700');\n    * {\n      font-family: 'Source Sans Pro', sans-serif;\n    }\n    body {\n      background: rgba(0, 0, 0, 0.06);\n    }\n    .icon {\n      color: purple;\n      margin: 0 3px;\n    }\n    .icon.white {\n      color: white;\n    }\n```\n\n\nNow our index page should look like the screenshot of the potential index page we saw above. Now that’s progress.\n\n\n## Adding and updating blog posts\n\nSo far we’ve updated the look and layout of our blog. Let’s add a new blog post just to see how our index page handles it. Also, we’ll update the markdown files to include an image variable in the front matter section. \n\nUpdate all the current posts to have the same structure as the content below:\n\n```\n    ---\n    path: \"/post-new.html\"\n    date: \"2018-06-10T13:56:24.754Z\"\n    title: \"A post by me\"\n    tags: [\"new\", \"creative\"]\n    image: \"https://source.unsplash.com/random/1000x500\"\n    ---\n    \n    Post content ...\n```\n\nWe’ll be including random images from [Unsplash](https://unsplash.com) for our blog images. Update all the markdown files to include an image variable. Then restart the server or you’ll end up like me debugging the application for ten minutes trying to figure out the error. The error on the terminal should be cleared once you updated the markdown files and restart the server.\n\n\n## Updating the blog detail page\n\nNow that our index page reflects our personality, let’s do the same with the blog details page. Open the `blog-post.js` file in the `src/templates` directory and update it to look like the snippet below:\n\n``` javascript\n    // src/templates/blog-post.js\n    \n    import React from 'react';\n    import Helmet from 'react-helmet';\n    import BackIcon from 'react-icons/lib/fa/chevron-left';\n    import ForwardIcon from 'react-icons/lib/fa/chevron-right';\n    import Link from '../components/Link';\n    import Tags from '../components/Tags';\n    import '../css/blog-post.css';\n    \n    export default function Template({ data, pathContext }) {\n      const { markdownRemark: post } = data;\n      const { next, prev } = pathContext;\n      return (\n        \u003cdiv className=\"blog-post-container\"\u003e\n          \u003cHelmet title={`The Food Blog - ${post.frontmatter.title}`} /\u003e\n          \u003cdiv className=\"blog-post\"\u003e\n            \u003cdiv\u003e\n              \u003ch1 className=\"title\"\u003e{post.frontmatter.title}\u003c/h1\u003e\n              \u003ch2 className=\"date\"\u003e{post.frontmatter.date}\u003c/h2\u003e\n              \u003cdiv className=\"post-body\"\u003e\n                \u003cdiv className=\"post-img\"\u003e\n                  \u003cimg src={post.frontmatter.image} alt=\"\" /\u003e\n                \u003c/div\u003e\n                \u003cdiv\n                  className=\"blog-post-content post-info\"\n                  dangerouslySetInnerHTML={{ __html: post.html }}\n                /\u003e\n              \u003c/div\u003e\n              \u003cTags list={post.frontmatter.tags || []} /\u003e\n              \u003cdiv className=\"navigation\"\u003e\n                {prev \u0026\u0026 (\n                  \u003cLink className=\"link prev\" to={prev.frontmatter.path}\u003e\n                    \u003cBackIcon size={16} className=\"icon\" /\u003e {prev.frontmatter.title}\n                  \u003c/Link\u003e\n                )}\n                {next \u0026\u0026 (\n                  \u003cLink className=\"link next\" to={next.frontmatter.path}\u003e\n                    {next.frontmatter.title}{' '}\n                    \u003cForwardIcon size={16} className=\"icon\" /\u003e\n                  \u003c/Link\u003e\n                )}\n              \u003c/div\u003e\n              \u003cdiv className=\"comment-section\"\u003e\n                \u003ch4 className=\"comment-header\"\u003eComments\u003c/h4\u003e\n                {/* Comment component comes here */}\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      );\n    }\n    export const pageQuery = graphql`\n      query BlogPostByPath($path: String!) {\n        markdownRemark(frontmatter: { path: { eq: $path } }) {\n          html\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            tags\n            title\n            image\n          }\n        }\n      }\n    `;\n```\n\n\nLet’s update the stylesheet associated with it. Open the `blog-post.css` file in the `src/css` directory. Make the content similar to the snippet below:\n\n``` css\n    // src/css/blog-post.css\n    \n    .blog-post .link.prev {\n      float: left;\n    }\n    .blog-post .link.next {\n      float: right;\n    }\n    .blog-post .title,\n    .blog-post .date {\n      text-align: center;\n      margin: 0;\n      padding: 0;\n    }\n    .blog-post .date {\n      color: #555;\n      margin-bottom: 1rem;\n    }\n    .blog-post .navigation {\n      min-height: 60px;\n      margin-top: 15px;\n    }\n    .blog-post-content {\n      font-size: 15px;\n      opacity: 0.8;\n    }\n    .post-info {\n      flex: 2;\n    }\n    .post-img {\n      margin-right: 1.3rem;\n      padding: 2% 2% 1%;\n    }\n    .post-img \u003e img {\n      box-shadow: 0 3px 5px 1px rgba(0, 0, 0, 0.3);\n    }\n    .comment-section{\n      margin-top: 30px;\n    }\n    .comment-header {\n      font-size: 16px;\n      text-transform: uppercase;\n      color: purple;\n      letter-spacing: -0.3px;\n      margin-bottom: 10px;\n    }\n```\n\n## Realtime comments using Pusher\n\nWe’ve created a working blog and then updated the layout and styles to suit our needs yet we still don’t have a comments section for our readers to leave their thought on a blog post. We want our comment section to have some realtime functionalities where users get updates on the post as it happens. Using Pusher’s pub/sub functionality we can achieve this.\n\nWe already have Pusher dispatching events on the server, the next step is creating a listener to act on the events.\n\nCreate a folder called `comments` in the `components` folder. Create a file called `form.js` in the `comments` folder. Update the contents of the file with the snippet below:\n\n``` javascript\n    // src/components/comments/form.js\n    \n    import React from 'react';\n    class CommentForm extends React.Component {\n      constructor() {\n        super();\n        this.state = {\n          name: '',\n          comment: '',\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n      }\n      async handleSubmit(e) {\n        e.preventDefault();\n        const body = JSON.stringify({ ...this.state });\n        const response = await fetch('http://localhost:4000/comment', {\n          method: 'post',\n          body,\n          headers: {\n            'content-type': 'application/json',\n          },\n        });\n        const data = await response.json();\n        this.setState({ comment: '', name: '' });\n      }\n      handleChange({ target }) {\n        const { name, value } = target;\n        this.setState({ [name]: value });\n      }\n      render() {\n        const { name, comment } = this.state;\n        return (\n          \u003cform onSubmit={this.handleSubmit} className=\"comment-form\"\u003e\n            \u003cinput\n              placeholder=\"Your Name\"\n              value={name}\n              name=\"name\"\n              onChange={this.handleChange}\n            /\u003e\n            \u003ctextarea\n              placeholder=\"Enter your comment\"\n              rows=\"4\"\n              name=\"comment\"\n              value={comment}\n              onChange={this.handleChange}\n            /\u003e\n            \u003cdiv\u003e\n              \u003cbutton className=\"button submit-button\"\u003eSubmit\u003c/button\u003e\n            \u003c/div\u003e\n          \u003c/form\u003e\n        );\n      }\n    }\n    export default CommentForm;\n```\n\n\nThe form component will handle the commenting functionality for users. We’ll place the `form` component in the `CommentList` component. The `CommentList` component hasn’t been created yet, we’ll get to that. \n\nThe next step is to create a `Comment.js` file. This component will display a comment from the list of comments. Update the contents of the file with the snippet below:\n\n``` javascript\n    // src/components/comments/Comment.js\n    \n    import React from 'react';\n    const Comment = ({ comment }) =\u003e (\n      \u003cdiv className=\"comment\"\u003e\n        \u003cdiv className=\"comment__meta\"\u003e\n          \u003ch5\u003e{comment.name}\u003c/h5\u003e\n          \u003cspan\u003e{new Date(comment.timestamp).toDateString()}\u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp className=\"comment__body\"\u003e{comment.comment}\u003c/p\u003e\n      \u003c/div\u003e\n    );\n    export default Comment;\n```\n\nThe final step is to create a file called `CommentList.js` in the `comments` folder. The component will the hold the `form` and `Comment` components.  Open the file and update it with the code below:\n\n``` javascript\n    // src/components/comments/CommentList.js\n    \n    import React from 'react';\n    import Pusher from 'pusher-js';\n    import CommentForm from './form';\n    import Comment from './Comment';\n    import '../../css/comment.css';\n    \n    class Comments extends React.Component {\n      constructor() {\n        super();\n        this.state = {\n          comments: [],\n        };\n        this.pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'eu',\n        });\n      }\n      componentDidMount() {\n        const channel = this.pusher.subscribe('post-comment');\n        channel.bind('new-comment', (data) =\u003e {\n          this.setState((prevState) =\u003e ({\n            comments: [...prevState.comments, data],\n          }));\n        });\n      }\n      \n      render() {\n        const { comments } = this.state;\n        return (\n          \u003cdiv\u003e\n            \u003cCommentForm /\u003e\n            \u003chr /\u003e\n            \u003cdiv className=\"comment-list\"\u003e\n              {comments.length ? (\n                comments.map((comment) =\u003e (\n                  \u003cComment comment={comment} key={comment.id} /\u003e\n                ))\n              ) : (\n                \u003ch5 className=\"no-comments-alert\"\u003e\n                  No comments on this post yet. Be the first\n                \u003c/h5\u003e\n              )}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default Comments;\n```\n\n\nThere’s quite a bit going on in here. We’ll walk through it. \n\n\n- In the component’s `constructor`, we initialized the Pusher library using the `appKey` that can be found in the Pusher dashboard. Be sure to replace the placeholder string with your real `appKey`.\n\n\n- In the `componentDidMount` lifecycle, we subscribed to the `post-comment` channel and listened for a `new-comment` event. In the event callback, we appended the data returned to the list of comments.\n\n\n- Also, we included a new stylesheet that hasn’t been created yet. Create a file called `comment.css` in the `src/css` directory. \n\nOpen the file and update it with the content below:\n\n``` css\n    // src/css/comment.css\n    \n    .comment-form {\n      display: flex;\n      flex-direction: column;\n      width: 50%;\n      padding: 10px 25px 20px 0;\n    }\n    .comment-form \u003e input,\n    .comment-form \u003e textarea {\n      width: 100%;\n      border: 3px solid rgb(143, 51, 143);\n      margin: 12px 0;\n      padding: 7px 14px;\n      font-size: 14px;\n      opacity: 0.8;\n      font-weight: bold;\n      box-shadow: 0 2px 3px 0 rgba(0, 0, 0, 0.3);\n      border-radius: 8px;\n    }\n    .comment-form \u003e div \u003e .submit-button {\n      padding: 8px 45px;\n      background: rgb(143, 51, 143);\n      color: whitesmoke;\n      border-radius: 35px;\n      box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.3);\n      text-transform: uppercase;\n      font-size: 16px;\n      font-weight: bold;\n      cursor: pointer;\n    }\n    .comment__meta \u003e h5 {\n      font-size: 15px;\n      color: purple;\n      opacity: 0.7;\n      margin-bottom: 3px;\n      line-height: 1;\n    }\n    hr {\n      background: rgba(0, 0, 0, 0.2);\n      height: 3px;\n    }\n    .comment__meta \u003e span {\n      font-size: 14px;\n      font-weight: bold;\n      opacity: 0.5;\n    }\n    .comment__body {\n      font-size: 18px;\n      opacity: 0.8;\n      font-family: 'Rajdhani', cursive;\n    }\n    .no-comments-alert {\n      font-size: 16px;\n      color: purple;\n      opacity: 0.7;\n      text-transform: uppercase;\n      letter-spacing: -0.3px;\n    }\n```\n\n\n## Including comments in blog posts\n\nLet’s include the comment section we just created in the blog post template. Open the `blog-post.js` file and include the `comments` component where we had the comment `comment component comes here`.  \n\n``` javascript\n    // src/templates/blog-post.js\n    ...\n    import '../css/blog-post.css';\n    import Comments from '../components/Comments/CommentList';\n    ...\n    \n    export default function Template({ data, pathContext }) {\n      ...\n      return (\n        ...\n        \u003cdiv className=\"comment-section\"\u003e\n          \u003ch4 className=\"comment-header\"\u003eComments\u003c/h4\u003e\n          \u003cComments /\u003e\n        \u003c/div\u003e\n        ...\n      )\n    };\n    ...\n```\n\nLet’s have a look at our blog details page. Click on the link for any blog list item. The view should be similar to the screenshot below: \n\n\n\u003e **P.S:** Ensure you have the server and the Gatsby dev server running.\n\n![gatsby-blog-comments-single-entry](//images.ctfassets.net/1es3ne0caaid/5qTVwTafVSMcI2IsgWSo4c/d13e83e510c1b49b3a5857c6dd9b06cc/gatsby-blog-comments-single-entry.png)\n\nYou can also test the realtime functionality of the application by opening two browsers side by side. A Comment placed on one browser window can be seen in the other.\n\n![gatsby-blog-comments-two-browser](//images.ctfassets.net/1es3ne0caaid/4P2YjscTiMmmAugIWcICm2/c3f7a985a83c791568e79f7747929f5b/gatsby-blog-comments-two-browser.png)\n\n## Conclusion\n\nWe’ve created a blog using Gatsby and included realtime commenting functionality using Pusher. You could do one extra and include a way to persist comments on a blog post. You can find the source code for this tutorial on [GitHub](https://github.com/HackAfro/gatsby-blog).","metaTitle":"Add realtime comments to a Gatsby blog","metaDescription":"This tutorial will show you how to add realtime comments to a Gatsby blog. You will use Node and Express to create a simple backend, allowing users to add and view comments instantly."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1YrboytjMUU6GUo0YiwYsk","type":"Entry","createdAt":"2018-06-18T14:31:09.719Z","updatedAt":"2018-06-18T14:31:09.719Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live comments feature with Ember.js","url":"live-comments-emberjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/yemiwebby/live-comments-ember","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"oh5mPeR5cGqMImEyKoWwQ","type":"Entry","createdAt":"2018-02-12T14:46:47.672Z","updatedAt":"2018-02-12T14:46:47.672Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ember.js","url":"ember-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-06-15","description":"Build a comments system using Ember.js and Node.js. Users will be able to post comments and see other comments in realtime. Emojis are automatically added using sentiment analysis.","prerequisite":"You will need Node and npm installed on your machine.","content":"## Introduction\n\nWe are in 2018, users of your web application don’t have the luxury of time to wait for a page refresh before getting an update or properly interacting when carrying out a basic activity as posting a comment irrespective of the web technology of your choice. \n\nIf you are like me and very passionate about properly improving interactivity and engaging your users, then this post is for you!\n\nTogether in this tutorial, we’ll build a simple realtime commenting system where users can add comments to a blog post and see the update in realtime. In addition to the realtime functionality, we will also use a technique called sentiment analysis to determine the attitude of users based on the context of the received post. The application will be built using Ember.js and powered by Pusher.\n\nHere is what the application will look like once we are done:\n\n![ember-comments-demo](//images.ctfassets.net/1es3ne0caaid/NX7qFBupm8ISmu4OEiaKs/e1154e27f6cfed83dea7db0ba0831bba/ember-comments-demo.gif)\n\n## Prerequisites\n\nIt is important that you have [Node.js](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) installed on your machine in order to properly run the basic setups, [learn how to install Node.js and npm here](https://docs.npmjs.com/getting-started/installing-node). A quick run-down of the core technologies we will be using include:\n\n\n- [Ember.js](https://www.emberjs.com/): a productive frontend framework built for ambitious web developers.\n- [Pusher](https://pusher.com/): a [Node.js](http://nodejs.org/) client to interact with the Pusher REST API\n- [Express](https://expressjs.com/): Node utility for handling HTTP requests via routes\n- [Axios](https://www.npmjs.com/package/axios): a promise-based HTTP client that works both in the browser and in a Node.js environment.\n- [Body Parser](https://github.com/expressjs/body-parser): attaches the request payload on Express’s `req`, hence `req.body` stores this payload for each request.\n- [Sentiment](https://github.com/thisandagain/sentiment): Sentiment is a module that uses the [AFINN-165](http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010) wordlist and [Emoji Sentiment Ranking](http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0144296) to perform [sentiment analysis](http://en.wikipedia.org/wiki/Sentiment_analysis) on arbitrary blocks of input text.\n\n\n## Setting up the project\n\nThe most convenient and recommended way of getting an Ember app up and running with a single command is by using the Ember CLI tool. You can install it with npm, open your terminal and type this command:\n\n```\n     npm install -g ember-cli\n```\n\nThe [Ember CLI](https://github.com/ember-cli/ember-cli) will give us access to the `ember` command that will be used to set up our project easily.\n\n\n## Creating the comment application\n\nWe can now proceed to create our application by using the `ember new` command. Open up the terminal on your machine and run a command that will create an application named `live-comments-ember` in your project directory or any location specified:\n\n```\n     ember new live-comments-ember\n```\n\nNext, change directory into the newly created project and start the development server:\n\n```\n     // change directory\n     cd live-comments-ember\n     \n     // start the development server\n     ember serve\n```\n\nThis will start the development server on http://localhost:4200. Open your favorite browser and navigate to that URL, you should see a default welcome page by Ember.js as shown below:\n\n![ember-start-page](//images.ctfassets.net/1es3ne0caaid/2Z3q7KbdrOEWGs8McO8gyC/86f812aacd929bbcd81e6a45873f91b6/ember-start-page.png)\n\n## Installing server dependencies\n\nRun the following command to install the dependencies required for this project using:\n\n```\n    npm install --save axios pusher pusher-js\n    npm install --save body-parser cors dotenv express sentiment\n    ember install ember-browserify\n```\n\n## Pusher account setup\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![ember-pusher-signup](//images.ctfassets.net/1es3ne0caaid/2NeDEhMbuwYsECuqGyWCUE/646d9e28c3c1ecc1517361035836a8ec/ember-pusher-signup.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![ember-pusher-create-app](//images.ctfassets.net/1es3ne0caaid/5YHrOKL5AIQk6E2OiCIeMW/473f43255c5a820f1523387487884757/ember-pusher-create-app.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with to be provided with some boilerplate code:\n\n![ember-pusher-config-app](//images.ctfassets.net/1es3ne0caaid/38gUNRKzT2UuEcQIq2GgS6/d7ef41d5c3f3afb724373fd976caef4c/ember-pusher-config-app.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![ember-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/1QiXDu6gpy0CKQCosqgcgE/1ffc23a7859704465b1a9357c07151b5/ember-pusher-app-keys.png)\n\n\n## Setting the environment variables\n\nCreate a `.env` file in the root directory of your application and add your application credentials as obtained from your Pusher dashboard as follows:\n\n```\n      PUSHER_APP_ID=YOUR_APP_ID\n      PUSHER_APP_KEY=YOUR_APP_KEY\n      PUSHER_APP_SECRET=YOUR_APP_SECRET_KEY\n      PUSHER_APP_CLUSTER=CLUSTER\n```\n\nWe will make use of the variables specified in the above snippet later in our project. And do ensure that you replace `YOUR_APP_ID`, `YOUR_APP_KEY`, `YOUR_APP_SECRET_KEY` and `CLUSTER` placeholders with the appropriate credentials.\n\n\n## Setting up the server\n\nThis application needs to be able to process a `POST` request with a new comment as submitted by the users. So we’ll set up a simple server that will receive the `comment` and publish it to a designated channel for the client side to listen and subscribe to. We’ll set it up by using Node and Express and run it on http://localhost:3000.\n\nSince the Ember application that we configured earlier is running on a different domain, we’ll enable CORS in order to ensure communication between the Express server and Ember.\n\nCreate a `app.js`  file in the root directory of your application and add the following code snippet to it to set up the server:\n\n\n``` javascript\n    // app.js\n    \n      const express = require('express');\n      const bodyParser = require('body-parser');\n      const cors = require('cors');\n      const Pusher = require('pusher');\n      const Sentiment = require('sentiment');\n      require('dotenv').config();\n      const app = express();\n      app.use(cors());\n      app.use(bodyParser.urlencoded({extended: false}));\n      app.use(bodyParser.json());\n      const pusher = new Pusher({\n          appId: process.env.PUSHER_APP_ID,\n          key: process.env.PUSHER_APP_KEY,\n          secret: process.env.PUSHER_APP_SECRET,\n          cluster: process.env.PUSHER_APP_CLUSTER,\n          encrypted: true\n      });\n      app.set('port', process.env.PORT || 3000);\n      app.post('/posts', (req, res) =\u003e {\n          const sentiment = new Sentiment();\n          const sentimentScore = sentiment.analyze(req.body.text).score;\n          const payload = {\n              text: req.body.text,\n              sentiment: sentimentScore\n          }\n          pusher.trigger('chat', 'post', payload);\n          res.send(payload)\n      })\n      app.listen(app.get('port'), () =\u003e {\n          console.log(\"Listening at \" + app.get('port'));\n      })\n```\n\nHere we loaded all the necessary middlewares for the express server and then configure Pusher using the credentials we added to our environment variables earlier. \n\nFurthermore, we also created the `/posts` endpoint that will receive and process comments sent in from our Ember app. Finally, we trigger an event named `post` to Pusher Channels on a channel called `chat`. The `chat` channel holds a payload that contains the `comment`  posted by the user and the overall sentiment score of the comment.\n\nOpen another terminal and run the command below to start the server on http://localhost:3000\n\n```\n    node app.js\n```\n\nThis will log a message to the console stating that Node is running on port 3000.\n\nNext, we’ll create components required for our application.\n\n\n## Creating the UI components\n\nEmber supports the usage and sharing of UI elements on multiple pages. We will leverage on this and generate components for separate parts of our application. The components required for our application are:\n\n\n1. `comments-app`: this will encompass the entire application\n2. `comment-post`: this component will display each comment submitted by users in realtime\n3. `list-``posts`: this component will list all the existing comments\n\nThe Ember component generally consist of two parts: a JavaScript component file that defines behavior and a Handlebars template that defines the markup for the component’s UI.\n\n\n## Comment app component\n\nWe’ll start by generating a component for the `comments-app`, by using the command below:\n\n```\n    ember g component comments-app\n```\n\n### Comments app template\nThis component will basically be used to display the sample post and all the comments submitted by readers. Locate `./app/templates/components/comments-app.hbs` and update it as shown below:\n\n``` html\n    {{!-- ./app/templates/components/comments-app.hbs --}}\n    \n      \u003cdiv class=\"row comment-box\"\u003e\n          \u003cdiv class=\"col-md-6 col-md-offset-3\"\u003e\n               \u003cdiv class=\"sample-post\"\u003e\n                 \u003cp\u003eDoes your team know which product feature really makes a difference \n                  for customers? Monitor industry and customer\n                  trends on a broad scale with our advanced sentiment technology \n                  to develop products that succeed.\n                 \u003c/p\u003e\n              \u003c/div\u003e\n          \u003c/div\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"row comment-box\"\u003e\n         \u003cdiv class=\"col-md-6 col-md-offset-3\"\u003e\n            \u003cdiv class=\"panel panel-white post panel-shadow\"\u003e\n                 {{#list-posts}}{{/list-posts}}\n            \u003c/div\u003e\n         \u003c/div\u003e\n      \u003c/div\u003e\n```\n\n## Comment post component\n\nNext, we’ll create a component to render each comment once submitted. Open your terminal and run this command:\n\n```\n      ember g component comment-post\n```\n\n### Comment post component template\n\nThe `comment-post` template file will display individual comment with emojis to represent the mood of the users. Add the following content to your `./app/templates/components/comment-post.hbs` file:\n\n``` html\n      {{!-- ./app/templates/components/comment-post.hbs --}}\n      \n      \u003cdiv class=\"post-heading\"\u003e\n          \u003cdiv class=\"pull-left image\"\u003e\n            \u003cimg src=\"http://bootdey.com/img/Content/user_1.jpg\" class=\"img-circle avatar\" alt=\"user profile image\"\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"pull-left meta\"\u003e\n                  \u003cdiv class=\"title h5\"\u003e\n                   \u003ca href=\"#\"\u003e\u003cb\u003e Anonymous \u003c/b\u003e\u003c/a\u003e\n                     posted a comment.\n                  \u003c/div\u003e\n            \u003ch6 class=\"text-muted time\"\u003e{{ comment.mood }}\u003c/h6\u003e\n             \u003cp\u003e{{comment.text}}\u003c/p\u003e\n          \u003c/div\u003e\n      \u003c/div\u003e \n```\n\n\n## List posts component\n\nThe last component required here is `list-``posts`. As stated earlier, it will be used to list all the existing comments submitted by readers. Run the command below to generate it:\n\n```\n     ember g component list-posts\n```\n\n### List posts component file\n\nAdd the following content to `./app/components/list-posts.js`:\n\n``` javascript\n    // ./app/components/list-posts.js\n      \n      import Component from '@ember/component';\n      import axios from 'npm:axios';\n      import Pusher from 'npm:pusher-js';\n      \n      const SAD_EMOJI = [55357, 56864];\n      const HAPPY_EMOJI = [55357, 56832];\n      const NEUTRAL_EMOJI = [55357, 56848];\n      \n      export default Component.extend({\n          comments: null,\n          init() {\n              this._super(...arguments);\n              this.set('comments', []);\n              let pusher = new Pusher('YOUR_APP_KEY', { // update your APP_KEY\n                  cluster: 'CLUSTER',\n                  encrypted: true\n              });\n              const channel = pusher.subscribe('chat');\n              channel.bind('post', data =\u003e {\n                  const analysis = data.sentiment \u003e 0 ? HAPPY_EMOJI : (data.sentiment === 0 ? NEUTRAL_EMOJI : SAD_EMOJI);\n                  const response = {\n                      text: data.text,\n                      mood: String.fromCodePoint(...analysis)\n                  }\n                  this.get('comments').pushObject(response);\n              });\n          },\n          actions: {\n              newPost() {\n                  const text = this.get('newPost');      \n                  axios.post('http://localhost:3000/posts', { text });\n                  this.set('newPost', '');\n              }\n          }\n      });\n```\n\nFirst, we imported the required modules for this component and we added some constants of code points for a particular sentiment emoji. This will help us rendered an emoji corresponding to the mood of the user as analyzed by the sentiment module once a comment is submitted.\n\nNext, we initialize Pusher with the `APP_KEY` and `CLUSTER` as obtained from our Pusher account dashboard and then proceeded to use the `subscribe()` method from Pusher to subscribe to the created `chat` channel.\n\nFinally, the `newPost()` action basically receives the comment submitted by a user and `POST` it to the server. This action will be triggered once the **Post Comment** button in the template file for this component is clicked.\n\nDon’t forget to replace the `YOUR_APP_KEY` and `CLUSTER` placeholder with the appropriate details from your Pusher account dashboard.\n\n### List posts component template\n\nHere in the template file for `list``-posts` component, we’ll loop over each comment and render a `comment-post` component. Open `./app/templates/components/list-posts.hbs` and edit as shown below:\n\n``` html\n    {{!-- ./app/templates/components/list-posts.hbs --}}\n    \n      {{#each comments as |comment|}}\n      \u003cdiv class=\"row msg_container base_receive\"\u003e\n            {{#comment-post comment=comment}}{{/comment-post}}\n      \u003c/div\u003e\n      {{/each}}\n      \n      \u003cdiv class=\"footer\"\u003e\n          \u003cdiv class=\"input-group\"\u003e\n            {{ input value=newPost id=\"btn-input\" type=\"text\" class=\"form-control input-sm\" placeholder=\"Write a comment\"}}\n            \u003cspan class=\"input-group-btn\"\u003e\n                \u003cbutton class=\"btn btn-primary btn-sm\" id=\"btn-chat\" {{action \"newPost\"}}\u003ePost Comment\u003c/button\u003e\n            \u003c/span\u003e\n         \u003c/div\u003e\n      \u003c/div\u003e\n```\n\n\n## Update the app template\n\nUpdate the application template with:\n\n``` html\n    {{!-- ./app/templates/application.hbs --}}\n      \n      {{#comments-app}}{{/comments-app}}\n      {{outlet}}\n```\n\n## Stylesheet\n\nTo add some minimal styling to the page, open `./app/styles/app.css` and paste this code in it:\n\n``` css\n    // ./app/styles/app.css\n    \n      .post .post-heading {\n        height: 95px;\n        padding: 20px 15px;\n      }\n      .post .post-heading .avatar {\n        width: 60px;\n        height: 60px;\n        display: block;\n        margin-right: 15px;\n      }\n      .post .post-heading .meta .title a {\n        color: black;\n      }\n      .post .post-image .image {\n        width: 100%;\n        height: auto;\n      }\n      .comment-box {\n        padding: 20px;\n        font-size: 18px;\n      }\n      .sample-post {\n        background: #f5f5f5;\n        padding: 20px;\n      }\n      .footer{\n        margin-top: 20px;\n      }\n      .msg_container {\n        border: 1px solid #f5f5f5;\n        margin: 4px 0;\n      }\n```\n\n## Updating the index page\n\nOpen the `./app/index.html` file and include the CDN file for Bootstrap to enhance the styling and layout of our application. Open up the file and add update as shown below:\n\n``` html\n     \u003c!-- ./app/index.html --\u003e\n     \n    \u003c!DOCTYPE html\u003e\n      \u003chtml\u003e\n        \u003chead\u003e\n          \u003cmeta charset=\"utf-8\"\u003e\n          \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n          \u003ctitle\u003eLiveCommentsEmber\u003c/title\u003e\n          \u003cmeta name=\"description\" content=\"\"\u003e\n          \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n          {{content-for \"head\"}}\n          \u003clink integrity=\"\" rel=\"stylesheet\" href=\"{{rootURL}}assets/vendor.css\"\u003e\n          \u003clink integrity=\"\" rel=\"stylesheet\" href=\"{{rootURL}}assets/live-comments-ember.css\"\u003e\n          \u003c!-- add the CDN file --\u003e\n          \u003clink href=\"http://maxcdn.bootstrapcdn.com/bootstrap/3.3.0/css/bootstrap.min.css\" rel=\"stylesheet\" id=\"bootstrap-css\"\u003e\n          {{content-for \"head-footer\"}}\n        \u003c/head\u003e\n        \u003cbody\u003e\n          {{content-for \"body\"}}\n          \u003cscript src=\"{{rootURL}}assets/vendor.js\"\u003e\u003c/script\u003e\n          \u003cscript src=\"{{rootURL}}assets/live-comments-ember.js\"\u003e\u003c/script\u003e\n          {{content-for \"body-footer\"}}\n        \u003c/body\u003e\n      \u003c/html\u003e\n```\n\n## Testing the application\n\nStop the Ember development server if it is currently running by typing `Ctrl + C`  in the terminal and restart it with `ember serve`. In addition, don’t forget to also run `node app.js` from another terminal to start the Express server incase you haven’t done that. Next, open http://localhost:4200 to test the application:\n\n![ember-comments-screenshot](//images.ctfassets.net/1es3ne0caaid/38hcbNGNPagQccYA0ySmyY/e1609b3167351887659777078138e963/ember-comments-screenshot.png)\n\n## Conclusion\n\nThe importance of realtime engagement of users on any platform cannot be overemphasized. As seen in this tutorial, we were able to implement a realtime commenting system and also show emojis based on the mood of the users by using sentiment analysis. I hope you found this tutorial helpful.\n\nFeel free to explore the code for this tutorial on [GitHub](https://github.com/yemiwebby/live-comments-ember) and add more features as you deem fit.","metaTitle":"Build a live comments feature with Ember.js","metaDescription":"This brief tutorial shows how to add live comments functionality to a web app using Ember.js and Node.js. Use sentiment analysis to automatically add emojis to messages."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3n5lQ5Ma4g4IYo6agGmECC","type":"Entry","createdAt":"2018-06-15T10:48:50.972Z","updatedAt":"2018-06-15T10:48:50.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Add live comments in Gatsby","url":"realtime-comments-gatsby","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/Robophil/gatsby-site-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-06-12","description":"Build a simple website with Gatsby and React featuring realtime comments. Create a football blog, where users can post comments and see others' responses instantly.","prerequisite":"You will need Node and npm or Yarn installed on your machine. A basic understanding of JavaScript will be helpful.","content":"According to Wikipedia, a static web page (sometimes called a flat page/stationary page) is a web page that is delivered to the user exactly as stored, in contrast to [dynamic web pages](https://en.wikipedia.org/wiki/Dynamic_web_page) which are generated by a web application\n\n[Gatsby](https://www.gatsbyjs.org/blog/2017-05-31-introduction-to-gatsby/) is a modern static site generator that allows you to build static web pages using [React](https://reactjs.org/) and [GraphQl](https://graphql.org/). Getting started with Gatsby is pretty easy and its installation is an `npm install` or `yarn install` away.\n\nToday we’ll be adding a realtime comment section to the sports blog we’ll be building. We’ll call our blog the “Football transfer buzz with Gordon Mc-gossip”.\nOur application will contain a post and allow users to leave comments and everyone gets to see it in realtime.\n\n![gatsby-comments-demo](//images.ctfassets.net/1es3ne0caaid/5DaAhewQDuME6q6MgMmuis/d5595eb8ac39c81c13d15ba193e1241f/gatsby-comments-demo.gif)\n\n## Prerequisites\n\n1. Kindly ensure you have [Node](https://nodejs.org/en/download/), [Npm](https://www.npmjs.com/get-npm) or [Yarn](https://yarnpkg.com/en/docs/install) installed on your machine before moving past this section. This will be needed for running and managing the dependencies needed by our application. \n2. Also, no knowledge of React is required, but a basic understanding of JavaScript may be helpful.\n3. [Pusher](https://pusher.com/): this is a framework that allows you to build realtime applications with its easy to use pub/sub messaging API.\n4. [Gatsby](https://www.gatsbyjs.org/): this is a static site generator. ( minimum version `\"gatsby\": \"^1.9.247\"`)\n\n\n\n## Install Gatsby\n\nInstalling [Gatsby](https://www.gatsbyjs.org/) is pretty easy once you have Node installed on your machine. Simply run:\n\n```\n    # for npm users\n    npm i -g gatsby-cli\n```\n\n```\n    # for yarn users\n    yarn global add gatsby-cli\n```\n\nThis Gatsby CLI comes with a few helpful commands that can help you build and test your apps locally.\n\n\n## Create your app\n\nTo create our project, simply run:\n\n```\n    # new gatsby project\n    gatsby new gatsby-site-pusher\n```\n\nThis will create our new project `Transfer-Buzz` and install its dependencies. If you `cd` into your new project directory, it will look like this.\n\n![gatsby-comments-structure](//images.ctfassets.net/1es3ne0caaid/6MyCLMe22IYIowK4wIGGyI/922325c14c5258e67a58d50ae8601221/gatsby-comments-structure.png)\n\nMost of the work we’ll be doing would be in the `src/` directory. The components we’ll create would go into the `src/components` directory and pages would go into the `src/pages` directory.\n\nInstall dependency:\n\n```\n    # for npm users\n    npm i --save pusher-js\n```\n\n```\n    # for yarn users\n    yarn add pusher-js\n```\n\n## Get our Pusher credentials\n\nIf you don't have a Pusher account already, kindly create one [here](https://pusher.com/signup). Once you have an account, simply head down to your [dashboard](https://dashboard.pusher.com/) and create an app. Once that is done, click on **App Keys** and note your credentials. We'll be needing them in a bit.\n\n![gatsby-comments-app-keys](//images.ctfassets.net/1es3ne0caaid/3abrlRyXEkoGs0AcsuYoGA/e3362163d26b7cf5027894f8509381f6/gatsby-comments-app-keys.png)\n\n\n## Creating our app components\n\nThe first component we’ll create is our `CommentList` component. This will be responsible for listing the comments left by users.\n\n``` javascript\n    // src/components/comment-list.js\n    \n    import React from 'react'\n    \n    export default ({comments}) =\u003e {\n      comments = comments.map((comment, i) =\u003e (\n        \u003cdiv key={i} style={{\n          padding: '5px',\n          border: '1px solid grey'\n        }}\u003e\n          \u003cp\u003e\u003cstrong\u003e{comment.author}:\u003c/strong\u003e\u003c/p\u003e\n          \u003cp\u003e{comment.message}\u003c/p\u003e\n        \u003c/div\u003e\n      ))\n      return (\n        \u003csection\u003e\n          \u003cstrong\u003eComments: \u003c/strong\u003e{comments}\n        \u003c/section\u003e\n      )\n    }\n```    \n\nThis simply takes an array of comments with attributes `{author, message}` and returns a `CommentList` component.\n\nNext, is the `Comment` component, which will have a form for accepting new comments and list comments below.\n\n``` javascript\n    // src/components/comment.js\n    import React, { Component } from 'react'\n    import CommentList from './comment-list'\n    import Pusher from 'pusher-js'\n    \n    /**\n    * initialize pusher with your credentials.\n    * Get 'key' from pusher dashboard\n    */\n    const pusher = new Pusher('key', {\n      cluster: 'eu',\n      encrypted: true\n    })\n    \n    // subscribe your pusher instance to the channel 'sport-buzz-news'\n    const channel = pusher.subscribe('sport-buzz-news')\n    \n    /* global fetch */\n    export default class Comment extends Component {\n      constructor (props) {\n        super(props)\n        this.state = {\n          comments: [],\n          author: '',\n          message: ''\n        }\n      }\n    \n    /**\n    * This will load components from the server on app startup,\n    * and also subscribe our app to listen for updates\n    */\n      async componentDidMount () {\n        const comments = await fetch('http://localhost:8080/comments').then(res =\u003e res.json())\n        this.setState({comments: [...comments, ...this.state.comments]})\n        this.receiveUpdateFromPusher()\n      }\n    \n      componentWillUnmount () {\n        pusher.unsubscribe('sport-buzz-news')\n      }\n    \n      /**\n      * add new comments to the top of the list\n      * once there's an update\n      */\n      receiveUpdateFromPusher () {\n        channel.bind('new-comment', comment =\u003e {\n          this.setState({\n            comments: [comment, ...this.state.comments]\n          })\n        })\n        console.log('app subscription to event successful')\n      }\n    \n      handleChange (type, event) {\n        if (type === 'author') {\n          this.setState({author: event.target.value})\n          return\n        }\n        if (type === 'message') {\n          this.setState({message: event.target.value})\n        }\n      }\n    \n      /**\n      * post comment to the server\n      */\n      async postComment (author, message) {\n        await fetch('http://localhost:8080/comment', {\n          body: JSON.stringify({author, message}),\n          method: 'POST',\n          headers: {\n            'user-agent': 'Mozilla/4.0 ',\n            'content-type': 'application/json'\n          }\n        })\n      }\n    \n      handleSubmit (event) {\n        event.preventDefault()\n        this.postComment(this.state.author, this.state.message)\n        this.setState({author: '', message: ''})\n      }\n    \n      render () {\n        return (\n          \u003cdiv\u003e\n            \u003cform onSubmit={this.handleSubmit.bind(this)}\u003e\n              \u003clabel\u003e\n              Name:\n                \u003cinput type='text' value={this.state.author} onChange={this.handleChange.bind(this, 'author')} /\u003e\n              \u003c/label\u003e\n              \u003clabel\u003e\n                \u003cbr /\u003e\n              Message:\n                \u003ctextarea type='text' value={this.state.message} onChange={this.handleChange.bind(this, 'message')} /\u003e\n              \u003c/label\u003e\n              \u003cbr /\u003e\n              \u003cinput type='submit' value='Submit' /\u003e\n            \u003c/form\u003e\n            \u003cCommentList comments={this.state.comments} /\u003e\n          \u003c/div\u003e\n        )\n      }\n    }\n```\n\nHere, when the component gets mounted, we try to load previous comments from the server and pass that data as `props` to the `CommentList` component.\n\n\n\u003e Note: please remember to updated placeholders with your pusher credentials.\n\n\n## Putting content on our page\n\nOpen your `src/pages/index.js` file which should already exist. You should replace its content with this:\n\n``` javascript\n    // src/pages/index.js\n    \n    import React from 'react'\n    import Comment from '../components/comment'\n    \n    const IndexPage = () =\u003e (\n      \u003cdiv\u003e\n        \u003ch1\u003eLeroy Aziz Sané left out of German squad for the world cup\u003c/h1\u003e\n        \u003cp\u003e\n          A lot of talks is currently ongoing about the Manchester City winger Leroy Sane being left out of the German team.\n          He was a prolific player this season with Mancity winning the premier league andthe significant contribution he brought to the team in front of Goal.\n          The decision by the German coach, Low to leave him out of the squad list was totally unexpected. Football really is a funny sport.\n        \u003c/p\u003e\n        \u003cp\u003e\n          Let me know your thoughts in the comment section below\n        \u003c/p\u003e\n        \u003cComment /\u003e\n      \u003c/div\u003e\n    )\n    \n    export default IndexPage\n```\n\nThis contains a post we made and the `Comment` component we imported above.\n\n\n## Getting data in Gatsby\n\nGatsby uses GraphQL for getting data. It could be from any source. There are a few files where changes need to be made to get data. We have `gatsby-node.js`, `gatsby-browser.js`, `gatsby-config.js` among others.\n\nWhat we’re concerned about right now is `gatsby-config.js`. It is responsible for passing data down to our `src/components/header.js` component. This gets data locally from the file and it’s an easy way to initialize your application with data.\n\nOpen up your `src/components/header.js` file and you should see this:\n\n``` javascript\n    // src/components/header.js\n    \n    import React from 'react'\n    import Link from 'gatsby-link'\n    \n    const Header = ({ siteTitle }) =\u003e (\n      \u003cdiv\n        style={{\n          background: 'rebeccapurple',\n          marginBottom: '1.45rem'\n        }}\n      \u003e\n        \u003cdiv\n          style={{\n            margin: '0 auto',\n            maxWidth: 960,\n            padding: '1.45rem 1.0875rem'\n          }}\n        \u003e\n          \u003ch1 style={{ margin: 0 }}\u003e\n            \u003cLink\n              to='/'\n              style={{\n                color: 'white',\n                textDecoration: 'none'\n              }}\n            \u003e\n              {siteTitle}\n            \u003c/Link\u003e\n          \u003c/h1\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    )\n    \n    export default Header\n```\n\nIt takes a prop called `siteTitle` which was exported from the file `gatsby-config.js`.\n\nFeel free to go ahead and change the value for `title` in `gatsby.js` to `Football transfer buzz with Gordon Mc-Gossip'`. \n\n\n## Setting up the server\n\nComments sent by users need to go somewhere, that’s what the server is for. It will save the comment, and publish it to Pusher who will trigger an update to all clients subscribed to that channel and listening for that event.\n\nFirst, we’ll need to add the dependencies needed by our server.\n\n```\n    # for yarn users\n    yarn add express body-parser cors pusher\n```\n\n```\n    # for npm users\n    npm i express body-parser cors pusher\n```\n\nCreate the file `server.js` and add the following:\n\n``` javascript\n    // server.js\n    const express = require('express')\n    const app = express()\n    const bodyParser = require('body-parser')\n    const cors = require('cors')\n    const Pusher = require('pusher')\n    \n    app.use(cors())\n    app.use(bodyParser.urlencoded({ extended: true }))\n    app.use(bodyParser.json())\n    \n    const port = process.env.PORT || 8080\n    \n    const pusher = new Pusher({\n      appId: 'appId',\n      key: 'key',\n      secret: 'secret',\n      cluster: 'eu',\n      encrypted: true\n    })\n    \n    let comments = [\n      {\n        author: 'robo',\n        message: 'i totally didn\\'t see that coming'\n      }\n    ]\n    \n    /**\n    * receive new comment from the client\n    * update the comments array with the new entry\n    * publish update to Pusher\n    */\n    app.post('/comment', function (req, res) {\n      const {author, message} = req.body\n      comments = [...[{author, message}], ...comments]\n      pusher.trigger('sport-buzz-news', 'new-comment', {author, message})\n      res.sendStatus(200)\n    })\n    \n    // send all comments to the requester\n    app.get('/comments', function (req, res) {\n      res.json(comments)\n    })\n    \n    app.listen(port, function () {\n      console.log('Node app is running at localhost:' + port)\n    })\n```    \n\nHere, we initialize Pusher with our credentials gotten from our dashboard. When we get a request on `localhost:8080/comments` we return all comments gotten so far and receive comments sent to `POST localhost:8080/comment`.\n\n\n## Running the app\n\nWe’ll use one of Gatsby’s helpful CLI commands to start our application. Simply run:\n\n```\n    # gatsby cli command\n    gatsby develop\n```\n\nThis will start our application on port  `8000` and can be accessed here `http://localhost:8000/`. \n\nYou’ll also need to start the server by running:\n\n```\n    # start node server\n    node server.js\n```\n\nOur server application will run on `http://localhost:8080/` and all API calls would go here.\n\n## More\n\nGatsby allows you to export as a static content when going to production. It could prefetch your data from any data source and bundle it into the generated static file.\n\nTo do that, simply run:\n\n```\n    # make production build\n    gatsby build\n```\n\n\u003e Gatsby will perform an optimized production build for your site generating static HTML and per-route JavaScript code bundles.\n\n## Conclusion\n\nWe’ve been able to build a simple blog application with a live comment section. This was done using Pusher and Gatsby.\nThe repo for this tutorial lives [here](https://github.com/Robophil/gatsby-site-pusher). Feel free to contribute.","metaTitle":"Add live comments in Gatsby","metaDescription":"This tutorial will show you how to create a football blog site using Gatsby and React. Users will be able to post comments and view updates instantly."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"76Wlp2erKwSOoMUgkikEa0","type":"Entry","createdAt":"2018-06-07T16:31:20.083Z","updatedAt":"2018-06-07T16:31:20.083Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a comments app with Ruby on Rails","url":"comments-app-ruby-rails","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/pusher-action-cable","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6S5luSjtlYk4i8eM8AyO4I","type":"Entry","createdAt":"2018-02-02T13:39:48.331Z","updatedAt":"2018-02-12T14:41:19.307Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby","url":"ruby","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"hPWAADkjVmomS68E6seqQ","type":"Entry","createdAt":"2018-02-12T14:48:52.613Z","updatedAt":"2018-02-12T14:48:52.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby on Rails","url":"ruby-on-rails","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-06-07","description":"This short tutorial demonstrates how to integrate realtime updates into a Ruby on Rails application. You will create a simple comments interface. Users will be able to add comments, and see comments appear for all users instantly.","prerequisite":"You will need Ruby and Rails installed on your machine.","content":"You see the way the web world is set up now yeah? No one wants to have to reload their pages anymore to get updates as to what is going one with their applications.  You probably would have experienced realtime features like this (seeing realtime the number of likes and re-tweets on a particular tweet on twitter)! Imagine not having to swipe down again to see a new tweet! Having such interesting features are some of the advantages of having realtime functionality on your applications.\n\n## What we’ll build \n\nIn this article, we will build a realtime commenting Ruby on Rails application using Pusher. This application has a simple interface. The user loads a page and can see existing comments on the page. The user can also add comments and see as comments are being made in realtime. Because this article is primarily to show how to add realtime functionality to your application, less emphasis will be placed on Rails syntax and more on making your application realtime\n\n\n## Requirements\n\nFor you to successfully follow through this article, you need to have the following set up:\n\n- Ruby installed on your machine\n- Rails installed on your machine\n\nTo confirm your installation, run the following :\n\n```\n    ruby -v\n    rails --version\n```\n\nIf you get version numbers as result then it means you’re good to go!\n\n## Building the application\n\nTo get started, generate a new project using rails by running the command : \n\n```\n    rails new pusher-realtime-ruby\n```\n\nThis gives us a starter project with this structure to work with. The starter project has the following structure.\n\n![ruby-rails-comments-app-directories](//images.ctfassets.net/1es3ne0caaid/2HqJgFjR4Ai2M6ssiIq40c/b0e43c3cdce00d0a2e686849356f6441/ruby-rails-comments-app-directories.png)\n\n## Creating controller and routes\n\nFor this application, we have two basic routes :\n\n- `/` - displays the homepage with an image and existing comments\n- `/comment/store` -  this route handles the logic for when a new comment is made on the page\n\nCreate a new controller by running :\n\n```\n    rails generate controller Comment store\n```\n\nThis creates a `Comment` controller with an action called `store` .\n\n### Specifying our routes\n\nNow, we need to define the routes we mentioned earlier so the rails server can know to handle requests made by users. To do this, edit the `config/routes.rb` file:\n\n``` ruby\n    // config/routes.rb\n    \n    Rails.application.routes.draw do\n      post 'comment/store'\n      root 'welcome#index'\n    end\n```\n\nThe `comment/store` route accepts a post request from the user and the root of the application is set to the `welcome#index` view.\n\n\u003e We will look at the `welcome#index` view in depth later on in the article\n\n### Adding controller logic\n\nNow that the `comment/store` route has been defined, the next thing to do is to edit the controller logic to do update the comments. The controller looks like this:\n\n``` ruby\n    # app/controllers/comment_controller.rb\n    class CommentController \u003c ApplicationController\n      def store\n        render plain: params[:comment].inspect\n      end\n    end\n```\n\nAt the moment, this just renders the new comment on  a new page. The intended feature is to store the comments in the database and update the comments in realtime. \n\n### Creating a database\n\nTo store comments in a database, a database driver is needed. With Ruby on Rails, `SQLite` is used as the default database driver, and for simplicity, we are going to continue with that.\n\nTo create your database, run the command:\n\n```\n    rake db:create\n```\n\nThis creates the databases for the application in the `db/` directory.\n\n### Creating the Comment model and running migrations\n\nTo populate the database, there need to be tables. Rails is an MVC based Framework and developers can create models to represent entities and structures in their database. To do this, run the command below:\n\n```\n     rails generate model Comment comment:text\n```\n\nThis creates a `Comment` model with a single property `comment`. Running this command will also automatically generate a migration file for the model at `db/migrate/{timestamp}_create_comments.rb`. Let’s take a look at the migration file:\n\n``` ruby\n    class CreateComments \u003c ActiveRecord::Migration[5.1]\n      def change\n        create_table :comments do |t|\n          t.text :comment\n          t.timestamps\n        end\n      end\n    end\n```\n\nWe can see from above that the `comment` field is also created. Now that we are satisfied with the migration, you can use a command to run it:\n\n```\n    rails db:migrate\n```\n\nOnce the run is complete, you get a result that looks like this:\n\n```\n    rails db:migrate\n    == 20180408165733 CreateComments: migrating ===================================\n    -- create_table(:comments)\n       -\u003e 0.0022s\n    == 20180408165733 CreateComments: migrated (0.0023s) ==========================\n```\n\nThis means the `comments` table has successfully been created in the database.\n\n### Storing new comments\n\nNow, let’s go back to the comment controller. To save the comments in the database, change the `store`  action to look like this:\n\n``` ruby\n    class CommentController \u003c ApplicationController\n      def store\n        @comment = Comment.new(comment_params)\n        @comment.save\n        redirect_to '/'\n      end\n    \n      private\n        def comment_params\n          params.require(:comment).permit(:comment)\n        end\n    end\n```\n\nThis creates a new comment, saves it in the database and then reloads the home page to the user showing the existing comments\n\nCreating the HomePage view\nNow, let’s take a quick look at the `welcome#index` view.  To display the view, there is a welcome controller created, with an action called `index`.\n\n```\n    rails generate controller Welcome index\n```\n\nEdit the created controller to look like this:\n\n``` ruby\n    # app/controllers/welcome_controller.rb\n    class WelcomeController \u003c ApplicationController\n      def index\n        @comments = Comment.all\n      end\n    end\n```\n\nThis fetches all the comments from the database and then passes it to the view being generated.\n\nThe index view should be edited to look like this:\n\n``` html\n    # app/views/welcome/index.html.rb\n    \n    \u003ch1 style=\"text-align:center\"\u003eReal-time Comments!\u003c/h1\u003e\n    \u003cdiv class=\"wrapper\"\u003e\n        \u003cimg src=\"https://image4.owler.com/logo/pusher_owler_20160228_200254_large.png\" height=\"150\"alt=\"Pusher\" /\u003e\n        \u003cdiv class=\"top\"\u003e\n            \u003c%= form_with scope: :comment, url: '/comment/store', local: true do |form| %\u003e\n            \u003cdiv class=\"form-group\"\u003e\n                \u003c%= form.label :comment %\u003e\n                \u003c%= form.text_field :comment %\u003e\n                \u003c%= form.submit %\u003e\n            \u003c/div\u003e\n            \n            \u003c% end %\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"bottom\" id=\"comment_section\"\u003e\n            \u003ch2\u003eComments\u003c/h2\u003e\n            \u003c% @comments.each do |comment| %\u003e\n                \u003cp\u003e\u003c%= comment.comment %\u003e\u003c/p\u003e\n            \u003c% end %\u003e\n        \u003c/div\u003e  \n    \u003c/div\u003e\n```    \n\nThe view displays an image and a form where users can comment on the image. When the submit button is clicked, the `/comment/store` route handles the request. In the same view, we also have a listing of all the existing comments that are saved in the database.\n\nTo add some minimal styling to the page, edit the `app/assets/stylesheets/welcome.scss` file to look like this:\n\n``` scss\n    // app/assets/stylesheets/welcome.scss\n    .wrapper{\n        display: flex;\n        justify-content: space-around;\n        flex-direction: column;\n        align-items: center;\n    }\n    \n    .top{\n        display: flex;\n        justify-content: space-around;\n    }\n    \n    .bottom{\n        display: flex;\n        justify-content: center;\n        flex-direction: column;\n    }\n    \n    input[type=submit]{\n       background-color: rgb(27, 96, 160);\n       border : 0px;\n       border-radius: 10px;\n       color: white;\n       height: 40px;\n       margin-left: 20px;\n    }\n    \n    input[type=text]{\n        height: 40px;\n        border-radius: 10px;\n        border: 1px solid rgb(155, 147, 147);\n    }\n    \n    label{\n        height: 40px;\n        margin-right: 10px;\n    }\n    h2{\n        margin-bottom : 0px;\n    }\n```    \n\nTo see the application at work, start the rails server using the command:\n\n```\n    rails server --binding=127.0.0.1\n```\n\nThis starts up a rails server with the port shown to you - in this case `127.0.0.1:3000` as specified with the `--binding` flag. When you visit the application, this is what you see:\n\n![ruby-rails-comments-welcome-view](//images.ctfassets.net/1es3ne0caaid/5LGxFRMZQQqO0eq0EikeSe/63b9fb2a56182312c457a5307e6de275/ruby-rails-comments-welcome-view.png)\n\nWhat we want are the comments to be updated in realtime for all users as changes are being made. Let’s take a look at how to do this.\n\n## Adding realtime functionality using Pusher\n\nLet’s see how to add realtime functionality using [Pusher](https://pusher.com). Pusher allows to seamlessly add realtime features to your applications without worrying about infrastructure.\n\nTo get started, create a [developer account](https://pusher.com/signup). Once that is done, [create your application](https://dashboard.pusher.com/#wizard-modal) and obtain your application keys. \n\nTo use Pusher with your rails application, you need to do a couple of things.\n\n### Install Pusher via Ruby Gems\n\nAdd pusher to your `Gemfile` \n\n```\n    # Gemfile\n    [...]\n    \n    gem 'pusher'\n    \n    [...]\n```\n\nAnd then install the new gem:\n\n```\n    bundle install\n```\n\nTo confirm your installation run:\n\n```\n    bundle info pusher\n```\n\nYou should get a result like this:\n\n``` ruby\n    $ bundle info pusher\n    * pusher (1.3.1)\n            Summary: Pusher API client\n            Homepage: http://github.com/pusher/pusher-http-ruby\n            Path: /home/captog/.rvm/gems/ruby-2.4.1/gems/pusher-1.3.1\n```\n\nImport the Pusher package\n\nCreate the  `config/initializers/pusher.rb` file and edit it to look like this:\n\n``` ruby\n    # config/initializers/pusher.rb\n    require 'pusher'\n    \n    Pusher.app_id = 'PUSHER_APP_ID'\n    Pusher.key = 'PUSHER_APP_KEY'\n    Pusher.secret = 'PUSHER_APP_SECRET'\n    Pusher.cluster = 'PUSHER_APP_CLUSTER'\n    Pusher.logger = Rails.logger\n    Pusher.encrypted = true\n```\n\nThe `PUSHER_APP_ID`, `PUSHER_APP_KEY`, `PUSHER_APP_SECRET` and `PUSHER_APP_CLUSTER`  can all be obtained from the [dashboard](https://dashboard.pusher.com) of your application.\n\n### Trigger events from controller\n\nEarlier on in the article, the Comment controller saved comments to the database and then rendered the homepage. Now, let’s tweak it a bit to trigger a new event. The comment controller will look like this:\n\n``` ruby\n    # app/controllers/comment_controller.rb\n    class CommentController \u003c ApplicationController\n      def store\n        @comment = Comment.new(comment_params)\n        @comment.save\n          # broadcasting comments using pusher\n          Pusher.trigger('comment-channel','new-comment', {\n            comment: @comment.comment\n          })\n        redirect_to '/'\n      end\n    \n      private\n        def comment_params\n          params.require(:comment).permit(:comment)\n        end\n    end\n```\n\nAfter the comment is saved, then a new event named `new-comment` is triggered in the `comment-channel`. From the Pusher dashboard, you can see when events are being triggered for debugging purpose. \n\n![ruby-rails-comments-debug-console](//images.ctfassets.net/1es3ne0caaid/ciMNcN7ybmuw6AG6scyay/9512d8a07979a34d3c33649bf18e8966/ruby-rails-comments-debug-console.png)\n\n### Displaying comments on the client side\n\nSo far, we have seen how to trigger events from the server. For the users to get the realtime experience, they need to be able to see the new comments pop up on their pages. To integrate Pusher to the front end of the application, you need to do the following:\n\nFirst, include the Pusher script in the header of the application in the `app/views/layouts/application.html.erb`\n\n``` html\n    # app/views/layouts/application.html.erb\n    [...]\n      \u003chead\u003e\n        [...]\n        \n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n       \n         [...]\n      \u003c/head\u003e\n    [...]\n```\n\nNext thing to do is to create a Pusher Client in the application header:\n\n``` javascript\n    # app/views/layouts/application.html.erb\n    [...]\n      \u003chead\u003e\n        [...]\n        // add pusher script\n        \u003cscript\u003e\n          var pusher = new Pusher('PUSHER_APP_KEY', {\n          cluster: 'eu',\n          encrypted: true\n        });\n        \u003c/script\u003e\n       \n         [...]\n      \u003c/head\u003e\n    [...]\n```\n\nFinally, subscribe to the `comment-channel` and listen for `new-comment` events. You can do this in the `welcome#index` view of the application. Tweak the view to look like this:\n\n``` javascript\n    # app/views/welcome/index.html.erb\n      [...]\n        \u003cdiv class=\"bottom\" id=\"comment_section\"\u003e\n            \u003ch2\u003eComments\u003c/h2\u003e\n            \u003c% @comments.each do |comment| %\u003e\n                \u003cp\u003e\u003c%= comment.comment %\u003e\u003c/p\u003e\n            \u003c% end %\u003e\n        \u003c/div\u003e\n        \u003cscript\u003e\n            var channel = pusher.subscribe('comment-channel');\n            channel.bind('new-comment', function(data) {\n                let comment = data.comment;\n                var div = document.getElementById('comment_section');\n                div.innerHTML += `\u003cp\u003e ${comment} \u003c/p\u003e`;\n            });\n        \u003c/script\u003e  \n    \u003c/div\u003e\n```\n\nIn the above, we subscribe to the `comment-channel` and listen for a `new-comment` event. Once we get that, the new comment is appended to the comment section of the page.\n\nNow, when you visit the page again, you get this:\n\n![ruby-rails-comments-demo](//images.ctfassets.net/1es3ne0caaid/5r9TjJB1WoqW8OkuuceywW/0aec7673f3133aec8d13636e2b561c7f/ruby-rails-comments-demo.gif)\n\n## Conclusion\n\nIn this article, we looked at how to add Realtime functionality to your Rails application without any hassle. Feel free to implement this for any other use cases you deem fit. Here’s a link to the full [GitHub](https://github.com/christiannwamba/pusher-action-cable) repository if you’re interested.","metaTitle":"Build a comments app with Ruby on Rails","metaDescription":"Use Ruby on Rails to build a realtime comments app. Users can add comments and see each others' comments display immediately."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XaCS1RWmcC6OQCW2OSceE","type":"Entry","createdAt":"2018-06-06T10:53:29.784Z","updatedAt":"2020-06-19T12:38:38.352Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live comments feed with Go and Vue.js","url":"live-comments-go-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-comments-go-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-06-04","description":"Build a simple comments feed using Go, Vue.js and SQLite. Users can comment on a post, with the comments feed updating instantly.","prerequisite":"You will need Go, and SQLite installed on your machine. Basic knowledge of Go and JavaScript will be helpful.","content":"The internet is a breeding ground for all kinds of social activities because it expands the possibilities of communication. In order to keep web applications social and enjoyable, it is important for them to have one or more interfaces for the users to interact through. One such interface is the comment section. \n\nThe comment section is where users can discuss a subject (post, video, picture) that they have access to. In the past, for a user to see a comment from another user, the user would have to refresh the browser window. However, with realtime comments now we can automatically pull in comments live. This article will cover how we can build realtime commenting using Pusher.\n\nBy the end of this article, we will have built an application that looks like this:\n\n![go-comments-demo](//images.ctfassets.net/1es3ne0caaid/3dhebYl8aAm4cCME4Os2ys/4d39432a0bd39156cf8556c15649a2f1/go-comments-demo.gif)\n\n## Requirements\n\nTo follow along with this article, you will need the following:\n\n- Go (version \u003e= 0.10.x) installed on your computer. Heres how you can [install Go](https://golang.org/doc/install).\n- SQLite (v3.x) installed on your machine. [Installation guide](http://www.sqlitetutorial.net).\n- Basic knowledge of the Go programming language.\n- Basic knowledge of JavaScript (ES6).\n- Basic knowledge of Vue.js.\n\n## Getting a Pusher Channels application\n\nThe first step will be to get a Pusher Channels application. We will need the application credentials for our realtime features to work.\n\nGo to the Pusher website and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article.\n\n![go-comments-app-keys](//images.ctfassets.net/1es3ne0caaid/2h3e4hp58cIW6acMc8Mgy0/dfeac8f3cdffb41174e93ad567233cd0/go-comments-app-keys.png)\n\nNow that we have our application, let’s move on to the next step.\n\n## Setting up the codebase\n\nLet’s start by navigating into the `src` directory located in the `$GOPATH`. Then we’ll create a new directory for our app there.\n\n```\n    $ cd $GOPATH/src\n    $ mkdir go-realtime-comments\n    $ cd go-realtime-comments\n```\n\nCreate a `comments.go` file in this directory.\n\nBefore we write code, we need to import a few Go packages that will help run our projects. We will install the [Echo framework](https://echo.labstack.com) and the [SQLite packages](https://github.com/mattn/go-sqlite3). Run the following commands to pull in the packages:\n\n```\n    $ go get github.com/labstack/echo\n    $ go get github.com/labstack/echo/middleware\n    $ go get github.com/mattn/go-sqlite3\n```\n\n\u003e ⚠️  If you use Windows and you encounter the error ‘cc.exe: sorry, unimplemented: 64-bit mode not compiled in ‘, then you need a Windows gcc port, such as https://sourceforge.net/projects/mingw-w64/. Also see this [GitHub issue](https://github.com/mattn/go-sqlite3/issues/297).\n\nWith your favorite editor, open the `comments.go` file and paste in the following lines of code:\n\n``` go\n    package main\n    \n    import (\n        // \"database/sql\"\n    \n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/middleware\"\n        // _ \"github.com/mattn/go-sqlite3\"\n    )\n```\n\n\n## Configuring the database and routes\n\nEvery Go application must have a `main` function. This is where the execution of the application will start from, so let’s create our `main` function:\n\nIn the `comments.go` file, add the following below the imports:\n\n``` go\n    func main() {\n    \n        // Echo instance\n        e := echo.New()\n        \n        // Middleware\n        e.Use(middleware.Logger())\n        e.Use(middleware.Recover())\n            \n        // Define the HTTP routes\n        e.GET(\"/comments\", func(c echo.Context) error {\n            return c.JSON(200, \"GET Comments\")\n        })\n        \n        e.POST(\"/comment\", func(c echo.Context) error {\n            return c.JSON(200, \"POST a new Comment\")\n        })\n        \n        // Start server\n        e.Logger.Fatal(e.Start(\":9000\"))\n    }\n```\n\nIn the main function, we have defined some basic route handler functions, these functions basically return hard coded text to browser on request. The last line will start Go’s standard HTTP server using Echo’s start method and listen for requests port 9000.\n\nWe can test that the application works at this stage by running it and making some requests using [Postman](https://www.getpostman.com/).\n\nHere is how you can run the application:\n\n```\n    $ go run ./comments.go\n```\n\nWe can send HTTP requests using Postman. Here’s a sample GET request using Postman:\n\n![go-comments-get-example](//images.ctfassets.net/1es3ne0caaid/1hOAHfzR8C2SocUciKSaEi/de4455b61abfaed1da7f612a6b1c75f6/go-comments-get-example.png)\n\nPOST request with Postman:\n\n![go-comments-post-example](//images.ctfassets.net/1es3ne0caaid/1uCCDXGXBeus4mSKgSKYoi/a66e13b4921d54b799a3ceae40c2b4d1/go-comments-post-example.png)\n\nWe will create a function that will initialize a database and for that we need the SQL and SQLite3 drivers. We already added them to the `import` statement so uncomment them. We will also create a function that will migrate the database using a database schema defined inside the function.\n\nOpen the `comments.go` file and paste the following code before the `main` function:\n\n``` go\n    func initDB(filepath string) *sql.DB {\n        db, err := sql.Open(\"sqlite3\", filepath)\n        if err != nil {\n            panic(err)\n        }\n    \n        if db == nil {\n            panic(\"db nil\")\n        }\n        return db\n    }\n    \n    func migrate(db *sql.DB) {\n        sql := `\n        CREATE TABLE IF NOT EXISTS comments(\n                id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n                name VARCHAR NOT NULL,\n                email VARCHAR NOT NULL,\n                comment VARCHAR NOT NULL\n        );\n       `\n        _, err := db.Exec(sql)\n        if err != nil {\n            panic(err)\n        }\n    }\n```\n\nNext add the following code to the top of the `main` function:\n\n``` go\n    // [...]\n    \n    // Initialize the database\n    db := initDB(\"storage.db\")\n    migrate(db)\n    \n    // [...]\n```\n\nWe can now check that these functions are being called and the database is created during execution by running the application:\n\n```\n    go run comments.go\n```\n\n\u003e ⚠️  If you were already running the Go application you would need to kill the process using ctrl+c on your keyboard and then restart it to see changes.\n\nWhen the application is run for the first time, a `storage.db` file will be created in the working directory if it did not previously exist.\n\n\n## Setting up the handlers\n\nWe have tested that our application listens on the specified port 9000 and handles the HTTP requests as we configured it to. However, the current handler functions simply return hard-coded text to the browser so let’s create new handler functions to handle responses to the routes.\n\nCreate a new folder in the root directory named `handlers`:\n\n```\n    $ mkdir handlers\n    $ cd handlers\n```\n\nNext create a `handlers.go` file and paste the following:\n\n``` go\n    package handlers\n    \n    import (\n        \"database/sql\"\n        \"go-realtime-comments/models\"\n        \"net/http\"\n        \"github.com/labstack/echo\"\n    )\n```\n\nNow we need to go back to the `comments.go` file and import the handlers package:\n\n```\n    import (\n        \"go-realtime-comments/handlers\"\n    \n        // [...]\n    )\n```\n\nIn the same file, replace the route definitions from earlier with the ones below:\n\n``` go\n    // [...]\n    \n    // Define the HTTP routes\n    e.File(\"/\", \"public/index.html\")\n    e.GET(\"/comments\", handlers.GetComments(db))\n    e.POST(\"/comment\", handlers.PushComment(db))\n    \n    // [...]\n```\n\nNext paste the following code in the `handlers.go` file below the import statement:\n\n``` go\n    type H map[string]interface{}\n    \n    //GetComments handles the HTTP request that hits the /comments endpoint\n    func GetComments(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            return c.JSON(http.StatusOK, models.GetComments(db))\n        }\n    }\n    \n    func PushComment(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            var comment models.Comment\n    \n            c.Bind(\u0026comment)\n    \n            id, err := models.PushComment(db, comment.Name, comment.Email, comment.Comment)\n            if err == nil {\n                return c.JSON(http.StatusCreated, H{\n                    \"created\": id,\n                })\n            }\n            \n            return err\n        }\n    }\n```\n\nThe `GetComments` function fetches and returns comments from the database while the  `PushComment` saves comments to the database and returns a response.\n\n\n## Setting up the models\n\nTo create the model package, we need to create a new folder in the root directory of our application:\n\n```\n    $ mkdir models\n    $ cd models\n```\n\nNext create a `models.go` file and paste the following code:\n\n``` go\n    package models\n    \n    import (\n        \"database/sql\"\n        _ \"github.com/mattn/go-sqlite3\"\n    )\n```\n\nLet’s create a Comment `type`, which is a struct with four fields:\n\n- `ID` - the ID of the comment.\n- `Name` - the username of the user who made the comment.\n- `Email` - the email of the user who made the comment.\n- `Comment` - the comment.\n\nIn Go, we can add metadata to variables by putting them within backticks. We can use this to define what each field should look like when converted to `JSON`. This will also help the `c.Bind` function know how to map `JSON` data when registering a new comment.\n\nLet’s define the structs for `Comment` and `CommentCollection`. In the `models.go` file paste in the following below the imports:\n\n``` go\n    type Comment struct {\n        ID      int    `json:\"id\"`\n        Name    string `json:\"name\"`\n        Email   string `json:\"email\"`\n        Comment string `json:\"comment\"`\n    }\n    \n    type CommentCollection struct {\n        Comments []Comment `json:\"items\"`\n    }\n```\n\nNext, paste in the following code after the structs:\n\n``` go\n    func GetComments(db *sql.DB) CommentCollection {\n        sql := \"SELECT * FROM comments\"\n        rows, err := db.Query(sql)\n    \n        if err != nil {\n            panic(err)\n        }\n    \n        defer rows.Close()\n    \n        result := CommentCollection{}\n    \n        for rows.Next() {\n    \n            comment := Comment{}\n            err2 := rows.Scan(\u0026comment.ID, \u0026comment.Name, \u0026comment.Email, \u0026comment.Comment)\n            if err2 != nil {\n                panic(err2)\n            }\n    \n            result.Comments = append(result.Comments, comment)\n        }\n    \n        return result\n    }\n```\n\nThe `GetComments` function is responsible for retrieving all the available comments from the database and returning them as an instance of the `CommentCollection` that we defined. \n\nNext, paste in the following code below the one above:\n\n``` go\n    func PushComment(db *sql.DB, name string, email string, comment string) (int64, error) {\n        sql := \"INSERT INTO comments(name, email, comment) VALUES(?, ?, ?)\"\n        stmt, err := db.Prepare(sql)\n        if err != nil {\n            panic(err)\n        }\n    \n        defer stmt.Close()\n    \n        result, err2 := stmt.Exec(name, email, comment)\n        if err2 != nil {\n            panic(err2)\n        }\n    \n        return result.LastInsertId()\n    }\n```\n\nThe `PushComments` function adds a new comment to the database.\n\n\n## Building the frontend\n\nNext, create a `public` folder in our application’s root directory and create an `index.html` file inside it. \n\nOpen the `index.html` file and paste in this code:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e\n        \u003ctitle\u003eRealtime comments\u003c/title\u003e\n        \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cstyle\u003e\n          @media (min-width: 48em) {\n            html {\n              font-size: 18px;\n            }\n          }\n          body {\n            font-family: Georgia, \"Times New Roman\", Times, serif;\n            color: #555;\n          }\n          h1, .h1, h2, .h2, h3, .h3, h4, .h4, h5, .h5, h6, .h6 {\n            font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n            font-weight: 400;\n            color: #333;\n          }\n          .blog-masthead {\n            margin-bottom: 3rem;\n            background-color: #428bca;\n            box-shadow: inset 0 -.1rem .25rem rgba(0,0,0,.1);\n          }\n          .nav-link {\n            position: relative;\n            padding: 1rem;\n            font-weight: 500;\n            color: #cdddeb;\n          }\n          .nav-link:hover, .nav-link:focus {\n            color: #fff;\n            background-color: transparent;\n          }\n          .nav-link.active {\n            color: #fff;\n          }\n          .nav-link.active::after {\n            position: absolute;\n            bottom: 0;\n            left: 50%;\n            width: 0;\n            height: 0;\n            margin-left: -.3rem;\n            vertical-align: middle;\n            content: \"\";\n            border-right: .3rem solid transparent;\n            border-bottom: .3rem solid;\n            border-left: .3rem solid transparent;\n          }\n          @media (min-width: 40em) {\n            .blog-title {\n              font-size: 3.5rem;\n            }\n          }\n          .sidebar-module {\n            padding: 1rem;\n          }\n          .sidebar-module-inset {\n            padding: 1rem;\n            background-color: #f5f5f5;\n            border-radius: .25rem;\n          }\n          .sidebar-module-inset p:last-child,\n          .sidebar-module-inset ul:last-child,\n          .sidebar-module-inset ol:last-child {\n            margin-bottom: 0;\n          }\n          .blog-post {\n            margin-bottom: 4rem;\n          }\n          .blog-post-title {\n            margin-bottom: .25rem;\n            font-size: 2.5rem;\n            text-align: center;\n          }\n          .blog-post-meta {\n            margin-bottom: 1.25rem;\n            color: #999;\n            text-align: center;\n          }\n          .blog-footer {\n            padding: 2.5rem 0;\n            color: #999;\n            text-align: center;\n            background-color: #f9f9f9;\n            border-top: .05rem solid #e5e5e5;\n          }\n          .blog-footer p:last-child {\n            margin-bottom: 0;\n          }\n          input{\n              width: 45% !important;\n              display: inline-block !important;\n          }\n          textarea {\n              width: 90%;\n              height: 150px;\n              padding: 12px 20px;\n              box-sizing: border-box;\n              border: 2px solid #ccc;\n              border-radius: 4px;\n              background-color: #f8f8f8;\n              resize: none;\n          }\n          textarea:focus, input:focus{\n              outline: none !important;\n          }\n          #comment-section{\n            background: rgb(178, 191, 214); \n            padding: 0.5em 2em; width: 90%;\n            margin: 10px 0;\n            border-radius: 15px;\n          }\n          #comment-section \u003e div \u003e p {\n            color: black;\n            display:inline;\n          }\n          img{\n          border-radius: 50%;\n          float: left;\n          }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \u003cdiv id=\"app\"\u003e\n        \u003cheader\u003e\n            \u003cdiv class=\"blog-masthead\"\u003e\n              \u003cdiv class=\"container\"\u003e\n                \u003cnav class=\"nav\"\u003e\n                  \u003ca class=\"nav-link active\" href=\"#\"\u003eHome\u003c/a\u003e\n                \u003c/nav\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/header\u003e\n    \n          \u003cmain role=\"main\" class=\"container\"\u003e\n    \n            \u003cdiv class=\"row\"\u003e\n    \n              \u003cdiv class=\"col-sm-12 blog-main\"\u003e\n    \n                \u003cdiv class=\"blog-post\"\u003e\n                  \u003ch2 class=\"blog-post-title\"\u003eRealtime Comments With Pusher\u003c/h2\u003e\n                  \u003cp class=\"blog-post-meta\"\u003eJanuary 1, 2018 by \u003ca href=\"#\"\u003eJordan\u003c/a\u003e\u003c/p\u003e\n                  \u003cp\u003eThis blog post shows a few different types of content that's supported and styled with Bootstrap. Basic typography, images, and code are all supported.This blog post shows a few different types of content that's supported and styled with Bootstrap. Basic typography, images, and code are all supported\n                  \u003c/p\u003e\n                  \u003cdiv class=\"comment-section\"\u003e\n            \u003cform class=\"form-signin\"\u003e\n            \u003ch5 class=\"comment\"\u003eComment\u003c/h5\u003e\n            \u003cinput type=\"username\" ref=\"username\" class=\"form-control\" placeholder=\"John Doe\" required autofocus\u003e\n            \u003cinput type=\"email\" ref=\"email\" class=\"form-control\" placeholder=\"Johndoe@gmail.com\" required\u003e\n            \u003ctextarea ref=\"comment\"\u003e\u003c/textarea\u003e\n            \u003cbutton class=\"btn btn-lg btn-primary\" @click.prevent=\"sendComment\" type=\"submit\"\u003eComment\u003c/button\u003e\n          \u003c/form\u003e\n          \u003cbr\u003e\n          \u003cdiv id=\"comment-section\" v-for=\"comment in comments\"\u003e\n            \u003cdiv\u003e\n              \u003cimg src=\"http://merritos.com/img/team/maleTeam.jpg\" width=\"65px\" height=\"65px\"\u003e\n               \u003cp\u003e\u0026nbsp;\u0026nbsp;{{comment.name}} \u0026nbsp;\u003c {{comment.email}} \u003e\u003c/p\u003e\n               \u003chr\u003e\n            \u003c/div\u003e\n            \u003cp style=\"color:black\"\u003e{{comment.comment}}\u003c/p\u003e\n          \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n    \n            \u003c/div\u003e\n    \n          \u003c/main\u003e\n    \n          \u003cfooter class=\"blog-footer\"\u003e\n            \u003cp\u003e\u003ca href=\"#\"\u003eBack to top\u003c/a\u003e\u003c/p\u003e\n          \u003c/footer\u003e\n    \n        \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNow in the same file, paste the following code before the closing `body` tag of the HTML:\n\n``` javascript\n    \u003cscript\u003e\n      var app = new Vue({\n        el: '#app',\n        data: {\n          comments : []\n        },\n        created: function() {\n          axios.get('/comments').then(response =\u003e { \n            this.comments = response.data.items ? response.data.items : [] \n          })\n        },\n        methods: {\n            sendComment: function(index) {\n              let comment = {\n                name: this.$refs.username.value,\n                email: this.$refs.email.value,\n                comment: this.$refs.comment.value\n              }\n              \n              axios.post('/comment', comment).then(response =\u003e { \n                this.$refs.username.value = '',\n                this.$refs.email.value = '',\n                this.$refs.comment.value = ''\n              })\n            }\n        }\n      })\n    \u003c/script\u003e\n```\n\nAbove we have the Vue.js code for our application and this is a summary of what it does:\n\n\n- We instantiate a comments array that will hold all the available comments.\n- In the `created()` method, we use [Axios](https://www.npmjs.com/package/axios) to pull in all the comments available from the API and store it in the `comments` array.\n- In the `sendComment` method, we send a request to the API to create a new `comment`.\n\nWe can build our application at this stage and visit http://localhost:9000, we should see this:\n\n```\n    $ go run comments.go\n```\n\nOur application should display like this:\n\n![go-comments-homepage](//images.ctfassets.net/1es3ne0caaid/2m7H3gsZCMIkEKGueSEuK/d014e440249b413da2ed8f509d91eae1/go-comments-homepage.png)\n\n### Making comments display in realtime\nThe next thing we need to do is make sure the comments are displayed in realtime. To do this, we need to trigger an event every time a new comment is added. We will do this in the backend using the [Pusher Go library](https://github.com/pusher/pusher-http-go).\n\nTo pull in the Pusher Go library run the following command:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\nNext let’s import the library. In our `models.go` file do the following in the imports statement:\n\n``` go\n    package models\n    \n    import (\n        // [...]\n        \n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n```\n\nIn the same file, before the `type` definition, paste in the following code:\n\n``` go\n    // [...]\n    \n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    // [...]\n```\n\nHere, we have initialized the Pusher client using the credentials from our earlier created app.\n\n\n\u003e ⚠️ Replace `PUSHER_APP_*` keys with your Pusher app credentials.\n\nNext, let’s trigger an event every time a comment is saved to the database. Replace the `PushComment` function with the following code:\n\n``` go\n    func PushComment(db *sql.DB, name string, email string, comment string) (int64, error) {\n        sql := \"INSERT INTO comments(name, email, comment) VALUES(?, ?, ?)\"\n        stmt, err := db.Prepare(sql)\n        if err != nil {\n            panic(err)\n        }\n    \n        defer stmt.Close()\n    \n        result, err2 := stmt.Exec(name, email, comment)\n        if err2 != nil {\n            panic(err2)\n        }\n    \n        newComment := Comment{\n            Name:    name,\n            Email:   email,\n            Comment: comment,\n        }\n    \n        client.Trigger(\"comment-channel\", \"new-comment\", newComment)\n        return result.LastInsertId()\n    }\n```\n\nIn this newer version of the function we create a `newComment` object that holds information for the last comment that was saved to the database. Whenever a new comment is created, we will send it to the Pusher channel `comment-channel` to be triggered on the event `new-comment`.\n\n**Displaying data in realtime on the client**\nTo receive comments we have to register the [Pusher JavaScript Client](https://github.com/pusher/pusher-js) in our frontend code. Add this line of code inside the head tag of our HTML in the index.html file:\n\n```\n    \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n```\n\nNext we will register a Pusher instance in the `created()` life cycle hook:\n\n``` go\n    created: function() {\n    \n        const pusher = new Pusher('PUSHER_APP_KEY', {\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n        \n        const channel = pusher.subscribe('comment-channel');\n        \n        channel.bind('new-comment', data =\u003e {\n          this.comments.push(data)\n        });\n    \n        // [...]    \n    }\n```\n\n\u003e ⚠️  Replace the `PUSHER_APP_*` keys with the credentials for your Pusher application.\n\nIn the code above, we are creating a Pusher instance and then subscribing to a channel. In that channel we are listening for the `new-comment` event.\n\nNow we can run our application:\n\n```\n    $ go run comments.go\n```\n\nWe can point a web browser to this address http://localhost:9000 and we should see the application in action:\n\n![go-comments-demo](//images.ctfassets.net/1es3ne0caaid/3dhebYl8aAm4cCME4Os2ys/4d39432a0bd39156cf8556c15649a2f1/go-comments-demo.gif)\n\n## Conclusion\n\nIn this article, we looked at how to build a realtime comment system using Go, Vue.js, and Pusher Channels. The source code to the application is available on [GitHub.](https://github.com/neoighodaro/realtime-comments-go-pusher)","metaTitle":"Build a live comments feed with Go and Vue.js","metaDescription":"Use Go and Vue.js to create a live comments feed. You will build a simple app, with a sample post. Users will be able to comment on the post and see all users' comments update in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5X3Bg7qOWIQ20KuwSWAwMs","type":"Entry","createdAt":"2018-05-28T11:19:58.087Z","updatedAt":"2018-05-28T11:19:58.087Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live comments app with Ruby on Rails and PostgreSQL","url":"live-comments-ruby-rails-postgresql","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/yemiwebby/live-comments-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6S5luSjtlYk4i8eM8AyO4I","type":"Entry","createdAt":"2018-02-02T13:39:48.331Z","updatedAt":"2018-02-12T14:41:19.307Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby","url":"ruby","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"hPWAADkjVmomS68E6seqQ","type":"Entry","createdAt":"2018-02-12T14:48:52.613Z","updatedAt":"2018-02-12T14:48:52.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby on Rails","url":"ruby-on-rails","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-05-27","description":"Build a social commenting application using Ruby on Rails and PostgreSQL. App users can leave comments on a sample post, and see other comments appear immediately as they are added.","prerequisite":"You will need Ruby, Rails and PostgreSQL installed on your machine.","content":"## Introduction\n\nIn this post, we will explore and build a basic realtime commenting application. We will create a fake post and assume that users read it and decided to leave a comment.\n\nThis is similar to what is obtainable in a real-world application, where you can have live commenting features implemented in your project and comments added by readers will update in realtime without the need to refresh the page.  \n\nThis basically increases the level of engagement and allows for a proper interaction and participation from users. By the time we are done, our application will look like this:\n\n ![live-comments-ruby-demo-1](//images.ctfassets.net/1es3ne0caaid/CUCtt2jfaKamewSYqWEss/905255d1b0f30d78395b67037ba50fc2/live-comments-ruby-demo-1.gif)\n\nThis application will be built with Ruby on Rails and the realtime functionality fully powered by Pusher.\n\n## Prerequisites\n\nA basic understanding of Ruby, CoffeeScript and PostgresSQL will help you with this tutorial. Ensure that you have PostgreSQL installed on your machine. Kindly check the documentation of [PostgreSQL](https://www.postgresql.org/download/), [Ruby](https://www.ruby-lang.org/en/downloads/) and [Rails](http://guides.rubyonrails.org/getting_started.html) for further installations procedures.\n\n## Creating the live comment application\n\nIt is important that you have both Ruby and Rails installed. Run the following code in your terminal to confirm the successful installation of both Ruby and Rails:\n\n```\n    $ ruby -v // 2.1 or above\n    $ rails -v // 4.2 or above\n```\n\nSecondly, we will run a command that will create a new Rails application in a folder called `live-comments-pusher`. Run the command below in your terminal:\n\n```\n    $ rails new live-comments-pusher -T --database=postgresql\n```\n\nThe `-T` flag was added to prevent generation of the default testing suite as we won’t be writing any tests.\n\nGo ahead and change directory into the newly created folder:\n\n```\n    $ cd live-comments-pusher\n```\n\nIn the root directory of this application, open the `Gemfile` and add the following gems:\n\n```\n    # Gemfile\n    \n    gem 'bootstrap', '~\u003e 4.1.0'\n    gem 'jquery-rails'\n    gem 'pusher'\n    gem 'figaro'\n```    \n\nand install them:\n\n```\n    $ bundle install\n```\n\n## Database setup\n\nTo set up the database for our application, create a database called `live-comments-pusher_development`. Check out this [article](https://www.digitalocean.com/community/tutorials/how-to-setup-ruby-on-rails-with-postgres) on how to create a Postgres database and an associated user and password.\n\nIn your `database.yml` file, under the `development` key, add the following code:\n\n``` yaml\n    # config/database.yml\n    \n    ...\n    development:\n      \u003c\u003c: *default\n      database: live-comments-pusher_development // add this line if it isn't already there\n      username: database_user // add this line\n      password: user_password // add this line\n    ...\n```\n\nThe username and password in the code above should have access to the `live-comments-pusher_development` database. Next, run the following code to setup the database:\n\n```\n    # setup database\n    $ rails db:setup\n```\n\n## Starting the web server\n\nStart the development server by running `rails s` from the terminal and visit http://localhost:3000 in your browser. Your page should look like this:\n\n![youre-on-rails](//images.ctfassets.net/1es3ne0caaid/3sOsgC4S80gOKM8Waqkgui/87c5c9e64375cbb2f8f2516223f4e515/youre-on-rails.png)\n\n## Signing up with Pusher\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![ruby-create-pusher-account](//images.ctfassets.net/1es3ne0caaid/6uDbn5kOyIOiKyeSeOKqeS/6136b86bc4d9b6ceff7fcf8458375a19/ruby-create-pusher-account.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![ruby-channels-dashboard](//images.ctfassets.net/1es3ne0caaid/5IDtPf0HhC4aKg66gguYq8/183e0b23ec44fdfc23a38921e11fe9e3/ruby-channels-dashboard.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with, to be provided with boilerplate code:\n\n![ruby-new-pusher-app](//images.ctfassets.net/1es3ne0caaid/3qnLmThfu8ue2ImYKKSw8a/2e4f39b15b8787e0f6d3b4f2ea022d95/ruby-new-pusher-app.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![ruby-app-keys](//images.ctfassets.net/1es3ne0caaid/1XHWE3GCeoCeqsMCO8uM2q/52523148497d08f6e9ba4f52fe0750f6/ruby-app-keys.png)\n\nNow that you have your Pusher API keys, head over to `config/initializers` directory. Create a `pusher.rb` file and add the following code:\n\n``` ruby\n    # config/initializers/pusher.rb\n    \n    require 'pusher'\n    \n    Pusher.app_id = ENV[\"PUSHER_APP_ID\"]\n    Pusher.key = ENV[\"PUSHER_KEY\"]\n    Pusher.secret = ENV[\"PUSHER_SECRET\"]\n    Pusher.cluster = ENV[\"PUSHER_CLUSTER\"]\n    Pusher.logger = Rails.logger\n    Pusher.encrypted = true\n```\n\nIn your terminal, run:\n\n```\n    $ figaro install\n```\n\nThe command above will generate an `application.yml` file. Locate the newly generate file in `config/application.yml` and add the Pusher credentials obtained from your dashboard:\n\n``` yaml\n    # config/application.yml\n    \n    PUSHER_APP_ID: 'YOUR_APP_ID'\n    PUSHER_KEY: 'YOUR_APP_KEY'\n    PUSHER_SECRET: 'YOUR_APP_SECRET'\n    PUSHER_CLUSTER: 'CLUSTER'\n```\n\n\n## Setting up the model and controller\n\nWith our application up and running, we’ll use Rails’ scaffolding feature to quickly set up our comment model and controller:\n\n```\n    # generate comment model and controller\n    $ rails g scaffold comment message:text\n    \n    # run database migration\n    $ rails db:migrate\n```\n\n## Setting up the homepage\n\nRestart the development server and reload your browser page. You should still see the welcome page. We’re about to change all that.\n\nAdd the following code to your route file:\n\n```\n    # config/routes.rb\n    \n    ...\n    root 'comments#index'\n    ...\n```\n\nIn your `application.js` file, add the following code just before the last line:\n\n``` javascript\n    // app/assets/javascripts/application.js\n    \n    .....\n    //= require jquery3 # add this line\n    //= require popper # add this line\n    //= require bootstrap # add this line\n    //= require_tree .\n    ....\n```\n\nRename your `application.css` file to `application.scss`, import Bootstrap and add some custom styles:\n\n``` scss\n    // app/assets/stylesheets/application.scss\n    \n    \n     @import \"bootstrap\";\n     @import url('https://fonts.googleapis.com/css?family=Josefin+Sans');\n     body {\n      font-family: 'Josefin Sans', sans-serif;\n     }\n     .navbar-brand {\n       color: #FFF !important;\n       \u0026:hover {\n         background-color: unset;\n       }\n     }\n     .form-control {\n       outline: none !important;\n       \n       \u0026:focus {\n        border-color: transparent !important;\n        border: 1px !important;\n       }\n     }\n     #wrapper {\n         padding-top: 15px;\n     }\n      p {\n        line-height: 1.3125rem;\n      }\n      \n      .comments {\n        margin: 2.5rem auto 0;\n        max-width: 60.75rem;\n        padding: 0 1.25rem;\n      }\n      \n      .comment-wrap {\n        margin-bottom: 1.25rem;\n        display: table;\n        width: 100%;\n        min-height: 5.3125rem;\n      }\n      \n      .photo {\n        padding-top: 0.625rem;\n        display: table-cell;\n        width: 3.5rem;\n      }\n      .photo .avatar {\n        height: 2.25rem;\n        width: 2.25rem;\n        border-radius: 50%;\n        background-size: contain;\n      }\n      \n      .comment-block {\n        padding: 1rem;\n        background-color: #f5f5f5;\n        display: table-cell;\n        vertical-align: top;\n        border-radius: 0.1875rem;\n        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.08);\n      }\n      .comment-block textarea {\n        width: 100%;\n        resize: none;\n      }\n      \n      .comment-text {\n        margin-bottom: 1.25rem;\n      }\n      \n      .bottom-comment {\n        color: #acb4c2;\n        font-size: 0.875rem;\n      }\n      .comment-actions {\n        float: right;\n      }\n      .comment-actions li {\n        display: inline;\n        margin: -2px;\n        cursor: pointer;\n      }\n      .comment-actions li.show {\n        padding-right: 0.75rem;\n        border-right: 1px solid #e1e5eb;\n      }\n      .comment-actions li.destroy {\n        padding-left: 0.75rem;\n        padding-right: 0.125rem;\n      }\n```    \n\nAt the moment, if we restart the development server and reload the application, we should notice changes in the fonts of our page, this is because we have successfully included Bootstrap.\n\nIf you encounter any errors relating to `application.html.erb`  while trying to set up Bootstrap, in `config/boot.rb`, change the ExecJS runtime from Duktape to Node.\n\n``` ruby\n    # config/boot.rb\n    ENV['EXECJS_RUNTIME'] ='Node'\n```\n\n## Set up the view\n\nTo set up the view, replace the code in your `index.html.erb` file with the following:\n\n``` html\n    \u003c%# app/views/comments/index.html.erb %\u003e\n    \n    \u003cdiv id=\"wrapper\" class=\"container\"\u003e\n    \u003cdiv class=\"text-center\"\u003e\n      \u003ch1\u003eSample post\u003c/h1\u003e\n      \u003cp\u003eThis is an interesting sample post for Pusher \u003c/p\u003e\n    \u003c/div\u003e\n    \u003cdiv id=\"comments\" class=\"comments\"\u003e\n    \u003c% @comments.each do |comment| %\u003e\n     \u003cdiv class=\"col-6 offset-3\"\u003e\n      \u003cdiv class=\"comment-wrap\"\u003e\n            \u003cdiv class=\"photo\"\u003e\n                \u003cdiv class=\"avatar\" style=\"background-image: url('http://res.cloudinary.com/yemiwebby-com-ng/image/upload/v1525202285/avatar_xcah9z.svg')\"\u003e\u003c/div\u003e\n            \u003c/div\u003e        \n            \u003cdiv class=\"comment-block\"\u003e\n                \u003cp class=\"comment-text\"\u003e\u003c%= comment.message %\u003e\u003c/p\u003e\n                \u003cdiv class=\"bottom-comment\"\u003e\n                    \u003cul class=\"comment-actions\"\u003e\n                        \u003cli class=\"show\"\u003e\u003c%= link_to 'Show', comment %\u003e\u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e  \n    \u003c% end %\u003e\n    \u003c/div\u003e\n    \u003cdiv class='col-6 offset-4 col-sm-4'\u003e\n      \u003c%= render 'form', comment: @comment %\u003e\n    \u003c/div\u003e\n    \u003c/div\u003e\n```    \n\nUpdate the index method of the comments controller, to include the following:\n\n``` ruby\n    # app/controllers/comments_controller.rb\n    \n    class CommentsController \u003c ApplicationController\n      ...\n      def index\n        @comments = Comment.all\n        @comment = Comment.new # add this line\n      end\n      ...\n    end\n```\n\nThe code above adds Bootstrap styling to the table on our landing page. It also instantiates a new comment record in the `index` method of the comments controller. If you reload the landing page, you should see the form.\n\n## Post a comment\n\nCurrently adding a new comment record redirects us to a different page. We would like to handle that with AJAX instead. To achieve this, add `remote: true` and `format: :json` to your form. Replace the code in `_form.html.erb` with the following: \n\n``` html\n    // app/views/comments/_form.html.erb\n    \n    \u003c%= form_with(model: comment, remote: true, format: :json, id: 'add_comment') do |form| %\u003e\n      \u003c% if comment.errors.any? %\u003e\n        \u003cdiv id=\"error_explanation\"\u003e\n          \u003ch2\u003e\u003c%= pluralize(comment.errors.count, \"error\") %\u003e prohibited this comment from being saved:\u003c/h2\u003e\n          \u003cul\u003e\n          \u003c% comment.errors.full_messages.each do |message| %\u003e\n            \u003cli\u003e\u003c%= message %\u003e\u003c/li\u003e\n          \u003c% end %\u003e\n          \u003c/ul\u003e\n        \u003c/div\u003e\n      \u003c% end %\u003e\n      \u003cdiv class=\"field\"\u003e\n        \u003c%= form.label :message %\u003e\n        \u003c%= form.text_area :message, id: :comment_message, class: \"form-control\" %\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"actions\"\u003e\n        \u003c%= form.submit 'Add comment', class: \"btn btn-success\"%\u003e\n      \u003c/div\u003e\n    \u003c% end %\u003e\n```\n\nNow that our form uses AJAX, we’ll handle updating the page with CoffeeScript. Open `app/assets/javascripts/comments.coffee` and paste in the code below:\n\n``` coffeescript\n    # app/assets/javascripts/comments.coffee\n    \n    addComment = (data) -\u003e\n      $('#comments').append \"\"\"\n      \u003cdiv class=\"col-6 offset-3\"\u003e\n        \u003cdiv class=\"comment-wrap\"\u003e\n            \u003cdiv class=\"photo\"\u003e\n                \u003cdiv class=\"avatar\" style=\"background-image: url('http://res.cloudinary.com/yemiwebby-com-ng/image/upload/v1525202285/avatar_xcah9z.svg')\"\u003e\u003c/div\u003e\n            \u003c/div\u003e        \n            \u003cdiv class=\"comment-block\"\u003e\n                \u003cp class=\"comment-text\"\u003e#{data.message}\u003c/p\u003e\n                \u003cdiv class=\"bottom-comment\"\u003e\n                    \u003cul class=\"comment-actions\"\u003e\n                        \u003cli class=\"show\"\u003e\u003ca href=\"/comments/#{data.id}\"\u003eShow\u003c/a\u003e\u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n      \u003c/div\u003e\n      \u003c/div\u003e\n      \"\"\"\n      return\n    \n    $ -\u003e\n      $('#add_comment').on 'ajax:success', (data) -\u003e\n        $('#add_comment')[0].reset()\n        addComment data.detail[0]\n        return\n      return\n```\n\nIn the above code, we added an `ajax:success` event listener to our form courtesy of [jQuery-ujs](https://github.com/rails/jquery-ujs/wiki/ajax). Whenever we add a new comment, we get our newly added comment as a response and update our page with it.\n\nLet’s reload our page and add a few comments, they should pop up on the page as soon as we hit submit.\n\n## Realtime service with Pusher\n\nTo update our page in realtime, we will publish the new comment record to a channel and subscribe to it on the frontend of our app. In the comment model, we’ll add an `after_commit` callback, which will call a method that will publish the new comment. We'll use `after_commit` so data is published whenever we add or update a comment. \n\nAdd the following code to the comment model:\n\n``` ruby\n    # app/models/comment.rb\n    \n    class Comment \u003c ApplicationRecord\n      after_commit :notify_pusher, on: [:create, :update]\n      def notify_pusher\n      Pusher.trigger('comment', 'new', self.as_json)\n      end\n    end\n```\n\nHere, our initialized Pusher client triggers an event called `new` through a channel named `comment`.\n\n## Updating the frontend of the application\n\nSo the server is pushing data out on each change, now it’s up to the client to listen for those changes and do something with that data. To do this, we’ll rename our `comments.coffee` file to `comments.coffee.erb` so we can sprinkle some Ruby code in it.\n\nUpdate the file with the following code:\n\n``` ruby\n    # app/assets/javascripts/comments.coffee.erb\n    \n    addComment = (data) -\u003e\n      $('#comments').append \"\"\"\n      \u003cdiv class=\"col-6 offset-3\"\u003e\n        \u003cdiv class=\"comment-wrap\"\u003e\n            \u003cdiv class=\"photo\"\u003e\n                \u003cdiv class=\"avatar\" style=\"background-image: url('http://res.cloudinary.com/yemiwebby-com-ng/image/upload/v1525202285/avatar_xcah9z.svg')\"\u003e\u003c/div\u003e\n            \u003c/div\u003e        \n            \u003cdiv class=\"comment-block\"\u003e\n                \u003cp class=\"comment-text\"\u003e#{data.message}\u003c/p\u003e\n                \u003cdiv class=\"bottom-comment\"\u003e\n                    \u003cul class=\"comment-actions\"\u003e\n                        \u003cli class=\"show\"\u003e\u003ca href=\"/comments/#{data.id}\"\u003eShow\u003c/a\u003e\u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n      \u003c/div\u003e\n      \u003c/div\u003e\n      \"\"\"\n      return\n    \n    $ -\u003e\n      $('#add_comment').on 'ajax:success', (data) -\u003e\n        $('#add_comment')[0].reset()\n        return\n      pusher = new Pusher('\u003c%= ENV[\"PUSHER_KEY\"] %\u003e',\n        cluster: '\u003c%= ENV[\"PUSHER_CLUSTER\"] %\u003e'\n        encrypted: true)\n      channel = pusher.subscribe('comment')\n      channel.bind 'new', (data) -\u003e\n          addComment data\n          return\n      return\n```\n\nLastly, add the Pusher library inside the head tag in the `application.html.erb` file just before the `javascript_include_tag`:\n\n``` html\n    \u003c%# app/views/layouts/application.html.erb %\u003e\n    \n    \u003chead\u003e\n        \u003ctitle\u003eNewNestcomments\u003c/title\u003e\n        \u003c%= csrf_meta_tags %\u003e\n        \u003c%= csp_meta_tag %\u003e\n        \u003c%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e # add this line\n        \u003c%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %\u003e\n      \u003c/head\u003e\n```\n\n## Testing the application\n\nRestart the development server if it is currently running. Check your page on http://localhost:3000:\n\n![live-comments-ruby-demo-2](//images.ctfassets.net/1es3ne0caaid/4dRgYlqRkcOoaUWQ2o08AS/1f88024efd181c76eb7ff11e6f065a28/live-comments-ruby-demo-2.gif)\n\n## Conclusion\n\nIn this tutorial, we have been able to tap into one of the realtime services offered by Pusher to build a live comments application. This can be improved on by adding extra features as you deem fit. The complete source code for this application can be found [here on GitHub](https://github.com/yemiwebby/live-comments-pusher).","metaTitle":"Build a live comments app with Ruby on Rails and PostgreSQL","metaDescription":"This brief tutorial guides you through building a comments app. Use Ruby on Rails and PostgreSQL to create a simple app where users can comment on a sample post. Comments appear and update instantly as they are added."}}],"defaultValue":"Live Comments","queryType":"tag","pages":2,"route":"/tutorials","query":{"tag":"Live Comments","page":"1"}}},"page":"/tutorials","query":{"tag":"Live Comments","page":"1"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Live%20Comments&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:41:57 GMT -->
</html>