<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Android&page=5 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:36:25 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">86</span> tutorials for “<span class="css-npldjc ehwuahf2">Android</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialsa785.html?product=Beams&amp;tag=Android" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials.html" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path fill="#C223CE" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#C223CE" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#C223CE" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#C223CE" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Android"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/flutter-listviews.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Mastering Flutter ListViews</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial takes an in-depth look at working with lists in Flutter. You will learn how to use the ListView object to ...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/authentication-react-native-okta.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Handling authentication in React Native using Okta</h3><p class="css-k12xad e5jrto45">Create a simple React Native login experience, fully integrated with Okta&#x27;s Open ID authentication service. You will com...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/login-ui-flutter.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a login UI with Flutter</h3><p class="css-k12xad e5jrto45">This simple tutorial introduces Flutter through a practical example. You will gain a basic familiarity with Flutter by c...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/flutter-user-input.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">First steps with Flutter - Part 3: Responding to user input</h3><p class="css-k12xad e5jrto45">This tutorial provides an introductory-level overview of working with user inputs in Flutter. You will work through a se...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/flutter-building-layouts.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">First steps with Flutter - Part 2: Building layouts</h3><p class="css-k12xad e5jrto45">This introductory-level tutorial covers the basic of UI layouts with Flutter. You will work through basic examples of co...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-content-good-ux.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live UX</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Updating content in realtime without confusing your users</h3><p class="css-k12xad e5jrto45">This tutorial looks at some of the potential downsides of updating content in realtime, and presents solutions. You will...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/social-online-presence-ionic.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Cordova<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building a social app with online presence using Ionic</h3><p class="css-k12xad e5jrto45">This tutorial will show you how to create a simple social feed for Android and iOS using Ionic. The app features a Node ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/pokemon-react-native-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a Pokemon battle game with React Native - Part 3: Animations and sounds</h3><p class="css-k12xad e5jrto45">In this three part series, use React Native and Node.js to create a two-player Pokemon-like game. In part three, extend ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/wordpress-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Linking WordPress and React Native</h3><p class="css-k12xad e5jrto45">This tutorial discusses the pros and cons of using WordPress and React Native together, before walking through a practic...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialscbba.html?tag=Android&amp;page=4" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials7538.html?tag=Android&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialsa14f.html?tag=Android&amp;page=3" class="css-za1ua3 edg0byb1">3</a><a href="tutorialscbba.html?tag=Android&amp;page=4" class="css-za1ua3 edg0byb1">4</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsc76b.html?tag=Android&amp;page=5" class="css-2wakph edg0byb1">5</a><a href="tutorialsef96.html?tag=Android&amp;page=6" class="css-za1ua3 edg0byb1">6</a><a href="tutorialsf0a6.html?tag=Android&amp;page=7" class="css-za1ua3 edg0byb1">7</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials3b60.html?tag=Android&amp;page=10" class="css-5s6711 edg0byb1">10</a><a href="tutorialsef96.html?tag=Android&amp;page=6" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":86,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"30h9IABcq3OWr4LDqFW88v","type":"Entry","createdAt":"2019-01-30T16:57:25.936Z","updatedAt":"2019-01-30T17:18:17.633Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Mastering Flutter ListViews","url":"flutter-listviews","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"58WBWjhcWcuAMI6qIAyiC4","type":"Entry","createdAt":"2018-12-13T20:46:00.073Z","updatedAt":"2018-12-13T20:46:36.867Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Suragch","url":"suragch","email":"studymongolian@gmail.com","twitter":"https://twitter.com/suragch","github":"https://github.com/suragch","guestWriter":true}}],"projectRepo":"https://github.com/suragch/flutter_listview","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2019-01-30","description":"This tutorial takes an in-depth look at working with lists in Flutter. You will learn how to use the ListView object to create and customize increasingly complex lists.","prerequisite":"You will need Dart and Flutter set up on your system.","content":"## Introduction\n\nIf you have done any Android or iOS development before, you are going to love how easy it is to make ListViews in Flutter. In this article we will use simple examples to look at all of the common use cases for making them. Consider this page a reference. Bookmark it and come back here to copy-and-paste the code snippets as starters in your own projects.\n\nFirst we will look at the main types of ListViews that are available. After that I'll show you how to style the items. Finally I'll cover how to make changes by adding and removing items in the list.\n\n## Prerequisites\n\nI'm assuming that you have the Flutter development environment set up and that you have a basic knowledge of how to make an app. If not, check out the following links:\n\n- [Setting up Flutter](https://flutter.io/docs/get-started/install)\n- [First Steps with Flutter: Exploring widgets](https://pusher.com/tutorials/flutter-widgets)\n- [First Steps with Flutter: Building layouts](https://pusher.com/tutorials/flutter-building-layouts)\n- [First Steps with Flutter: Responding to user input](https://pusher.com/tutorials/flutter-user-input)\n\nI'm using Android Studio with Flutter 1.0 for this article, but you should be fine if you are using another IDE.\n\n## Setup\n\nStart a new Flutter project. I'm calling mine `flutter_listview`.\n\nOpen `main.dart` and replace the code with the following:\n\n``` dart\n    import 'package:flutter/material.dart';\n    \n    void main() =\u003e runApp(MyApp());\n    \n    class MyApp extends StatelessWidget {\n      @override\n      Widget build(BuildContext context) {\n        return MaterialApp(\n          debugShowCheckedModeBanner: false,\n          title: 'ListViews',\n          theme: ThemeData(\n            primarySwatch: Colors.teal,\n          ),\n          home: Scaffold(\n            appBar: AppBar(title: Text('ListViews')),\n            body: BodyLayout(),\n          ),\n        );\n      }\n    }\n    \n    class BodyLayout extends StatelessWidget {\n      @override\n      Widget build(BuildContext context) {\n        return _myListView(context);\n      }\n    }\n    \n    // replace this function with the code in the examples\n    Widget _myListView(BuildContext context) {\n      return ListView();\n    }\n```\n\nNote the `_myListView()` function at the end. You will be replacing this with the code in the examples below.\n\n\n## Basic types of ListViews\n\n### Static ListView\n\nIf you have a short list of items that don't change, then you can use the default ListView constructor to make it. This is useful for making something like a settings menu page.\n\nReplace `_myListView()` with the following:\n\n``` dart\n    Widget _myListView(BuildContext context) {\n      return ListView(\n        children: \u003cWidget\u003e[\n          ListTile(\n            title: Text('Sun'),\n          ),\n          ListTile(\n            title: Text('Moon'),\n          ),\n          ListTile(\n            title: Text('Star'),\n          ),\n        ],\n      );\n    }\n```\n\nRun the app and you should see the following image. (After this when refreshing, usually [hot reload](https://flutter.io/docs/development/tools/hot-reload) works fine, but I find at times I need to do a hot restart or even completely stop and restart the app.) \n\n![flutter-listview-1](//images.ctfassets.net/1es3ne0caaid/WeYaxcnncEFIuNvQ5hSju/f40791f0c15e67f79b44a72f841ea94e/flutter-listview-1.png)\n\nLook back at the code. The children of the ListView were ListTiles. A ListTile is a special widget that is preconfigured to handle the most common layouts that you would want in a ListView. Our list above only included a title, but a ListTile can also include subtitles, icons, and images. We will come back to ListTiles when we look at styling below.\n\nIf you want to add dividers between the rows then use the  `ListTile.divideTiles` constructor.\n\n``` dart\n    Widget _myListView(BuildContext context) {\n      return ListView(\n        children: ListTile.divideTiles(\n          context: context,\n          tiles: [\n            ListTile(\n              title: Text('Sun'),\n            ),\n            ListTile(\n              title: Text('Moon'),\n            ),\n            ListTile(\n              title: Text('Star'),\n            ),\n          ],\n        ).toList(),\n      );\n    }\n```\n\nThe lines are faint, but look carefully:\n\n![flutter-listview-2](//images.ctfassets.net/1es3ne0caaid/5Mp1XkOyQeLjzsHlJh8y1A/beace54a59e4aeeb025ac42e98919c36/flutter-listview-2.png)\n\n### Dynamic ListView\n\nAll of the elements of a static ListView get created at once. This is fine for a short list but not for a long list. You can make a dynamically created ListView by using the `ListView.builder()` constructor. This will create the ListView items only when they need to be displayed on the screen. It works like an Android RecyclerView but is a lot easier to set up.\n\nReplace `_myListView()` with the following:\n\n``` dart\n    Widget _myListView(BuildContext context) {\n      \n      // backing data\n      final europeanCountries = ['Albania', 'Andorra', 'Armenia', 'Austria', \n        'Azerbaijan', 'Belarus', 'Belgium', 'Bosnia and Herzegovina', 'Bulgaria',\n        'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia', 'Finland',\n        'France', 'Georgia', 'Germany', 'Greece', 'Hungary', 'Iceland', 'Ireland',\n        'Italy', 'Kazakhstan', 'Kosovo', 'Latvia', 'Liechtenstein', 'Lithuania',\n        'Luxembourg', 'Macedonia', 'Malta', 'Moldova', 'Monaco', 'Montenegro',\n        'Netherlands', 'Norway', 'Poland', 'Portugal', 'Romania', 'Russia',\n        'San Marino', 'Serbia', 'Slovakia', 'Slovenia', 'Spain', 'Sweden', \n        'Switzerland', 'Turkey', 'Ukraine', 'United Kingdom', 'Vatican City'];\n        \n      return ListView.builder(\n        itemCount: europeanCountries.length,\n        itemBuilder: (context, index) {\n          return ListTile(\n            title: Text(europeanCountries[index]),\n          );\n        },\n      );\n      \n    }\n```\n\nWhich gives:\n\n![flutter-listview-3](//images.ctfassets.net/1es3ne0caaid/7hJOxtACCD3bJ68rEhs9U8/edcf45205d1533721db8ef3e4d729f88/flutter-listview-3.gif)\n\nLook back at the code. I provided an `itemCount` that tells the ListView how many list items there will be. I also provided an `itemBuilder` function that dynamically builds each ListTile as it comes into view. The function provides the BuildContext as the `context` parameter and the item position as the `index` parameter. The `index` makes it convenient to get the data items from the list of European country names that we are using as the backing data.\n\n### Infinite list\n\nI remember struggling trying to make infinite lists in the past with Android or iOS. Flutter makes it simple, though. Just remove the `itemCount` parameter from the `ListView.builder` constructor. Since Europe doesn't have an infinite number of countries, we'll change the ListTile to display the row index.\n\nReplace `_myListView()` with the following:\n\n``` dart\n    Widget _myListView(BuildContext context) {\n      return ListView.builder(\n        itemBuilder: (context, index) {\n          return ListTile(\n            title: Text('row $index'),\n          );\n        },\n      );\n    }\n```\n\nWhich gives:\n\n![flutter-listview-4](//images.ctfassets.net/1es3ne0caaid/6B2AeXDdRbPlaujzIuq0nM/788519138a3062c16eb97fa683c928a9/flutter-listview-4.gif)\n\nYou can scroll all day and you'll never get to the end. That was way too easy. I love it.\n\nIf you want to add dividers between tiles in a dynamic ListView, you can use the `ListView.separated` constructor.\n\n``` dart\n    Widget _myListView(BuildContext context) {\n      return ListView.separated(\n        itemCount: 1000,\n        itemBuilder: (context, index) {\n          return ListTile(\n            title: Text('row $index'),\n          );\n        },\n        separatorBuilder: (context, index) {\n          return Divider();\n        },\n      );\n    }\n```\n\n![flutter-listview-5](//images.ctfassets.net/1es3ne0caaid/3ANoVixMGY7ASb23IWv4mY/12c44705b654bdc2bb6ca269eec8bc43/flutter-listview-5.png)\n\nAgain, you have to look carefully to see the dividers. You can add arguments to `Divider()` if you want to change the line height or color.\n\n### Horizontal ListView\n\nIt's also really easy to make a horizontally scrolling ListView. All you have to do is specify the `scrollDirection` as horizontal. Since ListTiles aren't designed for horizontal ListViews, we will use a simple custom layout.\n\nReplace `_myListView()` with the following:\n\n``` dart\n    Widget _myListView(BuildContext context) {\n      return ListView.builder(\n        scrollDirection: Axis.horizontal,\n        itemBuilder: (context, index) {\n          return Container(\n            margin: const EdgeInsets.symmetric(horizontal: 1.0),\n            color: Colors.tealAccent,\n            child: Text('$index'),\n          );\n        },\n      );\n    }\n```\n\nWhich gives:\n\n![flutter-listview-6](//images.ctfassets.net/1es3ne0caaid/3PXIdl10s2eeO5mx09ZThQ/ecc620e717c2c684194a6a15eca9994f/flutter-listview-6.gif)\n\n## Styling\n\nWe’ve covered the main ListView types above, but they were pretty plain. Flutter offers a lot of options to make them more beautiful.\n\n### ListTile customization\n\nThe Flutter team designed the ListTile widget to handle the normal content that you would want in a list. This means that most of the time there is no need to define a custom layout. You can just use the default ListTile for each item in the list. When we made a ListView in the example above we only used the title option. But we can also show subtitles, images, and icons.\n\nReplace `_myListView()` with the following:\n\n``` dart\n    Widget _myListView(BuildContext context) {\n      return ListView(\n        children: \u003cWidget\u003e[\n          ListTile(\n            leading: Icon(Icons.wb_sunny),\n            title: Text('Sun'),\n          ),\n          ListTile(\n            leading: Icon(Icons.brightness_3),\n            title: Text('Moon'),\n          ),\n          ListTile(\n            leading: Icon(Icons.star),\n            title: Text('Star'),\n          ),\n        ],\n      );\n    }\n```\n\nThe `leading` is for adding an icon or image at the start of the ListTile.\n\n![flutter-listview-7](//images.ctfassets.net/1es3ne0caaid/7sGbYoFwg7wSp8AIvduQnm/f4c193384441af82e750f7ea2c8186ae/flutter-listview-7.png)\n\nYou can also add an icon at the end if you specify the `trailing` attribute.\n\n``` dart\n    ListTile(\n      leading: Icon(Icons.wb_sunny),\n      title: Text('Sun'),\n      trailing: Icon(Icons.keyboard_arrow_right),\n    ),\n```\n\n![flutter-listview-8](//images.ctfassets.net/1es3ne0caaid/4wZWbOsEF6rlq0gM9dbqmF/4c919d5e02e0683046838e57b7070788/flutter-listview-8.png)\n\nThe right arrow icon makes it look like the list items are clickable, but they aren't. Not yet. We will see how to add touch events in the next section. It's easy. (Hint: `onTap` )\n\nInstead of icons, we can also use images. The recommended image option is to use a CircleAvatar widget. \n\nReplace `_myListView()` with the following:\n\n``` dart\n    Widget _myListView(BuildContext context) {\n      return ListView(\n        children: \u003cWidget\u003e[\n          ListTile(\n            leading: CircleAvatar(\n              backgroundImage: AssetImage('assets/sun.jpg'),\n            ),\n            title: Text('Sun'),\n          ),\n          ListTile(\n            leading: CircleAvatar(\n              backgroundImage: AssetImage('assets/moon.jpg'),\n            ),\n            title: Text('Moon'),\n          ),\n          ListTile(\n            leading: CircleAvatar(\n              backgroundImage: AssetImage('assets/stars.jpg'),\n            ),\n            title: Text('Star'),\n          ),\n        ],\n      );\n    }\n```\n\nIt won’t work yet because we need to add the images.\n\nYou could have used `NetworkImage(imageUrl)` instead of `AssetImage(path)`. I chose AssetImage, though, so that everything is self-contained here. Create an `assets` folder in the project’s root directory and add the following images to it: \n\n\n![flutter-listview-9](//images.ctfassets.net/1es3ne0caaid/7CGK6r81g3JWnpwrYqwWpk/d2b19ee516bfadf14a5964be528e9549/flutter-listview-9.jpeg)\n![flutter-listview-10](//images.ctfassets.net/1es3ne0caaid/7FnTXslg1RbJLj0q0rTNDI/41f0684e2e4581c5f6a9b46c12d5a23e/flutter-listview-10.jpeg) ![flutter-listview-11](//images.ctfassets.net/1es3ne0caaid/4Kdpo8HpXspuCbDh8M6KpE/32edc7b2cf6e3fe2c0bd1c0709988424/flutter-listview-11.jpeg)\n\nIn `pubspec.yaml` register the assets location:\n\n``` yaml\n    flutter:\n      assets:\n        - assets/\n```\n\nIf you haven't done this before and are running into problems, you can [check out this post](https://stackoverflow.com/a/53752071/3681880) for more help. \n\nDo a full restart (stop and start) of the app. This gives us the following:\n\n![flutter-listview-12](//images.ctfassets.net/1es3ne0caaid/59a1ieeFPcpJ5i1utPrnyF/42d82ed28f994473c8d66540bfe7163d/flutter-listview-12.png)\n\nBefore we leave ListTile customization, one last thing we should cover is subtitles. Edit the code above to add a `subtitle` argument.\n\n``` dart\n    ListTile(\n      leading: CircleAvatar(\n        backgroundImage: AssetImage('assets/sun.jpg'),\n      ),\n      title: Text('Sun'),\n      subtitle: Text('93 million miles away'), //           \u003c-- subtitle\n    ),\n```\n\n![flutter-listview-13](//images.ctfassets.net/1es3ne0caaid/5NohAQGypaElWL1hJRvDLy/539252f50741cc2690219e59f2c3cb53/flutter-listview-13.png)\n\nAs you can see, the subtitle adds a line of smaller text below the title.\n\n### Cards\n\nCards are a great way to make your list look classy. All you have to do is wrap your ListTile with a Card widget.\n\nReplace `_myListView()` with the following:\n\n``` dart\n    Widget _myListView(BuildContext context) {\n    \n      final titles = ['bike', 'boat', 'bus', 'car',\n      'railway', 'run', 'subway', 'transit', 'walk'];\n      \n      final icons = [Icons.directions_bike, Icons.directions_boat,\n      Icons.directions_bus, Icons.directions_car, Icons.directions_railway,\n      Icons.directions_run, Icons.directions_subway, Icons.directions_transit,\n      Icons.directions_walk];\n      \n      return ListView.builder(\n        itemCount: titles.length,\n        itemBuilder: (context, index) {\n          return Card( //                           \u003c-- Card widget\n            child: ListTile(\n              leading: Icon(icons[index]),\n              title: Text(titles[index]),\n            ),\n          );\n        },\n      );\n    }\n```\n\nWhich gives:\n\n![flutter-listview-14](//images.ctfassets.net/1es3ne0caaid/1Ein4sL1bprOeNEVqtq1NO/86f6e8aaf24b660e00d2703171dc7d10/flutter-listview-14.png)\n\nPlay around with the Card attributes. You can change the shadow by adjusting the `elevation`. Also try changing the `shape` and `margin`.\n\n### Custom list item\n\nIf a ListTile doesn't fit your needs, you are free to design your own tile. Remember, all that ListView wants is a list of widgets. Any widget is fine. I recently worked on an app that required multiple columns in each list item. Here is a simplified example.\n\n``` dart\n    Widget _myListView(BuildContext context) {\n    \n      // the Expanded widget lets the columns share the space\n      Widget column = Expanded(\n        child: Column(\n          // align the text to the left instead of centered\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: \u003cWidget\u003e[\n            Text('Title', style: TextStyle(fontSize: 16),),\n            Text('subtitle'),\n          ],\n        ),\n      );\n      \n      return ListView.builder(\n        itemBuilder: (context, index) {\n          return Card(\n            child: Padding(\n              padding: const EdgeInsets.all(8.0),\n              child: Row(\n                children: \u003cWidget\u003e[\n                  column,\n                  column,\n                ],\n              ),\n            ),\n          );\n        },\n      );\n      \n    }\n```\n\n![flutter-listview-15](//images.ctfassets.net/1es3ne0caaid/6WpACXJJOUnjH2QymEYxDQ/076653c4746e8472789c9f219fd5fffd/flutter-listview-15.png)\n\n\n## Touch detection\n\nIf you are using a ListTile, all you have to do to respond to user touch is to add an `onTap` or `onLongTouch` callback.\n\nReplace `_myListView()` with the following:\n\n``` dart\n    Widget _myListView(BuildContext context) {\n      return ListView(\n        children: \u003cWidget\u003e[\n          ListTile(\n            title: Text('Sun'),\n            trailing: Icon(Icons.keyboard_arrow_right),\n            onTap: () {\n              print('Sun');\n            },\n          ),\n          ListTile(\n            title: Text('Moon'),\n            trailing: Icon(Icons.keyboard_arrow_right),\n            onTap: () {\n              print('Moon');\n            },\n          ),\n          ListTile(\n            title: Text('Star'),\n            trailing: Icon(Icons.keyboard_arrow_right),\n            onTap: () {\n              print('Star');\n            },\n          ),\n        ],\n      );\n    }\n```\n\nSetting the `onTap` parameter allows us to respond when the row is clicked. Here we are just printing a string. (Make sure the Run tab is selected in Android Studio to see the print output.)\n\n![flutter-listview-16](//images.ctfassets.net/1es3ne0caaid/1Trhn6vkFDOqx9F5E4SItT/fe1c6122b6dc5e7b223fd3a3865f649b/flutter-listview-16.gif)\n\nIn a more realistic situation we would probably navigate to a new screen (see [Responding to user input](https://pusher.com/tutorials/flutter-user-input)) or show a detail view on a tablet.\n\nIf you are working with a custom list item layout instead of a ListTile, you can just wrap your widget in an InkWell. Let’s modify our custom two-column row from above:\n\n``` dart\n      return ListView.builder(\n        itemBuilder: (context, index) {\n          return Card(\n            child: InkWell(\n              onTap: () {\n                print('tapped');\n              },\n              child: Padding(\n                padding: const EdgeInsets.all(8.0),\n                child: Row(\n                  children: \u003cWidget\u003e[\n                    column,\n                    column,\n                  ],\n                ),\n              ),\n            ),\n          );\n        },\n      );\n```\n\n![flutter-listview-17](//images.ctfassets.net/1es3ne0caaid/M2hPyAEQsuH3Tc8FpSn8P/91df6d6e47eac534e94a6b808d6884cd/flutter-listview-17.gif)\n\nOf course there are other options, too. We could wrap each column separately in an InkWell or add a button or some other gesture detector.\n\n\n## Updating list data\n\n### Adding and deleting rows in a ListView\n\nIt is pretty easy to update the items in a normal ListView. All you have to do is use a Stateful widget and call `setState()` whenever the row data changes.\n\nSince we need a Stateful widget, replace both `BodyLayout` and `_myListView()` with the following code:\n\n``` dart\n    class BodyLayout extends StatefulWidget {\n      @override\n      BodyLayoutState createState() {\n        return new BodyLayoutState();\n      }\n    }\n    \n    class BodyLayoutState extends State\u003cBodyLayout\u003e {\n    \n      List\u003cString\u003e titles = ['Sun', 'Moon', 'Star'];\n      \n      @override\n      Widget build(BuildContext context) {\n        return _myListView();\n      }\n      \n      Widget _myListView() {\n        return ListView.builder(\n          itemCount: titles.length,\n          itemBuilder: (context, index) {\n            final item = titles[index];\n            return Card(\n              child: ListTile(\n                title: Text(item),\n                \n                onTap: () { //                                  \u003c-- onTap\n                  setState(() {\n                    titles.insert(index, 'Planet');\n                  });\n                },\n                \n                onLongPress: () { //                            \u003c-- onLongPress\n                  setState(() {\n                    titles.removeAt(index);\n                  });\n                },\n                \n              ),\n            );\n          },\n        );\n      }\n    }\n```\n\nWhen you tap an item it adds a \"Planet\" item at that index. When you long press an item, it removes it.\n\n![flutter-listview-18](//images.ctfassets.net/1es3ne0caaid/4dKobtWDlTaKKJ6wNLdAkr/989bee2ec96a2de7aa5de40472ac15ba/flutter-listview-18.gif)\n\nThe problem with this method, though, is that the changes are abrupt. To make adding and deleting rows look nicer, Flutter has an AnimatedList widget.\n\n### Adding and deleting rows in an AnimatedList\n\nReplace the `BodyLayoutState` class with the following code:\n\n``` dart\n    class BodyLayoutState extends State\u003cBodyLayout\u003e {\n    \n      // The GlobalKey keeps track of the visible state of the list items\n      // while they are being animated.\n      final GlobalKey\u003cAnimatedListState\u003e _listKey = GlobalKey();\n      \n      // backing data\n      List\u003cString\u003e _data = ['Sun', 'Moon', 'Star'];\n      \n      @override\n      Widget build(BuildContext context) {\n        return Column(\n          children: \u003cWidget\u003e[\n            SizedBox(\n              height: 300,\n              child: AnimatedList(\n                // Give the Animated list the global key\n                key: _listKey,\n                initialItemCount: _data.length,\n                // Similar to ListView itemBuilder, but AnimatedList has\n                // an additional animation parameter.\n                itemBuilder: (context, index, animation) {\n                  // Breaking the row widget out as a method so that we can\n                  // share it with the _removeSingleItem() method.\n                  return _buildItem(_data[index], animation);\n                },\n              ),\n            ),\n            RaisedButton(\n              child: Text('Insert item', style: TextStyle(fontSize: 20)),\n              onPressed: () {\n                _insertSingleItem();\n              },\n            ),\n            RaisedButton(\n              child: Text('Remove item', style: TextStyle(fontSize: 20)),\n              onPressed: () {\n                _removeSingleItem();\n              },\n            )\n          ],\n        );\n      }\n      \n      // This is the animated row with the Card.\n      Widget _buildItem(String item, Animation animation) {\n        return SizeTransition(\n          sizeFactor: animation,\n          child: Card(\n            child: ListTile(\n              title: Text(\n                item,\n                style: TextStyle(fontSize: 20),\n              ),\n            ),\n          ),\n        );\n      }\n      \n      void _insertSingleItem() {\n        String newItem = \"Planet\";\n        // Arbitrary location for demonstration purposes\n        int insertIndex = 2;\n        // Add the item to the data list.\n        _data.insert(insertIndex, newItem);\n        // Add the item visually to the AnimatedList.\n        _listKey.currentState.insertItem(insertIndex);\n      }\n      \n      void _removeSingleItem() {\n        int removeIndex = 2;\n        // Remove item from data list but keep copy to give to the animation.\n        String removedItem = _data.removeAt(removeIndex);\n        // This builder is just for showing the row while it is still\n        // animating away. The item is already gone from the data list.\n        AnimatedListRemovedItemBuilder builder = (context, animation) {\n          return _buildItem(removedItem, animation);\n        };\n        // Remove the item visually from the AnimatedList.\n        _listKey.currentState.removeItem(removeIndex, builder);\n      }\n    }\n```\n\nThis is the result:\n\n![flutter-listview-19](//images.ctfassets.net/1es3ne0caaid/7uFJwrlX6cSOwFhxrx5BjT/e819338e40a448ae2b645a778cfb0b92/flutter-listview-19.gif)\n\nRead through the comments that I added to the code above. Here are some important points about AnimatedLists:\n\n\n- An AnimatedList needs a GlobalKey that keeps track of the widgets while they are being animated. Every time you make a change to the list, you need to update both the backing data list and the global key.\n- Our row widgets are stateless, but if your rows have state, then you will need a key for them, too. This helps the system know when a change actually happens. See [this video](https://www.youtube.com/watch?v=kn0EOS-ZiIc) from the Flutter team for more about that.\n- I used a SizedTransition as the animation here, but see the [documentation](https://flutter.io/docs/development/ui/widgets/animation) for other options. \n\n\n## Conclusion\n\nWe have taken a full tour of ListViews. You should have a solid understanding now of how to implement the vast majority of use cases that you will encounter. Check out the Further Study section below to see ListViews being used in more advanced situations.\n\nThe source code for this tutorial is available on [GitHub](https://github.com/suragch/flutter_listview).\n\n\n## Further study\n\n- [Flutter - Loading paged JSON data into the ListView](https://www.youtube.com/watch?v=EBpnjs-1-I8) \n- [The Boring Flutter Development Show](https://www.youtube.com/watch?v=CPmN4-i9zC8\u0026list=PLOU2XLYxmsIK0r_D-zWcmJ1plIcDNnRkK) ","metaTitle":"Mastering Flutter ListViews","metaDescription":"This tutorial takes an in-depth look at working with lists in Flutter. You will learn how to use the ListView object to create and customize increasingly complex lists."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7x0LNPT7FzVzvN7GfXY9X6","type":"Entry","createdAt":"2019-01-30T16:57:26.004Z","updatedAt":"2019-01-30T18:15:18.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Handling authentication in React Native using Okta","url":"authentication-react-native-okta","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/react_native_okta_app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2019-01-30","description":"Create a simple React Native login experience, fully integrated with Okta's Open ID authentication service. You will complete setups for both Android and iOS, before creating a basic React Native login feature.","prerequisite":"You will need the React Native CLI installed on your machine.","content":"While building applications, authentication is usually a very important aspect because this is how you identify every user and it can sometimes be tedious. This problem is what Authentication Service Providers solve. They provide authentication and user management services for applications and sometimes easily configurable functionalities such as the login, log out, social media integration and they support authentication protocols such as `OpenID Connect` and `SMAL`.\n\n\n## Okta (formerly Stormpath)\n\n[Okta recently gained Stormpath](https://stormpath.com/blog/stormpaths-new-path) and a couple of things have changed. Stormpath API was shut down fully in August 2017. \nOkta is a third party authentication provider that adds authentication, authorization, and user management to your web or mobile app within minutes. \nOkta provides token authentication, single sign-on, multi-factor authentication, and social logins.\n\n### Okta account setup\n\nTo get started with using Okta, create an account [on the registration page](https://developer.okta.com/signup/) and if you’ve already got an account, [log in](https://login.okta.com/). After login, see a screen similar to this.\n\n![react-native-okta-1](//images.ctfassets.net/1es3ne0caaid/1In93E6PI5KbHD0eSciXN1/f4082d7a17f6d881cc0b279ba13b6212/react-native-okta-1.png)\n\nAfter login is successful, we need to add an application and then configure the app. To add an application, navigate through **Shortcut \u003e Add Application \u003e Create new app**. Then select **Native apps** from the drop-down and click **create**\nThis will take you to a **Create OpenID Connect Integration** page. See image below for an example:\n\n![react-native-okta-2](//images.ctfassets.net/1es3ne0caaid/1LSCtC9MvMoUiclqDuhuHM/107f3cdc2d345775fa36c8091465acff/react-native-okta-2.png)\n\nReplace `developer` in the redirect URI with your Okta account company name and then save.\n\n![react-native-okta-3](//images.ctfassets.net/1es3ne0caaid/3ilYBYYj4yNUyHR8cI2Tch/fad51e9527a6bfec832c35bd0b8e3527/react-native-okta-3.png)\n\nYou will need the `ClientID` and the `redirect_uri` when setting up our React Native app.\n\n## Project setup\n\nTo set up our React Native application\n\n```\n     $ react-native init react_native_okta_app \n```\n\nThis will initialize our project. To be sure everything went well, build the app:\n\n```\n    $ react-native run-ios\n```\n\nFor Android, we run:\n\n```\n    $ react-native run-android\n```\n\n### Install dependencies\n\n```\n    $ npm install react-native-app-auth --save\n    $ react-native link\n```\n\n### Setup for iOS\n\nNavigate to the iOS folder.\n\n```\n    sudo gem install cocoapods\n```\n\nThen create a `Podfile` and paste\n\n```\n    platform :ios, '11.0'\n    \n    target 'react_native_okta_app' do\n      pod 'AppAuth', '\u003e= 0.95'\n    end\n```\n\nRun `pod install`. If you encounter any error, run `pod repo update`. \nIf there are no errors, open the `react_native_okta_app.xcworkspace` and edit the `AppDelegate.h` file.\n\n```\n    #import \u003cUIKit/UIKit.h\u003e\n    #import \"RNAppAuthAuthorizationFlowManager.h\"\n    \n    @interface AppDelegate : UIResponder \u003cUIApplicationDelegate, RNAppAuthAuthorizationFlowManager\u003e\n    \n    @property (nonatomic, weak) id\u003cRNAppAuthAuthorizationFlowManagerDelegate\u003eauthorizationFlowManagerDelegate;\n    \n    @property (nonatomic, strong) UIWindow *window;\n    \n    @end\n```\n\n### Setup for Android\n\nTo get started on Android devices, from the project root directory, navigate to the android directory and upgrade Gradle to the latest version\n\n```\n    $ cd android\n    $ ./gradlew wrapper --gradle-version 4.10.2\n```\n\nIf you get an error that says: `\"compile\" is obsolete and has been replaced with \"implementation\"`, you must edit the `app/src/build.gradle` file and make the change under the `react-native-app-auth` dependency:\n\n``` gradle\n    dependencies {\n        implementation project(':react-native-app-auth')\n        ...\n    }\n```\n\nWe also need to add `appAuthRedirectScheme` to the `defaultConfig` section.\n\n```\n    defaultConfig {\n        ...\n        manifestPlaceholders = [\n            appAuthRedirectScheme: '{yourOktaCompanyUsername}'\n        ]\n      }\n```\n\nSave the changes and run Android `react-native run-android`\n\n\n## Build the React Native app\n\nWe’ll split our application into components. to get started, we need to install `styled-components` in order to style our application. \nWe also need a background image for our application. Save your image of choice in a folder called `assets`. I will be using the stock image available [here](https://unsplash.com/photos/lmFJOx7hPc4).\n\n```\n    $ npm install styled-components --save\n    $ mkdir assets/\n```\n\nCreate a new folder called `components`, create the following files inside the folder:\n\n```\n    $ touch index.js Header.js Button.js ButtonContainer.js Page.js Form.js\n```\n\nReplace the contents of the files above with the following:\n\n``` javascript\n    // /components/index.js\n    export { default as Button } from './Button';\n    export { default as ButtonContainer } from './ButtonContainer';\n    export { default as Form } from './Form';\n    export { default as Header } from './Header';\n    export { default as Page } from './Page';\n```\n\n``` javascript\n    // /components/Header.js\n    import { Platform } from 'react-native';\n    import styled from 'styled-components/native';\n    \n    export default styled.Text`\n        color: white;\n        font-size: 32px;\n        margin-top: 120px;\n        background-color: transparent;\n        text-align: center;\n    `;\n```\n\n``` javascript\n    // /components/Button.js\n    \n    import React, { Component } from 'react';\n    import { Platform } from 'react-native';\n    import styled from 'styled-components/native';\n    \n    type Props = {\n      text: string,\n      color: string,\n      onPress: () =\u003e any\n    };\n    \n    const ButtonBox = styled.TouchableOpacity.attrs({ activeOpacity: 0.8 })`\n      height: 50px;\n      flex: 1;\n      margin: 5px;\n      align-items: center;\n      justify-content: center;\n      background-color: ${props =\u003e props.color};\n    `;\n    \n    const ButtonText = styled.Text`\n      color: white;\n    `;\n    \n    const Button = ({ text, color, onPress }: Props) =\u003e (\n      \u003cButtonBox onPress={onPress} color={color}\u003e\n        \u003cButtonText\u003e{text}\u003c/ButtonText\u003e\n      \u003c/ButtonBox\u003e\n    );\n    \n    export default Button;\n\n\n    // /components/ButtonContainer.js\n    import styled from 'styled-components/native';\n    const ButtonContainer = styled.View`\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      align-self: flex-end;\n      flex-direction: row;\n      margin: 5px;\n    `;\n    export default ButtonContainer;\n```\n\n``` javascript\n    // /components/Page.js\n    import styled from 'styled-components/native';\n    \n    export default styled.ImageBackground.attrs({\n      source: require('../assets/image1.jpeg')\n    })`\n      flex: 1;\n      background-color: white;\n      padding: 40px 10px 10px 10px;\n    `;\n```\n\n``` javascript\n    // /components/Form.js\n    import styled from 'styled-components/native';\n    \n    const Form = styled.View`\n      flex: 1;\n    `;\n    \n    Form.Label = styled.Text`\n      font-size: 14px;\n      font-weight: bold;\n      background-color: transparent;\n      margin-bottom: 10px;\n    `;\n    \n    Form.Value = styled.Text.attrs({ numberOfLines: 10, ellipsizeMode: 'tail' })`\n      font-size: 14px;\n      background-color: transparent;\n      margin-bottom: 20px;\n    `;\n    \n    export default Form;\n```\n\nThe components created above, are all exported and can be accessed in our `app.js` file.\n\n\n### Import all dependencies and components\n\nLet us replace the import statements in our `app.js` file with this:\n\n\n``` javascript\n    // App.js\n    import React, { Component } from 'react';\n    import { Alert, UIManager, LayoutAnimation } from 'react-native';\n    import { authorize, refresh, revoke } from 'react-native-app-auth';\n    import { Page, Button, ButtonContainer, Form, Heading } from './components';\n```\n\nThen we need to define some properties in our state object:\n\n``` javascript\n    type State = {\n      hasLoggedInOnce: boolean,\n      accessToken: ?string,\n      accessTokenExpirationDate: ?string,\n      refreshToken: ?string\n    };\n```\n\nThe most important part is where we define our `config` object to be used for Okta authentication. You will need your `issuer`, `clientId`, `redirectUrl`, and so on, and they all can be gotten from your Okta application dashboard:\n\n``` javascript\n    const config = {\n      issuer: 'https://\u003coktausername\u003e.okta.com',\n      clientId: '\u003cyour okta application client ID\u003e',\n      redirectUrl: 'com.okta.\u003coktausername\u003e:/callback',\n      serviceConfiguration: {\n        authorizationEndpoint: 'https://\u003coktausername\u003e.okta.com/oauth2/v1/authorize',\n        tokenEndpoint: 'https://\u003coktausername\u003e.okta.com/oauth2/v1/token',\n        registrationEndpoint: 'https://\u003coktausername\u003e.okta.com/oauth2/v1/clients'\n      },\n      additionalParameters: {\n        prompt: 'login'\n      },\n      scopes: ['openid', 'profile', 'email', 'offline_access']\n    };\n```\n\nWe need to create our `authorize` function to enable users to log in and also create functions to refresh our authentication token or revoke it.\n\n``` javascript\n      authorize = async () =\u003e {\n        try {\n          const authState = await authorize(config);\n          this.animateState(\n            {\n              hasLoggedInOnce: true,\n              accessToken: authState.accessToken,\n              accessTokenExpirationDate: authState.accessTokenExpirationDate,\n              refreshToken: authState.refreshToken\n            },\n            500\n          );\n        } catch (error) {\n          Alert.alert('Failed to log in', error.message);\n        }\n      };\n      refresh = async () =\u003e {\n        try {\n          const authState = await refresh(config, {\n            refreshToken: this.state.refreshToken\n          });\n          this.animateState({\n            accessToken: authState.accessToken || this.state.accessToken,\n            accessTokenExpirationDate:\n              authState.accessTokenExpirationDate || this.state.accessTokenExpirationDate,\n            refreshToken: authState.refreshToken || this.state.refreshToken\n          });\n        } catch (error) {\n          Alert.alert('Failed to refresh token', error.message);\n        }\n      };\n      revoke = async () =\u003e {\n        try {\n          await revoke(config, {\n            tokenToRevoke: this.state.accessToken,\n            sendClientId: true\n          });\n          this.animateState({\n            accessToken: '',\n            accessTokenExpirationDate: '',\n            refreshToken: ''\n          });\n        } catch (error) {\n          Alert.alert('Failed to revoke token', error.message);\n        }\n      };\n```\n\nIn the `authorize` method, we pass the `config` object and try to fetch the access token, access token expiration date, and if there are errors, we'll send alert the user with a pop-up.\n\nIn the `refresh` method, we pass the `config` object and try to refresh the token. When an authentication token is refreshed, the expiration date is also refreshed alongside.\nThe revoke method deactivates a token. This means that the user will be required to log in again or refresh the token to get a new token.\n\nTo finally wrap up the code, when a user opens our application, we first need to check if the user has been logged in, before deciding what to render. If the user has logged in before, we display the token and expiration date, else a button for the user to authenticate from.\n\n``` javascript\n       render() {\n        const {state} = this;\n        return (\n          \u003cPage\u003e\n            {!!state.accessToken ? (\n              \u003cForm\u003e\n                \u003cForm.Label\u003eaccessToken\u003c/Form.Label\u003e\n                \u003cForm.Value\u003e{state.accessToken}\u003c/Form.Value\u003e\n                \u003cForm.Label\u003eaccessTokenExpirationDate\u003c/Form.Label\u003e\n                \u003cForm.Value\u003e{state.accessTokenExpirationDate}\u003c/Form.Value\u003e\n                \u003cForm.Label\u003erefreshToken\u003c/Form.Label\u003e\n                \u003cForm.Value\u003e{state.refreshToken}\u003c/Form.Value\u003e\n              \u003c/Form\u003e\n            ) : (\n              \u003cHeader\u003e{state.hasLoggedInOnce ? 'Goodbye.' : 'Okta and React Native!'}\u003c/Header\u003e\n            )}\n    \n            \u003cButtonContainer\u003e\n              {!state.accessToken \u0026\u0026 (\n                \u003cButton onPress={this.authorize} text=\"Login\" color=\"#017CC0\"/\u003e\n              )}\n              {!!state.refreshToken \u0026\u0026 \u003cButton onPress={this.refresh} text=\"Refresh\" color=\"#24C2CB\"/\u003e}\n              {!!state.accessToken \u0026\u0026 \u003cButton onPress={this.revoke} text=\"Revoke\" color=\"#EF525B\"/\u003e}\n            \u003c/ButtonContainer\u003e\n          \u003c/Page\u003e\n        );\n      }\n```\n\nPutting it all together, `App.js` should look like this:\n\n``` javascript\n    import React, { Component } from 'react';\n    import { Alert, UIManager, LayoutAnimation } from 'react-native';\n    import { authorize, refresh, revoke } from 'react-native-app-auth';\n    import { Page, Button, ButtonContainer, Form, Header } from './components';\n    \n    UIManager.setLayoutAnimationEnabledExperimental \u0026\u0026\n      UIManager.setLayoutAnimationEnabledExperimental(true);\n    \n    type State = {\n      hasLoggedInOnce: boolean,\n      accessToken: ?string,\n      accessTokenExpirationDate: ?string,\n      refreshToken: ?string\n    };\n    \n    const config = {\n      issuer: 'https://\u003coktausername\u003e.okta.com',\n      clientId: '\u003cyour okta application client ID\u003e',\n      redirectUrl: 'com.okta.\u003coktausername\u003e:/callback',\n      serviceConfiguration: {\n        authorizationEndpoint: 'https://\u003coktausername\u003e.okta.com/oauth2/v1/authorize',\n        tokenEndpoint: 'https://\u003coktausername\u003e.okta.com/oauth2/v1/token',\n        registrationEndpoint: 'https://\u003coktausername\u003e.okta.com/oauth2/v1/clients'\n      },\n      additionalParameters: {\n        prompt: 'login'\n      },\n      scopes: ['openid', 'profile', 'email', 'offline_access']\n    };\n    \n    export default class App extends Component\u003c{}, State\u003e {\n      state = {\n        hasLoggedInOnce: false,\n        accessToken: '',\n        accessTokenExpirationDate: '',\n        refreshToken: ''\n      };\n    \n      animateState(nextState: $Shape\u003cState\u003e, delay: number = 0) {\n        setTimeout(() =\u003e {\n          this.setState(() =\u003e {\n            LayoutAnimation.easeInEaseOut();\n            return nextState;\n          });\n        }, delay);\n      }\n    \n      authorize = async () =\u003e {\n        try {\n          const authState = await authorize(config);\n          this.animateState(\n            {\n              hasLoggedInOnce: true,\n              accessToken: authState.accessToken,\n              accessTokenExpirationDate: authState.accessTokenExpirationDate,\n              refreshToken: authState.refreshToken\n            },\n            500\n          );\n        } catch (error) {\n          Alert.alert('Failed to log in', error.message);\n        }\n      };\n    \n      refresh = async () =\u003e {\n        try {\n          const authState = await refresh(config, {\n            refreshToken: this.state.refreshToken\n          });\n    \n          this.animateState({\n            accessToken: authState.accessToken || this.state.accessToken,\n            accessTokenExpirationDate:\n              authState.accessTokenExpirationDate || this.state.accessTokenExpirationDate,\n            refreshToken: authState.refreshToken || this.state.refreshToken\n          });\n        } catch (error) {\n          Alert.alert('Failed to refresh token', error.message);\n        }\n      };\n    \n      revoke = async () =\u003e {\n        try {\n          await revoke(config, {\n            tokenToRevoke: this.state.accessToken,\n            sendClientId: true\n          });\n          this.animateState({\n            accessToken: '',\n            accessTokenExpirationDate: '',\n            refreshToken: ''\n          });\n        } catch (error) {\n          Alert.alert('Failed to revoke token', error.message);\n        }\n      };\n    \n      render() {\n        const {state} = this;\n        return (\n          \u003cPage\u003e\n            {!!state.accessToken ? (\n              \u003cForm\u003e\n                \u003cForm.Label\u003eaccessToken\u003c/Form.Label\u003e\n                \u003cForm.Value\u003e{state.accessToken}\u003c/Form.Value\u003e\n                \u003cForm.Label\u003eaccessTokenExpirationDate\u003c/Form.Label\u003e\n                \u003cForm.Value\u003e{state.accessTokenExpirationDate}\u003c/Form.Value\u003e\n                \u003cForm.Label\u003erefreshToken\u003c/Form.Label\u003e\n                \u003cForm.Value\u003e{state.refreshToken}\u003c/Form.Value\u003e\n              \u003c/Form\u003e\n            ) : (\n              \u003cHeader\u003e{state.hasLoggedInOnce ? 'Goodbye.' : 'Okta and React Native!'}\u003c/Header\u003e\n            )}\n    \n            \u003cButtonContainer\u003e\n              {!state.accessToken \u0026\u0026 (\n                \u003cButton onPress={this.authorize} text=\"Login\" color=\"#017CC0\"/\u003e\n              )}\n              {!!state.refreshToken \u0026\u0026 \u003cButton onPress={this.refresh} text=\"Refresh\" color=\"#24C2CB\"/\u003e}\n              {!!state.accessToken \u0026\u0026 \u003cButton onPress={this.revoke} text=\"Revoke\" color=\"#EF525B\"/\u003e}\n            \u003c/ButtonContainer\u003e\n          \u003c/Page\u003e\n        );\n      }\n    }\n```\n\nAfter receiving the access token, it can be used to send requests to your Okta based API to authenticate with clients.\n\n### Install on Android or iOS\n\nTo build for Android:\n\n```\n    $ react-native run-android\n```\n\nTo build for iOS:\n\n```\n    $ react-native run-ios\n```\n\nOn installation, your screen should be similar to the following:\n\n![react-native-okta-5](//images.ctfassets.net/1es3ne0caaid/6HhZSz8mqvONo0UVd463bS/38619dfb18b2c5fdeddd864d1702e847/react-native-okta-5.jpeg) ![react-native-okta-6](//images.ctfassets.net/1es3ne0caaid/16Kiy660Ha6OOxvV1YBCVu/2e5b226bea9b56cfc77ef74fa685609f/react-native-okta-6.jpeg) ![react-native-okta-4](//images.ctfassets.net/1es3ne0caaid/24jM4Bk7Fg3ipkPZdrvSNC/038c7593242e0322d9b157f36a314c0d/react-native-okta-4.jpeg)\n\n## Conclusion\n\nWith third-party authentication, we can easily build authentication into our applications and save time rather than build our own authentication system from scratch for every application every time.\nThe code base to this tutorial is available in a [public GitHub Repository](https://github.com/samuelayo/react_native_okta_app). Feel free to experiment around with it.","metaTitle":"Handling authentication in React Native using Okta ","metaDescription":"Create a simple React Native login experience, fully integrated with Okta's Open ID authentication service. You will complete setups for both Android and iOS, before creating a basic React Native logon feature."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4UU91vq6rmKIuc84We4ugW","type":"Entry","createdAt":"2019-01-30T22:00:00.716Z","updatedAt":"2019-02-04T14:16:57.179Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a login UI with Flutter","url":"login-ui-flutter","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/flutter_login_ui","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}}],"reviewDate":"2019-01-30","description":"This simple tutorial introduces Flutter through a practical example. You will gain a basic familiarity with Flutter by creating a project and build a simple login UI.","prerequisite":"You will need Flutter set up on your machine. This tutorial assumes you are using Visual Studio Code for development.","content":"## Introduction\n\nHey folks, in this tutorial we’ll take a look at the new Google SDK to develop reliable and great mobile apps: [Flutter](https://flutter.io). We’ll build a nice UI using Flutter SDK.\n\nAccording to its official site, \n\n\u003e Flutter allows you to build beautiful native apps on iOS and Android from a single codebase.\n\nFlutter enables developers to quickly develop and in an efficient way native mobile apps that can run both onAndroid and iOS devices. Isn’t that great 😌 ?\n\n\n## Demo\n\nHere is the final result of our app 😉 \n\n![flutter-login-ui-demo](//images.ctfassets.net/1es3ne0caaid/6rBfDE9g40sye0qYOMiyCq/71e0b8804adf3cd41ce5edbc2c157702/flutter-login-ui-demo.png)\n\nAs you might have seen, this is a login UI built with the superb Flutter SDK.\n\n## Prerequisites\n\nThis tutorial assumes a little knowledge of Flutter or [Dart](http://dartlang.org/). JavaScript knowledge will be helpful as well, especially ES6 features.\nYou should have:\n\n-  [Visual Studio Code](https://code.visualstudio.com/Download) editor installed on your machine if you haven’t yet. We’ll use it in our tutorial.\n- [Visual Studio Code Flutter plugin](https://flutter.io/docs/get-started/editor?tab=vscode)\n\n\n## Project setup\n\n\u003e **Important:** We’ll mainly focus on building our beautiful app. For this section, you can take a look [here](https://flutter.io/docs/get-started/install). This link is very helpful and will guide you through the installation of Flutter SDK on your machine(if you haven’t yet) regarding your OS.\n\nNow, open your code editor and hit  `ctrl+shift+p` or `cmd+shift+p` to create a new project, and give it a name, or simply run `flutter create your_project_name`.\nAfter that, you’ll end up with a fresh Flutter project.\n\n\n## Directory structure\n\nOnce the project is created, drag it into VS code. We’re using VS code because it has the most complete Flutter support (Dart syntax, code completion, debugging tools).\nBy default, you should see the following directory structure:\n\n- `android` - where Android-related files are stored. If you’ve done any sort of cross-platform mobile app development before, this, along with the `ios` folder should be pretty familiar.\n- `ios` - where iOS-related files are stored.\n- `lib` - this is where you’ll be working on most of the time. By default, it contains a `main.dart` file, this is the entry point file of the Flutter app.\n- `test` - this is where you put the unit testing code for the app. We won’t really be working on it in this tutorial.\n- `pubspec.yaml` - this file defines the version and build number of your app. It’s also where you define your dependencies. If you’re coming from a web development background, this file has the same job description as the `package.json` file so you can define the external packages (from the [Dart packages website](https://pub.dartlang.org/)) you want to use in here.\n\nNote that I’ve skipped on other folders and files because most of the time you won’t really need to touch them.\n\n\n## Defining our assets\n\nHead over to `pubspec.yaml` file and amend it like the following:\n\n``` yaml\n    //../pubspec.yaml\n    name: flutter_login_ui\n    description: A new Flutter project.\n    # The following defines the version and build number for your application.\n    # A version number is three numbers separated by dots, like 1.2.43\n    # followed by an optional build number separated by a +.\n    # Both the version and the builder number may be overridden in flutter\n    # build by specifying --build-name and --build-number, respectively.\n    # Read more about versioning at semver.org.\n    version: 1.0.0+1\n    environment:\n      sdk: \"\u003e=2.0.0-dev.68.0 \u003c3.0.0\"\n    dependencies:\n      flutter:\n        sdk: flutter\n      # The following adds the Cupertino Icons font to your application.\n      # Use with the CupertinoIcons class for iOS style icons.\n      cupertino_icons: ^0.1.2\n    dev_dependencies:\n      flutter_test:\n        sdk: flutter\n    # For information on the generic Dart part of this file, see the\n    # following page: https://www.dartlang.org/tools/pub/pubspec\n    # The following section is specific to Flutter.\n    flutter:\n      # The following line ensures that the Material Icons font is\n      # included with your application, so that you can use the icons in\n      # the material Icons class.\n      uses-material-design: true\n      # To add assets to your application, add an assets section, like this:\n      assets:\n        - logo.png\n      fonts:\n        - family: Montserrat\n          fonts:\n            - asset: fonts/Montserrat-Regular.ttf\n```    \n\nCreate  `assets` and `fonts` directories into the root of your Flutter project. You should respectively find their content at [this link](https://github.com/Ethiel97/flutter_login_ui/tree/master/assets) and [here](https://github.com/Ethiel97/flutter_login_ui/tree/master/fonts).\nWe add a `logo.png` to our `../assets` folder and the `Montserrat-Regular.ttf` font to our `../fonts` folder. Further in the tutorial we’ll make use of these assets in our app.\n\n\n## Build the UI\n\nLet’s take a look at the `..lib/main.dart` file and break down things:\n\nFirst, we import the [Material library](https://docs.flutter.io/flutter/material/material-library.html) from Flutter:\n\n``` dart     \n        import 'package:flutter/material.dart';\n```     \n\nAmong those are the `MaterialApp`, `Scaffold`, and `AppBar` widgets that we’re using inside our app. The methods that we’re using are either part of a library you’ve imported, or part of the Flutter framework itself.\n\nAfter that comes the following line:\n\n``` dart\n        void main() =\u003e runApp(MyApp())\n```        \n\nWell, this is the entry point of our whole program so it must always be defined if you want to render something on the screen. But what about the fat-arrow (`=\u003e`)? If you’re familiar with ES6 features in JavaScript, this is pretty much the same. It’s just a more concise way of defining functions, so we’re actually running the `runApp()` function inside the `main()` function. This function makes the `MyApp` widget the root of the widget tree. This effectively renders the widget, along with its children into the screen.\n\nNote that almost everything in Flutter is a widget, and each one can have its own set of properties and child widgets. We have two main types of widget in Flutter:\n\n- Stateful widget: manages its own internal state and keeps track of it.\n- Stateless widget: while this kind of widget doesn’t. For example a button doesn’t need to track of anything.\n\nThen we define our `MyApp` widget. Amend your `MyApp` class like the following (only change the title property) :\n\n``` dart\n    class MyApp extends StatelessWidget {\n      // This widget is the root of your application.\n      @override\n      Widget build(BuildContext context) {\n        return MaterialApp(\n          title: 'Flutter login UI',\n          theme: ThemeData(\n            // This is the theme of your application.\n            //\n            // Try running your application with \"flutter run\". You'll see the\n            // application has a blue toolbar. Then, without quitting the app, try\n            // changing the primarySwatch below to Colors.green and then invoke\n            // \"hot reload\" (press \"r\" in the console where you ran \"flutter run\",\n            // or simply save your changes to \"hot reload\" in a Flutter IDE).\n            // Notice that the counter didn't reset back to zero; the application\n            // is not restarted.\n            primarySwatch: Colors.blue,\n          ),\n          home: MyHomePage(title: 'Flutter Login'),\n        );\n      }\n    }\n```    \n\nThe code above returns a new `MaterialApp` widget defining our app title, our app theme, and our home page. As you can notice, it is a stateless widget.  To create a stateless widget, you need to extend the `StatelessWidget` [class](https://docs.flutter.io/flutter/widgets/StatelessWidget-class.html) like the following:\n\n\n``` dart\n     class MyApp extends StatelessWidget {\n          // ...\n        }\n```\n\nNow we’ll define our home widget, this time it is a stateful widget, this means it will contain fields that affect how it looks. No change here!\n\n``` dart\n    class MyHomePage extends StatefulWidget {\n      MyHomePage({Key key, this.title}) : super(key: key);\n      // This widget is the home page of your application. It is stateful, meaning\n      // that it has a State object (defined below) that contains fields that affect\n      // how it looks.\n      // This class is the configuration for the state. It holds the values (in this\n      // case the title) provided by the parent (in this case the App widget) and\n      // used by the build method of the State. Fields in a Widget subclass are\n      // always marked \"final\".\n      final String title;\n      @override\n      _MyHomePageState createState() =\u003e _MyHomePageState();\n    }\n```   \n\nThe following class will be responsible for defining our `MyHomePage` widget state. Amend it like the following:\n\n``` dart   \n    class _MyHomePageState extends State\u003cMyHomePage\u003e {\n      TextStyle style = TextStyle(fontFamily: 'Montserrat', fontSize: 20.0);\n      \n      @override\n      Widget build(BuildContext context) {\n    \n        final emailField = TextField(\n          obscureText: false,\n          style: style,\n          decoration: InputDecoration(\n              contentPadding: EdgeInsets.fromLTRB(20.0, 15.0, 20.0, 15.0),\n              hintText: \"Email\",\n              border:\n                  OutlineInputBorder(borderRadius: BorderRadius.circular(32.0))),\n        );\n        final passwordField = TextField(\n          obscureText: true,\n          style: style,\n          decoration: InputDecoration(\n              contentPadding: EdgeInsets.fromLTRB(20.0, 15.0, 20.0, 15.0),\n              hintText: \"Password\",\n              border:\n                  OutlineInputBorder(borderRadius: BorderRadius.circular(32.0))),\n        );\n        final loginButon = Material(\n          elevation: 5.0,\n          borderRadius: BorderRadius.circular(30.0),\n          color: Color(0xff01A0C7),\n          child: MaterialButton(\n            minWidth: MediaQuery.of(context).size.width,\n            padding: EdgeInsets.fromLTRB(20.0, 15.0, 20.0, 15.0),\n            onPressed: () {},\n            child: Text(\"Login\",\n                textAlign: TextAlign.center,\n                style: style.copyWith(\n                    color: Colors.white, fontWeight: FontWeight.bold)),\n          ),\n        );\n        \n        return Scaffold(\n          body: Center(\n            child: Container(\n              color: Colors.white,\n              child: Padding(\n                padding: const EdgeInsets.all(36.0),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.center,\n                  mainAxisAlignment: MainAxisAlignment.center,\n                  children: \u003cWidget\u003e[\n                    SizedBox(\n                      height: 155.0,\n                      child: Image.asset(\n                        \"assets/logo.png\",\n                        fit: BoxFit.contain,\n                      ),\n                    ),\n                    SizedBox(height: 45.0),\n                    emailField,\n                    SizedBox(height: 25.0),\n                    passwordField,\n                    SizedBox(\n                      height: 35.0,\n                    ),\n                    loginButon,\n                    SizedBox(\n                      height: 15.0,\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          ),\n        );\n      }\n    }\n\n\n```\n\n``` dart\n      TextStyle style = TextStyle(fontFamily: 'Montserrat', fontSize: 20.0);\n```\n\nFirst, we define a custom text style to apply to our UI elements. We use the `Montserrat` font as our `fontFamily`.\n\nInside the body of the class, we need to override the `build` function that returns our main widget.\nWe then define our UI elements, two text fields and a login button:\n\n\n- `emailField`: \n\n``` dart\n      final emailField = TextField(\n          style: style,\n          decoration: InputDecoration(\n              contentPadding: EdgeInsets.fromLTRB(20.0, 15.0, 20.0, 15.0),\n              hintText: \"Email\",\n              border:\n                  OutlineInputBorder(borderRadius: BorderRadius.circular(32.0))),\n        );\n```        \n\nThe `final` keyword simply tells our app that the object value won’t be modified throughout the app.  We define an input using the `TextField` widget, we added a hint,some style and decoration. \nWe use some padding for adding an empty space inside the surrounding area of the field.\nWe add a `borderRadius` to have a fancy rounded input field 😎 . \n\n\n- `passwordField`\n\n``` dart\n    final passwordField = TextField(\n          obscureText: true,\n          style: style,\n          decoration: InputDecoration(\n              contentPadding: EdgeInsets.fromLTRB(20.0, 15.0, 20.0, 15.0),\n              hintText: \"Password\",\n              border:\n                  OutlineInputBorder(borderRadius: BorderRadius.circular(32.0))),\n        );\n```\n\nThe definition of the password field is almost the same as the previous one, except that we add a property `obscureText: true` to hide input as we are typing, like a password field should behave.\n\n\n- `loginButton`\n\n``` dart \n    final loginButon = Material(\n          elevation: 5.0,\n          borderRadius: BorderRadius.circular(30.0),\n          color: Color(0xff01A0C7),\n          child: MaterialButton(\n            minWidth: MediaQuery.of(context).size.width,\n            padding: EdgeInsets.fromLTRB(20.0, 15.0, 20.0, 15.0),\n            onPressed: () {},\n            child: Text(\"Login\",\n                textAlign: TextAlign.center,\n                style: style.copyWith(\n                    color: Colors.white, fontWeight: FontWeight.bold)),\n          ),\n        );\n```       \n\nWe use the `Material` widget to add easily a shadow(`elevation` ) to our button. We also add a radius to have a rounded button. Last we add a button as a child our material widget which also take a `Text` widget as a child. Our button has an `onPressed` property that takes a function called whenever it is clicked.\n\nAfter that we put all these widgets together inside our `Scaffold` widget. Our form elements are aligned vertically inside a `Column` widget. Generally, we use the `SizedBox` widget just for spacing purposes.\nWe add an our image inside a `SizedBox` in order define a height for it 🙃 .\n\n``` dart    \n     return Scaffold(\n          body: Center(\n            child: Container(\n              color: Colors.white,\n              child: Padding(\n                padding: const EdgeInsets.all(36.0),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.center,\n                  mainAxisAlignment: MainAxisAlignment.center,\n                  children: \u003cWidget\u003e[\n                    SizedBox(\n                      height: 155.0,\n                      child: Image.asset(\n                        \"assets/logo.png\",\n                        fit: BoxFit.contain,\n                      ),\n                    ),\n                    SizedBox(height: 45.0),\n                    emailField,\n                    SizedBox(height: 25.0),\n                    passwordField,\n                    SizedBox(\n                      height: 35.0,\n                    ),\n                    loginButon,\n                    SizedBox(\n                      height: 15.0,\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          ),\n        );\n```\n\nOnce everything is done, the app should already be functional. If you don’t already have the app running, launch an Android emulator or iOS simulator instance and execute the following command from the root of the project directory:\n\n```\n    flutter run\n```\n\n## Conclusion\n\nThat’s it! In this tutorial, you learned how to create a beautiful login UI with Flutter. You also learned some basic concepts of the Flutter SDK. I do hope you acquired necessary knowledge in order to continue exploring Flutter. \n\nYou can find the code used in this tutorial on its [GitHub repo](https://github.com/Ethiel97/flutter_login_ui).","metaTitle":"Build a login UI with Flutter","metaDescription":"This simple tutorial introduces Flutter through a practical example. You will gain a basic familiarity with Flutter by creating a project and build a simple login UI."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"xBX5pNSVbMmwoEsMSUwmg","type":"Entry","createdAt":"2019-01-30T17:18:51.428Z","updatedAt":"2019-03-24T16:08:06.958Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"First steps with Flutter - Part 3: Responding to user input","url":"flutter-user-input","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"58WBWjhcWcuAMI6qIAyiC4","type":"Entry","createdAt":"2018-12-13T20:46:00.073Z","updatedAt":"2018-12-13T20:46:36.867Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Suragch","url":"suragch","email":"studymongolian@gmail.com","twitter":"https://twitter.com/suragch","github":"https://github.com/suragch","guestWriter":true}}],"projectRepo":"https://github.com/suragch/flutter_responsive_ui","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2018-12-22","description":"This tutorial provides an introductory-level overview of working with user inputs in Flutter. You will work through a series of simple demos, covering features like navigation, text input and gesture detection.","prerequisite":"You will need a Flutter development environment set up on your machine.","content":"This is a three-part series. You can find the other parts here:\n\n- [First steps with Flutter - Part 1: Exploring widgets](https://pusher.com/tutorials/flutter-widgets)\n- [First steps with Flutter - Part 2: Building layouts](https://pusher.com/tutorials/flutter-building-layouts)\n\n\n## Introduction\n\nIn the two previous tutorials we saw that widgets are blueprints for everything that you can see (and many things that you can't see) in the user interface. Simple widgets can be combined together to make complex layouts. The majority of these layouts can be built by dividing your design into rows (use the Row widget), columns (use the Column widget), and layers (use the Stack widget).\n\nThe thing about those layouts, though, is that they were static. You could touch and tap and swipe them all day and they wouldn't do a thing. We are going to fix that in this lesson.\n\nToday we’re going to explore how to actually do something when the user interacts with the widgets that we’ve added to our layout. The emphasis will be on simple, easy to reproduce examples. I strongly encourage you to work along as we go through each one. Make little changes to the code and see how that affects the behavior. This will greatly increase your overall learning.\n\n## Prerequisites\n\nThis tutorial is for beginning Flutter developers. However, I’m assuming that you have the Flutter development environment set up and that you know how to create basic layouts using widgets. If not, refer to the following links:\n\n- [Setup Flutter](https://flutter.io/docs/get-started/install)\n- [Learn about widgets](https://pusher.com/tutorials/flutter-widgets)\n- [Learn about layouts](https://pusher.com/tutorials/flutter-building-layouts)\n\nIn this tutorial we’ll start to do a little more programming with the Dart language. I’m assuming that you have a basic knowledge of object oriented programming, but I don't assume that you know Dart.\n\nThis lesson was tested using Flutter 1.0 with Android Studio. If you are using Visual Studio Code, though, it shouldn't be a problem. The commands and shortcuts are a little different, but they both fully support Flutter.\n\n## Review exercise\n\nBefore I give you the boilerplate code that we’ll use in the examples below, let's see if you can create the following layout on your own.\n\n![flutter-user-input-1](//images.ctfassets.net/1es3ne0caaid/6tdpmtNadqGGWMuuase4U/c09ab2c9c90467648e8e9cc66699f5f9/flutter-user-input-1.png)\n\nHow did you do? If you weren't able to do it, you might want to check out the [previous lesson](https://pusher.com/tutorials/flutter-building-layouts) on building layouts. You may have created something like this:\n\n``` dart\n    void main() =\u003e runApp(MyApp());\n    \n    class MyApp extends StatelessWidget { //            \u003c---  StatelessWidget\n      @override\n      Widget build(BuildContext context) {\n        return MaterialApp(\n          ...\n            body: myLayoutWidget(),\n          ...\n    }\n    \n    Widget myLayoutWidget() {\n      return Column(\n        children: [\n          Text(...),\n          RaisedButton(...),\n        ],\n      );\n    }\n```\n\n## Widgets and state\n\nThat layout above was fine as far as layouts go, but if you try to change the text when the button is pressed, you’ll run into problems. That's because widgets are immutable: they can't be changed. They can only be recreated. But to recreate the Text widget we need to put the string into a variable. We call that variable the state. It’s similar in idea to the phrases “the state of affairs” or a “State of the Union Address,” which deal with the current conditions of some people or country. Similarly, when we talk about a widget, the state refers to the values (in other words, the current condition) of the variables associated with that widget.\n\nYou notice in the code above that it's a StatelessWidget. StatelessWidgets don't have any state. That is, they don't have any mutable variables. So if we have a variable that we want to change, then we need a State**ful**Widget.\n\nStatefulWidgets work like this:\n\n\n- There is a StatefulWidget class and a State class. \n- The StatefulWidget class initializes the State class.\n- The State class holds the variables and tells the StatefulWidget class when and how to build itself.\n\n\n\u003e **Note:** Behind the scenes there is also an [Element](https://docs.flutter.io/flutter/widgets/Element-class.html) that is created from the widget. But as I said, it's behind the scenes and we can happily ignore it at this point in our journey.\n\nSo practically speaking, whenever we need a StatefulWidget, we have to create two classes, a widget class and a State class. Here is the basic setup:\n\n``` dart\n    // widget class\n    class MyWidget extends StatefulWidget {\n      @override\n      _MyWidgetState createState() =\u003e _MyWidgetState();\n    }\n    \n    // state class\n    class _MyWidgetState extends State\u003cMyWidget\u003e {\n      @override\n      Widget build(BuildContext context) {\n        return ...; // widget layout\n      }\n    }\n```\n\nNotice that \n\n\n- the widget class has a `createState()` method that returns the State. The State class has a `build()` method that builds the widget.\n- the `_` underscore at the beginning of the name `_MyWidgetState` makes it private. It can only be seen within this file. This is a characteristic of the Dart language.\n\n\n## Responsive widgets\n\nNow that we’ve talked about state, we’re ready to use it to make our widgets respond to user input.\n\n### Buttons\n\n![flutter-user-input-2](//images.ctfassets.net/1es3ne0caaid/6VQ359BLiMs60uoIyiEck4/1c1e8cf33e28458dc08854f8ee46048f/flutter-user-input-2.gif)\n\nReplace the code in your `main.dart` file with the following code:\n\n``` dart\n    import 'package:flutter/material.dart';\n    \n    void main() =\u003e runApp(MyApp());\n    \n    // boilerplate code\n    class MyApp extends StatelessWidget {\n      @override\n      Widget build(BuildContext context) {\n        return MaterialApp(\n          title: 'Flutter',\n          home: Scaffold(\n            appBar: AppBar(\n              title: Text('Flutter'),\n            ),\n            body: MyWidget(),\n          ),\n        );\n      }\n    }\n    \n    // widget class\n    class MyWidget extends StatefulWidget {\n      @override\n      _MyWidgetState createState() =\u003e _MyWidgetState();\n    }\n    \n    // state class\n    // We will replace this class in each of the examples below\n    class _MyWidgetState extends State\u003cMyWidget\u003e {\n    \n      // state variable\n      String _textString = 'Hello world';\n      \n      // The State class must include this method, which builds the widget\n      @override\n      Widget build(BuildContext context) {\n        return Column(\n          children: [\n            Text(\n              _textString,\n              style: TextStyle(fontSize: 30),\n            ),\n            RaisedButton( //                         \u003c--- Button\n              child: Text('Button'),\n              onPressed: () {\n                _doSomething();\n              },\n            ),\n          ],\n        );\n      }\n      \n      // this private method is run whenever the button is pressed\n      void _doSomething() {\n        // Using the callback State.setState() is the only way to get the build\n        // method to rerun with the updated state value.\n        setState(() {\n          _textString = 'Hello Flutter';\n        });\n      }\n    }\n```\n\nRun the code that you pasted in above. It should look the same as our original layout, but now the first time we press the button, the text gets updated.\n\nNotes:\n\n- The RaisedButton widget has an `onPressed` parameter where you can add a function that will be called whenever the button is pressed.\n- You have to update variables inside the `setState()` method if you want the changes to be reflected in the UI. \n- Do a hot restart (instead of a hot reload) to reset the state to the initial values.\n\n### TextFields\n\nIn this example whenever a TextField is changed, the Text widget above it gets updated.\n\n![flutter-user-input-3](//images.ctfassets.net/1es3ne0caaid/5EaXGDt8juY4Wy2eGu8Wco/9927469431169d917baef3a19e271214/flutter-user-input-3.gif)\n\nReplace the `_MyWidgetState()` class with the following code:\n\n``` dart\n    class _MyWidgetState extends State\u003cMyWidget\u003e {\n      \n      String _textString = 'Hello world';\n      \n      @override\n      Widget build(BuildContext context) {\n        return Column(\n          children: [\n            Text(\n              _textString,\n              style: TextStyle(fontSize: 30),\n            ),\n            TextField( //                       \u003c--- TextField\n              onChanged: (text) {\n                _doSomething(text);\n              },\n            )\n          ],\n        );\n      }\n      \n      void _doSomething(String text) {\n        setState(() {\n          _textString = text;\n        });\n      }\n    }\n```\n\nNotes:\n\n- TextField has an `onChanged`  parameter for a callback method. This method provides the current string after a change has been made.\n- If you want to get the text value without listening to `onChanged`, you can set the TextField’s `controller` parameter. See [this post](https://stackoverflow.com/a/53861303/3681880).\n\n### Checkboxes\n\nFor a checkbox with a label you can use a CheckboxListTile. \n\n![flutter-user-input-4](//images.ctfassets.net/1es3ne0caaid/4MiacHEb3WoUUQCSQgmWo8/1ff6d653331d972405ab226ed834f07b/flutter-user-input-4.gif)\n\nReplace the `_MyWidgetState()` class with the following code:\n\n``` dart\n    class _MyWidgetState extends State\u003cMyWidget\u003e {\n      \n      bool _checkedValue = false;\n      \n      @override\n      Widget build(BuildContext context) {\n        return CheckboxListTile( //                   \u003c--- CheckboxListTile\n          title: Text('this is my title'),\n          value: _checkedValue,\n          onChanged: (newValue) {\n            _doSomething(newValue);\n          },\n          // setting the controlAffinity to leading makes the checkbox come \n          // before the title instead of after it\n          controlAffinity: ListTileControlAffinity.leading,\n        );\n      }\n      \n      void _doSomething(bool isChecked) {\n        setState(() {\n          _checkedValue = isChecked;\n        });\n      }\n    }\n```\n\nNotes:\n\n- If you want to create a custom checkbox then you can use the [Checkbox](https://docs.flutter.io/flutter/material/Checkbox-class.html) widget. It doesn't have a title included.\n- Try commenting out the `controlAffinity` line to see how that affects the layout. See [this post](https://stackoverflow.com/a/53842698/3681880) also.\n- [Here is an example](https://stackoverflow.com/a/45154259/3681880) of a list of checkboxes.\n\n### Dialogs\n\nThere are [a few kinds of dialogs](https://flutter.io/docs/development/ui/widgets/material#Dialogs,%20alerts,%20and%20panels) in Flutter, but let's looks at a common one: the [AlertDialog](https://docs.flutter.io/flutter/material/AlertDialog-class.html). It's not difficult to set up.\n\n![flutter-user-input-5](//images.ctfassets.net/1es3ne0caaid/kWtWZ31oLmmgae8CGIuCA/00465b87a046a248b6a72ce3241da348/flutter-user-input-5.png)\n\nReplace the `_MyWidgetState()` class with the following code:\n\n``` dart\n    class _MyWidgetState extends State\u003cMyWidget\u003e {\n    \n      @override\n      Widget build(BuildContext context) {\n        return RaisedButton(\n          child: Text('Button'),\n          onPressed: () {\n            _showAlertDialog();\n          },\n        );\n      }\n      \n      void _showAlertDialog() {\n        \n        // set up the button\n        Widget okButton = FlatButton(\n          child: Text(\"OK\"),\n          onPressed: () {\n            // This closes the dialog. `context` means the BuildContext, which is\n            // available by default inside of a State object. If you are working\n            // with an AlertDialog in a StatelessWidget, then you would need to\n            // pass a reference to the BuildContext.\n            Navigator.pop(context);\n          },\n        );\n        \n        // set up the AlertDialog\n        AlertDialog alert = AlertDialog(\n          title: Text(\"Dialog title\"),\n          content: Text(\"This is a Flutter AlertDialog.\"),\n          actions: [\n            okButton,\n          ],\n        );\n        \n        // show the dialog\n        showDialog(\n          context: context,\n          builder: (BuildContext context) {\n            return alert;\n          },\n        );\n        \n      }\n    }\n```\n\nNotes:\n\n- An AlertDialog needs the BuildContext. This is passed into the `build()` method and is also a property of the State object.\n- The Navigator is used to close the dialog. We will look more at navigators shortly.\n\nTry a little more:\n\n- Can you make two buttons? \n- Three buttons? \n- See [this post](https://stackoverflow.com/a/53844053/3681880) for the answer.\n\n### Gesture detectors\n\nIn the examples above we’ve seen how to respond to user input using some of the common widgets that are available. These widgets provide callback properties like `onPressed` and `onChanged`. Other widgets (like Text or Container) don't have a built in way to interact with them. Flutter gives us an easy way to make them interactive, though. All you have to do is wrap any widget with a GestureDetector, which is itself a widget.\n\nFor example, here is a Text widget wrapped with a GestureDetector widget.\n\n``` dart\n    GestureDetector(\n      child: Text('Hello world'),\n      onTap: () {\n        // do something\n      },\n    );\n```\n\nWhen the text is tapped, the `onTap` callback will be run. Super easy, isn't it?\n\nYou can try it. Every time you tap the text, the color changes.\n\n![flutter-user-input-6](//images.ctfassets.net/1es3ne0caaid/5iluulIJsWaAm0gIcII8eU/c441663524683db4f11f981b2da09818/flutter-user-input-6.gif)\n\nAdd `import 'dart:math';` to your `main.dart` file and replace the `_MyWidgetState()` class with the following code:\n\n``` dart\n    class _MyWidgetState extends State\u003cMyWidget\u003e {\n    \n      Color textColor = Colors.black;\n    \n      @override\n      Widget build(BuildContext context) {\n        return GestureDetector(  //                  \u003c--- GestureDetector\n          child: Text(\n            'Hello world',\n            style: TextStyle(\n              fontSize: 30,\n              color: textColor,\n            ),\n          ),\n          onTap: () {  //                            \u003c--- onTap\n            _doSomething();\n          },\n        );\n      }\n      \n      void _doSomething() {\n        setState(() {\n          // have to import 'dart:math' in order to use Random()\n          int randomHexColor = Random().nextInt(0xFFFFFF);\n          int opaqueColor = 0xFF000000 + randomHexColor;\n          textColor = Color(opaqueColor);\n        });\n      }\n    }\n```\n\nYou are not limited to detecting a tap. There tons of other gestures that are just as easy to detect. Replace `onTap` in the code above with a few of them. See how the gestures are detected.\n\n\n- `onDoubleTap`\n- `onLongPress`\n- `onLongPressUp`\n- `onPanDown`\n- `onPanStart`\n- `onPanUpdate`\n- `onPanEnd`\n- `onPanCancel`\n- `onScaleStart`\n- `onScaleUpdate`\n- `onScaleEnd`\n- `onTap`\n- `onTapDown`\n- `onTapUp`\n- `onTapCancel`\n- `onHorizontalDragDown`\n- `onHorizontalDragUpdate`\n- `onHorizontalDragEnd`\n- `onHorizontalDragCancel`\n- `onVerticalDragStart`\n- `onVerticalDragDown`\n- `onVerticalDragUpdate`\n- `onVerticalDragEnd`\n- `onVerticalDragCancel`\n\n\n## Navigation\n\nA lesson about responding to user input wouldn't be complete without talking about navigation. How do we go to a different screen in Flutter? And once there, how do we go back?\n\nWell, as you might expect, a new screen in Flutter is just a new widget. The way to get to these widgets is called a route, and Flutter uses a class called a Navigator to manage the routes. To show a new screen, you use the Navigator to *push* a route onto a stack. To dismiss a screen and go back to the previous screen, you *pop* the route off the top of the stack.\n\nHere is how you would navigate to a new widget called SecondScreen.\n\n``` dart\n    Navigator.push(\n        context,\n        MaterialPageRoute(\n          builder: (context) =\u003e SecondScreen(),\n        ));\n```\n\nThe `context` is the BuildContext of the current widget that is wanting to navigate to the new screen. The MaterialPageRoute is what creates the route to the new screen. And `Navigator.push` means that we are adding the route to the stack.\n\nHere is how you would return from the SecondScreen back to the first one.\n\n``` dart\n    Navigator.pop(context);\n```\n\nDoes that look familiar? Yes, we already used that same code to dismiss the AlertDialog that we made before.\n\nTry it out yourself. Here is what it will look like on the iOS simulator.\n\n![flutter-user-input-7](//images.ctfassets.net/1es3ne0caaid/3hbxelz92wKMWMWEeaCCGY/81ccacd31e1c56cc73b9c725162a8f1e/flutter-user-input-7.gif)\n\nReplace all of the code in `main.dart` with the following code.\n\n``` dart\n    import 'package:flutter/material.dart';\n    \n    void main() {\n      runApp(MaterialApp(\n        title: 'Flutter',\n        home: FirstScreen(),\n      ));\n    }\n    \n    class FirstScreen extends StatelessWidget {\n      @override\n      Widget build(BuildContext context) {\n        return Scaffold(\n          appBar: AppBar(title: Text('First screen')),\n          body: Center(\n            child: RaisedButton(\n              child: Text(\n                'Go to second screen',\n                style: TextStyle(fontSize: 24),\n              ),\n              onPressed: () {\n                _navigateToSecondScreen(context);\n              },\n            )\n          ),\n        );\n      }\n      \n      void _navigateToSecondScreen(BuildContext context) {\n        Navigator.push(\n            context,\n            MaterialPageRoute(\n              builder: (context) =\u003e SecondScreen(),\n            ));\n      }\n    }\n    \n    class SecondScreen extends StatelessWidget {\n      @override\n      Widget build(BuildContext context) {\n        return Scaffold(\n          appBar: AppBar(title: Text('Second screen')),\n          body: Center(\n            child: RaisedButton(\n              child: Text(\n                'Go back to first screen',\n                style: TextStyle(fontSize: 24),\n              ),\n              onPressed: () {\n                _goBackToFirstScreen(context);\n              },\n            ),\n          ),\n        );\n      }\n      \n      void _goBackToFirstScreen(BuildContext context) {\n        Navigator.pop(context);\n      }\n    }\n```\n\n### Passing data forward\n\nSometimes you need to send data to the new screen that you are displaying. This is easy to do by passing it in as a parameter in the SecondScreen widget's constructor.\n\n``` dart\n    class SecondScreen extends StatelessWidget {\n      final String text;\n      SecondScreen({Key key, @required this.text}) : super(key: key);\n```\n\nThe Dart constructor syntax may look a little strange to you. Here is a brief explanation:\n\n\n- The comma separated items between the `{ }` braces are the named parameters. They're optional, but users will be warned if they don't provide an `@required` parameter.\n- In Flutter a Key is used to differentiate widgets in the widget tree. See [this video](https://www.youtube.com/watch?v=kn0EOS-ZiIc) for more.\n- The `this.` prefix is used for variables that are defined in the current class.\n- The part after the `:` colon is a comma separated initialization list. The lines in this list are run before the super class's constructor. In this case there is nothing here except a call to a specific constructor of the super class.\n- See the answers to [this Stack Overflow question](https://stackoverflow.com/questions/51013430/flutter-dart-constructor) for more about constructors.\n\nNow that the constructor is set up, you can pass in data when you call it from the FirstScreen.\n\n``` dart\n    Navigator.push(\n        context,\n        MaterialPageRoute(\n          builder: (context) =\u003e SecondScreen(text: 'Hello',),\n        ));\n```\n\n- Note the text \"Hello\" being passed in as a parameter.\n\n![flutter-user-input-8](//images.ctfassets.net/1es3ne0caaid/npPqjOxZrakk64ayW8CIu/6ee7af8e0c726cea553c8371e24d84d1/flutter-user-input-8.gif)\n\nYou can find the [full code for the example here](https://stackoverflow.com/a/53861303/3681880). \n\n### Passing data back\n\nAt other times you need to send data back to the previous screen. Flutter does this in an interesting way.\n\n- The first screen starts the second screen and then waits for a result, which it can use after the second screen finishes. You will notice the `async` and `await` keywords below. Dart makes it easy to do things that you have to wait for (like web requests or long running tasks). Read [this](https://www.dartlang.org/tutorials/language/futures) for more information. It’s way easier than [Android AsyncTasks](https://stackoverflow.com/a/25647882/3681880)! \n\n``` dart\n      void startSecondScreen(BuildContext context) async {\n      \n        // start the SecondScreen and wait for it to finish with a result\n        final result = await Navigator.push(\n            context,\n            MaterialPageRoute(\n              builder: (context) =\u003e SecondScreen(),\n            ));\n            \n        // after the SecondScreen result comes back, update the Text widget with it\n        setState(() {\n          text = result;\n        });\n        \n      }\n```\n\n- In the second screen you pass the data back by supplying it as a parameter in the `pop` method.\n\n``` dart\n    Navigator.pop(context, 'How are you?');\n```\n\n![flutter-user-input-9](//images.ctfassets.net/1es3ne0caaid/6zKyN2Vnc40ksSeYGoso62/32c7edd0b71c98cdfb72fc2e82679d44/flutter-user-input-9.gif)\n\nYou can find the [full code for the example here](https://stackoverflow.com/a/53861303/3681880).\n\n\n## Conclusion\n\nIn this lesson we have gone from static layouts to dynamic ones with widgets that respond to user input. Making responsive widgets like this means that we need to deal with things that change, whether it's text, color, size, or any number of other things that affect the UI. The value of these variables is known as the state, and widgets that have state are known as StatefulWidgets.\n\nProperly managing state in Flutter is a big topic. You have already seen two ways to do it in this lesson. One was having a method variable in the State class. It was available to all of the widgets throughout the class. As the complexity increases, though, it is not practical to include the entire layout in a single `build()` method, nor is it good practice to allow global variables. \n\nAnother way we managed state in this lesson was passing data as a parameter into another widget. This works great when one widget is directly calling another, but it can get cumbersome when you need the state from another widget somewhere far away in the widget tree.\n\nAs you continue to study you will hear about topics like [inherited widgets](https://www.youtube.com/watch?v=Zbm3hjPjQMk), [Streams](https://www.youtube.com/watch?v=ovbspHZJ9b0), [BLoC](https://www.youtube.com/watch?v=fahC3ky_zW0), and [Redux](https://blog.novoda.com/introduction-to-redux-in-flutter/). They are things that you should learn about eventually, but don't worry about them right now. I like what [Hillel Coren said](https://hillelcoren.com/2018/06/01/building-a-large-flutter-app-with-redux/):\n\n\n\u003e My approach when working with a new technology is to start with the simplest implementation and only add in extras once I’ve felt the pain they’re designed to eliminate.\n\nYou already know enough now to begin making Flutter apps. You can deal with the difficulties as they come. So take that app design that you've got in your head and start creating it! You’re ready to go!\n\nThis concludes our First Steps with Flutter series. You can find [the code for this tutorial](https://github.com/suragch/flutter_responsive_ui) on GitHub.\n\n\n## Further study\n\n- [Adding Interactivity to Your Flutter App](https://flutter.io/docs/development/ui/interactive)\n- [State Management documentation](https://flutter.io/docs/development/data-and-backend/state-mgmt)\n- [How Stateful Widgets Are Used Best - Flutter Widgets 101 Ep. 2](https://www.youtube.com/watch?v=AqCMFXEmf3w)","metaTitle":"First steps with Flutter: Responding to user input","metaDescription":"This tutorial provides an introductory-level overview of working with user inputs in Flutter. You will work through a series of simple demos, covering features like navigation, text input and gesture detection."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2z1QF7jDkQY2OWyCQkYm6U","type":"Entry","createdAt":"2019-01-10T15:52:21.270Z","updatedAt":"2019-03-24T16:06:10.799Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"First steps with Flutter - Part 2: Building layouts","url":"flutter-building-layouts","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"58WBWjhcWcuAMI6qIAyiC4","type":"Entry","createdAt":"2018-12-13T20:46:00.073Z","updatedAt":"2018-12-13T20:46:36.867Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Suragch","url":"suragch","email":"studymongolian@gmail.com","twitter":"https://twitter.com/suragch","github":"https://github.com/suragch","guestWriter":true}}],"projectRepo":"https://github.com/suragch/flutter_layout_examples","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2018-12-17","description":"This introductory-level tutorial covers the basic of UI layouts with Flutter. You will work through basic examples of common layout and styling features, as well as becoming familiar with Flutter tools.","prerequisite":"You will need a Flutter development environment set up on your machine.","content":"This is a three-part series. You can find the other parts here:\n\n- [First steps with Flutter - Part 1: Exploring widgets](https://pusher.com/tutorials/flutter-widgets)\n- [First steps with Flutter - Part 3: Responding to user input](https://pusher.com/tutorials/flutter-user-input)\n- \n## Introduction\n\nIf you have done any iOS programming, then you are used to creating layouts graphically in the [Interface Builder](https://developer.apple.com/xcode/interface-builder/). Just drag a UIView onto the storyboard and use your mouse to add the constraints. Or if you are an Android developer, then you are probably equally comfortable in the [Layout Editor](https://developer.android.com/studio/write/layout-editor) creating layouts graphically or with XML. But then you come to Flutter and learn that you have to make your layouts programmatically. You see [frightening examples of code indentation](https://stackoverflow.com/questions/51232298/flutter-widgets-extreem-code-indentation) that look more like the mountains and valleys of the Himalayas than a user interface. \"What?!\" you say. \"How am I supposed to learn this?\"\n\nDo not fear. Creating widget layouts programmatically does take a change in thinking, but that change doesn't need to be a difficult one. In this lesson we are going to explore the basic building blocks of Flutter layouts and how we can use them to create complex user interfaces. I would even argue that Flutter's method is superior to XML layouts or graphical UI builders, but that’s a topic for another day.\n\nMost importantly, be prepared to *do*. Don't just read the examples, follow along and do them. This will maximize your learning. Even if you don't understand something, the simple act of typing the code out will help you start to get a feeling for what it does. Make little changes and see how that affects the layout. Step by little step, you will become a proficient Flutter developer.\n\n\n## Prerequisites\n\nYou don't need any programming experience to go through this tutorial. I'm assuming that you are new to Flutter. However, you will need to have the Flutter development environment set up. If you haven't done that, then check out the [Getting Started](https://flutter.io/docs/get-started/install) Flutter documentation. It's quite clear.\n\nThis tutorial is a direct continuation of my previous article, [First steps with Flutter: Exploring widgets](https://pusher.com/tutorials/flutter-widgets). If you aren't familiar with the concept of Flutter widgets, I recommend that you read that first.\n\nI am using Android Studio with the Flutter 1.0 plugin to run the code in this tutorial. If you are using Visual Studio Code, though, you should be fine.\n\n\n## Setup\n\nCreate a new Flutter project and replace `lib/main.dart` with the following boilerplate code. Notice the `myLayoutWidget()` method at the end. This is what we will be replacing in the examples below.\n\n``` dart\n    import 'package:flutter/material.dart';\n    \n    // entry point for the app, \n    // the =\u003e operator is shorthand for {} when there is only one line of code\n    void main() =\u003e runApp(MyApp());\n    \n    // the root widget of our application\n    class MyApp extends StatelessWidget {\n      @override\n      Widget build(BuildContext context) {\n        return MaterialApp(\n          home: Scaffold(\n            appBar: AppBar(\n              title: Text(\"Building layouts\"),\n            ),\n            body: myLayoutWidget(),\n          ),\n        );\n      }\n    }\n    \n    // replace this method with code in the examples below\n    Widget myLayoutWidget() {\n      return Text(\"Hello world!\");\n    }\n```\n\n## Basic layout widgets (single child)\n\nSo you already know that everything in the Flutter UI is a widget. They're not only *structural* elements like text and buttons. *Layout* elements like padding and rows are also widgets. First let's take a look at some of the most common layout widgets, and later we will see how to combine them into more complex layouts.\n\n### Padding\n\nThinking of padding as a widget is strange when you first come to Flutter. At least in iOS and Android world, padding is a parameter. But in Flutter, if you want add some extra space around a widget, then you wrap it in a Padding widget.\n\nIf you run the boilerplate code from the Setup section above, you should see something like this:\n\n![flutter-layouts-1](//images.ctfassets.net/1es3ne0caaid/4fEjg2hMogK0umqQykkuk0/e5cdb55323a7e9db28b03a19e95b189c/flutter-layouts-1.png)\n\nNow to add padding, wrap the Text widget with a Padding widget. In Android Studio this can be accomplished by placing your cursor on the widget and pressing **Option+Enter** (or **Alt+Enter** in Windows/Linux).\n\n![flutter-layouts-2](//images.ctfassets.net/1es3ne0caaid/5WR9CTpj4Ag2wsMMmOGuEe/b1ccffd1df6ddf04d7dcc47069560e93/flutter-layouts-2.png)\n\nwhich gives you this:\n\n``` dart\n    Widget myLayoutWidget() {\n      return Padding(\n        padding: EdgeInsets.all(8.0),\n        child: Text(\"Hello world!\"),\n      );\n    }\n```\n\nThe EdgeInsets parameter is used to specify the amount of padding. Here `all` was used to indicate that every side (left, top, right, and bottom) should have equal padding. If you want them to have different values, then you can use `only` instead of `all`.\n\nHot reload the app and you should have this:\n\n![flutter-layouts-3](//images.ctfassets.net/1es3ne0caaid/wMvxnzjPz2IYOGeE2gcG4/70e01221eda5bf5caa5354e164f93061/flutter-layouts-3.png)\n\nNotice that now the text has moved away from the edges. It has a padding of 8.0 logical pixels all around it.\n\nExperiment yourself:\n\n- Change the padding value\n- Make the top padding be different than the right padding\n\n### Alignment\n\nTo center a widget, the concept is the same as it was for padding. This time you just wrap your widget with a Center widget. You can type it out or there is a shortcut menu option for it, too. \n\n![flutter-layouts-4](//images.ctfassets.net/1es3ne0caaid/oqEcni0l2KKiouqAcWKOk/22422e3102aa54c06d12f5f7fc9d07e7/flutter-layouts-4.png)\n\nIn addition to centering it, I added some styling to the Text widget so that the font size is more visible. If you are going the cut-and-paste route, then replace the `myLayoutWidget()` method with the following code:\n\n``` dart\n    Widget myLayoutWidget() {\n      return Center(\n        child: Text(\n          \"Hello world!\",\n          style: TextStyle(fontSize: 30),\n        ),\n      );\n    }\n```\n\nHot reload your app and you should see the text centered in middle of the screen.\n\n![flutter-layouts-5](//images.ctfassets.net/1es3ne0caaid/20y4ZAQ1Te6qoySw4M8Eiy/64fa6302e4ce811294a46a92085d99c1/flutter-layouts-5.png)\n\nWhat about if you want to align a widget somewhere else? You can use the Align widget for that. You can either pass in relative `x` and `y` values or you can use the predefined ones. Here are the options. The items in the same row are equivalent.\n\n| `Alignment.topLeft`      | `Alignment(-1.0, -1.0)`   |\n| ------------------------ | ------------------------- |\n| `Alignment.topCenter`    | `Alignment(0.0, -1.0)`    |\n| `Alignment.topRight`     | `Alignment(1.0, -1.0)`    |\n| `Alignment.centerLeft`   | `Alignment(-1.0, 0.0)`    |\n| `**Alignment.center**`   | `**Alignment(0.0, 0.0)**` |\n| `Alignment.centerRight`  | `Alignment(1.0, 0.0)`     |\n| `Alignment.bottomLeft`   | `Alignment(-1.0, 1.0)`    |\n| `Alignment.bottomCenter` | `Alignment(0.0, 1.0)`     |\n| `Alignment.bottomRight`  | `Alignment(1.0, 1.0)`     |\n\n\nYou can see that another way to center something is to use `Alignment.center` or `Alignment(0.0, 0.0)`. Actually, the Center widget is just a special case of the Align widget.\n\nThe following is an image I made for [this Stack Overflow answer](https://stackoverflow.com/a/53716572/3681880). (Check that answer out for even more details on alignment.)\n\n![flutter-layouts-6](//images.ctfassets.net/1es3ne0caaid/3wxekTqHWE0E6c2YeE2CII/0695fdf524225bfa958a9d711024a8e2/flutter-layouts-6.png)\n\nNotice the `(1,2)` position in the bottom right. This shows that you can even align something outside of the parent. Remember that these numbers are relative to the width and height of the parent widget.\n\nYour turn. Paste in the following code.\n\n``` dart\n    Widget myLayoutWidget() {\n      return Align(\n        alignment: Alignment.topCenter,\n        child: Text(\n          \"Hello\",\n          style: TextStyle(fontSize: 30),\n        ),\n      );\n    }\n```\n\nNow adjust the `Alignment` to try to get the text to move everywhere you can see \"Hello\" in the following image (but just one location at a time).\n\n![flutter-layouts-7](//images.ctfassets.net/1es3ne0caaid/7IWx3dqk36uQYWo8cmiGIu/047706f465dfc19bf0320e5441356067/flutter-layouts-7.png)\n\nDid you get the blue one, too? For that you use `Alignment(0.5, 0.5)`.\n\n### Container\n\nWe already met the Container widget in [the last lesson](https://pusher.com/tutorials/flutter-widgets). It is a combination of several simpler widgets. In addition to having Padding and Align built in, it also has a DecoratedBox (for background color, border, [and more](https://medium.com/jlouage/flutter-boxdecoration-cheat-sheet-72cedaa1ba20)) and a ConstrainedBox (for size constraints). \n\nPlug this code in:\n\n``` dart\n    Widget myLayoutWidget() {\n      return Container(\n        margin: EdgeInsets.all(30.0),\n        padding: EdgeInsets.all(10.0),\n        alignment: Alignment.topCenter,\n        width: 200,\n        height: 100,\n        decoration: BoxDecoration(\n          color: Colors.green,\n          border: Border.all(),\n        ),\n        child: Text(\"Hello\", style: TextStyle(fontSize: 30)),\n      );\n    }\n```\n\n![flutter-layouts-8](//images.ctfassets.net/1es3ne0caaid/6slAbPXWW4C66iQoYEugAG/e5b2a1f3126fedf156399f1e0e7305fc/flutter-layouts-8.png)\n\nPlay around with the parameters and see how adjusting them affects how the widgets look. Notice the `margin` parameter. Margin means the spacing outside of the border, while `padding` is the spacing inside of the border. Technically speaking, though, there is no such thing as margin in Flutter. Under the hood it is just another Padding widget that wraps the DecoratedBox.\n\n\u003e **Note:** Flutter is open source and well documented. You can learn a lot about how widgets are built if you explore the source code. In Android Studio **Command + click** (or **Ctrl + click** in Windows/Linux) on the widget name to view its source code.\n\n\n## Basic layout widgets (multiple children)\n\nThe widgets above only took one child. When creating a layout, though, it is often necessary to arrange multiple widgets together. We will see how to do that using rows, columns, and stacks.\n\n### Rows and columns\n\nRows are easy. Just pass in a list of widgets to Row's `children` parameter.\n\n``` dart\n    Widget myLayoutWidget() {\n      return Row(\n        children: [\n          Icon(Icons.home),\n          Icon(Icons.home),\n          Icon(Icons.home),\n          Icon(Icons.home),\n        ],\n      );\n    }\n```\n\nwhich gives\n\n![flutter-layouts-9](//images.ctfassets.net/1es3ne0caaid/2vdFVtf5a0KKSgamEwOaQK/2a25ea9db73b18ddbea5e3317033d140/flutter-layouts-9.png)\n\nNow replace `Row` with `Column` and you get\n\n![flutter-layouts-10](//images.ctfassets.net/1es3ne0caaid/3BublHyCuQs4mMAyu4awO0/0c19e4e8aff55e502bde30658b4aacf8/flutter-layouts-10.png)\n\nWhat if you want to make the contents of the row or column be evenly spaced across the screen? Then wrap each child with an Expanded widget.\n\n``` dart\n    Widget myLayoutWidget() {\n      return Row(\n        children: [\n          Expanded(child: Icon(Icons.home)),\n          Expanded(child: Icon(Icons.home)),\n          Expanded(child: Icon(Icons.home)),\n          Expanded(child: Icon(Icons.home)),\n        ],\n      );\n    }\n```\n\n![flutter-layouts-11](//images.ctfassets.net/1es3ne0caaid/2zWYRFVk7KIacK8E6sGGEu/03420baf20a915b26bad6d7959ef6615/flutter-layouts-11.png)\n\nThe Expanded widget can take a `flex` parameter. This is useful for giving size weights to the children. For example, here are two Containers in a row. The first one takes up 70% of the row and the second one takes up 30%.\n\n``` dart\n    Widget myLayoutWidget() {\n      return Row(\n        children: [\n          Expanded(\n            flex: 7,\n            child: Container(\n              color: Colors.green,\n            ),\n          ),\n          Expanded(\n            flex: 3,\n            child: Container(\n              color: Colors.yellow,\n            ),\n          ),\n        ],\n      );\n    }\n```\n\n![flutter-layouts-12](//images.ctfassets.net/1es3ne0caaid/76VArZz9yE6GYsy8kWE6YA/54f3924407394beabfba511a991bcdab/flutter-layouts-12.png)\n\nNotes:\n\n- If you wanted a single view to only take a fraction of its parent's size, then you could use a [FractionallySizedBox](https://stackoverflow.com/a/53663591).\n- Check out [Flutter — Row/Column Cheat Sheet](https://medium.com/jlouage/flutter-row-column-cheat-sheet-78c38d242041) for much, much more.\n\n### Stacks\n\nThe Stack widget lays out its children like a stack of pancakes. You set it up like the Row and Column widgets. Whichever child comes first is the one on the bottom.\n\nYou could do something like this:\n\n``` dart\n    Widget myLayoutWidget() {\n      return Stack(\n        children: [\n          Icon(Icons.home),\n          Icon(Icons.home),\n          Icon(Icons.home),\n          Icon(Icons.home),\n        ],\n      );\n    }\n```\n\nbut who needs four icons stacked on top of each other?\n\n![flutter-layouts-13](//images.ctfassets.net/1es3ne0caaid/5NhbzsrAByCuqys4MCu2k2/f4bd7bfb02e4079e36a5359e527e7b1e/flutter-layouts-13.png)\n\nA more likely scenario is to use a stack to write text on an image. Let's take this image\n\n![flutter-layouts-14](//images.ctfassets.net/1es3ne0caaid/3BoyCPkO4Uk4QUOc2Oq4Co/99238ad371bd88b47d5d9561e79d1ddb/flutter-layouts-14.png)\n\nand put it in our project:\n\n1. Create an `images` folder in the root of your project and copy the `sheep.jpg` file into it.\n2. Register `images` as an assets folder in your `pubspec.yaml` file.\n\n```\n    flutter:\n      assets:\n        - images/\n```\n\n*(If that didn't make sense, see [this post](https://stackoverflow.com/a/53752071/3681880) for more details.)*\n\nNow we can get the image in code and use a Stack widget to display some text over it.\n\n``` dart\n    Widget myLayoutWidget() {\n      return Stack(\n        \n        // any unpositioned children (ie, our text) will be aligned at the bottom right\n        alignment: Alignment.bottomRight,\n        \n        children: [\n          \n          // first child in the stack is on bottom\n          Image.asset('images/sheep.jpg'), //            \u003c--- image\n          \n          // second child in the stack\n          Padding(\n            padding: EdgeInsets.all(16.0),\n            child: Text(\n              'Baaaaaa', //                              \u003c--- text\n              style: TextStyle(fontSize: 30),\n            ),\n          ),\n          \n        ],\n      );\n    }\n```\n\nDo a full restart rather than a hot reload.\n\n![flutter-layouts-15](//images.ctfassets.net/1es3ne0caaid/6A2CUcVgD6i8eWu6YsKsky/d5a424d1f9fef01febe7aa933ae9fe2b/flutter-layouts-15.png)\n\nSo the take away is that any time you need overlapping widgets, use a Stack to lay them out. (That's not always the case, but you can take it as a general rule.)\n\n### Other layout widgets\n\nWe don't have space to cover all of the layout widgets here, but you have seen the most important ones already. Here are a few others that deserve mentioning:\n\n- [**ListView**](https://docs.flutter.io/flutter/widgets/ListView-class.html)**:** This widget scrolls rows or columns of content that is too big to fit on the screen. We saw this in [our last lesson on widgets](https://pusher.com/tutorials/flutter-widgets).\n- [**GridView**](https://docs.flutter.io/flutter/widgets/GridView-class.html)**:** This widget scrolls content that is laid out in a grid of rows and columns.\n- [**Scaffold**](https://docs.flutter.io/flutter/material/Scaffold-class.html)**:** This is a widget provided by the Material package. It gives an easy way to add an AppBar, FloatingActionButton, Drawer, BottomNavigationBar, SnackBar, and more. Look at your `main.dart` file and you'll see that we are using a Scaffold widget already.\n\n\n## Building complex layouts\n\nSince you already know how to use the simple layout widgets that we talked about above, there really isn't anything hard about building complex layouts. The trick is just to break the complex layout into smaller simple layouts. Rows and columns are your friends here.\n\nAs an example, lets take this image from the [Pusher website](https://pusher.com/) and duplicate its layout:\n\n![flutter-layouts-16](//images.ctfassets.net/1es3ne0caaid/2xAuWSE2MIGKySyku2M68C/ae045c5b1ec0f5d3f40eb73aeeca8b4a/flutter-layouts-16.png)\n\nHow can we convert this into simple rows and columns? First notice that it can be divided into a single column with three rows.\n\n![flutter-layouts-17](//images.ctfassets.net/1es3ne0caaid/33Vv7Iotx6I2w8qSSO8iEc/f9ad9586584126772563b469c7fac615/flutter-layouts-17.png)\n\nThe first and the third rows both have two simple items: an image and a text string.\n\n![flutter-layouts-18](//images.ctfassets.net/1es3ne0caaid/YG0be8K8KIWQeckYGCkii/0d00be9a2997b6443201ee392951b010/flutter-layouts-18.png)\n\nWe now have enough information to build our complex layout widget. Before you look at the code below, try to build it yourself using what we have already learned. Instead of the [Pusher Beams](https://pusher.com/beams) icon, you can use another placeholder icon or image. I’ll use a 💚.\n\nGot it? Need a hint? Here is a rough outline that implements the structure that we saw in the image above:\n\n``` dart\n    Widget myLayoutWidget() {\n      return Column(\n        children: [\n          Row(\n            children: [\n              Icon(Icons.favorite),\n              Text('BEAMS'),\n            ],\n          ),\n          Text('description...'),\n          Row(\n            children: [\n              Text('EXPLORE BEAMS'),\n              Icon(Icons.arrow_forward),\n            ],\n          ),\n        ],\n      );\n    }\n```\n\n![flutter-layouts-19](//images.ctfassets.net/1es3ne0caaid/2NpSuxOFu0aA4yoKk0WYqC/b63a62f685be3ec9cea200a9e976ffdd/flutter-layouts-19.png)\n\nIt needs some work, but you can see that we have the correct structure. Now make it look good by adding padding, alignment, and color. Try to do it yourself before you look at my code below.\n\nReally. Don't look yet. Not until you try it yourself. I'm serious.\n\nOK, ready?\n\n``` dart\n    Widget myLayoutWidget() {\n      \n      // wrap everything in a purple container\n      return Container(\n        margin: EdgeInsets.all(16.0),\n        padding: EdgeInsets.all(16.0),\n        decoration: BoxDecoration(\n          color: Colors.purple[900],\n          border: Border.all(),\n          borderRadius: BorderRadius.all(Radius.circular(3.0)),\n        ),\n        \n        // column of three rows\n        child: Column(\n          \n          // this makes the column height hug its content\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            \n            // first row\n            Row(\n              children: [\n                Padding(\n                  padding: EdgeInsets.only(right: 8.0),\n                  child: Icon(Icons.favorite,\n                    color: Colors.green,\n                  ),\n                ),\n                Text(\n                    'BEAMS',\n                  style: TextStyle(\n                    color: Colors.white,\n                  ),\n                ),\n              ],\n            ),\n            \n            // second row (single item)\n            Padding(\n              padding: EdgeInsets.symmetric(\n                vertical: 16.0,\n                horizontal: 0,\n              ),\n              child: Text('Send programmable push notifications to iOS and Android devices with delivery and open rate tracking built in.',\n                style: TextStyle(\n                  color: Colors.white,\n                ),\n              ),\n            ),\n            \n            // third row\n            Row(\n              children: [\n                Text('EXPLORE BEAMS',\n                  style: TextStyle(\n                    color: Colors.green,\n                  ),\n                ),\n                Padding(\n                  padding: EdgeInsets.only(left: 8.0),\n                  child: Icon(Icons.arrow_forward,\n                    color: Colors.green,\n                  ),\n                ),\n              ],\n            ),\n            \n          ],\n        ),\n      );\n    }\n```\n\nUgh, look at that code! I've made the terrible mountain and valley indentations that I was complaining about [last time](https://stackoverflow.com/q/51232298/3681880). We'll get back to that. Right now take a look at the result:\n\n![flutter-layouts-20](//images.ctfassets.net/1es3ne0caaid/2Tffy1o7PqYOseoAeoEIkW/eb89133e2d5f9b602eb0b6701a27533f/flutter-layouts-20.png)\n\nIt's not perfect, but it's not bad, either. I'm happy with it.\n\n\n## Making complex layouts readable\n\nAll the indentation in the code above makes it hard to read. The solution to this is to break the large code block into smaller chunks. There are a few ways to do this.\n\n### Break sections out as variables\n\nIn the abbreviated code below the rows have been extracted from the bigger widget into variables.\n\n``` dart\n    Widget myLayoutWidget() {\n    \n      Widget firstRow = Row(\n        ...\n      );\n      Widget secondRow = ...\n      Widget thirdRow = ...\n      \n      return Container(\n        ...\n        child: Column(\n          children: [\n            firstRow,\n            secondRow,\n            thirdRow,\n          ],\n        ),\n      );\n    }\n```\n\n### Break sections out as functions\n\nThis is basically the same as above, except this time the Row is a function instead of a variable. This is how we set up the boilerplate code at the beginning of the lesson with the `myLayoutWidget()` function.\n\nHere is what `firstRow()` would look like:\n\n``` dart\n    Widget firstRow() {\n      return Row(\n        children: [\n          Padding(\n            padding: EdgeInsets.only(right: 8.0),\n            child: Icon(Icons.favorite,\n              color: Colors.green,\n            ),\n          ),\n          Text(\n            'BEAMS',\n            style: TextStyle(\n              color: Colors.white,\n            ),\n          ),\n        ],\n      );\n    }\n```\n\nIt is called like this:\n\n``` dart\n        ...\n        child: Column(\n          children: [\n            firstRow(),\n            secondRow(),\n            thirdRow(),\n          ],\n        ...\n```\n\n### Break sections out as widgets\n\nThe `MyApp` widget in the boilerplate code at the beginning of this lesson is an example of creating a custom widget.\n\nHere is the first row extracted as its own widget.\n\n``` dart\n    class FirstRow extends StatelessWidget {\n      // the build method is required when creating a StatelessWidget\n      @override\n      Widget build(BuildContext context) {\n        return Row(\n          children: [\n            Padding(\n              padding: EdgeInsets.only(right: 8.0),\n              child: Icon(Icons.favorite,\n                color: Colors.green,\n              ),\n            ),\n            Text(\n              'BEAMS',\n              style: TextStyle(\n                color: Colors.white,\n              ),\n            ),\n          ],\n        );\n      }\n    }\n```\n\nThe widget is created like this:\n\n``` dart\n        ...\n        child: Column(\n          children: [\n            FirstRow(),\n            SecondRow(),\n            ThirdRow(),\n          ],\n        ...\n```\n\n\u003e **Note:** You may have seen the `new` keyword used in examples around the Internet. As of [Dart 2](https://medium.com/dartlang/announcing-dart-2-80ba01f43b6), though, `new` is no longer required when creating an object.\n\n\n## Tools\n\nFlutter has a few builtin tools for helping you debug layouts. \n\n### Flutter Inspector\n\nIn Android Studio you can find the Flutter Inspector tab on the far right. Here we see our layout as a widget tree.\n\n![flutter-layouts-21](//images.ctfassets.net/1es3ne0caaid/53YO2XQGKcieA08K84ciuI/3eac51630b2dbadf57971bbc91234d49/flutter-layouts-21.png)\n\n### Visual rendering\n\nYou can turn on visual rendering by setting `debugPaintSizeEnabled` to `true` in your `main()` function. \n\nIn your `main.dart` file replace this line\n\n``` dart\n    void main() =\u003e runApp(MyApp());\n```\n\nwith this\n\n``` dart\n    // add this line to your imports\n    import 'package:flutter/rendering.dart';\n    \n    // update your main() function\n    void main() {\n      debugPaintSizeEnabled = true; //         \u003c--- enable visual rendering\n      runApp(MyApp());\n    }\n```\n\nThis outlines your widgets with blue in the emulator. You will need to do a full restart of your app rather than a hot reload to see it take effect.\n\n![flutter-layouts-22](//images.ctfassets.net/1es3ne0caaid/41TuazaA4o4CWAEA0gGy42/095fad7ae752dc1387e35eb9e57a02eb/flutter-layouts-22.png)\n\n\n\u003e **Note:** If you are using Visual Studio Code then you will need to run `[Flutter: Toggle Debug Painting](https://stackoverflow.com/a/49340887/3681880)` from the Command Palette while the app is running in debug mode.\n\n\n## Conclusion\n\nYou’ve made a lot of progress! You not only have a working understanding of widgets, but you can also combine them together to make complex UI layouts.\n\nIn the next lesson we will explore what I consider to be the last of our First Steps with Flutter, that is, making the app respond to user input. After that you will have all the basic tools to start creating your own app. Of course, there will still be a lot to learn, but with a little Google magic and hacker determination, you'll make steady progress.\n\nThe [source code for this lesson](https://github.com/suragch/flutter_layout_examples) is available on GitHub.\n\n\n### Further study\n\n\n- [Building layouts documentation](https://flutter.io/docs/development/ui/layout)\n- [Layout widgets documentation](https://flutter.io/docs/development/ui/widgets/layout)\n\n[First steps with Flutter - Part 3: Responding to user input  \u003e\u003e](https://pusher.com/tutorials/flutter-user-input)","metaTitle":"First steps with Flutter: Building layouts","metaDescription":"This introductory-level tutorial covers the basic of UI layouts with Flutter. You will work through basic examples of common layout and styling features, as well as becoming familiar with Flutter tools."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2dSt19gGyAOC8wEKyAkAgy","type":"Entry","createdAt":"2018-12-07T18:47:38.965Z","updatedAt":"2018-12-07T18:47:38.965Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Updating content in realtime without confusing your users","url":"realtime-content-good-ux","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro-articles/updating-contents-realtime","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Od9rZziIoMG4yaQ4EAeok","type":"Entry","createdAt":"2018-02-13T11:31:10.435Z","updatedAt":"2018-02-26T12:31:10.730Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":16,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live UX","url":"live-ux","type":"use case"}}],"reviewDate":"2018-12-07","description":"This tutorial looks at some of the potential downsides of updating content in realtime, and presents solutions. You will build a simple Android app, and experiment with ways to improve the user experience of realtime functionality.","prerequisite":"You will need Android Studio installed on your machine, and basic knowledge of Android development.","content":"## Introduction\n\nIn this tutorial, we will look at the possible ways of confusing your users when providing realtime content and also the proper ways you can achieve it using two use cases.\n\nRealtime functionality involves making content available to users without them having to manually refresh or request an update.  This functionality characterizes most modern apps.\n\nHowever, there is a pit you can easily fall into in the process of implementing these realtime functionalities and that is confusing your users in the process. \n\n## Prerequisites\n\nTo follow along with this tutorial, you should have the following:\n\n- Android Studio installed on your machine. Download the latest stable version [here](https://developer.android.com/studio/index.html).\n- A Pusher application. Create one [here](https://pusher.com).\n- Basic knowledge of Android development and an ability to navigate through the Android Studio IDE.\n- Basic knowledge of the Kotlin programming language. Visit the [official docs](https://kotlinlang.org/docs/reference/).\n\n\n## A common mistake\n\nMaking your application work and update content in realtime is invaluable. However, lets see a simple mistake that you need to watch out for when building realtime applications.\n\nBelow, we have a screen recording of a sample application:\n\n![realtime-content-demo-1](//images.ctfassets.net/1es3ne0caaid/gLJc7IvtKw2KaG4AIiQEE/36f1e43662bb8312fccc5eb76f9d2646/realtime-content-demo-1.gif)\n\nIn the GIF above, when a new content comes in, irrespective of where the user was, they are taken back to the top of the page to view the contents right away. \n\nThis is a bad experience and it can be annoying to the user especially if there are hundreds of content and the user has gone all the way down. \n\nAnother mistake you can make, especially in a timeline based application, is not specifying where the new data added to the application starts. If you can, temporarily give the new content a slightly different background color that would hint the user of the application that the new content has not been consumed. \n\nUsers don’t like being interrupted, so silent updates to the content is welcome as long as there is a visual cue. If you have to alert users of new content, use a non-invasive pop-up without surprising the user as seen below:\n\n![realtime-content-twitter](//images.ctfassets.net/1es3ne0caaid/1XVv9ZiICgA4a2840gCyEm/088ec543088987bf0cca70609c7702df/realtime-content-twitter.jpeg)\n\nHaving noted the bad practices here, let us now build the right way.\n\n## Doing it the right way\n\nThere are many ways you can potentially introduce new content to your application without annoying your users. I will talk about two in this article.\n\nThe first one is by giving the user the option to show the new contents and not making the contents refresh without their knowledge. This model is used by Twitter to add new content to the timeline. The user gets a notification on the screen telling them that new content is available. \n\nThe second one is keeping new content at the bottom and is mostly used by chat clients like WhatsApp to display new content.\n\nLet’s set up sample applications to demonstrate these methods.\n\n\n## Setting up Pusher Channels\n\nTo get started, we need a Pusher Channels app to use in our sample Android application. Log in to your [Pusher dashboard](https://dashboard.pusher.com). If you don’t have an account, you can easily create one. Your dashboard should look like this:\n\n![realtime-content-pusher](//images.ctfassets.net/1es3ne0caaid/2UHAylgTG0Mq0euykqUA40/057c4db1c57325b88f844c167978018b/realtime-content-pusher.png)\n\nCreate a new channel app. You can easily do this by clicking the big **Create new Channels app** card at the bottom right. After you create a new app, you will be provided with the keys. Keep them around as you will need them later on.\n\n\n## Model one - the Twitter model\n\nOpen the Android studio and create a new application. Enter the name of your application, say **TwitterModel** and the package name. Make sure the **Enable Kotlin Support** check box is checked. Choose the minimum SDK, click **Next**, choose an **Empty Activity** template, stick with the `MainActivity` naming and click **finish**. After this, you wait for some seconds for Android Studio to prepare your project for you.\n\nNext, we will add the necessary dependencies in the app-module `build.gradle` file. Add them like so:\n\n``` gradle\n    // File: ./app/build.gradle\n    dependencies {\n        // [...]\n        \n        implementation 'com.pusher:pusher-java-client:1.8.0'\n        implementation 'com.android.support:recyclerview-v7:28.0.0'\n    }\n```\n\nAbove, we added the Pusher client dependency and the `recyclerview` support dependency. Sync your Gradle files so that it can be downloaded and made available for use within the application.\n\nNext, let’s update our layout. Remember that a layout was generated for us, named `activity_main.xml` . This is the layout for the `MainActivity` class. Paste this snippet to the layout file:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/layout/activity_main.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout \n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\"\u003e\n    \n        \u003cTextView\n            app:layout_constraintTop_toTopOf=\"parent\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"New contents available\"\n            android:textSize=\"16sp\"\n            android:visibility=\"gone\"\n            android:padding=\"10dp\"\n            android:background=\"@android:color/darker_gray\"\n            android:textColor=\"@android:color/white\"\n            android:gravity=\"center\"\n            android:id=\"@+id/textViewNewContents\"\n            /\u003e\n    \n        \u003candroid.support.v7.widget.RecyclerView\n            android:layout_marginTop=\"10dp\"\n            android:id=\"@+id/recyclerViewContents\"\n            app:layout_constraintTop_toBottomOf=\"@id/textViewNewContents\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"/\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThe layout above contains a `recyclerview` to show the contents in a list and a `textview` to notify the user when there is new content. By default, the `textview` is hidden and only pops up when there is a new content from Pusher.\n\nNext, we will create an adapter for our `recyclerview`. Create a class called `RecyclerListAdapter` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/RecyclerListAdapter.kt\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    \n    class RecyclerListAdapter: RecyclerView.Adapter\u003cRecyclerListAdapter.ViewHolder\u003e() {\n    \n      private val contentList: ArrayList\u003cString\u003e = ArrayList()\n    \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        return ViewHolder(\n          LayoutInflater.from(parent.context)\n            .inflate(android.R.layout.simple_list_item_1, parent, false)\n        )\n      }\n    \n      override fun onBindViewHolder(holder: ViewHolder, position: Int) = holder.bind(\n        contentList.get(position)\n      )\n    \n      override fun getItemCount(): Int = contentList.size\n    \n      fun addItem(item:String){\n        contentList.add(0,item)\n        notifyDataSetChanged()\n      }\n    \n     inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val userName: TextView = itemView.findViewById(android.R.id.text1)\n        \n        fun bind(item: String) = with(itemView) {\n          userName.text = item\n        }\n      }\n    }\n```\n\nThis class controls the `recyclerview`. It manages how each list item looks using the `onCreateViewHolder` method, it manages the size using the `getItemCount` method, it adds item to each list using the `onBindViewHolder` method and we have a custom `addItem` method that makes sure the new items are added to the top of the list.\n\nNext, we will complete the rest of the logic in the `MainActivity.kt` file. Paste this into the file:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/MainActivity.kt\n    import android.support.v7.app.AppCompatActivity\n    import android.os.Bundle\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import android.view.View\n    import com.pusher.client.channel.SubscriptionEventListener\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_main.*\n    import org.json.JSONObject\n    \n    class MainActivity : AppCompatActivity() {\n      private val newList = ArrayList\u003cString\u003e()\n      private val recyclerListAdapter = RecyclerListAdapter()\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        setContentView(R.layout.activity_main)\n        setupRecyclerView()\n        setupPusher()\n        setupClickListeners()\n      }\n    }\n```\n\nIn this class, we have a list variable and the `recyclerview` adapter initialized. We then call our three main methods in the `onCreate` method. Let us see how these methods look like.\n\nFirst, we have the `setupRecyclerView` method where we initialize our `recyclerview` and assign the adapter to it. Copy and paste the following into the class:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/MainActivity.kt\n    private fun setupRecyclerView() {\n    \n      with(recyclerViewContents){\n        layoutManager = LinearLayoutManager(this@MainActivity)\n        adapter = recyclerListAdapter\n      }\n      \n      recyclerListAdapter.addItem(\"Hello World\")\n      recyclerListAdapter.addItem(\"New article alert!\")\n    }\n```\n\nAs seen above, we added some dummy data to the list. \n\nNext, we have the `setupPusher` method. Add the method to your class:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/MainActivity.kt\n    private fun setupPusher() {\n      val options = PusherOptions()\n      options.setCluster(\"PUSHER_CLUSTER\")\n      val pusher = Pusher(\"PUSHER_KEY\", options)\n    \n      val channel = pusher.subscribe(\"my-channel\")\n    \n      channel.bind(\"my-event\") { channelName, eventName, data -\u003e\n        Log.d(\"TAG\",data)\n        runOnUiThread {\n          textViewNewContents.visibility = View.VISIBLE\n          newList.add(JSONObject(data).getString(\"message\"))\n        }\n      } \n      pusher.connect()\n    }\n```\n\nThis is the method where we connect to our Pusher Channels instance. In this method, when a new content shows up, instead of adding it to the adapter’s list, we add it to a new list and notify the user of the presence of new content.\n\n\n\u003e Replace the PUSHER placeholders with actual keys from your dashboard.\n\nThe last method is the `setupClickListeners` method. Add the method to your class like so:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/MainActivity.kt\n    private fun setupClickListeners() {\n      textViewNewContents.setOnClickListener {\n        for (item in newList){\n          recyclerListAdapter.addItem(item)\n        }\n        \n        textViewNewContents.visibility = View.GONE\n      }\n    }\n```\n\nThis method adds a click listener to the `textview`. When it is clicked, we add each new item to the top of the list using the custom adapter method we created - `addItem`.\n\nSince this app requires the use of internet connection, we need to request for the internet permission. Open your `AndroidManifest.xml` file and add this permission:\n\n``` xml\n    \u003c!-- File: ./app/src/main/AndroidManifest.xml --\u003e\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\nWith this, we are done building our app. You can now run your app! To send a sample message, open the debug console of your Pusher Channels app and send an event like so:\n\n![realtime-content-pusher-event](//images.ctfassets.net/1es3ne0caaid/2oJBI3MxdWAKiwciqIQMKm/fa9da7f9aa651426fcd6b3cc13a04bd7/realtime-content-pusher-event.png)\n\nHere is the raw data to send to the channel `my-channel` and the event `my-event`:\n\n``` \n    {\n      \"message\": \"Hi there\"\n    }\n```\n\nYour app should now work like this:\n\n![realtime-content-demo-2](//images.ctfassets.net/1es3ne0caaid/5dzDrdoa6W8ACGYAge8AY8/491bced3596332db970ac77d75ef0895/realtime-content-demo-2.gif)\n\n\n## Model two - the WhatsApp model\n\nIn the second model, the new items will be shown at the bottom of the screen as seen on most major chat platforms. One of the popular platforms to use this model is WhatsApp. \n\nSometimes, you might want to read previous messages in your chat and when new messages come in, bringing you back to the new messages when there is one is just a bad way to build an application. Instead, you can simply notify the user that there are new messages and if they please, they can go to them immediately. Let’s build a sample application to show this in action.\n\nCreate a new Android project like we did earlier but this time call it **WhatsAppModel**. We will still use the same dependencies as we did in the first sample. \n\nAdd these to your app-module `build.gradle` file:\n\n``` gradle\n    // File: ./app/build.gradle\n    dependencies {\n        // [...]\n    \n        implementation 'com.pusher:pusher-java-client:1.8.0'\n        implementation 'com.android.support:recyclerview-v7:28.0.0'\n    }\n```\n\nOpen the `activity_main.xml` generated for you replace the contents with the following:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/layout/activity_main.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cFrameLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\"\u003e\n    \n        \u003candroid.support.v7.widget.RecyclerView\n            android:id=\"@+id/recyclerViewContents\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"/\u003e\n    \n        \u003cTextView\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:padding=\"10dp\"\n            android:textSize=\"16sp\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            android:layout_margin=\"16dp\"\n            android:background=\"@drawable/rounded_corner\"\n            android:textColor=\"@android:color/black\"\n            android:visibility=\"gone\"\n            android:layout_gravity=\"right|bottom\"\n            android:id=\"@+id/textViewNewContents\" /\u003e\n    \n    \u003c/FrameLayout\u003e\n```\n\nHere, we have a `recyclerview` to show the contents and a `textview` to notify the user of the number of new messages available. The`textview` uses a special drawable as background to distinguish it easily. \n\nCreate a new drawable named `rounded_corner` and paste this:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/drawable/rounded_corner.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cshape xmlns:android=\"http://schemas.android.com/apk/res/android\" \u003e\n        \u003cstroke\n            android:width=\"1dp\" /\u003e\n    \n        \u003csolid android:color=\"#ffffff\" /\u003e\n    \n        \u003cpadding\n            android:left=\"1dp\"\n            android:right=\"1dp\"\n            android:bottom=\"1dp\"\n            android:top=\"1dp\" /\u003e\n    \n        \u003ccorners android:radius=\"5dp\" /\u003e\n    \u003c/shape\u003e\n```\n\nNext, let us create an adapter for the `recyclerview`. Create a new class called `RecyclerListAdapter` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/RecyclerListAdapter.kt\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    \n    class RecyclerListAdapter(private val listener:OnLastPositionReached): RecyclerView.Adapter\u003cRecyclerListAdapter.ViewHolder\u003e() {\n    \n      private val contentList: ArrayList\u003cString\u003e = ArrayList()\n    \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        return ViewHolder(\n           LayoutInflater\n             .from(parent.context)\n             .inflate(android.R.layout.simple_list_item_1, parent, false)\n        )\n      }\n    \n      override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        holder.bind(contentList[position])\n        \n        if (position == contentList.size-1){\n          listener.lastPositionReached()\n        } else {\n          listener.otherPosition()\n        }\n      }\n    \n      override fun getItemCount(): Int = contentList.size\n    \n      fun addItem(item:String) {\n        contentList.add(item)\n        notifyDataSetChanged()\n      }\n    \n      inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val userName: TextView = itemView.findViewById(android.R.id.text1)\n    \n        fun bind(item: String) = with(itemView) {\n          userName.text = item\n        }\n      }\n    \n      interface OnLastPositionReached {\n        fun lastPositionReached()\n        fun otherPosition()\n      }\n    }\n```\n\nThis is very similar to the adapter we created earlier. The difference here is that the new items are added to the bottom and we have an interface to tell us when the `recyclerview` is on the last item and when it is not.\n\nFinally, open the `MainActivity` and set it up like so:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/MainActivity.kt\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.view.View\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_main.*\n    import org.json.JSONObject\n    \n    class MainActivity : AppCompatActivity(), RecyclerListAdapter.OnLastPositionReached {\n    \n      private var count = 0\n      private val recyclerListAdapter = RecyclerListAdapter(this)\n    \n      private var lastPosition = false\n      override fun otherPosition() {\n        lastPosition = false\n      }\n    \n      override fun lastPositionReached() {\n        lastPosition = true\n        textViewNewContents.visibility = View.GONE\n        count = 0\n      }\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        setupClickListeners()\n        setupRecyclerView()\n        setupPusher()\n      }\n    }\n```\n\nThe `MainActivity` class implements the interface from the adapter to tell us when the `recyclerview` is at the last position or not. We use this to update the `lastPosition` boolean variable in our class. Let us add the other methods called into the class.\n\nThe `setupClickListeners` method is setup like so:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/MainActivity.kt\n    private fun setupClickListeners() {\n      textViewNewContents.setOnClickListener {\n        recyclerViewContents.scrollToPosition(recyclerListAdapter.itemCount-1)\n        textViewNewContents.visibility = View.GONE\n        count = 0\n      }\n    }\n```\n\nWhen the `textview` that shows the count of the new messages is clicked, it scrolls down immediately to recent messages, set the count to 0 and hides the `textview`.\n\nThe next method is the `setupRecyclerView` method. Set it up like this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/MainActivity.kt\n    private fun setupRecyclerView() {\n      with(recyclerViewContents){\n        layoutManager = LinearLayoutManager(this@MainActivity)\n        adapter = recyclerListAdapter\n      }\n     \n      recyclerListAdapter.addItem(\"Hello World\")\n      recyclerListAdapter.addItem(\"New article alert!\")\n      recyclerListAdapter.addItem(\"Pusher is actually awesome\")\n      recyclerListAdapter.addItem(\"Realtime functionality freely provided \")\n      recyclerListAdapter.addItem(\"Checkout pusher.com/tutorials\")\n      recyclerListAdapter.addItem(\"You can also checkout blog.pusher.com\")\n      recyclerListAdapter.addItem(\"Learn how to update contents properly \")\n      recyclerListAdapter.addItem(\"Hello World\")\n      recyclerListAdapter.addItem(\"New article alert!\")\n      recyclerListAdapter.addItem(\"Pusher is actually awesome\")\n      recyclerListAdapter.addItem(\"Realtime functionality freely provided \")\n      recyclerListAdapter.addItem(\"Checkout pusher.com/tutorials\")\n      recyclerListAdapter.addItem(\"You can also checkout blog.pusher.com\")\n      recyclerListAdapter.addItem(\"Learn how to update contents properly \")\n    }\n```\n\nThis method setups the recyclerview with a layout manager and an adapter. We also added items to the list. \n\nThe next method is the `setupPusher` method. Set it up like so:\n\n``` kotlin\n    private fun setupPusher() {\n      val options = PusherOptions()\n      options.setCluster(\"PUSHER_CLUSTER\")\n    \n      val pusher = Pusher(\"PUSHER_KEY\", options)\n      val channel = pusher.subscribe(\"my-channel\")\n    \n      channel.bind(\"my-event\") { channelName, eventName, data -\u003e\n        runOnUiThread {  \n          if (!lastPosition){\n            count ++\n            textViewNewContents.text = count.toString()\n            textViewNewContents.visibility = View.VISIBLE\n            recyclerListAdapter.addItem(JSONObject(data).getString(\"message\"))    \n          } else {\n            recyclerListAdapter.addItem(JSONObject(data).getString(\"message\"))\n            recyclerViewContents.scrollToPosition(recyclerListAdapter.itemCount-1)\n          } \n        }\n      }\n      \n      pusher.connect()\n    }\n```\nThis is the method where we connect to our Pusher Channels instance. When a new message is gotten, we use the `lastPosition` variable to know if the user is already at the end of the `recyclerview`, then we just append the new messages and refresh the list. If the user is not at the last position, we add a `textview` notification to show that there is new content.\n\n\n\u003e Replace the PUSHER placeholders with actual keys from your dashboard.\n\nAdd the internet permission in the `AndroidManifest.xml` file like so:\n\n``` xml\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\nRun the application and then go ahead to your Pusher app debug console and send new messages.\n\nHere is the raw data to send to the channel `my-channel` and the event `my-event`:\n\n```\n    {\n      \"message\": \"Hi there\"\n    }\n```\n\nYour app should now work like this:\n\n![realtime-content-demo-3](//images.ctfassets.net/1es3ne0caaid/1jFK7p9Z3Qks4qYGusKI4Q/67a00cab8cf0f10a57cf7b0720063bec/realtime-content-demo-3.gif)\n\n\n## Conclusion\n\nIn this tutorial, we have learned about updating contents the right way. We looked at a possible bad UX use case where a user can get confused. We also looked at two good UX models you can easily adapt.\n\nFeel free to play around the GitHub repo [here](https://github.com/neoighodaro-articles/updating-contents-realtime).","metaTitle":"Updating content in realtime without confusing your users","metaDescription":"This tutorial looks at some of the potential downsides of updating content in realtime, and presents solutions. You will build a simple Android app, and experiment with ways to improve the user experience of realtime functionality."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39sm03YEbuOmqucCw6Qk42","type":"Entry","createdAt":"2018-12-04T20:59:40.666Z","updatedAt":"2020-06-19T13:26:52.630Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building a social app with online presence using Ionic","url":"social-online-presence-ionic","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/ionic-twitter-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-12-04","description":"This tutorial will show you how to create a simple social feed for Android and iOS using Ionic. The app features a Node backend, and online presence indicators powered by Pusher.","prerequisite":"You will need Node and Ionic installed on your machine. A basic knowledge of modern JavaScript development will be helpful.","content":"In this tutorial, we are going to explore how to build a simple social application using Ionic and Pusher. [Ionic](https://ionicframework.com) will be used to create the mobile demo and [Pusher](http://www.pusher.com) Channels to add online functionality. At the end of this tutorial, you will have built an application that looks like this:\n\n![ionic-presence-demo-1](//images.ctfassets.net/1es3ne0caaid/4OKTHp8v4IAu6Ywo8uAigy/a899870614f492408bff0e0bf4d60d55/ionic-presence-demo-1.png)\n\nA while back on Twitter, the official Twitter handle teased their followers with a sample of an interesting idea they were exploring. They were exploring the possibility of letting you know who on your Twitter feed is online. This is something very different and it got a lot of mixed reactions because we know Twitter for for likes and retweets but not “online five minutes ago”. In other messaging applications we use, it is important to know if who you’re interacting with is online. As a developer, you are likely curious about how this all works.\n\n## Requirements\n\nTo be follow through this article properly, you’ll need the following:\n\n- Basic knowledge of JavaScript\n- [Ionic](https://ionicframework.com) installed on your machine, you can read up on how to do that [here](https://ionicframework.com/docs/intro/installation/)\n- [Node.js](https://nodejs.org) installed on your machine\n- [NPM](https://npmjs.org) installed on your machine\n\n\n## Getting started\n\nTo get started, create a new ionic application using the command:\n\n```\n    ionic start twi-clone blank\n```\n\nThis creates a starter ionic project in a folder titled `twi-clone`. To see the demo application at work, go to your terminal and run the command:\n\n```\n    cd twi-clone\n    ionic serve\n```\n\nThis serves the Ionic application. Navigate your browser to  `http://locahost:8100` and you should get a view that looks like this:\n\n![ionic-default](//images.ctfassets.net/1es3ne0caaid/qQv7V1UOEou4OOS6y8GIg/8e28ae0fc41a2af1a00a650fa41cec16/ionic-default.png)\n\n\n## Building the backend server\n\nThe backend server of our application will be responsible for doing the following:\n\n- Sharing users’ posts\n- Authenticating new users on the presence channel\n\nCreate a `/server` folder in your project:\n\n```\n    mkdir server\n    cd server\n```\n\nInstall the Node modules that we will need to power the backend server:\n\n```\n    npm install express body-parser pusher\n```\n\n- `express` will power the web server\n- `body-parser` to handle incoming requests\n- `pusher` to add realtime functionality and online presence\n\nAfterwards, create a `server.js` file in the `server/` directory:\n\n```\n    touch server.js\n```\n\nEdit the `server.js` file to look as follows:\n\n``` javascript\n    // server/server.js\n    \n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const Pusher = require('pusher');\n    \n    // create a express application\n    const app = express();\n    \n    // initialize pusher\n    let pusher = new Pusher({\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    // to Allow CORS\n    app.use((req, res, next) =\u003e {\n        res.header('Access-Control-Allow-Origin', '*');\n        res.header(\n            'Access-Control-Allow-Headers',\n            'Origin, X-Requested-With, Content-Type, Accept'\n        );\n        next();\n    });\n    \n    [...]\n```\n\nWe include the necessary JavaScript libraries and then create a new Pusher object using your Pusher application credentials.\n\n\n\u003e To obtain your Pusher credentials, create a new account [here](https://dashboard.pusher.com/accounts/sign_up). Afterwards, you’ll be redirected to your [Pusher dashboard](https://dashboard.pusher.com). Go ahead and create a new project, obtain your `PUSHER_APP_ID`, `PUSHER_APP_KEY`, `PUSHER_APP_SECRET`, `PUSHER_APP_CLUSTER` and add them to your `server.js` file.\n\nAfterwards, we specify some application middleware to handle incoming requests. The backend server will have two routes:\n\n- `/pusher/auth` - will be used to authenticate users joining the presence channel\n- `/create-post` - will be used when a new post is created.\n\nWith Pusher, when a new client tries to join a presence channel, a `POST` request is first made to authenticate the new client. In this case, a random string is created to identify the client and this makes up the `presenceData` object. The `presenceData` , `channel` and `socketId` are then passed to Pusher to authenticate the client.\n\nThe `/create-post` route accepts the incoming data and then triggers a `new-post` event to the `presence-channel`.\n\n\n\u003e In later parts of the article, we will see how the channel is created in our Ionic application\n\nAdd the code below to your `server/server.js` file:\n\n``` javascript\n    // server/server.js\n    [...]\n    \n    app.post('/pusher/auth', (req, res) =\u003e {\n        let socketId = req.body.socket_id;\n        let channel = req.body.channel_name;\n        random_string = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n        let presenceData = {\n            user_id: random_string,\n            user_info: {\n                username: '@' + random_string,\n            }\n        };\n        let auth = pusher.authenticate(socketId, channel, presenceData);\n        res.send(auth);\n    });\n    \n    app.post('/create-post', (req, res) =\u003e {\n        // trigger a new post event via pusher\n        pusher.trigger('presence-channel', 'new-post', {\n            'username': req.body.username,\n            'content': req.body.content\n        })\n        res.json({ 'status': 200 });\n    });\n    \n    let port = 3128;\n    app.listen(port);\n    console.log('listening');\n```\n\nNow that the backend server is created, you can run it by entering the command:\n\n```\n    node server.js\n```\n\nNow, let’s look at how to build the rest of the application.\n\n\n## Creating the interface\n\n![ionic-presence-interface](//images.ctfassets.net/1es3ne0caaid/4EICjygAsgii0kAm00Gwuy/9a97402d9d40017edb4e56f9979cb9df/ionic-presence-interface.png)\n\nThe starter application created a default homepage which we will then update to fit our particular use case. Update your `home.html` file to look like this: \n\n``` html\n    \u003c!-- src/pages/home/home.html --\u003e\n    \n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title style=\"text-align: center\"\u003e\n          Let's Go Social\n        \u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \n    \u003cion-content padding\u003e\n      \u003cform (ngSubmit)=\"submitPost()\"\u003e\n        \u003cdiv class=\"compose-post-area\"\u003e\n          \u003cion-textarea class=\"post-compose\" placeholder=\"Post something....\" [(ngModel)]=\"post.content\" name=\"content\"\u003e\u003c/ion-textarea\u003e\n          \u003cbutton ion-button round class=\"tweet-post\" type=\"submit\"\u003ePOST\u003c/button\u003e\n        \u003c/div\u003e\n      \u003c/form\u003e\n      \u003cdiv\u003e\n        \u003cion-card\u003e\n          \u003cion-item\u003e\n            \u003ch3\u003eHi \u003ci\u003e@{{ current_user }}\u003c/i\u003e \u003c/h3\u003e\n            \u003ch3\u003eFriends Online: {{ get_users_online() }}\u003c/h3\u003e\n          \u003c/ion-item\u003e\n        \u003c/ion-card\u003e\n    \n        \u003cdiv *ngFor=\"let post of post_list\"\u003e\n          \u003cion-card\u003e\n            \u003cion-item\u003e\n              \u003cion-avatar item-start\u003e\n                \u003cimg src=\"https://api.adorable.io/avatars/100/avatar.png\" alt=\"\"\u003e\n              \u003c/ion-avatar\u003e\n              \u003cp\u003e@{{ post.username }} \u003ci\u003e{{ isOnline(post.username) }} \u003c/i\u003e\u003c/p\u003e\n            \u003c/ion-item\u003e\n    \n            \u003cion-card-content\u003e\n              \u003cp\u003e{{ post.content }}\u003c/p\u003e\n            \u003c/ion-card-content\u003e\n    \n            \u003cion-row\u003e\n              \u003cion-col\u003e\n                \u003cbutton ion-button ion-start clear small\u003e\n                  \u003cion-icon name=\"repeat\"\u003e\u003c/ion-icon\u003e\n                  \u003cdiv\u003e\u0026nbsp;932 reposts\u003c/div\u003e\n                \u003c/button\u003e\n              \u003c/ion-col\u003e\n              \u003cion-col\u003e\n                \u003cbutton ion-button ion-start clear small color=\"danger\"\u003e\n                  \u003cion-icon name=\"heart\"\u003e\u003c/ion-icon\u003e\n                  \u003cdiv\u003e\u0026nbsp;12k likes\u003c/div\u003e\n                \u003c/button\u003e\n              \u003c/ion-col\u003e\n            \u003c/ion-row\u003e\n          \u003c/ion-card\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/ion-content\u003e\n```\n\nThe page also has the following styling:\n\n``` scss\n    # src/page/home/home.scss\n    \n    .compose-post-area{\n        display: flex;\n        align-items: center;\n    }\n    \n    ion-content{\n        background-color: #FAFAFA;\n    }\n```\n\nWe have seen the interface of the application. To add any functionality to our application, we need to edit the `home.ts` file to look like this:\n\n``` javascript\n    // src/app/pages/home/home.ts\n    \n    import { Component } from '@angular/core';\n    import { NavController, AlertController } from 'ionic-angular';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html'\n    })\n    export class HomePage {\n      // this will represent a new post by a user\n      post: any = {};\n      // this will represent your default pusher presence channel\n      presence_channel: any;\n      // this will represent the username of the current user\n      current_user;\n      // this will online a list of users online\n      users_online = {};\n      // list of default posts\n      post_list = [\n        {\n          'username': 'og',\n          'content': 'Making money was the plan oooo'\n        },\n        {\n          'username': 'daddywon',\n          'content': 'You can catch me on the express'\n        }\n      ];\n      \n      constructor(public navCtrl: NavController) {\n        [...]\n      }\n     \n    [...]\n    \n    }\n```\n\nWe can see that the home page component contains the variables that were referenced in the homepage template.\n\n### Creating the Pusher service\n\nTo know the number of friends online and when someone who shares a post is online, let’s make use of Presence Channels by Pusher. To use Pusher in our Ionic application, we need to install the library using the command:\n\n```\n    npm install pusher-js\n```\n\nNow, let’s create a simple Pusher provider. To do this, head over to your terminal and run the command:\n\n```\n    ionic generate provider pusher-service\n```\n\nNow, a `pusher-service` provider has been created. In the `pusher-service.ts` create a new Pusher object in the constructor by specifying the `PUSHER_APP_KEY`, `PUSHER_APP_CLUSTER` and the `authEndpoint` created on our backend server earlier in the article. \n\nAfterwards, subscribe to the `presence-channel` . The `init()` function is then responsible for returning the created presence channel which is to be used in our `home.ts` file. Update your `pusher-service.ts` to look like this:\n\n``` javascript\n    // src/providers/pusher-service/pusher-service.ts\n    \n    import { HttpClient } from '@angular/common/http';\n    import { Injectable } from '@angular/core';\n    import Pusher from 'pusher-js';\n    \n    @Injectable()\n    export class PusherServiceProvider {\n      presenceChannel;\n    \n      constructor(public http: HttpClient) {\n        let pusher = new Pusher('PUSHER_APP_KEY', {\n          authEndpoint: 'http://localhost:3128/pusher/auth',\n          cluster: 'PUSHER_APP_CLUSTER'\n        });\n    \n        this.presenceChannel = pusher.subscribe('presence-channel');\n      }\n    \n      public init() {\n        return this.presenceChannel;\n      }\n    }\n```\n\nUpdate your `app.module.ts` to ensure that the Pusher provider and the HttpClientModule are loaded:\n\n``` javascript\n    // src/app/app.module.ts\n    \n    import { BrowserModule } from '@angular/platform-browser';\n    import { ErrorHandler, NgModule } from '@angular/core';\n    import { IonicApp, IonicErrorHandler, IonicModule } from 'ionic-angular';\n    import { SplashScreen } from '@ionic-native/splash-screen';\n    import { StatusBar } from '@ionic-native/status-bar';\n    \n    import { MyApp } from './app.component';\n    import { HomePage } from '../pages/home/home';\n    import { PusherServiceProvider } from '../providers/pusher-service/pusher-service';\n    import { HttpClientModule } from '@angular/common/http';\n    \n    @NgModule({\n      declarations: [\n        MyApp,\n        HomePage\n      ],\n      imports: [\n        BrowserModule,\n        HttpClientModule,\n        IonicModule.forRoot(MyApp)\n      ],\n      bootstrap: [IonicApp],\n      entryComponents: [\n        MyApp,\n        HomePage\n      ],\n      providers: [\n        StatusBar,\n        SplashScreen,\n        { provide: ErrorHandler, useClass: IonicErrorHandler },\n        PusherServiceProvider\n      ]\n    })\n    export class AppModule { }\n```\n\nNow, let’s go back to the home page component. \n\n## Adding realtime functionality and online presence with Pusher\n\nWe are going to update the `home.ts` file to allow users know when other users are online. We first get the Pusher Channel using the Pusher provider we created earlier and then listen for the `pusher:subscription_succeeded` event. Once the client has successfully subscribed to the `presence-channel`, a `members` object is returned that contains information about the people subscribed to the `presence-channel`.\n\nWe also listen for a `new-post` event on the `presence-channel`. When a `new-post` event is triggered, the `post_list` is then updated to contain the new post. At this point, your `home.ts` should look like this:\n\n``` javascript\n    // src/pages/home/home.ts\n    import { Component } from '@angular/core';\n    import { NavController, AlertController } from 'ionic-angular';\n    import { PusherServiceProvider } from '../../providers/pusher-service/pusher-service';\n    import { HttpClient } from '@angular/common/http';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html'\n    })\n    export class HomePage {\n      // this will represent a new post by a user\n      post: any = {};\n      // this will represent your default pusher presence channel\n      presence_channel: any;\n      // this will represent the username of the current user\n      current_user;\n      // this will online a list of users online\n      users_online = {\n      };\n      // list of default posts\n      post_list = [\n        {\n          'username': 'og',\n          'content': 'Making money was the plan oooo'\n        },\n        {\n          'username': 'daddywon',\n          'content': 'You can catch me on the express'\n        }\n      ];\n    \n      constructor(public navCtrl: NavController, private pusher: PusherServiceProvider, private http: HttpClient, public alertCtrl: AlertController) {\n        let self = this\n        this.presence_channel = this.pusher.init();\n        // update the list of users online\n        this.presence_channel.bind('pusher:subscription_succeeded', function (members) {\n          console.log(members);\n          self.users_online = members.members;\n          self.current_user = members.myID;\n        })\n    \n        this.presence_channel.bind('new-post', function (body) {\n          self.post_list.unshift(body);\n        })\n      }\n    \n      [...]\n    }\n```\n\nFinally, we have three other methods in the component:\n\n- `get_users_online()` which returns the number of users that are currently online\n- `isOnline()` that checks if a particular user is currently online\n- `submitPost()` that submits a post by a user\n\nAdd the methods to your `home.ts` file:\n\n``` javascript\n    // src/pages/home/home.ts\n    \n      [...]\n      \n      get_users_online() {\n        return Object.keys(this.users_online).length - 1;\n      }\n      \n      isOnline(username: string) {\n        if (username in this.users_online) {\n          return 'online'\n        } else {\n          return 'offline'\n        }\n      }\n    \n      submitPost() {\n        let self = this;\n        // make a post request to the server\n        let body = {\n          'username': this.current_user,\n          'content': this.post.content\n        }\n    \n        const alert = this.alertCtrl.create({\n          title: 'Post Shared!',\n          subTitle: `Users online to see your post: ${self.get_users_online()}`,\n          buttons: ['OK']\n        });\n    \n        // submit post to the backend server to trigger pusher event\n        this.http.post('http://localhost:3128/create-post', body).subscribe(() =\u003e {\n          alert.present();\n        });\n      }\n    }\n```\n\nRecall in the `home.html` interface, we had the following form:\n\n``` html\n    \u003cform (ngSubmit)=\"submitPost()\"\u003e\n      \u003cdiv class=\"compose-post-area\"\u003e\n        \u003cion-textarea class=\"post-compose\" placeholder=\"Post something....\" [(ngModel)]=\"post.content\" name=\"content\"\u003e\u003c/ion-textarea\u003e\n        \u003cbutton ion-button round class=\"tweet-post\" type=\"submit\"\u003ePOST\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/form\u003e\n```\n\nWhen the `POST` button is clicked, the `submitPost()` function is called and the post content and username of the current user are sent to the `/create-post` of the backend server which then triggers the `new-post` event on the `presence-channel` and the `post_list` is updated accordingly.\n\nTo see it all at work, serve your Ionic application using the command:\n\n```\n    npm start  # or ionic serve\n```\n\n\u003e Ensure your backend server is on.\n\nNavigate on your browser to `http://localhost:8100` and you should get an experience that looks like this:\n\n![ionic-presence-demo-2](//images.ctfassets.net/1es3ne0caaid/1x0M3f2oWAw6qo0KI28q28/178a215890d22676babe4fad7b610651/ionic-presence-demo-2.gif)\n\n## Testing your Ionic application on a mobile device\n\nIf you’re building with Ionic, you generally don’t intend to have your application on your browser. Rather, you’d want to have it running on mobile devices. Before you do that, you should serve the backend of your application on a tunnel using [ngrok](https://ngrok.io).  Head over [here](https://ngrok.com/download) and follow the download instructions for your platform.\n\nAfter you’ve had it installed, tunnel your backend server using the command:\n\n```\n    ngrok http 3128\n```\n\nYou should get a view that looks like this:\n\n```\n    ngrok by @inconshreveable                                                                                                                                                                                                    (Ctrl+C to quit)\n    \n    Session Status                online\n    Session Expires               7 hours, 59 minutes\n    Version                       2.2.8\n    Region                        United States (us)\n    Web Interface                 http://127.0.0.1:4040\n    Forwarding                    http://b3b88c11.ngrok.io -\u003e localhost:3128\n    Forwarding                    https://b3b88c11.ngrok.io -\u003e localhost:3128\n    \n    Connections                   ttl     opn     rt1     rt5     p50     p90\n                                  0       0       0.00    0.00    0.00    0.00\n                                \n```\n\nThis means that you can now access your backend server using the public URL → `https://b3b88c11.ngrok.io`\n\nUpdate the `authEndpoint` of your `pusher-service.ts` to use the new public URL:\n\n``` javascript\n    // src/providers/pusher-service/pusher-service.ts\n    [...]\n       let pusher = new Pusher('9effdb6e1245bda33b17', {\n          authEndpoint: 'https://b3b88c11.ngrok.io/pusher/auth',\n          cluster: 'mt1'\n        });\n    [...]\n```\n\nAlso update the POST request in the `submitPost` of your `home.ts` file:\n\n``` javascript\n    // src/pages/home/home.ts\n    [...]\n        // submit post to the backend server to trigger pusher event\n        this.http.post('http://localhost:3128/create-post', body).subscribe(() =\u003e {\n          alert.present();\n        });\n    [...]\n```\n\nTo test the application on your mobile device, download the [IonicDevApp](https://ionicframework.com/docs/pro/devapp/) on your mobile device. Ensure that your device and computer are on the same network and you should see this demo application listed there:\n\n![ionic-presence-test-app](//images.ctfassets.net/1es3ne0caaid/1DdiNS8Nm4Ui0oysWcumQO/e2203b9d31dfeaa0e98f8f42269348bf/ionic-presence-test-app.png)\n\nNow, testing with the device, we get the following:\n\n![ionic-presence-demo-3](//images.ctfassets.net/1es3ne0caaid/AptCnwyeRwMQgKuSW2uag/dcccc9c4dafe09e22ee8a467b84e8e32/ionic-presence-demo-3.gif)\n\n## Conclusion\n\nIn this tutorial, we saw how to use Pusher Channels and Ionic to build a social media application that lets you know who’s online and how many online friends your post reach when they’re shared. There are many more use cases for Pusher Channels, so feel free to use concepts shared here in your own application. Here’s a link to the [GitHub](https://github.com/oreHGA/ionic-twitter-clone) repository.","metaTitle":"Building a social app with online presence using Ionic","metaDescription":"This tutorial will show you how to create a simple social feed for Android and iOS using Ionic. The app features a Node backend, and online presence indicators powered by Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3rb74nfHiMusgqcGmQyAoA","type":"Entry","createdAt":"2018-11-30T23:45:07.937Z","updatedAt":"2018-11-30T23:45:07.937Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a Pokemon battle game with React Native - Part 3: Animations and sounds","url":"pokemon-react-native-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNPokebattle","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}}],"reviewDate":"2018-11-30","description":"In this three part series, use React Native and Node.js to create a two-player Pokemon-like game. In part three, extend the app with improved animations.","prerequisite":"You will need Node 8+, Expo and Yarn installed on your machine.","content":"In this tutorial, we’ll add battle animations and sounds to make the game more fun to play with.\n\nThis is the final tutorial of a three-part series on creating a Pokemon battle game with React Native. \nThese are the topics covered in this series:\n\n- [Part one: Practice mode](https://pusher.com/tutorials/pokemon-react-native-part-1)\n- [Part two: Two-player mode](https://pusher.com/tutorials/pokemon-react-native-part-2)\n- Part three: Animations and sounds\n\n## Prerequisites\n\nThis tutorial has the same prerequisites as part two of the series.\n\n## Overview of features to add\n\nSince we’ve already implemented most of the features of the app, we can now focus on aesthetics. In this part, we’ll add animations and sounds to make it more interesting and pleasing to play with.\n\nHere are the sounds that we’re going to add:\n\n- Screen\n- Pokemon cry \n\nHere are the animations that we’re going to implement:\n\n- Health bar\n- Pokemon moves\n\nWe’re going to add the sounds first before the animations, as they’re easier to implement.\n\nWe’ll be using the [Audio API](https://docs.expo.io/versions/latest/sdk/audio) provided by Expo to play sounds, and React Native’s animation library to implement the animations.\n\n\n## Screen sounds\n\nWe’ll add background music to each of the screens. We’ll be using the sounds from [khinsider.com](https://downloads.khinsider.com/game-soundtracks/album/pokemon-original-game-soundtrack). Specifically, we’ll use the following soundtracks:\n\n- Login screen - [opening](https://downloads.khinsider.com/game-soundtracks/album/pokemon-original-game-soundtrack/101%2520-%2520opening.mp3). Rename the file to `opening.mp3`.\n- Team selection screen - [the final road](https://downloads.khinsider.com/game-soundtracks/album/pokemon-original-game-soundtrack/142%2520-%2520the%2520final%2520road.mp3). Rename the file to `final-road.mp3`.\n- Battle screen - [last battle (vs rival)](https://downloads.khinsider.com/game-soundtracks/album/pokemon-original-game-soundtrack/143%2520-%2520last%2520battle%2520%2528vs%2520rival%2529.mp3). Rename the file to `rival.mp3`.\n\nOpen the links above and download the `.mp3` file. Create a `sounds/background` folder inside `src/assets` and copy the files you downloaded in there. \n\nYou can also copy the files [from the repo](https://github.com/anchetaWern/RNPokeBattle/tree/animations-and-sounds/src/assets/sounds/background).\n\n### Login screen background sound\n\nOpen the login screen file, and import the `Audio` package from Expo:\n\n``` javascript\n    // src/screens/LoginScreen.js\n    import CustomText from \"../components/CustomText\";\n    \n    import { Audio } from \"expo\"; // add this\n```\n\nNext, add an initial value for the reference to the background sound. We need it as a class variable so we could stop the sound later once the user logs in:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      this.backgroundSound = null; // add this\n    }\n```\n\nNext, add a `componentDidMount` method with the following code:\n\n``` javascript\n    async componentDidMount() {\n      try {\n        this.backgroundSound = new Audio.Sound();\n        await this.backgroundSound.loadAsync(\n          require(\"../assets/sounds/background/opening.mp3\")\n        ); // load the mp3 file\n        await this.backgroundSound.setIsLoopingAsync(true); // make the sound loop after it's done playing\n        await this.backgroundSound.playAsync(); // start playing the sound\n      } catch (error) {\n        console.log(\"error loading background sound: \", error);\n      }\n    }\n    \n    render () {\n      // existing code here...\n    }\n```\n\nIn the code above, we’re using the [async/await pattern](https://medium.com/@bluepnume/learn-about-promises-before-you-start-using-async-await-eb148164a9c8) to load and play the background sound. To use the async/await pattern, we add the `async` keyword before the parent function name or the before the function’s open and close parenthesis, if it’s an anonymous function. Inside the function, we can use the `await` keyword to wait for the promise to resolve before executing the next line of code. This essentially makes the asynchronous function behave as if it were a synchronous one.\n\nThe `loadAsync` method accepts a reference to a file through the `require`  method. This is the same method we’re using to load images in React Native. Most methods in the Expo Audio API are async. This means you either have to use a promise or callback function to get its response. That’s the reason why we need to put the `await` keyword at the beginning of each method call, so each method will wait for the results of the previous method call before proceeding.\n\nNext, update the `login` method so it stops the sound once the user logs in. We need to stop the sound because it doesn’t automatically stop once a new sound starts playing. As mentioned earlier, each screen will have its own background sound. That’s why we need to stop it before the sound in the next screen starts playing:\n\n``` javascript\n    login = () =\u003e {\n      let username = this.state.username;\n    \n      if (username) {\n        this.props.navigation.navigate(\"TeamSelect\", {\n          username\n        });\n    \n        this.backgroundSound.stopAsync(); // add this\n      }\n    };\n```\n\n### Team selection screen background sound\n\nDo the same for the team selection screen. Be sure to load the correct `.mp3` file:\n\n``` javascript\n    // src/screens/TeamSelectionScreen.js\n    import Pusher from \"pusher-js/react-native\";\n    \n    import { Audio } from \"expo\"; // add this\n\n\n    constructor(props) {\n      // previous code here..\n      \n      this.backgroundSound = null; // add this\n    }\n\n\n    async componentDidMount() {\n      try {\n        this.backgroundSound = new Audio.Sound();\n        await this.backgroundSound.loadAsync(\n          require(\"../assets/sounds/background/final-road.mp3\")\n        );\n        await this.backgroundSound.setIsLoopingAsync(true);\n        await this.backgroundSound.playAsync();\n      } catch (error) {\n        console.log(\"error loading background sound: \", error);\n      }\n    }\n```\n\n### Battle screen background sound\n\nLastly, do the same for the battle screen:\n\n``` javascript\n    // src/screens/BattleScreen.js\n    import { Ionicons } from \"@expo/vector-icons\";\n    \n    import { Audio } from \"expo\"; // add this\n\n\n    constructor(props) {\n      // previous code here..\n      \n      this.backgroundSound = null; // add this\n    }\n\n\n    async componentDidMount() {\n      // previous code here..\n      \n      // add this\n      try {\n        this.backgroundSound = new Audio.Sound();\n        await this.backgroundSound.loadAsync(\n          require(\"../assets/sounds/background/rival.mp3\")\n        );\n        await this.backgroundSound.setIsLoopingAsync(true);\n        await this.backgroundSound.playAsync();\n      } catch (error) {\n        console.log(\"error loading background sound: \", error);\n      }\n    }\n```\n\n## Pokemon cry sounds\n\nWhen a user switches to a specific Pokemon on their team or their Pokemon faints, we want to play their [cry](https://bulbapedia.bulbagarden.net/wiki/Cry). \n\nDownload their cry (`.mp3` file) from the [asset folder of the Pokemon Showdown website](https://play.pokemonshowdown.com/audio/cries/). Once downloaded, create a `cries` folder inside `src/assets/sounds` and copy the files you downloaded over to that folder.\n\nNext, update the `src/data/pokemon_data.js` file so it includes a `cry` property for each Pokemon. We need to do this because we can’t really pass a variable to the `require` function. You can simply [copy the contents of the file in the repo](https://github.com/anchetaWern/RNPokeBattle/blob/e644d8fa6be30ef51d3b29c52fcb0c04828090ff/src/data/pokemon_data.js) if you want. Just be sure the filenames are the same.\n\n### Update the PokemonOption component\n\nAt this point, we’re now ready to add the cry sounds. Let’s first add the code for playing the cry when the user switches to another Pokemon. Start by importing the `Audio` package:\n\n``` javascript\n    // src/components/PokemonOption/PokemonOption.js\n    import { connect } from \"react-redux\";\n    \n    import { Audio } from \"expo\"; // add this\n```\n\nNext, we need to convert the component into a class-based one:\n\n``` javascript\n    class PokemonOption extends Component {\n      render() {\n        const { pokemon_data, is_selected, action_type } = this.props; // add this\n        \n        // add the same return code here..\n      }\n    }\n```\n\nNote that we’re extracting fewer props in the code above. This is because we’ll be separating the event handler for the `onPress` event of the `TouchableOpacity` component.\n\nAs mentioned earlier, playing Audio requires the direct parent function to have the `async` keyword. While you can actually do it like the one below, it’s better if we just refactor the code to declare the function for handling the `onPress` event separately:\n\n``` javascript\n    \u003cTouchableOpacity onPress={async () =\u003e {\n      // same code here..\n    }}\u003e\n```\n\nTo refactor the code, copy the existing code inside `onPress`. \n\nNext, create a `selectPokemon` function and paste the existing code inside it. Above the existing code, add the props that were previously being extracted:\n\n``` javascript\n    render() {\n      // same code here..\n    }\n    \n    // add this\n    selectPokemon = async () =\u003e {\n      // add these:\n      const {\n        pokemon_data,\n        is_selected,\n        action_type,\n        togglePokemon,\n        setPokemon,\n        setMessage,\n        setMove,\n        backToMove,\n        opponents_channel\n      } = this.props;\n    \n      const { id, cry } = pokemon_data; // add this\n      \n      // paste existing code here...\n      \n    };\n```\n\nNext, update the code you just pasted to play the cry sound when the `action_type` is `switch-pokemon`:\n\n``` javascript\n    if (action_type == \"select-pokemon\") {\n      // previous code here..\n    } else if (action_type == \"switch-pokemon\") {\n      // previous code here..\n    \n      // add these:    \n      try {\n        let crySound = new Audio.Sound();\n        await crySound.loadAsync(cry);\n        await crySound.playAsync();\n      } catch (error) {\n        console.log(\"error loading cry: \", error);\n      }\n      \n      // same code:\n      setTimeout(() =\u003e {\n        setMessage(\"Please wait for your turn...\");\n        setMove(\"wait-for-turn\");\n      }, 2000);\n    }\n```\n\n### Update the MovesList component\n\nNext, we need to update the MovesList component so it plays the cry sound when the opponent Pokemon faints:\n\n``` javascript\n    // src/components/MovesList/MovesList.js\n    \n    import { connect } from \"react-redux\";\n    \n    import { Audio } from \"expo\"; // add this\n```\n\nJust like what we did with the PokemonOption component earlier, we also need to refactor this component into a class-based one:\n\n``` javascript\n    class MovesList extends Component {\n      render() {\n        const { moves } = this.props;\n        \n        // add existing return code here..\n      }\n    }\n```\n\nNext, copy the code inside the `onPress` handler, then update it to use a named function. Pass in the `item` from the FlatLists’ `renderItem` method as an argument so we could make use of it inside the `selectMove` function:\n\n``` javascript\n    \u003cTouchableOpacity\n      style={styles.container}\n      onPress={this.selectMove.bind(this, item)}\n    \u003e\n      \u003cCustomText styles={styles.label}\u003e{item.title}\u003c/CustomText\u003e\n    \u003c/TouchableOpacity\u003e\n```\n\nAdd the `selectMove` function and paste the code from `onPress`:\n\n``` javascript\n    selectMove = async item =\u003e {\n      // add these:\n      const {\n        moves,\n        opponent_pokemon,\n        setOpponentPokemonHealth,\n    \n        backToMove,\n        pokemon,\n        setMessage,\n        setMove,\n        removePokemonFromOpponentTeam,\n        setOpponentPokemon,\n        opponents_channel\n      } = this.props;\n      \n      // paste existing onPress code here..\n      \n    }\n```\n\nLastly, when the opponent’s Pokemon faints, play the cry sound:\n\n``` javascript\n    if (health \u003c 1) {\n      // existing code here..\n      \n      // add these:\n      try {\n        let crySound = new Audio.Sound();\n        await crySound.loadAsync(opponent_pokemon.cry);\n        await crySound.playAsync();\n      } catch (error) {\n        console.log(\"error loading cry: \", error);\n      }\n    }\n```\n\n### Update the battle screen\n\nThe last thing we need to update is the battle screen. We also need to play the cry sound when the user receives an update that their opponent switched their Pokemon, or when their own Pokemon faints after receiving an attack.\n\nIn the code for handling the `client-switched-pokemon` event, we update the anonymous function so it uses the `async` keyword. Because we previously had a reference to the `pokemon`, we can just use it to get the `cry`:\n\n``` javascript\n    // src/screens/BattleScreen.js\n    \n    my_channel.bind(\"client-switched-pokemon\", async ({ team_member_id }) =\u003e {\n      // existing code here..\n      \n      // add these:\n      try {\n        let crySound = new Audio.Sound();\n        await crySound.loadAsync(pokemon.cry);\n        await crySound.playAsync();\n      } catch (error) {\n        console.log(\"error loading cry: \", error);\n      }\n      \n      // this is existing code:\n      setTimeout(() =\u003e {\n        setMove(\"select-move\");\n      }, 1500);\n    });\n```\n\nNext, inside the handler for the `client-pokemon-attacked` event, when the Pokemon faints, play the cry sound:\n\n``` javascript\n    if (data.health \u003c 1) { // Pokemon faints\n      // existing code here..\n      \n      setTimeout(async () =\u003e { // note the async\n        // existing code here..\n      \n        // add these:\n        try {\n          let crySound = new Audio.Sound();\n          await crySound.loadAsync(fainted_pokemon.cry);\n          await crySound.playAsync();\n        } catch (error) {\n          console.log(\"error loading cry: \", error);\n        }\n      }, 1000);\n    \n      // existing code here..\n    }\n```\n\nNote that this time, we’ve placed the `async` keyword in the function for `setTimeout` instead of the event handler itself. This is because we only need it on the direct parent function.\n\n\n## Health bar animation\n\nNow it’s time to implement the animations. If you’re new to animations in React Native, I recommend that you check out my article on [React Native animations](https://blog.pusher.com/animation-react-native-part-1/).\n\nLet’s first animate the health bar. Currently, when a Pokemon loses health, their current HP just abruptly changes when they receive the damage. We want to change it gradually so it gives the illusion that the Pokemon is slowly losing its health as it receives the attack:\n\n![rn-pokemon-3-1](//images.ctfassets.net/1es3ne0caaid/2Mnfxl11gISc20s6WwcECW/a47f745bf9cb03cab22b9faf37ed7a2f/rn-pokemon-3-1.gif)\n\nTo accommodate the animations, we first need to convert the HealthBar component to a class-based one. This is because we now need to work with the state:\n\n``` javascript\n    // src/components/HealthBar/HealthBar.js\n    \n    class HealthBar extends Component {\n      render() {\n        const { label, currentHealth, totalHealth } = this.props;\n        \n        // paste existing return code here..\n      }\n    }\n```\n\nNext, extract the `Animated` library from React Native. This allows us to perform animations:\n\n``` javascript\n    import { View, Animated } from \"react-native\"; \n```\n\nNext, declare the maximum width that the health bar can consume. We’ll be using this later to calculate the width to apply for the current health:\n\n``` javascript\n    import CustomText from \"../CustomText\";\n    \n    const available_width = 100; // add this\n```\n\nNext, initialize the state value which will represent the Pokemon’s current health. In the constructor, we also initialize the animated value. This is the value that we’ll interpolate so the health bar will be animated. Here, we’re using the `currentHealth` passed via props so the health bar animations and health percentage text will always use the current Pokemon’s health:\n\n``` javascript\n    class HealthBar extends Component {\n      // add these:\n      state = {\n        currentHealth: this.props.currentHealth // represents the Pokemon's current health\n      };\n      \n      constructor(props) {\n        super(props);\n        this.currentHealth = new Animated.Value(this.props.currentHealth); // add this\n      }\n      \n      // existing code here..\n      \n    }\n```\n\nYou might be wondering why we need to add a separate state value for storing the Pokemon’s health when we’re already passing it as a prop. The answer is that we also want to animate the number which represents the health percentage while the health bar animation is in progress. The `currentHealth` values passed via props only represents the current health, so we can’t really update it.\n\nNext, add the `getCurrentHealthStyles` function. This is where we define how the health bar will be updated while the animation is in progress. As you’ve seen in the demo earlier, the health bar should decrease its width and change its color from colors between green (healthy) to red (almost fainting). That’s exactly what we’re defining here:\n\n``` javascript\n    getCurrentHealthStyles = () =\u003e {\n      var animated_width = this.currentHealth.interpolate({\n        inputRange: [0, 250, 500],\n        outputRange: [0, available_width / 2, available_width]\n      });\n    \n      const color_animation = this.currentHealth.interpolate({\n        inputRange: [0, 250, 500],\n        outputRange: [\n          \"rgb(199, 45, 50)\",\n          \"rgb(224, 150, 39)\",\n          \"rgb(101, 203, 25)\"\n        ]\n      });\n    \n      return {\n        width: animated_width,\n        height: 8, //height of the health bar\n        backgroundColor: color_animation\n      };\n    };\n```\n\nIn the code above, we’re using the `interpolate` method to specify the input and output ranges of the animation. The `inputRange` represents the value of the animated value at a given point in time, while the `outputRange` is the value you want to use when the animated value is interpolated to the corresponding `inputRange`. Here’s how the values for the `animated_width` maps out. The number on the left is the `inputRange` while the one in the right is the `outputRange`:\n\n\n- 0 → 0\n- 250 → 50\n- 500 → 100\n\nThe numbers in between the numbers we specified are automatically calculated as the animation in on progress.\n\nThe same idea applies to the values for `color_animation`, only this time, it uses RGB color values as the `outputRange`. \n\nNext, update the `render` method so it uses the `Animated.View` component for the current health and call the `getCurrentHealthStyles` function to apply the styles. The health percent text should also be updated to make use of the value in the state. It needs to be divided by 5 because the animated value is 5 times the value of the health bar’s `available_width`:\n\n``` javascript\n    render() {\n      const { label } = this.props;\n    \n      return (\n        \u003cView\u003e\n          \u003cCustomText styles={styles.label}\u003e{label}\u003c/CustomText\u003e\n          \u003cView style={styles.container}\u003e\n            \u003cView style={styles.rail}\u003e\n              \u003cAnimated.View style={[this.getCurrentHealthStyles()]} /\u003e\n            \u003c/View\u003e\n            \u003cView style={styles.percent}\u003e\n              \u003cCustomText styles={styles.percentText}\u003e\n                {parseInt(this.state.currentHealth / 5)}%\n              \u003c/CustomText\u003e\n            \u003c/View\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nLastly, add the `componentDidUpdate` method. This gets invoked immediately after an update to the component occurs. The props don’t necessarily have to have been updated when this occurs, so we need to check whether the relevant prop was actually updated before we perform the animation. If it’s updated, we interpolate the `this.currentHealth` animated value over a period of 1.5 seconds. The final value will be the new `currentHealth` passed via props. After that, we add a listener to the animated value. This listener gets executed every time the animated value is updated. When that happens, we update the state value, which represents the Pokemon’s health. This allows us to update the UI with the current health percentage while the animation is in progress:\n\n``` javascript\n    componentDidUpdate(prevProps, prevState) {\n      if (prevProps.currentHealth !== this.props.currentHealth) { // check if health is updated\n        Animated.timing(this.currentHealth, {\n          duration: 1500, // 1.5 seconds\n          toValue: this.props.currentHealth // final health when the animation finishes\n        }).start(); // start the animation\n      \n        this.currentHealth.addListener(progress =\u003e {\n          this.setState({\n            currentHealth: progress.value\n          });\n        });\n      }\n    }\n```\n\n## Pokemon fainting animation\n\nWhen a Pokemon loses all of its health, we move the PokemonFullSprite component downwards out of the view. This gives the impression that the Pokemon collapsed. Here’s what it looks like (minus the boxing gloves, we’ll add that later):\n\n![rn-pokemon-3-2](//images.ctfassets.net/1es3ne0caaid/4buIkrcCRy6GOiIcMkkia4/175a5f59b39875ecff14041fdf3f1707/rn-pokemon-3-2.gif)\n\nJust like what we did with all the previous components, we also need to convert this one to a class-based one.\n\nOnce you’ve converted the component to a class-based one, import the `Animated` library:\n\n``` javascript\n    // src/components/PokemonFullSprite/PokemonFullSprite.js\n    \n    import { Image, Animated } from \"react-native\";\n```\n\nNext, add the animated value that we’re going to interpolate:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      this.sprite_translateY = new Animated.Value(0);\n    }\n```\n\nNext, update the `render` method to specify how the vertical position of the component will change. In this case, an `inputRange` of `0` means that it’s in its original position. Once it becomes `1000`, it’s no longer visible because its initial vertical position has moved 1000 pixels downwards. To apply the styles, specify it as an object under `transform`. This allows us to perform translation animations similar to the ones used in CSS3:\n\n``` javascript\n    render() {\n      const { spriteFront, spriteBack, orientation } = this.props;\n      let sprite = orientation == \"front\" ? spriteFront : spriteBack;\n      \n      // add these:\n      const pokemon_moveY = this.sprite_translateY.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, 1000]\n      });\n      \n      // use Animated.Image instead of Image, and add transform styles\n      return (\n        \u003cAnimated.Image\n          source={sprite}\n          resizeMode={\"contain\"}\n          style={[\n            styles.image,\n            {\n              transform: [\n                {\n                  translateY: pokemon_moveY\n                }\n              ]\n            }\n          ]}\n        /\u003e\n      );\n    }\n```\n\nWhen the component is updated, we only start the animation if the Pokemon has fainted. If it’s not then we set the initial value. This way, the component doesn’t stay hidden if the user switched to a different Pokemon:\n\n``` javascript\n    componentDidUpdate(prevProps, prevState) {\n      if (prevProps.isAlive !== this.props.isAlive \u0026\u0026 !this.props.isAlive) { // if Pokemon has fainted\n        Animated.timing(this.sprite_translateY, {\n          duration: 900,\n          toValue: 1\n        }).start();\n      } else if (prevProps.isAlive !== this.props.isAlive \u0026\u0026 this.props.isAlive) { // if Pokemon is alive\n        this.sprite_translateY.setValue(0); // unhides the component\n      }\n    }\n```\n\nThe last step is to add the `isAlive` prop when using the PokemonFullSprite component in the battle screen:\n\n``` javascript\n    // src/screens/BattleScreen.js\n    \u003cPokemonFullSprite\n      ...\n      isAlive={opponent_pokemon.current_hp \u003e 0}\n    /\u003e\n\n\n    \u003cPokemonFullSprite\n      ...\n      isAlive={pokemon.current_hp \u003e 0}\n    /\u003e\n```\n\n## Pokemon switch animation\n\nWhen the user switches Pokemon, we’re going to make a Pokeball bounce and scale the Pokemon gif up. This gives the impression that the user has thrown it and the Pokemon came out of it:\n\n![rn-pokemon-3-3](//images.ctfassets.net/1es3ne0caaid/78fxTmj54ssysgwQ4SCSMI/a4d8bb3f1003c2de75df49893720d4dc/rn-pokemon-3-3.gif)\n\nTo implement this animation, we also need to update the PokemonFullSprite component. Start by importing the additional components and libraries we need from React Native. This includes the `View` component and the `Easing` library to implement easing animations:\n\n``` javascript\n    // src/components/PokemonFullSprite/PokemonFullSprite.js\n    import { View, Image, Animated, Easing } from \"react-native\";\n```\n\nNext, update the constructor to include three new animated values. As mentioned earlier, we’re going to render a Pokeball which we will bounce so we need to translate its Y position. Aside from that, we also need to hide it so we have `pokeball_opacity`. Once the Pokeball is hidden, we want to scale up the Pokemon gif:\n\n``` javascript\n    constructor(props) {\n      // previously added code..\n      \n      // add these\n      this.pokeball_y_translate = new Animated.Value(0); // for updating the Y position of the Pokeball\n      this.pokeball_opacity = new Animated.Value(0); // for animating the Pokeball opacity\n      this.sprite_scale = new Animated.Value(0); // for scaling the Pokemon gif\n    }\n```\n\nNext, update the `render` method so it specifies how we’re going to interpolate the animated values we declared in the constructor:\n\n``` javascript\n    const pokemon_moveY = ... // same code\n    \n    // add these:\n    const pokemon_scale = this.sprite_scale.interpolate({\n      inputRange: [0, 0.5, 1],\n      outputRange: [0, 0.5, 1] // invisible (because zero size), half its original size, same as original size\n    });\n    \n    const pokeball_moveY = this.pokeball_y_translate.interpolate({\n      inputRange: [0, 1, 2],\n      outputRange: [0, 50, 25] // top to bottom Y position translate\n    });\n    \n    const pokeball_opacity = this.pokeball_opacity.interpolate({\n      inputRange: [0, 0.5, 1],\n      outputRange: [1, 0.5, 0] // full opacity, half opacity, invisible\n    });\n```\n\nNext, add an animated image on top of the Pokemon gif, then add the interpolated values to both the Pokeball image and the Pokemon gif. Since React Native doesn’t allow us to return siblings, we wrap everything in a `View` component:\n\n``` javascript\n    return (\n        \u003cView\u003e\n          \u003cAnimated.Image\n            source={require(\"../../assets/images/things/pokeball.png\")}\n            style={{\n              transform: [\n                {\n                  translateY: pokeball_moveY\n                }\n              ],\n              opacity: pokeball_opacity\n            }}\n          /\u003e\n    \n          \u003cAnimated.Image\n            source={sprite}\n            resizeMode={\"contain\"}\n            style={[\n              styles.image,\n              {\n                transform: [\n                  {\n                    translateY: pokemon_moveY\n                  },\n                  {\n                    scale: pokemon_scale\n                  }\n                ]\n              }\n            ]}\n          /\u003e\n    \n        \u003c/View\u003e\n      );\n    }\n```\n\nYou can get the [Pokeball image from this website](https://www.flaticon.com/free-icon/pokeball_361998). Select the 32px `.png` file. That’s also the source of the image included in the repo. Create a `things`  folder inside the `src/assets/images` directory, move the file in there, and rename it to `pokeball.png`.\n\nBecause we need to animate in two instances: `componentDidMount` and `componentDidUpdate`, we create a new function that will start the animations for us:\n\n``` javascript\n    animateSwitchPokemon = () =\u003e {\n      // initialize the animated values\n      this.sprite_translateY.setValue(0);\n      this.pokeball_opacity.setValue(0);\n      this.pokeball_y_translate.setValue(0);\n      this.sprite_scale.setValue(0);\n      \n      // perform the animations in order\n      Animated.sequence([\n        // bounce the Pokeball\n        Animated.timing(this.pokeball_y_translate, {\n          toValue: 1,\n          easing: Easing.bounce,\n          duration: 1000\n        }),\n        \n        // hide the Pokeball\n        Animated.timing(this.pokeball_opacity, {\n          toValue: 1,\n          duration: 200,\n          easing: Easing.linear\n        }),\n        \n        // scale the Pokemon gif up so it becomes visible\n        Animated.timing(this.sprite_scale, {\n          toValue: 1,\n          duration: 500\n        })\n      ]).start();\n    };\n```\n\nIn the code above, we first re-initialize the animated values. This is because this component doesn’t really get unmounted when a Pokemon faints and re-mounted again once the user switches to another Pokemon. If we don’t do this, the subsequent Pokemon’s that we switch to after the first one has fainted will no longer be visible. That is because the component will already have been in its final state of animation.\n\nOnce we’ve re-initialized the animated values, we performed the animations in order:\n\n\n1. Bounce the Pokeball.\n2. Hide the Pokeball.\n3. Scale the Pokemon gif up.\n\nWhen the component is mounted for the first time, we execute the function for animating it:\n\n``` javascript\n    componentDidMount() {\n      this.animateSwitchPokemon();\n    }\n```\n\nAlso, do the same when the component is updated. The only time we want to perform the animations for switching a Pokemon is when the user switches to a new one. Since we’re already passing the Pokemon name as a props, we simply check if the current one is not the same as the previous:\n\n``` javascript\n    componentDidUpdate(prevProps, prevState) {\n      if (prevProps.isAlive !== this.props.isAlive \u0026\u0026 !this.props.isAlive) {\n        // previous code here..\n      } else if (prevProps.pokemon !== this.props.pokemon \u0026\u0026 this.props.isAlive) {\n        this.animateSwitchPokemon();\n      }\n    }\n```\n\n## Pokemon move animation\n\nNext, we’re going to implement the Pokemon move animations. We’ll only implement a single generic move animation because it would take us forever if we’re going to implement everything via code. Here’s what the animation looks like:\n\n![rn-pokemon-3-4](//images.ctfassets.net/1es3ne0caaid/7HKTNLNoGIcSuIiSqsUIsW/24d567c3d49031c4cb044ec547deaee4/rn-pokemon-3-4.gif)\n\nJust like all the previous Pokemon-related animations, we’ll also be using the PokemonFullSprite component for this. Start by adding the new animated values that were going to interpolate. This includes the following: \n\n\n- `pokemon_opacity` - to seemingly make the Pokemon disappear for a split second to indicate that it received damage.\n- `punch_opacity` - for making the boxing gloves image appear while an attack is made, and disappear once it reaches its final destination (right above the Pokemon’s head).\n- `punch_translateY` - for moving the boxing gloves vertically across the target Pokemon when it’s attacked. \n\nHere’s the code. Add these after the last animated value in the constructor:\n\n``` javascript\n    // src/components/PokemonFullSprite/PokemonFullSprite.js\n    this.pokemon_opacity = new Animated.Value(0);\n    this.punch_opacity = new Animated.Value(0);\n    this.punch_translateY = new Animated.Value(0);\n```\n\nNext, we specify how the new animated values will be interpolated. This is inside the `render` method:\n\n``` javascript\n    const pokeball_opacity = ... // same code\n    \n    // add these:\n    const punch_opacity = this.punch_opacity.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1]\n    });\n    \n    const punch_moveY = this.punch_translateY.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, -130] // negative value because we're moving upwards\n    });\n    \n    const pokemon_opacity = this.pokemon_opacity.interpolate({\n      inputRange: [0, 0.5, 1],\n      outputRange: [1, 0.2, 1] // appear, disappear, appear\n    });\n```\n\nNext, update the target components. The first one is the Pokemon gif. Add the `opacity` style:\n\n``` javascript\n    \u003cAnimated.Image\n      source={sprite}\n      resizeMode={\"contain\"}\n      style={[\n        styles.image,\n        {\n          transform: [\n            {\n              translateY: pokemon_moveY\n            },\n            {\n              scale: pokemon_scale\n            }\n          ],\n          opacity: pokemon_opacity // add this\n        }\n      ]}\n    /\u003e\n```\n\nThe second one hasn’t been added yet. Add it right below the Pokemon gif. This includes both transform and opacity animations:\n\n``` javascript\n    \u003cAnimated.Image\n      source={require(\"../../assets/images/things/fist.png\")}\n      style={[\n        styles.punch,\n        {\n          transform: [\n            {\n              translateY: punch_moveY // for moving it vertically across the Pokemon gif\n            }\n          ],\n          opacity: punch_opacity // for making it appear and disappear\n        }\n      ]}\n    /\u003e\n```\n\nYou’ll need to [download the image asset](https://www.flaticon.com/free-icon/fist_189013) we’re using above. Select the 32px `.png` file. That’s also the source of the image in the GitHub repo. Move the file inside the `src/assets/images/things` folder and rename it to `fist.png`.\n\nNext, add the styles. The component should be absolutely positioned so that it can overlap with the Pokemon gif:\n\n``` javascript\n    const styles = {\n      // previously added code here..  \n      \n      // add these:\n       punch: {\n        position: \"absolute\", // very important\n        bottom: -40,\n        left: 50\n      }\n    };\n```\n\nNext, add the function for starting the move animations:\n\n``` javascript\n    animateDamagePokemon = () =\u003e {\n      // reset the animated values\n      this.punch_opacity.setValue(0);\n      this.punch_translateY.setValue(0);\n      this.pokemon_opacity.setValue(0);\n    \n      Animated.sequence([\n        // make the boxing gloves visible\n        Animated.timing(this.punch_opacity, {\n          toValue: 1,\n          duration: 10,\n          easing: Easing.in\n        }),\n        \n        // move the boxing gloves upwards across the Pokemon\n        Animated.timing(this.punch_translateY, {\n          toValue: 1,\n          duration: 300,\n          easing: Easing.in\n        }),\n        \n        // hide the boxing gloves\n        Animated.timing(this.punch_opacity, {\n          toValue: 0,\n          duration: 200,\n          easing: Easing.in\n        }),\n        \n        // momentarily hide the Pokemon (to indicate damage)\n        Animated.timing(this.pokemon_opacity, {\n          toValue: 1,\n          duration: 850,\n          easing: Easing.in\n        })\n      ]).start();\n    };\n```\n\nNext, we call the `animateDamagePokemon` function when the current health changes. This may also happen when the user switches Pokemon so we need to make sure that the animation doesn’t execute if the previous Pokemon isn’t the same as the one the user switched to:\n\n``` javascript\n    componentDidUpdate(prevProps, prevState) {\n      // add these:\n      if (\n        prevProps.pokemon === this.props.pokemon \u0026\u0026\n        prevProps.currentHealth !== this.props.currentHealth\n      ) {\n        this.animateDamagePokemon();\n      }\n      \n      // existing code here..\n    }\n```\n\nNext, when we use the PokemonFullSprite component inside the battle screen, we need to add the new `currentHealth` prop. When its value changes, that’s the queue for the component to render the move animation:\n\n``` javascript\n    // src/screens/BattleScreen.js\n    \u003cPokemonFullSprite\n      ...\n      currentHealth={opponent_pokemon.current_hp}\n    /\u003e\n    \n    \u003cPokemonFullSprite\n      ...\n      currentHealth={pokemon.current_hp}\n    /\u003e\n```\n\nLastly, we need to move the code for dispatching the action for updating the Pokemon’s health to the very first line when the callback function is called. This is because setting the Pokemon’s health triggers the move animation as well, and we want to perform it while the health is being animated:\n\n``` javascript\n    // src/screens/BattleScreen.js\n    my_channel.bind(\"client-pokemon-attacked\", data =\u003e {\n      setPokemonHealth(data.team_member_id, data.health); // move this (previously above: setMove(\"select-move\"))\n      \n      // previously added code here..\n    });\n```\n\n## Conclusion\n\nWe’ve reached the end of this tutorial. Even though it took us three tutorials to implement it, there are still lots of things that need to be covered: \n\n\n- Only a handful of Pokemon can be selected, and their moves are limited. \n- There are two-turn moves like Fly, Dig, and Solar Beam in the `moves_data.js` file, but they’re not really implemented as such. \n- Moves that are supposed to modify base stats aren’t also implemented. There are also no status conditions such as frozen, burned, or paralyzed.\n- Players can’t use or equip items such as the max potion, berries to their Pokemon.\n\nYou might also have noticed that there’s a bug in the app. I call it “Zombie mode”. When your Pokemon faints, you can actually go to the Pokemon move selection screen and attack with your fainted Pokemon. \n\nLastly, there’s no functionality yet to inform both players that someone has won. Even though it’s obvious, it’s always good to acknowledge it. So if you’re interested, I encourage you to develop the app further.\n\nIn this tutorial, you learned how to play background sounds within an app using Expo’s Audio API. You also learned how to implement animations in React Native.\n\nThat also wraps up the series. In this series, you learned how to re-create the battles in the classic Pokemon game using React Native and Pusher. Along the way, you learned how to use Redux, Pusher Channels, audio, and animations in React Native.\n\nYou can find the code for this app on its [GitHub repo](https://github.com/anchetaWern/RNPokebattle). The code added to this specific part of the series is on the `animations-and-sounds` branch.","metaTitle":"Create a Pokemon battle game with React Native - Part 3","metaDescription":"In this three part series, use React Native and Node.js to create a two-player Pokemon-like game. In part three, extend the app with improved animations."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"laaErpOtnUaMO4Mmsu8Es","type":"Entry","createdAt":"2018-11-30T19:34:27.841Z","updatedAt":"2020-04-16T12:45:03.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Linking WordPress and React Native","url":"wordpress-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4j1ezB9yPmUYsSoSUG6eKK","type":"Entry","createdAt":"2018-03-05T16:21:11.688Z","updatedAt":"2018-11-16T09:41:40.564Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Pusher team","url":"pusher-team","email":"team@pusher.com","twitter":"https://twitter.com/pusher","github":"https://github.com/pusher","guestWriter":false}}],"projectRepo":"https://github.com/samuelayo/wordpress_react_by_example","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-11-30","description":"This tutorial discusses the pros and cons of using WordPress and React Native together, before walking through a practical build of a simple blogging app, supported by a WordPress API.","prerequisite":"You will need a WordPress install to work with. You will also need Node 8.3+ and the React Native CLI installed on your machine.","content":"In this tutorial we are going to be building a simple mobile app using React Native called ‘Music News’ which will pull posts from a WordPress website via the WP REST API and display them to the user every time they tap to read more about the news. We’ll start with this and you can dig more and do more by reading and understanding the documentation.\n\nAs mobile developers, integrating a data source is a very important aspect of building mobile apps. Having an organized data source ready for integration would make development easy and also reduce the time taken to build and develop mobile apps.\n\nWordPress as a backend can be very effective if you're building mobile applications that have a lot of consumable content such as a mobile application for a blog, e-commerce website, and so on.\n\nIt can provide standard endpoints to return the data you need and also provides standard documentation for all the endpoints you'll require.\n\n\n## Prerequisites\n\nTo follow through with this lesson, a basic understanding of the following are required:\n\n- WordPress\n- React Native\n\nYou also need to have the following installed:\n\n- PHP 5.6+\n- Node 8.3+\n- React Native CLI\n\n## Getting started\n\n### What is WordPress?\n\nWordPress is the easiest and fastest way to build your website. It's free and open source and it's based off two very popular technologies, PHP and MySQL.\n\nIt is stated that over 29% of websites on the internet are WordPress powered websites.\n\nWordPress is also a content management tool. It allows you to manage content posted on your website easily without the need for you to know anything technical and that's great because you don't have to be a programmer to be able to create and manage your website by yourself.\nThere's a wide variety of websites you can build using WordPress and some of them includes:\n\n- Blogs\n- Resumes\n- Creative portfolios\n- Forums\n- Brand or business websites\n- E-commerce or shopping websites\n\n\nWordPress can be an excellent tool to create your website because:\n\n- **It's free and open source:** that means you'll never need to pay for WordPress and if you're technical, you can also go ahead to add your own feature and functionality to it.\n- **It is easy to install:** you can easily install WordPress and get started as the installation process is fast, easy to understand and not technical so therefore can be done by anyone.\n- **It's extensible:** WordPress can be extended and customized by using themes to change how your website looks. There is a large plugin ecosystem to add custom functionality.\n- **Support:** finding help when you run into issues while setting up or managing your WordPress site is very easy. There's the official support and also so many other WordPress blogs, companies, and communities that provide free and premium support for websites using WordPress.\n\n### What is React Native?\n\nReact Native is a mobile JavaScript framework for building real native mobile applications for iOS and Android. It’s based on React made by Facebook's engineering team which is a JavaScript library for building user interfaces.\n\nUnlike a hybrid application that allows you to write your code in HTML and CSS and then renders it in a native web view container or component, React Native calls Objective-C and Java APIs respectively to render your JSX (a combination of JavaScript and XML-esque markup which is the standard way React applications are written) codes into user interface components on your device.\n\nSome of the known pros of React Native:\n\n- **Cross Platform:** React Native allows you to use the same codebase to compile and build for multiple platforms like Android and iOS. This also eventually saves development cost.\n- **Performance:** applications built using React Native have good performance on the device since they are rendered natively.\n- **Community**: the React and React Native community is solid despite it still being considered an emerging technology. There's a lot of communities and blogs that provide support for React Native issues.\n- **Fast Development:** because of its ability to build cross-platform, it saves time while developing application since you don't need to rewrite any special code for another platform and code re-usability is supported.\n\nSome of the known cons of React Native:\n\n- **It's new:** it's still considered as a new technology and therefore not stable as it comes with the caveats of using an unstable technology\n- **Future Plans**: React Native was built by the engineering team at Facebook and has since led to the concern of copyright and privacy issues and also its future because the project can be discontinued by the team.\n\n### What is an API?\n\nAPI stands for *Application Programming Interface.* It can be seen as a component that allows for interaction between two programming languages, software libraries, software tools, and so on. It also specifies a set of rules that should be followed in order to interact and communicate with underlying data.\n\nAn API could mean something else, depending on the context used and in this context, an API refers to a software component we will interact with to provide us with relevant raw data to be used inside our application.\n\n\n## Configuring WordPress to have an API\n\nTo get started, the first step would be to install the WordPress REST API plugin to our already existing WordPress installation. My WordPress site is on my local device so I'll be installing it there.\n\n- Go to **Plugins** \u003e **Add New** \u003e **Upload Plugin**.\n\n![rn-wordpress-upload-plugin](//images.ctfassets.net/1es3ne0caaid/99Ke8RRnhKIw4SwUqsWSs/e0f7015f349c71db8827ed86acf7956a/rn-wordpress-upload-plugin.png)\n\n- After uploading the plugin, make sure you activate it\n\n![rn-wordpress-install-plugin](//images.ctfassets.net/1es3ne0caaid/GZXGoUrek6qayeiCSeCas/cdeb68d495d4af433394acdf2a61c761/rn-wordpress-install-plugin.png)\n\n- Enable pretty permalinks under **Settings** \u003e **Permalinks** because the REST API uses custom rewrite rules.\n\n![rn-wordpress-permalinks](//images.ctfassets.net/1es3ne0caaid/1CUBJxRksEceAmgyayImiW/e96d507b8b289b8da3889424e6302b4d/rn-wordpress-permalinks.png)\n\n- Visit http://your-domain.com/wp-json/wp/v2/posts/ to make sure everything is working fine. In my own case, I have my WordPress instance installed locally on my device and in yours, visit the host you have your WordPress installed to confirm. You should see a page containing raw data of all your posts on the websites. In order to get the data in the best visual representation, you can install [Postman](https://www.getpostman.com) and use it for all API calls.\n\nWe can now proceed to make more Music News posts on our WordPress normally and then visit the endpoint to see it translated into raw data that can be used in our mobile app.\n\n![rn-wordpress-data](//images.ctfassets.net/1es3ne0caaid/5GlcPOUp3OsEgKIk6SQIIA/7b1d3bf3cd4b08dfe97179d01d33bca8/rn-wordpress-data.png)\n\n## Setting up our React Native app\n\nTo get started on this, you can follow the official docs on how to set up your React  Native environment on your computer. \n\nOnce that is done, we need to initiate and create our application project.\n\n```\n    $ react-native init MusicNews\n```\n\nOnce that is completed, we need to compile and build the application.\n\n```\n    $ react-native run-ios\n    # if using android, you can run the command below\n    $ react-native run-android\n```\n\n### Configuring routing in our app\n\nHow our users navigate around our mobile app is important as developers, we should make navigation as easy and smooth as possible. To configure navigation in our Music News app, we'll use the `react-native-router-flux` library to manage navigation between the screens of our app where all the music news posts are, to the screen where we'll read each individual post.\nReact-native-router-flux is an API on top of React Navigation and it allows you to define routes in one central place for easy management and configuration. To get started with `react-native-router-flux`\n\n```\n    $ npm install react-native-router-flux --save\n```\n\nNow that we have it installed, we go ahead and create our route file and configure all application routing. In the root directory of our Music News app, create a `Routes.js` file and the contents would look like:\n\n``` javascript\n    // Routes.js\n    import React, { Component } from 'react';\n    import {Platform} from 'react-native';\n    \n    // import components from react-native-router-flux\n    import {Router, Stack, Scene} from 'react-native-router-flux';\n    \n    // import our screens as components \n    import Home from './screens/Home';\n    import ViewNews from './screens/ViewNews';\n    \n    export default class Routes extends Component\u003c{}\u003e {\n    \n        render() {\n            return(\n                \u003cRouter\u003e\n                    \u003cStack key=\"root\" hideNavBar={true}\u003e\n                        \u003cScene key=\"home\" component={Home} title=\"Home\" /\u003e\n                        \u003cScene key=\"viewnews\" component={ViewNews} title=\"View News\"/\u003e\n                    \u003c/Stack\u003e\n                \u003c/Router\u003e\n                )\n        }\n    }\n```\n\n- Router is the main routing component.\n- A Stack is a group of Scenes with its own navigator, so you can have multiple stacks for navigating.\n- A Scene is the basic routing component for the main router and all Scene components require a key prop that must be unique.\n- A key prop is used to call the screen transition and must be unique to all screens.\n\nAlso, edit your `App.js` file to look like this:\n\n``` javascript\n    //App.js\n    import React, { Component } from 'react';\n    \n    import {\n      StyleSheet,\n      View,\n      StatusBar,\n    } from 'react-native';\n    \n    import Routes from './Routes';\n    \n    export default class App extends Component\u003c{}\u003e {\n    \n      render() {\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cStatusBar\n              backgroundColor=\"#fff\"\n              barStyle=\"dark-content\"\n            /\u003e\n            \u003cRoutes/\u003e\n          \u003c/View\u003e\n        );\n      }\n    }\n    \n    const styles = StyleSheet.create({\n      container : {\n        flex: 1,\n      }\n    }); \n```\n\n### Designing screens for our app\n\nReact Native offers inbuilt UI components like the `FlatList`, `Modal`, `Slider`, `Text`, and so on. For the design of our home page, we will be using the `Shoutem UI` and `react-native-render-html` to render all the posts fetched from our WordPress backend.\n\nNow that we've successfully configured routing, we need to create the screens as specified in the Routes file. \nWe'll create a screen folder and create the files as seen below:\n\n```\n    $ npm install --save react-native-render-html\n    $ npm install --save @shoutem/ui\n    $ react-native link\n    $ mkdir screens \u0026\u0026 cd screens\n    $ touch Home.js ViewNews.js\n```\n\nCopy the code below and paste into your `/screens/Home.js` \n\n``` javascript\n    //screens/Home.js\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      SafeAreaView,\n    } from 'react-native';\n    \n    import {\n      Subtitle,\n      Screen,\n      Divider,\n      View, \n      Row,\n      ListView,\n    } from '@shoutem/ui';\n    \n    import {Actions} from 'react-native-router-flux';\n    \n    export default class Home extends Component\u003c{}\u003e {\n    \n      home(){\n        Actions.home();\n      }\n    \n      viewNews(newspost){\n        Actions.viewnews({newspost: newspost});\n      }\n    \n      componentWillMount() {\n        this.fetchMusicNews();\n      }\n    \n      fetchMusicNews = async () =\u003e {\n        const response = await fetch(\"http://localhost/wordpress/wp-json/wp/v2/posts/\");\n        const json = await response.json();\n        this.setState({ musicNews: json, isLoadingMusicNews: false });\n      };\n    \n      constructor(props) {\n        super(props);\n        this.renderRow = this.renderRow.bind(this);\n        this.state = {\n          isLoadingMusicNews: true,\n          musicNews: [],\n        }\n      }  \n    \n      renderRow(post) {\n        const regex = /(\u003c([^\u003e]+)\u003e)/ig;\n        let newspost = {\n            postId: post.id,\n            postDate: post.date,\n            postLink: post.guid.rendered,\n            postTitle: post.title.rendered,\n            postExcerpt: post.excerpt.rendered,\n            postContent: post.content.rendered,\n            postCategory: post.categories,\n        }\n        return (\n          \u003cRow style={{height: 80}}\u003e\n            \u003cView styleName=\"vertical stretch space-between\"\u003e\n              \u003cSubtitle \n                numberOfLines={2} \n                newspost={newspost} \n                onPress={() =\u003e this.viewNews(newspost)}\u003e\n                {post.title.rendered.replace(regex, '').toUpperCase()}\n              \u003c/Subtitle\u003e\n            \u003c/View\u003e\n          \u003c/Row\u003e\n        );\n      }\n    \n      render() {\n        const regex = \"/(\u003c([^\u003e]+)\u003e)/ig\"\n        const musicNews = this.state.musicNews;\n        return (\n          \u003cSafeAreaView style={styles.safeArea}\u003e\n            \u003cScreen\u003e\n              \u003cView\u003e\n                  \u003cListView\n                    data={musicNews}\n                    renderRow={this.renderRow}\n                  /\u003e\n              \u003c/View\u003e\n            \u003c/Screen\u003e\n          \u003c/SafeAreaView\u003e\n        );\n      }\n    }\n    \n    const styles = StyleSheet.create({\n      container: {\n        flexDirection: 'column',\n        backgroundColor: '#fff'\n      },\n      safeArea: {\n        flex: 1,\n        backgroundColor: '#fff'\n      },\n    });\n```\n\nIn the `Home.js` file, we import all the necessary components to build our interface. We create routing functions so we can navigate from page to page. The `fetchMusicNews()` is an asynchronous function that allows us to fetch data from our API configured WordPress backend and the `componentWillMount()` allows us to fetch the async data after the screen is rendered. \nThe fetched data is stored in the musicNews state and will be passed to our component during rendering. \n\nIn the `renderRow()` we define a prop that holds data fetched from our WordPress API and we pass it to the `ViewNews` page so we don't have to do a network fetch to get the same data on the next screen. The data fetched is rendered as a list view using the `ListView` component imported from our UI library and the data is also rendered accordingly. \n\nOur `render()` function renders the screen and we use the `SafeAreaView` component to handle the screens of newer device screen like the ones of the iPhone X and higher so the screen doesn't overlap. Our styles are also defined for different components and the applied to style individual components based on the defined rules.\n\nCopy the code below and paste into your `/screens/ViewNews.js` \n\n``` javascript\n    // screens/ViewNews.js\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      SafeAreaView,\n      ScrollView,\n      Dimensions,\n    } from 'react-native';\n    \n    import {\n      Tile,\n      Title,\n      Screen,\n      Divider,\n      View, \n      Overlay\n    } from '@shoutem/ui';\n    \n    import {Actions} from 'react-native-router-flux';\n    import HTML from 'react-native-render-html';\n    \n    export default class ViewNews extends Component\u003c{}\u003e {\n    \n      home(){\n        Actions.reset('home');\n        Actions.home();\n      }\n    \n      constructor(props) {\n        super(props);\n        this.state = {\n          newspost: [],  \n        }\n      }\n      render() {\n        const news = this.state.newspost;\n        const regex = /[!@#$%^\u0026*\u003c\u003e0-9;]/g;\n        console.log(\"newspost: \"+this.props.newspost);\n        return (\n          \u003cSafeAreaView style={styles.safeArea}\u003e\n            \u003cScreen style={{ flex: 1 }}\u003e\n              \u003cScrollView\u003e\n              { \n                \u003cView\u003e\n                  \u003cTile\u003e\n                      \u003cOverlay styleName=\"image-overlay\"\u003e\n                        \u003cTitle style={{color: '#fff', fontWeight: '800'}} styleName=\"md-gutter-bottom\"\u003e{this.props.newspost.postTitle.replace(regex, \"\").toUpperCase()}\u003c/Title\u003e\n                        \u003c/Overlay\u003e\n                    \u003c/Tile\u003e\n                  \u003cScreen style={{paddingLeft: 15, paddingRight: 15, paddingTop: 15, paddingBottom: 15, width:375}} styleName=\"paper\"\u003e\n                    \u003cHTML \n                      tagsStyles={{ \n                        body: {fontSize: 20}, \n                        p: {fontSize: 20, fontWeight: \"normal\"}, \n                        strong: {fontSize: 20,}, \n                        blockquote: {fontSize: 20}, \n                        a: {fontSize: 20, color: \"#000\"}, \n                        em: {fontSize: 20,}, \n                        img: {height: 250, width: 350}, \n                      }}\n                      styleName=\"paper md-gutter multiline\" \n                      html={this.props.newspost.postContent} \n                      imagesMaxWidth={Dimensions.get('window').width} \n                      ignoredStyles={['width', 'height', 'video']}\n                      onLinkPress={(evt, href) =\u003e this.onLinkPress(href)}\n                    /\u003e\n                    \u003cDivider styleName=\"line\" /\u003e\n                  \u003c/Screen\u003e\n                \u003c/View\u003e\n              }  \n              \u003c/ScrollView\u003e\n            \u003c/Screen\u003e\n    \n          \u003c/SafeAreaView\u003e\n        );\n      }\n    };\n    \n    const styles = StyleSheet.create({\n      container: {\n        flex: 1, // 1:1\n        flexDirection: 'column',\n        backgroundColor: '#fff'\n      },\n      safeArea: {\n        flex: 1,\n        backgroundColor: '#fff'\n      },\n    });\n```\n\nIn the `ViewNews.js` file, we also import all the necessary components to build our interface. We create routing functions so we can navigate from page to page. The regex variable is a regular expression. We use it to remove some unwanted characters and symbols from our WordPress data.\n\nIn the `render()` function, we go ahead to fetch the data we stored in props from our `Home.js` and render it using our HTML component. The HTML component is used to render the data because the news item body sent from our WordPress API is sent with an HTML format and we can perform some extra functions like setting image size and dimensions, ignore styles, etc.\n\n## Using WordPress data\n\nTo build and compile our code:\n\n```\n    $ react-native run-ios\n    # If you want to build for android,you can use the command below\n    $ react-native run-android\n```\n\n\u003e If you are running this on your local host, chances are that you would get a network error. This is because `localhost` and `127.0.0.1`  would refer to the internal React native app. You should replace them with the public IP of your machine or tunnel your localhost via [ngrok](http://ngrok.io)\n\nIf you want to tunnel your WordPress app via ngrok, you can take the following steps:\n\n- Update ngrok (Ctrl+u when ngrok is running)\n- Adding the following two lines to `wp-config`:\n    define('WP_SITEURL', 'http://' . $_SERVER['HTTP_HOST']);\n    define('WP_HOME', 'http://' . $_SERVER['HTTP_HOST']);\n- Installing [https://wordpress.org/plugins/relative-url/](https://wordpress.org/plugins/relative-url/) in WordPress\n\nAfter the build is successful, your application should look like\n\n- Home Screen\n\n![rn-wordpress-home-screen](//images.ctfassets.net/1es3ne0caaid/5pGUcRLT20Gu0oAwE2UGgG/495aa971b6e8b3751dc15e6ab458bf70/rn-wordpress-home-screen.png)\n\n- Post Screen\n\n![rn-wordpress-post-screen](//images.ctfassets.net/1es3ne0caaid/QInEIkVm0MwcCeo2eSCiI/96fc05a31128c9fc16d54f7304aa73e1/rn-wordpress-post-screen.png)\n\n## Conclusion\n\nWe can see how easy it is to use our WordPress data in our mobile application using the WP REST API Plugin. Our data can be integrated with any mobile development framework and web development framework also.\n\nOur Music News app is simple right now, but you can go ahead to add some more styling and explore the Plugin documentation more to be able to build complex and robust applications on top of your WordPress data.\n\nThe code base to this tutorial is available in a publicly hosted [GitHub](https://github.com/samuelayo/wordpress_react_by_example) repository. Feel free to experiment around with it.","metaTitle":"Linking WordPress and React Native","metaDescription":"This tutorial discusses the pros and cons of using WordPress and React Native together, before walking through a practical build of a simple blogging app, supported by a WordPress API."}}],"defaultValue":"Android","queryType":"tag","pages":10,"route":"/tutorials","query":{"tag":"Android","page":"5"}}},"page":"/tutorials","query":{"tag":"Android","page":"5"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Android&page=5 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:36:32 GMT -->
</html>